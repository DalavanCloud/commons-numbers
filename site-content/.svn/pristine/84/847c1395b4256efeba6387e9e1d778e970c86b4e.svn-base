<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>NonLinearConjugateGradientOptimizerTest xref</title>
<link type="text/css" rel="stylesheet" href="../../../../../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../../../testapidocs/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Licensed to the Apache Software Foundation (ASF) under one or more</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> * contributor license agreements.  See the NOTICE file distributed with</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * this work for additional information regarding copyright ownership.</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * The ASF licenses this file to You under the Apache License, Version 2.0</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * (the "License"); you may not use this file except in compliance with</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> * the License.  You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *      <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  <strong class="jxr_keyword">package</strong> org.apache.commons.math3.optim.nonlinear.scalar.gradient;
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.analysis.MultivariateFunction;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.analysis.MultivariateVectorFunction;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.MathUnsupportedOperationException;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.linear.BlockRealMatrix;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.linear.RealMatrix;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.optim.PointValuePair;
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.optim.SimpleValueChecker;
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.optim.InitialGuess;
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.optim.MaxEval;
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.optim.SimpleBounds;
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction;
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.optim.nonlinear.scalar.GoalType;
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunctionGradient;
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <strong class="jxr_keyword">import</strong> org.junit.Assert;
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  <strong class="jxr_keyword">import</strong> org.junit.Test;
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L38" href="#L38">38</a>  <em class="jxr_javadoccomment"> * &lt;p&gt;Some of the unit tests are re-implementations of the MINPACK &lt;a</em>
<a class="jxr_linenumber" name="L39" href="#L39">39</a>  <em class="jxr_javadoccomment"> * href="<a href="http://www.netlib.org/minpack/ex/file17" target="alexandria_uri">http://www.netlib.org/minpack/ex/file17</a>"&gt;file17&lt;/a&gt; and &lt;a</em>
<a class="jxr_linenumber" name="L40" href="#L40">40</a>  <em class="jxr_javadoccomment"> * href="<a href="http://www.netlib.org/minpack/ex/file22" target="alexandria_uri">http://www.netlib.org/minpack/ex/file22</a>"&gt;file22&lt;/a&gt; test files.</em>
<a class="jxr_linenumber" name="L41" href="#L41">41</a>  <em class="jxr_javadoccomment"> * The redistribution policy for MINPACK is available &lt;a</em>
<a class="jxr_linenumber" name="L42" href="#L42">42</a>  <em class="jxr_javadoccomment"> * href="<a href="http://www.netlib.org/minpack/disclaimer" target="alexandria_uri">http://www.netlib.org/minpack/disclaimer</a>"&gt;here&lt;/a&gt;, for</em>
<a class="jxr_linenumber" name="L43" href="#L43">43</a>  <em class="jxr_javadoccomment"> * convenience, it is reproduced below.&lt;/p&gt;</em>
<a class="jxr_linenumber" name="L44" href="#L44">44</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L45" href="#L45">45</a>  <em class="jxr_javadoccomment"> * &lt;table border="0" width="80%" cellpadding="10" align="center" bgcolor="#E0E0E0"&gt;</em>
<a class="jxr_linenumber" name="L46" href="#L46">46</a>  <em class="jxr_javadoccomment"> * &lt;tr&gt;&lt;td&gt;</em>
<a class="jxr_linenumber" name="L47" href="#L47">47</a>  <em class="jxr_javadoccomment"> *    Minpack Copyright Notice (1999) University of Chicago.</em>
<a class="jxr_linenumber" name="L48" href="#L48">48</a>  <em class="jxr_javadoccomment"> *    All rights reserved</em>
<a class="jxr_linenumber" name="L49" href="#L49">49</a>  <em class="jxr_javadoccomment"> * &lt;/td&gt;&lt;/tr&gt;</em>
<a class="jxr_linenumber" name="L50" href="#L50">50</a>  <em class="jxr_javadoccomment"> * &lt;tr&gt;&lt;td&gt;</em>
<a class="jxr_linenumber" name="L51" href="#L51">51</a>  <em class="jxr_javadoccomment"> * Redistribution and use in source and binary forms, with or without</em>
<a class="jxr_linenumber" name="L52" href="#L52">52</a>  <em class="jxr_javadoccomment"> * modification, are permitted provided that the following conditions</em>
<a class="jxr_linenumber" name="L53" href="#L53">53</a>  <em class="jxr_javadoccomment"> * are met:</em>
<a class="jxr_linenumber" name="L54" href="#L54">54</a>  <em class="jxr_javadoccomment"> * &lt;ol&gt;</em>
<a class="jxr_linenumber" name="L55" href="#L55">55</a>  <em class="jxr_javadoccomment"> *  &lt;li&gt;Redistributions of source code must retain the above copyright</em>
<a class="jxr_linenumber" name="L56" href="#L56">56</a>  <em class="jxr_javadoccomment"> *      notice, this list of conditions and the following disclaimer.&lt;/li&gt;</em>
<a class="jxr_linenumber" name="L57" href="#L57">57</a>  <em class="jxr_javadoccomment"> * &lt;li&gt;Redistributions in binary form must reproduce the above</em>
<a class="jxr_linenumber" name="L58" href="#L58">58</a>  <em class="jxr_javadoccomment"> *     copyright notice, this list of conditions and the following</em>
<a class="jxr_linenumber" name="L59" href="#L59">59</a>  <em class="jxr_javadoccomment"> *     disclaimer in the documentation and/or other materials provided</em>
<a class="jxr_linenumber" name="L60" href="#L60">60</a>  <em class="jxr_javadoccomment"> *     with the distribution.&lt;/li&gt;</em>
<a class="jxr_linenumber" name="L61" href="#L61">61</a>  <em class="jxr_javadoccomment"> * &lt;li&gt;The end-user documentation included with the redistribution, if any,</em>
<a class="jxr_linenumber" name="L62" href="#L62">62</a>  <em class="jxr_javadoccomment"> *     must include the following acknowledgment:</em>
<a class="jxr_linenumber" name="L63" href="#L63">63</a>  <em class="jxr_javadoccomment"> *     &lt;code&gt;This product includes software developed by the University of</em>
<a class="jxr_linenumber" name="L64" href="#L64">64</a>  <em class="jxr_javadoccomment"> *           Chicago, as Operator of Argonne National Laboratory.&lt;/code&gt;</em>
<a class="jxr_linenumber" name="L65" href="#L65">65</a>  <em class="jxr_javadoccomment"> *     Alternately, this acknowledgment may appear in the software itself,</em>
<a class="jxr_linenumber" name="L66" href="#L66">66</a>  <em class="jxr_javadoccomment"> *     if and wherever such third-party acknowledgments normally appear.&lt;/li&gt;</em>
<a class="jxr_linenumber" name="L67" href="#L67">67</a>  <em class="jxr_javadoccomment"> * &lt;li&gt;&lt;strong&gt;WARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED "AS IS"</em>
<a class="jxr_linenumber" name="L68" href="#L68">68</a>  <em class="jxr_javadoccomment"> *     WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE</em>
<a class="jxr_linenumber" name="L69" href="#L69">69</a>  <em class="jxr_javadoccomment"> *     UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND</em>
<a class="jxr_linenumber" name="L70" href="#L70">70</a>  <em class="jxr_javadoccomment"> *     THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR</em>
<a class="jxr_linenumber" name="L71" href="#L71">71</a>  <em class="jxr_javadoccomment"> *     IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES</em>
<a class="jxr_linenumber" name="L72" href="#L72">72</a>  <em class="jxr_javadoccomment"> *     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE</em>
<a class="jxr_linenumber" name="L73" href="#L73">73</a>  <em class="jxr_javadoccomment"> *     OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY</em>
<a class="jxr_linenumber" name="L74" href="#L74">74</a>  <em class="jxr_javadoccomment"> *     OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR</em>
<a class="jxr_linenumber" name="L75" href="#L75">75</a>  <em class="jxr_javadoccomment"> *     USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF</em>
<a class="jxr_linenumber" name="L76" href="#L76">76</a>  <em class="jxr_javadoccomment"> *     THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)</em>
<a class="jxr_linenumber" name="L77" href="#L77">77</a>  <em class="jxr_javadoccomment"> *     DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION</em>
<a class="jxr_linenumber" name="L78" href="#L78">78</a>  <em class="jxr_javadoccomment"> *     UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL</em>
<a class="jxr_linenumber" name="L79" href="#L79">79</a>  <em class="jxr_javadoccomment"> *     BE CORRECTED.&lt;/strong&gt;&lt;/li&gt;</em>
<a class="jxr_linenumber" name="L80" href="#L80">80</a>  <em class="jxr_javadoccomment"> * &lt;li&gt;&lt;strong&gt;LIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT</em>
<a class="jxr_linenumber" name="L81" href="#L81">81</a>  <em class="jxr_javadoccomment"> *     HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF</em>
<a class="jxr_linenumber" name="L82" href="#L82">82</a>  <em class="jxr_javadoccomment"> *     ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,</em>
<a class="jxr_linenumber" name="L83" href="#L83">83</a>  <em class="jxr_javadoccomment"> *     INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF</em>
<a class="jxr_linenumber" name="L84" href="#L84">84</a>  <em class="jxr_javadoccomment"> *     ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF</em>
<a class="jxr_linenumber" name="L85" href="#L85">85</a>  <em class="jxr_javadoccomment"> *     PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER</em>
<a class="jxr_linenumber" name="L86" href="#L86">86</a>  <em class="jxr_javadoccomment"> *     SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT</em>
<a class="jxr_linenumber" name="L87" href="#L87">87</a>  <em class="jxr_javadoccomment"> *     (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,</em>
<a class="jxr_linenumber" name="L88" href="#L88">88</a>  <em class="jxr_javadoccomment"> *     EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE</em>
<a class="jxr_linenumber" name="L89" href="#L89">89</a>  <em class="jxr_javadoccomment"> *     POSSIBILITY OF SUCH LOSS OR DAMAGES.&lt;/strong&gt;&lt;/li&gt;</em>
<a class="jxr_linenumber" name="L90" href="#L90">90</a>  <em class="jxr_javadoccomment"> * &lt;ol&gt;&lt;/td&gt;&lt;/tr&gt;</em>
<a class="jxr_linenumber" name="L91" href="#L91">91</a>  <em class="jxr_javadoccomment"> * &lt;/table&gt;</em>
<a class="jxr_linenumber" name="L92" href="#L92">92</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L93" href="#L93">93</a>  <em class="jxr_javadoccomment"> * @author Argonne National Laboratory. MINPACK project. March 1980 (original fortran minpack tests)</em>
<a class="jxr_linenumber" name="L94" href="#L94">94</a>  <em class="jxr_javadoccomment"> * @author Burton S. Garbow (original fortran minpack tests)</em>
<a class="jxr_linenumber" name="L95" href="#L95">95</a>  <em class="jxr_javadoccomment"> * @author Kenneth E. Hillstrom (original fortran minpack tests)</em>
<a class="jxr_linenumber" name="L96" href="#L96">96</a>  <em class="jxr_javadoccomment"> * @author Jorge J. More (original fortran minpack tests)</em>
<a class="jxr_linenumber" name="L97" href="#L97">97</a>  <em class="jxr_javadoccomment"> * @author Luc Maisonobe (non-minpack tests and minpack tests Java translation)</em>
<a class="jxr_linenumber" name="L98" href="#L98">98</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L99" href="#L99">99</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../../../../org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.html">NonLinearConjugateGradientOptimizerTest</a> {
<a class="jxr_linenumber" name="L100" href="#L100">100</a>     @Test(expected=MathUnsupportedOperationException.<strong class="jxr_keyword">class</strong>)
<a class="jxr_linenumber" name="L101" href="#L101">101</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testBoundsUnsupported() {
<a class="jxr_linenumber" name="L102" href="#L102">102</a>         <a href="../../../../../../../../org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.html">LinearProblem</a> problem
<a class="jxr_linenumber" name="L103" href="#L103">103</a>             = <strong class="jxr_keyword">new</strong> <a href="../../../../../../../../org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.html">LinearProblem</a>(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[][] { { 2 } }, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 3 });
<a class="jxr_linenumber" name="L104" href="#L104">104</a>         NonLinearConjugateGradientOptimizer optimizer
<a class="jxr_linenumber" name="L105" href="#L105">105</a>             = <strong class="jxr_keyword">new</strong> NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,
<a class="jxr_linenumber" name="L106" href="#L106">106</a>                                                       <strong class="jxr_keyword">new</strong> SimpleValueChecker(1e-6, 1e-6),
<a class="jxr_linenumber" name="L107" href="#L107">107</a>                                                       1e-3, 1e-3, 1);
<a class="jxr_linenumber" name="L108" href="#L108">108</a>         optimizer.optimize(<strong class="jxr_keyword">new</strong> MaxEval(100),
<a class="jxr_linenumber" name="L109" href="#L109">109</a>                            problem.getObjectiveFunction(),
<a class="jxr_linenumber" name="L110" href="#L110">110</a>                            problem.getObjectiveFunctionGradient(),
<a class="jxr_linenumber" name="L111" href="#L111">111</a>                            GoalType.MINIMIZE,
<a class="jxr_linenumber" name="L112" href="#L112">112</a>                            <strong class="jxr_keyword">new</strong> InitialGuess(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0 }),
<a class="jxr_linenumber" name="L113" href="#L113">113</a>                            <strong class="jxr_keyword">new</strong> SimpleBounds(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { -1 },
<a class="jxr_linenumber" name="L114" href="#L114">114</a>                                             <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 1 }));
<a class="jxr_linenumber" name="L115" href="#L115">115</a>     }
<a class="jxr_linenumber" name="L116" href="#L116">116</a> 
<a class="jxr_linenumber" name="L117" href="#L117">117</a>     @Test
<a class="jxr_linenumber" name="L118" href="#L118">118</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testTrivial() {
<a class="jxr_linenumber" name="L119" href="#L119">119</a>         <a href="../../../../../../../../org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.html">LinearProblem</a> problem
<a class="jxr_linenumber" name="L120" href="#L120">120</a>             = <strong class="jxr_keyword">new</strong> <a href="../../../../../../../../org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.html">LinearProblem</a>(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[][] { { 2 } }, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 3 });
<a class="jxr_linenumber" name="L121" href="#L121">121</a>         NonLinearConjugateGradientOptimizer optimizer
<a class="jxr_linenumber" name="L122" href="#L122">122</a>             = <strong class="jxr_keyword">new</strong> NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,
<a class="jxr_linenumber" name="L123" href="#L123">123</a>                                                       <strong class="jxr_keyword">new</strong> SimpleValueChecker(1e-6, 1e-6),
<a class="jxr_linenumber" name="L124" href="#L124">124</a>                                                       1e-3, 1e-3, 1);
<a class="jxr_linenumber" name="L125" href="#L125">125</a>         PointValuePair optimum
<a class="jxr_linenumber" name="L126" href="#L126">126</a>             = optimizer.optimize(<strong class="jxr_keyword">new</strong> MaxEval(100),
<a class="jxr_linenumber" name="L127" href="#L127">127</a>                                  problem.getObjectiveFunction(),
<a class="jxr_linenumber" name="L128" href="#L128">128</a>                                  problem.getObjectiveFunctionGradient(),
<a class="jxr_linenumber" name="L129" href="#L129">129</a>                                  GoalType.MINIMIZE,
<a class="jxr_linenumber" name="L130" href="#L130">130</a>                                  <strong class="jxr_keyword">new</strong> InitialGuess(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0 }));
<a class="jxr_linenumber" name="L131" href="#L131">131</a>         Assert.assertEquals(1.5, optimum.getPoint()[0], 1.0e-10);
<a class="jxr_linenumber" name="L132" href="#L132">132</a>         Assert.assertEquals(0.0, optimum.getValue(), 1.0e-10);
<a class="jxr_linenumber" name="L133" href="#L133">133</a> 
<a class="jxr_linenumber" name="L134" href="#L134">134</a>         <em class="jxr_comment">// Check that the number of iterations is updated (MATH-949).</em>
<a class="jxr_linenumber" name="L135" href="#L135">135</a>         Assert.assertTrue(optimizer.getIterations() &gt; 0);
<a class="jxr_linenumber" name="L136" href="#L136">136</a>     }
<a class="jxr_linenumber" name="L137" href="#L137">137</a> 
<a class="jxr_linenumber" name="L138" href="#L138">138</a>     @Test
<a class="jxr_linenumber" name="L139" href="#L139">139</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testColumnsPermutation() {
<a class="jxr_linenumber" name="L140" href="#L140">140</a>         <a href="../../../../../../../../org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.html">LinearProblem</a> problem
<a class="jxr_linenumber" name="L141" href="#L141">141</a>             = <strong class="jxr_keyword">new</strong> <a href="../../../../../../../../org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.html">LinearProblem</a>(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[][] { { 1.0, -1.0 }, { 0.0, 2.0 }, { 1.0, -2.0 } },
<a class="jxr_linenumber" name="L142" href="#L142">142</a>                                 <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 4.0, 6.0, 1.0 });
<a class="jxr_linenumber" name="L143" href="#L143">143</a> 
<a class="jxr_linenumber" name="L144" href="#L144">144</a>         NonLinearConjugateGradientOptimizer optimizer
<a class="jxr_linenumber" name="L145" href="#L145">145</a>             = <strong class="jxr_keyword">new</strong> NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,
<a class="jxr_linenumber" name="L146" href="#L146">146</a>                                                       <strong class="jxr_keyword">new</strong> SimpleValueChecker(1e-6, 1e-6),
<a class="jxr_linenumber" name="L147" href="#L147">147</a>                                                       1e-3, 1e-3, 1);
<a class="jxr_linenumber" name="L148" href="#L148">148</a>         PointValuePair optimum
<a class="jxr_linenumber" name="L149" href="#L149">149</a>             = optimizer.optimize(<strong class="jxr_keyword">new</strong> MaxEval(100),
<a class="jxr_linenumber" name="L150" href="#L150">150</a>                                  problem.getObjectiveFunction(),
<a class="jxr_linenumber" name="L151" href="#L151">151</a>                                  problem.getObjectiveFunctionGradient(),
<a class="jxr_linenumber" name="L152" href="#L152">152</a>                                  GoalType.MINIMIZE,
<a class="jxr_linenumber" name="L153" href="#L153">153</a>                                  <strong class="jxr_keyword">new</strong> InitialGuess(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0, 0 }));
<a class="jxr_linenumber" name="L154" href="#L154">154</a>         Assert.assertEquals(7.0, optimum.getPoint()[0], 1.0e-10);
<a class="jxr_linenumber" name="L155" href="#L155">155</a>         Assert.assertEquals(3.0, optimum.getPoint()[1], 1.0e-10);
<a class="jxr_linenumber" name="L156" href="#L156">156</a>         Assert.assertEquals(0.0, optimum.getValue(), 1.0e-10);
<a class="jxr_linenumber" name="L157" href="#L157">157</a> 
<a class="jxr_linenumber" name="L158" href="#L158">158</a>     }
<a class="jxr_linenumber" name="L159" href="#L159">159</a> 
<a class="jxr_linenumber" name="L160" href="#L160">160</a>     @Test
<a class="jxr_linenumber" name="L161" href="#L161">161</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testNoDependency() {
<a class="jxr_linenumber" name="L162" href="#L162">162</a>         <a href="../../../../../../../../org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.html">LinearProblem</a> problem = <strong class="jxr_keyword">new</strong> <a href="../../../../../../../../org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.html">LinearProblem</a>(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[][] {
<a class="jxr_linenumber" name="L163" href="#L163">163</a>                 { 2, 0, 0, 0, 0, 0 },
<a class="jxr_linenumber" name="L164" href="#L164">164</a>                 { 0, 2, 0, 0, 0, 0 },
<a class="jxr_linenumber" name="L165" href="#L165">165</a>                 { 0, 0, 2, 0, 0, 0 },
<a class="jxr_linenumber" name="L166" href="#L166">166</a>                 { 0, 0, 0, 2, 0, 0 },
<a class="jxr_linenumber" name="L167" href="#L167">167</a>                 { 0, 0, 0, 0, 2, 0 },
<a class="jxr_linenumber" name="L168" href="#L168">168</a>                 { 0, 0, 0, 0, 0, 2 }
<a class="jxr_linenumber" name="L169" href="#L169">169</a>         }, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0.0, 1.1, 2.2, 3.3, 4.4, 5.5 });
<a class="jxr_linenumber" name="L170" href="#L170">170</a>         NonLinearConjugateGradientOptimizer optimizer
<a class="jxr_linenumber" name="L171" href="#L171">171</a>             = <strong class="jxr_keyword">new</strong> NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,
<a class="jxr_linenumber" name="L172" href="#L172">172</a>                                                       <strong class="jxr_keyword">new</strong> SimpleValueChecker(1e-6, 1e-6),
<a class="jxr_linenumber" name="L173" href="#L173">173</a>                                                       1e-3, 1e-3, 1);
<a class="jxr_linenumber" name="L174" href="#L174">174</a>         PointValuePair optimum
<a class="jxr_linenumber" name="L175" href="#L175">175</a>             = optimizer.optimize(<strong class="jxr_keyword">new</strong> MaxEval(100),
<a class="jxr_linenumber" name="L176" href="#L176">176</a>                                  problem.getObjectiveFunction(),
<a class="jxr_linenumber" name="L177" href="#L177">177</a>                                  problem.getObjectiveFunctionGradient(),
<a class="jxr_linenumber" name="L178" href="#L178">178</a>                                  GoalType.MINIMIZE,
<a class="jxr_linenumber" name="L179" href="#L179">179</a>                                  <strong class="jxr_keyword">new</strong> InitialGuess(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0, 0, 0, 0, 0, 0 }));
<a class="jxr_linenumber" name="L180" href="#L180">180</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; problem.target.length; ++i) {
<a class="jxr_linenumber" name="L181" href="#L181">181</a>             Assert.assertEquals(0.55 * i, optimum.getPoint()[i], 1.0e-10);
<a class="jxr_linenumber" name="L182" href="#L182">182</a>         }
<a class="jxr_linenumber" name="L183" href="#L183">183</a>     }
<a class="jxr_linenumber" name="L184" href="#L184">184</a> 
<a class="jxr_linenumber" name="L185" href="#L185">185</a>     @Test
<a class="jxr_linenumber" name="L186" href="#L186">186</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testOneSet() {
<a class="jxr_linenumber" name="L187" href="#L187">187</a>         <a href="../../../../../../../../org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.html">LinearProblem</a> problem = <strong class="jxr_keyword">new</strong> <a href="../../../../../../../../org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.html">LinearProblem</a>(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[][] {
<a class="jxr_linenumber" name="L188" href="#L188">188</a>                 {  1,  0, 0 },
<a class="jxr_linenumber" name="L189" href="#L189">189</a>                 { -1,  1, 0 },
<a class="jxr_linenumber" name="L190" href="#L190">190</a>                 {  0, -1, 1 }
<a class="jxr_linenumber" name="L191" href="#L191">191</a>         }, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 1, 1, 1});
<a class="jxr_linenumber" name="L192" href="#L192">192</a>         NonLinearConjugateGradientOptimizer optimizer
<a class="jxr_linenumber" name="L193" href="#L193">193</a>             = <strong class="jxr_keyword">new</strong> NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,
<a class="jxr_linenumber" name="L194" href="#L194">194</a>                                                       <strong class="jxr_keyword">new</strong> SimpleValueChecker(1e-6, 1e-6),
<a class="jxr_linenumber" name="L195" href="#L195">195</a>                                                       1e-3, 1e-3, 1);
<a class="jxr_linenumber" name="L196" href="#L196">196</a>         PointValuePair optimum
<a class="jxr_linenumber" name="L197" href="#L197">197</a>             = optimizer.optimize(<strong class="jxr_keyword">new</strong> MaxEval(100),
<a class="jxr_linenumber" name="L198" href="#L198">198</a>                                  problem.getObjectiveFunction(),
<a class="jxr_linenumber" name="L199" href="#L199">199</a>                                  problem.getObjectiveFunctionGradient(),
<a class="jxr_linenumber" name="L200" href="#L200">200</a>                                  GoalType.MINIMIZE,
<a class="jxr_linenumber" name="L201" href="#L201">201</a>                                  <strong class="jxr_keyword">new</strong> InitialGuess(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0, 0, 0 }));
<a class="jxr_linenumber" name="L202" href="#L202">202</a>         Assert.assertEquals(1.0, optimum.getPoint()[0], 1.0e-10);
<a class="jxr_linenumber" name="L203" href="#L203">203</a>         Assert.assertEquals(2.0, optimum.getPoint()[1], 1.0e-10);
<a class="jxr_linenumber" name="L204" href="#L204">204</a>         Assert.assertEquals(3.0, optimum.getPoint()[2], 1.0e-10);
<a class="jxr_linenumber" name="L205" href="#L205">205</a> 
<a class="jxr_linenumber" name="L206" href="#L206">206</a>     }
<a class="jxr_linenumber" name="L207" href="#L207">207</a> 
<a class="jxr_linenumber" name="L208" href="#L208">208</a>     @Test
<a class="jxr_linenumber" name="L209" href="#L209">209</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testTwoSets() {
<a class="jxr_linenumber" name="L210" href="#L210">210</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> epsilon = 1.0e-7;
<a class="jxr_linenumber" name="L211" href="#L211">211</a>         <a href="../../../../../../../../org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.html">LinearProblem</a> problem = <strong class="jxr_keyword">new</strong> <a href="../../../../../../../../org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.html">LinearProblem</a>(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[][] {
<a class="jxr_linenumber" name="L212" href="#L212">212</a>                 {  2,  1,   0,  4,       0, 0 },
<a class="jxr_linenumber" name="L213" href="#L213">213</a>                 { -4, -2,   3, -7,       0, 0 },
<a class="jxr_linenumber" name="L214" href="#L214">214</a>                 {  4,  1,  -2,  8,       0, 0 },
<a class="jxr_linenumber" name="L215" href="#L215">215</a>                 {  0, -3, -12, -1,       0, 0 },
<a class="jxr_linenumber" name="L216" href="#L216">216</a>                 {  0,  0,   0,  0, epsilon, 1 },
<a class="jxr_linenumber" name="L217" href="#L217">217</a>                 {  0,  0,   0,  0,       1, 1 }
<a class="jxr_linenumber" name="L218" href="#L218">218</a>         }, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 2, -9, 2, 2, 1 + epsilon * epsilon, 2});
<a class="jxr_linenumber" name="L219" href="#L219">219</a> 
<a class="jxr_linenumber" name="L220" href="#L220">220</a>         <strong class="jxr_keyword">final</strong> Preconditioner preconditioner
<a class="jxr_linenumber" name="L221" href="#L221">221</a>             = <strong class="jxr_keyword">new</strong> Preconditioner() {
<a class="jxr_linenumber" name="L222" href="#L222">222</a>                     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">double</strong>[] precondition(<strong class="jxr_keyword">double</strong>[] point, <strong class="jxr_keyword">double</strong>[] r) {
<a class="jxr_linenumber" name="L223" href="#L223">223</a>                         <strong class="jxr_keyword">double</strong>[] d = r.clone();
<a class="jxr_linenumber" name="L224" href="#L224">224</a>                         d[0] /=  72.0;
<a class="jxr_linenumber" name="L225" href="#L225">225</a>                         d[1] /=  30.0;
<a class="jxr_linenumber" name="L226" href="#L226">226</a>                         d[2] /= 314.0;
<a class="jxr_linenumber" name="L227" href="#L227">227</a>                         d[3] /= 260.0;
<a class="jxr_linenumber" name="L228" href="#L228">228</a>                         d[4] /= 2 * (1 + epsilon * epsilon);
<a class="jxr_linenumber" name="L229" href="#L229">229</a>                         d[5] /= 4.0;
<a class="jxr_linenumber" name="L230" href="#L230">230</a>                         <strong class="jxr_keyword">return</strong> d;
<a class="jxr_linenumber" name="L231" href="#L231">231</a>                     }
<a class="jxr_linenumber" name="L232" href="#L232">232</a>                 };
<a class="jxr_linenumber" name="L233" href="#L233">233</a> 
<a class="jxr_linenumber" name="L234" href="#L234">234</a>         NonLinearConjugateGradientOptimizer optimizer
<a class="jxr_linenumber" name="L235" href="#L235">235</a>            = <strong class="jxr_keyword">new</strong> NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,
<a class="jxr_linenumber" name="L236" href="#L236">236</a>                                                      <strong class="jxr_keyword">new</strong> SimpleValueChecker(1e-13, 1e-13),
<a class="jxr_linenumber" name="L237" href="#L237">237</a>                                                      1e-7, 1e-7, 1,
<a class="jxr_linenumber" name="L238" href="#L238">238</a>                                                      preconditioner);
<a class="jxr_linenumber" name="L239" href="#L239">239</a> 
<a class="jxr_linenumber" name="L240" href="#L240">240</a>         PointValuePair optimum
<a class="jxr_linenumber" name="L241" href="#L241">241</a>             = optimizer.optimize(<strong class="jxr_keyword">new</strong> MaxEval(100),
<a class="jxr_linenumber" name="L242" href="#L242">242</a>                                  problem.getObjectiveFunction(),
<a class="jxr_linenumber" name="L243" href="#L243">243</a>                                  problem.getObjectiveFunctionGradient(),
<a class="jxr_linenumber" name="L244" href="#L244">244</a>                                  GoalType.MINIMIZE,
<a class="jxr_linenumber" name="L245" href="#L245">245</a>                                  <strong class="jxr_keyword">new</strong> InitialGuess(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0, 0, 0, 0, 0, 0 }));
<a class="jxr_linenumber" name="L246" href="#L246">246</a> 
<a class="jxr_linenumber" name="L247" href="#L247">247</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] result = optimum.getPoint();
<a class="jxr_linenumber" name="L248" href="#L248">248</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] expected = {3, 4, -1, -2, 1 + epsilon, 1 - epsilon};
<a class="jxr_linenumber" name="L249" href="#L249">249</a> 
<a class="jxr_linenumber" name="L250" href="#L250">250</a>         Assert.assertEquals(expected[0], result[0], 1.0e-7);
<a class="jxr_linenumber" name="L251" href="#L251">251</a>         Assert.assertEquals(expected[1], result[1], 1.0e-7);
<a class="jxr_linenumber" name="L252" href="#L252">252</a>         Assert.assertEquals(expected[2], result[2], 1.0e-9);
<a class="jxr_linenumber" name="L253" href="#L253">253</a>         Assert.assertEquals(expected[3], result[3], 1.0e-8);
<a class="jxr_linenumber" name="L254" href="#L254">254</a>         Assert.assertEquals(expected[4] + epsilon, result[4], 1.0e-6);
<a class="jxr_linenumber" name="L255" href="#L255">255</a>         Assert.assertEquals(expected[5] - epsilon, result[5], 1.0e-6);
<a class="jxr_linenumber" name="L256" href="#L256">256</a> 
<a class="jxr_linenumber" name="L257" href="#L257">257</a>     }
<a class="jxr_linenumber" name="L258" href="#L258">258</a> 
<a class="jxr_linenumber" name="L259" href="#L259">259</a>     @Test
<a class="jxr_linenumber" name="L260" href="#L260">260</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testNonInversible() {
<a class="jxr_linenumber" name="L261" href="#L261">261</a>         <a href="../../../../../../../../org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.html">LinearProblem</a> problem = <strong class="jxr_keyword">new</strong> <a href="../../../../../../../../org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.html">LinearProblem</a>(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[][] {
<a class="jxr_linenumber" name="L262" href="#L262">262</a>                 {  1, 2, -3 },
<a class="jxr_linenumber" name="L263" href="#L263">263</a>                 {  2, 1,  3 },
<a class="jxr_linenumber" name="L264" href="#L264">264</a>                 { -3, 0, -9 }
<a class="jxr_linenumber" name="L265" href="#L265">265</a>         }, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 1, 1, 1 });
<a class="jxr_linenumber" name="L266" href="#L266">266</a>         NonLinearConjugateGradientOptimizer optimizer
<a class="jxr_linenumber" name="L267" href="#L267">267</a>             = <strong class="jxr_keyword">new</strong> NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,
<a class="jxr_linenumber" name="L268" href="#L268">268</a>                                                       <strong class="jxr_keyword">new</strong> SimpleValueChecker(1e-6, 1e-6),
<a class="jxr_linenumber" name="L269" href="#L269">269</a>                                                       1e-3, 1e-3, 1);
<a class="jxr_linenumber" name="L270" href="#L270">270</a>         PointValuePair optimum
<a class="jxr_linenumber" name="L271" href="#L271">271</a>             = optimizer.optimize(<strong class="jxr_keyword">new</strong> MaxEval(100),
<a class="jxr_linenumber" name="L272" href="#L272">272</a>                                  problem.getObjectiveFunction(),
<a class="jxr_linenumber" name="L273" href="#L273">273</a>                                  problem.getObjectiveFunctionGradient(),
<a class="jxr_linenumber" name="L274" href="#L274">274</a>                                  GoalType.MINIMIZE,
<a class="jxr_linenumber" name="L275" href="#L275">275</a>                                  <strong class="jxr_keyword">new</strong> InitialGuess(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0, 0, 0 }));
<a class="jxr_linenumber" name="L276" href="#L276">276</a>         Assert.assertTrue(optimum.getValue() &gt; 0.5);
<a class="jxr_linenumber" name="L277" href="#L277">277</a>     }
<a class="jxr_linenumber" name="L278" href="#L278">278</a> 
<a class="jxr_linenumber" name="L279" href="#L279">279</a>     @Test
<a class="jxr_linenumber" name="L280" href="#L280">280</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testIllConditioned() {
<a class="jxr_linenumber" name="L281" href="#L281">281</a>         <a href="../../../../../../../../org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.html">LinearProblem</a> problem1 = <strong class="jxr_keyword">new</strong> <a href="../../../../../../../../org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.html">LinearProblem</a>(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[][] {
<a class="jxr_linenumber" name="L282" href="#L282">282</a>                 { 10.0, 7.0,  8.0,  7.0 },
<a class="jxr_linenumber" name="L283" href="#L283">283</a>                 {  7.0, 5.0,  6.0,  5.0 },
<a class="jxr_linenumber" name="L284" href="#L284">284</a>                 {  8.0, 6.0, 10.0,  9.0 },
<a class="jxr_linenumber" name="L285" href="#L285">285</a>                 {  7.0, 5.0,  9.0, 10.0 }
<a class="jxr_linenumber" name="L286" href="#L286">286</a>         }, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 32, 23, 33, 31 });
<a class="jxr_linenumber" name="L287" href="#L287">287</a>         NonLinearConjugateGradientOptimizer optimizer
<a class="jxr_linenumber" name="L288" href="#L288">288</a>             = <strong class="jxr_keyword">new</strong> NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,
<a class="jxr_linenumber" name="L289" href="#L289">289</a>                                                       <strong class="jxr_keyword">new</strong> SimpleValueChecker(1e-13, 1e-13),
<a class="jxr_linenumber" name="L290" href="#L290">290</a>                                                       1e-15, 1e-15, 1);
<a class="jxr_linenumber" name="L291" href="#L291">291</a>         PointValuePair optimum1
<a class="jxr_linenumber" name="L292" href="#L292">292</a>             = optimizer.optimize(<strong class="jxr_keyword">new</strong> MaxEval(200),
<a class="jxr_linenumber" name="L293" href="#L293">293</a>                                  problem1.getObjectiveFunction(),
<a class="jxr_linenumber" name="L294" href="#L294">294</a>                                  problem1.getObjectiveFunctionGradient(),
<a class="jxr_linenumber" name="L295" href="#L295">295</a>                                  GoalType.MINIMIZE,
<a class="jxr_linenumber" name="L296" href="#L296">296</a>                                  <strong class="jxr_keyword">new</strong> InitialGuess(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0, 1, 2, 3 }));
<a class="jxr_linenumber" name="L297" href="#L297">297</a>         Assert.assertEquals(1.0, optimum1.getPoint()[0], 1.0e-4);
<a class="jxr_linenumber" name="L298" href="#L298">298</a>         Assert.assertEquals(1.0, optimum1.getPoint()[1], 1.0e-3);
<a class="jxr_linenumber" name="L299" href="#L299">299</a>         Assert.assertEquals(1.0, optimum1.getPoint()[2], 1.0e-4);
<a class="jxr_linenumber" name="L300" href="#L300">300</a>         Assert.assertEquals(1.0, optimum1.getPoint()[3], 1.0e-4);
<a class="jxr_linenumber" name="L301" href="#L301">301</a> 
<a class="jxr_linenumber" name="L302" href="#L302">302</a>         <a href="../../../../../../../../org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.html">LinearProblem</a> problem2 = <strong class="jxr_keyword">new</strong> <a href="../../../../../../../../org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.html">LinearProblem</a>(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[][] {
<a class="jxr_linenumber" name="L303" href="#L303">303</a>                 { 10.00, 7.00, 8.10, 7.20 },
<a class="jxr_linenumber" name="L304" href="#L304">304</a>                 {  7.08, 5.04, 6.00, 5.00 },
<a class="jxr_linenumber" name="L305" href="#L305">305</a>                 {  8.00, 5.98, 9.89, 9.00 },
<a class="jxr_linenumber" name="L306" href="#L306">306</a>                 {  6.99, 4.99, 9.00, 9.98 }
<a class="jxr_linenumber" name="L307" href="#L307">307</a>         }, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 32, 23, 33, 31 });
<a class="jxr_linenumber" name="L308" href="#L308">308</a>         PointValuePair optimum2
<a class="jxr_linenumber" name="L309" href="#L309">309</a>             = optimizer.optimize(<strong class="jxr_keyword">new</strong> MaxEval(200),
<a class="jxr_linenumber" name="L310" href="#L310">310</a>                                  problem2.getObjectiveFunction(),
<a class="jxr_linenumber" name="L311" href="#L311">311</a>                                  problem2.getObjectiveFunctionGradient(),
<a class="jxr_linenumber" name="L312" href="#L312">312</a>                                  GoalType.MINIMIZE,
<a class="jxr_linenumber" name="L313" href="#L313">313</a>                                  <strong class="jxr_keyword">new</strong> InitialGuess(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0, 1, 2, 3 }));
<a class="jxr_linenumber" name="L314" href="#L314">314</a> 
<a class="jxr_linenumber" name="L315" href="#L315">315</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] result2 = optimum2.getPoint();
<a class="jxr_linenumber" name="L316" href="#L316">316</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] expected2 = {-81, 137, -34, 22};
<a class="jxr_linenumber" name="L317" href="#L317">317</a> 
<a class="jxr_linenumber" name="L318" href="#L318">318</a>         Assert.assertEquals(expected2[0], result2[0], 2);
<a class="jxr_linenumber" name="L319" href="#L319">319</a>         Assert.assertEquals(expected2[1], result2[1], 4);
<a class="jxr_linenumber" name="L320" href="#L320">320</a>         Assert.assertEquals(expected2[2], result2[2], 1);
<a class="jxr_linenumber" name="L321" href="#L321">321</a>         Assert.assertEquals(expected2[3], result2[3], 1);
<a class="jxr_linenumber" name="L322" href="#L322">322</a>     }
<a class="jxr_linenumber" name="L323" href="#L323">323</a> 
<a class="jxr_linenumber" name="L324" href="#L324">324</a>     @Test
<a class="jxr_linenumber" name="L325" href="#L325">325</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testMoreEstimatedParametersSimple() {
<a class="jxr_linenumber" name="L326" href="#L326">326</a>         <a href="../../../../../../../../org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.html">LinearProblem</a> problem = <strong class="jxr_keyword">new</strong> <a href="../../../../../../../../org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.html">LinearProblem</a>(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[][] {
<a class="jxr_linenumber" name="L327" href="#L327">327</a>                 { 3.0, 2.0,  0.0, 0.0 },
<a class="jxr_linenumber" name="L328" href="#L328">328</a>                 { 0.0, 1.0, -1.0, 1.0 },
<a class="jxr_linenumber" name="L329" href="#L329">329</a>                 { 2.0, 0.0,  1.0, 0.0 }
<a class="jxr_linenumber" name="L330" href="#L330">330</a>         }, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 7.0, 3.0, 5.0 });
<a class="jxr_linenumber" name="L331" href="#L331">331</a> 
<a class="jxr_linenumber" name="L332" href="#L332">332</a>         NonLinearConjugateGradientOptimizer optimizer
<a class="jxr_linenumber" name="L333" href="#L333">333</a>             = <strong class="jxr_keyword">new</strong> NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,
<a class="jxr_linenumber" name="L334" href="#L334">334</a>                                                       <strong class="jxr_keyword">new</strong> SimpleValueChecker(1e-6, 1e-6),
<a class="jxr_linenumber" name="L335" href="#L335">335</a>                                                       1e-3, 1e-3, 1);
<a class="jxr_linenumber" name="L336" href="#L336">336</a>         PointValuePair optimum
<a class="jxr_linenumber" name="L337" href="#L337">337</a>             = optimizer.optimize(<strong class="jxr_keyword">new</strong> MaxEval(100),
<a class="jxr_linenumber" name="L338" href="#L338">338</a>                                  problem.getObjectiveFunction(),
<a class="jxr_linenumber" name="L339" href="#L339">339</a>                                  problem.getObjectiveFunctionGradient(),
<a class="jxr_linenumber" name="L340" href="#L340">340</a>                                  GoalType.MINIMIZE,
<a class="jxr_linenumber" name="L341" href="#L341">341</a>                                  <strong class="jxr_keyword">new</strong> InitialGuess(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 7, 6, 5, 4 }));
<a class="jxr_linenumber" name="L342" href="#L342">342</a>         Assert.assertEquals(0, optimum.getValue(), 1.0e-10);
<a class="jxr_linenumber" name="L343" href="#L343">343</a> 
<a class="jxr_linenumber" name="L344" href="#L344">344</a>     }
<a class="jxr_linenumber" name="L345" href="#L345">345</a> 
<a class="jxr_linenumber" name="L346" href="#L346">346</a>     @Test
<a class="jxr_linenumber" name="L347" href="#L347">347</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testMoreEstimatedParametersUnsorted() {
<a class="jxr_linenumber" name="L348" href="#L348">348</a>         <a href="../../../../../../../../org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.html">LinearProblem</a> problem = <strong class="jxr_keyword">new</strong> <a href="../../../../../../../../org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.html">LinearProblem</a>(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[][] {
<a class="jxr_linenumber" name="L349" href="#L349">349</a>                  { 1.0, 1.0,  0.0,  0.0, 0.0,  0.0 },
<a class="jxr_linenumber" name="L350" href="#L350">350</a>                  { 0.0, 0.0,  1.0,  1.0, 1.0,  0.0 },
<a class="jxr_linenumber" name="L351" href="#L351">351</a>                  { 0.0, 0.0,  0.0,  0.0, 1.0, -1.0 },
<a class="jxr_linenumber" name="L352" href="#L352">352</a>                  { 0.0, 0.0, -1.0,  1.0, 0.0,  1.0 },
<a class="jxr_linenumber" name="L353" href="#L353">353</a>                  { 0.0, 0.0,  0.0, -1.0, 1.0,  0.0 }
<a class="jxr_linenumber" name="L354" href="#L354">354</a>         }, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 3.0, 12.0, -1.0, 7.0, 1.0 });
<a class="jxr_linenumber" name="L355" href="#L355">355</a>         NonLinearConjugateGradientOptimizer optimizer
<a class="jxr_linenumber" name="L356" href="#L356">356</a>            = <strong class="jxr_keyword">new</strong> NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,
<a class="jxr_linenumber" name="L357" href="#L357">357</a>                                                      <strong class="jxr_keyword">new</strong> SimpleValueChecker(1e-6, 1e-6),
<a class="jxr_linenumber" name="L358" href="#L358">358</a>                                                      1e-3, 1e-3, 1);
<a class="jxr_linenumber" name="L359" href="#L359">359</a>         PointValuePair optimum
<a class="jxr_linenumber" name="L360" href="#L360">360</a>             = optimizer.optimize(<strong class="jxr_keyword">new</strong> MaxEval(100),
<a class="jxr_linenumber" name="L361" href="#L361">361</a>                                  problem.getObjectiveFunction(),
<a class="jxr_linenumber" name="L362" href="#L362">362</a>                                  problem.getObjectiveFunctionGradient(),
<a class="jxr_linenumber" name="L363" href="#L363">363</a>                                  GoalType.MINIMIZE,
<a class="jxr_linenumber" name="L364" href="#L364">364</a>                                  <strong class="jxr_keyword">new</strong> InitialGuess(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 2, 2, 2, 2, 2, 2 }));
<a class="jxr_linenumber" name="L365" href="#L365">365</a>         Assert.assertEquals(0, optimum.getValue(), 1.0e-10);
<a class="jxr_linenumber" name="L366" href="#L366">366</a>     }
<a class="jxr_linenumber" name="L367" href="#L367">367</a> 
<a class="jxr_linenumber" name="L368" href="#L368">368</a>     @Test
<a class="jxr_linenumber" name="L369" href="#L369">369</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testRedundantEquations() {
<a class="jxr_linenumber" name="L370" href="#L370">370</a>         <a href="../../../../../../../../org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.html">LinearProblem</a> problem = <strong class="jxr_keyword">new</strong> <a href="../../../../../../../../org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.html">LinearProblem</a>(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[][] {
<a class="jxr_linenumber" name="L371" href="#L371">371</a>                 { 1.0,  1.0 },
<a class="jxr_linenumber" name="L372" href="#L372">372</a>                 { 1.0, -1.0 },
<a class="jxr_linenumber" name="L373" href="#L373">373</a>                 { 1.0,  3.0 }
<a class="jxr_linenumber" name="L374" href="#L374">374</a>         }, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 3.0, 1.0, 5.0 });
<a class="jxr_linenumber" name="L375" href="#L375">375</a> 
<a class="jxr_linenumber" name="L376" href="#L376">376</a>         NonLinearConjugateGradientOptimizer optimizer
<a class="jxr_linenumber" name="L377" href="#L377">377</a>             = <strong class="jxr_keyword">new</strong> NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,
<a class="jxr_linenumber" name="L378" href="#L378">378</a>                                                       <strong class="jxr_keyword">new</strong> SimpleValueChecker(1e-6, 1e-6),
<a class="jxr_linenumber" name="L379" href="#L379">379</a>                                                       1e-3, 1e-3, 1);
<a class="jxr_linenumber" name="L380" href="#L380">380</a>         PointValuePair optimum
<a class="jxr_linenumber" name="L381" href="#L381">381</a>             = optimizer.optimize(<strong class="jxr_keyword">new</strong> MaxEval(100),
<a class="jxr_linenumber" name="L382" href="#L382">382</a>                                  problem.getObjectiveFunction(),
<a class="jxr_linenumber" name="L383" href="#L383">383</a>                                  problem.getObjectiveFunctionGradient(),
<a class="jxr_linenumber" name="L384" href="#L384">384</a>                                  GoalType.MINIMIZE,
<a class="jxr_linenumber" name="L385" href="#L385">385</a>                                  <strong class="jxr_keyword">new</strong> InitialGuess(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 1, 1 }));
<a class="jxr_linenumber" name="L386" href="#L386">386</a>         Assert.assertEquals(2.0, optimum.getPoint()[0], 1.0e-8);
<a class="jxr_linenumber" name="L387" href="#L387">387</a>         Assert.assertEquals(1.0, optimum.getPoint()[1], 1.0e-8);
<a class="jxr_linenumber" name="L388" href="#L388">388</a> 
<a class="jxr_linenumber" name="L389" href="#L389">389</a>     }
<a class="jxr_linenumber" name="L390" href="#L390">390</a> 
<a class="jxr_linenumber" name="L391" href="#L391">391</a>     @Test
<a class="jxr_linenumber" name="L392" href="#L392">392</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testInconsistentEquations() {
<a class="jxr_linenumber" name="L393" href="#L393">393</a>         <a href="../../../../../../../../org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.html">LinearProblem</a> problem = <strong class="jxr_keyword">new</strong> <a href="../../../../../../../../org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.html">LinearProblem</a>(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[][] {
<a class="jxr_linenumber" name="L394" href="#L394">394</a>                 { 1.0,  1.0 },
<a class="jxr_linenumber" name="L395" href="#L395">395</a>                 { 1.0, -1.0 },
<a class="jxr_linenumber" name="L396" href="#L396">396</a>                 { 1.0,  3.0 }
<a class="jxr_linenumber" name="L397" href="#L397">397</a>         }, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 3.0, 1.0, 4.0 });
<a class="jxr_linenumber" name="L398" href="#L398">398</a> 
<a class="jxr_linenumber" name="L399" href="#L399">399</a>         NonLinearConjugateGradientOptimizer optimizer
<a class="jxr_linenumber" name="L400" href="#L400">400</a>             = <strong class="jxr_keyword">new</strong> NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,
<a class="jxr_linenumber" name="L401" href="#L401">401</a>                                                       <strong class="jxr_keyword">new</strong> SimpleValueChecker(1e-6, 1e-6),
<a class="jxr_linenumber" name="L402" href="#L402">402</a>                                                       1e-3, 1e-3, 1);
<a class="jxr_linenumber" name="L403" href="#L403">403</a>         PointValuePair optimum
<a class="jxr_linenumber" name="L404" href="#L404">404</a>             = optimizer.optimize(<strong class="jxr_keyword">new</strong> MaxEval(100),
<a class="jxr_linenumber" name="L405" href="#L405">405</a>                                  problem.getObjectiveFunction(),
<a class="jxr_linenumber" name="L406" href="#L406">406</a>                                  problem.getObjectiveFunctionGradient(),
<a class="jxr_linenumber" name="L407" href="#L407">407</a>                                  GoalType.MINIMIZE,
<a class="jxr_linenumber" name="L408" href="#L408">408</a>                                  <strong class="jxr_keyword">new</strong> InitialGuess(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 1, 1 }));
<a class="jxr_linenumber" name="L409" href="#L409">409</a>         Assert.assertTrue(optimum.getValue() &gt; 0.1);
<a class="jxr_linenumber" name="L410" href="#L410">410</a> 
<a class="jxr_linenumber" name="L411" href="#L411">411</a>     }
<a class="jxr_linenumber" name="L412" href="#L412">412</a> 
<a class="jxr_linenumber" name="L413" href="#L413">413</a>     @Test
<a class="jxr_linenumber" name="L414" href="#L414">414</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testCircleFitting() {
<a class="jxr_linenumber" name="L415" href="#L415">415</a>         <a href="../../../../../../../../org/apache/commons/math3/optim/nonlinear/scalar/gradient/CircleScalar.html">CircleScalar</a> problem = <strong class="jxr_keyword">new</strong> <a href="../../../../../../../../org/apache/commons/math3/optim/nonlinear/scalar/gradient/CircleScalar.html">CircleScalar</a>();
<a class="jxr_linenumber" name="L416" href="#L416">416</a>         problem.addPoint( 30.0,  68.0);
<a class="jxr_linenumber" name="L417" href="#L417">417</a>         problem.addPoint( 50.0,  -6.0);
<a class="jxr_linenumber" name="L418" href="#L418">418</a>         problem.addPoint(110.0, -20.0);
<a class="jxr_linenumber" name="L419" href="#L419">419</a>         problem.addPoint( 35.0,  15.0);
<a class="jxr_linenumber" name="L420" href="#L420">420</a>         problem.addPoint( 45.0,  97.0);
<a class="jxr_linenumber" name="L421" href="#L421">421</a>         NonLinearConjugateGradientOptimizer optimizer
<a class="jxr_linenumber" name="L422" href="#L422">422</a>            = <strong class="jxr_keyword">new</strong> NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,
<a class="jxr_linenumber" name="L423" href="#L423">423</a>                                                      <strong class="jxr_keyword">new</strong> SimpleValueChecker(1e-30, 1e-30),
<a class="jxr_linenumber" name="L424" href="#L424">424</a>                                                      1e-15, 1e-13, 1);
<a class="jxr_linenumber" name="L425" href="#L425">425</a>         PointValuePair optimum
<a class="jxr_linenumber" name="L426" href="#L426">426</a>             = optimizer.optimize(<strong class="jxr_keyword">new</strong> MaxEval(100),
<a class="jxr_linenumber" name="L427" href="#L427">427</a>                                  problem.getObjectiveFunction(),
<a class="jxr_linenumber" name="L428" href="#L428">428</a>                                  problem.getObjectiveFunctionGradient(),
<a class="jxr_linenumber" name="L429" href="#L429">429</a>                                  GoalType.MINIMIZE,
<a class="jxr_linenumber" name="L430" href="#L430">430</a>                                  <strong class="jxr_keyword">new</strong> InitialGuess(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 98.680, 47.345 }));
<a class="jxr_linenumber" name="L431" href="#L431">431</a>         Vector2D center = <strong class="jxr_keyword">new</strong> Vector2D(optimum.getPointRef()[0], optimum.getPointRef()[1]);
<a class="jxr_linenumber" name="L432" href="#L432">432</a>         Assert.assertEquals(69.960161753, problem.getRadius(center), 1.0e-8);
<a class="jxr_linenumber" name="L433" href="#L433">433</a>         Assert.assertEquals(96.075902096, center.getX(), 1.0e-7);
<a class="jxr_linenumber" name="L434" href="#L434">434</a>         Assert.assertEquals(48.135167894, center.getY(), 1.0e-6);
<a class="jxr_linenumber" name="L435" href="#L435">435</a>     }
<a class="jxr_linenumber" name="L436" href="#L436">436</a> 
<a class="jxr_linenumber" name="L437" href="#L437">437</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../../../../org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.html">LinearProblem</a> {
<a class="jxr_linenumber" name="L438" href="#L438">438</a>         <strong class="jxr_keyword">final</strong> RealMatrix factors;
<a class="jxr_linenumber" name="L439" href="#L439">439</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] target;
<a class="jxr_linenumber" name="L440" href="#L440">440</a> 
<a class="jxr_linenumber" name="L441" href="#L441">441</a>         <strong class="jxr_keyword">public</strong> <a href="../../../../../../../../org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.html">LinearProblem</a>(<strong class="jxr_keyword">double</strong>[][] factors,
<a class="jxr_linenumber" name="L442" href="#L442">442</a>                              <strong class="jxr_keyword">double</strong>[] target) {
<a class="jxr_linenumber" name="L443" href="#L443">443</a>             <strong class="jxr_keyword">this</strong>.factors = <strong class="jxr_keyword">new</strong> BlockRealMatrix(factors);
<a class="jxr_linenumber" name="L444" href="#L444">444</a>             <strong class="jxr_keyword">this</strong>.target  = target;
<a class="jxr_linenumber" name="L445" href="#L445">445</a>         }
<a class="jxr_linenumber" name="L446" href="#L446">446</a> 
<a class="jxr_linenumber" name="L447" href="#L447">447</a>         <strong class="jxr_keyword">public</strong> ObjectiveFunction getObjectiveFunction() {
<a class="jxr_linenumber" name="L448" href="#L448">448</a>             <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> ObjectiveFunction(<strong class="jxr_keyword">new</strong> MultivariateFunction() {
<a class="jxr_linenumber" name="L449" href="#L449">449</a>                     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">double</strong> value(<strong class="jxr_keyword">double</strong>[] point) {
<a class="jxr_linenumber" name="L450" href="#L450">450</a>                         <strong class="jxr_keyword">double</strong>[] y = factors.operate(point);
<a class="jxr_linenumber" name="L451" href="#L451">451</a>                         <strong class="jxr_keyword">double</strong> sum = 0;
<a class="jxr_linenumber" name="L452" href="#L452">452</a>                         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; y.length; ++i) {
<a class="jxr_linenumber" name="L453" href="#L453">453</a>                             <strong class="jxr_keyword">double</strong> ri = y[i] - target[i];
<a class="jxr_linenumber" name="L454" href="#L454">454</a>                             sum += ri * ri;
<a class="jxr_linenumber" name="L455" href="#L455">455</a>                         }
<a class="jxr_linenumber" name="L456" href="#L456">456</a>                         <strong class="jxr_keyword">return</strong> sum;
<a class="jxr_linenumber" name="L457" href="#L457">457</a>                     }
<a class="jxr_linenumber" name="L458" href="#L458">458</a>                 });
<a class="jxr_linenumber" name="L459" href="#L459">459</a>         }
<a class="jxr_linenumber" name="L460" href="#L460">460</a> 
<a class="jxr_linenumber" name="L461" href="#L461">461</a>         <strong class="jxr_keyword">public</strong> ObjectiveFunctionGradient getObjectiveFunctionGradient() {
<a class="jxr_linenumber" name="L462" href="#L462">462</a>             <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> ObjectiveFunctionGradient(<strong class="jxr_keyword">new</strong> MultivariateVectorFunction() {
<a class="jxr_linenumber" name="L463" href="#L463">463</a>                     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">double</strong>[] value(<strong class="jxr_keyword">double</strong>[] point) {
<a class="jxr_linenumber" name="L464" href="#L464">464</a>                         <strong class="jxr_keyword">double</strong>[] r = factors.operate(point);
<a class="jxr_linenumber" name="L465" href="#L465">465</a>                         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; r.length; ++i) {
<a class="jxr_linenumber" name="L466" href="#L466">466</a>                             r[i] -= target[i];
<a class="jxr_linenumber" name="L467" href="#L467">467</a>                         }
<a class="jxr_linenumber" name="L468" href="#L468">468</a>                         <strong class="jxr_keyword">double</strong>[] p = factors.transpose().operate(r);
<a class="jxr_linenumber" name="L469" href="#L469">469</a>                         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; p.length; ++i) {
<a class="jxr_linenumber" name="L470" href="#L470">470</a>                             p[i] *= 2;
<a class="jxr_linenumber" name="L471" href="#L471">471</a>                         }
<a class="jxr_linenumber" name="L472" href="#L472">472</a>                         <strong class="jxr_keyword">return</strong> p;
<a class="jxr_linenumber" name="L473" href="#L473">473</a>                     }
<a class="jxr_linenumber" name="L474" href="#L474">474</a>                 });
<a class="jxr_linenumber" name="L475" href="#L475">475</a>         }
<a class="jxr_linenumber" name="L476" href="#L476">476</a>     }
<a class="jxr_linenumber" name="L477" href="#L477">477</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2003&#x2013;2016 <a href="http://www.apache.org/">The Apache Software Foundation</a>. All rights reserved.</div>
</body>
</html>
