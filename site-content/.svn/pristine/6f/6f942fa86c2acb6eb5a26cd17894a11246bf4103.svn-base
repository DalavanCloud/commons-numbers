<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span>package org.apache.commons.math3.optimization.direct;<a name="line.17"></a>
<span class="sourceLineNo">018</span><a name="line.18"></a>
<span class="sourceLineNo">019</span>import java.util.Arrays;<a name="line.19"></a>
<span class="sourceLineNo">020</span>import java.util.Random;<a name="line.20"></a>
<span class="sourceLineNo">021</span><a name="line.21"></a>
<span class="sourceLineNo">022</span>import org.apache.commons.math3.Retry;<a name="line.22"></a>
<span class="sourceLineNo">023</span>import org.apache.commons.math3.RetryRunner;<a name="line.23"></a>
<span class="sourceLineNo">024</span>import org.apache.commons.math3.analysis.MultivariateFunction;<a name="line.24"></a>
<span class="sourceLineNo">025</span>import org.apache.commons.math3.exception.NumberIsTooLargeException;<a name="line.25"></a>
<span class="sourceLineNo">026</span>import org.apache.commons.math3.exception.NumberIsTooSmallException;<a name="line.26"></a>
<span class="sourceLineNo">027</span>import org.apache.commons.math3.exception.DimensionMismatchException;<a name="line.27"></a>
<span class="sourceLineNo">028</span>import org.apache.commons.math3.exception.NotPositiveException;<a name="line.28"></a>
<span class="sourceLineNo">029</span>import org.apache.commons.math3.exception.OutOfRangeException;<a name="line.29"></a>
<span class="sourceLineNo">030</span>import org.apache.commons.math3.optimization.GoalType;<a name="line.30"></a>
<span class="sourceLineNo">031</span>import org.apache.commons.math3.optimization.PointValuePair;<a name="line.31"></a>
<span class="sourceLineNo">032</span>import org.apache.commons.math3.optimization.InitialGuess;<a name="line.32"></a>
<span class="sourceLineNo">033</span>import org.apache.commons.math3.optimization.SimpleBounds;<a name="line.33"></a>
<span class="sourceLineNo">034</span>import org.apache.commons.math3.random.MersenneTwister;<a name="line.34"></a>
<span class="sourceLineNo">035</span>import org.apache.commons.math3.util.FastMath;<a name="line.35"></a>
<span class="sourceLineNo">036</span>import org.junit.Assert;<a name="line.36"></a>
<span class="sourceLineNo">037</span>import org.junit.Test;<a name="line.37"></a>
<span class="sourceLineNo">038</span>import org.junit.runner.RunWith;<a name="line.38"></a>
<span class="sourceLineNo">039</span><a name="line.39"></a>
<span class="sourceLineNo">040</span>/**<a name="line.40"></a>
<span class="sourceLineNo">041</span> * Test for {@link CMAESOptimizer}.<a name="line.41"></a>
<span class="sourceLineNo">042</span> */<a name="line.42"></a>
<span class="sourceLineNo">043</span>@Deprecated<a name="line.43"></a>
<span class="sourceLineNo">044</span>@RunWith(RetryRunner.class)<a name="line.44"></a>
<span class="sourceLineNo">045</span>public class CMAESOptimizerTest {<a name="line.45"></a>
<span class="sourceLineNo">046</span><a name="line.46"></a>
<span class="sourceLineNo">047</span>    static final int DIM = 13;<a name="line.47"></a>
<span class="sourceLineNo">048</span>    static final int LAMBDA = 4 + (int)(3.*FastMath.log(DIM));<a name="line.48"></a>
<span class="sourceLineNo">049</span>   <a name="line.49"></a>
<span class="sourceLineNo">050</span>    @Test(expected = NumberIsTooLargeException.class)<a name="line.50"></a>
<span class="sourceLineNo">051</span>    public void testInitOutofbounds1() {<a name="line.51"></a>
<span class="sourceLineNo">052</span>        double[] startPoint = point(DIM,3);<a name="line.52"></a>
<span class="sourceLineNo">053</span>        double[] insigma = point(DIM, 0.3);<a name="line.53"></a>
<span class="sourceLineNo">054</span>        double[][] boundaries = boundaries(DIM,-1,2);<a name="line.54"></a>
<span class="sourceLineNo">055</span>        PointValuePair expected =<a name="line.55"></a>
<span class="sourceLineNo">056</span>            new PointValuePair(point(DIM,1.0),0.0);<a name="line.56"></a>
<span class="sourceLineNo">057</span>        doTest(new Rosen(), startPoint, insigma, boundaries,<a name="line.57"></a>
<span class="sourceLineNo">058</span>                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,<a name="line.58"></a>
<span class="sourceLineNo">059</span>                1e-13, 1e-6, 100000, expected);<a name="line.59"></a>
<span class="sourceLineNo">060</span>    }<a name="line.60"></a>
<span class="sourceLineNo">061</span>    @Test(expected = NumberIsTooSmallException.class)<a name="line.61"></a>
<span class="sourceLineNo">062</span>    public void testInitOutofbounds2() {<a name="line.62"></a>
<span class="sourceLineNo">063</span>        double[] startPoint = point(DIM, -2);<a name="line.63"></a>
<span class="sourceLineNo">064</span>        double[] insigma = point(DIM, 0.3);<a name="line.64"></a>
<span class="sourceLineNo">065</span>        double[][] boundaries = boundaries(DIM,-1,2);<a name="line.65"></a>
<span class="sourceLineNo">066</span>        PointValuePair expected =<a name="line.66"></a>
<span class="sourceLineNo">067</span>            new PointValuePair(point(DIM,1.0),0.0);<a name="line.67"></a>
<span class="sourceLineNo">068</span>        doTest(new Rosen(), startPoint, insigma, boundaries,<a name="line.68"></a>
<span class="sourceLineNo">069</span>                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,<a name="line.69"></a>
<span class="sourceLineNo">070</span>                1e-13, 1e-6, 100000, expected);<a name="line.70"></a>
<span class="sourceLineNo">071</span>    }<a name="line.71"></a>
<span class="sourceLineNo">072</span>    <a name="line.72"></a>
<span class="sourceLineNo">073</span>    @Test(expected = DimensionMismatchException.class)<a name="line.73"></a>
<span class="sourceLineNo">074</span>    public void testBoundariesDimensionMismatch() {<a name="line.74"></a>
<span class="sourceLineNo">075</span>        double[] startPoint = point(DIM,0.5);<a name="line.75"></a>
<span class="sourceLineNo">076</span>        double[] insigma = point(DIM, 0.3);<a name="line.76"></a>
<span class="sourceLineNo">077</span>        double[][] boundaries = boundaries(DIM+1,-1,2);<a name="line.77"></a>
<span class="sourceLineNo">078</span>        PointValuePair expected =<a name="line.78"></a>
<span class="sourceLineNo">079</span>            new PointValuePair(point(DIM,1.0),0.0);<a name="line.79"></a>
<span class="sourceLineNo">080</span>        doTest(new Rosen(), startPoint, insigma, boundaries,<a name="line.80"></a>
<span class="sourceLineNo">081</span>                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,<a name="line.81"></a>
<span class="sourceLineNo">082</span>                1e-13, 1e-6, 100000, expected);<a name="line.82"></a>
<span class="sourceLineNo">083</span>    }<a name="line.83"></a>
<span class="sourceLineNo">084</span><a name="line.84"></a>
<span class="sourceLineNo">085</span>    @Test(expected = NotPositiveException.class)<a name="line.85"></a>
<span class="sourceLineNo">086</span>    public void testInputSigmaNegative() {<a name="line.86"></a>
<span class="sourceLineNo">087</span>        double[] startPoint = point(DIM,0.5);<a name="line.87"></a>
<span class="sourceLineNo">088</span>        double[] insigma = point(DIM,-0.5);<a name="line.88"></a>
<span class="sourceLineNo">089</span>        double[][] boundaries = null;<a name="line.89"></a>
<span class="sourceLineNo">090</span>        PointValuePair expected =<a name="line.90"></a>
<span class="sourceLineNo">091</span>            new PointValuePair(point(DIM,1.0),0.0);<a name="line.91"></a>
<span class="sourceLineNo">092</span>        doTest(new Rosen(), startPoint, insigma, boundaries,<a name="line.92"></a>
<span class="sourceLineNo">093</span>                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,<a name="line.93"></a>
<span class="sourceLineNo">094</span>                1e-13, 1e-6, 100000, expected);<a name="line.94"></a>
<span class="sourceLineNo">095</span>    }<a name="line.95"></a>
<span class="sourceLineNo">096</span><a name="line.96"></a>
<span class="sourceLineNo">097</span>    @Test(expected = OutOfRangeException.class)<a name="line.97"></a>
<span class="sourceLineNo">098</span>    public void testInputSigmaOutOfRange() {<a name="line.98"></a>
<span class="sourceLineNo">099</span>        double[] startPoint = point(DIM,0.5);<a name="line.99"></a>
<span class="sourceLineNo">100</span>        double[] insigma = point(DIM, 1.1);<a name="line.100"></a>
<span class="sourceLineNo">101</span>        double[][] boundaries = boundaries(DIM,-0.5,0.5);<a name="line.101"></a>
<span class="sourceLineNo">102</span>        PointValuePair expected =<a name="line.102"></a>
<span class="sourceLineNo">103</span>            new PointValuePair(point(DIM,1.0),0.0);<a name="line.103"></a>
<span class="sourceLineNo">104</span>        doTest(new Rosen(), startPoint, insigma, boundaries,<a name="line.104"></a>
<span class="sourceLineNo">105</span>                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,<a name="line.105"></a>
<span class="sourceLineNo">106</span>                1e-13, 1e-6, 100000, expected);<a name="line.106"></a>
<span class="sourceLineNo">107</span>    }<a name="line.107"></a>
<span class="sourceLineNo">108</span><a name="line.108"></a>
<span class="sourceLineNo">109</span>    @Test(expected = DimensionMismatchException.class)<a name="line.109"></a>
<span class="sourceLineNo">110</span>    public void testInputSigmaDimensionMismatch() {<a name="line.110"></a>
<span class="sourceLineNo">111</span>        double[] startPoint = point(DIM,0.5);<a name="line.111"></a>
<span class="sourceLineNo">112</span>        double[] insigma = point(DIM + 1, 0.5);<a name="line.112"></a>
<span class="sourceLineNo">113</span>        double[][] boundaries = null;<a name="line.113"></a>
<span class="sourceLineNo">114</span>        PointValuePair expected =<a name="line.114"></a>
<span class="sourceLineNo">115</span>            new PointValuePair(point(DIM,1.0),0.0);<a name="line.115"></a>
<span class="sourceLineNo">116</span>        doTest(new Rosen(), startPoint, insigma, boundaries,<a name="line.116"></a>
<span class="sourceLineNo">117</span>                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,<a name="line.117"></a>
<span class="sourceLineNo">118</span>                1e-13, 1e-6, 100000, expected);<a name="line.118"></a>
<span class="sourceLineNo">119</span>    }<a name="line.119"></a>
<span class="sourceLineNo">120</span>    <a name="line.120"></a>
<span class="sourceLineNo">121</span>    @Test<a name="line.121"></a>
<span class="sourceLineNo">122</span>    @Retry(3)<a name="line.122"></a>
<span class="sourceLineNo">123</span>    public void testRosen() {<a name="line.123"></a>
<span class="sourceLineNo">124</span>        double[] startPoint = point(DIM,0.1);<a name="line.124"></a>
<span class="sourceLineNo">125</span>        double[] insigma = point(DIM,0.1);<a name="line.125"></a>
<span class="sourceLineNo">126</span>        double[][] boundaries = null;<a name="line.126"></a>
<span class="sourceLineNo">127</span>        PointValuePair expected =<a name="line.127"></a>
<span class="sourceLineNo">128</span>            new PointValuePair(point(DIM,1.0),0.0);<a name="line.128"></a>
<span class="sourceLineNo">129</span>        doTest(new Rosen(), startPoint, insigma, boundaries,<a name="line.129"></a>
<span class="sourceLineNo">130</span>                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,<a name="line.130"></a>
<span class="sourceLineNo">131</span>                1e-13, 1e-6, 100000, expected);<a name="line.131"></a>
<span class="sourceLineNo">132</span>        doTest(new Rosen(), startPoint, insigma, boundaries,<a name="line.132"></a>
<span class="sourceLineNo">133</span>                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,<a name="line.133"></a>
<span class="sourceLineNo">134</span>                1e-13, 1e-6, 100000, expected);<a name="line.134"></a>
<span class="sourceLineNo">135</span>    }<a name="line.135"></a>
<span class="sourceLineNo">136</span><a name="line.136"></a>
<span class="sourceLineNo">137</span>    @Test<a name="line.137"></a>
<span class="sourceLineNo">138</span>    @Retry(3)<a name="line.138"></a>
<span class="sourceLineNo">139</span>    public void testMaximize() {<a name="line.139"></a>
<span class="sourceLineNo">140</span>        double[] startPoint = point(DIM,1.0);<a name="line.140"></a>
<span class="sourceLineNo">141</span>        double[] insigma = point(DIM,0.1);<a name="line.141"></a>
<span class="sourceLineNo">142</span>        double[][] boundaries = null;<a name="line.142"></a>
<span class="sourceLineNo">143</span>        PointValuePair expected =<a name="line.143"></a>
<span class="sourceLineNo">144</span>            new PointValuePair(point(DIM,0.0),1.0);<a name="line.144"></a>
<span class="sourceLineNo">145</span>        doTest(new MinusElli(), startPoint, insigma, boundaries,<a name="line.145"></a>
<span class="sourceLineNo">146</span>                GoalType.MAXIMIZE, LAMBDA, true, 0, 1.0-1e-13,<a name="line.146"></a>
<span class="sourceLineNo">147</span>                2e-10, 5e-6, 100000, expected);<a name="line.147"></a>
<span class="sourceLineNo">148</span>        doTest(new MinusElli(), startPoint, insigma, boundaries,<a name="line.148"></a>
<span class="sourceLineNo">149</span>                GoalType.MAXIMIZE, LAMBDA, false, 0, 1.0-1e-13,<a name="line.149"></a>
<span class="sourceLineNo">150</span>                2e-10, 5e-6, 100000, expected);<a name="line.150"></a>
<span class="sourceLineNo">151</span>        boundaries = boundaries(DIM,-0.3,0.3); <a name="line.151"></a>
<span class="sourceLineNo">152</span>        startPoint = point(DIM,0.1);<a name="line.152"></a>
<span class="sourceLineNo">153</span>        doTest(new MinusElli(), startPoint, insigma, boundaries,<a name="line.153"></a>
<span class="sourceLineNo">154</span>                GoalType.MAXIMIZE, LAMBDA, true, 0, 1.0-1e-13,<a name="line.154"></a>
<span class="sourceLineNo">155</span>                2e-10, 5e-6, 100000, expected);<a name="line.155"></a>
<span class="sourceLineNo">156</span>    }<a name="line.156"></a>
<span class="sourceLineNo">157</span><a name="line.157"></a>
<span class="sourceLineNo">158</span>    @Test<a name="line.158"></a>
<span class="sourceLineNo">159</span>    public void testEllipse() {<a name="line.159"></a>
<span class="sourceLineNo">160</span>        double[] startPoint = point(DIM,1.0);<a name="line.160"></a>
<span class="sourceLineNo">161</span>        double[] insigma = point(DIM,0.1);<a name="line.161"></a>
<span class="sourceLineNo">162</span>        double[][] boundaries = null;<a name="line.162"></a>
<span class="sourceLineNo">163</span>        PointValuePair expected =<a name="line.163"></a>
<span class="sourceLineNo">164</span>            new PointValuePair(point(DIM,0.0),0.0);<a name="line.164"></a>
<span class="sourceLineNo">165</span>        doTest(new Elli(), startPoint, insigma, boundaries,<a name="line.165"></a>
<span class="sourceLineNo">166</span>                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,<a name="line.166"></a>
<span class="sourceLineNo">167</span>                1e-13, 1e-6, 100000, expected);<a name="line.167"></a>
<span class="sourceLineNo">168</span>        doTest(new Elli(), startPoint, insigma, boundaries,<a name="line.168"></a>
<span class="sourceLineNo">169</span>                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,<a name="line.169"></a>
<span class="sourceLineNo">170</span>                1e-13, 1e-6, 100000, expected);<a name="line.170"></a>
<span class="sourceLineNo">171</span>    }<a name="line.171"></a>
<span class="sourceLineNo">172</span><a name="line.172"></a>
<span class="sourceLineNo">173</span>    @Test<a name="line.173"></a>
<span class="sourceLineNo">174</span>    public void testElliRotated() {<a name="line.174"></a>
<span class="sourceLineNo">175</span>        double[] startPoint = point(DIM,1.0);<a name="line.175"></a>
<span class="sourceLineNo">176</span>        double[] insigma = point(DIM,0.1);<a name="line.176"></a>
<span class="sourceLineNo">177</span>        double[][] boundaries = null;<a name="line.177"></a>
<span class="sourceLineNo">178</span>        PointValuePair expected =<a name="line.178"></a>
<span class="sourceLineNo">179</span>            new PointValuePair(point(DIM,0.0),0.0);<a name="line.179"></a>
<span class="sourceLineNo">180</span>        doTest(new ElliRotated(), startPoint, insigma, boundaries,<a name="line.180"></a>
<span class="sourceLineNo">181</span>                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,<a name="line.181"></a>
<span class="sourceLineNo">182</span>                1e-13, 1e-6, 100000, expected);<a name="line.182"></a>
<span class="sourceLineNo">183</span>        doTest(new ElliRotated(), startPoint, insigma, boundaries,<a name="line.183"></a>
<span class="sourceLineNo">184</span>                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,<a name="line.184"></a>
<span class="sourceLineNo">185</span>                1e-13, 1e-6, 100000, expected);<a name="line.185"></a>
<span class="sourceLineNo">186</span>    }<a name="line.186"></a>
<span class="sourceLineNo">187</span><a name="line.187"></a>
<span class="sourceLineNo">188</span>    @Test<a name="line.188"></a>
<span class="sourceLineNo">189</span>    public void testCigar() {<a name="line.189"></a>
<span class="sourceLineNo">190</span>        double[] startPoint = point(DIM,1.0);<a name="line.190"></a>
<span class="sourceLineNo">191</span>        double[] insigma = point(DIM,0.1);<a name="line.191"></a>
<span class="sourceLineNo">192</span>        double[][] boundaries = null;<a name="line.192"></a>
<span class="sourceLineNo">193</span>        PointValuePair expected =<a name="line.193"></a>
<span class="sourceLineNo">194</span>            new PointValuePair(point(DIM,0.0),0.0);<a name="line.194"></a>
<span class="sourceLineNo">195</span>        doTest(new Cigar(), startPoint, insigma, boundaries,<a name="line.195"></a>
<span class="sourceLineNo">196</span>                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,<a name="line.196"></a>
<span class="sourceLineNo">197</span>                1e-13, 1e-6, 200000, expected);<a name="line.197"></a>
<span class="sourceLineNo">198</span>        doTest(new Cigar(), startPoint, insigma, boundaries,<a name="line.198"></a>
<span class="sourceLineNo">199</span>                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,<a name="line.199"></a>
<span class="sourceLineNo">200</span>                1e-13, 1e-6, 100000, expected);<a name="line.200"></a>
<span class="sourceLineNo">201</span>    }<a name="line.201"></a>
<span class="sourceLineNo">202</span><a name="line.202"></a>
<span class="sourceLineNo">203</span>    @Test<a name="line.203"></a>
<span class="sourceLineNo">204</span>    public void testCigarWithBoundaries() {<a name="line.204"></a>
<span class="sourceLineNo">205</span>        double[] startPoint = point(DIM,1.0);<a name="line.205"></a>
<span class="sourceLineNo">206</span>        double[] insigma = point(DIM,0.1);<a name="line.206"></a>
<span class="sourceLineNo">207</span>        double[][] boundaries = boundaries(DIM, -1e100, Double.POSITIVE_INFINITY);<a name="line.207"></a>
<span class="sourceLineNo">208</span>        PointValuePair expected =<a name="line.208"></a>
<span class="sourceLineNo">209</span>            new PointValuePair(point(DIM,0.0),0.0);<a name="line.209"></a>
<span class="sourceLineNo">210</span>        doTest(new Cigar(), startPoint, insigma, boundaries,<a name="line.210"></a>
<span class="sourceLineNo">211</span>                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,<a name="line.211"></a>
<span class="sourceLineNo">212</span>                1e-13, 1e-6, 200000, expected);<a name="line.212"></a>
<span class="sourceLineNo">213</span>        doTest(new Cigar(), startPoint, insigma, boundaries,<a name="line.213"></a>
<span class="sourceLineNo">214</span>                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,<a name="line.214"></a>
<span class="sourceLineNo">215</span>                1e-13, 1e-6, 100000, expected);<a name="line.215"></a>
<span class="sourceLineNo">216</span>    }<a name="line.216"></a>
<span class="sourceLineNo">217</span><a name="line.217"></a>
<span class="sourceLineNo">218</span>    @Test<a name="line.218"></a>
<span class="sourceLineNo">219</span>    public void testTwoAxes() {<a name="line.219"></a>
<span class="sourceLineNo">220</span>        double[] startPoint = point(DIM,1.0);<a name="line.220"></a>
<span class="sourceLineNo">221</span>        double[] insigma = point(DIM,0.1);<a name="line.221"></a>
<span class="sourceLineNo">222</span>        double[][] boundaries = null;<a name="line.222"></a>
<span class="sourceLineNo">223</span>        PointValuePair expected =<a name="line.223"></a>
<span class="sourceLineNo">224</span>            new PointValuePair(point(DIM,0.0),0.0);<a name="line.224"></a>
<span class="sourceLineNo">225</span>        doTest(new TwoAxes(), startPoint, insigma, boundaries,<a name="line.225"></a>
<span class="sourceLineNo">226</span>                GoalType.MINIMIZE, 2*LAMBDA, true, 0, 1e-13,<a name="line.226"></a>
<span class="sourceLineNo">227</span>                1e-13, 1e-6, 200000, expected);<a name="line.227"></a>
<span class="sourceLineNo">228</span>        doTest(new TwoAxes(), startPoint, insigma, boundaries,<a name="line.228"></a>
<span class="sourceLineNo">229</span>                GoalType.MINIMIZE, 2*LAMBDA, false, 0, 1e-13,<a name="line.229"></a>
<span class="sourceLineNo">230</span>                1e-8, 1e-3, 200000, expected);<a name="line.230"></a>
<span class="sourceLineNo">231</span>    }<a name="line.231"></a>
<span class="sourceLineNo">232</span><a name="line.232"></a>
<span class="sourceLineNo">233</span>    @Test<a name="line.233"></a>
<span class="sourceLineNo">234</span>    public void testCigTab() {<a name="line.234"></a>
<span class="sourceLineNo">235</span>        double[] startPoint = point(DIM,1.0);<a name="line.235"></a>
<span class="sourceLineNo">236</span>        double[] insigma = point(DIM,0.3);<a name="line.236"></a>
<span class="sourceLineNo">237</span>        double[][] boundaries = null;<a name="line.237"></a>
<span class="sourceLineNo">238</span>        PointValuePair expected =<a name="line.238"></a>
<span class="sourceLineNo">239</span>            new PointValuePair(point(DIM,0.0),0.0);<a name="line.239"></a>
<span class="sourceLineNo">240</span>        doTest(new CigTab(), startPoint, insigma, boundaries,<a name="line.240"></a>
<span class="sourceLineNo">241</span>                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,<a name="line.241"></a>
<span class="sourceLineNo">242</span>                1e-13, 5e-5, 100000, expected);<a name="line.242"></a>
<span class="sourceLineNo">243</span>        doTest(new CigTab(), startPoint, insigma, boundaries,<a name="line.243"></a>
<span class="sourceLineNo">244</span>                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,<a name="line.244"></a>
<span class="sourceLineNo">245</span>                1e-13, 5e-5, 100000, expected);<a name="line.245"></a>
<span class="sourceLineNo">246</span>    }<a name="line.246"></a>
<span class="sourceLineNo">247</span><a name="line.247"></a>
<span class="sourceLineNo">248</span>    @Test<a name="line.248"></a>
<span class="sourceLineNo">249</span>    public void testSphere() {<a name="line.249"></a>
<span class="sourceLineNo">250</span>        double[] startPoint = point(DIM,1.0);<a name="line.250"></a>
<span class="sourceLineNo">251</span>        double[] insigma = point(DIM,0.1);<a name="line.251"></a>
<span class="sourceLineNo">252</span>        double[][] boundaries = null;<a name="line.252"></a>
<span class="sourceLineNo">253</span>        PointValuePair expected =<a name="line.253"></a>
<span class="sourceLineNo">254</span>            new PointValuePair(point(DIM,0.0),0.0);<a name="line.254"></a>
<span class="sourceLineNo">255</span>        doTest(new Sphere(), startPoint, insigma, boundaries,<a name="line.255"></a>
<span class="sourceLineNo">256</span>                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,<a name="line.256"></a>
<span class="sourceLineNo">257</span>                1e-13, 1e-6, 100000, expected);<a name="line.257"></a>
<span class="sourceLineNo">258</span>        doTest(new Sphere(), startPoint, insigma, boundaries,<a name="line.258"></a>
<span class="sourceLineNo">259</span>                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,<a name="line.259"></a>
<span class="sourceLineNo">260</span>                1e-13, 1e-6, 100000, expected);<a name="line.260"></a>
<span class="sourceLineNo">261</span>    }<a name="line.261"></a>
<span class="sourceLineNo">262</span><a name="line.262"></a>
<span class="sourceLineNo">263</span>    @Test<a name="line.263"></a>
<span class="sourceLineNo">264</span>    public void testTablet() {<a name="line.264"></a>
<span class="sourceLineNo">265</span>        double[] startPoint = point(DIM,1.0);<a name="line.265"></a>
<span class="sourceLineNo">266</span>        double[] insigma = point(DIM,0.1);<a name="line.266"></a>
<span class="sourceLineNo">267</span>        double[][] boundaries = null;<a name="line.267"></a>
<span class="sourceLineNo">268</span>        PointValuePair expected =<a name="line.268"></a>
<span class="sourceLineNo">269</span>            new PointValuePair(point(DIM,0.0),0.0);<a name="line.269"></a>
<span class="sourceLineNo">270</span>        doTest(new Tablet(), startPoint, insigma, boundaries,<a name="line.270"></a>
<span class="sourceLineNo">271</span>                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,<a name="line.271"></a>
<span class="sourceLineNo">272</span>                1e-13, 1e-6, 100000, expected);<a name="line.272"></a>
<span class="sourceLineNo">273</span>        doTest(new Tablet(), startPoint, insigma, boundaries,<a name="line.273"></a>
<span class="sourceLineNo">274</span>                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,<a name="line.274"></a>
<span class="sourceLineNo">275</span>                1e-13, 1e-6, 100000, expected);<a name="line.275"></a>
<span class="sourceLineNo">276</span>    }<a name="line.276"></a>
<span class="sourceLineNo">277</span><a name="line.277"></a>
<span class="sourceLineNo">278</span>    @Test<a name="line.278"></a>
<span class="sourceLineNo">279</span>    public void testDiffPow() {<a name="line.279"></a>
<span class="sourceLineNo">280</span>        double[] startPoint = point(DIM,1.0);<a name="line.280"></a>
<span class="sourceLineNo">281</span>        double[] insigma = point(DIM,0.1);<a name="line.281"></a>
<span class="sourceLineNo">282</span>        double[][] boundaries = null;<a name="line.282"></a>
<span class="sourceLineNo">283</span>        PointValuePair expected =<a name="line.283"></a>
<span class="sourceLineNo">284</span>            new PointValuePair(point(DIM,0.0),0.0);<a name="line.284"></a>
<span class="sourceLineNo">285</span>        doTest(new DiffPow(), startPoint, insigma, boundaries,<a name="line.285"></a>
<span class="sourceLineNo">286</span>                GoalType.MINIMIZE, 10, true, 0, 1e-13,<a name="line.286"></a>
<span class="sourceLineNo">287</span>                1e-8, 1e-1, 100000, expected);<a name="line.287"></a>
<span class="sourceLineNo">288</span>        doTest(new DiffPow(), startPoint, insigma, boundaries,<a name="line.288"></a>
<span class="sourceLineNo">289</span>                GoalType.MINIMIZE, 10, false, 0, 1e-13,<a name="line.289"></a>
<span class="sourceLineNo">290</span>                1e-8, 2e-1, 100000, expected);<a name="line.290"></a>
<span class="sourceLineNo">291</span>    }<a name="line.291"></a>
<span class="sourceLineNo">292</span><a name="line.292"></a>
<span class="sourceLineNo">293</span>    @Test<a name="line.293"></a>
<span class="sourceLineNo">294</span>    public void testSsDiffPow() {<a name="line.294"></a>
<span class="sourceLineNo">295</span>        double[] startPoint = point(DIM,1.0);<a name="line.295"></a>
<span class="sourceLineNo">296</span>        double[] insigma = point(DIM,0.1);<a name="line.296"></a>
<span class="sourceLineNo">297</span>        double[][] boundaries = null;<a name="line.297"></a>
<span class="sourceLineNo">298</span>        PointValuePair expected =<a name="line.298"></a>
<span class="sourceLineNo">299</span>            new PointValuePair(point(DIM,0.0),0.0);<a name="line.299"></a>
<span class="sourceLineNo">300</span>        doTest(new SsDiffPow(), startPoint, insigma, boundaries,<a name="line.300"></a>
<span class="sourceLineNo">301</span>                GoalType.MINIMIZE, 10, true, 0, 1e-13,<a name="line.301"></a>
<span class="sourceLineNo">302</span>                1e-4, 1e-1, 200000, expected);<a name="line.302"></a>
<span class="sourceLineNo">303</span>        doTest(new SsDiffPow(), startPoint, insigma, boundaries,<a name="line.303"></a>
<span class="sourceLineNo">304</span>                GoalType.MINIMIZE, 10, false, 0, 1e-13,<a name="line.304"></a>
<span class="sourceLineNo">305</span>                1e-4, 1e-1, 200000, expected);<a name="line.305"></a>
<span class="sourceLineNo">306</span>    }<a name="line.306"></a>
<span class="sourceLineNo">307</span><a name="line.307"></a>
<span class="sourceLineNo">308</span>    @Test<a name="line.308"></a>
<span class="sourceLineNo">309</span>    public void testAckley() {<a name="line.309"></a>
<span class="sourceLineNo">310</span>        double[] startPoint = point(DIM,1.0);<a name="line.310"></a>
<span class="sourceLineNo">311</span>        double[] insigma = point(DIM,1.0);<a name="line.311"></a>
<span class="sourceLineNo">312</span>        double[][] boundaries = null;<a name="line.312"></a>
<span class="sourceLineNo">313</span>        PointValuePair expected =<a name="line.313"></a>
<span class="sourceLineNo">314</span>            new PointValuePair(point(DIM,0.0),0.0);<a name="line.314"></a>
<span class="sourceLineNo">315</span>        doTest(new Ackley(), startPoint, insigma, boundaries,<a name="line.315"></a>
<span class="sourceLineNo">316</span>                GoalType.MINIMIZE, 2*LAMBDA, true, 0, 1e-13,<a name="line.316"></a>
<span class="sourceLineNo">317</span>                1e-9, 1e-5, 100000, expected);<a name="line.317"></a>
<span class="sourceLineNo">318</span>        doTest(new Ackley(), startPoint, insigma, boundaries,<a name="line.318"></a>
<span class="sourceLineNo">319</span>                GoalType.MINIMIZE, 2*LAMBDA, false, 0, 1e-13,<a name="line.319"></a>
<span class="sourceLineNo">320</span>                1e-9, 1e-5, 100000, expected);<a name="line.320"></a>
<span class="sourceLineNo">321</span>    }<a name="line.321"></a>
<span class="sourceLineNo">322</span><a name="line.322"></a>
<span class="sourceLineNo">323</span>    @Test<a name="line.323"></a>
<span class="sourceLineNo">324</span>    public void testRastrigin() {<a name="line.324"></a>
<span class="sourceLineNo">325</span>        double[] startPoint = point(DIM,0.1);<a name="line.325"></a>
<span class="sourceLineNo">326</span>        double[] insigma = point(DIM,0.1);<a name="line.326"></a>
<span class="sourceLineNo">327</span>        double[][] boundaries = null;<a name="line.327"></a>
<span class="sourceLineNo">328</span>        PointValuePair expected =<a name="line.328"></a>
<span class="sourceLineNo">329</span>            new PointValuePair(point(DIM,0.0),0.0);<a name="line.329"></a>
<span class="sourceLineNo">330</span>        doTest(new Rastrigin(), startPoint, insigma, boundaries,<a name="line.330"></a>
<span class="sourceLineNo">331</span>                GoalType.MINIMIZE, (int)(200*FastMath.sqrt(DIM)), true, 0, 1e-13,<a name="line.331"></a>
<span class="sourceLineNo">332</span>                1e-13, 1e-6, 200000, expected);<a name="line.332"></a>
<span class="sourceLineNo">333</span>        doTest(new Rastrigin(), startPoint, insigma, boundaries,<a name="line.333"></a>
<span class="sourceLineNo">334</span>                GoalType.MINIMIZE, (int)(200*FastMath.sqrt(DIM)), false, 0, 1e-13,<a name="line.334"></a>
<span class="sourceLineNo">335</span>                1e-13, 1e-6, 200000, expected);<a name="line.335"></a>
<span class="sourceLineNo">336</span>    }<a name="line.336"></a>
<span class="sourceLineNo">337</span><a name="line.337"></a>
<span class="sourceLineNo">338</span>    @Test<a name="line.338"></a>
<span class="sourceLineNo">339</span>    public void testConstrainedRosen() {<a name="line.339"></a>
<span class="sourceLineNo">340</span>        double[] startPoint = point(DIM, 0.1);<a name="line.340"></a>
<span class="sourceLineNo">341</span>        double[] insigma = point(DIM, 0.1);<a name="line.341"></a>
<span class="sourceLineNo">342</span>        double[][] boundaries = boundaries(DIM, -1, 2);<a name="line.342"></a>
<span class="sourceLineNo">343</span>        PointValuePair expected =<a name="line.343"></a>
<span class="sourceLineNo">344</span>            new PointValuePair(point(DIM,1.0),0.0);<a name="line.344"></a>
<span class="sourceLineNo">345</span>        doTest(new Rosen(), startPoint, insigma, boundaries,<a name="line.345"></a>
<span class="sourceLineNo">346</span>                GoalType.MINIMIZE, 2*LAMBDA, true, 0, 1e-13,<a name="line.346"></a>
<span class="sourceLineNo">347</span>                1e-13, 1e-6, 100000, expected);<a name="line.347"></a>
<span class="sourceLineNo">348</span>        doTest(new Rosen(), startPoint, insigma, boundaries,<a name="line.348"></a>
<span class="sourceLineNo">349</span>                GoalType.MINIMIZE, 2*LAMBDA, false, 0, 1e-13,<a name="line.349"></a>
<span class="sourceLineNo">350</span>                1e-13, 1e-6, 100000, expected);<a name="line.350"></a>
<span class="sourceLineNo">351</span>    }<a name="line.351"></a>
<span class="sourceLineNo">352</span><a name="line.352"></a>
<span class="sourceLineNo">353</span>    @Test<a name="line.353"></a>
<span class="sourceLineNo">354</span>    public void testDiagonalRosen() {<a name="line.354"></a>
<span class="sourceLineNo">355</span>        double[] startPoint = point(DIM,0.1);<a name="line.355"></a>
<span class="sourceLineNo">356</span>        double[] insigma = point(DIM,0.1);<a name="line.356"></a>
<span class="sourceLineNo">357</span>        double[][] boundaries = null;<a name="line.357"></a>
<span class="sourceLineNo">358</span>        PointValuePair expected =<a name="line.358"></a>
<span class="sourceLineNo">359</span>            new PointValuePair(point(DIM,1.0),0.0);<a name="line.359"></a>
<span class="sourceLineNo">360</span>        doTest(new Rosen(), startPoint, insigma, boundaries,<a name="line.360"></a>
<span class="sourceLineNo">361</span>                GoalType.MINIMIZE, LAMBDA, false, 1, 1e-13,<a name="line.361"></a>
<span class="sourceLineNo">362</span>                1e-10, 1e-4, 1000000, expected);<a name="line.362"></a>
<span class="sourceLineNo">363</span>     }<a name="line.363"></a>
<span class="sourceLineNo">364</span><a name="line.364"></a>
<span class="sourceLineNo">365</span>    @Test<a name="line.365"></a>
<span class="sourceLineNo">366</span>    public void testMath864() {<a name="line.366"></a>
<span class="sourceLineNo">367</span>        final CMAESOptimizer optimizer = new CMAESOptimizer();<a name="line.367"></a>
<span class="sourceLineNo">368</span>        final MultivariateFunction fitnessFunction = new MultivariateFunction() {<a name="line.368"></a>
<span class="sourceLineNo">369</span>                public double value(double[] parameters) {<a name="line.369"></a>
<span class="sourceLineNo">370</span>                    final double target = 1;<a name="line.370"></a>
<span class="sourceLineNo">371</span>                    final double error = target - parameters[0];<a name="line.371"></a>
<span class="sourceLineNo">372</span>                    return error * error;<a name="line.372"></a>
<span class="sourceLineNo">373</span>                }<a name="line.373"></a>
<span class="sourceLineNo">374</span>            };<a name="line.374"></a>
<span class="sourceLineNo">375</span><a name="line.375"></a>
<span class="sourceLineNo">376</span>        final double[] start = { 0 };<a name="line.376"></a>
<span class="sourceLineNo">377</span>        final double[] lower = { -1e6 };<a name="line.377"></a>
<span class="sourceLineNo">378</span>        final double[] upper = { 1.5 };<a name="line.378"></a>
<span class="sourceLineNo">379</span>        final double[] result = optimizer.optimize(10000, fitnessFunction, GoalType.MINIMIZE,<a name="line.379"></a>
<span class="sourceLineNo">380</span>                                                   start, lower, upper).getPoint();<a name="line.380"></a>
<span class="sourceLineNo">381</span>        Assert.assertTrue("Out of bounds (" + result[0] + " &gt; " + upper[0] + ")",<a name="line.381"></a>
<span class="sourceLineNo">382</span>                          result[0] &lt;= upper[0]);<a name="line.382"></a>
<span class="sourceLineNo">383</span>    }<a name="line.383"></a>
<span class="sourceLineNo">384</span><a name="line.384"></a>
<span class="sourceLineNo">385</span>    /**<a name="line.385"></a>
<span class="sourceLineNo">386</span>     * Cf. MATH-867<a name="line.386"></a>
<span class="sourceLineNo">387</span>     */<a name="line.387"></a>
<span class="sourceLineNo">388</span>    @Test<a name="line.388"></a>
<span class="sourceLineNo">389</span>    public void testFitAccuracyDependsOnBoundary() {<a name="line.389"></a>
<span class="sourceLineNo">390</span>        final CMAESOptimizer optimizer = new CMAESOptimizer();<a name="line.390"></a>
<span class="sourceLineNo">391</span>        final MultivariateFunction fitnessFunction = new MultivariateFunction() {<a name="line.391"></a>
<span class="sourceLineNo">392</span>                public double value(double[] parameters) {<a name="line.392"></a>
<span class="sourceLineNo">393</span>                    final double target = 11.1;<a name="line.393"></a>
<span class="sourceLineNo">394</span>                    final double error = target - parameters[0];<a name="line.394"></a>
<span class="sourceLineNo">395</span>                    return error * error;<a name="line.395"></a>
<span class="sourceLineNo">396</span>                }<a name="line.396"></a>
<span class="sourceLineNo">397</span>            };<a name="line.397"></a>
<span class="sourceLineNo">398</span><a name="line.398"></a>
<span class="sourceLineNo">399</span>        final double[] start = { 1 };<a name="line.399"></a>
<span class="sourceLineNo">400</span> <a name="line.400"></a>
<span class="sourceLineNo">401</span>        // No bounds.<a name="line.401"></a>
<span class="sourceLineNo">402</span>        PointValuePair result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,<a name="line.402"></a>
<span class="sourceLineNo">403</span>                                                   start);<a name="line.403"></a>
<span class="sourceLineNo">404</span>        final double resNoBound = result.getPoint()[0];<a name="line.404"></a>
<span class="sourceLineNo">405</span><a name="line.405"></a>
<span class="sourceLineNo">406</span>        // Optimum is near the lower bound.<a name="line.406"></a>
<span class="sourceLineNo">407</span>        final double[] lower = { -20 };<a name="line.407"></a>
<span class="sourceLineNo">408</span>        final double[] upper = { 5e16 };<a name="line.408"></a>
<span class="sourceLineNo">409</span>        result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,<a name="line.409"></a>
<span class="sourceLineNo">410</span>                                    start, lower, upper);<a name="line.410"></a>
<span class="sourceLineNo">411</span>        final double resNearLo = result.getPoint()[0];<a name="line.411"></a>
<span class="sourceLineNo">412</span><a name="line.412"></a>
<span class="sourceLineNo">413</span>        // Optimum is near the upper bound.<a name="line.413"></a>
<span class="sourceLineNo">414</span>        lower[0] = -5e16;<a name="line.414"></a>
<span class="sourceLineNo">415</span>        upper[0] = 20;<a name="line.415"></a>
<span class="sourceLineNo">416</span>        result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,<a name="line.416"></a>
<span class="sourceLineNo">417</span>                                    start, lower, upper);<a name="line.417"></a>
<span class="sourceLineNo">418</span>        final double resNearHi = result.getPoint()[0];<a name="line.418"></a>
<span class="sourceLineNo">419</span><a name="line.419"></a>
<span class="sourceLineNo">420</span>        // System.out.println("resNoBound=" + resNoBound +<a name="line.420"></a>
<span class="sourceLineNo">421</span>        //                    " resNearLo=" + resNearLo +<a name="line.421"></a>
<span class="sourceLineNo">422</span>        //                    " resNearHi=" + resNearHi);<a name="line.422"></a>
<span class="sourceLineNo">423</span><a name="line.423"></a>
<span class="sourceLineNo">424</span>        // The two values currently differ by a substantial amount, indicating that<a name="line.424"></a>
<span class="sourceLineNo">425</span>        // the bounds definition can prevent reaching the optimum.<a name="line.425"></a>
<span class="sourceLineNo">426</span>        Assert.assertEquals(resNoBound, resNearLo, 1e-3);<a name="line.426"></a>
<span class="sourceLineNo">427</span>        Assert.assertEquals(resNoBound, resNearHi, 1e-3);<a name="line.427"></a>
<span class="sourceLineNo">428</span>    }<a name="line.428"></a>
<span class="sourceLineNo">429</span> <a name="line.429"></a>
<span class="sourceLineNo">430</span>    /**<a name="line.430"></a>
<span class="sourceLineNo">431</span>     * @param func Function to optimize.<a name="line.431"></a>
<span class="sourceLineNo">432</span>     * @param startPoint Starting point.<a name="line.432"></a>
<span class="sourceLineNo">433</span>     * @param inSigma Individual input sigma.<a name="line.433"></a>
<span class="sourceLineNo">434</span>     * @param boundaries Upper / lower point limit.<a name="line.434"></a>
<span class="sourceLineNo">435</span>     * @param goal Minimization or maximization.<a name="line.435"></a>
<span class="sourceLineNo">436</span>     * @param lambda Population size used for offspring.<a name="line.436"></a>
<span class="sourceLineNo">437</span>     * @param isActive Covariance update mechanism.<a name="line.437"></a>
<span class="sourceLineNo">438</span>     * @param diagonalOnly Simplified covariance update.<a name="line.438"></a>
<span class="sourceLineNo">439</span>     * @param stopValue Termination criteria for optimization.<a name="line.439"></a>
<span class="sourceLineNo">440</span>     * @param fTol Tolerance relative error on the objective function.<a name="line.440"></a>
<span class="sourceLineNo">441</span>     * @param pointTol Tolerance for checking that the optimum is correct.<a name="line.441"></a>
<span class="sourceLineNo">442</span>     * @param maxEvaluations Maximum number of evaluations.<a name="line.442"></a>
<span class="sourceLineNo">443</span>     * @param expected Expected point / value.<a name="line.443"></a>
<span class="sourceLineNo">444</span>     */<a name="line.444"></a>
<span class="sourceLineNo">445</span>    private void doTest(MultivariateFunction func,<a name="line.445"></a>
<span class="sourceLineNo">446</span>            double[] startPoint,<a name="line.446"></a>
<span class="sourceLineNo">447</span>            double[] inSigma,<a name="line.447"></a>
<span class="sourceLineNo">448</span>            double[][] boundaries,<a name="line.448"></a>
<span class="sourceLineNo">449</span>            GoalType goal,<a name="line.449"></a>
<span class="sourceLineNo">450</span>            int lambda,<a name="line.450"></a>
<span class="sourceLineNo">451</span>            boolean isActive,<a name="line.451"></a>
<span class="sourceLineNo">452</span>            int diagonalOnly, <a name="line.452"></a>
<span class="sourceLineNo">453</span>            double stopValue,<a name="line.453"></a>
<span class="sourceLineNo">454</span>            double fTol,<a name="line.454"></a>
<span class="sourceLineNo">455</span>            double pointTol,<a name="line.455"></a>
<span class="sourceLineNo">456</span>            int maxEvaluations,<a name="line.456"></a>
<span class="sourceLineNo">457</span>            PointValuePair expected) {<a name="line.457"></a>
<span class="sourceLineNo">458</span>        int dim = startPoint.length;<a name="line.458"></a>
<span class="sourceLineNo">459</span>        // test diagonalOnly = 0 - slow but normally fewer feval#<a name="line.459"></a>
<span class="sourceLineNo">460</span>        CMAESOptimizer optim = new CMAESOptimizer(30000, stopValue, isActive, diagonalOnly,<a name="line.460"></a>
<span class="sourceLineNo">461</span>                                                  0, new MersenneTwister(), false, null);<a name="line.461"></a>
<span class="sourceLineNo">462</span>        final double[] lB = boundaries == null ? null : boundaries[0];<a name="line.462"></a>
<span class="sourceLineNo">463</span>        final double[] uB = boundaries == null ? null : boundaries[1];<a name="line.463"></a>
<span class="sourceLineNo">464</span>        PointValuePair result = boundaries == null ?<a name="line.464"></a>
<span class="sourceLineNo">465</span>            optim.optimize(maxEvaluations, func, goal,<a name="line.465"></a>
<span class="sourceLineNo">466</span>                           new InitialGuess(startPoint),<a name="line.466"></a>
<span class="sourceLineNo">467</span>                           new CMAESOptimizer.Sigma(inSigma),<a name="line.467"></a>
<span class="sourceLineNo">468</span>                           new CMAESOptimizer.PopulationSize(lambda)) :<a name="line.468"></a>
<span class="sourceLineNo">469</span>            optim.optimize(maxEvaluations, func, goal,<a name="line.469"></a>
<span class="sourceLineNo">470</span>                           new InitialGuess(startPoint),<a name="line.470"></a>
<span class="sourceLineNo">471</span>                           new SimpleBounds(lB, uB),<a name="line.471"></a>
<span class="sourceLineNo">472</span>                           new CMAESOptimizer.Sigma(inSigma),<a name="line.472"></a>
<span class="sourceLineNo">473</span>                           new CMAESOptimizer.PopulationSize(lambda));<a name="line.473"></a>
<span class="sourceLineNo">474</span>        // System.out.println("sol=" + Arrays.toString(result.getPoint()));<a name="line.474"></a>
<span class="sourceLineNo">475</span>        Assert.assertEquals(expected.getValue(), result.getValue(), fTol);<a name="line.475"></a>
<span class="sourceLineNo">476</span>        for (int i = 0; i &lt; dim; i++) {<a name="line.476"></a>
<span class="sourceLineNo">477</span>            Assert.assertEquals(expected.getPoint()[i], result.getPoint()[i], pointTol);<a name="line.477"></a>
<span class="sourceLineNo">478</span>        }<a name="line.478"></a>
<span class="sourceLineNo">479</span>    }<a name="line.479"></a>
<span class="sourceLineNo">480</span><a name="line.480"></a>
<span class="sourceLineNo">481</span>    private static double[] point(int n, double value) {<a name="line.481"></a>
<span class="sourceLineNo">482</span>        double[] ds = new double[n];<a name="line.482"></a>
<span class="sourceLineNo">483</span>        Arrays.fill(ds, value);<a name="line.483"></a>
<span class="sourceLineNo">484</span>        return ds;<a name="line.484"></a>
<span class="sourceLineNo">485</span>    }<a name="line.485"></a>
<span class="sourceLineNo">486</span><a name="line.486"></a>
<span class="sourceLineNo">487</span>    private static double[][] boundaries(int dim,<a name="line.487"></a>
<span class="sourceLineNo">488</span>            double lower, double upper) {<a name="line.488"></a>
<span class="sourceLineNo">489</span>        double[][] boundaries = new double[2][dim];<a name="line.489"></a>
<span class="sourceLineNo">490</span>        for (int i = 0; i &lt; dim; i++)<a name="line.490"></a>
<span class="sourceLineNo">491</span>            boundaries[0][i] = lower;<a name="line.491"></a>
<span class="sourceLineNo">492</span>        for (int i = 0; i &lt; dim; i++)<a name="line.492"></a>
<span class="sourceLineNo">493</span>            boundaries[1][i] = upper;<a name="line.493"></a>
<span class="sourceLineNo">494</span>        return boundaries;<a name="line.494"></a>
<span class="sourceLineNo">495</span>    }<a name="line.495"></a>
<span class="sourceLineNo">496</span><a name="line.496"></a>
<span class="sourceLineNo">497</span>    private static class Sphere implements MultivariateFunction {<a name="line.497"></a>
<span class="sourceLineNo">498</span><a name="line.498"></a>
<span class="sourceLineNo">499</span>        public double value(double[] x) {<a name="line.499"></a>
<span class="sourceLineNo">500</span>            double f = 0;<a name="line.500"></a>
<span class="sourceLineNo">501</span>            for (int i = 0; i &lt; x.length; ++i)<a name="line.501"></a>
<span class="sourceLineNo">502</span>                f += x[i] * x[i];<a name="line.502"></a>
<span class="sourceLineNo">503</span>            return f;<a name="line.503"></a>
<span class="sourceLineNo">504</span>        }<a name="line.504"></a>
<span class="sourceLineNo">505</span>    }<a name="line.505"></a>
<span class="sourceLineNo">506</span><a name="line.506"></a>
<span class="sourceLineNo">507</span>    private static class Cigar implements MultivariateFunction {<a name="line.507"></a>
<span class="sourceLineNo">508</span>        private double factor;<a name="line.508"></a>
<span class="sourceLineNo">509</span><a name="line.509"></a>
<span class="sourceLineNo">510</span>        Cigar() {<a name="line.510"></a>
<span class="sourceLineNo">511</span>            this(1e3);<a name="line.511"></a>
<span class="sourceLineNo">512</span>        }<a name="line.512"></a>
<span class="sourceLineNo">513</span><a name="line.513"></a>
<span class="sourceLineNo">514</span>        Cigar(double axisratio) {<a name="line.514"></a>
<span class="sourceLineNo">515</span>            factor = axisratio * axisratio;<a name="line.515"></a>
<span class="sourceLineNo">516</span>        }<a name="line.516"></a>
<span class="sourceLineNo">517</span><a name="line.517"></a>
<span class="sourceLineNo">518</span>        public double value(double[] x) {<a name="line.518"></a>
<span class="sourceLineNo">519</span>            double f = x[0] * x[0];<a name="line.519"></a>
<span class="sourceLineNo">520</span>            for (int i = 1; i &lt; x.length; ++i)<a name="line.520"></a>
<span class="sourceLineNo">521</span>                f += factor * x[i] * x[i];<a name="line.521"></a>
<span class="sourceLineNo">522</span>            return f;<a name="line.522"></a>
<span class="sourceLineNo">523</span>        }<a name="line.523"></a>
<span class="sourceLineNo">524</span>    }<a name="line.524"></a>
<span class="sourceLineNo">525</span><a name="line.525"></a>
<span class="sourceLineNo">526</span>    private static class Tablet implements MultivariateFunction {<a name="line.526"></a>
<span class="sourceLineNo">527</span>        private double factor;<a name="line.527"></a>
<span class="sourceLineNo">528</span><a name="line.528"></a>
<span class="sourceLineNo">529</span>        Tablet() {<a name="line.529"></a>
<span class="sourceLineNo">530</span>            this(1e3);<a name="line.530"></a>
<span class="sourceLineNo">531</span>        }<a name="line.531"></a>
<span class="sourceLineNo">532</span><a name="line.532"></a>
<span class="sourceLineNo">533</span>        Tablet(double axisratio) {<a name="line.533"></a>
<span class="sourceLineNo">534</span>            factor = axisratio * axisratio;<a name="line.534"></a>
<span class="sourceLineNo">535</span>        }<a name="line.535"></a>
<span class="sourceLineNo">536</span><a name="line.536"></a>
<span class="sourceLineNo">537</span>        public double value(double[] x) {<a name="line.537"></a>
<span class="sourceLineNo">538</span>            double f = factor * x[0] * x[0];<a name="line.538"></a>
<span class="sourceLineNo">539</span>            for (int i = 1; i &lt; x.length; ++i)<a name="line.539"></a>
<span class="sourceLineNo">540</span>                f += x[i] * x[i];<a name="line.540"></a>
<span class="sourceLineNo">541</span>            return f;<a name="line.541"></a>
<span class="sourceLineNo">542</span>        }<a name="line.542"></a>
<span class="sourceLineNo">543</span>    }<a name="line.543"></a>
<span class="sourceLineNo">544</span><a name="line.544"></a>
<span class="sourceLineNo">545</span>    private static class CigTab implements MultivariateFunction {<a name="line.545"></a>
<span class="sourceLineNo">546</span>        private double factor;<a name="line.546"></a>
<span class="sourceLineNo">547</span><a name="line.547"></a>
<span class="sourceLineNo">548</span>        CigTab() {<a name="line.548"></a>
<span class="sourceLineNo">549</span>            this(1e4);<a name="line.549"></a>
<span class="sourceLineNo">550</span>        }<a name="line.550"></a>
<span class="sourceLineNo">551</span><a name="line.551"></a>
<span class="sourceLineNo">552</span>        CigTab(double axisratio) {<a name="line.552"></a>
<span class="sourceLineNo">553</span>            factor = axisratio;<a name="line.553"></a>
<span class="sourceLineNo">554</span>        }<a name="line.554"></a>
<span class="sourceLineNo">555</span><a name="line.555"></a>
<span class="sourceLineNo">556</span>        public double value(double[] x) {<a name="line.556"></a>
<span class="sourceLineNo">557</span>            int end = x.length - 1;<a name="line.557"></a>
<span class="sourceLineNo">558</span>            double f = x[0] * x[0] / factor + factor * x[end] * x[end];<a name="line.558"></a>
<span class="sourceLineNo">559</span>            for (int i = 1; i &lt; end; ++i)<a name="line.559"></a>
<span class="sourceLineNo">560</span>                f += x[i] * x[i];<a name="line.560"></a>
<span class="sourceLineNo">561</span>            return f;<a name="line.561"></a>
<span class="sourceLineNo">562</span>        }<a name="line.562"></a>
<span class="sourceLineNo">563</span>    }<a name="line.563"></a>
<span class="sourceLineNo">564</span><a name="line.564"></a>
<span class="sourceLineNo">565</span>    private static class TwoAxes implements MultivariateFunction {<a name="line.565"></a>
<span class="sourceLineNo">566</span><a name="line.566"></a>
<span class="sourceLineNo">567</span>        private double factor;<a name="line.567"></a>
<span class="sourceLineNo">568</span><a name="line.568"></a>
<span class="sourceLineNo">569</span>        TwoAxes() {<a name="line.569"></a>
<span class="sourceLineNo">570</span>            this(1e6);<a name="line.570"></a>
<span class="sourceLineNo">571</span>        }<a name="line.571"></a>
<span class="sourceLineNo">572</span><a name="line.572"></a>
<span class="sourceLineNo">573</span>        TwoAxes(double axisratio) {<a name="line.573"></a>
<span class="sourceLineNo">574</span>            factor = axisratio * axisratio;<a name="line.574"></a>
<span class="sourceLineNo">575</span>        }<a name="line.575"></a>
<span class="sourceLineNo">576</span><a name="line.576"></a>
<span class="sourceLineNo">577</span>        public double value(double[] x) {<a name="line.577"></a>
<span class="sourceLineNo">578</span>            double f = 0;<a name="line.578"></a>
<span class="sourceLineNo">579</span>            for (int i = 0; i &lt; x.length; ++i)<a name="line.579"></a>
<span class="sourceLineNo">580</span>                f += (i &lt; x.length / 2 ? factor : 1) * x[i] * x[i];<a name="line.580"></a>
<span class="sourceLineNo">581</span>            return f;<a name="line.581"></a>
<span class="sourceLineNo">582</span>        }<a name="line.582"></a>
<span class="sourceLineNo">583</span>    }<a name="line.583"></a>
<span class="sourceLineNo">584</span><a name="line.584"></a>
<span class="sourceLineNo">585</span>    private static class ElliRotated implements MultivariateFunction {<a name="line.585"></a>
<span class="sourceLineNo">586</span>        private Basis B = new Basis();<a name="line.586"></a>
<span class="sourceLineNo">587</span>        private double factor;<a name="line.587"></a>
<span class="sourceLineNo">588</span><a name="line.588"></a>
<span class="sourceLineNo">589</span>        ElliRotated() {<a name="line.589"></a>
<span class="sourceLineNo">590</span>            this(1e3);<a name="line.590"></a>
<span class="sourceLineNo">591</span>        }<a name="line.591"></a>
<span class="sourceLineNo">592</span><a name="line.592"></a>
<span class="sourceLineNo">593</span>        ElliRotated(double axisratio) {<a name="line.593"></a>
<span class="sourceLineNo">594</span>            factor = axisratio * axisratio;<a name="line.594"></a>
<span class="sourceLineNo">595</span>        }<a name="line.595"></a>
<span class="sourceLineNo">596</span><a name="line.596"></a>
<span class="sourceLineNo">597</span>        public double value(double[] x) {<a name="line.597"></a>
<span class="sourceLineNo">598</span>            double f = 0;<a name="line.598"></a>
<span class="sourceLineNo">599</span>            x = B.Rotate(x);<a name="line.599"></a>
<span class="sourceLineNo">600</span>            for (int i = 0; i &lt; x.length; ++i)<a name="line.600"></a>
<span class="sourceLineNo">601</span>                f += FastMath.pow(factor, i / (x.length - 1.)) * x[i] * x[i];<a name="line.601"></a>
<span class="sourceLineNo">602</span>            return f;<a name="line.602"></a>
<span class="sourceLineNo">603</span>        }<a name="line.603"></a>
<span class="sourceLineNo">604</span>    }<a name="line.604"></a>
<span class="sourceLineNo">605</span><a name="line.605"></a>
<span class="sourceLineNo">606</span>    private static class Elli implements MultivariateFunction {<a name="line.606"></a>
<span class="sourceLineNo">607</span><a name="line.607"></a>
<span class="sourceLineNo">608</span>        private double factor;<a name="line.608"></a>
<span class="sourceLineNo">609</span><a name="line.609"></a>
<span class="sourceLineNo">610</span>        Elli() {<a name="line.610"></a>
<span class="sourceLineNo">611</span>            this(1e3);<a name="line.611"></a>
<span class="sourceLineNo">612</span>        }<a name="line.612"></a>
<span class="sourceLineNo">613</span><a name="line.613"></a>
<span class="sourceLineNo">614</span>        Elli(double axisratio) {<a name="line.614"></a>
<span class="sourceLineNo">615</span>            factor = axisratio * axisratio;<a name="line.615"></a>
<span class="sourceLineNo">616</span>        }<a name="line.616"></a>
<span class="sourceLineNo">617</span><a name="line.617"></a>
<span class="sourceLineNo">618</span>        public double value(double[] x) {<a name="line.618"></a>
<span class="sourceLineNo">619</span>            double f = 0;<a name="line.619"></a>
<span class="sourceLineNo">620</span>            for (int i = 0; i &lt; x.length; ++i)<a name="line.620"></a>
<span class="sourceLineNo">621</span>                f += FastMath.pow(factor, i / (x.length - 1.)) * x[i] * x[i];<a name="line.621"></a>
<span class="sourceLineNo">622</span>            return f;<a name="line.622"></a>
<span class="sourceLineNo">623</span>        }<a name="line.623"></a>
<span class="sourceLineNo">624</span>    }<a name="line.624"></a>
<span class="sourceLineNo">625</span><a name="line.625"></a>
<span class="sourceLineNo">626</span>    private static class MinusElli implements MultivariateFunction {<a name="line.626"></a>
<span class="sourceLineNo">627</span><a name="line.627"></a>
<span class="sourceLineNo">628</span>        public double value(double[] x) {<a name="line.628"></a>
<span class="sourceLineNo">629</span>            return 1.0-(new Elli().value(x));<a name="line.629"></a>
<span class="sourceLineNo">630</span>        }<a name="line.630"></a>
<span class="sourceLineNo">631</span>    }<a name="line.631"></a>
<span class="sourceLineNo">632</span><a name="line.632"></a>
<span class="sourceLineNo">633</span>    private static class DiffPow implements MultivariateFunction {<a name="line.633"></a>
<span class="sourceLineNo">634</span><a name="line.634"></a>
<span class="sourceLineNo">635</span>        public double value(double[] x) {<a name="line.635"></a>
<span class="sourceLineNo">636</span>            double f = 0;<a name="line.636"></a>
<span class="sourceLineNo">637</span>            for (int i = 0; i &lt; x.length; ++i)<a name="line.637"></a>
<span class="sourceLineNo">638</span>                f += FastMath.pow(FastMath.abs(x[i]), 2. + 10 * (double) i<a name="line.638"></a>
<span class="sourceLineNo">639</span>                        / (x.length - 1.));<a name="line.639"></a>
<span class="sourceLineNo">640</span>            return f;<a name="line.640"></a>
<span class="sourceLineNo">641</span>        }<a name="line.641"></a>
<span class="sourceLineNo">642</span>    }<a name="line.642"></a>
<span class="sourceLineNo">643</span><a name="line.643"></a>
<span class="sourceLineNo">644</span>    private static class SsDiffPow implements MultivariateFunction {<a name="line.644"></a>
<span class="sourceLineNo">645</span><a name="line.645"></a>
<span class="sourceLineNo">646</span>        public double value(double[] x) {<a name="line.646"></a>
<span class="sourceLineNo">647</span>            double f = FastMath.pow(new DiffPow().value(x), 0.25);<a name="line.647"></a>
<span class="sourceLineNo">648</span>            return f;<a name="line.648"></a>
<span class="sourceLineNo">649</span>        }<a name="line.649"></a>
<span class="sourceLineNo">650</span>    }<a name="line.650"></a>
<span class="sourceLineNo">651</span><a name="line.651"></a>
<span class="sourceLineNo">652</span>    private static class Rosen implements MultivariateFunction {<a name="line.652"></a>
<span class="sourceLineNo">653</span><a name="line.653"></a>
<span class="sourceLineNo">654</span>        public double value(double[] x) {<a name="line.654"></a>
<span class="sourceLineNo">655</span>            double f = 0;<a name="line.655"></a>
<span class="sourceLineNo">656</span>            for (int i = 0; i &lt; x.length - 1; ++i)<a name="line.656"></a>
<span class="sourceLineNo">657</span>                f += 1e2 * (x[i] * x[i] - x[i + 1]) * (x[i] * x[i] - x[i + 1])<a name="line.657"></a>
<span class="sourceLineNo">658</span>                + (x[i] - 1.) * (x[i] - 1.);<a name="line.658"></a>
<span class="sourceLineNo">659</span>            return f;<a name="line.659"></a>
<span class="sourceLineNo">660</span>        }<a name="line.660"></a>
<span class="sourceLineNo">661</span>    }<a name="line.661"></a>
<span class="sourceLineNo">662</span><a name="line.662"></a>
<span class="sourceLineNo">663</span>    private static class Ackley implements MultivariateFunction {<a name="line.663"></a>
<span class="sourceLineNo">664</span>        private double axisratio;<a name="line.664"></a>
<span class="sourceLineNo">665</span><a name="line.665"></a>
<span class="sourceLineNo">666</span>        Ackley(double axra) {<a name="line.666"></a>
<span class="sourceLineNo">667</span>            axisratio = axra;<a name="line.667"></a>
<span class="sourceLineNo">668</span>        }<a name="line.668"></a>
<span class="sourceLineNo">669</span><a name="line.669"></a>
<span class="sourceLineNo">670</span>        public Ackley() {<a name="line.670"></a>
<span class="sourceLineNo">671</span>            this(1);<a name="line.671"></a>
<span class="sourceLineNo">672</span>        }<a name="line.672"></a>
<span class="sourceLineNo">673</span><a name="line.673"></a>
<span class="sourceLineNo">674</span>        public double value(double[] x) {<a name="line.674"></a>
<span class="sourceLineNo">675</span>            double f = 0;<a name="line.675"></a>
<span class="sourceLineNo">676</span>            double res2 = 0;<a name="line.676"></a>
<span class="sourceLineNo">677</span>            double fac = 0;<a name="line.677"></a>
<span class="sourceLineNo">678</span>            for (int i = 0; i &lt; x.length; ++i) {<a name="line.678"></a>
<span class="sourceLineNo">679</span>                fac = FastMath.pow(axisratio, (i - 1.) / (x.length - 1.));<a name="line.679"></a>
<span class="sourceLineNo">680</span>                f += fac * fac * x[i] * x[i];<a name="line.680"></a>
<span class="sourceLineNo">681</span>                res2 += FastMath.cos(2. * FastMath.PI * fac * x[i]);<a name="line.681"></a>
<span class="sourceLineNo">682</span>            }<a name="line.682"></a>
<span class="sourceLineNo">683</span>            f = (20. - 20. * FastMath.exp(-0.2 * FastMath.sqrt(f / x.length))<a name="line.683"></a>
<span class="sourceLineNo">684</span>                    + FastMath.exp(1.) - FastMath.exp(res2 / x.length));<a name="line.684"></a>
<span class="sourceLineNo">685</span>            return f;<a name="line.685"></a>
<span class="sourceLineNo">686</span>        }<a name="line.686"></a>
<span class="sourceLineNo">687</span>    }<a name="line.687"></a>
<span class="sourceLineNo">688</span><a name="line.688"></a>
<span class="sourceLineNo">689</span>    private static class Rastrigin implements MultivariateFunction {<a name="line.689"></a>
<span class="sourceLineNo">690</span><a name="line.690"></a>
<span class="sourceLineNo">691</span>        private double axisratio;<a name="line.691"></a>
<span class="sourceLineNo">692</span>        private double amplitude;<a name="line.692"></a>
<span class="sourceLineNo">693</span><a name="line.693"></a>
<span class="sourceLineNo">694</span>        Rastrigin() {<a name="line.694"></a>
<span class="sourceLineNo">695</span>            this(1, 10);<a name="line.695"></a>
<span class="sourceLineNo">696</span>        }<a name="line.696"></a>
<span class="sourceLineNo">697</span><a name="line.697"></a>
<span class="sourceLineNo">698</span>        Rastrigin(double axisratio, double amplitude) {<a name="line.698"></a>
<span class="sourceLineNo">699</span>            this.axisratio = axisratio;<a name="line.699"></a>
<span class="sourceLineNo">700</span>            this.amplitude = amplitude;<a name="line.700"></a>
<span class="sourceLineNo">701</span>        }<a name="line.701"></a>
<span class="sourceLineNo">702</span><a name="line.702"></a>
<span class="sourceLineNo">703</span>        public double value(double[] x) {<a name="line.703"></a>
<span class="sourceLineNo">704</span>            double f = 0;<a name="line.704"></a>
<span class="sourceLineNo">705</span>            double fac;<a name="line.705"></a>
<span class="sourceLineNo">706</span>            for (int i = 0; i &lt; x.length; ++i) {<a name="line.706"></a>
<span class="sourceLineNo">707</span>                fac = FastMath.pow(axisratio, (i - 1.) / (x.length - 1.));<a name="line.707"></a>
<span class="sourceLineNo">708</span>                if (i == 0 &amp;&amp; x[i] &lt; 0)<a name="line.708"></a>
<span class="sourceLineNo">709</span>                    fac *= 1.;<a name="line.709"></a>
<span class="sourceLineNo">710</span>                f += fac * fac * x[i] * x[i] + amplitude<a name="line.710"></a>
<span class="sourceLineNo">711</span>                * (1. - FastMath.cos(2. * FastMath.PI * fac * x[i]));<a name="line.711"></a>
<span class="sourceLineNo">712</span>            }<a name="line.712"></a>
<span class="sourceLineNo">713</span>            return f;<a name="line.713"></a>
<span class="sourceLineNo">714</span>        }<a name="line.714"></a>
<span class="sourceLineNo">715</span>    }<a name="line.715"></a>
<span class="sourceLineNo">716</span><a name="line.716"></a>
<span class="sourceLineNo">717</span>    private static class Basis {<a name="line.717"></a>
<span class="sourceLineNo">718</span>        double[][] basis;<a name="line.718"></a>
<span class="sourceLineNo">719</span>        Random rand = new Random(2); // use not always the same basis<a name="line.719"></a>
<span class="sourceLineNo">720</span><a name="line.720"></a>
<span class="sourceLineNo">721</span>        double[] Rotate(double[] x) {<a name="line.721"></a>
<span class="sourceLineNo">722</span>            GenBasis(x.length);<a name="line.722"></a>
<span class="sourceLineNo">723</span>            double[] y = new double[x.length];<a name="line.723"></a>
<span class="sourceLineNo">724</span>            for (int i = 0; i &lt; x.length; ++i) {<a name="line.724"></a>
<span class="sourceLineNo">725</span>                y[i] = 0;<a name="line.725"></a>
<span class="sourceLineNo">726</span>                for (int j = 0; j &lt; x.length; ++j)<a name="line.726"></a>
<span class="sourceLineNo">727</span>                    y[i] += basis[i][j] * x[j];<a name="line.727"></a>
<span class="sourceLineNo">728</span>            }<a name="line.728"></a>
<span class="sourceLineNo">729</span>            return y;<a name="line.729"></a>
<span class="sourceLineNo">730</span>        }<a name="line.730"></a>
<span class="sourceLineNo">731</span><a name="line.731"></a>
<span class="sourceLineNo">732</span>        void GenBasis(int DIM) {<a name="line.732"></a>
<span class="sourceLineNo">733</span>            if (basis != null ? basis.length == DIM : false)<a name="line.733"></a>
<span class="sourceLineNo">734</span>                return;<a name="line.734"></a>
<span class="sourceLineNo">735</span><a name="line.735"></a>
<span class="sourceLineNo">736</span>            double sp;<a name="line.736"></a>
<span class="sourceLineNo">737</span>            int i, j, k;<a name="line.737"></a>
<span class="sourceLineNo">738</span><a name="line.738"></a>
<span class="sourceLineNo">739</span>            /* generate orthogonal basis */<a name="line.739"></a>
<span class="sourceLineNo">740</span>            basis = new double[DIM][DIM];<a name="line.740"></a>
<span class="sourceLineNo">741</span>            for (i = 0; i &lt; DIM; ++i) {<a name="line.741"></a>
<span class="sourceLineNo">742</span>                /* sample components gaussian */<a name="line.742"></a>
<span class="sourceLineNo">743</span>                for (j = 0; j &lt; DIM; ++j)<a name="line.743"></a>
<span class="sourceLineNo">744</span>                    basis[i][j] = rand.nextGaussian();<a name="line.744"></a>
<span class="sourceLineNo">745</span>                /* substract projection of previous vectors */<a name="line.745"></a>
<span class="sourceLineNo">746</span>                for (j = i - 1; j &gt;= 0; --j) {<a name="line.746"></a>
<span class="sourceLineNo">747</span>                    for (sp = 0., k = 0; k &lt; DIM; ++k)<a name="line.747"></a>
<span class="sourceLineNo">748</span>                        sp += basis[i][k] * basis[j][k]; /* scalar product */<a name="line.748"></a>
<span class="sourceLineNo">749</span>                    for (k = 0; k &lt; DIM; ++k)<a name="line.749"></a>
<span class="sourceLineNo">750</span>                        basis[i][k] -= sp * basis[j][k]; /* substract */<a name="line.750"></a>
<span class="sourceLineNo">751</span>                }<a name="line.751"></a>
<span class="sourceLineNo">752</span>                /* normalize */<a name="line.752"></a>
<span class="sourceLineNo">753</span>                for (sp = 0., k = 0; k &lt; DIM; ++k)<a name="line.753"></a>
<span class="sourceLineNo">754</span>                    sp += basis[i][k] * basis[i][k]; /* squared norm */<a name="line.754"></a>
<span class="sourceLineNo">755</span>                for (k = 0; k &lt; DIM; ++k)<a name="line.755"></a>
<span class="sourceLineNo">756</span>                    basis[i][k] /= FastMath.sqrt(sp);<a name="line.756"></a>
<span class="sourceLineNo">757</span>            }<a name="line.757"></a>
<span class="sourceLineNo">758</span>        }<a name="line.758"></a>
<span class="sourceLineNo">759</span>    }<a name="line.759"></a>
<span class="sourceLineNo">760</span>}<a name="line.760"></a>




























































</pre>
</div>
</body>
</html>
