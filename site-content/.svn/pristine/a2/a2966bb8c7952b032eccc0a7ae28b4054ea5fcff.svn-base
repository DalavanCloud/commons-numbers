<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>CorrelatedRandomVectorGeneratorTest xref</title>
<link type="text/css" rel="stylesheet" href="../../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../testapidocs/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">//Licensed to the Apache Software Foundation (ASF) under one</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment">//or more contributor license agreements.  See the NOTICE file</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment">//distributed with this work for additional information</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment">//regarding copyright ownership.  The ASF licenses this file</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment">//to you under the Apache License, Version 2.0 (the</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment">//"License"); you may not use this file except in compliance</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment">//with the License.  You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment">//http://www.apache.org/licenses/LICENSE-2.0</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment">//Unless required by applicable law or agreed to in writing,</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment">//software distributed under the License is distributed on an</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment">//"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment">//KIND, either express or implied.  See the License for the</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment">//specific language governing permissions and limitations</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  <em class="jxr_comment">//under the License.</em>
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  <strong class="jxr_keyword">package</strong> org.apache.commons.math3.random;
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> java.util.Arrays;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.TestUtils;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.linear.Array2DRowRealMatrix;
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.linear.MatrixUtils;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.linear.RealMatrix;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.stat.correlation.StorelessCovariance;
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.stat.descriptive.moment.VectorialCovariance;
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.stat.descriptive.moment.VectorialMean;
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.util.FastMath;
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <strong class="jxr_keyword">import</strong> org.junit.Test;
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <strong class="jxr_keyword">import</strong> org.junit.Assert;
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.html">CorrelatedRandomVectorGeneratorTest</a> {
<a class="jxr_linenumber" name="L35" href="#L35">35</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">double</strong>[] mean;
<a class="jxr_linenumber" name="L36" href="#L36">36</a>      <strong class="jxr_keyword">private</strong> RealMatrix covariance;
<a class="jxr_linenumber" name="L37" href="#L37">37</a>      <strong class="jxr_keyword">private</strong> CorrelatedRandomVectorGenerator generator;
<a class="jxr_linenumber" name="L38" href="#L38">38</a>  
<a class="jxr_linenumber" name="L39" href="#L39">39</a>      <strong class="jxr_keyword">public</strong> <a href="../../../../../org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.html">CorrelatedRandomVectorGeneratorTest</a>() {
<a class="jxr_linenumber" name="L40" href="#L40">40</a>          mean = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0.0, 1.0, -3.0, 2.3 };
<a class="jxr_linenumber" name="L41" href="#L41">41</a>  
<a class="jxr_linenumber" name="L42" href="#L42">42</a>          RealMatrix b = MatrixUtils.createRealMatrix(4, 3);
<a class="jxr_linenumber" name="L43" href="#L43">43</a>          <strong class="jxr_keyword">int</strong> counter = 0;
<a class="jxr_linenumber" name="L44" href="#L44">44</a>          <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; b.getRowDimension(); ++i) {
<a class="jxr_linenumber" name="L45" href="#L45">45</a>              <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = 0; j &lt; b.getColumnDimension(); ++j) {
<a class="jxr_linenumber" name="L46" href="#L46">46</a>                  b.setEntry(i, j, 1.0 + 0.1 * ++counter);
<a class="jxr_linenumber" name="L47" href="#L47">47</a>              }
<a class="jxr_linenumber" name="L48" href="#L48">48</a>          }
<a class="jxr_linenumber" name="L49" href="#L49">49</a>          RealMatrix bbt = b.multiply(b.transpose());
<a class="jxr_linenumber" name="L50" href="#L50">50</a>          covariance = MatrixUtils.createRealMatrix(mean.length, mean.length);
<a class="jxr_linenumber" name="L51" href="#L51">51</a>          <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; covariance.getRowDimension(); ++i) {
<a class="jxr_linenumber" name="L52" href="#L52">52</a>              covariance.setEntry(i, i, bbt.getEntry(i, i));
<a class="jxr_linenumber" name="L53" href="#L53">53</a>              <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = 0; j &lt; covariance.getColumnDimension(); ++j) {
<a class="jxr_linenumber" name="L54" href="#L54">54</a>                  <strong class="jxr_keyword">double</strong> s = bbt.getEntry(i, j);
<a class="jxr_linenumber" name="L55" href="#L55">55</a>                  covariance.setEntry(i, j, s);
<a class="jxr_linenumber" name="L56" href="#L56">56</a>                  covariance.setEntry(j, i, s);
<a class="jxr_linenumber" name="L57" href="#L57">57</a>              }
<a class="jxr_linenumber" name="L58" href="#L58">58</a>          }
<a class="jxr_linenumber" name="L59" href="#L59">59</a>  
<a class="jxr_linenumber" name="L60" href="#L60">60</a>          RandomGenerator rg = <strong class="jxr_keyword">new</strong> JDKRandomGenerator();
<a class="jxr_linenumber" name="L61" href="#L61">61</a>          rg.setSeed(17399225432l);
<a class="jxr_linenumber" name="L62" href="#L62">62</a>          GaussianRandomGenerator rawGenerator = <strong class="jxr_keyword">new</strong> GaussianRandomGenerator(rg);
<a class="jxr_linenumber" name="L63" href="#L63">63</a>          generator = <strong class="jxr_keyword">new</strong> CorrelatedRandomVectorGenerator(mean,
<a class="jxr_linenumber" name="L64" href="#L64">64</a>                                                          covariance,
<a class="jxr_linenumber" name="L65" href="#L65">65</a>                                                          1.0e-12 * covariance.getNorm(),
<a class="jxr_linenumber" name="L66" href="#L66">66</a>                                                          rawGenerator);
<a class="jxr_linenumber" name="L67" href="#L67">67</a>      }
<a class="jxr_linenumber" name="L68" href="#L68">68</a>  
<a class="jxr_linenumber" name="L69" href="#L69">69</a>      @Test
<a class="jxr_linenumber" name="L70" href="#L70">70</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testRank() {
<a class="jxr_linenumber" name="L71" href="#L71">71</a>          Assert.assertEquals(2, generator.getRank());
<a class="jxr_linenumber" name="L72" href="#L72">72</a>      }
<a class="jxr_linenumber" name="L73" href="#L73">73</a>  
<a class="jxr_linenumber" name="L74" href="#L74">74</a>      @Test
<a class="jxr_linenumber" name="L75" href="#L75">75</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testMath226() {
<a class="jxr_linenumber" name="L76" href="#L76">76</a>          <strong class="jxr_keyword">double</strong>[] mean = { 1, 1, 10, 1 };
<a class="jxr_linenumber" name="L77" href="#L77">77</a>          <strong class="jxr_keyword">double</strong>[][] cov = {
<a class="jxr_linenumber" name="L78" href="#L78">78</a>                  { 1, 3, 2, 6 },
<a class="jxr_linenumber" name="L79" href="#L79">79</a>                  { 3, 13, 16, 2 },
<a class="jxr_linenumber" name="L80" href="#L80">80</a>                  { 2, 16, 38, -1 },
<a class="jxr_linenumber" name="L81" href="#L81">81</a>                  { 6, 2, -1, 197 }
<a class="jxr_linenumber" name="L82" href="#L82">82</a>          };
<a class="jxr_linenumber" name="L83" href="#L83">83</a>          RealMatrix covRM = MatrixUtils.createRealMatrix(cov);
<a class="jxr_linenumber" name="L84" href="#L84">84</a>          JDKRandomGenerator jg = <strong class="jxr_keyword">new</strong> JDKRandomGenerator();
<a class="jxr_linenumber" name="L85" href="#L85">85</a>          jg.setSeed(5322145245211l);
<a class="jxr_linenumber" name="L86" href="#L86">86</a>          NormalizedRandomGenerator rg = <strong class="jxr_keyword">new</strong> GaussianRandomGenerator(jg);
<a class="jxr_linenumber" name="L87" href="#L87">87</a>          CorrelatedRandomVectorGenerator sg =
<a class="jxr_linenumber" name="L88" href="#L88">88</a>              <strong class="jxr_keyword">new</strong> CorrelatedRandomVectorGenerator(mean, covRM, 0.00001, rg);
<a class="jxr_linenumber" name="L89" href="#L89">89</a>  
<a class="jxr_linenumber" name="L90" href="#L90">90</a>          <strong class="jxr_keyword">double</strong>[] min = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[mean.length];
<a class="jxr_linenumber" name="L91" href="#L91">91</a>          Arrays.fill(min, Double.POSITIVE_INFINITY);
<a class="jxr_linenumber" name="L92" href="#L92">92</a>          <strong class="jxr_keyword">double</strong>[] max = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[mean.length];
<a class="jxr_linenumber" name="L93" href="#L93">93</a>          Arrays.fill(max, Double.NEGATIVE_INFINITY);
<a class="jxr_linenumber" name="L94" href="#L94">94</a>          <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; 10; i++) {
<a class="jxr_linenumber" name="L95" href="#L95">95</a>              <strong class="jxr_keyword">double</strong>[] generated = sg.nextVector();
<a class="jxr_linenumber" name="L96" href="#L96">96</a>              <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = 0; j &lt; generated.length; ++j) {
<a class="jxr_linenumber" name="L97" href="#L97">97</a>                  min[j] = FastMath.min(min[j], generated[j]);
<a class="jxr_linenumber" name="L98" href="#L98">98</a>                  max[j] = FastMath.max(max[j], generated[j]);
<a class="jxr_linenumber" name="L99" href="#L99">99</a>              }
<a class="jxr_linenumber" name="L100" href="#L100">100</a>         }
<a class="jxr_linenumber" name="L101" href="#L101">101</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = 0; j &lt; min.length; ++j) {
<a class="jxr_linenumber" name="L102" href="#L102">102</a>             Assert.assertTrue(max[j] - min[j] &gt; 2.0);
<a class="jxr_linenumber" name="L103" href="#L103">103</a>         }
<a class="jxr_linenumber" name="L104" href="#L104">104</a> 
<a class="jxr_linenumber" name="L105" href="#L105">105</a>     }
<a class="jxr_linenumber" name="L106" href="#L106">106</a> 
<a class="jxr_linenumber" name="L107" href="#L107">107</a>     @Test
<a class="jxr_linenumber" name="L108" href="#L108">108</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testRootMatrix() {
<a class="jxr_linenumber" name="L109" href="#L109">109</a>         RealMatrix b = generator.getRootMatrix();
<a class="jxr_linenumber" name="L110" href="#L110">110</a>         RealMatrix bbt = b.multiply(b.transpose());
<a class="jxr_linenumber" name="L111" href="#L111">111</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; covariance.getRowDimension(); ++i) {
<a class="jxr_linenumber" name="L112" href="#L112">112</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = 0; j &lt; covariance.getColumnDimension(); ++j) {
<a class="jxr_linenumber" name="L113" href="#L113">113</a>                 Assert.assertEquals(covariance.getEntry(i, j), bbt.getEntry(i, j), 1.0e-12);
<a class="jxr_linenumber" name="L114" href="#L114">114</a>             }
<a class="jxr_linenumber" name="L115" href="#L115">115</a>         }
<a class="jxr_linenumber" name="L116" href="#L116">116</a>     }
<a class="jxr_linenumber" name="L117" href="#L117">117</a> 
<a class="jxr_linenumber" name="L118" href="#L118">118</a>     @Test
<a class="jxr_linenumber" name="L119" href="#L119">119</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testMeanAndCovariance() {
<a class="jxr_linenumber" name="L120" href="#L120">120</a> 
<a class="jxr_linenumber" name="L121" href="#L121">121</a>         VectorialMean meanStat = <strong class="jxr_keyword">new</strong> VectorialMean(mean.length);
<a class="jxr_linenumber" name="L122" href="#L122">122</a>         VectorialCovariance covStat = <strong class="jxr_keyword">new</strong> VectorialCovariance(mean.length, <strong class="jxr_keyword">true</strong>);
<a class="jxr_linenumber" name="L123" href="#L123">123</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; 5000; ++i) {
<a class="jxr_linenumber" name="L124" href="#L124">124</a>             <strong class="jxr_keyword">double</strong>[] v = generator.nextVector();
<a class="jxr_linenumber" name="L125" href="#L125">125</a>             meanStat.increment(v);
<a class="jxr_linenumber" name="L126" href="#L126">126</a>             covStat.increment(v);
<a class="jxr_linenumber" name="L127" href="#L127">127</a>         }
<a class="jxr_linenumber" name="L128" href="#L128">128</a> 
<a class="jxr_linenumber" name="L129" href="#L129">129</a>         <strong class="jxr_keyword">double</strong>[] estimatedMean = meanStat.getResult();
<a class="jxr_linenumber" name="L130" href="#L130">130</a>         RealMatrix estimatedCovariance = covStat.getResult();
<a class="jxr_linenumber" name="L131" href="#L131">131</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; estimatedMean.length; ++i) {
<a class="jxr_linenumber" name="L132" href="#L132">132</a>             Assert.assertEquals(mean[i], estimatedMean[i], 0.07);
<a class="jxr_linenumber" name="L133" href="#L133">133</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = 0; j &lt;= i; ++j) {
<a class="jxr_linenumber" name="L134" href="#L134">134</a>                 Assert.assertEquals(covariance.getEntry(i, j),
<a class="jxr_linenumber" name="L135" href="#L135">135</a>                                     estimatedCovariance.getEntry(i, j),
<a class="jxr_linenumber" name="L136" href="#L136">136</a>                                     0.1 * (1.0 + FastMath.abs(mean[i])) * (1.0 + FastMath.abs(mean[j])));
<a class="jxr_linenumber" name="L137" href="#L137">137</a>             }
<a class="jxr_linenumber" name="L138" href="#L138">138</a>         }
<a class="jxr_linenumber" name="L139" href="#L139">139</a> 
<a class="jxr_linenumber" name="L140" href="#L140">140</a>     }
<a class="jxr_linenumber" name="L141" href="#L141">141</a> 
<a class="jxr_linenumber" name="L142" href="#L142">142</a>     @Test
<a class="jxr_linenumber" name="L143" href="#L143">143</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testSampleWithZeroCovariance() {
<a class="jxr_linenumber" name="L144" href="#L144">144</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[][] covMatrix1 = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[][]{
<a class="jxr_linenumber" name="L145" href="#L145">145</a>                 {0.013445532, 0.010394690, 0.009881156, 0.010499559},
<a class="jxr_linenumber" name="L146" href="#L146">146</a>                 {0.010394690, 0.023006616, 0.008196856, 0.010732709},
<a class="jxr_linenumber" name="L147" href="#L147">147</a>                 {0.009881156, 0.008196856, 0.019023866, 0.009210099},
<a class="jxr_linenumber" name="L148" href="#L148">148</a>                 {0.010499559, 0.010732709, 0.009210099, 0.019107243}
<a class="jxr_linenumber" name="L149" href="#L149">149</a>         };
<a class="jxr_linenumber" name="L150" href="#L150">150</a> 
<a class="jxr_linenumber" name="L151" href="#L151">151</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[][] covMatrix2 = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[][]{
<a class="jxr_linenumber" name="L152" href="#L152">152</a>                 {0.0, 0.0, 0.0, 0.0, 0.0},
<a class="jxr_linenumber" name="L153" href="#L153">153</a>                 {0.0, 0.013445532, 0.010394690, 0.009881156, 0.010499559},
<a class="jxr_linenumber" name="L154" href="#L154">154</a>                 {0.0, 0.010394690, 0.023006616, 0.008196856, 0.010732709},
<a class="jxr_linenumber" name="L155" href="#L155">155</a>                 {0.0, 0.009881156, 0.008196856, 0.019023866, 0.009210099},
<a class="jxr_linenumber" name="L156" href="#L156">156</a>                 {0.0, 0.010499559, 0.010732709, 0.009210099, 0.019107243}
<a class="jxr_linenumber" name="L157" href="#L157">157</a>         };
<a class="jxr_linenumber" name="L158" href="#L158">158</a> 
<a class="jxr_linenumber" name="L159" href="#L159">159</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[][] covMatrix3 = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[][]{
<a class="jxr_linenumber" name="L160" href="#L160">160</a>                 {0.013445532, 0.010394690, 0.0, 0.009881156, 0.010499559},
<a class="jxr_linenumber" name="L161" href="#L161">161</a>                 {0.010394690, 0.023006616, 0.0, 0.008196856, 0.010732709},
<a class="jxr_linenumber" name="L162" href="#L162">162</a>                 {0.0, 0.0, 0.0, 0.0, 0.0},
<a class="jxr_linenumber" name="L163" href="#L163">163</a>                 {0.009881156, 0.008196856, 0.0, 0.019023866, 0.009210099},
<a class="jxr_linenumber" name="L164" href="#L164">164</a>                 {0.010499559, 0.010732709, 0.0, 0.009210099, 0.019107243}
<a class="jxr_linenumber" name="L165" href="#L165">165</a>         };
<a class="jxr_linenumber" name="L166" href="#L166">166</a> 
<a class="jxr_linenumber" name="L167" href="#L167">167</a>         testSampler(covMatrix1, 10000, 0.001);
<a class="jxr_linenumber" name="L168" href="#L168">168</a>         testSampler(covMatrix2, 10000, 0.001);
<a class="jxr_linenumber" name="L169" href="#L169">169</a>         testSampler(covMatrix3, 10000, 0.001);
<a class="jxr_linenumber" name="L170" href="#L170">170</a> 
<a class="jxr_linenumber" name="L171" href="#L171">171</a>     }
<a class="jxr_linenumber" name="L172" href="#L172">172</a> 
<a class="jxr_linenumber" name="L173" href="#L173">173</a>     <strong class="jxr_keyword">private</strong> CorrelatedRandomVectorGenerator createSampler(<strong class="jxr_keyword">double</strong>[][] cov) {
<a class="jxr_linenumber" name="L174" href="#L174">174</a>         RealMatrix matrix = <strong class="jxr_keyword">new</strong> Array2DRowRealMatrix(cov);
<a class="jxr_linenumber" name="L175" href="#L175">175</a>         <strong class="jxr_keyword">double</strong> small = 10e-12 * matrix.getNorm();
<a class="jxr_linenumber" name="L176" href="#L176">176</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> CorrelatedRandomVectorGenerator(
<a class="jxr_linenumber" name="L177" href="#L177">177</a>                 <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[cov.length],
<a class="jxr_linenumber" name="L178" href="#L178">178</a>                 matrix,
<a class="jxr_linenumber" name="L179" href="#L179">179</a>                 small,
<a class="jxr_linenumber" name="L180" href="#L180">180</a>                 <strong class="jxr_keyword">new</strong> GaussianRandomGenerator(<strong class="jxr_keyword">new</strong> Well1024a(0x366a26b94e520f41l)));
<a class="jxr_linenumber" name="L181" href="#L181">181</a>     }
<a class="jxr_linenumber" name="L182" href="#L182">182</a> 
<a class="jxr_linenumber" name="L183" href="#L183">183</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">void</strong> testSampler(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[][] covMatrix, <strong class="jxr_keyword">int</strong> samples, <strong class="jxr_keyword">double</strong> epsilon) {
<a class="jxr_linenumber" name="L184" href="#L184">184</a>         CorrelatedRandomVectorGenerator sampler = createSampler(covMatrix);
<a class="jxr_linenumber" name="L185" href="#L185">185</a> 
<a class="jxr_linenumber" name="L186" href="#L186">186</a>         StorelessCovariance cov = <strong class="jxr_keyword">new</strong> StorelessCovariance(covMatrix.length);
<a class="jxr_linenumber" name="L187" href="#L187">187</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; samples; ++i) {
<a class="jxr_linenumber" name="L188" href="#L188">188</a>             cov.increment(sampler.nextVector());
<a class="jxr_linenumber" name="L189" href="#L189">189</a>         }
<a class="jxr_linenumber" name="L190" href="#L190">190</a> 
<a class="jxr_linenumber" name="L191" href="#L191">191</a>         <strong class="jxr_keyword">double</strong>[][] sampleCov = cov.getData();
<a class="jxr_linenumber" name="L192" href="#L192">192</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> r = 0; r &lt; covMatrix.length; ++r) {
<a class="jxr_linenumber" name="L193" href="#L193">193</a>             TestUtils.assertEquals(covMatrix[r], sampleCov[r], epsilon);
<a class="jxr_linenumber" name="L194" href="#L194">194</a>         }
<a class="jxr_linenumber" name="L195" href="#L195">195</a> 
<a class="jxr_linenumber" name="L196" href="#L196">196</a>     }
<a class="jxr_linenumber" name="L197" href="#L197">197</a> 
<a class="jxr_linenumber" name="L198" href="#L198">198</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2003&#x2013;2016 <a href="http://www.apache.org/">The Apache Software Foundation</a>. All rights reserved.</div>
</body>
</html>
