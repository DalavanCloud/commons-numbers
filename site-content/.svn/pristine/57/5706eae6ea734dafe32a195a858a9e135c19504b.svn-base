<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span>package org.apache.commons.math3.util;<a name="line.17"></a>
<span class="sourceLineNo">018</span><a name="line.18"></a>
<span class="sourceLineNo">019</span>import java.util.ConcurrentModificationException;<a name="line.19"></a>
<span class="sourceLineNo">020</span>import java.util.HashMap;<a name="line.20"></a>
<span class="sourceLineNo">021</span>import java.util.HashSet;<a name="line.21"></a>
<span class="sourceLineNo">022</span>import java.util.Map;<a name="line.22"></a>
<span class="sourceLineNo">023</span>import java.util.NoSuchElementException;<a name="line.23"></a>
<span class="sourceLineNo">024</span>import java.util.Random;<a name="line.24"></a>
<span class="sourceLineNo">025</span>import java.util.Set;<a name="line.25"></a>
<span class="sourceLineNo">026</span>import java.util.Map.Entry;<a name="line.26"></a>
<span class="sourceLineNo">027</span><a name="line.27"></a>
<span class="sourceLineNo">028</span>import org.apache.commons.math3.Field;<a name="line.28"></a>
<span class="sourceLineNo">029</span>import org.apache.commons.math3.fraction.Fraction;<a name="line.29"></a>
<span class="sourceLineNo">030</span>import org.apache.commons.math3.fraction.FractionConversionException;<a name="line.30"></a>
<span class="sourceLineNo">031</span>import org.apache.commons.math3.fraction.FractionField;<a name="line.31"></a>
<span class="sourceLineNo">032</span>import org.junit.Assert;<a name="line.32"></a>
<span class="sourceLineNo">033</span>import org.junit.Before;<a name="line.33"></a>
<span class="sourceLineNo">034</span>import org.junit.Test;<a name="line.34"></a>
<span class="sourceLineNo">035</span><a name="line.35"></a>
<span class="sourceLineNo">036</span><a name="line.36"></a>
<span class="sourceLineNo">037</span>@SuppressWarnings("boxing")<a name="line.37"></a>
<span class="sourceLineNo">038</span>public class OpenIntToFieldTest {<a name="line.38"></a>
<span class="sourceLineNo">039</span><a name="line.39"></a>
<span class="sourceLineNo">040</span>    private Map&lt;Integer, Fraction&gt; javaMap = new HashMap&lt;Integer, Fraction&gt;();<a name="line.40"></a>
<span class="sourceLineNo">041</span>    private FractionField field = FractionField.getInstance();<a name="line.41"></a>
<span class="sourceLineNo">042</span><a name="line.42"></a>
<span class="sourceLineNo">043</span>    @Before<a name="line.43"></a>
<span class="sourceLineNo">044</span>    public void setUp() throws FractionConversionException {<a name="line.44"></a>
<span class="sourceLineNo">045</span>        javaMap.put(50, new Fraction(100.0));<a name="line.45"></a>
<span class="sourceLineNo">046</span>        javaMap.put(75, new Fraction(75.0));<a name="line.46"></a>
<span class="sourceLineNo">047</span>        javaMap.put(25, new Fraction(500.0));<a name="line.47"></a>
<span class="sourceLineNo">048</span>        javaMap.put(Integer.MAX_VALUE, new Fraction(Integer.MAX_VALUE));<a name="line.48"></a>
<span class="sourceLineNo">049</span>        javaMap.put(0, new Fraction(-1.0));<a name="line.49"></a>
<span class="sourceLineNo">050</span>        javaMap.put(1, new Fraction(0.0));<a name="line.50"></a>
<span class="sourceLineNo">051</span>        javaMap.put(33, new Fraction(-0.1));<a name="line.51"></a>
<span class="sourceLineNo">052</span>        javaMap.put(23234234, new Fraction(-242343.0));<a name="line.52"></a>
<span class="sourceLineNo">053</span>        javaMap.put(23321, new Fraction (Integer.MIN_VALUE));<a name="line.53"></a>
<span class="sourceLineNo">054</span>        javaMap.put(-4444, new Fraction(332.0));<a name="line.54"></a>
<span class="sourceLineNo">055</span>        javaMap.put(-1, new Fraction(-2323.0));<a name="line.55"></a>
<span class="sourceLineNo">056</span>        javaMap.put(Integer.MIN_VALUE, new Fraction(44.0));<a name="line.56"></a>
<span class="sourceLineNo">057</span><a name="line.57"></a>
<span class="sourceLineNo">058</span>        /* Add a few more to cause the table to rehash */<a name="line.58"></a>
<span class="sourceLineNo">059</span>        javaMap.putAll(generate());<a name="line.59"></a>
<span class="sourceLineNo">060</span><a name="line.60"></a>
<span class="sourceLineNo">061</span>    }<a name="line.61"></a>
<span class="sourceLineNo">062</span><a name="line.62"></a>
<span class="sourceLineNo">063</span>    private Map&lt;Integer, Fraction&gt; generate() {<a name="line.63"></a>
<span class="sourceLineNo">064</span>        Map&lt;Integer, Fraction&gt; map = new HashMap&lt;Integer, Fraction&gt;();<a name="line.64"></a>
<span class="sourceLineNo">065</span>        Random r = new Random();<a name="line.65"></a>
<span class="sourceLineNo">066</span>        double dd=0;<a name="line.66"></a>
<span class="sourceLineNo">067</span>        for (int i = 0; i &lt; 2000; ++i)<a name="line.67"></a>
<span class="sourceLineNo">068</span>            dd = r.nextDouble();<a name="line.68"></a>
<span class="sourceLineNo">069</span>            try {<a name="line.69"></a>
<span class="sourceLineNo">070</span>                map.put(r.nextInt(), new Fraction(dd));<a name="line.70"></a>
<span class="sourceLineNo">071</span>            } catch (FractionConversionException e) {<a name="line.71"></a>
<span class="sourceLineNo">072</span>                throw new IllegalStateException("Invalid :"+dd, e);<a name="line.72"></a>
<span class="sourceLineNo">073</span>            }<a name="line.73"></a>
<span class="sourceLineNo">074</span>        return map;<a name="line.74"></a>
<span class="sourceLineNo">075</span>    }<a name="line.75"></a>
<span class="sourceLineNo">076</span><a name="line.76"></a>
<span class="sourceLineNo">077</span>    private OpenIntToFieldHashMap&lt;Fraction&gt; createFromJavaMap(Field&lt;Fraction&gt; field) {<a name="line.77"></a>
<span class="sourceLineNo">078</span>        OpenIntToFieldHashMap&lt;Fraction&gt; map = new OpenIntToFieldHashMap&lt;Fraction&gt;(field);<a name="line.78"></a>
<span class="sourceLineNo">079</span>        for (Map.Entry&lt;Integer, Fraction&gt; mapEntry : javaMap.entrySet()) {<a name="line.79"></a>
<span class="sourceLineNo">080</span>            map.put(mapEntry.getKey(), mapEntry.getValue());<a name="line.80"></a>
<span class="sourceLineNo">081</span>        }<a name="line.81"></a>
<span class="sourceLineNo">082</span>        return map;<a name="line.82"></a>
<span class="sourceLineNo">083</span>    }<a name="line.83"></a>
<span class="sourceLineNo">084</span><a name="line.84"></a>
<span class="sourceLineNo">085</span>    @Test<a name="line.85"></a>
<span class="sourceLineNo">086</span>    public void testPutAndGetWith0ExpectedSize() {<a name="line.86"></a>
<span class="sourceLineNo">087</span>        OpenIntToFieldHashMap&lt;Fraction&gt; map = new OpenIntToFieldHashMap&lt;Fraction&gt;(field,0);<a name="line.87"></a>
<span class="sourceLineNo">088</span>        assertPutAndGet(map);<a name="line.88"></a>
<span class="sourceLineNo">089</span>    }<a name="line.89"></a>
<span class="sourceLineNo">090</span><a name="line.90"></a>
<span class="sourceLineNo">091</span>    @Test<a name="line.91"></a>
<span class="sourceLineNo">092</span>    public void testPutAndGetWithExpectedSize() {<a name="line.92"></a>
<span class="sourceLineNo">093</span>        OpenIntToFieldHashMap&lt;Fraction&gt; map = new OpenIntToFieldHashMap&lt;Fraction&gt;(field,500);<a name="line.93"></a>
<span class="sourceLineNo">094</span>        assertPutAndGet(map);<a name="line.94"></a>
<span class="sourceLineNo">095</span>    }<a name="line.95"></a>
<span class="sourceLineNo">096</span><a name="line.96"></a>
<span class="sourceLineNo">097</span>    @Test<a name="line.97"></a>
<span class="sourceLineNo">098</span>    public void testPutAndGet() {<a name="line.98"></a>
<span class="sourceLineNo">099</span>        OpenIntToFieldHashMap&lt;Fraction&gt; map = new OpenIntToFieldHashMap&lt;Fraction&gt;(field);<a name="line.99"></a>
<span class="sourceLineNo">100</span>        assertPutAndGet(map);<a name="line.100"></a>
<span class="sourceLineNo">101</span>    }<a name="line.101"></a>
<span class="sourceLineNo">102</span><a name="line.102"></a>
<span class="sourceLineNo">103</span>    private void assertPutAndGet(OpenIntToFieldHashMap&lt;Fraction&gt; map) {<a name="line.103"></a>
<span class="sourceLineNo">104</span>        assertPutAndGet(map, 0, new HashSet&lt;Integer&gt;());<a name="line.104"></a>
<span class="sourceLineNo">105</span>    }<a name="line.105"></a>
<span class="sourceLineNo">106</span><a name="line.106"></a>
<span class="sourceLineNo">107</span>    private void assertPutAndGet(OpenIntToFieldHashMap&lt;Fraction&gt; map, int mapSize,<a name="line.107"></a>
<span class="sourceLineNo">108</span>            Set&lt;Integer&gt; keysInMap) {<a name="line.108"></a>
<span class="sourceLineNo">109</span>        Assert.assertEquals(mapSize, map.size());<a name="line.109"></a>
<span class="sourceLineNo">110</span>        for (Map.Entry&lt;Integer, Fraction&gt; mapEntry : javaMap.entrySet()) {<a name="line.110"></a>
<span class="sourceLineNo">111</span>            map.put(mapEntry.getKey(), mapEntry.getValue());<a name="line.111"></a>
<span class="sourceLineNo">112</span>            if (!keysInMap.contains(mapEntry.getKey()))<a name="line.112"></a>
<span class="sourceLineNo">113</span>                ++mapSize;<a name="line.113"></a>
<span class="sourceLineNo">114</span>            Assert.assertEquals(mapSize, map.size());<a name="line.114"></a>
<span class="sourceLineNo">115</span>            Assert.assertEquals(mapEntry.getValue(), map.get(mapEntry.getKey()));<a name="line.115"></a>
<span class="sourceLineNo">116</span>        }<a name="line.116"></a>
<span class="sourceLineNo">117</span>    }<a name="line.117"></a>
<span class="sourceLineNo">118</span><a name="line.118"></a>
<span class="sourceLineNo">119</span>    @Test<a name="line.119"></a>
<span class="sourceLineNo">120</span>    public void testPutAbsentOnExisting() {<a name="line.120"></a>
<span class="sourceLineNo">121</span>        OpenIntToFieldHashMap&lt;Fraction&gt; map = createFromJavaMap(field);<a name="line.121"></a>
<span class="sourceLineNo">122</span>        int size = javaMap.size();<a name="line.122"></a>
<span class="sourceLineNo">123</span>        for (Map.Entry&lt;Integer, Fraction&gt; mapEntry : generateAbsent().entrySet()) {<a name="line.123"></a>
<span class="sourceLineNo">124</span>            map.put(mapEntry.getKey(), mapEntry.getValue());<a name="line.124"></a>
<span class="sourceLineNo">125</span>            Assert.assertEquals(++size, map.size());<a name="line.125"></a>
<span class="sourceLineNo">126</span>            Assert.assertEquals(mapEntry.getValue(), map.get(mapEntry.getKey()));<a name="line.126"></a>
<span class="sourceLineNo">127</span>        }<a name="line.127"></a>
<span class="sourceLineNo">128</span>    }<a name="line.128"></a>
<span class="sourceLineNo">129</span><a name="line.129"></a>
<span class="sourceLineNo">130</span>    @Test<a name="line.130"></a>
<span class="sourceLineNo">131</span>    public void testPutOnExisting() {<a name="line.131"></a>
<span class="sourceLineNo">132</span>        OpenIntToFieldHashMap&lt;Fraction&gt; map = createFromJavaMap(field);<a name="line.132"></a>
<span class="sourceLineNo">133</span>        for (Map.Entry&lt;Integer, Fraction&gt; mapEntry : javaMap.entrySet()) {<a name="line.133"></a>
<span class="sourceLineNo">134</span>            map.put(mapEntry.getKey(), mapEntry.getValue());<a name="line.134"></a>
<span class="sourceLineNo">135</span>            Assert.assertEquals(javaMap.size(), map.size());<a name="line.135"></a>
<span class="sourceLineNo">136</span>            Assert.assertEquals(mapEntry.getValue(), map.get(mapEntry.getKey()));<a name="line.136"></a>
<span class="sourceLineNo">137</span>        }<a name="line.137"></a>
<span class="sourceLineNo">138</span>    }<a name="line.138"></a>
<span class="sourceLineNo">139</span><a name="line.139"></a>
<span class="sourceLineNo">140</span>    @Test<a name="line.140"></a>
<span class="sourceLineNo">141</span>    public void testGetAbsent() {<a name="line.141"></a>
<span class="sourceLineNo">142</span>        Map&lt;Integer, Fraction&gt; generated = generateAbsent();<a name="line.142"></a>
<span class="sourceLineNo">143</span>        OpenIntToFieldHashMap&lt;Fraction&gt; map = createFromJavaMap(field);<a name="line.143"></a>
<span class="sourceLineNo">144</span><a name="line.144"></a>
<span class="sourceLineNo">145</span>        for (Map.Entry&lt;Integer, Fraction&gt; mapEntry : generated.entrySet())<a name="line.145"></a>
<span class="sourceLineNo">146</span>            Assert.assertTrue(field.getZero().equals(map.get(mapEntry.getKey())));<a name="line.146"></a>
<span class="sourceLineNo">147</span>    }<a name="line.147"></a>
<span class="sourceLineNo">148</span><a name="line.148"></a>
<span class="sourceLineNo">149</span>    @Test<a name="line.149"></a>
<span class="sourceLineNo">150</span>    public void testGetFromEmpty() {<a name="line.150"></a>
<span class="sourceLineNo">151</span>        OpenIntToFieldHashMap&lt;Fraction&gt; map = new OpenIntToFieldHashMap&lt;Fraction&gt;(field);<a name="line.151"></a>
<span class="sourceLineNo">152</span>        Assert.assertTrue(field.getZero().equals(map.get(5)));<a name="line.152"></a>
<span class="sourceLineNo">153</span>        Assert.assertTrue(field.getZero().equals(map.get(0)));<a name="line.153"></a>
<span class="sourceLineNo">154</span>        Assert.assertTrue(field.getZero().equals(map.get(50)));<a name="line.154"></a>
<span class="sourceLineNo">155</span>    }<a name="line.155"></a>
<span class="sourceLineNo">156</span><a name="line.156"></a>
<span class="sourceLineNo">157</span>    @Test<a name="line.157"></a>
<span class="sourceLineNo">158</span>    public void testRemove() {<a name="line.158"></a>
<span class="sourceLineNo">159</span>        OpenIntToFieldHashMap&lt;Fraction&gt; map = createFromJavaMap(field);<a name="line.159"></a>
<span class="sourceLineNo">160</span>        int mapSize = javaMap.size();<a name="line.160"></a>
<span class="sourceLineNo">161</span>        Assert.assertEquals(mapSize, map.size());<a name="line.161"></a>
<span class="sourceLineNo">162</span>        for (Map.Entry&lt;Integer, Fraction&gt; mapEntry : javaMap.entrySet()) {<a name="line.162"></a>
<span class="sourceLineNo">163</span>            map.remove(mapEntry.getKey());<a name="line.163"></a>
<span class="sourceLineNo">164</span>            Assert.assertEquals(--mapSize, map.size());<a name="line.164"></a>
<span class="sourceLineNo">165</span>            Assert.assertTrue(field.getZero().equals(map.get(mapEntry.getKey())));<a name="line.165"></a>
<span class="sourceLineNo">166</span>        }<a name="line.166"></a>
<span class="sourceLineNo">167</span><a name="line.167"></a>
<span class="sourceLineNo">168</span>        /* Ensure that put and get still work correctly after removals */<a name="line.168"></a>
<span class="sourceLineNo">169</span>        assertPutAndGet(map);<a name="line.169"></a>
<span class="sourceLineNo">170</span>    }<a name="line.170"></a>
<span class="sourceLineNo">171</span><a name="line.171"></a>
<span class="sourceLineNo">172</span>    /* This time only remove some entries */<a name="line.172"></a>
<span class="sourceLineNo">173</span>    @Test<a name="line.173"></a>
<span class="sourceLineNo">174</span>    public void testRemove2() {<a name="line.174"></a>
<span class="sourceLineNo">175</span>        OpenIntToFieldHashMap&lt;Fraction&gt; map = createFromJavaMap(field);<a name="line.175"></a>
<span class="sourceLineNo">176</span>        int mapSize = javaMap.size();<a name="line.176"></a>
<span class="sourceLineNo">177</span>        int count = 0;<a name="line.177"></a>
<span class="sourceLineNo">178</span>        Set&lt;Integer&gt; keysInMap = new HashSet&lt;Integer&gt;(javaMap.keySet());<a name="line.178"></a>
<span class="sourceLineNo">179</span>        for (Map.Entry&lt;Integer, Fraction&gt; mapEntry : javaMap.entrySet()) {<a name="line.179"></a>
<span class="sourceLineNo">180</span>            keysInMap.remove(mapEntry.getKey());<a name="line.180"></a>
<span class="sourceLineNo">181</span>            map.remove(mapEntry.getKey());<a name="line.181"></a>
<span class="sourceLineNo">182</span>            Assert.assertEquals(--mapSize, map.size());<a name="line.182"></a>
<span class="sourceLineNo">183</span>            Assert.assertTrue(field.getZero().equals(map.get(mapEntry.getKey())));<a name="line.183"></a>
<span class="sourceLineNo">184</span>            if (count++ &gt; 5)<a name="line.184"></a>
<span class="sourceLineNo">185</span>                break;<a name="line.185"></a>
<span class="sourceLineNo">186</span>        }<a name="line.186"></a>
<span class="sourceLineNo">187</span><a name="line.187"></a>
<span class="sourceLineNo">188</span>        /* Ensure that put and get still work correctly after removals */<a name="line.188"></a>
<span class="sourceLineNo">189</span>        assertPutAndGet(map, mapSize, keysInMap);<a name="line.189"></a>
<span class="sourceLineNo">190</span>    }<a name="line.190"></a>
<span class="sourceLineNo">191</span><a name="line.191"></a>
<span class="sourceLineNo">192</span>    @Test<a name="line.192"></a>
<span class="sourceLineNo">193</span>    public void testRemoveFromEmpty() {<a name="line.193"></a>
<span class="sourceLineNo">194</span>        OpenIntToFieldHashMap&lt;Fraction&gt; map = new OpenIntToFieldHashMap&lt;Fraction&gt;(field);<a name="line.194"></a>
<span class="sourceLineNo">195</span>        Assert.assertTrue(field.getZero().equals(map.remove(50)));<a name="line.195"></a>
<span class="sourceLineNo">196</span>    }<a name="line.196"></a>
<span class="sourceLineNo">197</span><a name="line.197"></a>
<span class="sourceLineNo">198</span>    @Test<a name="line.198"></a>
<span class="sourceLineNo">199</span>    public void testRemoveAbsent() {<a name="line.199"></a>
<span class="sourceLineNo">200</span>        Map&lt;Integer, Fraction&gt; generated = generateAbsent();<a name="line.200"></a>
<span class="sourceLineNo">201</span><a name="line.201"></a>
<span class="sourceLineNo">202</span>        OpenIntToFieldHashMap&lt;Fraction&gt; map = createFromJavaMap(field);<a name="line.202"></a>
<span class="sourceLineNo">203</span>        int mapSize = map.size();<a name="line.203"></a>
<span class="sourceLineNo">204</span><a name="line.204"></a>
<span class="sourceLineNo">205</span>        for (Map.Entry&lt;Integer, Fraction&gt; mapEntry : generated.entrySet()) {<a name="line.205"></a>
<span class="sourceLineNo">206</span>            map.remove(mapEntry.getKey());<a name="line.206"></a>
<span class="sourceLineNo">207</span>            Assert.assertEquals(mapSize, map.size());<a name="line.207"></a>
<span class="sourceLineNo">208</span>            Assert.assertTrue(field.getZero().equals(map.get(mapEntry.getKey())));<a name="line.208"></a>
<span class="sourceLineNo">209</span>        }<a name="line.209"></a>
<span class="sourceLineNo">210</span>    }<a name="line.210"></a>
<span class="sourceLineNo">211</span><a name="line.211"></a>
<span class="sourceLineNo">212</span>    /**<a name="line.212"></a>
<span class="sourceLineNo">213</span>     * Returns a map with at least 100 elements where each element is absent from javaMap.<a name="line.213"></a>
<span class="sourceLineNo">214</span>     */<a name="line.214"></a>
<span class="sourceLineNo">215</span>    private Map&lt;Integer, Fraction&gt; generateAbsent() {<a name="line.215"></a>
<span class="sourceLineNo">216</span>        Map&lt;Integer, Fraction&gt; generated = new HashMap&lt;Integer, Fraction&gt;();<a name="line.216"></a>
<span class="sourceLineNo">217</span>        do {<a name="line.217"></a>
<span class="sourceLineNo">218</span>            generated.putAll(generate());<a name="line.218"></a>
<span class="sourceLineNo">219</span>            for (Integer key : javaMap.keySet())<a name="line.219"></a>
<span class="sourceLineNo">220</span>                generated.remove(key);<a name="line.220"></a>
<span class="sourceLineNo">221</span>        } while (generated.size() &lt; 100);<a name="line.221"></a>
<span class="sourceLineNo">222</span>        return generated;<a name="line.222"></a>
<span class="sourceLineNo">223</span>    }<a name="line.223"></a>
<span class="sourceLineNo">224</span><a name="line.224"></a>
<span class="sourceLineNo">225</span>    @Test<a name="line.225"></a>
<span class="sourceLineNo">226</span>    public void testCopy() {<a name="line.226"></a>
<span class="sourceLineNo">227</span>        OpenIntToFieldHashMap&lt;Fraction&gt; copy =<a name="line.227"></a>
<span class="sourceLineNo">228</span>            new OpenIntToFieldHashMap&lt;Fraction&gt;(createFromJavaMap(field));<a name="line.228"></a>
<span class="sourceLineNo">229</span>        Assert.assertEquals(javaMap.size(), copy.size());<a name="line.229"></a>
<span class="sourceLineNo">230</span><a name="line.230"></a>
<span class="sourceLineNo">231</span>        for (Map.Entry&lt;Integer, Fraction&gt; mapEntry : javaMap.entrySet())<a name="line.231"></a>
<span class="sourceLineNo">232</span>            Assert.assertEquals(mapEntry.getValue(), copy.get(mapEntry.getKey()));<a name="line.232"></a>
<span class="sourceLineNo">233</span>    }<a name="line.233"></a>
<span class="sourceLineNo">234</span><a name="line.234"></a>
<span class="sourceLineNo">235</span>    @Test<a name="line.235"></a>
<span class="sourceLineNo">236</span>    public void testContainsKey() {<a name="line.236"></a>
<span class="sourceLineNo">237</span>        OpenIntToFieldHashMap&lt;Fraction&gt; map = createFromJavaMap(field);<a name="line.237"></a>
<span class="sourceLineNo">238</span>        for (Entry&lt;Integer, Fraction&gt; mapEntry : javaMap.entrySet()) {<a name="line.238"></a>
<span class="sourceLineNo">239</span>            Assert.assertTrue(map.containsKey(mapEntry.getKey()));<a name="line.239"></a>
<span class="sourceLineNo">240</span>        }<a name="line.240"></a>
<span class="sourceLineNo">241</span>        for (Map.Entry&lt;Integer, Fraction&gt; mapEntry : generateAbsent().entrySet()) {<a name="line.241"></a>
<span class="sourceLineNo">242</span>            Assert.assertFalse(map.containsKey(mapEntry.getKey()));<a name="line.242"></a>
<span class="sourceLineNo">243</span>        }<a name="line.243"></a>
<span class="sourceLineNo">244</span>        for (Entry&lt;Integer, Fraction&gt; mapEntry : javaMap.entrySet()) {<a name="line.244"></a>
<span class="sourceLineNo">245</span>            int key = mapEntry.getKey();<a name="line.245"></a>
<span class="sourceLineNo">246</span>            Assert.assertTrue(map.containsKey(key));<a name="line.246"></a>
<span class="sourceLineNo">247</span>            map.remove(key);<a name="line.247"></a>
<span class="sourceLineNo">248</span>            Assert.assertFalse(map.containsKey(key));<a name="line.248"></a>
<span class="sourceLineNo">249</span>        }<a name="line.249"></a>
<span class="sourceLineNo">250</span>    }<a name="line.250"></a>
<span class="sourceLineNo">251</span><a name="line.251"></a>
<span class="sourceLineNo">252</span>    @Test<a name="line.252"></a>
<span class="sourceLineNo">253</span>    public void testIterator() {<a name="line.253"></a>
<span class="sourceLineNo">254</span>        OpenIntToFieldHashMap&lt;Fraction&gt; map = createFromJavaMap(field);<a name="line.254"></a>
<span class="sourceLineNo">255</span>        OpenIntToFieldHashMap&lt;Fraction&gt;.Iterator iterator = map.iterator();<a name="line.255"></a>
<span class="sourceLineNo">256</span>        for (int i = 0; i &lt; map.size(); ++i) {<a name="line.256"></a>
<span class="sourceLineNo">257</span>            Assert.assertTrue(iterator.hasNext());<a name="line.257"></a>
<span class="sourceLineNo">258</span>            iterator.advance();<a name="line.258"></a>
<span class="sourceLineNo">259</span>            int key = iterator.key();<a name="line.259"></a>
<span class="sourceLineNo">260</span>            Assert.assertTrue(map.containsKey(key));<a name="line.260"></a>
<span class="sourceLineNo">261</span>            Assert.assertEquals(javaMap.get(key), map.get(key));<a name="line.261"></a>
<span class="sourceLineNo">262</span>            Assert.assertEquals(javaMap.get(key), iterator.value());<a name="line.262"></a>
<span class="sourceLineNo">263</span>            Assert.assertTrue(javaMap.containsKey(key));<a name="line.263"></a>
<span class="sourceLineNo">264</span>        }<a name="line.264"></a>
<span class="sourceLineNo">265</span>        Assert.assertFalse(iterator.hasNext());<a name="line.265"></a>
<span class="sourceLineNo">266</span>        try {<a name="line.266"></a>
<span class="sourceLineNo">267</span>            iterator.advance();<a name="line.267"></a>
<span class="sourceLineNo">268</span>            Assert.fail("an exception should have been thrown");<a name="line.268"></a>
<span class="sourceLineNo">269</span>        } catch (NoSuchElementException nsee) {<a name="line.269"></a>
<span class="sourceLineNo">270</span>            // expected<a name="line.270"></a>
<span class="sourceLineNo">271</span>        }<a name="line.271"></a>
<span class="sourceLineNo">272</span>    }<a name="line.272"></a>
<span class="sourceLineNo">273</span><a name="line.273"></a>
<span class="sourceLineNo">274</span>    @Test<a name="line.274"></a>
<span class="sourceLineNo">275</span>    public void testConcurrentModification() {<a name="line.275"></a>
<span class="sourceLineNo">276</span>        OpenIntToFieldHashMap&lt;Fraction&gt; map = createFromJavaMap(field);<a name="line.276"></a>
<span class="sourceLineNo">277</span>        OpenIntToFieldHashMap&lt;Fraction&gt;.Iterator iterator = map.iterator();<a name="line.277"></a>
<span class="sourceLineNo">278</span>        map.put(3, new Fraction(3));<a name="line.278"></a>
<span class="sourceLineNo">279</span>        try {<a name="line.279"></a>
<span class="sourceLineNo">280</span>            iterator.advance();<a name="line.280"></a>
<span class="sourceLineNo">281</span>            Assert.fail("an exception should have been thrown");<a name="line.281"></a>
<span class="sourceLineNo">282</span>        } catch (ConcurrentModificationException cme) {<a name="line.282"></a>
<span class="sourceLineNo">283</span>            // expected<a name="line.283"></a>
<span class="sourceLineNo">284</span>        }<a name="line.284"></a>
<span class="sourceLineNo">285</span>    }<a name="line.285"></a>
<span class="sourceLineNo">286</span><a name="line.286"></a>
<span class="sourceLineNo">287</span>    /**<a name="line.287"></a>
<span class="sourceLineNo">288</span>     * Regression test for a bug in findInsertionIndex where the hashing in the second probing<a name="line.288"></a>
<span class="sourceLineNo">289</span>     * loop was inconsistent with the first causing duplicate keys after the right sequence<a name="line.289"></a>
<span class="sourceLineNo">290</span>     * of puts and removes.<a name="line.290"></a>
<span class="sourceLineNo">291</span>     */<a name="line.291"></a>
<span class="sourceLineNo">292</span>    @Test<a name="line.292"></a>
<span class="sourceLineNo">293</span>    public void testPutKeysWithCollisions() {<a name="line.293"></a>
<span class="sourceLineNo">294</span>        OpenIntToFieldHashMap&lt;Fraction&gt; map = new OpenIntToFieldHashMap&lt;Fraction&gt;(field);<a name="line.294"></a>
<span class="sourceLineNo">295</span>        int key1 = -1996012590;<a name="line.295"></a>
<span class="sourceLineNo">296</span>        Fraction value1 = new Fraction(1);<a name="line.296"></a>
<span class="sourceLineNo">297</span>        map.put(key1, value1);<a name="line.297"></a>
<span class="sourceLineNo">298</span>        int key2 = 835099822;<a name="line.298"></a>
<span class="sourceLineNo">299</span>        map.put(key2, value1);<a name="line.299"></a>
<span class="sourceLineNo">300</span>        int key3 = 1008859686;<a name="line.300"></a>
<span class="sourceLineNo">301</span>        map.put(key3, value1);<a name="line.301"></a>
<span class="sourceLineNo">302</span>        Assert.assertEquals(value1, map.get(key3));<a name="line.302"></a>
<span class="sourceLineNo">303</span>        Assert.assertEquals(3, map.size());<a name="line.303"></a>
<span class="sourceLineNo">304</span><a name="line.304"></a>
<span class="sourceLineNo">305</span>        map.remove(key2);<a name="line.305"></a>
<span class="sourceLineNo">306</span>        Fraction value2 = new Fraction(2);<a name="line.306"></a>
<span class="sourceLineNo">307</span>        map.put(key3, value2);<a name="line.307"></a>
<span class="sourceLineNo">308</span>        Assert.assertEquals(value2, map.get(key3));<a name="line.308"></a>
<span class="sourceLineNo">309</span>        Assert.assertEquals(2, map.size());<a name="line.309"></a>
<span class="sourceLineNo">310</span>    }<a name="line.310"></a>
<span class="sourceLineNo">311</span><a name="line.311"></a>
<span class="sourceLineNo">312</span>    /**<a name="line.312"></a>
<span class="sourceLineNo">313</span>     * Similar to testPutKeysWithCollisions() but exercises the codepaths in a slightly<a name="line.313"></a>
<span class="sourceLineNo">314</span>     * different manner.<a name="line.314"></a>
<span class="sourceLineNo">315</span>     */<a name="line.315"></a>
<span class="sourceLineNo">316</span>    @Test<a name="line.316"></a>
<span class="sourceLineNo">317</span>    public void testPutKeysWithCollision2() {<a name="line.317"></a>
<span class="sourceLineNo">318</span>        OpenIntToFieldHashMap&lt;Fraction&gt;map = new OpenIntToFieldHashMap&lt;Fraction&gt;(field);<a name="line.318"></a>
<span class="sourceLineNo">319</span>        int key1 = 837989881;<a name="line.319"></a>
<span class="sourceLineNo">320</span>        Fraction value1 = new Fraction(1);<a name="line.320"></a>
<span class="sourceLineNo">321</span>        map.put(key1, value1);<a name="line.321"></a>
<span class="sourceLineNo">322</span>        int key2 = 476463321;<a name="line.322"></a>
<span class="sourceLineNo">323</span>        map.put(key2, value1);<a name="line.323"></a>
<span class="sourceLineNo">324</span>        Assert.assertEquals(2, map.size());<a name="line.324"></a>
<span class="sourceLineNo">325</span>        Assert.assertEquals(value1, map.get(key2));<a name="line.325"></a>
<span class="sourceLineNo">326</span><a name="line.326"></a>
<span class="sourceLineNo">327</span>        map.remove(key1);<a name="line.327"></a>
<span class="sourceLineNo">328</span>        Fraction value2 = new Fraction(2);<a name="line.328"></a>
<span class="sourceLineNo">329</span>        map.put(key2, value2);<a name="line.329"></a>
<span class="sourceLineNo">330</span>        Assert.assertEquals(1, map.size());<a name="line.330"></a>
<span class="sourceLineNo">331</span>        Assert.assertEquals(value2, map.get(key2));<a name="line.331"></a>
<span class="sourceLineNo">332</span>    }<a name="line.332"></a>
<span class="sourceLineNo">333</span><a name="line.333"></a>
<span class="sourceLineNo">334</span><a name="line.334"></a>
<span class="sourceLineNo">335</span>}<a name="line.335"></a>




























































</pre>
</div>
</body>
</html>
