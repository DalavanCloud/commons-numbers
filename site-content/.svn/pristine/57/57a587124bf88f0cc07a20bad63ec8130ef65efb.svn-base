<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>CombinatoricsUtils xref</title>
<link type="text/css" rel="stylesheet" href="../../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../apidocs/org/apache/commons/math3/util/CombinatoricsUtils.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Licensed to the Apache Software Foundation (ASF) under one or more</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> * contributor license agreements.  See the NOTICE file distributed with</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * this work for additional information regarding copyright ownership.</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * The ASF licenses this file to You under the Apache License, Version 2.0</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * (the "License"); you may not use this file except in compliance with</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> * the License.  You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *      <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">package</strong> org.apache.commons.math3.util;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <strong class="jxr_keyword">import</strong> java.util.Iterator;
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> java.util.concurrent.atomic.AtomicReference;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.MathArithmeticException;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.NotPositiveException;
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.NumberIsTooLargeException;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.util.LocalizedFormats;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <em class="jxr_javadoccomment"> * Combinatorial utilities.</em>
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <em class="jxr_javadoccomment"> * @since 3.3</em>
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../org/apache/commons/math3/util/CombinatoricsUtils.html">CombinatoricsUtils</a> {
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  
<a class="jxr_linenumber" name="L34" href="#L34">34</a>      <em class="jxr_javadoccomment">/** All long-representable factorials */</em>
<a class="jxr_linenumber" name="L35" href="#L35">35</a>      <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">long</strong>[] FACTORIALS = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">long</strong>[] {
<a class="jxr_linenumber" name="L36" href="#L36">36</a>                         1l,                  1l,                   2l,
<a class="jxr_linenumber" name="L37" href="#L37">37</a>                         6l,                 24l,                 120l,
<a class="jxr_linenumber" name="L38" href="#L38">38</a>                       720l,               5040l,               40320l,
<a class="jxr_linenumber" name="L39" href="#L39">39</a>                    362880l,            3628800l,            39916800l,
<a class="jxr_linenumber" name="L40" href="#L40">40</a>                 479001600l,         6227020800l,         87178291200l,
<a class="jxr_linenumber" name="L41" href="#L41">41</a>             1307674368000l,     20922789888000l,     355687428096000l,
<a class="jxr_linenumber" name="L42" href="#L42">42</a>          6402373705728000l, 121645100408832000l, 2432902008176640000l };
<a class="jxr_linenumber" name="L43" href="#L43">43</a>  
<a class="jxr_linenumber" name="L44" href="#L44">44</a>      <em class="jxr_javadoccomment">/** Stirling numbers of the second kind. */</em>
<a class="jxr_linenumber" name="L45" href="#L45">45</a>      <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> AtomicReference&lt;<strong class="jxr_keyword">long</strong>[][]&gt; STIRLING_S2 = <strong class="jxr_keyword">new</strong> AtomicReference&lt;<strong class="jxr_keyword">long</strong>[][]&gt; (<strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L46" href="#L46">46</a>  
<a class="jxr_linenumber" name="L47" href="#L47">47</a>      <em class="jxr_javadoccomment">/** Private constructor (class contains only static methods). */</em>
<a class="jxr_linenumber" name="L48" href="#L48">48</a>      <strong class="jxr_keyword">private</strong> <a href="../../../../../org/apache/commons/math3/util/CombinatoricsUtils.html">CombinatoricsUtils</a>() {}
<a class="jxr_linenumber" name="L49" href="#L49">49</a>  
<a class="jxr_linenumber" name="L50" href="#L50">50</a>  
<a class="jxr_linenumber" name="L51" href="#L51">51</a>      <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L52" href="#L52">52</a>  <em class="jxr_javadoccomment">     * Returns an exact representation of the &lt;a</em>
<a class="jxr_linenumber" name="L53" href="#L53">53</a>  <em class="jxr_javadoccomment">     * href="<a href="http://mathworld.wolfram.com/BinomialCoefficient.html" target="alexandria_uri">http://mathworld.wolfram.com/BinomialCoefficient.html</a>"&gt; Binomial</em>
<a class="jxr_linenumber" name="L54" href="#L54">54</a>  <em class="jxr_javadoccomment">     * Coefficient&lt;/a&gt;, "{@code n choose k}", the number of</em>
<a class="jxr_linenumber" name="L55" href="#L55">55</a>  <em class="jxr_javadoccomment">     * {@code k}-element subsets that can be selected from an</em>
<a class="jxr_linenumber" name="L56" href="#L56">56</a>  <em class="jxr_javadoccomment">     * {@code n}-element set.</em>
<a class="jxr_linenumber" name="L57" href="#L57">57</a>  <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L58" href="#L58">58</a>  <em class="jxr_javadoccomment">     * &lt;Strong&gt;Preconditions&lt;/strong&gt;:</em>
<a class="jxr_linenumber" name="L59" href="#L59">59</a>  <em class="jxr_javadoccomment">     * &lt;ul&gt;</em>
<a class="jxr_linenumber" name="L60" href="#L60">60</a>  <em class="jxr_javadoccomment">     * &lt;li&gt; {@code 0 &lt;= k &lt;= n } (otherwise</em>
<a class="jxr_linenumber" name="L61" href="#L61">61</a>  <em class="jxr_javadoccomment">     * {@code MathIllegalArgumentException} is thrown)&lt;/li&gt;</em>
<a class="jxr_linenumber" name="L62" href="#L62">62</a>  <em class="jxr_javadoccomment">     * &lt;li&gt; The result is small enough to fit into a {@code long}. The</em>
<a class="jxr_linenumber" name="L63" href="#L63">63</a>  <em class="jxr_javadoccomment">     * largest value of {@code n} for which all coefficients are</em>
<a class="jxr_linenumber" name="L64" href="#L64">64</a>  <em class="jxr_javadoccomment">     * {@code  &lt; Long.MAX_VALUE} is 66. If the computed value exceeds</em>
<a class="jxr_linenumber" name="L65" href="#L65">65</a>  <em class="jxr_javadoccomment">     * {@code Long.MAX_VALUE} a {@code MathArithMeticException} is</em>
<a class="jxr_linenumber" name="L66" href="#L66">66</a>  <em class="jxr_javadoccomment">     * thrown.&lt;/li&gt;</em>
<a class="jxr_linenumber" name="L67" href="#L67">67</a>  <em class="jxr_javadoccomment">     * &lt;/ul&gt;&lt;/p&gt;</em>
<a class="jxr_linenumber" name="L68" href="#L68">68</a>  <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L69" href="#L69">69</a>  <em class="jxr_javadoccomment">     * @param n the size of the set</em>
<a class="jxr_linenumber" name="L70" href="#L70">70</a>  <em class="jxr_javadoccomment">     * @param k the size of the subsets to be counted</em>
<a class="jxr_linenumber" name="L71" href="#L71">71</a>  <em class="jxr_javadoccomment">     * @return {@code n choose k}</em>
<a class="jxr_linenumber" name="L72" href="#L72">72</a>  <em class="jxr_javadoccomment">     * @throws NotPositiveException if {@code n &lt; 0}.</em>
<a class="jxr_linenumber" name="L73" href="#L73">73</a>  <em class="jxr_javadoccomment">     * @throws NumberIsTooLargeException if {@code k &gt; n}.</em>
<a class="jxr_linenumber" name="L74" href="#L74">74</a>  <em class="jxr_javadoccomment">     * @throws MathArithmeticException if the result is too large to be</em>
<a class="jxr_linenumber" name="L75" href="#L75">75</a>  <em class="jxr_javadoccomment">     * represented by a long integer.</em>
<a class="jxr_linenumber" name="L76" href="#L76">76</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L77" href="#L77">77</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">long</strong> binomialCoefficient(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> n, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> k)
<a class="jxr_linenumber" name="L78" href="#L78">78</a>          <strong class="jxr_keyword">throws</strong> NotPositiveException, NumberIsTooLargeException, <a href="../../../../../org/apache/commons/math3/exception/MathArithmeticException.html">MathArithmeticException</a> {
<a class="jxr_linenumber" name="L79" href="#L79">79</a>          CombinatoricsUtils.checkBinomial(n, k);
<a class="jxr_linenumber" name="L80" href="#L80">80</a>          <strong class="jxr_keyword">if</strong> ((n == k) || (k == 0)) {
<a class="jxr_linenumber" name="L81" href="#L81">81</a>              <strong class="jxr_keyword">return</strong> 1;
<a class="jxr_linenumber" name="L82" href="#L82">82</a>          }
<a class="jxr_linenumber" name="L83" href="#L83">83</a>          <strong class="jxr_keyword">if</strong> ((k == 1) || (k == n - 1)) {
<a class="jxr_linenumber" name="L84" href="#L84">84</a>              <strong class="jxr_keyword">return</strong> n;
<a class="jxr_linenumber" name="L85" href="#L85">85</a>          }
<a class="jxr_linenumber" name="L86" href="#L86">86</a>          <em class="jxr_comment">// Use symmetry for large k</em>
<a class="jxr_linenumber" name="L87" href="#L87">87</a>          <strong class="jxr_keyword">if</strong> (k &gt; n / 2) {
<a class="jxr_linenumber" name="L88" href="#L88">88</a>              <strong class="jxr_keyword">return</strong> binomialCoefficient(n, n - k);
<a class="jxr_linenumber" name="L89" href="#L89">89</a>          }
<a class="jxr_linenumber" name="L90" href="#L90">90</a>  
<a class="jxr_linenumber" name="L91" href="#L91">91</a>          <em class="jxr_comment">// We use the formula</em>
<a class="jxr_linenumber" name="L92" href="#L92">92</a>          <em class="jxr_comment">// (n choose k) = n! / (n-k)! / k!</em>
<a class="jxr_linenumber" name="L93" href="#L93">93</a>          <em class="jxr_comment">// (n choose k) == ((n-k+1)*...*n) / (1*...*k)</em>
<a class="jxr_linenumber" name="L94" href="#L94">94</a>          <em class="jxr_comment">// which could be written</em>
<a class="jxr_linenumber" name="L95" href="#L95">95</a>          <em class="jxr_comment">// (n choose k) == (n-1 choose k-1) * n / k</em>
<a class="jxr_linenumber" name="L96" href="#L96">96</a>          <strong class="jxr_keyword">long</strong> result = 1;
<a class="jxr_linenumber" name="L97" href="#L97">97</a>          <strong class="jxr_keyword">if</strong> (n &lt;= 61) {
<a class="jxr_linenumber" name="L98" href="#L98">98</a>              <em class="jxr_comment">// For n &lt;= 61, the naive implementation cannot overflow.</em>
<a class="jxr_linenumber" name="L99" href="#L99">99</a>              <strong class="jxr_keyword">int</strong> i = n - k + 1;
<a class="jxr_linenumber" name="L100" href="#L100">100</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = 1; j &lt;= k; j++) {
<a class="jxr_linenumber" name="L101" href="#L101">101</a>                 result = result * i / j;
<a class="jxr_linenumber" name="L102" href="#L102">102</a>                 i++;
<a class="jxr_linenumber" name="L103" href="#L103">103</a>             }
<a class="jxr_linenumber" name="L104" href="#L104">104</a>         } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (n &lt;= 66) {
<a class="jxr_linenumber" name="L105" href="#L105">105</a>             <em class="jxr_comment">// For n &gt; 61 but n &lt;= 66, the result cannot overflow,</em>
<a class="jxr_linenumber" name="L106" href="#L106">106</a>             <em class="jxr_comment">// but we must take care not to overflow intermediate values.</em>
<a class="jxr_linenumber" name="L107" href="#L107">107</a>             <strong class="jxr_keyword">int</strong> i = n - k + 1;
<a class="jxr_linenumber" name="L108" href="#L108">108</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = 1; j &lt;= k; j++) {
<a class="jxr_linenumber" name="L109" href="#L109">109</a>                 <em class="jxr_comment">// We know that (result * i) is divisible by j,</em>
<a class="jxr_linenumber" name="L110" href="#L110">110</a>                 <em class="jxr_comment">// but (result * i) may overflow, so we split j:</em>
<a class="jxr_linenumber" name="L111" href="#L111">111</a>                 <em class="jxr_comment">// Filter out the gcd, d, so j/d and i/d are integer.</em>
<a class="jxr_linenumber" name="L112" href="#L112">112</a>                 <em class="jxr_comment">// result is divisible by (j/d) because (j/d)</em>
<a class="jxr_linenumber" name="L113" href="#L113">113</a>                 <em class="jxr_comment">// is relative prime to (i/d) and is a divisor of</em>
<a class="jxr_linenumber" name="L114" href="#L114">114</a>                 <em class="jxr_comment">// result * (i/d).</em>
<a class="jxr_linenumber" name="L115" href="#L115">115</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">long</strong> d = ArithmeticUtils.gcd(i, j);
<a class="jxr_linenumber" name="L116" href="#L116">116</a>                 result = (result / (j / d)) * (i / d);
<a class="jxr_linenumber" name="L117" href="#L117">117</a>                 i++;
<a class="jxr_linenumber" name="L118" href="#L118">118</a>             }
<a class="jxr_linenumber" name="L119" href="#L119">119</a>         } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L120" href="#L120">120</a>             <em class="jxr_comment">// For n &gt; 66, a result overflow might occur, so we check</em>
<a class="jxr_linenumber" name="L121" href="#L121">121</a>             <em class="jxr_comment">// the multiplication, taking care to not overflow</em>
<a class="jxr_linenumber" name="L122" href="#L122">122</a>             <em class="jxr_comment">// unnecessary.</em>
<a class="jxr_linenumber" name="L123" href="#L123">123</a>             <strong class="jxr_keyword">int</strong> i = n - k + 1;
<a class="jxr_linenumber" name="L124" href="#L124">124</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = 1; j &lt;= k; j++) {
<a class="jxr_linenumber" name="L125" href="#L125">125</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">long</strong> d = ArithmeticUtils.gcd(i, j);
<a class="jxr_linenumber" name="L126" href="#L126">126</a>                 result = ArithmeticUtils.mulAndCheck(result / (j / d), i / d);
<a class="jxr_linenumber" name="L127" href="#L127">127</a>                 i++;
<a class="jxr_linenumber" name="L128" href="#L128">128</a>             }
<a class="jxr_linenumber" name="L129" href="#L129">129</a>         }
<a class="jxr_linenumber" name="L130" href="#L130">130</a>         <strong class="jxr_keyword">return</strong> result;
<a class="jxr_linenumber" name="L131" href="#L131">131</a>     }
<a class="jxr_linenumber" name="L132" href="#L132">132</a> 
<a class="jxr_linenumber" name="L133" href="#L133">133</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L134" href="#L134">134</a> <em class="jxr_javadoccomment">     * Returns a {@code double} representation of the &lt;a</em>
<a class="jxr_linenumber" name="L135" href="#L135">135</a> <em class="jxr_javadoccomment">     * href="<a href="http://mathworld.wolfram.com/BinomialCoefficient.html" target="alexandria_uri">http://mathworld.wolfram.com/BinomialCoefficient.html</a>"&gt; Binomial</em>
<a class="jxr_linenumber" name="L136" href="#L136">136</a> <em class="jxr_javadoccomment">     * Coefficient&lt;/a&gt;, "{@code n choose k}", the number of</em>
<a class="jxr_linenumber" name="L137" href="#L137">137</a> <em class="jxr_javadoccomment">     * {@code k}-element subsets that can be selected from an</em>
<a class="jxr_linenumber" name="L138" href="#L138">138</a> <em class="jxr_javadoccomment">     * {@code n}-element set.</em>
<a class="jxr_linenumber" name="L139" href="#L139">139</a> <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L140" href="#L140">140</a> <em class="jxr_javadoccomment">     * &lt;Strong&gt;Preconditions&lt;/strong&gt;:</em>
<a class="jxr_linenumber" name="L141" href="#L141">141</a> <em class="jxr_javadoccomment">     * &lt;ul&gt;</em>
<a class="jxr_linenumber" name="L142" href="#L142">142</a> <em class="jxr_javadoccomment">     * &lt;li&gt; {@code 0 &lt;= k &lt;= n } (otherwise</em>
<a class="jxr_linenumber" name="L143" href="#L143">143</a> <em class="jxr_javadoccomment">     * {@code IllegalArgumentException} is thrown)&lt;/li&gt;</em>
<a class="jxr_linenumber" name="L144" href="#L144">144</a> <em class="jxr_javadoccomment">     * &lt;li&gt; The result is small enough to fit into a {@code double}. The</em>
<a class="jxr_linenumber" name="L145" href="#L145">145</a> <em class="jxr_javadoccomment">     * largest value of {@code n} for which all coefficients are less than</em>
<a class="jxr_linenumber" name="L146" href="#L146">146</a> <em class="jxr_javadoccomment">     * Double.MAX_VALUE is 1029. If the computed value exceeds Double.MAX_VALUE,</em>
<a class="jxr_linenumber" name="L147" href="#L147">147</a> <em class="jxr_javadoccomment">     * Double.POSITIVE_INFINITY is returned&lt;/li&gt;</em>
<a class="jxr_linenumber" name="L148" href="#L148">148</a> <em class="jxr_javadoccomment">     * &lt;/ul&gt;&lt;/p&gt;</em>
<a class="jxr_linenumber" name="L149" href="#L149">149</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L150" href="#L150">150</a> <em class="jxr_javadoccomment">     * @param n the size of the set</em>
<a class="jxr_linenumber" name="L151" href="#L151">151</a> <em class="jxr_javadoccomment">     * @param k the size of the subsets to be counted</em>
<a class="jxr_linenumber" name="L152" href="#L152">152</a> <em class="jxr_javadoccomment">     * @return {@code n choose k}</em>
<a class="jxr_linenumber" name="L153" href="#L153">153</a> <em class="jxr_javadoccomment">     * @throws NotPositiveException if {@code n &lt; 0}.</em>
<a class="jxr_linenumber" name="L154" href="#L154">154</a> <em class="jxr_javadoccomment">     * @throws NumberIsTooLargeException if {@code k &gt; n}.</em>
<a class="jxr_linenumber" name="L155" href="#L155">155</a> <em class="jxr_javadoccomment">     * @throws MathArithmeticException if the result is too large to be</em>
<a class="jxr_linenumber" name="L156" href="#L156">156</a> <em class="jxr_javadoccomment">     * represented by a long integer.</em>
<a class="jxr_linenumber" name="L157" href="#L157">157</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L158" href="#L158">158</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">double</strong> binomialCoefficientDouble(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> n, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> k)
<a class="jxr_linenumber" name="L159" href="#L159">159</a>         <strong class="jxr_keyword">throws</strong> NotPositiveException, NumberIsTooLargeException, <a href="../../../../../org/apache/commons/math3/exception/MathArithmeticException.html">MathArithmeticException</a> {
<a class="jxr_linenumber" name="L160" href="#L160">160</a>         CombinatoricsUtils.checkBinomial(n, k);
<a class="jxr_linenumber" name="L161" href="#L161">161</a>         <strong class="jxr_keyword">if</strong> ((n == k) || (k == 0)) {
<a class="jxr_linenumber" name="L162" href="#L162">162</a>             <strong class="jxr_keyword">return</strong> 1d;
<a class="jxr_linenumber" name="L163" href="#L163">163</a>         }
<a class="jxr_linenumber" name="L164" href="#L164">164</a>         <strong class="jxr_keyword">if</strong> ((k == 1) || (k == n - 1)) {
<a class="jxr_linenumber" name="L165" href="#L165">165</a>             <strong class="jxr_keyword">return</strong> n;
<a class="jxr_linenumber" name="L166" href="#L166">166</a>         }
<a class="jxr_linenumber" name="L167" href="#L167">167</a>         <strong class="jxr_keyword">if</strong> (k &gt; n/2) {
<a class="jxr_linenumber" name="L168" href="#L168">168</a>             <strong class="jxr_keyword">return</strong> binomialCoefficientDouble(n, n - k);
<a class="jxr_linenumber" name="L169" href="#L169">169</a>         }
<a class="jxr_linenumber" name="L170" href="#L170">170</a>         <strong class="jxr_keyword">if</strong> (n &lt; 67) {
<a class="jxr_linenumber" name="L171" href="#L171">171</a>             <strong class="jxr_keyword">return</strong> binomialCoefficient(n,k);
<a class="jxr_linenumber" name="L172" href="#L172">172</a>         }
<a class="jxr_linenumber" name="L173" href="#L173">173</a> 
<a class="jxr_linenumber" name="L174" href="#L174">174</a>         <strong class="jxr_keyword">double</strong> result = 1d;
<a class="jxr_linenumber" name="L175" href="#L175">175</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 1; i &lt;= k; i++) {
<a class="jxr_linenumber" name="L176" href="#L176">176</a>              result *= (<strong class="jxr_keyword">double</strong>)(n - k + i) / (<strong class="jxr_keyword">double</strong>)i;
<a class="jxr_linenumber" name="L177" href="#L177">177</a>         }
<a class="jxr_linenumber" name="L178" href="#L178">178</a> 
<a class="jxr_linenumber" name="L179" href="#L179">179</a>         <strong class="jxr_keyword">return</strong> FastMath.floor(result + 0.5);
<a class="jxr_linenumber" name="L180" href="#L180">180</a>     }
<a class="jxr_linenumber" name="L181" href="#L181">181</a> 
<a class="jxr_linenumber" name="L182" href="#L182">182</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L183" href="#L183">183</a> <em class="jxr_javadoccomment">     * Returns the natural {@code log} of the &lt;a</em>
<a class="jxr_linenumber" name="L184" href="#L184">184</a> <em class="jxr_javadoccomment">     * href="<a href="http://mathworld.wolfram.com/BinomialCoefficient.html" target="alexandria_uri">http://mathworld.wolfram.com/BinomialCoefficient.html</a>"&gt; Binomial</em>
<a class="jxr_linenumber" name="L185" href="#L185">185</a> <em class="jxr_javadoccomment">     * Coefficient&lt;/a&gt;, "{@code n choose k}", the number of</em>
<a class="jxr_linenumber" name="L186" href="#L186">186</a> <em class="jxr_javadoccomment">     * {@code k}-element subsets that can be selected from an</em>
<a class="jxr_linenumber" name="L187" href="#L187">187</a> <em class="jxr_javadoccomment">     * {@code n}-element set.</em>
<a class="jxr_linenumber" name="L188" href="#L188">188</a> <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L189" href="#L189">189</a> <em class="jxr_javadoccomment">     * &lt;Strong&gt;Preconditions&lt;/strong&gt;:</em>
<a class="jxr_linenumber" name="L190" href="#L190">190</a> <em class="jxr_javadoccomment">     * &lt;ul&gt;</em>
<a class="jxr_linenumber" name="L191" href="#L191">191</a> <em class="jxr_javadoccomment">     * &lt;li&gt; {@code 0 &lt;= k &lt;= n } (otherwise</em>
<a class="jxr_linenumber" name="L192" href="#L192">192</a> <em class="jxr_javadoccomment">     * {@code MathIllegalArgumentException} is thrown)&lt;/li&gt;</em>
<a class="jxr_linenumber" name="L193" href="#L193">193</a> <em class="jxr_javadoccomment">     * &lt;/ul&gt;&lt;/p&gt;</em>
<a class="jxr_linenumber" name="L194" href="#L194">194</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L195" href="#L195">195</a> <em class="jxr_javadoccomment">     * @param n the size of the set</em>
<a class="jxr_linenumber" name="L196" href="#L196">196</a> <em class="jxr_javadoccomment">     * @param k the size of the subsets to be counted</em>
<a class="jxr_linenumber" name="L197" href="#L197">197</a> <em class="jxr_javadoccomment">     * @return {@code n choose k}</em>
<a class="jxr_linenumber" name="L198" href="#L198">198</a> <em class="jxr_javadoccomment">     * @throws NotPositiveException if {@code n &lt; 0}.</em>
<a class="jxr_linenumber" name="L199" href="#L199">199</a> <em class="jxr_javadoccomment">     * @throws NumberIsTooLargeException if {@code k &gt; n}.</em>
<a class="jxr_linenumber" name="L200" href="#L200">200</a> <em class="jxr_javadoccomment">     * @throws MathArithmeticException if the result is too large to be</em>
<a class="jxr_linenumber" name="L201" href="#L201">201</a> <em class="jxr_javadoccomment">     * represented by a long integer.</em>
<a class="jxr_linenumber" name="L202" href="#L202">202</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L203" href="#L203">203</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">double</strong> binomialCoefficientLog(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> n, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> k)
<a class="jxr_linenumber" name="L204" href="#L204">204</a>         <strong class="jxr_keyword">throws</strong> NotPositiveException, NumberIsTooLargeException, <a href="../../../../../org/apache/commons/math3/exception/MathArithmeticException.html">MathArithmeticException</a> {
<a class="jxr_linenumber" name="L205" href="#L205">205</a>         CombinatoricsUtils.checkBinomial(n, k);
<a class="jxr_linenumber" name="L206" href="#L206">206</a>         <strong class="jxr_keyword">if</strong> ((n == k) || (k == 0)) {
<a class="jxr_linenumber" name="L207" href="#L207">207</a>             <strong class="jxr_keyword">return</strong> 0;
<a class="jxr_linenumber" name="L208" href="#L208">208</a>         }
<a class="jxr_linenumber" name="L209" href="#L209">209</a>         <strong class="jxr_keyword">if</strong> ((k == 1) || (k == n - 1)) {
<a class="jxr_linenumber" name="L210" href="#L210">210</a>             <strong class="jxr_keyword">return</strong> FastMath.log(n);
<a class="jxr_linenumber" name="L211" href="#L211">211</a>         }
<a class="jxr_linenumber" name="L212" href="#L212">212</a> 
<a class="jxr_linenumber" name="L213" href="#L213">213</a>         <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L214" href="#L214">214</a> <em class="jxr_comment">         * For values small enough to do exact integer computation,</em>
<a class="jxr_linenumber" name="L215" href="#L215">215</a> <em class="jxr_comment">         * return the log of the exact value</em>
<a class="jxr_linenumber" name="L216" href="#L216">216</a> <em class="jxr_comment">         */</em>
<a class="jxr_linenumber" name="L217" href="#L217">217</a>         <strong class="jxr_keyword">if</strong> (n &lt; 67) {
<a class="jxr_linenumber" name="L218" href="#L218">218</a>             <strong class="jxr_keyword">return</strong> FastMath.log(binomialCoefficient(n,k));
<a class="jxr_linenumber" name="L219" href="#L219">219</a>         }
<a class="jxr_linenumber" name="L220" href="#L220">220</a> 
<a class="jxr_linenumber" name="L221" href="#L221">221</a>         <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L222" href="#L222">222</a> <em class="jxr_comment">         * Return the log of binomialCoefficientDouble for values that will not</em>
<a class="jxr_linenumber" name="L223" href="#L223">223</a> <em class="jxr_comment">         * overflow binomialCoefficientDouble</em>
<a class="jxr_linenumber" name="L224" href="#L224">224</a> <em class="jxr_comment">         */</em>
<a class="jxr_linenumber" name="L225" href="#L225">225</a>         <strong class="jxr_keyword">if</strong> (n &lt; 1030) {
<a class="jxr_linenumber" name="L226" href="#L226">226</a>             <strong class="jxr_keyword">return</strong> FastMath.log(binomialCoefficientDouble(n, k));
<a class="jxr_linenumber" name="L227" href="#L227">227</a>         }
<a class="jxr_linenumber" name="L228" href="#L228">228</a> 
<a class="jxr_linenumber" name="L229" href="#L229">229</a>         <strong class="jxr_keyword">if</strong> (k &gt; n / 2) {
<a class="jxr_linenumber" name="L230" href="#L230">230</a>             <strong class="jxr_keyword">return</strong> binomialCoefficientLog(n, n - k);
<a class="jxr_linenumber" name="L231" href="#L231">231</a>         }
<a class="jxr_linenumber" name="L232" href="#L232">232</a> 
<a class="jxr_linenumber" name="L233" href="#L233">233</a>         <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L234" href="#L234">234</a> <em class="jxr_comment">         * Sum logs for values that could overflow</em>
<a class="jxr_linenumber" name="L235" href="#L235">235</a> <em class="jxr_comment">         */</em>
<a class="jxr_linenumber" name="L236" href="#L236">236</a>         <strong class="jxr_keyword">double</strong> logSum = 0;
<a class="jxr_linenumber" name="L237" href="#L237">237</a> 
<a class="jxr_linenumber" name="L238" href="#L238">238</a>         <em class="jxr_comment">// n!/(n-k)!</em>
<a class="jxr_linenumber" name="L239" href="#L239">239</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = n - k + 1; i &lt;= n; i++) {
<a class="jxr_linenumber" name="L240" href="#L240">240</a>             logSum += FastMath.log(i);
<a class="jxr_linenumber" name="L241" href="#L241">241</a>         }
<a class="jxr_linenumber" name="L242" href="#L242">242</a> 
<a class="jxr_linenumber" name="L243" href="#L243">243</a>         <em class="jxr_comment">// divide by k!</em>
<a class="jxr_linenumber" name="L244" href="#L244">244</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 2; i &lt;= k; i++) {
<a class="jxr_linenumber" name="L245" href="#L245">245</a>             logSum -= FastMath.log(i);
<a class="jxr_linenumber" name="L246" href="#L246">246</a>         }
<a class="jxr_linenumber" name="L247" href="#L247">247</a> 
<a class="jxr_linenumber" name="L248" href="#L248">248</a>         <strong class="jxr_keyword">return</strong> logSum;
<a class="jxr_linenumber" name="L249" href="#L249">249</a>     }
<a class="jxr_linenumber" name="L250" href="#L250">250</a> 
<a class="jxr_linenumber" name="L251" href="#L251">251</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L252" href="#L252">252</a> <em class="jxr_javadoccomment">     * Returns n!. Shorthand for {@code n} &lt;a</em>
<a class="jxr_linenumber" name="L253" href="#L253">253</a> <em class="jxr_javadoccomment">     * href="<a href="http://mathworld.wolfram.com/Factorial.html" target="alexandria_uri">http://mathworld.wolfram.com/Factorial.html</a>"&gt; Factorial&lt;/a&gt;, the</em>
<a class="jxr_linenumber" name="L254" href="#L254">254</a> <em class="jxr_javadoccomment">     * product of the numbers {@code 1,...,n}.</em>
<a class="jxr_linenumber" name="L255" href="#L255">255</a> <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L256" href="#L256">256</a> <em class="jxr_javadoccomment">     * &lt;Strong&gt;Preconditions&lt;/strong&gt;:</em>
<a class="jxr_linenumber" name="L257" href="#L257">257</a> <em class="jxr_javadoccomment">     * &lt;ul&gt;</em>
<a class="jxr_linenumber" name="L258" href="#L258">258</a> <em class="jxr_javadoccomment">     * &lt;li&gt; {@code n &gt;= 0} (otherwise</em>
<a class="jxr_linenumber" name="L259" href="#L259">259</a> <em class="jxr_javadoccomment">     * {@code MathIllegalArgumentException} is thrown)&lt;/li&gt;</em>
<a class="jxr_linenumber" name="L260" href="#L260">260</a> <em class="jxr_javadoccomment">     * &lt;li&gt; The result is small enough to fit into a {@code long}. The</em>
<a class="jxr_linenumber" name="L261" href="#L261">261</a> <em class="jxr_javadoccomment">     * largest value of {@code n} for which {@code n!} does not exceed</em>
<a class="jxr_linenumber" name="L262" href="#L262">262</a> <em class="jxr_javadoccomment">     * Long.MAX_VALUE} is 20. If the computed value exceeds {@code Long.MAX_VALUE}</em>
<a class="jxr_linenumber" name="L263" href="#L263">263</a> <em class="jxr_javadoccomment">     * an {@code MathArithMeticException } is thrown.&lt;/li&gt;</em>
<a class="jxr_linenumber" name="L264" href="#L264">264</a> <em class="jxr_javadoccomment">     * &lt;/ul&gt;</em>
<a class="jxr_linenumber" name="L265" href="#L265">265</a> <em class="jxr_javadoccomment">     * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L266" href="#L266">266</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L267" href="#L267">267</a> <em class="jxr_javadoccomment">     * @param n argument</em>
<a class="jxr_linenumber" name="L268" href="#L268">268</a> <em class="jxr_javadoccomment">     * @return {@code n!}</em>
<a class="jxr_linenumber" name="L269" href="#L269">269</a> <em class="jxr_javadoccomment">     * @throws MathArithmeticException if the result is too large to be represented</em>
<a class="jxr_linenumber" name="L270" href="#L270">270</a> <em class="jxr_javadoccomment">     * by a {@code long}.</em>
<a class="jxr_linenumber" name="L271" href="#L271">271</a> <em class="jxr_javadoccomment">     * @throws NotPositiveException if {@code n &lt; 0}.</em>
<a class="jxr_linenumber" name="L272" href="#L272">272</a> <em class="jxr_javadoccomment">     * @throws MathArithmeticException if {@code n &gt; 20}: The factorial value is too</em>
<a class="jxr_linenumber" name="L273" href="#L273">273</a> <em class="jxr_javadoccomment">     * large to fit in a {@code long}.</em>
<a class="jxr_linenumber" name="L274" href="#L274">274</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L275" href="#L275">275</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">long</strong> factorial(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> n) <strong class="jxr_keyword">throws</strong> NotPositiveException, MathArithmeticException {
<a class="jxr_linenumber" name="L276" href="#L276">276</a>         <strong class="jxr_keyword">if</strong> (n &lt; 0) {
<a class="jxr_linenumber" name="L277" href="#L277">277</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../org/apache/commons/math3/exception/NotPositiveException.html">NotPositiveException</a>(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,
<a class="jxr_linenumber" name="L278" href="#L278">278</a>                                            n);
<a class="jxr_linenumber" name="L279" href="#L279">279</a>         }
<a class="jxr_linenumber" name="L280" href="#L280">280</a>         <strong class="jxr_keyword">if</strong> (n &gt; 20) {
<a class="jxr_linenumber" name="L281" href="#L281">281</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../org/apache/commons/math3/exception/MathArithmeticException.html">MathArithmeticException</a>();
<a class="jxr_linenumber" name="L282" href="#L282">282</a>         }
<a class="jxr_linenumber" name="L283" href="#L283">283</a>         <strong class="jxr_keyword">return</strong> FACTORIALS[n];
<a class="jxr_linenumber" name="L284" href="#L284">284</a>     }
<a class="jxr_linenumber" name="L285" href="#L285">285</a> 
<a class="jxr_linenumber" name="L286" href="#L286">286</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L287" href="#L287">287</a> <em class="jxr_javadoccomment">     * Compute n!, the&lt;a href="<a href="http://mathworld.wolfram.com/Factorial.html" target="alexandria_uri">http://mathworld.wolfram.com/Factorial.html</a>"&gt;</em>
<a class="jxr_linenumber" name="L288" href="#L288">288</a> <em class="jxr_javadoccomment">     * factorial&lt;/a&gt; of {@code n} (the product of the numbers 1 to n), as a</em>
<a class="jxr_linenumber" name="L289" href="#L289">289</a> <em class="jxr_javadoccomment">     * {@code double}.</em>
<a class="jxr_linenumber" name="L290" href="#L290">290</a> <em class="jxr_javadoccomment">     * The result should be small enough to fit into a {@code double}: The</em>
<a class="jxr_linenumber" name="L291" href="#L291">291</a> <em class="jxr_javadoccomment">     * largest {@code n} for which {@code n!} does not exceed</em>
<a class="jxr_linenumber" name="L292" href="#L292">292</a> <em class="jxr_javadoccomment">     * {@code Double.MAX_VALUE} is 170. If the computed value exceeds</em>
<a class="jxr_linenumber" name="L293" href="#L293">293</a> <em class="jxr_javadoccomment">     * {@code Double.MAX_VALUE}, {@code Double.POSITIVE_INFINITY} is returned.</em>
<a class="jxr_linenumber" name="L294" href="#L294">294</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L295" href="#L295">295</a> <em class="jxr_javadoccomment">     * @param n Argument.</em>
<a class="jxr_linenumber" name="L296" href="#L296">296</a> <em class="jxr_javadoccomment">     * @return {@code n!}</em>
<a class="jxr_linenumber" name="L297" href="#L297">297</a> <em class="jxr_javadoccomment">     * @throws NotPositiveException if {@code n &lt; 0}.</em>
<a class="jxr_linenumber" name="L298" href="#L298">298</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L299" href="#L299">299</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">double</strong> factorialDouble(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> n) <strong class="jxr_keyword">throws</strong> NotPositiveException {
<a class="jxr_linenumber" name="L300" href="#L300">300</a>         <strong class="jxr_keyword">if</strong> (n &lt; 0) {
<a class="jxr_linenumber" name="L301" href="#L301">301</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../org/apache/commons/math3/exception/NotPositiveException.html">NotPositiveException</a>(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,
<a class="jxr_linenumber" name="L302" href="#L302">302</a>                                            n);
<a class="jxr_linenumber" name="L303" href="#L303">303</a>         }
<a class="jxr_linenumber" name="L304" href="#L304">304</a>         <strong class="jxr_keyword">if</strong> (n &lt; 21) {
<a class="jxr_linenumber" name="L305" href="#L305">305</a>             <strong class="jxr_keyword">return</strong> FACTORIALS[n];
<a class="jxr_linenumber" name="L306" href="#L306">306</a>         }
<a class="jxr_linenumber" name="L307" href="#L307">307</a>         <strong class="jxr_keyword">return</strong> FastMath.floor(FastMath.exp(CombinatoricsUtils.factorialLog(n)) + 0.5);
<a class="jxr_linenumber" name="L308" href="#L308">308</a>     }
<a class="jxr_linenumber" name="L309" href="#L309">309</a> 
<a class="jxr_linenumber" name="L310" href="#L310">310</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L311" href="#L311">311</a> <em class="jxr_javadoccomment">     * Compute the natural logarithm of the factorial of {@code n}.</em>
<a class="jxr_linenumber" name="L312" href="#L312">312</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L313" href="#L313">313</a> <em class="jxr_javadoccomment">     * @param n Argument.</em>
<a class="jxr_linenumber" name="L314" href="#L314">314</a> <em class="jxr_javadoccomment">     * @return {@code n!}</em>
<a class="jxr_linenumber" name="L315" href="#L315">315</a> <em class="jxr_javadoccomment">     * @throws NotPositiveException if {@code n &lt; 0}.</em>
<a class="jxr_linenumber" name="L316" href="#L316">316</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L317" href="#L317">317</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">double</strong> factorialLog(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> n) <strong class="jxr_keyword">throws</strong> NotPositiveException {
<a class="jxr_linenumber" name="L318" href="#L318">318</a>         <strong class="jxr_keyword">if</strong> (n &lt; 0) {
<a class="jxr_linenumber" name="L319" href="#L319">319</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../org/apache/commons/math3/exception/NotPositiveException.html">NotPositiveException</a>(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,
<a class="jxr_linenumber" name="L320" href="#L320">320</a>                                            n);
<a class="jxr_linenumber" name="L321" href="#L321">321</a>         }
<a class="jxr_linenumber" name="L322" href="#L322">322</a>         <strong class="jxr_keyword">if</strong> (n &lt; 21) {
<a class="jxr_linenumber" name="L323" href="#L323">323</a>             <strong class="jxr_keyword">return</strong> FastMath.log(FACTORIALS[n]);
<a class="jxr_linenumber" name="L324" href="#L324">324</a>         }
<a class="jxr_linenumber" name="L325" href="#L325">325</a>         <strong class="jxr_keyword">double</strong> logSum = 0;
<a class="jxr_linenumber" name="L326" href="#L326">326</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 2; i &lt;= n; i++) {
<a class="jxr_linenumber" name="L327" href="#L327">327</a>             logSum += FastMath.log(i);
<a class="jxr_linenumber" name="L328" href="#L328">328</a>         }
<a class="jxr_linenumber" name="L329" href="#L329">329</a>         <strong class="jxr_keyword">return</strong> logSum;
<a class="jxr_linenumber" name="L330" href="#L330">330</a>     }
<a class="jxr_linenumber" name="L331" href="#L331">331</a> 
<a class="jxr_linenumber" name="L332" href="#L332">332</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L333" href="#L333">333</a> <em class="jxr_javadoccomment">     * Returns the &lt;a</em>
<a class="jxr_linenumber" name="L334" href="#L334">334</a> <em class="jxr_javadoccomment">     * href="<a href="http://mathworld.wolfram.com/StirlingNumberoftheSecondKind.html" target="alexandria_uri">http://mathworld.wolfram.com/StirlingNumberoftheSecondKind.html</a>"&gt;</em>
<a class="jxr_linenumber" name="L335" href="#L335">335</a> <em class="jxr_javadoccomment">     * Stirling number of the second kind&lt;/a&gt;, "{@code S(n,k)}", the number of</em>
<a class="jxr_linenumber" name="L336" href="#L336">336</a> <em class="jxr_javadoccomment">     * ways of partitioning an {@code n}-element set into {@code k} non-empty</em>
<a class="jxr_linenumber" name="L337" href="#L337">337</a> <em class="jxr_javadoccomment">     * subsets.</em>
<a class="jxr_linenumber" name="L338" href="#L338">338</a> <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L339" href="#L339">339</a> <em class="jxr_javadoccomment">     * The preconditions are {@code 0 &lt;= k &lt;= n } (otherwise</em>
<a class="jxr_linenumber" name="L340" href="#L340">340</a> <em class="jxr_javadoccomment">     * {@code NotPositiveException} is thrown)</em>
<a class="jxr_linenumber" name="L341" href="#L341">341</a> <em class="jxr_javadoccomment">     * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L342" href="#L342">342</a> <em class="jxr_javadoccomment">     * @param n the size of the set</em>
<a class="jxr_linenumber" name="L343" href="#L343">343</a> <em class="jxr_javadoccomment">     * @param k the number of non-empty subsets</em>
<a class="jxr_linenumber" name="L344" href="#L344">344</a> <em class="jxr_javadoccomment">     * @return {@code S(n,k)}</em>
<a class="jxr_linenumber" name="L345" href="#L345">345</a> <em class="jxr_javadoccomment">     * @throws NotPositiveException if {@code k &lt; 0}.</em>
<a class="jxr_linenumber" name="L346" href="#L346">346</a> <em class="jxr_javadoccomment">     * @throws NumberIsTooLargeException if {@code k &gt; n}.</em>
<a class="jxr_linenumber" name="L347" href="#L347">347</a> <em class="jxr_javadoccomment">     * @throws MathArithmeticException if some overflow happens, typically for n exceeding 25 and</em>
<a class="jxr_linenumber" name="L348" href="#L348">348</a> <em class="jxr_javadoccomment">     * k between 20 and n-2 (S(n,n-1) is handled specifically and does not overflow)</em>
<a class="jxr_linenumber" name="L349" href="#L349">349</a> <em class="jxr_javadoccomment">     * @since 3.1</em>
<a class="jxr_linenumber" name="L350" href="#L350">350</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L351" href="#L351">351</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">long</strong> stirlingS2(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> n, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> k)
<a class="jxr_linenumber" name="L352" href="#L352">352</a>         <strong class="jxr_keyword">throws</strong> NotPositiveException, NumberIsTooLargeException, <a href="../../../../../org/apache/commons/math3/exception/MathArithmeticException.html">MathArithmeticException</a> {
<a class="jxr_linenumber" name="L353" href="#L353">353</a>         <strong class="jxr_keyword">if</strong> (k &lt; 0) {
<a class="jxr_linenumber" name="L354" href="#L354">354</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../org/apache/commons/math3/exception/NotPositiveException.html">NotPositiveException</a>(k);
<a class="jxr_linenumber" name="L355" href="#L355">355</a>         }
<a class="jxr_linenumber" name="L356" href="#L356">356</a>         <strong class="jxr_keyword">if</strong> (k &gt; n) {
<a class="jxr_linenumber" name="L357" href="#L357">357</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../org/apache/commons/math3/exception/NumberIsTooLargeException.html">NumberIsTooLargeException</a>(k, n, <strong class="jxr_keyword">true</strong>);
<a class="jxr_linenumber" name="L358" href="#L358">358</a>         }
<a class="jxr_linenumber" name="L359" href="#L359">359</a> 
<a class="jxr_linenumber" name="L360" href="#L360">360</a>         <strong class="jxr_keyword">long</strong>[][] stirlingS2 = STIRLING_S2.get();
<a class="jxr_linenumber" name="L361" href="#L361">361</a> 
<a class="jxr_linenumber" name="L362" href="#L362">362</a>         <strong class="jxr_keyword">if</strong> (stirlingS2 == <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L363" href="#L363">363</a>             <em class="jxr_comment">// the cache has never been initialized, compute the first numbers</em>
<a class="jxr_linenumber" name="L364" href="#L364">364</a>             <em class="jxr_comment">// by direct recurrence relation</em>
<a class="jxr_linenumber" name="L365" href="#L365">365</a> 
<a class="jxr_linenumber" name="L366" href="#L366">366</a>             <em class="jxr_comment">// as S(26,9) = 11201516780955125625 is larger than Long.MAX_VALUE</em>
<a class="jxr_linenumber" name="L367" href="#L367">367</a>             <em class="jxr_comment">// we must stop computation at row 26</em>
<a class="jxr_linenumber" name="L368" href="#L368">368</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> maxIndex = 26;
<a class="jxr_linenumber" name="L369" href="#L369">369</a>             stirlingS2 = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">long</strong>[maxIndex][];
<a class="jxr_linenumber" name="L370" href="#L370">370</a>             stirlingS2[0] = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">long</strong>[] { 1l };
<a class="jxr_linenumber" name="L371" href="#L371">371</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 1; i &lt; stirlingS2.length; ++i) {
<a class="jxr_linenumber" name="L372" href="#L372">372</a>                 stirlingS2[i] = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">long</strong>[i + 1];
<a class="jxr_linenumber" name="L373" href="#L373">373</a>                 stirlingS2[i][0] = 0;
<a class="jxr_linenumber" name="L374" href="#L374">374</a>                 stirlingS2[i][1] = 1;
<a class="jxr_linenumber" name="L375" href="#L375">375</a>                 stirlingS2[i][i] = 1;
<a class="jxr_linenumber" name="L376" href="#L376">376</a>                 <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = 2; j &lt; i; ++j) {
<a class="jxr_linenumber" name="L377" href="#L377">377</a>                     stirlingS2[i][j] = j * stirlingS2[i - 1][j] + stirlingS2[i - 1][j - 1];
<a class="jxr_linenumber" name="L378" href="#L378">378</a>                 }
<a class="jxr_linenumber" name="L379" href="#L379">379</a>             }
<a class="jxr_linenumber" name="L380" href="#L380">380</a> 
<a class="jxr_linenumber" name="L381" href="#L381">381</a>             <em class="jxr_comment">// atomically save the cache</em>
<a class="jxr_linenumber" name="L382" href="#L382">382</a>             STIRLING_S2.compareAndSet(<strong class="jxr_keyword">null</strong>, stirlingS2);
<a class="jxr_linenumber" name="L383" href="#L383">383</a> 
<a class="jxr_linenumber" name="L384" href="#L384">384</a>         }
<a class="jxr_linenumber" name="L385" href="#L385">385</a> 
<a class="jxr_linenumber" name="L386" href="#L386">386</a>         <strong class="jxr_keyword">if</strong> (n &lt; stirlingS2.length) {
<a class="jxr_linenumber" name="L387" href="#L387">387</a>             <em class="jxr_comment">// the number is in the small cache</em>
<a class="jxr_linenumber" name="L388" href="#L388">388</a>             <strong class="jxr_keyword">return</strong> stirlingS2[n][k];
<a class="jxr_linenumber" name="L389" href="#L389">389</a>         } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L390" href="#L390">390</a>             <em class="jxr_comment">// use explicit formula to compute the number without caching it</em>
<a class="jxr_linenumber" name="L391" href="#L391">391</a>             <strong class="jxr_keyword">if</strong> (k == 0) {
<a class="jxr_linenumber" name="L392" href="#L392">392</a>                 <strong class="jxr_keyword">return</strong> 0;
<a class="jxr_linenumber" name="L393" href="#L393">393</a>             } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (k == 1 || k == n) {
<a class="jxr_linenumber" name="L394" href="#L394">394</a>                 <strong class="jxr_keyword">return</strong> 1;
<a class="jxr_linenumber" name="L395" href="#L395">395</a>             } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (k == 2) {
<a class="jxr_linenumber" name="L396" href="#L396">396</a>                 <strong class="jxr_keyword">return</strong> (1l &lt;&lt; (n - 1)) - 1l;
<a class="jxr_linenumber" name="L397" href="#L397">397</a>             } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (k == n - 1) {
<a class="jxr_linenumber" name="L398" href="#L398">398</a>                 <strong class="jxr_keyword">return</strong> binomialCoefficient(n, 2);
<a class="jxr_linenumber" name="L399" href="#L399">399</a>             } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L400" href="#L400">400</a>                 <em class="jxr_comment">// definition formula: note that this may trigger some overflow</em>
<a class="jxr_linenumber" name="L401" href="#L401">401</a>                 <strong class="jxr_keyword">long</strong> sum = 0;
<a class="jxr_linenumber" name="L402" href="#L402">402</a>                 <strong class="jxr_keyword">long</strong> sign = ((k &amp; 0x1) == 0) ? 1 : -1;
<a class="jxr_linenumber" name="L403" href="#L403">403</a>                 <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = 1; j &lt;= k; ++j) {
<a class="jxr_linenumber" name="L404" href="#L404">404</a>                     sign = -sign;
<a class="jxr_linenumber" name="L405" href="#L405">405</a>                     sum += sign * binomialCoefficient(k, j) * ArithmeticUtils.pow(j, n);
<a class="jxr_linenumber" name="L406" href="#L406">406</a>                     <strong class="jxr_keyword">if</strong> (sum &lt; 0) {
<a class="jxr_linenumber" name="L407" href="#L407">407</a>                         <em class="jxr_comment">// there was an overflow somewhere</em>
<a class="jxr_linenumber" name="L408" href="#L408">408</a>                         <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../org/apache/commons/math3/exception/MathArithmeticException.html">MathArithmeticException</a>(LocalizedFormats.ARGUMENT_OUTSIDE_DOMAIN,
<a class="jxr_linenumber" name="L409" href="#L409">409</a>                                                           n, 0, stirlingS2.length - 1);
<a class="jxr_linenumber" name="L410" href="#L410">410</a>                     }
<a class="jxr_linenumber" name="L411" href="#L411">411</a>                 }
<a class="jxr_linenumber" name="L412" href="#L412">412</a>                 <strong class="jxr_keyword">return</strong> sum / factorial(k);
<a class="jxr_linenumber" name="L413" href="#L413">413</a>             }
<a class="jxr_linenumber" name="L414" href="#L414">414</a>         }
<a class="jxr_linenumber" name="L415" href="#L415">415</a> 
<a class="jxr_linenumber" name="L416" href="#L416">416</a>     }
<a class="jxr_linenumber" name="L417" href="#L417">417</a> 
<a class="jxr_linenumber" name="L418" href="#L418">418</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L419" href="#L419">419</a> <em class="jxr_javadoccomment">     * Returns an iterator whose range is the k-element subsets of {0, ..., n - 1}</em>
<a class="jxr_linenumber" name="L420" href="#L420">420</a> <em class="jxr_javadoccomment">     * represented as {@code int[]} arrays.</em>
<a class="jxr_linenumber" name="L421" href="#L421">421</a> <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L422" href="#L422">422</a> <em class="jxr_javadoccomment">     * The arrays returned by the iterator are sorted in descending order and</em>
<a class="jxr_linenumber" name="L423" href="#L423">423</a> <em class="jxr_javadoccomment">     * they are visited in lexicographic order with significance from right to</em>
<a class="jxr_linenumber" name="L424" href="#L424">424</a> <em class="jxr_javadoccomment">     * left. For example, combinationsIterator(4, 2) returns an Iterator that</em>
<a class="jxr_linenumber" name="L425" href="#L425">425</a> <em class="jxr_javadoccomment">     * will generate the following sequence of arrays on successive calls to</em>
<a class="jxr_linenumber" name="L426" href="#L426">426</a> <em class="jxr_javadoccomment">     * {@code next()}:&lt;/p&gt;&lt;p&gt;</em>
<a class="jxr_linenumber" name="L427" href="#L427">427</a> <em class="jxr_javadoccomment">     * {@code [0, 1], [0, 2], [1, 2], [0, 3], [1, 3], [2, 3]}</em>
<a class="jxr_linenumber" name="L428" href="#L428">428</a> <em class="jxr_javadoccomment">     * &lt;/p&gt;&lt;p&gt;</em>
<a class="jxr_linenumber" name="L429" href="#L429">429</a> <em class="jxr_javadoccomment">     * If {@code k == 0} an Iterator containing an empty array is returned and</em>
<a class="jxr_linenumber" name="L430" href="#L430">430</a> <em class="jxr_javadoccomment">     * if {@code k == n} an Iterator containing [0, ..., n -1] is returned.&lt;/p&gt;</em>
<a class="jxr_linenumber" name="L431" href="#L431">431</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L432" href="#L432">432</a> <em class="jxr_javadoccomment">     * @param n Size of the set from which subsets are selected.</em>
<a class="jxr_linenumber" name="L433" href="#L433">433</a> <em class="jxr_javadoccomment">     * @param k Size of the subsets to be enumerated.</em>
<a class="jxr_linenumber" name="L434" href="#L434">434</a> <em class="jxr_javadoccomment">     * @return an {@link Iterator iterator} over the k-sets in n.</em>
<a class="jxr_linenumber" name="L435" href="#L435">435</a> <em class="jxr_javadoccomment">     * @throws NotPositiveException if {@code n &lt; 0}.</em>
<a class="jxr_linenumber" name="L436" href="#L436">436</a> <em class="jxr_javadoccomment">     * @throws NumberIsTooLargeException if {@code k &gt; n}.</em>
<a class="jxr_linenumber" name="L437" href="#L437">437</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L438" href="#L438">438</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> Iterator&lt;<strong class="jxr_keyword">int</strong>[]&gt; combinationsIterator(<strong class="jxr_keyword">int</strong> n, <strong class="jxr_keyword">int</strong> k) {
<a class="jxr_linenumber" name="L439" href="#L439">439</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../org/apache/commons/math3/util/Combinations.html">Combinations</a>(n, k).iterator();
<a class="jxr_linenumber" name="L440" href="#L440">440</a>     }
<a class="jxr_linenumber" name="L441" href="#L441">441</a> 
<a class="jxr_linenumber" name="L442" href="#L442">442</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L443" href="#L443">443</a> <em class="jxr_javadoccomment">     * Check binomial preconditions.</em>
<a class="jxr_linenumber" name="L444" href="#L444">444</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L445" href="#L445">445</a> <em class="jxr_javadoccomment">     * @param n Size of the set.</em>
<a class="jxr_linenumber" name="L446" href="#L446">446</a> <em class="jxr_javadoccomment">     * @param k Size of the subsets to be counted.</em>
<a class="jxr_linenumber" name="L447" href="#L447">447</a> <em class="jxr_javadoccomment">     * @throws NotPositiveException if {@code n &lt; 0}.</em>
<a class="jxr_linenumber" name="L448" href="#L448">448</a> <em class="jxr_javadoccomment">     * @throws NumberIsTooLargeException if {@code k &gt; n}.</em>
<a class="jxr_linenumber" name="L449" href="#L449">449</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L450" href="#L450">450</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">void</strong> checkBinomial(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> n,
<a class="jxr_linenumber" name="L451" href="#L451">451</a>                                      <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> k)
<a class="jxr_linenumber" name="L452" href="#L452">452</a>         <strong class="jxr_keyword">throws</strong> NumberIsTooLargeException,
<a class="jxr_linenumber" name="L453" href="#L453">453</a>                <a href="../../../../../org/apache/commons/math3/exception/NotPositiveException.html">NotPositiveException</a> {
<a class="jxr_linenumber" name="L454" href="#L454">454</a>         <strong class="jxr_keyword">if</strong> (n &lt; k) {
<a class="jxr_linenumber" name="L455" href="#L455">455</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../org/apache/commons/math3/exception/NumberIsTooLargeException.html">NumberIsTooLargeException</a>(LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER,
<a class="jxr_linenumber" name="L456" href="#L456">456</a>                                                 k, n, <strong class="jxr_keyword">true</strong>);
<a class="jxr_linenumber" name="L457" href="#L457">457</a>         }
<a class="jxr_linenumber" name="L458" href="#L458">458</a>         <strong class="jxr_keyword">if</strong> (n &lt; 0) {
<a class="jxr_linenumber" name="L459" href="#L459">459</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../org/apache/commons/math3/exception/NotPositiveException.html">NotPositiveException</a>(LocalizedFormats.BINOMIAL_NEGATIVE_PARAMETER, n);
<a class="jxr_linenumber" name="L460" href="#L460">460</a>         }
<a class="jxr_linenumber" name="L461" href="#L461">461</a>     }
<a class="jxr_linenumber" name="L462" href="#L462">462</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2003&#x2013;2016 <a href="http://www.apache.org/">The Apache Software Foundation</a>. All rights reserved.</div>
</body>
</html>
