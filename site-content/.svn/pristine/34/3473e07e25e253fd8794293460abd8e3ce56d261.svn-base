<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>FieldRotation xref</title>
<link type="text/css" rel="stylesheet" href="../../../../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../../apidocs/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Licensed to the Apache Software Foundation (ASF) under one or more</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> * contributor license agreements.  See the NOTICE file distributed with</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * this work for additional information regarding copyright ownership.</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * The ASF licenses this file to You under the Apache License, Version 2.0</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * (the "License"); you may not use this file except in compliance with</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> * the License.  You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *      <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  <strong class="jxr_keyword">package</strong> org.apache.commons.math3.geometry.euclidean.threed;
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> java.io.Serializable;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.RealFieldElement;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.Field;
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.MathArithmeticException;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.MathIllegalArgumentException;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.util.LocalizedFormats;
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.util.FastMath;
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.util.MathArrays;
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <em class="jxr_javadoccomment"> * This class is a re-implementation of {@link Rotation} using {@link RealFieldElement}.</em>
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <em class="jxr_javadoccomment"> * &lt;p&gt;Instance of this class are guaranteed to be immutable.&lt;/p&gt;</em>
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <em class="jxr_javadoccomment"> * @param &lt;T&gt; the type of the field elements</em>
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  <em class="jxr_javadoccomment"> * @see FieldVector3D</em>
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  <em class="jxr_javadoccomment"> * @see RotationOrder</em>
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  <em class="jxr_javadoccomment"> * @since 3.2</em>
<a class="jxr_linenumber" name="L38" href="#L38">38</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L39" href="#L39">39</a>  
<a class="jxr_linenumber" name="L40" href="#L40">40</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">class</strong> FieldRotation&lt;T <strong class="jxr_keyword">extends</strong> RealFieldElement&lt;T&gt;&gt; <strong class="jxr_keyword">implements</strong> Serializable {
<a class="jxr_linenumber" name="L41" href="#L41">41</a>  
<a class="jxr_linenumber" name="L42" href="#L42">42</a>      <em class="jxr_javadoccomment">/** Serializable version identifier */</em>
<a class="jxr_linenumber" name="L43" href="#L43">43</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">long</strong> serialVersionUID = 20130224l;
<a class="jxr_linenumber" name="L44" href="#L44">44</a>  
<a class="jxr_linenumber" name="L45" href="#L45">45</a>      <em class="jxr_javadoccomment">/** Scalar coordinate of the quaternion. */</em>
<a class="jxr_linenumber" name="L46" href="#L46">46</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> T q0;
<a class="jxr_linenumber" name="L47" href="#L47">47</a>  
<a class="jxr_linenumber" name="L48" href="#L48">48</a>      <em class="jxr_javadoccomment">/** First coordinate of the vectorial part of the quaternion. */</em>
<a class="jxr_linenumber" name="L49" href="#L49">49</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> T q1;
<a class="jxr_linenumber" name="L50" href="#L50">50</a>  
<a class="jxr_linenumber" name="L51" href="#L51">51</a>      <em class="jxr_javadoccomment">/** Second coordinate of the vectorial part of the quaternion. */</em>
<a class="jxr_linenumber" name="L52" href="#L52">52</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> T q2;
<a class="jxr_linenumber" name="L53" href="#L53">53</a>  
<a class="jxr_linenumber" name="L54" href="#L54">54</a>      <em class="jxr_javadoccomment">/** Third coordinate of the vectorial part of the quaternion. */</em>
<a class="jxr_linenumber" name="L55" href="#L55">55</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> T q3;
<a class="jxr_linenumber" name="L56" href="#L56">56</a>  
<a class="jxr_linenumber" name="L57" href="#L57">57</a>      <em class="jxr_javadoccomment">/** Build a rotation from the quaternion coordinates.</em>
<a class="jxr_linenumber" name="L58" href="#L58">58</a>  <em class="jxr_javadoccomment">     * &lt;p&gt;A rotation can be built from a &lt;em&gt;normalized&lt;/em&gt; quaternion,</em>
<a class="jxr_linenumber" name="L59" href="#L59">59</a>  <em class="jxr_javadoccomment">     * i.e. a quaternion for which q&lt;sub&gt;0&lt;/sub&gt;&lt;sup&gt;2&lt;/sup&gt; +</em>
<a class="jxr_linenumber" name="L60" href="#L60">60</a>  <em class="jxr_javadoccomment">     * q&lt;sub&gt;1&lt;/sub&gt;&lt;sup&gt;2&lt;/sup&gt; + q&lt;sub&gt;2&lt;/sub&gt;&lt;sup&gt;2&lt;/sup&gt; +</em>
<a class="jxr_linenumber" name="L61" href="#L61">61</a>  <em class="jxr_javadoccomment">     * q&lt;sub&gt;3&lt;/sub&gt;&lt;sup&gt;2&lt;/sup&gt; = 1. If the quaternion is not normalized,</em>
<a class="jxr_linenumber" name="L62" href="#L62">62</a>  <em class="jxr_javadoccomment">     * the constructor can normalize it in a preprocessing step.&lt;/p&gt;</em>
<a class="jxr_linenumber" name="L63" href="#L63">63</a>  <em class="jxr_javadoccomment">     * &lt;p&gt;Note that some conventions put the scalar part of the quaternion</em>
<a class="jxr_linenumber" name="L64" href="#L64">64</a>  <em class="jxr_javadoccomment">     * as the 4&lt;sup&gt;th&lt;/sup&gt; component and the vector part as the first three</em>
<a class="jxr_linenumber" name="L65" href="#L65">65</a>  <em class="jxr_javadoccomment">     * components. This is &lt;em&gt;not&lt;/em&gt; our convention. We put the scalar part</em>
<a class="jxr_linenumber" name="L66" href="#L66">66</a>  <em class="jxr_javadoccomment">     * as the first component.&lt;/p&gt;</em>
<a class="jxr_linenumber" name="L67" href="#L67">67</a>  <em class="jxr_javadoccomment">     * @param q0 scalar part of the quaternion</em>
<a class="jxr_linenumber" name="L68" href="#L68">68</a>  <em class="jxr_javadoccomment">     * @param q1 first coordinate of the vectorial part of the quaternion</em>
<a class="jxr_linenumber" name="L69" href="#L69">69</a>  <em class="jxr_javadoccomment">     * @param q2 second coordinate of the vectorial part of the quaternion</em>
<a class="jxr_linenumber" name="L70" href="#L70">70</a>  <em class="jxr_javadoccomment">     * @param q3 third coordinate of the vectorial part of the quaternion</em>
<a class="jxr_linenumber" name="L71" href="#L71">71</a>  <em class="jxr_javadoccomment">     * @param needsNormalization if true, the coordinates are considered</em>
<a class="jxr_linenumber" name="L72" href="#L72">72</a>  <em class="jxr_javadoccomment">     * not to be normalized, a normalization preprocessing step is performed</em>
<a class="jxr_linenumber" name="L73" href="#L73">73</a>  <em class="jxr_javadoccomment">     * before using them</em>
<a class="jxr_linenumber" name="L74" href="#L74">74</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L75" href="#L75">75</a>      <strong class="jxr_keyword">public</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.html">FieldRotation</a>(<strong class="jxr_keyword">final</strong> T q0, <strong class="jxr_keyword">final</strong> T q1, <strong class="jxr_keyword">final</strong> T q2, <strong class="jxr_keyword">final</strong> T q3, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">boolean</strong> needsNormalization) {
<a class="jxr_linenumber" name="L76" href="#L76">76</a>  
<a class="jxr_linenumber" name="L77" href="#L77">77</a>          <strong class="jxr_keyword">if</strong> (needsNormalization) {
<a class="jxr_linenumber" name="L78" href="#L78">78</a>              <em class="jxr_comment">// normalization preprocessing</em>
<a class="jxr_linenumber" name="L79" href="#L79">79</a>              <strong class="jxr_keyword">final</strong> T inv =
<a class="jxr_linenumber" name="L80" href="#L80">80</a>                      q0.multiply(q0).add(q1.multiply(q1)).add(q2.multiply(q2)).add(q3.multiply(q3)).sqrt().reciprocal();
<a class="jxr_linenumber" name="L81" href="#L81">81</a>              <strong class="jxr_keyword">this</strong>.q0 = inv.multiply(q0);
<a class="jxr_linenumber" name="L82" href="#L82">82</a>              <strong class="jxr_keyword">this</strong>.q1 = inv.multiply(q1);
<a class="jxr_linenumber" name="L83" href="#L83">83</a>              <strong class="jxr_keyword">this</strong>.q2 = inv.multiply(q2);
<a class="jxr_linenumber" name="L84" href="#L84">84</a>              <strong class="jxr_keyword">this</strong>.q3 = inv.multiply(q3);
<a class="jxr_linenumber" name="L85" href="#L85">85</a>          } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L86" href="#L86">86</a>              <strong class="jxr_keyword">this</strong>.q0 = q0;
<a class="jxr_linenumber" name="L87" href="#L87">87</a>              <strong class="jxr_keyword">this</strong>.q1 = q1;
<a class="jxr_linenumber" name="L88" href="#L88">88</a>              <strong class="jxr_keyword">this</strong>.q2 = q2;
<a class="jxr_linenumber" name="L89" href="#L89">89</a>              <strong class="jxr_keyword">this</strong>.q3 = q3;
<a class="jxr_linenumber" name="L90" href="#L90">90</a>          }
<a class="jxr_linenumber" name="L91" href="#L91">91</a>  
<a class="jxr_linenumber" name="L92" href="#L92">92</a>      }
<a class="jxr_linenumber" name="L93" href="#L93">93</a>  
<a class="jxr_linenumber" name="L94" href="#L94">94</a>      <em class="jxr_javadoccomment">/** Build a rotation from an axis and an angle.</em>
<a class="jxr_linenumber" name="L95" href="#L95">95</a>  <em class="jxr_javadoccomment">     * &lt;p&gt;We use the convention that angles are oriented according to</em>
<a class="jxr_linenumber" name="L96" href="#L96">96</a>  <em class="jxr_javadoccomment">     * the effect of the rotation on vectors around the axis. That means</em>
<a class="jxr_linenumber" name="L97" href="#L97">97</a>  <em class="jxr_javadoccomment">     * that if (i, j, k) is a direct frame and if we first provide +k as</em>
<a class="jxr_linenumber" name="L98" href="#L98">98</a>  <em class="jxr_javadoccomment">     * the axis and &amp;pi;/2 as the angle to this constructor, and then</em>
<a class="jxr_linenumber" name="L99" href="#L99">99</a>  <em class="jxr_javadoccomment">     * {@link #applyTo(FieldVector3D) apply} the instance to +i, we will get</em>
<a class="jxr_linenumber" name="L100" href="#L100">100</a> <em class="jxr_javadoccomment">     * +j.&lt;/p&gt;</em>
<a class="jxr_linenumber" name="L101" href="#L101">101</a> <em class="jxr_javadoccomment">     * &lt;p&gt;Another way to represent our convention is to say that a rotation</em>
<a class="jxr_linenumber" name="L102" href="#L102">102</a> <em class="jxr_javadoccomment">     * of angle &amp;theta; about the unit vector (x, y, z) is the same as the</em>
<a class="jxr_linenumber" name="L103" href="#L103">103</a> <em class="jxr_javadoccomment">     * rotation build from quaternion components { cos(-&amp;theta;/2),</em>
<a class="jxr_linenumber" name="L104" href="#L104">104</a> <em class="jxr_javadoccomment">     * x * sin(-&amp;theta;/2), y * sin(-&amp;theta;/2), z * sin(-&amp;theta;/2) }.</em>
<a class="jxr_linenumber" name="L105" href="#L105">105</a> <em class="jxr_javadoccomment">     * Note the minus sign on the angle!&lt;/p&gt;</em>
<a class="jxr_linenumber" name="L106" href="#L106">106</a> <em class="jxr_javadoccomment">     * &lt;p&gt;On the one hand this convention is consistent with a vectorial</em>
<a class="jxr_linenumber" name="L107" href="#L107">107</a> <em class="jxr_javadoccomment">     * perspective (moving vectors in fixed frames), on the other hand it</em>
<a class="jxr_linenumber" name="L108" href="#L108">108</a> <em class="jxr_javadoccomment">     * is different from conventions with a frame perspective (fixed vectors</em>
<a class="jxr_linenumber" name="L109" href="#L109">109</a> <em class="jxr_javadoccomment">     * viewed from different frames) like the ones used for example in spacecraft</em>
<a class="jxr_linenumber" name="L110" href="#L110">110</a> <em class="jxr_javadoccomment">     * attitude community or in the graphics community.&lt;/p&gt;</em>
<a class="jxr_linenumber" name="L111" href="#L111">111</a> <em class="jxr_javadoccomment">     * @param axis axis around which to rotate</em>
<a class="jxr_linenumber" name="L112" href="#L112">112</a> <em class="jxr_javadoccomment">     * @param angle rotation angle.</em>
<a class="jxr_linenumber" name="L113" href="#L113">113</a> <em class="jxr_javadoccomment">     * @exception MathIllegalArgumentException if the axis norm is zero</em>
<a class="jxr_linenumber" name="L114" href="#L114">114</a> <em class="jxr_javadoccomment">     * @deprecated as of 3.6, replaced with {@link</em>
<a class="jxr_linenumber" name="L115" href="#L115">115</a> <em class="jxr_javadoccomment">     * #FieldRotation(FieldVector3D, RealFieldElement, RotationConvention)}</em>
<a class="jxr_linenumber" name="L116" href="#L116">116</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L117" href="#L117">117</a>     @Deprecated
<a class="jxr_linenumber" name="L118" href="#L118">118</a>     <strong class="jxr_keyword">public</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.html">FieldRotation</a>(<strong class="jxr_keyword">final</strong> FieldVector3D&lt;T&gt; axis, <strong class="jxr_keyword">final</strong> T angle)
<a class="jxr_linenumber" name="L119" href="#L119">119</a>         <strong class="jxr_keyword">throws</strong> <a href="../../../../../../../org/apache/commons/math3/exception/MathIllegalArgumentException.html">MathIllegalArgumentException</a> {
<a class="jxr_linenumber" name="L120" href="#L120">120</a>         <strong class="jxr_keyword">this</strong>(axis, angle, RotationConvention.VECTOR_OPERATOR);
<a class="jxr_linenumber" name="L121" href="#L121">121</a>     }
<a class="jxr_linenumber" name="L122" href="#L122">122</a> 
<a class="jxr_linenumber" name="L123" href="#L123">123</a>     <em class="jxr_javadoccomment">/** Build a rotation from an axis and an angle.</em>
<a class="jxr_linenumber" name="L124" href="#L124">124</a> <em class="jxr_javadoccomment">     * &lt;p&gt;We use the convention that angles are oriented according to</em>
<a class="jxr_linenumber" name="L125" href="#L125">125</a> <em class="jxr_javadoccomment">     * the effect of the rotation on vectors around the axis. That means</em>
<a class="jxr_linenumber" name="L126" href="#L126">126</a> <em class="jxr_javadoccomment">     * that if (i, j, k) is a direct frame and if we first provide +k as</em>
<a class="jxr_linenumber" name="L127" href="#L127">127</a> <em class="jxr_javadoccomment">     * the axis and &amp;pi;/2 as the angle to this constructor, and then</em>
<a class="jxr_linenumber" name="L128" href="#L128">128</a> <em class="jxr_javadoccomment">     * {@link #applyTo(FieldVector3D) apply} the instance to +i, we will get</em>
<a class="jxr_linenumber" name="L129" href="#L129">129</a> <em class="jxr_javadoccomment">     * +j.&lt;/p&gt;</em>
<a class="jxr_linenumber" name="L130" href="#L130">130</a> <em class="jxr_javadoccomment">     * &lt;p&gt;Another way to represent our convention is to say that a rotation</em>
<a class="jxr_linenumber" name="L131" href="#L131">131</a> <em class="jxr_javadoccomment">     * of angle &amp;theta; about the unit vector (x, y, z) is the same as the</em>
<a class="jxr_linenumber" name="L132" href="#L132">132</a> <em class="jxr_javadoccomment">     * rotation build from quaternion components { cos(-&amp;theta;/2),</em>
<a class="jxr_linenumber" name="L133" href="#L133">133</a> <em class="jxr_javadoccomment">     * x * sin(-&amp;theta;/2), y * sin(-&amp;theta;/2), z * sin(-&amp;theta;/2) }.</em>
<a class="jxr_linenumber" name="L134" href="#L134">134</a> <em class="jxr_javadoccomment">     * Note the minus sign on the angle!&lt;/p&gt;</em>
<a class="jxr_linenumber" name="L135" href="#L135">135</a> <em class="jxr_javadoccomment">     * &lt;p&gt;On the one hand this convention is consistent with a vectorial</em>
<a class="jxr_linenumber" name="L136" href="#L136">136</a> <em class="jxr_javadoccomment">     * perspective (moving vectors in fixed frames), on the other hand it</em>
<a class="jxr_linenumber" name="L137" href="#L137">137</a> <em class="jxr_javadoccomment">     * is different from conventions with a frame perspective (fixed vectors</em>
<a class="jxr_linenumber" name="L138" href="#L138">138</a> <em class="jxr_javadoccomment">     * viewed from different frames) like the ones used for example in spacecraft</em>
<a class="jxr_linenumber" name="L139" href="#L139">139</a> <em class="jxr_javadoccomment">     * attitude community or in the graphics community.&lt;/p&gt;</em>
<a class="jxr_linenumber" name="L140" href="#L140">140</a> <em class="jxr_javadoccomment">     * @param axis axis around which to rotate</em>
<a class="jxr_linenumber" name="L141" href="#L141">141</a> <em class="jxr_javadoccomment">     * @param angle rotation angle.</em>
<a class="jxr_linenumber" name="L142" href="#L142">142</a> <em class="jxr_javadoccomment">     * @param convention convention to use for the semantics of the angle</em>
<a class="jxr_linenumber" name="L143" href="#L143">143</a> <em class="jxr_javadoccomment">     * @exception MathIllegalArgumentException if the axis norm is zero</em>
<a class="jxr_linenumber" name="L144" href="#L144">144</a> <em class="jxr_javadoccomment">     * @since 3.6</em>
<a class="jxr_linenumber" name="L145" href="#L145">145</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L146" href="#L146">146</a>     <strong class="jxr_keyword">public</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.html">FieldRotation</a>(<strong class="jxr_keyword">final</strong> FieldVector3D&lt;T&gt; axis, <strong class="jxr_keyword">final</strong> T angle, <strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/RotationConvention.html">RotationConvention</a> convention)
<a class="jxr_linenumber" name="L147" href="#L147">147</a>         <strong class="jxr_keyword">throws</strong> <a href="../../../../../../../org/apache/commons/math3/exception/MathIllegalArgumentException.html">MathIllegalArgumentException</a> {
<a class="jxr_linenumber" name="L148" href="#L148">148</a> 
<a class="jxr_linenumber" name="L149" href="#L149">149</a>         <strong class="jxr_keyword">final</strong> T norm = axis.getNorm();
<a class="jxr_linenumber" name="L150" href="#L150">150</a>         <strong class="jxr_keyword">if</strong> (norm.getReal() == 0) {
<a class="jxr_linenumber" name="L151" href="#L151">151</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/exception/MathIllegalArgumentException.html">MathIllegalArgumentException</a>(LocalizedFormats.ZERO_NORM_FOR_ROTATION_AXIS);
<a class="jxr_linenumber" name="L152" href="#L152">152</a>         }
<a class="jxr_linenumber" name="L153" href="#L153">153</a> 
<a class="jxr_linenumber" name="L154" href="#L154">154</a>         <strong class="jxr_keyword">final</strong> T halfAngle = angle.multiply(convention == RotationConvention.VECTOR_OPERATOR ? -0.5 : 0.5);
<a class="jxr_linenumber" name="L155" href="#L155">155</a>         <strong class="jxr_keyword">final</strong> T coeff = halfAngle.sin().divide(norm);
<a class="jxr_linenumber" name="L156" href="#L156">156</a> 
<a class="jxr_linenumber" name="L157" href="#L157">157</a>         q0 = halfAngle.cos();
<a class="jxr_linenumber" name="L158" href="#L158">158</a>         q1 = coeff.multiply(axis.getX());
<a class="jxr_linenumber" name="L159" href="#L159">159</a>         q2 = coeff.multiply(axis.getY());
<a class="jxr_linenumber" name="L160" href="#L160">160</a>         q3 = coeff.multiply(axis.getZ());
<a class="jxr_linenumber" name="L161" href="#L161">161</a> 
<a class="jxr_linenumber" name="L162" href="#L162">162</a>     }
<a class="jxr_linenumber" name="L163" href="#L163">163</a> 
<a class="jxr_linenumber" name="L164" href="#L164">164</a>     <em class="jxr_javadoccomment">/** Build a rotation from a 3X3 matrix.</em>
<a class="jxr_linenumber" name="L165" href="#L165">165</a> 
<a class="jxr_linenumber" name="L166" href="#L166">166</a> <em class="jxr_javadoccomment">     * &lt;p&gt;Rotation matrices are orthogonal matrices, i.e. unit matrices</em>
<a class="jxr_linenumber" name="L167" href="#L167">167</a> <em class="jxr_javadoccomment">     * (which are matrices for which m.m&lt;sup&gt;T&lt;/sup&gt; = I) with real</em>
<a class="jxr_linenumber" name="L168" href="#L168">168</a> <em class="jxr_javadoccomment">     * coefficients. The module of the determinant of unit matrices is</em>
<a class="jxr_linenumber" name="L169" href="#L169">169</a> <em class="jxr_javadoccomment">     * 1, among the orthogonal 3X3 matrices, only the ones having a</em>
<a class="jxr_linenumber" name="L170" href="#L170">170</a> <em class="jxr_javadoccomment">     * positive determinant (+1) are rotation matrices.&lt;/p&gt;</em>
<a class="jxr_linenumber" name="L171" href="#L171">171</a> 
<a class="jxr_linenumber" name="L172" href="#L172">172</a> <em class="jxr_javadoccomment">     * &lt;p&gt;When a rotation is defined by a matrix with truncated values</em>
<a class="jxr_linenumber" name="L173" href="#L173">173</a> <em class="jxr_javadoccomment">     * (typically when it is extracted from a technical sheet where only</em>
<a class="jxr_linenumber" name="L174" href="#L174">174</a> <em class="jxr_javadoccomment">     * four to five significant digits are available), the matrix is not</em>
<a class="jxr_linenumber" name="L175" href="#L175">175</a> <em class="jxr_javadoccomment">     * orthogonal anymore. This constructor handles this case</em>
<a class="jxr_linenumber" name="L176" href="#L176">176</a> <em class="jxr_javadoccomment">     * transparently by using a copy of the given matrix and applying a</em>
<a class="jxr_linenumber" name="L177" href="#L177">177</a> <em class="jxr_javadoccomment">     * correction to the copy in order to perfect its orthogonality. If</em>
<a class="jxr_linenumber" name="L178" href="#L178">178</a> <em class="jxr_javadoccomment">     * the Frobenius norm of the correction needed is above the given</em>
<a class="jxr_linenumber" name="L179" href="#L179">179</a> <em class="jxr_javadoccomment">     * threshold, then the matrix is considered to be too far from a</em>
<a class="jxr_linenumber" name="L180" href="#L180">180</a> <em class="jxr_javadoccomment">     * true rotation matrix and an exception is thrown.&lt;p&gt;</em>
<a class="jxr_linenumber" name="L181" href="#L181">181</a> 
<a class="jxr_linenumber" name="L182" href="#L182">182</a> <em class="jxr_javadoccomment">     * @param m rotation matrix</em>
<a class="jxr_linenumber" name="L183" href="#L183">183</a> <em class="jxr_javadoccomment">     * @param threshold convergence threshold for the iterative</em>
<a class="jxr_linenumber" name="L184" href="#L184">184</a> <em class="jxr_javadoccomment">     * orthogonality correction (convergence is reached when the</em>
<a class="jxr_linenumber" name="L185" href="#L185">185</a> <em class="jxr_javadoccomment">     * difference between two steps of the Frobenius norm of the</em>
<a class="jxr_linenumber" name="L186" href="#L186">186</a> <em class="jxr_javadoccomment">     * correction is below this threshold)</em>
<a class="jxr_linenumber" name="L187" href="#L187">187</a> 
<a class="jxr_linenumber" name="L188" href="#L188">188</a> <em class="jxr_javadoccomment">     * @exception NotARotationMatrixException if the matrix is not a 3X3</em>
<a class="jxr_linenumber" name="L189" href="#L189">189</a> <em class="jxr_javadoccomment">     * matrix, or if it cannot be transformed into an orthogonal matrix</em>
<a class="jxr_linenumber" name="L190" href="#L190">190</a> <em class="jxr_javadoccomment">     * with the given threshold, or if the determinant of the resulting</em>
<a class="jxr_linenumber" name="L191" href="#L191">191</a> <em class="jxr_javadoccomment">     * orthogonal matrix is negative</em>
<a class="jxr_linenumber" name="L192" href="#L192">192</a> 
<a class="jxr_linenumber" name="L193" href="#L193">193</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L194" href="#L194">194</a>     <strong class="jxr_keyword">public</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.html">FieldRotation</a>(<strong class="jxr_keyword">final</strong> T[][] m, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> threshold)
<a class="jxr_linenumber" name="L195" href="#L195">195</a>         <strong class="jxr_keyword">throws</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/NotARotationMatrixException.html">NotARotationMatrixException</a> {
<a class="jxr_linenumber" name="L196" href="#L196">196</a> 
<a class="jxr_linenumber" name="L197" href="#L197">197</a>         <em class="jxr_comment">// dimension check</em>
<a class="jxr_linenumber" name="L198" href="#L198">198</a>         <strong class="jxr_keyword">if</strong> ((m.length != 3) || (m[0].length != 3) ||
<a class="jxr_linenumber" name="L199" href="#L199">199</a>                 (m[1].length != 3) || (m[2].length != 3)) {
<a class="jxr_linenumber" name="L200" href="#L200">200</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/NotARotationMatrixException.html">NotARotationMatrixException</a>(
<a class="jxr_linenumber" name="L201" href="#L201">201</a>                                                   LocalizedFormats.ROTATION_MATRIX_DIMENSIONS,
<a class="jxr_linenumber" name="L202" href="#L202">202</a>                                                   m.length, m[0].length);
<a class="jxr_linenumber" name="L203" href="#L203">203</a>         }
<a class="jxr_linenumber" name="L204" href="#L204">204</a> 
<a class="jxr_linenumber" name="L205" href="#L205">205</a>         <em class="jxr_comment">// compute a "close" orthogonal matrix</em>
<a class="jxr_linenumber" name="L206" href="#L206">206</a>         <strong class="jxr_keyword">final</strong> T[][] ort = orthogonalizeMatrix(m, threshold);
<a class="jxr_linenumber" name="L207" href="#L207">207</a> 
<a class="jxr_linenumber" name="L208" href="#L208">208</a>         <em class="jxr_comment">// check the sign of the determinant</em>
<a class="jxr_linenumber" name="L209" href="#L209">209</a>         <strong class="jxr_keyword">final</strong> T d0 = ort[1][1].multiply(ort[2][2]).subtract(ort[2][1].multiply(ort[1][2]));
<a class="jxr_linenumber" name="L210" href="#L210">210</a>         <strong class="jxr_keyword">final</strong> T d1 = ort[0][1].multiply(ort[2][2]).subtract(ort[2][1].multiply(ort[0][2]));
<a class="jxr_linenumber" name="L211" href="#L211">211</a>         <strong class="jxr_keyword">final</strong> T d2 = ort[0][1].multiply(ort[1][2]).subtract(ort[1][1].multiply(ort[0][2]));
<a class="jxr_linenumber" name="L212" href="#L212">212</a>         <strong class="jxr_keyword">final</strong> T det =
<a class="jxr_linenumber" name="L213" href="#L213">213</a>                 ort[0][0].multiply(d0).subtract(ort[1][0].multiply(d1)).add(ort[2][0].multiply(d2));
<a class="jxr_linenumber" name="L214" href="#L214">214</a>         <strong class="jxr_keyword">if</strong> (det.getReal() &lt; 0.0) {
<a class="jxr_linenumber" name="L215" href="#L215">215</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/NotARotationMatrixException.html">NotARotationMatrixException</a>(
<a class="jxr_linenumber" name="L216" href="#L216">216</a>                                                   LocalizedFormats.CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT,
<a class="jxr_linenumber" name="L217" href="#L217">217</a>                                                   det);
<a class="jxr_linenumber" name="L218" href="#L218">218</a>         }
<a class="jxr_linenumber" name="L219" href="#L219">219</a> 
<a class="jxr_linenumber" name="L220" href="#L220">220</a>         <strong class="jxr_keyword">final</strong> T[] quat = mat2quat(ort);
<a class="jxr_linenumber" name="L221" href="#L221">221</a>         q0 = quat[0];
<a class="jxr_linenumber" name="L222" href="#L222">222</a>         q1 = quat[1];
<a class="jxr_linenumber" name="L223" href="#L223">223</a>         q2 = quat[2];
<a class="jxr_linenumber" name="L224" href="#L224">224</a>         q3 = quat[3];
<a class="jxr_linenumber" name="L225" href="#L225">225</a> 
<a class="jxr_linenumber" name="L226" href="#L226">226</a>     }
<a class="jxr_linenumber" name="L227" href="#L227">227</a> 
<a class="jxr_linenumber" name="L228" href="#L228">228</a>     <em class="jxr_javadoccomment">/** Build the rotation that transforms a pair of vectors into another pair.</em>
<a class="jxr_linenumber" name="L229" href="#L229">229</a> 
<a class="jxr_linenumber" name="L230" href="#L230">230</a> <em class="jxr_javadoccomment">     * &lt;p&gt;Except for possible scale factors, if the instance were applied to</em>
<a class="jxr_linenumber" name="L231" href="#L231">231</a> <em class="jxr_javadoccomment">     * the pair (u&lt;sub&gt;1&lt;/sub&gt;, u&lt;sub&gt;2&lt;/sub&gt;) it will produce the pair</em>
<a class="jxr_linenumber" name="L232" href="#L232">232</a> <em class="jxr_javadoccomment">     * (v&lt;sub&gt;1&lt;/sub&gt;, v&lt;sub&gt;2&lt;/sub&gt;).&lt;/p&gt;</em>
<a class="jxr_linenumber" name="L233" href="#L233">233</a> 
<a class="jxr_linenumber" name="L234" href="#L234">234</a> <em class="jxr_javadoccomment">     * &lt;p&gt;If the angular separation between u&lt;sub&gt;1&lt;/sub&gt; and u&lt;sub&gt;2&lt;/sub&gt; is</em>
<a class="jxr_linenumber" name="L235" href="#L235">235</a> <em class="jxr_javadoccomment">     * not the same as the angular separation between v&lt;sub&gt;1&lt;/sub&gt; and</em>
<a class="jxr_linenumber" name="L236" href="#L236">236</a> <em class="jxr_javadoccomment">     * v&lt;sub&gt;2&lt;/sub&gt;, then a corrected v'&lt;sub&gt;2&lt;/sub&gt; will be used rather than</em>
<a class="jxr_linenumber" name="L237" href="#L237">237</a> <em class="jxr_javadoccomment">     * v&lt;sub&gt;2&lt;/sub&gt;, the corrected vector will be in the (&amp;pm;v&lt;sub&gt;1&lt;/sub&gt;,</em>
<a class="jxr_linenumber" name="L238" href="#L238">238</a> <em class="jxr_javadoccomment">     * +v&lt;sub&gt;2&lt;/sub&gt;) half-plane.&lt;/p&gt;</em>
<a class="jxr_linenumber" name="L239" href="#L239">239</a> 
<a class="jxr_linenumber" name="L240" href="#L240">240</a> <em class="jxr_javadoccomment">     * @param u1 first vector of the origin pair</em>
<a class="jxr_linenumber" name="L241" href="#L241">241</a> <em class="jxr_javadoccomment">     * @param u2 second vector of the origin pair</em>
<a class="jxr_linenumber" name="L242" href="#L242">242</a> <em class="jxr_javadoccomment">     * @param v1 desired image of u1 by the rotation</em>
<a class="jxr_linenumber" name="L243" href="#L243">243</a> <em class="jxr_javadoccomment">     * @param v2 desired image of u2 by the rotation</em>
<a class="jxr_linenumber" name="L244" href="#L244">244</a> <em class="jxr_javadoccomment">     * @exception MathArithmeticException if the norm of one of the vectors is zero,</em>
<a class="jxr_linenumber" name="L245" href="#L245">245</a> <em class="jxr_javadoccomment">     * or if one of the pair is degenerated (i.e. the vectors of the pair are collinear)</em>
<a class="jxr_linenumber" name="L246" href="#L246">246</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L247" href="#L247">247</a>     <strong class="jxr_keyword">public</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.html">FieldRotation</a>(FieldVector3D&lt;T&gt; u1, FieldVector3D&lt;T&gt; u2, FieldVector3D&lt;T&gt; v1, FieldVector3D&lt;T&gt; v2)
<a class="jxr_linenumber" name="L248" href="#L248">248</a>         <strong class="jxr_keyword">throws</strong> <a href="../../../../../../../org/apache/commons/math3/exception/MathArithmeticException.html">MathArithmeticException</a> {
<a class="jxr_linenumber" name="L249" href="#L249">249</a> 
<a class="jxr_linenumber" name="L250" href="#L250">250</a>         <em class="jxr_comment">// build orthonormalized base from u1, u2</em>
<a class="jxr_linenumber" name="L251" href="#L251">251</a>         <em class="jxr_comment">// this fails when vectors are null or collinear, which is forbidden to define a rotation</em>
<a class="jxr_linenumber" name="L252" href="#L252">252</a>         <strong class="jxr_keyword">final</strong> FieldVector3D&lt;T&gt; u3 = FieldVector3D.crossProduct(u1, u2).normalize();
<a class="jxr_linenumber" name="L253" href="#L253">253</a>         u2 = FieldVector3D.crossProduct(u3, u1).normalize();
<a class="jxr_linenumber" name="L254" href="#L254">254</a>         u1 = u1.normalize();
<a class="jxr_linenumber" name="L255" href="#L255">255</a> 
<a class="jxr_linenumber" name="L256" href="#L256">256</a>         <em class="jxr_comment">// build an orthonormalized base from v1, v2</em>
<a class="jxr_linenumber" name="L257" href="#L257">257</a>         <em class="jxr_comment">// this fails when vectors are null or collinear, which is forbidden to define a rotation</em>
<a class="jxr_linenumber" name="L258" href="#L258">258</a>         <strong class="jxr_keyword">final</strong> FieldVector3D&lt;T&gt; v3 = FieldVector3D.crossProduct(v1, v2).normalize();
<a class="jxr_linenumber" name="L259" href="#L259">259</a>         v2 = FieldVector3D.crossProduct(v3, v1).normalize();
<a class="jxr_linenumber" name="L260" href="#L260">260</a>         v1 = v1.normalize();
<a class="jxr_linenumber" name="L261" href="#L261">261</a> 
<a class="jxr_linenumber" name="L262" href="#L262">262</a>         <em class="jxr_comment">// buid a matrix transforming the first base into the second one</em>
<a class="jxr_linenumber" name="L263" href="#L263">263</a>         <strong class="jxr_keyword">final</strong> T[][] array = MathArrays.buildArray(u1.getX().getField(), 3, 3);
<a class="jxr_linenumber" name="L264" href="#L264">264</a>         array[0][0] = u1.getX().multiply(v1.getX()).add(u2.getX().multiply(v2.getX())).add(u3.getX().multiply(v3.getX()));
<a class="jxr_linenumber" name="L265" href="#L265">265</a>         array[0][1] = u1.getY().multiply(v1.getX()).add(u2.getY().multiply(v2.getX())).add(u3.getY().multiply(v3.getX()));
<a class="jxr_linenumber" name="L266" href="#L266">266</a>         array[0][2] = u1.getZ().multiply(v1.getX()).add(u2.getZ().multiply(v2.getX())).add(u3.getZ().multiply(v3.getX()));
<a class="jxr_linenumber" name="L267" href="#L267">267</a>         array[1][0] = u1.getX().multiply(v1.getY()).add(u2.getX().multiply(v2.getY())).add(u3.getX().multiply(v3.getY()));
<a class="jxr_linenumber" name="L268" href="#L268">268</a>         array[1][1] = u1.getY().multiply(v1.getY()).add(u2.getY().multiply(v2.getY())).add(u3.getY().multiply(v3.getY()));
<a class="jxr_linenumber" name="L269" href="#L269">269</a>         array[1][2] = u1.getZ().multiply(v1.getY()).add(u2.getZ().multiply(v2.getY())).add(u3.getZ().multiply(v3.getY()));
<a class="jxr_linenumber" name="L270" href="#L270">270</a>         array[2][0] = u1.getX().multiply(v1.getZ()).add(u2.getX().multiply(v2.getZ())).add(u3.getX().multiply(v3.getZ()));
<a class="jxr_linenumber" name="L271" href="#L271">271</a>         array[2][1] = u1.getY().multiply(v1.getZ()).add(u2.getY().multiply(v2.getZ())).add(u3.getY().multiply(v3.getZ()));
<a class="jxr_linenumber" name="L272" href="#L272">272</a>         array[2][2] = u1.getZ().multiply(v1.getZ()).add(u2.getZ().multiply(v2.getZ())).add(u3.getZ().multiply(v3.getZ()));
<a class="jxr_linenumber" name="L273" href="#L273">273</a> 
<a class="jxr_linenumber" name="L274" href="#L274">274</a>         T[] quat = mat2quat(array);
<a class="jxr_linenumber" name="L275" href="#L275">275</a>         q0 = quat[0];
<a class="jxr_linenumber" name="L276" href="#L276">276</a>         q1 = quat[1];
<a class="jxr_linenumber" name="L277" href="#L277">277</a>         q2 = quat[2];
<a class="jxr_linenumber" name="L278" href="#L278">278</a>         q3 = quat[3];
<a class="jxr_linenumber" name="L279" href="#L279">279</a> 
<a class="jxr_linenumber" name="L280" href="#L280">280</a>     }
<a class="jxr_linenumber" name="L281" href="#L281">281</a> 
<a class="jxr_linenumber" name="L282" href="#L282">282</a>     <em class="jxr_javadoccomment">/** Build one of the rotations that transform one vector into another one.</em>
<a class="jxr_linenumber" name="L283" href="#L283">283</a> 
<a class="jxr_linenumber" name="L284" href="#L284">284</a> <em class="jxr_javadoccomment">     * &lt;p&gt;Except for a possible scale factor, if the instance were</em>
<a class="jxr_linenumber" name="L285" href="#L285">285</a> <em class="jxr_javadoccomment">     * applied to the vector u it will produce the vector v. There is an</em>
<a class="jxr_linenumber" name="L286" href="#L286">286</a> <em class="jxr_javadoccomment">     * infinite number of such rotations, this constructor choose the</em>
<a class="jxr_linenumber" name="L287" href="#L287">287</a> <em class="jxr_javadoccomment">     * one with the smallest associated angle (i.e. the one whose axis</em>
<a class="jxr_linenumber" name="L288" href="#L288">288</a> <em class="jxr_javadoccomment">     * is orthogonal to the (u, v) plane). If u and v are collinear, an</em>
<a class="jxr_linenumber" name="L289" href="#L289">289</a> <em class="jxr_javadoccomment">     * arbitrary rotation axis is chosen.&lt;/p&gt;</em>
<a class="jxr_linenumber" name="L290" href="#L290">290</a> 
<a class="jxr_linenumber" name="L291" href="#L291">291</a> <em class="jxr_javadoccomment">     * @param u origin vector</em>
<a class="jxr_linenumber" name="L292" href="#L292">292</a> <em class="jxr_javadoccomment">     * @param v desired image of u by the rotation</em>
<a class="jxr_linenumber" name="L293" href="#L293">293</a> <em class="jxr_javadoccomment">     * @exception MathArithmeticException if the norm of one of the vectors is zero</em>
<a class="jxr_linenumber" name="L294" href="#L294">294</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L295" href="#L295">295</a>     <strong class="jxr_keyword">public</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.html">FieldRotation</a>(<strong class="jxr_keyword">final</strong> FieldVector3D&lt;T&gt; u, <strong class="jxr_keyword">final</strong> FieldVector3D&lt;T&gt; v) <strong class="jxr_keyword">throws</strong> MathArithmeticException {
<a class="jxr_linenumber" name="L296" href="#L296">296</a> 
<a class="jxr_linenumber" name="L297" href="#L297">297</a>         <strong class="jxr_keyword">final</strong> T normProduct = u.getNorm().multiply(v.getNorm());
<a class="jxr_linenumber" name="L298" href="#L298">298</a>         <strong class="jxr_keyword">if</strong> (normProduct.getReal() == 0) {
<a class="jxr_linenumber" name="L299" href="#L299">299</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/exception/MathArithmeticException.html">MathArithmeticException</a>(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);
<a class="jxr_linenumber" name="L300" href="#L300">300</a>         }
<a class="jxr_linenumber" name="L301" href="#L301">301</a> 
<a class="jxr_linenumber" name="L302" href="#L302">302</a>         <strong class="jxr_keyword">final</strong> T dot = FieldVector3D.dotProduct(u, v);
<a class="jxr_linenumber" name="L303" href="#L303">303</a> 
<a class="jxr_linenumber" name="L304" href="#L304">304</a>         <strong class="jxr_keyword">if</strong> (dot.getReal() &lt; ((2.0e-15 - 1.0) * normProduct.getReal())) {
<a class="jxr_linenumber" name="L305" href="#L305">305</a>             <em class="jxr_comment">// special case u = -v: we select a PI angle rotation around</em>
<a class="jxr_linenumber" name="L306" href="#L306">306</a>             <em class="jxr_comment">// an arbitrary vector orthogonal to u</em>
<a class="jxr_linenumber" name="L307" href="#L307">307</a>             <strong class="jxr_keyword">final</strong> FieldVector3D&lt;T&gt; w = u.orthogonal();
<a class="jxr_linenumber" name="L308" href="#L308">308</a>             q0 = normProduct.getField().getZero();
<a class="jxr_linenumber" name="L309" href="#L309">309</a>             q1 = w.getX().negate();
<a class="jxr_linenumber" name="L310" href="#L310">310</a>             q2 = w.getY().negate();
<a class="jxr_linenumber" name="L311" href="#L311">311</a>             q3 = w.getZ().negate();
<a class="jxr_linenumber" name="L312" href="#L312">312</a>         } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L313" href="#L313">313</a>             <em class="jxr_comment">// general case: (u, v) defines a plane, we select</em>
<a class="jxr_linenumber" name="L314" href="#L314">314</a>             <em class="jxr_comment">// the shortest possible rotation: axis orthogonal to this plane</em>
<a class="jxr_linenumber" name="L315" href="#L315">315</a>             q0 = dot.divide(normProduct).add(1.0).multiply(0.5).sqrt();
<a class="jxr_linenumber" name="L316" href="#L316">316</a>             <strong class="jxr_keyword">final</strong> T coeff = q0.multiply(normProduct).multiply(2.0).reciprocal();
<a class="jxr_linenumber" name="L317" href="#L317">317</a>             <strong class="jxr_keyword">final</strong> FieldVector3D&lt;T&gt; q = FieldVector3D.crossProduct(v, u);
<a class="jxr_linenumber" name="L318" href="#L318">318</a>             q1 = coeff.multiply(q.getX());
<a class="jxr_linenumber" name="L319" href="#L319">319</a>             q2 = coeff.multiply(q.getY());
<a class="jxr_linenumber" name="L320" href="#L320">320</a>             q3 = coeff.multiply(q.getZ());
<a class="jxr_linenumber" name="L321" href="#L321">321</a>         }
<a class="jxr_linenumber" name="L322" href="#L322">322</a> 
<a class="jxr_linenumber" name="L323" href="#L323">323</a>     }
<a class="jxr_linenumber" name="L324" href="#L324">324</a> 
<a class="jxr_linenumber" name="L325" href="#L325">325</a>     <em class="jxr_javadoccomment">/** Build a rotation from three Cardan or Euler elementary rotations.</em>
<a class="jxr_linenumber" name="L326" href="#L326">326</a> 
<a class="jxr_linenumber" name="L327" href="#L327">327</a> <em class="jxr_javadoccomment">     * &lt;p&gt;Cardan rotations are three successive rotations around the</em>
<a class="jxr_linenumber" name="L328" href="#L328">328</a> <em class="jxr_javadoccomment">     * canonical axes X, Y and Z, each axis being used once. There are</em>
<a class="jxr_linenumber" name="L329" href="#L329">329</a> <em class="jxr_javadoccomment">     * 6 such sets of rotations (XYZ, XZY, YXZ, YZX, ZXY and ZYX). Euler</em>
<a class="jxr_linenumber" name="L330" href="#L330">330</a> <em class="jxr_javadoccomment">     * rotations are three successive rotations around the canonical</em>
<a class="jxr_linenumber" name="L331" href="#L331">331</a> <em class="jxr_javadoccomment">     * axes X, Y and Z, the first and last rotations being around the</em>
<a class="jxr_linenumber" name="L332" href="#L332">332</a> <em class="jxr_javadoccomment">     * same axis. There are 6 such sets of rotations (XYX, XZX, YXY,</em>
<a class="jxr_linenumber" name="L333" href="#L333">333</a> <em class="jxr_javadoccomment">     * YZY, ZXZ and ZYZ), the most popular one being ZXZ.&lt;/p&gt;</em>
<a class="jxr_linenumber" name="L334" href="#L334">334</a> <em class="jxr_javadoccomment">     * &lt;p&gt;Beware that many people routinely use the term Euler angles even</em>
<a class="jxr_linenumber" name="L335" href="#L335">335</a> <em class="jxr_javadoccomment">     * for what really are Cardan angles (this confusion is especially</em>
<a class="jxr_linenumber" name="L336" href="#L336">336</a> <em class="jxr_javadoccomment">     * widespread in the aerospace business where Roll, Pitch and Yaw angles</em>
<a class="jxr_linenumber" name="L337" href="#L337">337</a> <em class="jxr_javadoccomment">     * are often wrongly tagged as Euler angles).&lt;/p&gt;</em>
<a class="jxr_linenumber" name="L338" href="#L338">338</a> 
<a class="jxr_linenumber" name="L339" href="#L339">339</a> <em class="jxr_javadoccomment">     * @param order order of rotations to use</em>
<a class="jxr_linenumber" name="L340" href="#L340">340</a> <em class="jxr_javadoccomment">     * @param alpha1 angle of the first elementary rotation</em>
<a class="jxr_linenumber" name="L341" href="#L341">341</a> <em class="jxr_javadoccomment">     * @param alpha2 angle of the second elementary rotation</em>
<a class="jxr_linenumber" name="L342" href="#L342">342</a> <em class="jxr_javadoccomment">     * @param alpha3 angle of the third elementary rotation</em>
<a class="jxr_linenumber" name="L343" href="#L343">343</a> <em class="jxr_javadoccomment">     * @deprecated as of 3.6, replaced with {@link</em>
<a class="jxr_linenumber" name="L344" href="#L344">344</a> <em class="jxr_javadoccomment">     * #FieldRotation(RotationOrder, RotationConvention,</em>
<a class="jxr_linenumber" name="L345" href="#L345">345</a> <em class="jxr_javadoccomment">     * RealFieldElement, RealFieldElement, RealFieldElement)}</em>
<a class="jxr_linenumber" name="L346" href="#L346">346</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L347" href="#L347">347</a>     @Deprecated
<a class="jxr_linenumber" name="L348" href="#L348">348</a>     <strong class="jxr_keyword">public</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.html">FieldRotation</a>(<strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/RotationOrder.html">RotationOrder</a> order, <strong class="jxr_keyword">final</strong> T alpha1, <strong class="jxr_keyword">final</strong> T alpha2, <strong class="jxr_keyword">final</strong> T alpha3) {
<a class="jxr_linenumber" name="L349" href="#L349">349</a>         <strong class="jxr_keyword">this</strong>(order, RotationConvention.VECTOR_OPERATOR, alpha1, alpha2, alpha3);
<a class="jxr_linenumber" name="L350" href="#L350">350</a>     }
<a class="jxr_linenumber" name="L351" href="#L351">351</a> 
<a class="jxr_linenumber" name="L352" href="#L352">352</a>     <em class="jxr_javadoccomment">/** Build a rotation from three Cardan or Euler elementary rotations.</em>
<a class="jxr_linenumber" name="L353" href="#L353">353</a> 
<a class="jxr_linenumber" name="L354" href="#L354">354</a> <em class="jxr_javadoccomment">     * &lt;p&gt;Cardan rotations are three successive rotations around the</em>
<a class="jxr_linenumber" name="L355" href="#L355">355</a> <em class="jxr_javadoccomment">     * canonical axes X, Y and Z, each axis being used once. There are</em>
<a class="jxr_linenumber" name="L356" href="#L356">356</a> <em class="jxr_javadoccomment">     * 6 such sets of rotations (XYZ, XZY, YXZ, YZX, ZXY and ZYX). Euler</em>
<a class="jxr_linenumber" name="L357" href="#L357">357</a> <em class="jxr_javadoccomment">     * rotations are three successive rotations around the canonical</em>
<a class="jxr_linenumber" name="L358" href="#L358">358</a> <em class="jxr_javadoccomment">     * axes X, Y and Z, the first and last rotations being around the</em>
<a class="jxr_linenumber" name="L359" href="#L359">359</a> <em class="jxr_javadoccomment">     * same axis. There are 6 such sets of rotations (XYX, XZX, YXY,</em>
<a class="jxr_linenumber" name="L360" href="#L360">360</a> <em class="jxr_javadoccomment">     * YZY, ZXZ and ZYZ), the most popular one being ZXZ.&lt;/p&gt;</em>
<a class="jxr_linenumber" name="L361" href="#L361">361</a> <em class="jxr_javadoccomment">     * &lt;p&gt;Beware that many people routinely use the term Euler angles even</em>
<a class="jxr_linenumber" name="L362" href="#L362">362</a> <em class="jxr_javadoccomment">     * for what really are Cardan angles (this confusion is especially</em>
<a class="jxr_linenumber" name="L363" href="#L363">363</a> <em class="jxr_javadoccomment">     * widespread in the aerospace business where Roll, Pitch and Yaw angles</em>
<a class="jxr_linenumber" name="L364" href="#L364">364</a> <em class="jxr_javadoccomment">     * are often wrongly tagged as Euler angles).&lt;/p&gt;</em>
<a class="jxr_linenumber" name="L365" href="#L365">365</a> 
<a class="jxr_linenumber" name="L366" href="#L366">366</a> <em class="jxr_javadoccomment">     * @param order order of rotations to compose, from left to right</em>
<a class="jxr_linenumber" name="L367" href="#L367">367</a> <em class="jxr_javadoccomment">     * (i.e. we will use {@code r1.compose(r2.compose(r3, convention), convention)})</em>
<a class="jxr_linenumber" name="L368" href="#L368">368</a> <em class="jxr_javadoccomment">     * @param convention convention to use for the semantics of the angle</em>
<a class="jxr_linenumber" name="L369" href="#L369">369</a> <em class="jxr_javadoccomment">     * @param alpha1 angle of the first elementary rotation</em>
<a class="jxr_linenumber" name="L370" href="#L370">370</a> <em class="jxr_javadoccomment">     * @param alpha2 angle of the second elementary rotation</em>
<a class="jxr_linenumber" name="L371" href="#L371">371</a> <em class="jxr_javadoccomment">     * @param alpha3 angle of the third elementary rotation</em>
<a class="jxr_linenumber" name="L372" href="#L372">372</a> <em class="jxr_javadoccomment">     * @since 3.6</em>
<a class="jxr_linenumber" name="L373" href="#L373">373</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L374" href="#L374">374</a>     <strong class="jxr_keyword">public</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.html">FieldRotation</a>(<strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/RotationOrder.html">RotationOrder</a> order, <strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/RotationConvention.html">RotationConvention</a> convention,
<a class="jxr_linenumber" name="L375" href="#L375">375</a>                          <strong class="jxr_keyword">final</strong> T alpha1, <strong class="jxr_keyword">final</strong> T alpha2, <strong class="jxr_keyword">final</strong> T alpha3) {
<a class="jxr_linenumber" name="L376" href="#L376">376</a>         <strong class="jxr_keyword">final</strong> T one = alpha1.getField().getOne();
<a class="jxr_linenumber" name="L377" href="#L377">377</a>         <strong class="jxr_keyword">final</strong> FieldRotation&lt;T&gt; r1 = <strong class="jxr_keyword">new</strong> FieldRotation&lt;T&gt;(<strong class="jxr_keyword">new</strong> FieldVector3D&lt;T&gt;(one, order.getA1()), alpha1, convention);
<a class="jxr_linenumber" name="L378" href="#L378">378</a>         <strong class="jxr_keyword">final</strong> FieldRotation&lt;T&gt; r2 = <strong class="jxr_keyword">new</strong> FieldRotation&lt;T&gt;(<strong class="jxr_keyword">new</strong> FieldVector3D&lt;T&gt;(one, order.getA2()), alpha2, convention);
<a class="jxr_linenumber" name="L379" href="#L379">379</a>         <strong class="jxr_keyword">final</strong> FieldRotation&lt;T&gt; r3 = <strong class="jxr_keyword">new</strong> FieldRotation&lt;T&gt;(<strong class="jxr_keyword">new</strong> FieldVector3D&lt;T&gt;(one, order.getA3()), alpha3, convention);
<a class="jxr_linenumber" name="L380" href="#L380">380</a>         <strong class="jxr_keyword">final</strong> FieldRotation&lt;T&gt; composed = r1.compose(r2.compose(r3, convention), convention);
<a class="jxr_linenumber" name="L381" href="#L381">381</a>         q0 = composed.q0;
<a class="jxr_linenumber" name="L382" href="#L382">382</a>         q1 = composed.q1;
<a class="jxr_linenumber" name="L383" href="#L383">383</a>         q2 = composed.q2;
<a class="jxr_linenumber" name="L384" href="#L384">384</a>         q3 = composed.q3;
<a class="jxr_linenumber" name="L385" href="#L385">385</a>     }
<a class="jxr_linenumber" name="L386" href="#L386">386</a> 
<a class="jxr_linenumber" name="L387" href="#L387">387</a>     <em class="jxr_javadoccomment">/** Convert an orthogonal rotation matrix to a quaternion.</em>
<a class="jxr_linenumber" name="L388" href="#L388">388</a> <em class="jxr_javadoccomment">     * @param ort orthogonal rotation matrix</em>
<a class="jxr_linenumber" name="L389" href="#L389">389</a> <em class="jxr_javadoccomment">     * @return quaternion corresponding to the matrix</em>
<a class="jxr_linenumber" name="L390" href="#L390">390</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L391" href="#L391">391</a>     <strong class="jxr_keyword">private</strong> T[] mat2quat(<strong class="jxr_keyword">final</strong> T[][] ort) {
<a class="jxr_linenumber" name="L392" href="#L392">392</a> 
<a class="jxr_linenumber" name="L393" href="#L393">393</a>         <strong class="jxr_keyword">final</strong> T[] quat = MathArrays.buildArray(ort[0][0].getField(), 4);
<a class="jxr_linenumber" name="L394" href="#L394">394</a> 
<a class="jxr_linenumber" name="L395" href="#L395">395</a>         <em class="jxr_comment">// There are different ways to compute the quaternions elements</em>
<a class="jxr_linenumber" name="L396" href="#L396">396</a>         <em class="jxr_comment">// from the matrix. They all involve computing one element from</em>
<a class="jxr_linenumber" name="L397" href="#L397">397</a>         <em class="jxr_comment">// the diagonal of the matrix, and computing the three other ones</em>
<a class="jxr_linenumber" name="L398" href="#L398">398</a>         <em class="jxr_comment">// using a formula involving a division by the first element,</em>
<a class="jxr_linenumber" name="L399" href="#L399">399</a>         <em class="jxr_comment">// which unfortunately can be zero. Since the norm of the</em>
<a class="jxr_linenumber" name="L400" href="#L400">400</a>         <em class="jxr_comment">// quaternion is 1, we know at least one element has an absolute</em>
<a class="jxr_linenumber" name="L401" href="#L401">401</a>         <em class="jxr_comment">// value greater or equal to 0.5, so it is always possible to</em>
<a class="jxr_linenumber" name="L402" href="#L402">402</a>         <em class="jxr_comment">// select the right formula and avoid division by zero and even</em>
<a class="jxr_linenumber" name="L403" href="#L403">403</a>         <em class="jxr_comment">// numerical inaccuracy. Checking the elements in turn and using</em>
<a class="jxr_linenumber" name="L404" href="#L404">404</a>         <em class="jxr_comment">// the first one greater than 0.45 is safe (this leads to a simple</em>
<a class="jxr_linenumber" name="L405" href="#L405">405</a>         <em class="jxr_comment">// test since qi = 0.45 implies 4 qi^2 - 1 = -0.19)</em>
<a class="jxr_linenumber" name="L406" href="#L406">406</a>         T s = ort[0][0].add(ort[1][1]).add(ort[2][2]);
<a class="jxr_linenumber" name="L407" href="#L407">407</a>         <strong class="jxr_keyword">if</strong> (s.getReal() &gt; -0.19) {
<a class="jxr_linenumber" name="L408" href="#L408">408</a>             <em class="jxr_comment">// compute q0 and deduce q1, q2 and q3</em>
<a class="jxr_linenumber" name="L409" href="#L409">409</a>             quat[0] = s.add(1.0).sqrt().multiply(0.5);
<a class="jxr_linenumber" name="L410" href="#L410">410</a>             T inv = quat[0].reciprocal().multiply(0.25);
<a class="jxr_linenumber" name="L411" href="#L411">411</a>             quat[1] = inv.multiply(ort[1][2].subtract(ort[2][1]));
<a class="jxr_linenumber" name="L412" href="#L412">412</a>             quat[2] = inv.multiply(ort[2][0].subtract(ort[0][2]));
<a class="jxr_linenumber" name="L413" href="#L413">413</a>             quat[3] = inv.multiply(ort[0][1].subtract(ort[1][0]));
<a class="jxr_linenumber" name="L414" href="#L414">414</a>         } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L415" href="#L415">415</a>             s = ort[0][0].subtract(ort[1][1]).subtract(ort[2][2]);
<a class="jxr_linenumber" name="L416" href="#L416">416</a>             <strong class="jxr_keyword">if</strong> (s.getReal() &gt; -0.19) {
<a class="jxr_linenumber" name="L417" href="#L417">417</a>                 <em class="jxr_comment">// compute q1 and deduce q0, q2 and q3</em>
<a class="jxr_linenumber" name="L418" href="#L418">418</a>                 quat[1] = s.add(1.0).sqrt().multiply(0.5);
<a class="jxr_linenumber" name="L419" href="#L419">419</a>                 T inv = quat[1].reciprocal().multiply(0.25);
<a class="jxr_linenumber" name="L420" href="#L420">420</a>                 quat[0] = inv.multiply(ort[1][2].subtract(ort[2][1]));
<a class="jxr_linenumber" name="L421" href="#L421">421</a>                 quat[2] = inv.multiply(ort[0][1].add(ort[1][0]));
<a class="jxr_linenumber" name="L422" href="#L422">422</a>                 quat[3] = inv.multiply(ort[0][2].add(ort[2][0]));
<a class="jxr_linenumber" name="L423" href="#L423">423</a>             } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L424" href="#L424">424</a>                 s = ort[1][1].subtract(ort[0][0]).subtract(ort[2][2]);
<a class="jxr_linenumber" name="L425" href="#L425">425</a>                 <strong class="jxr_keyword">if</strong> (s.getReal() &gt; -0.19) {
<a class="jxr_linenumber" name="L426" href="#L426">426</a>                     <em class="jxr_comment">// compute q2 and deduce q0, q1 and q3</em>
<a class="jxr_linenumber" name="L427" href="#L427">427</a>                     quat[2] = s.add(1.0).sqrt().multiply(0.5);
<a class="jxr_linenumber" name="L428" href="#L428">428</a>                     T inv = quat[2].reciprocal().multiply(0.25);
<a class="jxr_linenumber" name="L429" href="#L429">429</a>                     quat[0] = inv.multiply(ort[2][0].subtract(ort[0][2]));
<a class="jxr_linenumber" name="L430" href="#L430">430</a>                     quat[1] = inv.multiply(ort[0][1].add(ort[1][0]));
<a class="jxr_linenumber" name="L431" href="#L431">431</a>                     quat[3] = inv.multiply(ort[2][1].add(ort[1][2]));
<a class="jxr_linenumber" name="L432" href="#L432">432</a>                 } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L433" href="#L433">433</a>                     <em class="jxr_comment">// compute q3 and deduce q0, q1 and q2</em>
<a class="jxr_linenumber" name="L434" href="#L434">434</a>                     s = ort[2][2].subtract(ort[0][0]).subtract(ort[1][1]);
<a class="jxr_linenumber" name="L435" href="#L435">435</a>                     quat[3] = s.add(1.0).sqrt().multiply(0.5);
<a class="jxr_linenumber" name="L436" href="#L436">436</a>                     T inv = quat[3].reciprocal().multiply(0.25);
<a class="jxr_linenumber" name="L437" href="#L437">437</a>                     quat[0] = inv.multiply(ort[0][1].subtract(ort[1][0]));
<a class="jxr_linenumber" name="L438" href="#L438">438</a>                     quat[1] = inv.multiply(ort[0][2].add(ort[2][0]));
<a class="jxr_linenumber" name="L439" href="#L439">439</a>                     quat[2] = inv.multiply(ort[2][1].add(ort[1][2]));
<a class="jxr_linenumber" name="L440" href="#L440">440</a>                 }
<a class="jxr_linenumber" name="L441" href="#L441">441</a>             }
<a class="jxr_linenumber" name="L442" href="#L442">442</a>         }
<a class="jxr_linenumber" name="L443" href="#L443">443</a> 
<a class="jxr_linenumber" name="L444" href="#L444">444</a>         <strong class="jxr_keyword">return</strong> quat;
<a class="jxr_linenumber" name="L445" href="#L445">445</a> 
<a class="jxr_linenumber" name="L446" href="#L446">446</a>     }
<a class="jxr_linenumber" name="L447" href="#L447">447</a> 
<a class="jxr_linenumber" name="L448" href="#L448">448</a>     <em class="jxr_javadoccomment">/** Revert a rotation.</em>
<a class="jxr_linenumber" name="L449" href="#L449">449</a> <em class="jxr_javadoccomment">     * Build a rotation which reverse the effect of another</em>
<a class="jxr_linenumber" name="L450" href="#L450">450</a> <em class="jxr_javadoccomment">     * rotation. This means that if r(u) = v, then r.revert(v) = u. The</em>
<a class="jxr_linenumber" name="L451" href="#L451">451</a> <em class="jxr_javadoccomment">     * instance is not changed.</em>
<a class="jxr_linenumber" name="L452" href="#L452">452</a> <em class="jxr_javadoccomment">     * @return a new rotation whose effect is the reverse of the effect</em>
<a class="jxr_linenumber" name="L453" href="#L453">453</a> <em class="jxr_javadoccomment">     * of the instance</em>
<a class="jxr_linenumber" name="L454" href="#L454">454</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L455" href="#L455">455</a>     <strong class="jxr_keyword">public</strong> FieldRotation&lt;T&gt; revert() {
<a class="jxr_linenumber" name="L456" href="#L456">456</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> FieldRotation&lt;T&gt;(q0.negate(), q1, q2, q3, false);
<a class="jxr_linenumber" name="L457" href="#L457">457</a>     }
<a class="jxr_linenumber" name="L458" href="#L458">458</a> 
<a class="jxr_linenumber" name="L459" href="#L459">459</a>     <em class="jxr_javadoccomment">/** Get the scalar coordinate of the quaternion.</em>
<a class="jxr_linenumber" name="L460" href="#L460">460</a> <em class="jxr_javadoccomment">     * @return scalar coordinate of the quaternion</em>
<a class="jxr_linenumber" name="L461" href="#L461">461</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L462" href="#L462">462</a>     <strong class="jxr_keyword">public</strong> T getQ0() {
<a class="jxr_linenumber" name="L463" href="#L463">463</a>         <strong class="jxr_keyword">return</strong> q0;
<a class="jxr_linenumber" name="L464" href="#L464">464</a>     }
<a class="jxr_linenumber" name="L465" href="#L465">465</a> 
<a class="jxr_linenumber" name="L466" href="#L466">466</a>     <em class="jxr_javadoccomment">/** Get the first coordinate of the vectorial part of the quaternion.</em>
<a class="jxr_linenumber" name="L467" href="#L467">467</a> <em class="jxr_javadoccomment">     * @return first coordinate of the vectorial part of the quaternion</em>
<a class="jxr_linenumber" name="L468" href="#L468">468</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L469" href="#L469">469</a>     <strong class="jxr_keyword">public</strong> T getQ1() {
<a class="jxr_linenumber" name="L470" href="#L470">470</a>         <strong class="jxr_keyword">return</strong> q1;
<a class="jxr_linenumber" name="L471" href="#L471">471</a>     }
<a class="jxr_linenumber" name="L472" href="#L472">472</a> 
<a class="jxr_linenumber" name="L473" href="#L473">473</a>     <em class="jxr_javadoccomment">/** Get the second coordinate of the vectorial part of the quaternion.</em>
<a class="jxr_linenumber" name="L474" href="#L474">474</a> <em class="jxr_javadoccomment">     * @return second coordinate of the vectorial part of the quaternion</em>
<a class="jxr_linenumber" name="L475" href="#L475">475</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L476" href="#L476">476</a>     <strong class="jxr_keyword">public</strong> T getQ2() {
<a class="jxr_linenumber" name="L477" href="#L477">477</a>         <strong class="jxr_keyword">return</strong> q2;
<a class="jxr_linenumber" name="L478" href="#L478">478</a>     }
<a class="jxr_linenumber" name="L479" href="#L479">479</a> 
<a class="jxr_linenumber" name="L480" href="#L480">480</a>     <em class="jxr_javadoccomment">/** Get the third coordinate of the vectorial part of the quaternion.</em>
<a class="jxr_linenumber" name="L481" href="#L481">481</a> <em class="jxr_javadoccomment">     * @return third coordinate of the vectorial part of the quaternion</em>
<a class="jxr_linenumber" name="L482" href="#L482">482</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L483" href="#L483">483</a>     <strong class="jxr_keyword">public</strong> T getQ3() {
<a class="jxr_linenumber" name="L484" href="#L484">484</a>         <strong class="jxr_keyword">return</strong> q3;
<a class="jxr_linenumber" name="L485" href="#L485">485</a>     }
<a class="jxr_linenumber" name="L486" href="#L486">486</a> 
<a class="jxr_linenumber" name="L487" href="#L487">487</a>     <em class="jxr_javadoccomment">/** Get the normalized axis of the rotation.</em>
<a class="jxr_linenumber" name="L488" href="#L488">488</a> <em class="jxr_javadoccomment">     * @return normalized axis of the rotation</em>
<a class="jxr_linenumber" name="L489" href="#L489">489</a> <em class="jxr_javadoccomment">     * @see #FieldRotation(FieldVector3D, RealFieldElement)</em>
<a class="jxr_linenumber" name="L490" href="#L490">490</a> <em class="jxr_javadoccomment">     * @deprecated as of 3.6, replaced with {@link #getAxis(RotationConvention)}</em>
<a class="jxr_linenumber" name="L491" href="#L491">491</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L492" href="#L492">492</a>     @Deprecated
<a class="jxr_linenumber" name="L493" href="#L493">493</a>     <strong class="jxr_keyword">public</strong> FieldVector3D&lt;T&gt; getAxis() {
<a class="jxr_linenumber" name="L494" href="#L494">494</a>         <strong class="jxr_keyword">return</strong> getAxis(RotationConvention.VECTOR_OPERATOR);
<a class="jxr_linenumber" name="L495" href="#L495">495</a>     }
<a class="jxr_linenumber" name="L496" href="#L496">496</a> 
<a class="jxr_linenumber" name="L497" href="#L497">497</a>     <em class="jxr_javadoccomment">/** Get the normalized axis of the rotation.</em>
<a class="jxr_linenumber" name="L498" href="#L498">498</a> <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L499" href="#L499">499</a> <em class="jxr_javadoccomment">     * Note that as {@link #getAngle()} always returns an angle</em>
<a class="jxr_linenumber" name="L500" href="#L500">500</a> <em class="jxr_javadoccomment">     * between 0 and &amp;pi;, changing the convention changes the</em>
<a class="jxr_linenumber" name="L501" href="#L501">501</a> <em class="jxr_javadoccomment">     * direction of the axis, not the sign of the angle.</em>
<a class="jxr_linenumber" name="L502" href="#L502">502</a> <em class="jxr_javadoccomment">     * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L503" href="#L503">503</a> <em class="jxr_javadoccomment">     * @param convention convention to use for the semantics of the angle</em>
<a class="jxr_linenumber" name="L504" href="#L504">504</a> <em class="jxr_javadoccomment">     * @return normalized axis of the rotation</em>
<a class="jxr_linenumber" name="L505" href="#L505">505</a> <em class="jxr_javadoccomment">     * @see #FieldRotation(FieldVector3D, RealFieldElement)</em>
<a class="jxr_linenumber" name="L506" href="#L506">506</a> <em class="jxr_javadoccomment">     * @since 3.6</em>
<a class="jxr_linenumber" name="L507" href="#L507">507</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L508" href="#L508">508</a>     <strong class="jxr_keyword">public</strong> FieldVector3D&lt;T&gt; getAxis(<strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/RotationConvention.html">RotationConvention</a> convention) {
<a class="jxr_linenumber" name="L509" href="#L509">509</a>         <strong class="jxr_keyword">final</strong> T squaredSine = q1.multiply(q1).add(q2.multiply(q2)).add(q3.multiply(q3));
<a class="jxr_linenumber" name="L510" href="#L510">510</a>         <strong class="jxr_keyword">if</strong> (squaredSine.getReal() == 0) {
<a class="jxr_linenumber" name="L511" href="#L511">511</a>             <strong class="jxr_keyword">final</strong> Field&lt;T&gt; field = squaredSine.getField();
<a class="jxr_linenumber" name="L512" href="#L512">512</a>             <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> FieldVector3D&lt;T&gt;(convention == RotationConvention.VECTOR_OPERATOR ? field.getOne(): field.getOne().negate(),
<a class="jxr_linenumber" name="L513" href="#L513">513</a>                                         field.getZero(),
<a class="jxr_linenumber" name="L514" href="#L514">514</a>                                         field.getZero());
<a class="jxr_linenumber" name="L515" href="#L515">515</a>         } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L516" href="#L516">516</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> sgn = convention == RotationConvention.VECTOR_OPERATOR ? +1 : -1;
<a class="jxr_linenumber" name="L517" href="#L517">517</a>             <strong class="jxr_keyword">if</strong> (q0.getReal() &lt; 0) {
<a class="jxr_linenumber" name="L518" href="#L518">518</a>                 T inverse = squaredSine.sqrt().reciprocal().multiply(sgn);
<a class="jxr_linenumber" name="L519" href="#L519">519</a>                 <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> FieldVector3D&lt;T&gt;(q1.multiply(inverse), q2.multiply(inverse), q3.multiply(inverse));
<a class="jxr_linenumber" name="L520" href="#L520">520</a>             }
<a class="jxr_linenumber" name="L521" href="#L521">521</a>             <strong class="jxr_keyword">final</strong> T inverse = squaredSine.sqrt().reciprocal().negate().multiply(sgn);
<a class="jxr_linenumber" name="L522" href="#L522">522</a>             <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> FieldVector3D&lt;T&gt;(q1.multiply(inverse), q2.multiply(inverse), q3.multiply(inverse));
<a class="jxr_linenumber" name="L523" href="#L523">523</a>         }
<a class="jxr_linenumber" name="L524" href="#L524">524</a>     }
<a class="jxr_linenumber" name="L525" href="#L525">525</a> 
<a class="jxr_linenumber" name="L526" href="#L526">526</a>     <em class="jxr_javadoccomment">/** Get the angle of the rotation.</em>
<a class="jxr_linenumber" name="L527" href="#L527">527</a> <em class="jxr_javadoccomment">     * @return angle of the rotation (between 0 and &amp;pi;)</em>
<a class="jxr_linenumber" name="L528" href="#L528">528</a> <em class="jxr_javadoccomment">     * @see #FieldRotation(FieldVector3D, RealFieldElement)</em>
<a class="jxr_linenumber" name="L529" href="#L529">529</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L530" href="#L530">530</a>     <strong class="jxr_keyword">public</strong> T getAngle() {
<a class="jxr_linenumber" name="L531" href="#L531">531</a>         <strong class="jxr_keyword">if</strong> ((q0.getReal() &lt; -0.1) || (q0.getReal() &gt; 0.1)) {
<a class="jxr_linenumber" name="L532" href="#L532">532</a>             <strong class="jxr_keyword">return</strong> q1.multiply(q1).add(q2.multiply(q2)).add(q3.multiply(q3)).sqrt().asin().multiply(2);
<a class="jxr_linenumber" name="L533" href="#L533">533</a>         } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (q0.getReal() &lt; 0) {
<a class="jxr_linenumber" name="L534" href="#L534">534</a>             <strong class="jxr_keyword">return</strong> q0.negate().acos().multiply(2);
<a class="jxr_linenumber" name="L535" href="#L535">535</a>         }
<a class="jxr_linenumber" name="L536" href="#L536">536</a>         <strong class="jxr_keyword">return</strong> q0.acos().multiply(2);
<a class="jxr_linenumber" name="L537" href="#L537">537</a>     }
<a class="jxr_linenumber" name="L538" href="#L538">538</a> 
<a class="jxr_linenumber" name="L539" href="#L539">539</a>     <em class="jxr_javadoccomment">/** Get the Cardan or Euler angles corresponding to the instance.</em>
<a class="jxr_linenumber" name="L540" href="#L540">540</a> 
<a class="jxr_linenumber" name="L541" href="#L541">541</a> <em class="jxr_javadoccomment">     * &lt;p&gt;The equations show that each rotation can be defined by two</em>
<a class="jxr_linenumber" name="L542" href="#L542">542</a> <em class="jxr_javadoccomment">     * different values of the Cardan or Euler angles set. For example</em>
<a class="jxr_linenumber" name="L543" href="#L543">543</a> <em class="jxr_javadoccomment">     * if Cardan angles are used, the rotation defined by the angles</em>
<a class="jxr_linenumber" name="L544" href="#L544">544</a> <em class="jxr_javadoccomment">     * a&lt;sub&gt;1&lt;/sub&gt;, a&lt;sub&gt;2&lt;/sub&gt; and a&lt;sub&gt;3&lt;/sub&gt; is the same as</em>
<a class="jxr_linenumber" name="L545" href="#L545">545</a> <em class="jxr_javadoccomment">     * the rotation defined by the angles &amp;pi; + a&lt;sub&gt;1&lt;/sub&gt;, &amp;pi;</em>
<a class="jxr_linenumber" name="L546" href="#L546">546</a> <em class="jxr_javadoccomment">     * - a&lt;sub&gt;2&lt;/sub&gt; and &amp;pi; + a&lt;sub&gt;3&lt;/sub&gt;. This method implements</em>
<a class="jxr_linenumber" name="L547" href="#L547">547</a> <em class="jxr_javadoccomment">     * the following arbitrary choices:&lt;/p&gt;</em>
<a class="jxr_linenumber" name="L548" href="#L548">548</a> <em class="jxr_javadoccomment">     * &lt;ul&gt;</em>
<a class="jxr_linenumber" name="L549" href="#L549">549</a> <em class="jxr_javadoccomment">     *   &lt;li&gt;for Cardan angles, the chosen set is the one for which the</em>
<a class="jxr_linenumber" name="L550" href="#L550">550</a> <em class="jxr_javadoccomment">     *   second angle is between -&amp;pi;/2 and &amp;pi;/2 (i.e its cosine is</em>
<a class="jxr_linenumber" name="L551" href="#L551">551</a> <em class="jxr_javadoccomment">     *   positive),&lt;/li&gt;</em>
<a class="jxr_linenumber" name="L552" href="#L552">552</a> <em class="jxr_javadoccomment">     *   &lt;li&gt;for Euler angles, the chosen set is the one for which the</em>
<a class="jxr_linenumber" name="L553" href="#L553">553</a> <em class="jxr_javadoccomment">     *   second angle is between 0 and &amp;pi; (i.e its sine is positive).&lt;/li&gt;</em>
<a class="jxr_linenumber" name="L554" href="#L554">554</a> <em class="jxr_javadoccomment">     * &lt;/ul&gt;</em>
<a class="jxr_linenumber" name="L555" href="#L555">555</a> 
<a class="jxr_linenumber" name="L556" href="#L556">556</a> <em class="jxr_javadoccomment">     * &lt;p&gt;Cardan and Euler angle have a very disappointing drawback: all</em>
<a class="jxr_linenumber" name="L557" href="#L557">557</a> <em class="jxr_javadoccomment">     * of them have singularities. This means that if the instance is</em>
<a class="jxr_linenumber" name="L558" href="#L558">558</a> <em class="jxr_javadoccomment">     * too close to the singularities corresponding to the given</em>
<a class="jxr_linenumber" name="L559" href="#L559">559</a> <em class="jxr_javadoccomment">     * rotation order, it will be impossible to retrieve the angles. For</em>
<a class="jxr_linenumber" name="L560" href="#L560">560</a> <em class="jxr_javadoccomment">     * Cardan angles, this is often called gimbal lock. There is</em>
<a class="jxr_linenumber" name="L561" href="#L561">561</a> <em class="jxr_javadoccomment">     * &lt;em&gt;nothing&lt;/em&gt; to do to prevent this, it is an intrinsic problem</em>
<a class="jxr_linenumber" name="L562" href="#L562">562</a> <em class="jxr_javadoccomment">     * with Cardan and Euler representation (but not a problem with the</em>
<a class="jxr_linenumber" name="L563" href="#L563">563</a> <em class="jxr_javadoccomment">     * rotation itself, which is perfectly well defined). For Cardan</em>
<a class="jxr_linenumber" name="L564" href="#L564">564</a> <em class="jxr_javadoccomment">     * angles, singularities occur when the second angle is close to</em>
<a class="jxr_linenumber" name="L565" href="#L565">565</a> <em class="jxr_javadoccomment">     * -&amp;pi;/2 or +&amp;pi;/2, for Euler angle singularities occur when the</em>
<a class="jxr_linenumber" name="L566" href="#L566">566</a> <em class="jxr_javadoccomment">     * second angle is close to 0 or &amp;pi;, this implies that the identity</em>
<a class="jxr_linenumber" name="L567" href="#L567">567</a> <em class="jxr_javadoccomment">     * rotation is always singular for Euler angles!&lt;/p&gt;</em>
<a class="jxr_linenumber" name="L568" href="#L568">568</a> 
<a class="jxr_linenumber" name="L569" href="#L569">569</a> <em class="jxr_javadoccomment">     * @param order rotation order to use</em>
<a class="jxr_linenumber" name="L570" href="#L570">570</a> <em class="jxr_javadoccomment">     * @return an array of three angles, in the order specified by the set</em>
<a class="jxr_linenumber" name="L571" href="#L571">571</a> <em class="jxr_javadoccomment">     * @exception CardanEulerSingularityException if the rotation is</em>
<a class="jxr_linenumber" name="L572" href="#L572">572</a> <em class="jxr_javadoccomment">     * singular with respect to the angles set specified</em>
<a class="jxr_linenumber" name="L573" href="#L573">573</a> <em class="jxr_javadoccomment">     * @deprecated as of 3.6, replaced with {@link #getAngles(RotationOrder, RotationConvention)}</em>
<a class="jxr_linenumber" name="L574" href="#L574">574</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L575" href="#L575">575</a>     @Deprecated
<a class="jxr_linenumber" name="L576" href="#L576">576</a>     <strong class="jxr_keyword">public</strong> T[] getAngles(<strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/RotationOrder.html">RotationOrder</a> order)
<a class="jxr_linenumber" name="L577" href="#L577">577</a>         <strong class="jxr_keyword">throws</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/CardanEulerSingularityException.html">CardanEulerSingularityException</a> {
<a class="jxr_linenumber" name="L578" href="#L578">578</a>         <strong class="jxr_keyword">return</strong> getAngles(order, RotationConvention.VECTOR_OPERATOR);
<a class="jxr_linenumber" name="L579" href="#L579">579</a>     }
<a class="jxr_linenumber" name="L580" href="#L580">580</a> 
<a class="jxr_linenumber" name="L581" href="#L581">581</a>     <em class="jxr_javadoccomment">/** Get the Cardan or Euler angles corresponding to the instance.</em>
<a class="jxr_linenumber" name="L582" href="#L582">582</a> 
<a class="jxr_linenumber" name="L583" href="#L583">583</a> <em class="jxr_javadoccomment">     * &lt;p&gt;The equations show that each rotation can be defined by two</em>
<a class="jxr_linenumber" name="L584" href="#L584">584</a> <em class="jxr_javadoccomment">     * different values of the Cardan or Euler angles set. For example</em>
<a class="jxr_linenumber" name="L585" href="#L585">585</a> <em class="jxr_javadoccomment">     * if Cardan angles are used, the rotation defined by the angles</em>
<a class="jxr_linenumber" name="L586" href="#L586">586</a> <em class="jxr_javadoccomment">     * a&lt;sub&gt;1&lt;/sub&gt;, a&lt;sub&gt;2&lt;/sub&gt; and a&lt;sub&gt;3&lt;/sub&gt; is the same as</em>
<a class="jxr_linenumber" name="L587" href="#L587">587</a> <em class="jxr_javadoccomment">     * the rotation defined by the angles &amp;pi; + a&lt;sub&gt;1&lt;/sub&gt;, &amp;pi;</em>
<a class="jxr_linenumber" name="L588" href="#L588">588</a> <em class="jxr_javadoccomment">     * - a&lt;sub&gt;2&lt;/sub&gt; and &amp;pi; + a&lt;sub&gt;3&lt;/sub&gt;. This method implements</em>
<a class="jxr_linenumber" name="L589" href="#L589">589</a> <em class="jxr_javadoccomment">     * the following arbitrary choices:&lt;/p&gt;</em>
<a class="jxr_linenumber" name="L590" href="#L590">590</a> <em class="jxr_javadoccomment">     * &lt;ul&gt;</em>
<a class="jxr_linenumber" name="L591" href="#L591">591</a> <em class="jxr_javadoccomment">     *   &lt;li&gt;for Cardan angles, the chosen set is the one for which the</em>
<a class="jxr_linenumber" name="L592" href="#L592">592</a> <em class="jxr_javadoccomment">     *   second angle is between -&amp;pi;/2 and &amp;pi;/2 (i.e its cosine is</em>
<a class="jxr_linenumber" name="L593" href="#L593">593</a> <em class="jxr_javadoccomment">     *   positive),&lt;/li&gt;</em>
<a class="jxr_linenumber" name="L594" href="#L594">594</a> <em class="jxr_javadoccomment">     *   &lt;li&gt;for Euler angles, the chosen set is the one for which the</em>
<a class="jxr_linenumber" name="L595" href="#L595">595</a> <em class="jxr_javadoccomment">     *   second angle is between 0 and &amp;pi; (i.e its sine is positive).&lt;/li&gt;</em>
<a class="jxr_linenumber" name="L596" href="#L596">596</a> <em class="jxr_javadoccomment">     * &lt;/ul&gt;</em>
<a class="jxr_linenumber" name="L597" href="#L597">597</a> 
<a class="jxr_linenumber" name="L598" href="#L598">598</a> <em class="jxr_javadoccomment">     * &lt;p&gt;Cardan and Euler angle have a very disappointing drawback: all</em>
<a class="jxr_linenumber" name="L599" href="#L599">599</a> <em class="jxr_javadoccomment">     * of them have singularities. This means that if the instance is</em>
<a class="jxr_linenumber" name="L600" href="#L600">600</a> <em class="jxr_javadoccomment">     * too close to the singularities corresponding to the given</em>
<a class="jxr_linenumber" name="L601" href="#L601">601</a> <em class="jxr_javadoccomment">     * rotation order, it will be impossible to retrieve the angles. For</em>
<a class="jxr_linenumber" name="L602" href="#L602">602</a> <em class="jxr_javadoccomment">     * Cardan angles, this is often called gimbal lock. There is</em>
<a class="jxr_linenumber" name="L603" href="#L603">603</a> <em class="jxr_javadoccomment">     * &lt;em&gt;nothing&lt;/em&gt; to do to prevent this, it is an intrinsic problem</em>
<a class="jxr_linenumber" name="L604" href="#L604">604</a> <em class="jxr_javadoccomment">     * with Cardan and Euler representation (but not a problem with the</em>
<a class="jxr_linenumber" name="L605" href="#L605">605</a> <em class="jxr_javadoccomment">     * rotation itself, which is perfectly well defined). For Cardan</em>
<a class="jxr_linenumber" name="L606" href="#L606">606</a> <em class="jxr_javadoccomment">     * angles, singularities occur when the second angle is close to</em>
<a class="jxr_linenumber" name="L607" href="#L607">607</a> <em class="jxr_javadoccomment">     * -&amp;pi;/2 or +&amp;pi;/2, for Euler angle singularities occur when the</em>
<a class="jxr_linenumber" name="L608" href="#L608">608</a> <em class="jxr_javadoccomment">     * second angle is close to 0 or &amp;pi;, this implies that the identity</em>
<a class="jxr_linenumber" name="L609" href="#L609">609</a> <em class="jxr_javadoccomment">     * rotation is always singular for Euler angles!&lt;/p&gt;</em>
<a class="jxr_linenumber" name="L610" href="#L610">610</a> 
<a class="jxr_linenumber" name="L611" href="#L611">611</a> <em class="jxr_javadoccomment">     * @param order rotation order to use</em>
<a class="jxr_linenumber" name="L612" href="#L612">612</a> <em class="jxr_javadoccomment">     * @param convention convention to use for the semantics of the angle</em>
<a class="jxr_linenumber" name="L613" href="#L613">613</a> <em class="jxr_javadoccomment">     * @return an array of three angles, in the order specified by the set</em>
<a class="jxr_linenumber" name="L614" href="#L614">614</a> <em class="jxr_javadoccomment">     * @exception CardanEulerSingularityException if the rotation is</em>
<a class="jxr_linenumber" name="L615" href="#L615">615</a> <em class="jxr_javadoccomment">     * singular with respect to the angles set specified</em>
<a class="jxr_linenumber" name="L616" href="#L616">616</a> <em class="jxr_javadoccomment">     * @since 3.6</em>
<a class="jxr_linenumber" name="L617" href="#L617">617</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L618" href="#L618">618</a>     <strong class="jxr_keyword">public</strong> T[] getAngles(<strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/RotationOrder.html">RotationOrder</a> order, <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/RotationConvention.html">RotationConvention</a> convention)
<a class="jxr_linenumber" name="L619" href="#L619">619</a>         <strong class="jxr_keyword">throws</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/CardanEulerSingularityException.html">CardanEulerSingularityException</a> {
<a class="jxr_linenumber" name="L620" href="#L620">620</a> 
<a class="jxr_linenumber" name="L621" href="#L621">621</a>         <strong class="jxr_keyword">if</strong> (convention == RotationConvention.VECTOR_OPERATOR) {
<a class="jxr_linenumber" name="L622" href="#L622">622</a>             <strong class="jxr_keyword">if</strong> (order == RotationOrder.XYZ) {
<a class="jxr_linenumber" name="L623" href="#L623">623</a> 
<a class="jxr_linenumber" name="L624" href="#L624">624</a>                 <em class="jxr_comment">// r (+K) coordinates are :</em>
<a class="jxr_linenumber" name="L625" href="#L625">625</a>                 <em class="jxr_comment">//  sin (theta), -cos (theta) sin (phi), cos (theta) cos (phi)</em>
<a class="jxr_linenumber" name="L626" href="#L626">626</a>                 <em class="jxr_comment">// (-r) (+I) coordinates are :</em>
<a class="jxr_linenumber" name="L627" href="#L627">627</a>                 <em class="jxr_comment">// cos (psi) cos (theta), -sin (psi) cos (theta), sin (theta)</em>
<a class="jxr_linenumber" name="L628" href="#L628">628</a>                 <strong class="jxr_keyword">final</strong> <em class="jxr_comment">// and we can choose to have theta in the interval [-PI/2 ; +PI/2]</em>
<a class="jxr_linenumber" name="L629" href="#L629">629</a>                 FieldVector3D&lt;T&gt; v1 = applyTo(vector(0, 0, 1));
<a class="jxr_linenumber" name="L630" href="#L630">630</a>                 <strong class="jxr_keyword">final</strong> FieldVector3D&lt;T&gt; v2 = applyInverseTo(vector(1, 0, 0));
<a class="jxr_linenumber" name="L631" href="#L631">631</a>                 <strong class="jxr_keyword">if</strong>  ((v2.getZ().getReal() &lt; -0.9999999999) || (v2.getZ().getReal() &gt; 0.9999999999)) {
<a class="jxr_linenumber" name="L632" href="#L632">632</a>                     <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/CardanEulerSingularityException.html">CardanEulerSingularityException</a>(<strong class="jxr_keyword">true</strong>);
<a class="jxr_linenumber" name="L633" href="#L633">633</a>                 }
<a class="jxr_linenumber" name="L634" href="#L634">634</a>                 <strong class="jxr_keyword">return</strong> buildArray(v1.getY().negate().atan2(v1.getZ()),
<a class="jxr_linenumber" name="L635" href="#L635">635</a>                                   v2.getZ().asin(),
<a class="jxr_linenumber" name="L636" href="#L636">636</a>                                   v2.getY().negate().atan2(v2.getX()));
<a class="jxr_linenumber" name="L637" href="#L637">637</a> 
<a class="jxr_linenumber" name="L638" href="#L638">638</a>             } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (order == RotationOrder.XZY) {
<a class="jxr_linenumber" name="L639" href="#L639">639</a> 
<a class="jxr_linenumber" name="L640" href="#L640">640</a>                 <em class="jxr_comment">// r (+J) coordinates are :</em>
<a class="jxr_linenumber" name="L641" href="#L641">641</a>                 <em class="jxr_comment">// -sin (psi), cos (psi) cos (phi), cos (psi) sin (phi)</em>
<a class="jxr_linenumber" name="L642" href="#L642">642</a>                 <em class="jxr_comment">// (-r) (+I) coordinates are :</em>
<a class="jxr_linenumber" name="L643" href="#L643">643</a>                 <em class="jxr_comment">// cos (theta) cos (psi), -sin (psi), sin (theta) cos (psi)</em>
<a class="jxr_linenumber" name="L644" href="#L644">644</a>                 <em class="jxr_comment">// and we can choose to have psi in the interval [-PI/2 ; +PI/2]</em>
<a class="jxr_linenumber" name="L645" href="#L645">645</a>                 <strong class="jxr_keyword">final</strong> FieldVector3D&lt;T&gt; v1 = applyTo(vector(0, 1, 0));
<a class="jxr_linenumber" name="L646" href="#L646">646</a>                 <strong class="jxr_keyword">final</strong> FieldVector3D&lt;T&gt; v2 = applyInverseTo(vector(1, 0, 0));
<a class="jxr_linenumber" name="L647" href="#L647">647</a>                 <strong class="jxr_keyword">if</strong> ((v2.getY().getReal() &lt; -0.9999999999) || (v2.getY().getReal() &gt; 0.9999999999)) {
<a class="jxr_linenumber" name="L648" href="#L648">648</a>                     <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/CardanEulerSingularityException.html">CardanEulerSingularityException</a>(<strong class="jxr_keyword">true</strong>);
<a class="jxr_linenumber" name="L649" href="#L649">649</a>                 }
<a class="jxr_linenumber" name="L650" href="#L650">650</a>                 <strong class="jxr_keyword">return</strong> buildArray(v1.getZ().atan2(v1.getY()),
<a class="jxr_linenumber" name="L651" href="#L651">651</a>                                   v2.getY().asin().negate(),
<a class="jxr_linenumber" name="L652" href="#L652">652</a>                                   v2.getZ().atan2(v2.getX()));
<a class="jxr_linenumber" name="L653" href="#L653">653</a> 
<a class="jxr_linenumber" name="L654" href="#L654">654</a>             } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (order == RotationOrder.YXZ) {
<a class="jxr_linenumber" name="L655" href="#L655">655</a> 
<a class="jxr_linenumber" name="L656" href="#L656">656</a>                 <em class="jxr_comment">// r (+K) coordinates are :</em>
<a class="jxr_linenumber" name="L657" href="#L657">657</a>                 <em class="jxr_comment">//  cos (phi) sin (theta), -sin (phi), cos (phi) cos (theta)</em>
<a class="jxr_linenumber" name="L658" href="#L658">658</a>                 <em class="jxr_comment">// (-r) (+J) coordinates are :</em>
<a class="jxr_linenumber" name="L659" href="#L659">659</a>                 <em class="jxr_comment">// sin (psi) cos (phi), cos (psi) cos (phi), -sin (phi)</em>
<a class="jxr_linenumber" name="L660" href="#L660">660</a>                 <em class="jxr_comment">// and we can choose to have phi in the interval [-PI/2 ; +PI/2]</em>
<a class="jxr_linenumber" name="L661" href="#L661">661</a>                 <strong class="jxr_keyword">final</strong> FieldVector3D&lt;T&gt; v1 = applyTo(vector(0, 0, 1));
<a class="jxr_linenumber" name="L662" href="#L662">662</a>                 <strong class="jxr_keyword">final</strong> FieldVector3D&lt;T&gt; v2 = applyInverseTo(vector(0, 1, 0));
<a class="jxr_linenumber" name="L663" href="#L663">663</a>                 <strong class="jxr_keyword">if</strong> ((v2.getZ().getReal() &lt; -0.9999999999) || (v2.getZ().getReal() &gt; 0.9999999999)) {
<a class="jxr_linenumber" name="L664" href="#L664">664</a>                     <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/CardanEulerSingularityException.html">CardanEulerSingularityException</a>(<strong class="jxr_keyword">true</strong>);
<a class="jxr_linenumber" name="L665" href="#L665">665</a>                 }
<a class="jxr_linenumber" name="L666" href="#L666">666</a>                 <strong class="jxr_keyword">return</strong> buildArray(v1.getX().atan2(v1.getZ()),
<a class="jxr_linenumber" name="L667" href="#L667">667</a>                                   v2.getZ().asin().negate(),
<a class="jxr_linenumber" name="L668" href="#L668">668</a>                                   v2.getX().atan2(v2.getY()));
<a class="jxr_linenumber" name="L669" href="#L669">669</a> 
<a class="jxr_linenumber" name="L670" href="#L670">670</a>             } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (order == RotationOrder.YZX) {
<a class="jxr_linenumber" name="L671" href="#L671">671</a> 
<a class="jxr_linenumber" name="L672" href="#L672">672</a>                 <em class="jxr_comment">// r (+I) coordinates are :</em>
<a class="jxr_linenumber" name="L673" href="#L673">673</a>                 <em class="jxr_comment">// cos (psi) cos (theta), sin (psi), -cos (psi) sin (theta)</em>
<a class="jxr_linenumber" name="L674" href="#L674">674</a>                 <em class="jxr_comment">// (-r) (+J) coordinates are :</em>
<a class="jxr_linenumber" name="L675" href="#L675">675</a>                 <em class="jxr_comment">// sin (psi), cos (phi) cos (psi), -sin (phi) cos (psi)</em>
<a class="jxr_linenumber" name="L676" href="#L676">676</a>                 <em class="jxr_comment">// and we can choose to have psi in the interval [-PI/2 ; +PI/2]</em>
<a class="jxr_linenumber" name="L677" href="#L677">677</a>                 <strong class="jxr_keyword">final</strong> FieldVector3D&lt;T&gt; v1 = applyTo(vector(1, 0, 0));
<a class="jxr_linenumber" name="L678" href="#L678">678</a>                 <strong class="jxr_keyword">final</strong> FieldVector3D&lt;T&gt; v2 = applyInverseTo(vector(0, 1, 0));
<a class="jxr_linenumber" name="L679" href="#L679">679</a>                 <strong class="jxr_keyword">if</strong> ((v2.getX().getReal() &lt; -0.9999999999) || (v2.getX().getReal() &gt; 0.9999999999)) {
<a class="jxr_linenumber" name="L680" href="#L680">680</a>                     <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/CardanEulerSingularityException.html">CardanEulerSingularityException</a>(<strong class="jxr_keyword">true</strong>);
<a class="jxr_linenumber" name="L681" href="#L681">681</a>                 }
<a class="jxr_linenumber" name="L682" href="#L682">682</a>                 <strong class="jxr_keyword">return</strong> buildArray(v1.getZ().negate().atan2(v1.getX()),
<a class="jxr_linenumber" name="L683" href="#L683">683</a>                                   v2.getX().asin(),
<a class="jxr_linenumber" name="L684" href="#L684">684</a>                                   v2.getZ().negate().atan2(v2.getY()));
<a class="jxr_linenumber" name="L685" href="#L685">685</a> 
<a class="jxr_linenumber" name="L686" href="#L686">686</a>             } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (order == RotationOrder.ZXY) {
<a class="jxr_linenumber" name="L687" href="#L687">687</a> 
<a class="jxr_linenumber" name="L688" href="#L688">688</a>                 <em class="jxr_comment">// r (+J) coordinates are :</em>
<a class="jxr_linenumber" name="L689" href="#L689">689</a>                 <em class="jxr_comment">// -cos (phi) sin (psi), cos (phi) cos (psi), sin (phi)</em>
<a class="jxr_linenumber" name="L690" href="#L690">690</a>                 <em class="jxr_comment">// (-r) (+K) coordinates are :</em>
<a class="jxr_linenumber" name="L691" href="#L691">691</a>                 <em class="jxr_comment">// -sin (theta) cos (phi), sin (phi), cos (theta) cos (phi)</em>
<a class="jxr_linenumber" name="L692" href="#L692">692</a>                 <em class="jxr_comment">// and we can choose to have phi in the interval [-PI/2 ; +PI/2]</em>
<a class="jxr_linenumber" name="L693" href="#L693">693</a>                 <strong class="jxr_keyword">final</strong> FieldVector3D&lt;T&gt; v1 = applyTo(vector(0, 1, 0));
<a class="jxr_linenumber" name="L694" href="#L694">694</a>                 <strong class="jxr_keyword">final</strong> FieldVector3D&lt;T&gt; v2 = applyInverseTo(vector(0, 0, 1));
<a class="jxr_linenumber" name="L695" href="#L695">695</a>                 <strong class="jxr_keyword">if</strong> ((v2.getY().getReal() &lt; -0.9999999999) || (v2.getY().getReal() &gt; 0.9999999999)) {
<a class="jxr_linenumber" name="L696" href="#L696">696</a>                     <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/CardanEulerSingularityException.html">CardanEulerSingularityException</a>(<strong class="jxr_keyword">true</strong>);
<a class="jxr_linenumber" name="L697" href="#L697">697</a>                 }
<a class="jxr_linenumber" name="L698" href="#L698">698</a>                 <strong class="jxr_keyword">return</strong> buildArray(v1.getX().negate().atan2(v1.getY()),
<a class="jxr_linenumber" name="L699" href="#L699">699</a>                                   v2.getY().asin(),
<a class="jxr_linenumber" name="L700" href="#L700">700</a>                                   v2.getX().negate().atan2(v2.getZ()));
<a class="jxr_linenumber" name="L701" href="#L701">701</a> 
<a class="jxr_linenumber" name="L702" href="#L702">702</a>             } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (order == RotationOrder.ZYX) {
<a class="jxr_linenumber" name="L703" href="#L703">703</a> 
<a class="jxr_linenumber" name="L704" href="#L704">704</a>                 <em class="jxr_comment">// r (+I) coordinates are :</em>
<a class="jxr_linenumber" name="L705" href="#L705">705</a>                 <em class="jxr_comment">//  cos (theta) cos (psi), cos (theta) sin (psi), -sin (theta)</em>
<a class="jxr_linenumber" name="L706" href="#L706">706</a>                 <em class="jxr_comment">// (-r) (+K) coordinates are :</em>
<a class="jxr_linenumber" name="L707" href="#L707">707</a>                 <em class="jxr_comment">// -sin (theta), sin (phi) cos (theta), cos (phi) cos (theta)</em>
<a class="jxr_linenumber" name="L708" href="#L708">708</a>                 <em class="jxr_comment">// and we can choose to have theta in the interval [-PI/2 ; +PI/2]</em>
<a class="jxr_linenumber" name="L709" href="#L709">709</a>                 <strong class="jxr_keyword">final</strong> FieldVector3D&lt;T&gt; v1 = applyTo(vector(1, 0, 0));
<a class="jxr_linenumber" name="L710" href="#L710">710</a>                 <strong class="jxr_keyword">final</strong> FieldVector3D&lt;T&gt; v2 = applyInverseTo(vector(0, 0, 1));
<a class="jxr_linenumber" name="L711" href="#L711">711</a>                 <strong class="jxr_keyword">if</strong> ((v2.getX().getReal() &lt; -0.9999999999) || (v2.getX().getReal() &gt; 0.9999999999)) {
<a class="jxr_linenumber" name="L712" href="#L712">712</a>                     <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/CardanEulerSingularityException.html">CardanEulerSingularityException</a>(<strong class="jxr_keyword">true</strong>);
<a class="jxr_linenumber" name="L713" href="#L713">713</a>                 }
<a class="jxr_linenumber" name="L714" href="#L714">714</a>                 <strong class="jxr_keyword">return</strong> buildArray(v1.getY().atan2(v1.getX()),
<a class="jxr_linenumber" name="L715" href="#L715">715</a>                                   v2.getX().asin().negate(),
<a class="jxr_linenumber" name="L716" href="#L716">716</a>                                   v2.getY().atan2(v2.getZ()));
<a class="jxr_linenumber" name="L717" href="#L717">717</a> 
<a class="jxr_linenumber" name="L718" href="#L718">718</a>             } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (order == RotationOrder.XYX) {
<a class="jxr_linenumber" name="L719" href="#L719">719</a> 
<a class="jxr_linenumber" name="L720" href="#L720">720</a>                 <em class="jxr_comment">// r (+I) coordinates are :</em>
<a class="jxr_linenumber" name="L721" href="#L721">721</a>                 <em class="jxr_comment">//  cos (theta), sin (phi1) sin (theta), -cos (phi1) sin (theta)</em>
<a class="jxr_linenumber" name="L722" href="#L722">722</a>                 <em class="jxr_comment">// (-r) (+I) coordinates are :</em>
<a class="jxr_linenumber" name="L723" href="#L723">723</a>                 <em class="jxr_comment">// cos (theta), sin (theta) sin (phi2), sin (theta) cos (phi2)</em>
<a class="jxr_linenumber" name="L724" href="#L724">724</a>                 <em class="jxr_comment">// and we can choose to have theta in the interval [0 ; PI]</em>
<a class="jxr_linenumber" name="L725" href="#L725">725</a>                 <strong class="jxr_keyword">final</strong> FieldVector3D&lt;T&gt; v1 = applyTo(vector(1, 0, 0));
<a class="jxr_linenumber" name="L726" href="#L726">726</a>                 <strong class="jxr_keyword">final</strong> FieldVector3D&lt;T&gt; v2 = applyInverseTo(vector(1, 0, 0));
<a class="jxr_linenumber" name="L727" href="#L727">727</a>                 <strong class="jxr_keyword">if</strong> ((v2.getX().getReal() &lt; -0.9999999999) || (v2.getX().getReal() &gt; 0.9999999999)) {
<a class="jxr_linenumber" name="L728" href="#L728">728</a>                     <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/CardanEulerSingularityException.html">CardanEulerSingularityException</a>(false);
<a class="jxr_linenumber" name="L729" href="#L729">729</a>                 }
<a class="jxr_linenumber" name="L730" href="#L730">730</a>                 <strong class="jxr_keyword">return</strong> buildArray(v1.getY().atan2(v1.getZ().negate()),
<a class="jxr_linenumber" name="L731" href="#L731">731</a>                                   v2.getX().acos(),
<a class="jxr_linenumber" name="L732" href="#L732">732</a>                                   v2.getY().atan2(v2.getZ()));
<a class="jxr_linenumber" name="L733" href="#L733">733</a> 
<a class="jxr_linenumber" name="L734" href="#L734">734</a>             } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (order == RotationOrder.XZX) {
<a class="jxr_linenumber" name="L735" href="#L735">735</a> 
<a class="jxr_linenumber" name="L736" href="#L736">736</a>                 <em class="jxr_comment">// r (+I) coordinates are :</em>
<a class="jxr_linenumber" name="L737" href="#L737">737</a>                 <em class="jxr_comment">//  cos (psi), cos (phi1) sin (psi), sin (phi1) sin (psi)</em>
<a class="jxr_linenumber" name="L738" href="#L738">738</a>                 <em class="jxr_comment">// (-r) (+I) coordinates are :</em>
<a class="jxr_linenumber" name="L739" href="#L739">739</a>                 <em class="jxr_comment">// cos (psi), -sin (psi) cos (phi2), sin (psi) sin (phi2)</em>
<a class="jxr_linenumber" name="L740" href="#L740">740</a>                 <em class="jxr_comment">// and we can choose to have psi in the interval [0 ; PI]</em>
<a class="jxr_linenumber" name="L741" href="#L741">741</a>                 <strong class="jxr_keyword">final</strong> FieldVector3D&lt;T&gt; v1 = applyTo(vector(1, 0, 0));
<a class="jxr_linenumber" name="L742" href="#L742">742</a>                 <strong class="jxr_keyword">final</strong> FieldVector3D&lt;T&gt; v2 = applyInverseTo(vector(1, 0, 0));
<a class="jxr_linenumber" name="L743" href="#L743">743</a>                 <strong class="jxr_keyword">if</strong> ((v2.getX().getReal() &lt; -0.9999999999) || (v2.getX().getReal() &gt; 0.9999999999)) {
<a class="jxr_linenumber" name="L744" href="#L744">744</a>                     <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/CardanEulerSingularityException.html">CardanEulerSingularityException</a>(false);
<a class="jxr_linenumber" name="L745" href="#L745">745</a>                 }
<a class="jxr_linenumber" name="L746" href="#L746">746</a>                 <strong class="jxr_keyword">return</strong> buildArray(v1.getZ().atan2(v1.getY()),
<a class="jxr_linenumber" name="L747" href="#L747">747</a>                                   v2.getX().acos(),
<a class="jxr_linenumber" name="L748" href="#L748">748</a>                                   v2.getZ().atan2(v2.getY().negate()));
<a class="jxr_linenumber" name="L749" href="#L749">749</a> 
<a class="jxr_linenumber" name="L750" href="#L750">750</a>             } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (order == RotationOrder.YXY) {
<a class="jxr_linenumber" name="L751" href="#L751">751</a> 
<a class="jxr_linenumber" name="L752" href="#L752">752</a>                 <em class="jxr_comment">// r (+J) coordinates are :</em>
<a class="jxr_linenumber" name="L753" href="#L753">753</a>                 <em class="jxr_comment">//  sin (theta1) sin (phi), cos (phi), cos (theta1) sin (phi)</em>
<a class="jxr_linenumber" name="L754" href="#L754">754</a>                 <em class="jxr_comment">// (-r) (+J) coordinates are :</em>
<a class="jxr_linenumber" name="L755" href="#L755">755</a>                 <em class="jxr_comment">// sin (phi) sin (theta2), cos (phi), -sin (phi) cos (theta2)</em>
<a class="jxr_linenumber" name="L756" href="#L756">756</a>                 <em class="jxr_comment">// and we can choose to have phi in the interval [0 ; PI]</em>
<a class="jxr_linenumber" name="L757" href="#L757">757</a>                 <strong class="jxr_keyword">final</strong> FieldVector3D&lt;T&gt; v1 = applyTo(vector(0, 1, 0));
<a class="jxr_linenumber" name="L758" href="#L758">758</a>                 <strong class="jxr_keyword">final</strong> FieldVector3D&lt;T&gt; v2 = applyInverseTo(vector(0, 1, 0));
<a class="jxr_linenumber" name="L759" href="#L759">759</a>                 <strong class="jxr_keyword">if</strong> ((v2.getY().getReal() &lt; -0.9999999999) || (v2.getY().getReal() &gt; 0.9999999999)) {
<a class="jxr_linenumber" name="L760" href="#L760">760</a>                     <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/CardanEulerSingularityException.html">CardanEulerSingularityException</a>(false);
<a class="jxr_linenumber" name="L761" href="#L761">761</a>                 }
<a class="jxr_linenumber" name="L762" href="#L762">762</a>                 <strong class="jxr_keyword">return</strong> buildArray(v1.getX().atan2(v1.getZ()),
<a class="jxr_linenumber" name="L763" href="#L763">763</a>                                   v2.getY().acos(),
<a class="jxr_linenumber" name="L764" href="#L764">764</a>                                   v2.getX().atan2(v2.getZ().negate()));
<a class="jxr_linenumber" name="L765" href="#L765">765</a> 
<a class="jxr_linenumber" name="L766" href="#L766">766</a>             } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (order == RotationOrder.YZY) {
<a class="jxr_linenumber" name="L767" href="#L767">767</a> 
<a class="jxr_linenumber" name="L768" href="#L768">768</a>                 <em class="jxr_comment">// r (+J) coordinates are :</em>
<a class="jxr_linenumber" name="L769" href="#L769">769</a>                 <em class="jxr_comment">//  -cos (theta1) sin (psi), cos (psi), sin (theta1) sin (psi)</em>
<a class="jxr_linenumber" name="L770" href="#L770">770</a>                 <em class="jxr_comment">// (-r) (+J) coordinates are :</em>
<a class="jxr_linenumber" name="L771" href="#L771">771</a>                 <em class="jxr_comment">// sin (psi) cos (theta2), cos (psi), sin (psi) sin (theta2)</em>
<a class="jxr_linenumber" name="L772" href="#L772">772</a>                 <em class="jxr_comment">// and we can choose to have psi in the interval [0 ; PI]</em>
<a class="jxr_linenumber" name="L773" href="#L773">773</a>                 <strong class="jxr_keyword">final</strong> FieldVector3D&lt;T&gt; v1 = applyTo(vector(0, 1, 0));
<a class="jxr_linenumber" name="L774" href="#L774">774</a>                 <strong class="jxr_keyword">final</strong> FieldVector3D&lt;T&gt; v2 = applyInverseTo(vector(0, 1, 0));
<a class="jxr_linenumber" name="L775" href="#L775">775</a>                 <strong class="jxr_keyword">if</strong> ((v2.getY().getReal() &lt; -0.9999999999) || (v2.getY().getReal() &gt; 0.9999999999)) {
<a class="jxr_linenumber" name="L776" href="#L776">776</a>                     <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/CardanEulerSingularityException.html">CardanEulerSingularityException</a>(false);
<a class="jxr_linenumber" name="L777" href="#L777">777</a>                 }
<a class="jxr_linenumber" name="L778" href="#L778">778</a>                 <strong class="jxr_keyword">return</strong> buildArray(v1.getZ().atan2(v1.getX().negate()),
<a class="jxr_linenumber" name="L779" href="#L779">779</a>                                   v2.getY().acos(),
<a class="jxr_linenumber" name="L780" href="#L780">780</a>                                   v2.getZ().atan2(v2.getX()));
<a class="jxr_linenumber" name="L781" href="#L781">781</a> 
<a class="jxr_linenumber" name="L782" href="#L782">782</a>             } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (order == RotationOrder.ZXZ) {
<a class="jxr_linenumber" name="L783" href="#L783">783</a> 
<a class="jxr_linenumber" name="L784" href="#L784">784</a>                 <em class="jxr_comment">// r (+K) coordinates are :</em>
<a class="jxr_linenumber" name="L785" href="#L785">785</a>                 <em class="jxr_comment">//  sin (psi1) sin (phi), -cos (psi1) sin (phi), cos (phi)</em>
<a class="jxr_linenumber" name="L786" href="#L786">786</a>                 <em class="jxr_comment">// (-r) (+K) coordinates are :</em>
<a class="jxr_linenumber" name="L787" href="#L787">787</a>                 <em class="jxr_comment">// sin (phi) sin (psi2), sin (phi) cos (psi2), cos (phi)</em>
<a class="jxr_linenumber" name="L788" href="#L788">788</a>                 <em class="jxr_comment">// and we can choose to have phi in the interval [0 ; PI]</em>
<a class="jxr_linenumber" name="L789" href="#L789">789</a>                 <strong class="jxr_keyword">final</strong> FieldVector3D&lt;T&gt; v1 = applyTo(vector(0, 0, 1));
<a class="jxr_linenumber" name="L790" href="#L790">790</a>                 <strong class="jxr_keyword">final</strong> FieldVector3D&lt;T&gt; v2 = applyInverseTo(vector(0, 0, 1));
<a class="jxr_linenumber" name="L791" href="#L791">791</a>                 <strong class="jxr_keyword">if</strong> ((v2.getZ().getReal() &lt; -0.9999999999) || (v2.getZ().getReal() &gt; 0.9999999999)) {
<a class="jxr_linenumber" name="L792" href="#L792">792</a>                     <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/CardanEulerSingularityException.html">CardanEulerSingularityException</a>(false);
<a class="jxr_linenumber" name="L793" href="#L793">793</a>                 }
<a class="jxr_linenumber" name="L794" href="#L794">794</a>                 <strong class="jxr_keyword">return</strong> buildArray(v1.getX().atan2(v1.getY().negate()),
<a class="jxr_linenumber" name="L795" href="#L795">795</a>                                   v2.getZ().acos(),
<a class="jxr_linenumber" name="L796" href="#L796">796</a>                                   v2.getX().atan2(v2.getY()));
<a class="jxr_linenumber" name="L797" href="#L797">797</a> 
<a class="jxr_linenumber" name="L798" href="#L798">798</a>             } <strong class="jxr_keyword">else</strong> { <em class="jxr_comment">// last possibility is ZYZ</em>
<a class="jxr_linenumber" name="L799" href="#L799">799</a> 
<a class="jxr_linenumber" name="L800" href="#L800">800</a>                 <em class="jxr_comment">// r (+K) coordinates are :</em>
<a class="jxr_linenumber" name="L801" href="#L801">801</a>                 <em class="jxr_comment">//  cos (psi1) sin (theta), sin (psi1) sin (theta), cos (theta)</em>
<a class="jxr_linenumber" name="L802" href="#L802">802</a>                 <em class="jxr_comment">// (-r) (+K) coordinates are :</em>
<a class="jxr_linenumber" name="L803" href="#L803">803</a>                 <em class="jxr_comment">// -sin (theta) cos (psi2), sin (theta) sin (psi2), cos (theta)</em>
<a class="jxr_linenumber" name="L804" href="#L804">804</a>                 <em class="jxr_comment">// and we can choose to have theta in the interval [0 ; PI]</em>
<a class="jxr_linenumber" name="L805" href="#L805">805</a>                 <strong class="jxr_keyword">final</strong> FieldVector3D&lt;T&gt; v1 = applyTo(vector(0, 0, 1));
<a class="jxr_linenumber" name="L806" href="#L806">806</a>                 <strong class="jxr_keyword">final</strong> FieldVector3D&lt;T&gt; v2 = applyInverseTo(vector(0, 0, 1));
<a class="jxr_linenumber" name="L807" href="#L807">807</a>                 <strong class="jxr_keyword">if</strong> ((v2.getZ().getReal() &lt; -0.9999999999) || (v2.getZ().getReal() &gt; 0.9999999999)) {
<a class="jxr_linenumber" name="L808" href="#L808">808</a>                     <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/CardanEulerSingularityException.html">CardanEulerSingularityException</a>(false);
<a class="jxr_linenumber" name="L809" href="#L809">809</a>                 }
<a class="jxr_linenumber" name="L810" href="#L810">810</a>                 <strong class="jxr_keyword">return</strong> buildArray(v1.getY().atan2(v1.getX()),
<a class="jxr_linenumber" name="L811" href="#L811">811</a>                                   v2.getZ().acos(),
<a class="jxr_linenumber" name="L812" href="#L812">812</a>                                   v2.getY().atan2(v2.getX().negate()));
<a class="jxr_linenumber" name="L813" href="#L813">813</a> 
<a class="jxr_linenumber" name="L814" href="#L814">814</a>             }
<a class="jxr_linenumber" name="L815" href="#L815">815</a>         } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L816" href="#L816">816</a>             <strong class="jxr_keyword">if</strong> (order == RotationOrder.XYZ) {
<a class="jxr_linenumber" name="L817" href="#L817">817</a> 
<a class="jxr_linenumber" name="L818" href="#L818">818</a>                 <em class="jxr_comment">// r (Vector3D.plusI) coordinates are :</em>
<a class="jxr_linenumber" name="L819" href="#L819">819</a>                 <em class="jxr_comment">//  cos (theta) cos (psi), -cos (theta) sin (psi), sin (theta)</em>
<a class="jxr_linenumber" name="L820" href="#L820">820</a>                 <em class="jxr_comment">// (-r) (Vector3D.plusK) coordinates are :</em>
<a class="jxr_linenumber" name="L821" href="#L821">821</a>                 <em class="jxr_comment">// sin (theta), -sin (phi) cos (theta), cos (phi) cos (theta)</em>
<a class="jxr_linenumber" name="L822" href="#L822">822</a>                 <em class="jxr_comment">// and we can choose to have theta in the interval [-PI/2 ; +PI/2]</em>
<a class="jxr_linenumber" name="L823" href="#L823">823</a>                 FieldVector3D&lt;T&gt; v1 = applyTo(Vector3D.PLUS_I);
<a class="jxr_linenumber" name="L824" href="#L824">824</a>                 FieldVector3D&lt;T&gt; v2 = applyInverseTo(Vector3D.PLUS_K);
<a class="jxr_linenumber" name="L825" href="#L825">825</a>                 <strong class="jxr_keyword">if</strong> ((v2.getX().getReal() &lt; -0.9999999999) || (v2.getX().getReal() &gt; 0.9999999999)) {
<a class="jxr_linenumber" name="L826" href="#L826">826</a>                     <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/CardanEulerSingularityException.html">CardanEulerSingularityException</a>(<strong class="jxr_keyword">true</strong>);
<a class="jxr_linenumber" name="L827" href="#L827">827</a>                 }
<a class="jxr_linenumber" name="L828" href="#L828">828</a>                 <strong class="jxr_keyword">return</strong> buildArray(v2.getY().negate().atan2(v2.getZ()),
<a class="jxr_linenumber" name="L829" href="#L829">829</a>                                   v2.getX().asin(),
<a class="jxr_linenumber" name="L830" href="#L830">830</a>                                   v1.getY().negate().atan2(v1.getX()));
<a class="jxr_linenumber" name="L831" href="#L831">831</a> 
<a class="jxr_linenumber" name="L832" href="#L832">832</a>             } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (order == RotationOrder.XZY) {
<a class="jxr_linenumber" name="L833" href="#L833">833</a> 
<a class="jxr_linenumber" name="L834" href="#L834">834</a>                 <em class="jxr_comment">// r (Vector3D.plusI) coordinates are :</em>
<a class="jxr_linenumber" name="L835" href="#L835">835</a>                 <em class="jxr_comment">// cos (psi) cos (theta), -sin (psi), cos (psi) sin (theta)</em>
<a class="jxr_linenumber" name="L836" href="#L836">836</a>                 <em class="jxr_comment">// (-r) (Vector3D.plusJ) coordinates are :</em>
<a class="jxr_linenumber" name="L837" href="#L837">837</a>                 <em class="jxr_comment">// -sin (psi), cos (phi) cos (psi), sin (phi) cos (psi)</em>
<a class="jxr_linenumber" name="L838" href="#L838">838</a>                 <em class="jxr_comment">// and we can choose to have psi in the interval [-PI/2 ; +PI/2]</em>
<a class="jxr_linenumber" name="L839" href="#L839">839</a>                 FieldVector3D&lt;T&gt; v1 = applyTo(Vector3D.PLUS_I);
<a class="jxr_linenumber" name="L840" href="#L840">840</a>                 FieldVector3D&lt;T&gt; v2 = applyInverseTo(Vector3D.PLUS_J);
<a class="jxr_linenumber" name="L841" href="#L841">841</a>                 <strong class="jxr_keyword">if</strong> ((v2.getX().getReal() &lt; -0.9999999999) || (v2.getX().getReal() &gt; 0.9999999999)) {
<a class="jxr_linenumber" name="L842" href="#L842">842</a>                     <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/CardanEulerSingularityException.html">CardanEulerSingularityException</a>(<strong class="jxr_keyword">true</strong>);
<a class="jxr_linenumber" name="L843" href="#L843">843</a>                 }
<a class="jxr_linenumber" name="L844" href="#L844">844</a>                 <strong class="jxr_keyword">return</strong> buildArray(v2.getZ().atan2(v2.getY()),
<a class="jxr_linenumber" name="L845" href="#L845">845</a>                                   v2.getX().asin().negate(),
<a class="jxr_linenumber" name="L846" href="#L846">846</a>                                   v1.getZ().atan2(v1.getX()));
<a class="jxr_linenumber" name="L847" href="#L847">847</a> 
<a class="jxr_linenumber" name="L848" href="#L848">848</a>             } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (order == RotationOrder.YXZ) {
<a class="jxr_linenumber" name="L849" href="#L849">849</a> 
<a class="jxr_linenumber" name="L850" href="#L850">850</a>                 <em class="jxr_comment">// r (Vector3D.plusJ) coordinates are :</em>
<a class="jxr_linenumber" name="L851" href="#L851">851</a>                 <em class="jxr_comment">// cos (phi) sin (psi), cos (phi) cos (psi), -sin (phi)</em>
<a class="jxr_linenumber" name="L852" href="#L852">852</a>                 <em class="jxr_comment">// (-r) (Vector3D.plusK) coordinates are :</em>
<a class="jxr_linenumber" name="L853" href="#L853">853</a>                 <em class="jxr_comment">// sin (theta) cos (phi), -sin (phi), cos (theta) cos (phi)</em>
<a class="jxr_linenumber" name="L854" href="#L854">854</a>                 <em class="jxr_comment">// and we can choose to have phi in the interval [-PI/2 ; +PI/2]</em>
<a class="jxr_linenumber" name="L855" href="#L855">855</a>                 FieldVector3D&lt;T&gt; v1 = applyTo(Vector3D.PLUS_J);
<a class="jxr_linenumber" name="L856" href="#L856">856</a>                 FieldVector3D&lt;T&gt; v2 = applyInverseTo(Vector3D.PLUS_K);
<a class="jxr_linenumber" name="L857" href="#L857">857</a>                 <strong class="jxr_keyword">if</strong> ((v2.getY().getReal() &lt; -0.9999999999) || (v2.getY().getReal() &gt; 0.9999999999)) {
<a class="jxr_linenumber" name="L858" href="#L858">858</a>                     <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/CardanEulerSingularityException.html">CardanEulerSingularityException</a>(<strong class="jxr_keyword">true</strong>);
<a class="jxr_linenumber" name="L859" href="#L859">859</a>                 }
<a class="jxr_linenumber" name="L860" href="#L860">860</a>                 <strong class="jxr_keyword">return</strong> buildArray(v2.getX().atan2(v2.getZ()),
<a class="jxr_linenumber" name="L861" href="#L861">861</a>                                   v2.getY().asin().negate(),
<a class="jxr_linenumber" name="L862" href="#L862">862</a>                                   v1.getX().atan2(v1.getY()));
<a class="jxr_linenumber" name="L863" href="#L863">863</a> 
<a class="jxr_linenumber" name="L864" href="#L864">864</a>             } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (order == RotationOrder.YZX) {
<a class="jxr_linenumber" name="L865" href="#L865">865</a> 
<a class="jxr_linenumber" name="L866" href="#L866">866</a>                 <em class="jxr_comment">// r (Vector3D.plusJ) coordinates are :</em>
<a class="jxr_linenumber" name="L867" href="#L867">867</a>                 <em class="jxr_comment">// sin (psi), cos (psi) cos (phi), -cos (psi) sin (phi)</em>
<a class="jxr_linenumber" name="L868" href="#L868">868</a>                 <em class="jxr_comment">// (-r) (Vector3D.plusI) coordinates are :</em>
<a class="jxr_linenumber" name="L869" href="#L869">869</a>                 <em class="jxr_comment">// cos (theta) cos (psi), sin (psi), -sin (theta) cos (psi)</em>
<a class="jxr_linenumber" name="L870" href="#L870">870</a>                 <em class="jxr_comment">// and we can choose to have psi in the interval [-PI/2 ; +PI/2]</em>
<a class="jxr_linenumber" name="L871" href="#L871">871</a>                 FieldVector3D&lt;T&gt; v1 = applyTo(Vector3D.PLUS_J);
<a class="jxr_linenumber" name="L872" href="#L872">872</a>                 FieldVector3D&lt;T&gt; v2 = applyInverseTo(Vector3D.PLUS_I);
<a class="jxr_linenumber" name="L873" href="#L873">873</a>                 <strong class="jxr_keyword">if</strong> ((v2.getY().getReal() &lt; -0.9999999999) || (v2.getY().getReal() &gt; 0.9999999999)) {
<a class="jxr_linenumber" name="L874" href="#L874">874</a>                     <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/CardanEulerSingularityException.html">CardanEulerSingularityException</a>(<strong class="jxr_keyword">true</strong>);
<a class="jxr_linenumber" name="L875" href="#L875">875</a>                 }
<a class="jxr_linenumber" name="L876" href="#L876">876</a>                 <strong class="jxr_keyword">return</strong> buildArray(v2.getZ().negate().atan2(v2.getX()),
<a class="jxr_linenumber" name="L877" href="#L877">877</a>                                   v2.getY().asin(),
<a class="jxr_linenumber" name="L878" href="#L878">878</a>                                   v1.getZ().negate().atan2(v1.getY()));
<a class="jxr_linenumber" name="L879" href="#L879">879</a> 
<a class="jxr_linenumber" name="L880" href="#L880">880</a>             } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (order == RotationOrder.ZXY) {
<a class="jxr_linenumber" name="L881" href="#L881">881</a> 
<a class="jxr_linenumber" name="L882" href="#L882">882</a>                 <em class="jxr_comment">// r (Vector3D.plusK) coordinates are :</em>
<a class="jxr_linenumber" name="L883" href="#L883">883</a>                 <em class="jxr_comment">//  -cos (phi) sin (theta), sin (phi), cos (phi) cos (theta)</em>
<a class="jxr_linenumber" name="L884" href="#L884">884</a>                 <em class="jxr_comment">// (-r) (Vector3D.plusJ) coordinates are :</em>
<a class="jxr_linenumber" name="L885" href="#L885">885</a>                 <em class="jxr_comment">// -sin (psi) cos (phi), cos (psi) cos (phi), sin (phi)</em>
<a class="jxr_linenumber" name="L886" href="#L886">886</a>                 <em class="jxr_comment">// and we can choose to have phi in the interval [-PI/2 ; +PI/2]</em>
<a class="jxr_linenumber" name="L887" href="#L887">887</a>                 FieldVector3D&lt;T&gt; v1 = applyTo(Vector3D.PLUS_K);
<a class="jxr_linenumber" name="L888" href="#L888">888</a>                 FieldVector3D&lt;T&gt; v2 = applyInverseTo(Vector3D.PLUS_J);
<a class="jxr_linenumber" name="L889" href="#L889">889</a>                 <strong class="jxr_keyword">if</strong> ((v2.getZ().getReal() &lt; -0.9999999999) || (v2.getZ().getReal() &gt; 0.9999999999)) {
<a class="jxr_linenumber" name="L890" href="#L890">890</a>                     <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/CardanEulerSingularityException.html">CardanEulerSingularityException</a>(<strong class="jxr_keyword">true</strong>);
<a class="jxr_linenumber" name="L891" href="#L891">891</a>                 }
<a class="jxr_linenumber" name="L892" href="#L892">892</a>                 <strong class="jxr_keyword">return</strong> buildArray(v2.getX().negate().atan2(v2.getY()),
<a class="jxr_linenumber" name="L893" href="#L893">893</a>                                   v2.getZ().asin(),
<a class="jxr_linenumber" name="L894" href="#L894">894</a>                                   v1.getX().negate().atan2(v1.getZ()));
<a class="jxr_linenumber" name="L895" href="#L895">895</a> 
<a class="jxr_linenumber" name="L896" href="#L896">896</a>             } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (order == RotationOrder.ZYX) {
<a class="jxr_linenumber" name="L897" href="#L897">897</a> 
<a class="jxr_linenumber" name="L898" href="#L898">898</a>                 <em class="jxr_comment">// r (Vector3D.plusK) coordinates are :</em>
<a class="jxr_linenumber" name="L899" href="#L899">899</a>                 <em class="jxr_comment">//  -sin (theta), cos (theta) sin (phi), cos (theta) cos (phi)</em>
<a class="jxr_linenumber" name="L900" href="#L900">900</a>                 <em class="jxr_comment">// (-r) (Vector3D.plusI) coordinates are :</em>
<a class="jxr_linenumber" name="L901" href="#L901">901</a>                 <em class="jxr_comment">// cos (psi) cos (theta), sin (psi) cos (theta), -sin (theta)</em>
<a class="jxr_linenumber" name="L902" href="#L902">902</a>                 <em class="jxr_comment">// and we can choose to have theta in the interval [-PI/2 ; +PI/2]</em>
<a class="jxr_linenumber" name="L903" href="#L903">903</a>                 FieldVector3D&lt;T&gt; v1 = applyTo(Vector3D.PLUS_K);
<a class="jxr_linenumber" name="L904" href="#L904">904</a>                 FieldVector3D&lt;T&gt; v2 = applyInverseTo(Vector3D.PLUS_I);
<a class="jxr_linenumber" name="L905" href="#L905">905</a>                 <strong class="jxr_keyword">if</strong>  ((v2.getZ().getReal() &lt; -0.9999999999) || (v2.getZ().getReal() &gt; 0.9999999999)) {
<a class="jxr_linenumber" name="L906" href="#L906">906</a>                     <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/CardanEulerSingularityException.html">CardanEulerSingularityException</a>(<strong class="jxr_keyword">true</strong>);
<a class="jxr_linenumber" name="L907" href="#L907">907</a>                 }
<a class="jxr_linenumber" name="L908" href="#L908">908</a>                 <strong class="jxr_keyword">return</strong> buildArray(v2.getY().atan2(v2.getX()),
<a class="jxr_linenumber" name="L909" href="#L909">909</a>                                   v2.getZ().asin().negate(),
<a class="jxr_linenumber" name="L910" href="#L910">910</a>                                   v1.getY().atan2(v1.getZ()));
<a class="jxr_linenumber" name="L911" href="#L911">911</a> 
<a class="jxr_linenumber" name="L912" href="#L912">912</a>             } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (order == RotationOrder.XYX) {
<a class="jxr_linenumber" name="L913" href="#L913">913</a> 
<a class="jxr_linenumber" name="L914" href="#L914">914</a>                 <em class="jxr_comment">// r (Vector3D.plusI) coordinates are :</em>
<a class="jxr_linenumber" name="L915" href="#L915">915</a>                 <em class="jxr_comment">//  cos (theta), sin (phi2) sin (theta), cos (phi2) sin (theta)</em>
<a class="jxr_linenumber" name="L916" href="#L916">916</a>                 <em class="jxr_comment">// (-r) (Vector3D.plusI) coordinates are :</em>
<a class="jxr_linenumber" name="L917" href="#L917">917</a>                 <em class="jxr_comment">// cos (theta), sin (theta) sin (phi1), -sin (theta) cos (phi1)</em>
<a class="jxr_linenumber" name="L918" href="#L918">918</a>                 <em class="jxr_comment">// and we can choose to have theta in the interval [0 ; PI]</em>
<a class="jxr_linenumber" name="L919" href="#L919">919</a>                 FieldVector3D&lt;T&gt; v1 = applyTo(Vector3D.PLUS_I);
<a class="jxr_linenumber" name="L920" href="#L920">920</a>                 FieldVector3D&lt;T&gt; v2 = applyInverseTo(Vector3D.PLUS_I);
<a class="jxr_linenumber" name="L921" href="#L921">921</a>                 <strong class="jxr_keyword">if</strong> ((v2.getX().getReal() &lt; -0.9999999999) || (v2.getX().getReal() &gt; 0.9999999999)) {
<a class="jxr_linenumber" name="L922" href="#L922">922</a>                     <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/CardanEulerSingularityException.html">CardanEulerSingularityException</a>(false);
<a class="jxr_linenumber" name="L923" href="#L923">923</a>                 }
<a class="jxr_linenumber" name="L924" href="#L924">924</a>                 <strong class="jxr_keyword">return</strong> buildArray(v2.getY().atan2(v2.getZ().negate()),
<a class="jxr_linenumber" name="L925" href="#L925">925</a>                                   v2.getX().acos(),
<a class="jxr_linenumber" name="L926" href="#L926">926</a>                                   v1.getY().atan2(v1.getZ()));
<a class="jxr_linenumber" name="L927" href="#L927">927</a> 
<a class="jxr_linenumber" name="L928" href="#L928">928</a>             } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (order == RotationOrder.XZX) {
<a class="jxr_linenumber" name="L929" href="#L929">929</a> 
<a class="jxr_linenumber" name="L930" href="#L930">930</a>                 <em class="jxr_comment">// r (Vector3D.plusI) coordinates are :</em>
<a class="jxr_linenumber" name="L931" href="#L931">931</a>                 <em class="jxr_comment">//  cos (psi), -cos (phi2) sin (psi), sin (phi2) sin (psi)</em>
<a class="jxr_linenumber" name="L932" href="#L932">932</a>                 <em class="jxr_comment">// (-r) (Vector3D.plusI) coordinates are :</em>
<a class="jxr_linenumber" name="L933" href="#L933">933</a>                 <em class="jxr_comment">// cos (psi), sin (psi) cos (phi1), sin (psi) sin (phi1)</em>
<a class="jxr_linenumber" name="L934" href="#L934">934</a>                 <em class="jxr_comment">// and we can choose to have psi in the interval [0 ; PI]</em>
<a class="jxr_linenumber" name="L935" href="#L935">935</a>                 FieldVector3D&lt;T&gt; v1 = applyTo(Vector3D.PLUS_I);
<a class="jxr_linenumber" name="L936" href="#L936">936</a>                 FieldVector3D&lt;T&gt; v2 = applyInverseTo(Vector3D.PLUS_I);
<a class="jxr_linenumber" name="L937" href="#L937">937</a>                 <strong class="jxr_keyword">if</strong> ((v2.getX().getReal() &lt; -0.9999999999) || (v2.getX().getReal() &gt; 0.9999999999)) {
<a class="jxr_linenumber" name="L938" href="#L938">938</a>                     <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/CardanEulerSingularityException.html">CardanEulerSingularityException</a>(false);
<a class="jxr_linenumber" name="L939" href="#L939">939</a>                 }
<a class="jxr_linenumber" name="L940" href="#L940">940</a>                 <strong class="jxr_keyword">return</strong> buildArray(v2.getZ().atan2(v2.getY()),
<a class="jxr_linenumber" name="L941" href="#L941">941</a>                                   v2.getX().acos(),
<a class="jxr_linenumber" name="L942" href="#L942">942</a>                                   v1.getZ().atan2(v1.getY().negate()));
<a class="jxr_linenumber" name="L943" href="#L943">943</a> 
<a class="jxr_linenumber" name="L944" href="#L944">944</a>             } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (order == RotationOrder.YXY) {
<a class="jxr_linenumber" name="L945" href="#L945">945</a> 
<a class="jxr_linenumber" name="L946" href="#L946">946</a>                 <em class="jxr_comment">// r (Vector3D.plusJ) coordinates are :</em>
<a class="jxr_linenumber" name="L947" href="#L947">947</a>                 <em class="jxr_comment">// sin (phi) sin (theta2), cos (phi), -sin (phi) cos (theta2)</em>
<a class="jxr_linenumber" name="L948" href="#L948">948</a>                 <em class="jxr_comment">// (-r) (Vector3D.plusJ) coordinates are :</em>
<a class="jxr_linenumber" name="L949" href="#L949">949</a>                 <em class="jxr_comment">//  sin (theta1) sin (phi), cos (phi), cos (theta1) sin (phi)</em>
<a class="jxr_linenumber" name="L950" href="#L950">950</a>                 <em class="jxr_comment">// and we can choose to have phi in the interval [0 ; PI]</em>
<a class="jxr_linenumber" name="L951" href="#L951">951</a>                 FieldVector3D&lt;T&gt; v1 = applyTo(Vector3D.PLUS_J);
<a class="jxr_linenumber" name="L952" href="#L952">952</a>                 FieldVector3D&lt;T&gt; v2 = applyInverseTo(Vector3D.PLUS_J);
<a class="jxr_linenumber" name="L953" href="#L953">953</a>                 <strong class="jxr_keyword">if</strong> ((v2.getY().getReal() &lt; -0.9999999999) || (v2.getY().getReal() &gt; 0.9999999999)) {
<a class="jxr_linenumber" name="L954" href="#L954">954</a>                     <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/CardanEulerSingularityException.html">CardanEulerSingularityException</a>(false);
<a class="jxr_linenumber" name="L955" href="#L955">955</a>                 }
<a class="jxr_linenumber" name="L956" href="#L956">956</a>                 <strong class="jxr_keyword">return</strong> buildArray(v2.getX().atan2(v2.getZ()),
<a class="jxr_linenumber" name="L957" href="#L957">957</a>                                   v2.getY().acos(),
<a class="jxr_linenumber" name="L958" href="#L958">958</a>                                   v1.getX().atan2(v1.getZ().negate()));
<a class="jxr_linenumber" name="L959" href="#L959">959</a> 
<a class="jxr_linenumber" name="L960" href="#L960">960</a>             } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (order == RotationOrder.YZY) {
<a class="jxr_linenumber" name="L961" href="#L961">961</a> 
<a class="jxr_linenumber" name="L962" href="#L962">962</a>                 <em class="jxr_comment">// r (Vector3D.plusJ) coordinates are :</em>
<a class="jxr_linenumber" name="L963" href="#L963">963</a>                 <em class="jxr_comment">// sin (psi) cos (theta2), cos (psi), sin (psi) sin (theta2)</em>
<a class="jxr_linenumber" name="L964" href="#L964">964</a>                 <em class="jxr_comment">// (-r) (Vector3D.plusJ) coordinates are :</em>
<a class="jxr_linenumber" name="L965" href="#L965">965</a>                 <em class="jxr_comment">//  -cos (theta1) sin (psi), cos (psi), sin (theta1) sin (psi)</em>
<a class="jxr_linenumber" name="L966" href="#L966">966</a>                 <em class="jxr_comment">// and we can choose to have psi in the interval [0 ; PI]</em>
<a class="jxr_linenumber" name="L967" href="#L967">967</a>                 FieldVector3D&lt;T&gt; v1 = applyTo(Vector3D.PLUS_J);
<a class="jxr_linenumber" name="L968" href="#L968">968</a>                 FieldVector3D&lt;T&gt; v2 = applyInverseTo(Vector3D.PLUS_J);
<a class="jxr_linenumber" name="L969" href="#L969">969</a>                 <strong class="jxr_keyword">if</strong> ((v2.getY().getReal() &lt; -0.9999999999) || (v2.getY().getReal() &gt; 0.9999999999)) {
<a class="jxr_linenumber" name="L970" href="#L970">970</a>                     <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/CardanEulerSingularityException.html">CardanEulerSingularityException</a>(false);
<a class="jxr_linenumber" name="L971" href="#L971">971</a>                 }
<a class="jxr_linenumber" name="L972" href="#L972">972</a>                 <strong class="jxr_keyword">return</strong> buildArray(v2.getZ().atan2(v2.getX().negate()),
<a class="jxr_linenumber" name="L973" href="#L973">973</a>                                   v2.getY().acos(),
<a class="jxr_linenumber" name="L974" href="#L974">974</a>                                   v1.getZ().atan2(v1.getX()));
<a class="jxr_linenumber" name="L975" href="#L975">975</a> 
<a class="jxr_linenumber" name="L976" href="#L976">976</a>             } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (order == RotationOrder.ZXZ) {
<a class="jxr_linenumber" name="L977" href="#L977">977</a> 
<a class="jxr_linenumber" name="L978" href="#L978">978</a>                 <em class="jxr_comment">// r (Vector3D.plusK) coordinates are :</em>
<a class="jxr_linenumber" name="L979" href="#L979">979</a>                 <em class="jxr_comment">// sin (phi) sin (psi2), sin (phi) cos (psi2), cos (phi)</em>
<a class="jxr_linenumber" name="L980" href="#L980">980</a>                 <em class="jxr_comment">// (-r) (Vector3D.plusK) coordinates are :</em>
<a class="jxr_linenumber" name="L981" href="#L981">981</a>                 <em class="jxr_comment">//  sin (psi1) sin (phi), -cos (psi1) sin (phi), cos (phi)</em>
<a class="jxr_linenumber" name="L982" href="#L982">982</a>                 <em class="jxr_comment">// and we can choose to have phi in the interval [0 ; PI]</em>
<a class="jxr_linenumber" name="L983" href="#L983">983</a>                 FieldVector3D&lt;T&gt; v1 = applyTo(Vector3D.PLUS_K);
<a class="jxr_linenumber" name="L984" href="#L984">984</a>                 FieldVector3D&lt;T&gt; v2 = applyInverseTo(Vector3D.PLUS_K);
<a class="jxr_linenumber" name="L985" href="#L985">985</a>                 <strong class="jxr_keyword">if</strong> ((v2.getZ().getReal() &lt; -0.9999999999) || (v2.getZ().getReal() &gt; 0.9999999999)) {
<a class="jxr_linenumber" name="L986" href="#L986">986</a>                     <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/CardanEulerSingularityException.html">CardanEulerSingularityException</a>(false);
<a class="jxr_linenumber" name="L987" href="#L987">987</a>                 }
<a class="jxr_linenumber" name="L988" href="#L988">988</a>                 <strong class="jxr_keyword">return</strong> buildArray(v2.getX().atan2(v2.getY().negate()),
<a class="jxr_linenumber" name="L989" href="#L989">989</a>                                   v2.getZ().acos(),
<a class="jxr_linenumber" name="L990" href="#L990">990</a>                                   v1.getX().atan2(v1.getY()));
<a class="jxr_linenumber" name="L991" href="#L991">991</a> 
<a class="jxr_linenumber" name="L992" href="#L992">992</a>             } <strong class="jxr_keyword">else</strong> { <em class="jxr_comment">// last possibility is ZYZ</em>
<a class="jxr_linenumber" name="L993" href="#L993">993</a> 
<a class="jxr_linenumber" name="L994" href="#L994">994</a>                 <em class="jxr_comment">// r (Vector3D.plusK) coordinates are :</em>
<a class="jxr_linenumber" name="L995" href="#L995">995</a>                 <em class="jxr_comment">// -sin (theta) cos (psi2), sin (theta) sin (psi2), cos (theta)</em>
<a class="jxr_linenumber" name="L996" href="#L996">996</a>                 <em class="jxr_comment">// (-r) (Vector3D.plusK) coordinates are :</em>
<a class="jxr_linenumber" name="L997" href="#L997">997</a>                 <em class="jxr_comment">//  cos (psi1) sin (theta), sin (psi1) sin (theta), cos (theta)</em>
<a class="jxr_linenumber" name="L998" href="#L998">998</a>                 <em class="jxr_comment">// and we can choose to have theta in the interval [0 ; PI]</em>
<a class="jxr_linenumber" name="L999" href="#L999">999</a>                 FieldVector3D&lt;T&gt; v1 = applyTo(Vector3D.PLUS_K);
<a class="jxr_linenumber" name="L1000" href="#L1000">1000</a>                 FieldVector3D&lt;T&gt; v2 = applyInverseTo(Vector3D.PLUS_K);
<a class="jxr_linenumber" name="L1001" href="#L1001">1001</a>                 <strong class="jxr_keyword">if</strong> ((v2.getZ().getReal() &lt; -0.9999999999) || (v2.getZ().getReal() &gt; 0.9999999999)) {
<a class="jxr_linenumber" name="L1002" href="#L1002">1002</a>                     <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/CardanEulerSingularityException.html">CardanEulerSingularityException</a>(false);
<a class="jxr_linenumber" name="L1003" href="#L1003">1003</a>                 }
<a class="jxr_linenumber" name="L1004" href="#L1004">1004</a>                 <strong class="jxr_keyword">return</strong> buildArray(v2.getY().atan2(v2.getX()),
<a class="jxr_linenumber" name="L1005" href="#L1005">1005</a>                                   v2.getZ().acos(),
<a class="jxr_linenumber" name="L1006" href="#L1006">1006</a>                                   v1.getY().atan2(v1.getX().negate()));
<a class="jxr_linenumber" name="L1007" href="#L1007">1007</a> 
<a class="jxr_linenumber" name="L1008" href="#L1008">1008</a>             }
<a class="jxr_linenumber" name="L1009" href="#L1009">1009</a>         }
<a class="jxr_linenumber" name="L1010" href="#L1010">1010</a> 
<a class="jxr_linenumber" name="L1011" href="#L1011">1011</a>     }
<a class="jxr_linenumber" name="L1012" href="#L1012">1012</a> 
<a class="jxr_linenumber" name="L1013" href="#L1013">1013</a>     <em class="jxr_javadoccomment">/** Create a dimension 3 array.</em>
<a class="jxr_linenumber" name="L1014" href="#L1014">1014</a> <em class="jxr_javadoccomment">     * @param a0 first array element</em>
<a class="jxr_linenumber" name="L1015" href="#L1015">1015</a> <em class="jxr_javadoccomment">     * @param a1 second array element</em>
<a class="jxr_linenumber" name="L1016" href="#L1016">1016</a> <em class="jxr_javadoccomment">     * @param a2 third array element</em>
<a class="jxr_linenumber" name="L1017" href="#L1017">1017</a> <em class="jxr_javadoccomment">     * @return new array</em>
<a class="jxr_linenumber" name="L1018" href="#L1018">1018</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L1019" href="#L1019">1019</a>     <strong class="jxr_keyword">private</strong> T[] buildArray(<strong class="jxr_keyword">final</strong> T a0, <strong class="jxr_keyword">final</strong> T a1, <strong class="jxr_keyword">final</strong> T a2) {
<a class="jxr_linenumber" name="L1020" href="#L1020">1020</a>         <strong class="jxr_keyword">final</strong> T[] array = MathArrays.buildArray(a0.getField(), 3);
<a class="jxr_linenumber" name="L1021" href="#L1021">1021</a>         array[0] = a0;
<a class="jxr_linenumber" name="L1022" href="#L1022">1022</a>         array[1] = a1;
<a class="jxr_linenumber" name="L1023" href="#L1023">1023</a>         array[2] = a2;
<a class="jxr_linenumber" name="L1024" href="#L1024">1024</a>         <strong class="jxr_keyword">return</strong> array;
<a class="jxr_linenumber" name="L1025" href="#L1025">1025</a>     }
<a class="jxr_linenumber" name="L1026" href="#L1026">1026</a> 
<a class="jxr_linenumber" name="L1027" href="#L1027">1027</a>     <em class="jxr_javadoccomment">/** Create a constant vector.</em>
<a class="jxr_linenumber" name="L1028" href="#L1028">1028</a> <em class="jxr_javadoccomment">     * @param x abscissa</em>
<a class="jxr_linenumber" name="L1029" href="#L1029">1029</a> <em class="jxr_javadoccomment">     * @param y ordinate</em>
<a class="jxr_linenumber" name="L1030" href="#L1030">1030</a> <em class="jxr_javadoccomment">     * @param z height</em>
<a class="jxr_linenumber" name="L1031" href="#L1031">1031</a> <em class="jxr_javadoccomment">     * @return a constant vector</em>
<a class="jxr_linenumber" name="L1032" href="#L1032">1032</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L1033" href="#L1033">1033</a>     <strong class="jxr_keyword">private</strong> FieldVector3D&lt;T&gt; vector(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> x, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> y, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> z) {
<a class="jxr_linenumber" name="L1034" href="#L1034">1034</a>         <strong class="jxr_keyword">final</strong> T zero = q0.getField().getZero();
<a class="jxr_linenumber" name="L1035" href="#L1035">1035</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> FieldVector3D&lt;T&gt;(zero.add(x), zero.add(y), zero.add(z));
<a class="jxr_linenumber" name="L1036" href="#L1036">1036</a>     }
<a class="jxr_linenumber" name="L1037" href="#L1037">1037</a> 
<a class="jxr_linenumber" name="L1038" href="#L1038">1038</a>     <em class="jxr_javadoccomment">/** Get the 3X3 matrix corresponding to the instance</em>
<a class="jxr_linenumber" name="L1039" href="#L1039">1039</a> <em class="jxr_javadoccomment">     * @return the matrix corresponding to the instance</em>
<a class="jxr_linenumber" name="L1040" href="#L1040">1040</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L1041" href="#L1041">1041</a>     <strong class="jxr_keyword">public</strong> T[][] getMatrix() {
<a class="jxr_linenumber" name="L1042" href="#L1042">1042</a> 
<a class="jxr_linenumber" name="L1043" href="#L1043">1043</a>         <em class="jxr_comment">// products</em>
<a class="jxr_linenumber" name="L1044" href="#L1044">1044</a>         <strong class="jxr_keyword">final</strong> T q0q0  = q0.multiply(q0);
<a class="jxr_linenumber" name="L1045" href="#L1045">1045</a>         <strong class="jxr_keyword">final</strong> T q0q1  = q0.multiply(q1);
<a class="jxr_linenumber" name="L1046" href="#L1046">1046</a>         <strong class="jxr_keyword">final</strong> T q0q2  = q0.multiply(q2);
<a class="jxr_linenumber" name="L1047" href="#L1047">1047</a>         <strong class="jxr_keyword">final</strong> T q0q3  = q0.multiply(q3);
<a class="jxr_linenumber" name="L1048" href="#L1048">1048</a>         <strong class="jxr_keyword">final</strong> T q1q1  = q1.multiply(q1);
<a class="jxr_linenumber" name="L1049" href="#L1049">1049</a>         <strong class="jxr_keyword">final</strong> T q1q2  = q1.multiply(q2);
<a class="jxr_linenumber" name="L1050" href="#L1050">1050</a>         <strong class="jxr_keyword">final</strong> T q1q3  = q1.multiply(q3);
<a class="jxr_linenumber" name="L1051" href="#L1051">1051</a>         <strong class="jxr_keyword">final</strong> T q2q2  = q2.multiply(q2);
<a class="jxr_linenumber" name="L1052" href="#L1052">1052</a>         <strong class="jxr_keyword">final</strong> T q2q3  = q2.multiply(q3);
<a class="jxr_linenumber" name="L1053" href="#L1053">1053</a>         <strong class="jxr_keyword">final</strong> T q3q3  = q3.multiply(q3);
<a class="jxr_linenumber" name="L1054" href="#L1054">1054</a> 
<a class="jxr_linenumber" name="L1055" href="#L1055">1055</a>         <em class="jxr_comment">// create the matrix</em>
<a class="jxr_linenumber" name="L1056" href="#L1056">1056</a>         <strong class="jxr_keyword">final</strong> T[][] m = MathArrays.buildArray(q0.getField(), 3, 3);
<a class="jxr_linenumber" name="L1057" href="#L1057">1057</a> 
<a class="jxr_linenumber" name="L1058" href="#L1058">1058</a>         m [0][0] = q0q0.add(q1q1).multiply(2).subtract(1);
<a class="jxr_linenumber" name="L1059" href="#L1059">1059</a>         m [1][0] = q1q2.subtract(q0q3).multiply(2);
<a class="jxr_linenumber" name="L1060" href="#L1060">1060</a>         m [2][0] = q1q3.add(q0q2).multiply(2);
<a class="jxr_linenumber" name="L1061" href="#L1061">1061</a> 
<a class="jxr_linenumber" name="L1062" href="#L1062">1062</a>         m [0][1] = q1q2.add(q0q3).multiply(2);
<a class="jxr_linenumber" name="L1063" href="#L1063">1063</a>         m [1][1] = q0q0.add(q2q2).multiply(2).subtract(1);
<a class="jxr_linenumber" name="L1064" href="#L1064">1064</a>         m [2][1] = q2q3.subtract(q0q1).multiply(2);
<a class="jxr_linenumber" name="L1065" href="#L1065">1065</a> 
<a class="jxr_linenumber" name="L1066" href="#L1066">1066</a>         m [0][2] = q1q3.subtract(q0q2).multiply(2);
<a class="jxr_linenumber" name="L1067" href="#L1067">1067</a>         m [1][2] = q2q3.add(q0q1).multiply(2);
<a class="jxr_linenumber" name="L1068" href="#L1068">1068</a>         m [2][2] = q0q0.add(q3q3).multiply(2).subtract(1);
<a class="jxr_linenumber" name="L1069" href="#L1069">1069</a> 
<a class="jxr_linenumber" name="L1070" href="#L1070">1070</a>         <strong class="jxr_keyword">return</strong> m;
<a class="jxr_linenumber" name="L1071" href="#L1071">1071</a> 
<a class="jxr_linenumber" name="L1072" href="#L1072">1072</a>     }
<a class="jxr_linenumber" name="L1073" href="#L1073">1073</a> 
<a class="jxr_linenumber" name="L1074" href="#L1074">1074</a>     <em class="jxr_javadoccomment">/** Convert to a constant vector without derivatives.</em>
<a class="jxr_linenumber" name="L1075" href="#L1075">1075</a> <em class="jxr_javadoccomment">     * @return a constant vector</em>
<a class="jxr_linenumber" name="L1076" href="#L1076">1076</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L1077" href="#L1077">1077</a>     <strong class="jxr_keyword">public</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/Rotation.html">Rotation</a> toRotation() {
<a class="jxr_linenumber" name="L1078" href="#L1078">1078</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/Rotation.html">Rotation</a>(q0.getReal(), q1.getReal(), q2.getReal(), q3.getReal(), false);
<a class="jxr_linenumber" name="L1079" href="#L1079">1079</a>     }
<a class="jxr_linenumber" name="L1080" href="#L1080">1080</a> 
<a class="jxr_linenumber" name="L1081" href="#L1081">1081</a>     <em class="jxr_javadoccomment">/** Apply the rotation to a vector.</em>
<a class="jxr_linenumber" name="L1082" href="#L1082">1082</a> <em class="jxr_javadoccomment">     * @param u vector to apply the rotation to</em>
<a class="jxr_linenumber" name="L1083" href="#L1083">1083</a> <em class="jxr_javadoccomment">     * @return a new vector which is the image of u by the rotation</em>
<a class="jxr_linenumber" name="L1084" href="#L1084">1084</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L1085" href="#L1085">1085</a>     <strong class="jxr_keyword">public</strong> FieldVector3D&lt;T&gt; applyTo(<strong class="jxr_keyword">final</strong> FieldVector3D&lt;T&gt; u) {
<a class="jxr_linenumber" name="L1086" href="#L1086">1086</a> 
<a class="jxr_linenumber" name="L1087" href="#L1087">1087</a>         <strong class="jxr_keyword">final</strong> T x = u.getX();
<a class="jxr_linenumber" name="L1088" href="#L1088">1088</a>         <strong class="jxr_keyword">final</strong> T y = u.getY();
<a class="jxr_linenumber" name="L1089" href="#L1089">1089</a>         <strong class="jxr_keyword">final</strong> T z = u.getZ();
<a class="jxr_linenumber" name="L1090" href="#L1090">1090</a> 
<a class="jxr_linenumber" name="L1091" href="#L1091">1091</a>         <strong class="jxr_keyword">final</strong> T s = q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z));
<a class="jxr_linenumber" name="L1092" href="#L1092">1092</a> 
<a class="jxr_linenumber" name="L1093" href="#L1093">1093</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> FieldVector3D&lt;T&gt;(q0.multiply(x.multiply(q0).subtract(q2.multiply(z).subtract(q3.multiply(y)))).add(s.multiply(q1)).multiply(2).subtract(x),
<a class="jxr_linenumber" name="L1094" href="#L1094">1094</a>                                     q0.multiply(y.multiply(q0).subtract(q3.multiply(x).subtract(q1.multiply(z)))).add(s.multiply(q2)).multiply(2).subtract(y),
<a class="jxr_linenumber" name="L1095" href="#L1095">1095</a>                                     q0.multiply(z.multiply(q0).subtract(q1.multiply(y).subtract(q2.multiply(x)))).add(s.multiply(q3)).multiply(2).subtract(z));
<a class="jxr_linenumber" name="L1096" href="#L1096">1096</a> 
<a class="jxr_linenumber" name="L1097" href="#L1097">1097</a>     }
<a class="jxr_linenumber" name="L1098" href="#L1098">1098</a> 
<a class="jxr_linenumber" name="L1099" href="#L1099">1099</a>     <em class="jxr_javadoccomment">/** Apply the rotation to a vector.</em>
<a class="jxr_linenumber" name="L1100" href="#L1100">1100</a> <em class="jxr_javadoccomment">     * @param u vector to apply the rotation to</em>
<a class="jxr_linenumber" name="L1101" href="#L1101">1101</a> <em class="jxr_javadoccomment">     * @return a new vector which is the image of u by the rotation</em>
<a class="jxr_linenumber" name="L1102" href="#L1102">1102</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L1103" href="#L1103">1103</a>     <strong class="jxr_keyword">public</strong> FieldVector3D&lt;T&gt; applyTo(<strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/Vector3D.html">Vector3D</a> u) {
<a class="jxr_linenumber" name="L1104" href="#L1104">1104</a> 
<a class="jxr_linenumber" name="L1105" href="#L1105">1105</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> x = u.getX();
<a class="jxr_linenumber" name="L1106" href="#L1106">1106</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> y = u.getY();
<a class="jxr_linenumber" name="L1107" href="#L1107">1107</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> z = u.getZ();
<a class="jxr_linenumber" name="L1108" href="#L1108">1108</a> 
<a class="jxr_linenumber" name="L1109" href="#L1109">1109</a>         <strong class="jxr_keyword">final</strong> T s = q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z));
<a class="jxr_linenumber" name="L1110" href="#L1110">1110</a> 
<a class="jxr_linenumber" name="L1111" href="#L1111">1111</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> FieldVector3D&lt;T&gt;(q0.multiply(q0.multiply(x).subtract(q2.multiply(z).subtract(q3.multiply(y)))).add(s.multiply(q1)).multiply(2).subtract(x),
<a class="jxr_linenumber" name="L1112" href="#L1112">1112</a>                                     q0.multiply(q0.multiply(y).subtract(q3.multiply(x).subtract(q1.multiply(z)))).add(s.multiply(q2)).multiply(2).subtract(y),
<a class="jxr_linenumber" name="L1113" href="#L1113">1113</a>                                     q0.multiply(q0.multiply(z).subtract(q1.multiply(y).subtract(q2.multiply(x)))).add(s.multiply(q3)).multiply(2).subtract(z));
<a class="jxr_linenumber" name="L1114" href="#L1114">1114</a> 
<a class="jxr_linenumber" name="L1115" href="#L1115">1115</a>     }
<a class="jxr_linenumber" name="L1116" href="#L1116">1116</a> 
<a class="jxr_linenumber" name="L1117" href="#L1117">1117</a>     <em class="jxr_javadoccomment">/** Apply the rotation to a vector stored in an array.</em>
<a class="jxr_linenumber" name="L1118" href="#L1118">1118</a> <em class="jxr_javadoccomment">     * @param in an array with three items which stores vector to rotate</em>
<a class="jxr_linenumber" name="L1119" href="#L1119">1119</a> <em class="jxr_javadoccomment">     * @param out an array with three items to put result to (it can be the same</em>
<a class="jxr_linenumber" name="L1120" href="#L1120">1120</a> <em class="jxr_javadoccomment">     * array as in)</em>
<a class="jxr_linenumber" name="L1121" href="#L1121">1121</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L1122" href="#L1122">1122</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> applyTo(<strong class="jxr_keyword">final</strong> T[] in, <strong class="jxr_keyword">final</strong> T[] out) {
<a class="jxr_linenumber" name="L1123" href="#L1123">1123</a> 
<a class="jxr_linenumber" name="L1124" href="#L1124">1124</a>         <strong class="jxr_keyword">final</strong> T x = in[0];
<a class="jxr_linenumber" name="L1125" href="#L1125">1125</a>         <strong class="jxr_keyword">final</strong> T y = in[1];
<a class="jxr_linenumber" name="L1126" href="#L1126">1126</a>         <strong class="jxr_keyword">final</strong> T z = in[2];
<a class="jxr_linenumber" name="L1127" href="#L1127">1127</a> 
<a class="jxr_linenumber" name="L1128" href="#L1128">1128</a>         <strong class="jxr_keyword">final</strong> T s = q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z));
<a class="jxr_linenumber" name="L1129" href="#L1129">1129</a> 
<a class="jxr_linenumber" name="L1130" href="#L1130">1130</a>         out[0] = q0.multiply(x.multiply(q0).subtract(q2.multiply(z).subtract(q3.multiply(y)))).add(s.multiply(q1)).multiply(2).subtract(x);
<a class="jxr_linenumber" name="L1131" href="#L1131">1131</a>         out[1] = q0.multiply(y.multiply(q0).subtract(q3.multiply(x).subtract(q1.multiply(z)))).add(s.multiply(q2)).multiply(2).subtract(y);
<a class="jxr_linenumber" name="L1132" href="#L1132">1132</a>         out[2] = q0.multiply(z.multiply(q0).subtract(q1.multiply(y).subtract(q2.multiply(x)))).add(s.multiply(q3)).multiply(2).subtract(z);
<a class="jxr_linenumber" name="L1133" href="#L1133">1133</a> 
<a class="jxr_linenumber" name="L1134" href="#L1134">1134</a>     }
<a class="jxr_linenumber" name="L1135" href="#L1135">1135</a> 
<a class="jxr_linenumber" name="L1136" href="#L1136">1136</a>     <em class="jxr_javadoccomment">/** Apply the rotation to a vector stored in an array.</em>
<a class="jxr_linenumber" name="L1137" href="#L1137">1137</a> <em class="jxr_javadoccomment">     * @param in an array with three items which stores vector to rotate</em>
<a class="jxr_linenumber" name="L1138" href="#L1138">1138</a> <em class="jxr_javadoccomment">     * @param out an array with three items to put result to</em>
<a class="jxr_linenumber" name="L1139" href="#L1139">1139</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L1140" href="#L1140">1140</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> applyTo(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] in, <strong class="jxr_keyword">final</strong> T[] out) {
<a class="jxr_linenumber" name="L1141" href="#L1141">1141</a> 
<a class="jxr_linenumber" name="L1142" href="#L1142">1142</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> x = in[0];
<a class="jxr_linenumber" name="L1143" href="#L1143">1143</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> y = in[1];
<a class="jxr_linenumber" name="L1144" href="#L1144">1144</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> z = in[2];
<a class="jxr_linenumber" name="L1145" href="#L1145">1145</a> 
<a class="jxr_linenumber" name="L1146" href="#L1146">1146</a>         <strong class="jxr_keyword">final</strong> T s = q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z));
<a class="jxr_linenumber" name="L1147" href="#L1147">1147</a> 
<a class="jxr_linenumber" name="L1148" href="#L1148">1148</a>         out[0] = q0.multiply(q0.multiply(x).subtract(q2.multiply(z).subtract(q3.multiply(y)))).add(s.multiply(q1)).multiply(2).subtract(x);
<a class="jxr_linenumber" name="L1149" href="#L1149">1149</a>         out[1] = q0.multiply(q0.multiply(y).subtract(q3.multiply(x).subtract(q1.multiply(z)))).add(s.multiply(q2)).multiply(2).subtract(y);
<a class="jxr_linenumber" name="L1150" href="#L1150">1150</a>         out[2] = q0.multiply(q0.multiply(z).subtract(q1.multiply(y).subtract(q2.multiply(x)))).add(s.multiply(q3)).multiply(2).subtract(z);
<a class="jxr_linenumber" name="L1151" href="#L1151">1151</a> 
<a class="jxr_linenumber" name="L1152" href="#L1152">1152</a>     }
<a class="jxr_linenumber" name="L1153" href="#L1153">1153</a> 
<a class="jxr_linenumber" name="L1154" href="#L1154">1154</a>     <em class="jxr_javadoccomment">/** Apply a rotation to a vector.</em>
<a class="jxr_linenumber" name="L1155" href="#L1155">1155</a> <em class="jxr_javadoccomment">     * @param r rotation to apply</em>
<a class="jxr_linenumber" name="L1156" href="#L1156">1156</a> <em class="jxr_javadoccomment">     * @param u vector to apply the rotation to</em>
<a class="jxr_linenumber" name="L1157" href="#L1157">1157</a> <em class="jxr_javadoccomment">     * @param &lt;T&gt; the type of the field elements</em>
<a class="jxr_linenumber" name="L1158" href="#L1158">1158</a> <em class="jxr_javadoccomment">     * @return a new vector which is the image of u by the rotation</em>
<a class="jxr_linenumber" name="L1159" href="#L1159">1159</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L1160" href="#L1160">1160</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> &lt;T <strong class="jxr_keyword">extends</strong> RealFieldElement&lt;T&gt;&gt; FieldVector3D&lt;T&gt; applyTo(<strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/Rotation.html">Rotation</a> r, <strong class="jxr_keyword">final</strong> FieldVector3D&lt;T&gt; u) {
<a class="jxr_linenumber" name="L1161" href="#L1161">1161</a> 
<a class="jxr_linenumber" name="L1162" href="#L1162">1162</a>         <strong class="jxr_keyword">final</strong> T x = u.getX();
<a class="jxr_linenumber" name="L1163" href="#L1163">1163</a>         <strong class="jxr_keyword">final</strong> T y = u.getY();
<a class="jxr_linenumber" name="L1164" href="#L1164">1164</a>         <strong class="jxr_keyword">final</strong> T z = u.getZ();
<a class="jxr_linenumber" name="L1165" href="#L1165">1165</a> 
<a class="jxr_linenumber" name="L1166" href="#L1166">1166</a>         <strong class="jxr_keyword">final</strong> T s = x.multiply(r.getQ1()).add(y.multiply(r.getQ2())).add(z.multiply(r.getQ3()));
<a class="jxr_linenumber" name="L1167" href="#L1167">1167</a> 
<a class="jxr_linenumber" name="L1168" href="#L1168">1168</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> FieldVector3D&lt;T&gt;(x.multiply(r.getQ0()).subtract(z.multiply(r.getQ2()).subtract(y.multiply(r.getQ3()))).multiply(r.getQ0()).add(s.multiply(r.getQ1())).multiply(2).subtract(x),
<a class="jxr_linenumber" name="L1169" href="#L1169">1169</a>                                     y.multiply(r.getQ0()).subtract(x.multiply(r.getQ3()).subtract(z.multiply(r.getQ1()))).multiply(r.getQ0()).add(s.multiply(r.getQ2())).multiply(2).subtract(y),
<a class="jxr_linenumber" name="L1170" href="#L1170">1170</a>                                     z.multiply(r.getQ0()).subtract(y.multiply(r.getQ1()).subtract(x.multiply(r.getQ2()))).multiply(r.getQ0()).add(s.multiply(r.getQ3())).multiply(2).subtract(z));
<a class="jxr_linenumber" name="L1171" href="#L1171">1171</a> 
<a class="jxr_linenumber" name="L1172" href="#L1172">1172</a>     }
<a class="jxr_linenumber" name="L1173" href="#L1173">1173</a> 
<a class="jxr_linenumber" name="L1174" href="#L1174">1174</a>     <em class="jxr_javadoccomment">/** Apply the inverse of the rotation to a vector.</em>
<a class="jxr_linenumber" name="L1175" href="#L1175">1175</a> <em class="jxr_javadoccomment">     * @param u vector to apply the inverse of the rotation to</em>
<a class="jxr_linenumber" name="L1176" href="#L1176">1176</a> <em class="jxr_javadoccomment">     * @return a new vector which such that u is its image by the rotation</em>
<a class="jxr_linenumber" name="L1177" href="#L1177">1177</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L1178" href="#L1178">1178</a>     <strong class="jxr_keyword">public</strong> FieldVector3D&lt;T&gt; applyInverseTo(<strong class="jxr_keyword">final</strong> FieldVector3D&lt;T&gt; u) {
<a class="jxr_linenumber" name="L1179" href="#L1179">1179</a> 
<a class="jxr_linenumber" name="L1180" href="#L1180">1180</a>         <strong class="jxr_keyword">final</strong> T x = u.getX();
<a class="jxr_linenumber" name="L1181" href="#L1181">1181</a>         <strong class="jxr_keyword">final</strong> T y = u.getY();
<a class="jxr_linenumber" name="L1182" href="#L1182">1182</a>         <strong class="jxr_keyword">final</strong> T z = u.getZ();
<a class="jxr_linenumber" name="L1183" href="#L1183">1183</a> 
<a class="jxr_linenumber" name="L1184" href="#L1184">1184</a>         <strong class="jxr_keyword">final</strong> T s  = q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z));
<a class="jxr_linenumber" name="L1185" href="#L1185">1185</a>         <strong class="jxr_keyword">final</strong> T m0 = q0.negate();
<a class="jxr_linenumber" name="L1186" href="#L1186">1186</a> 
<a class="jxr_linenumber" name="L1187" href="#L1187">1187</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> FieldVector3D&lt;T&gt;(m0.multiply(x.multiply(m0).subtract(q2.multiply(z).subtract(q3.multiply(y)))).add(s.multiply(q1)).multiply(2).subtract(x),
<a class="jxr_linenumber" name="L1188" href="#L1188">1188</a>                                     m0.multiply(y.multiply(m0).subtract(q3.multiply(x).subtract(q1.multiply(z)))).add(s.multiply(q2)).multiply(2).subtract(y),
<a class="jxr_linenumber" name="L1189" href="#L1189">1189</a>                                     m0.multiply(z.multiply(m0).subtract(q1.multiply(y).subtract(q2.multiply(x)))).add(s.multiply(q3)).multiply(2).subtract(z));
<a class="jxr_linenumber" name="L1190" href="#L1190">1190</a> 
<a class="jxr_linenumber" name="L1191" href="#L1191">1191</a>     }
<a class="jxr_linenumber" name="L1192" href="#L1192">1192</a> 
<a class="jxr_linenumber" name="L1193" href="#L1193">1193</a>     <em class="jxr_javadoccomment">/** Apply the inverse of the rotation to a vector.</em>
<a class="jxr_linenumber" name="L1194" href="#L1194">1194</a> <em class="jxr_javadoccomment">     * @param u vector to apply the inverse of the rotation to</em>
<a class="jxr_linenumber" name="L1195" href="#L1195">1195</a> <em class="jxr_javadoccomment">     * @return a new vector which such that u is its image by the rotation</em>
<a class="jxr_linenumber" name="L1196" href="#L1196">1196</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L1197" href="#L1197">1197</a>     <strong class="jxr_keyword">public</strong> FieldVector3D&lt;T&gt; applyInverseTo(<strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/Vector3D.html">Vector3D</a> u) {
<a class="jxr_linenumber" name="L1198" href="#L1198">1198</a> 
<a class="jxr_linenumber" name="L1199" href="#L1199">1199</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> x = u.getX();
<a class="jxr_linenumber" name="L1200" href="#L1200">1200</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> y = u.getY();
<a class="jxr_linenumber" name="L1201" href="#L1201">1201</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> z = u.getZ();
<a class="jxr_linenumber" name="L1202" href="#L1202">1202</a> 
<a class="jxr_linenumber" name="L1203" href="#L1203">1203</a>         <strong class="jxr_keyword">final</strong> T s  = q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z));
<a class="jxr_linenumber" name="L1204" href="#L1204">1204</a>         <strong class="jxr_keyword">final</strong> T m0 = q0.negate();
<a class="jxr_linenumber" name="L1205" href="#L1205">1205</a> 
<a class="jxr_linenumber" name="L1206" href="#L1206">1206</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> FieldVector3D&lt;T&gt;(m0.multiply(m0.multiply(x).subtract(q2.multiply(z).subtract(q3.multiply(y)))).add(s.multiply(q1)).multiply(2).subtract(x),
<a class="jxr_linenumber" name="L1207" href="#L1207">1207</a>                                     m0.multiply(m0.multiply(y).subtract(q3.multiply(x).subtract(q1.multiply(z)))).add(s.multiply(q2)).multiply(2).subtract(y),
<a class="jxr_linenumber" name="L1208" href="#L1208">1208</a>                                     m0.multiply(m0.multiply(z).subtract(q1.multiply(y).subtract(q2.multiply(x)))).add(s.multiply(q3)).multiply(2).subtract(z));
<a class="jxr_linenumber" name="L1209" href="#L1209">1209</a> 
<a class="jxr_linenumber" name="L1210" href="#L1210">1210</a>     }
<a class="jxr_linenumber" name="L1211" href="#L1211">1211</a> 
<a class="jxr_linenumber" name="L1212" href="#L1212">1212</a>     <em class="jxr_javadoccomment">/** Apply the inverse of the rotation to a vector stored in an array.</em>
<a class="jxr_linenumber" name="L1213" href="#L1213">1213</a> <em class="jxr_javadoccomment">     * @param in an array with three items which stores vector to rotate</em>
<a class="jxr_linenumber" name="L1214" href="#L1214">1214</a> <em class="jxr_javadoccomment">     * @param out an array with three items to put result to (it can be the same</em>
<a class="jxr_linenumber" name="L1215" href="#L1215">1215</a> <em class="jxr_javadoccomment">     * array as in)</em>
<a class="jxr_linenumber" name="L1216" href="#L1216">1216</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L1217" href="#L1217">1217</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> applyInverseTo(<strong class="jxr_keyword">final</strong> T[] in, <strong class="jxr_keyword">final</strong> T[] out) {
<a class="jxr_linenumber" name="L1218" href="#L1218">1218</a> 
<a class="jxr_linenumber" name="L1219" href="#L1219">1219</a>         <strong class="jxr_keyword">final</strong> T x = in[0];
<a class="jxr_linenumber" name="L1220" href="#L1220">1220</a>         <strong class="jxr_keyword">final</strong> T y = in[1];
<a class="jxr_linenumber" name="L1221" href="#L1221">1221</a>         <strong class="jxr_keyword">final</strong> T z = in[2];
<a class="jxr_linenumber" name="L1222" href="#L1222">1222</a> 
<a class="jxr_linenumber" name="L1223" href="#L1223">1223</a>         <strong class="jxr_keyword">final</strong> T s = q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z));
<a class="jxr_linenumber" name="L1224" href="#L1224">1224</a>         <strong class="jxr_keyword">final</strong> T m0 = q0.negate();
<a class="jxr_linenumber" name="L1225" href="#L1225">1225</a> 
<a class="jxr_linenumber" name="L1226" href="#L1226">1226</a>         out[0] = m0.multiply(x.multiply(m0).subtract(q2.multiply(z).subtract(q3.multiply(y)))).add(s.multiply(q1)).multiply(2).subtract(x);
<a class="jxr_linenumber" name="L1227" href="#L1227">1227</a>         out[1] = m0.multiply(y.multiply(m0).subtract(q3.multiply(x).subtract(q1.multiply(z)))).add(s.multiply(q2)).multiply(2).subtract(y);
<a class="jxr_linenumber" name="L1228" href="#L1228">1228</a>         out[2] = m0.multiply(z.multiply(m0).subtract(q1.multiply(y).subtract(q2.multiply(x)))).add(s.multiply(q3)).multiply(2).subtract(z);
<a class="jxr_linenumber" name="L1229" href="#L1229">1229</a> 
<a class="jxr_linenumber" name="L1230" href="#L1230">1230</a>     }
<a class="jxr_linenumber" name="L1231" href="#L1231">1231</a> 
<a class="jxr_linenumber" name="L1232" href="#L1232">1232</a>     <em class="jxr_javadoccomment">/** Apply the inverse of the rotation to a vector stored in an array.</em>
<a class="jxr_linenumber" name="L1233" href="#L1233">1233</a> <em class="jxr_javadoccomment">     * @param in an array with three items which stores vector to rotate</em>
<a class="jxr_linenumber" name="L1234" href="#L1234">1234</a> <em class="jxr_javadoccomment">     * @param out an array with three items to put result to</em>
<a class="jxr_linenumber" name="L1235" href="#L1235">1235</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L1236" href="#L1236">1236</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> applyInverseTo(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] in, <strong class="jxr_keyword">final</strong> T[] out) {
<a class="jxr_linenumber" name="L1237" href="#L1237">1237</a> 
<a class="jxr_linenumber" name="L1238" href="#L1238">1238</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> x = in[0];
<a class="jxr_linenumber" name="L1239" href="#L1239">1239</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> y = in[1];
<a class="jxr_linenumber" name="L1240" href="#L1240">1240</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> z = in[2];
<a class="jxr_linenumber" name="L1241" href="#L1241">1241</a> 
<a class="jxr_linenumber" name="L1242" href="#L1242">1242</a>         <strong class="jxr_keyword">final</strong> T s = q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z));
<a class="jxr_linenumber" name="L1243" href="#L1243">1243</a>         <strong class="jxr_keyword">final</strong> T m0 = q0.negate();
<a class="jxr_linenumber" name="L1244" href="#L1244">1244</a> 
<a class="jxr_linenumber" name="L1245" href="#L1245">1245</a>         out[0] = m0.multiply(m0.multiply(x).subtract(q2.multiply(z).subtract(q3.multiply(y)))).add(s.multiply(q1)).multiply(2).subtract(x);
<a class="jxr_linenumber" name="L1246" href="#L1246">1246</a>         out[1] = m0.multiply(m0.multiply(y).subtract(q3.multiply(x).subtract(q1.multiply(z)))).add(s.multiply(q2)).multiply(2).subtract(y);
<a class="jxr_linenumber" name="L1247" href="#L1247">1247</a>         out[2] = m0.multiply(m0.multiply(z).subtract(q1.multiply(y).subtract(q2.multiply(x)))).add(s.multiply(q3)).multiply(2).subtract(z);
<a class="jxr_linenumber" name="L1248" href="#L1248">1248</a> 
<a class="jxr_linenumber" name="L1249" href="#L1249">1249</a>     }
<a class="jxr_linenumber" name="L1250" href="#L1250">1250</a> 
<a class="jxr_linenumber" name="L1251" href="#L1251">1251</a>     <em class="jxr_javadoccomment">/** Apply the inverse of a rotation to a vector.</em>
<a class="jxr_linenumber" name="L1252" href="#L1252">1252</a> <em class="jxr_javadoccomment">     * @param r rotation to apply</em>
<a class="jxr_linenumber" name="L1253" href="#L1253">1253</a> <em class="jxr_javadoccomment">     * @param u vector to apply the inverse of the rotation to</em>
<a class="jxr_linenumber" name="L1254" href="#L1254">1254</a> <em class="jxr_javadoccomment">     * @param &lt;T&gt; the type of the field elements</em>
<a class="jxr_linenumber" name="L1255" href="#L1255">1255</a> <em class="jxr_javadoccomment">     * @return a new vector which such that u is its image by the rotation</em>
<a class="jxr_linenumber" name="L1256" href="#L1256">1256</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L1257" href="#L1257">1257</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> &lt;T <strong class="jxr_keyword">extends</strong> RealFieldElement&lt;T&gt;&gt; FieldVector3D&lt;T&gt; applyInverseTo(<strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/Rotation.html">Rotation</a> r, <strong class="jxr_keyword">final</strong> FieldVector3D&lt;T&gt; u) {
<a class="jxr_linenumber" name="L1258" href="#L1258">1258</a> 
<a class="jxr_linenumber" name="L1259" href="#L1259">1259</a>         <strong class="jxr_keyword">final</strong> T x = u.getX();
<a class="jxr_linenumber" name="L1260" href="#L1260">1260</a>         <strong class="jxr_keyword">final</strong> T y = u.getY();
<a class="jxr_linenumber" name="L1261" href="#L1261">1261</a>         <strong class="jxr_keyword">final</strong> T z = u.getZ();
<a class="jxr_linenumber" name="L1262" href="#L1262">1262</a> 
<a class="jxr_linenumber" name="L1263" href="#L1263">1263</a>         <strong class="jxr_keyword">final</strong> T s  = x.multiply(r.getQ1()).add(y.multiply(r.getQ2())).add(z.multiply(r.getQ3()));
<a class="jxr_linenumber" name="L1264" href="#L1264">1264</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> m0 = -r.getQ0();
<a class="jxr_linenumber" name="L1265" href="#L1265">1265</a> 
<a class="jxr_linenumber" name="L1266" href="#L1266">1266</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> FieldVector3D&lt;T&gt;(x.multiply(m0).subtract(z.multiply(r.getQ2()).subtract(y.multiply(r.getQ3()))).multiply(m0).add(s.multiply(r.getQ1())).multiply(2).subtract(x),
<a class="jxr_linenumber" name="L1267" href="#L1267">1267</a>                                     y.multiply(m0).subtract(x.multiply(r.getQ3()).subtract(z.multiply(r.getQ1()))).multiply(m0).add(s.multiply(r.getQ2())).multiply(2).subtract(y),
<a class="jxr_linenumber" name="L1268" href="#L1268">1268</a>                                     z.multiply(m0).subtract(y.multiply(r.getQ1()).subtract(x.multiply(r.getQ2()))).multiply(m0).add(s.multiply(r.getQ3())).multiply(2).subtract(z));
<a class="jxr_linenumber" name="L1269" href="#L1269">1269</a> 
<a class="jxr_linenumber" name="L1270" href="#L1270">1270</a>     }
<a class="jxr_linenumber" name="L1271" href="#L1271">1271</a> 
<a class="jxr_linenumber" name="L1272" href="#L1272">1272</a>     <em class="jxr_javadoccomment">/** Apply the instance to another rotation.</em>
<a class="jxr_linenumber" name="L1273" href="#L1273">1273</a> <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L1274" href="#L1274">1274</a> <em class="jxr_javadoccomment">     * Calling this method is equivalent to call</em>
<a class="jxr_linenumber" name="L1275" href="#L1275">1275</a> <em class="jxr_javadoccomment">     * {@link #compose(FieldRotation, RotationConvention)</em>
<a class="jxr_linenumber" name="L1276" href="#L1276">1276</a> <em class="jxr_javadoccomment">     * compose(r, RotationConvention.VECTOR_OPERATOR)}.</em>
<a class="jxr_linenumber" name="L1277" href="#L1277">1277</a> <em class="jxr_javadoccomment">     * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L1278" href="#L1278">1278</a> <em class="jxr_javadoccomment">     * @param r rotation to apply the rotation to</em>
<a class="jxr_linenumber" name="L1279" href="#L1279">1279</a> <em class="jxr_javadoccomment">     * @return a new rotation which is the composition of r by the instance</em>
<a class="jxr_linenumber" name="L1280" href="#L1280">1280</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L1281" href="#L1281">1281</a>     <strong class="jxr_keyword">public</strong> FieldRotation&lt;T&gt; applyTo(<strong class="jxr_keyword">final</strong> FieldRotation&lt;T&gt; r) {
<a class="jxr_linenumber" name="L1282" href="#L1282">1282</a>         <strong class="jxr_keyword">return</strong> compose(r, RotationConvention.VECTOR_OPERATOR);
<a class="jxr_linenumber" name="L1283" href="#L1283">1283</a>     }
<a class="jxr_linenumber" name="L1284" href="#L1284">1284</a> 
<a class="jxr_linenumber" name="L1285" href="#L1285">1285</a>     <em class="jxr_javadoccomment">/** Compose the instance with another rotation.</em>
<a class="jxr_linenumber" name="L1286" href="#L1286">1286</a> <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L1287" href="#L1287">1287</a> <em class="jxr_javadoccomment">     * If the semantics of the rotations composition corresponds to a</em>
<a class="jxr_linenumber" name="L1288" href="#L1288">1288</a> <em class="jxr_javadoccomment">     * {@link RotationConvention#VECTOR_OPERATOR vector operator} convention,</em>
<a class="jxr_linenumber" name="L1289" href="#L1289">1289</a> <em class="jxr_javadoccomment">     * applying the instance to a rotation is computing the composition</em>
<a class="jxr_linenumber" name="L1290" href="#L1290">1290</a> <em class="jxr_javadoccomment">     * in an order compliant with the following rule : let {@code u} be any</em>
<a class="jxr_linenumber" name="L1291" href="#L1291">1291</a> <em class="jxr_javadoccomment">     * vector and {@code v} its image by {@code r1} (i.e.</em>
<a class="jxr_linenumber" name="L1292" href="#L1292">1292</a> <em class="jxr_javadoccomment">     * {@code r1.applyTo(u) = v}). Let {@code w} be the image of {@code v} by</em>
<a class="jxr_linenumber" name="L1293" href="#L1293">1293</a> <em class="jxr_javadoccomment">     * rotation {@code r2} (i.e. {@code r2.applyTo(v) = w}). Then</em>
<a class="jxr_linenumber" name="L1294" href="#L1294">1294</a> <em class="jxr_javadoccomment">     * {@code w = comp.applyTo(u)}, where</em>
<a class="jxr_linenumber" name="L1295" href="#L1295">1295</a> <em class="jxr_javadoccomment">     * {@code comp = r2.compose(r1, RotationConvention.VECTOR_OPERATOR)}.</em>
<a class="jxr_linenumber" name="L1296" href="#L1296">1296</a> <em class="jxr_javadoccomment">     * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L1297" href="#L1297">1297</a> <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L1298" href="#L1298">1298</a> <em class="jxr_javadoccomment">     * If the semantics of the rotations composition corresponds to a</em>
<a class="jxr_linenumber" name="L1299" href="#L1299">1299</a> <em class="jxr_javadoccomment">     * {@link RotationConvention#FRAME_TRANSFORM frame transform} convention,</em>
<a class="jxr_linenumber" name="L1300" href="#L1300">1300</a> <em class="jxr_javadoccomment">     * the application order will be reversed. So keeping the exact same</em>
<a class="jxr_linenumber" name="L1301" href="#L1301">1301</a> <em class="jxr_javadoccomment">     * meaning of all {@code r1}, {@code r2}, {@code u}, {@code v}, {@code w}</em>
<a class="jxr_linenumber" name="L1302" href="#L1302">1302</a> <em class="jxr_javadoccomment">     * and  {@code comp} as above, {@code comp} could also be computed as</em>
<a class="jxr_linenumber" name="L1303" href="#L1303">1303</a> <em class="jxr_javadoccomment">     * {@code comp = r1.compose(r2, RotationConvention.FRAME_TRANSFORM)}.</em>
<a class="jxr_linenumber" name="L1304" href="#L1304">1304</a> <em class="jxr_javadoccomment">     * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L1305" href="#L1305">1305</a> <em class="jxr_javadoccomment">     * @param r rotation to apply the rotation to</em>
<a class="jxr_linenumber" name="L1306" href="#L1306">1306</a> <em class="jxr_javadoccomment">     * @param convention convention to use for the semantics of the angle</em>
<a class="jxr_linenumber" name="L1307" href="#L1307">1307</a> <em class="jxr_javadoccomment">     * @return a new rotation which is the composition of r by the instance</em>
<a class="jxr_linenumber" name="L1308" href="#L1308">1308</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L1309" href="#L1309">1309</a>     <strong class="jxr_keyword">public</strong> FieldRotation&lt;T&gt; compose(<strong class="jxr_keyword">final</strong> FieldRotation&lt;T&gt; r, <strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/RotationConvention.html">RotationConvention</a> convention) {
<a class="jxr_linenumber" name="L1310" href="#L1310">1310</a>         <strong class="jxr_keyword">return</strong> convention == RotationConvention.VECTOR_OPERATOR ?
<a class="jxr_linenumber" name="L1311" href="#L1311">1311</a>                              composeInternal(r) : r.composeInternal(<strong class="jxr_keyword">this</strong>);
<a class="jxr_linenumber" name="L1312" href="#L1312">1312</a>     }
<a class="jxr_linenumber" name="L1313" href="#L1313">1313</a> 
<a class="jxr_linenumber" name="L1314" href="#L1314">1314</a>     <em class="jxr_javadoccomment">/** Compose the instance with another rotation using vector operator convention.</em>
<a class="jxr_linenumber" name="L1315" href="#L1315">1315</a> <em class="jxr_javadoccomment">     * @param r rotation to apply the rotation to</em>
<a class="jxr_linenumber" name="L1316" href="#L1316">1316</a> <em class="jxr_javadoccomment">     * @return a new rotation which is the composition of r by the instance</em>
<a class="jxr_linenumber" name="L1317" href="#L1317">1317</a> <em class="jxr_javadoccomment">     * using vector operator convention</em>
<a class="jxr_linenumber" name="L1318" href="#L1318">1318</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L1319" href="#L1319">1319</a>     <strong class="jxr_keyword">private</strong> FieldRotation&lt;T&gt; composeInternal(<strong class="jxr_keyword">final</strong> FieldRotation&lt;T&gt; r) {
<a class="jxr_linenumber" name="L1320" href="#L1320">1320</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> FieldRotation&lt;T&gt;(r.q0.multiply(q0).subtract(r.q1.multiply(q1).add(r.q2.multiply(q2)).add(r.q3.multiply(q3))),
<a class="jxr_linenumber" name="L1321" href="#L1321">1321</a>                                     r.q1.multiply(q0).add(r.q0.multiply(q1)).add(r.q2.multiply(q3).subtract(r.q3.multiply(q2))),
<a class="jxr_linenumber" name="L1322" href="#L1322">1322</a>                                     r.q2.multiply(q0).add(r.q0.multiply(q2)).add(r.q3.multiply(q1).subtract(r.q1.multiply(q3))),
<a class="jxr_linenumber" name="L1323" href="#L1323">1323</a>                                     r.q3.multiply(q0).add(r.q0.multiply(q3)).add(r.q1.multiply(q2).subtract(r.q2.multiply(q1))),
<a class="jxr_linenumber" name="L1324" href="#L1324">1324</a>                                     false);
<a class="jxr_linenumber" name="L1325" href="#L1325">1325</a>     }
<a class="jxr_linenumber" name="L1326" href="#L1326">1326</a> 
<a class="jxr_linenumber" name="L1327" href="#L1327">1327</a>     <em class="jxr_javadoccomment">/** Apply the instance to another rotation.</em>
<a class="jxr_linenumber" name="L1328" href="#L1328">1328</a> <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L1329" href="#L1329">1329</a> <em class="jxr_javadoccomment">     * Calling this method is equivalent to call</em>
<a class="jxr_linenumber" name="L1330" href="#L1330">1330</a> <em class="jxr_javadoccomment">     * {@link #compose(Rotation, RotationConvention)</em>
<a class="jxr_linenumber" name="L1331" href="#L1331">1331</a> <em class="jxr_javadoccomment">     * compose(r, RotationConvention.VECTOR_OPERATOR)}.</em>
<a class="jxr_linenumber" name="L1332" href="#L1332">1332</a> <em class="jxr_javadoccomment">     * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L1333" href="#L1333">1333</a> <em class="jxr_javadoccomment">     * @param r rotation to apply the rotation to</em>
<a class="jxr_linenumber" name="L1334" href="#L1334">1334</a> <em class="jxr_javadoccomment">     * @return a new rotation which is the composition of r by the instance</em>
<a class="jxr_linenumber" name="L1335" href="#L1335">1335</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L1336" href="#L1336">1336</a>     <strong class="jxr_keyword">public</strong> FieldRotation&lt;T&gt; applyTo(<strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/Rotation.html">Rotation</a> r) {
<a class="jxr_linenumber" name="L1337" href="#L1337">1337</a>         <strong class="jxr_keyword">return</strong> compose(r, RotationConvention.VECTOR_OPERATOR);
<a class="jxr_linenumber" name="L1338" href="#L1338">1338</a>     }
<a class="jxr_linenumber" name="L1339" href="#L1339">1339</a> 
<a class="jxr_linenumber" name="L1340" href="#L1340">1340</a>     <em class="jxr_javadoccomment">/** Compose the instance with another rotation.</em>
<a class="jxr_linenumber" name="L1341" href="#L1341">1341</a> <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L1342" href="#L1342">1342</a> <em class="jxr_javadoccomment">     * If the semantics of the rotations composition corresponds to a</em>
<a class="jxr_linenumber" name="L1343" href="#L1343">1343</a> <em class="jxr_javadoccomment">     * {@link RotationConvention#VECTOR_OPERATOR vector operator} convention,</em>
<a class="jxr_linenumber" name="L1344" href="#L1344">1344</a> <em class="jxr_javadoccomment">     * applying the instance to a rotation is computing the composition</em>
<a class="jxr_linenumber" name="L1345" href="#L1345">1345</a> <em class="jxr_javadoccomment">     * in an order compliant with the following rule : let {@code u} be any</em>
<a class="jxr_linenumber" name="L1346" href="#L1346">1346</a> <em class="jxr_javadoccomment">     * vector and {@code v} its image by {@code r1} (i.e.</em>
<a class="jxr_linenumber" name="L1347" href="#L1347">1347</a> <em class="jxr_javadoccomment">     * {@code r1.applyTo(u) = v}). Let {@code w} be the image of {@code v} by</em>
<a class="jxr_linenumber" name="L1348" href="#L1348">1348</a> <em class="jxr_javadoccomment">     * rotation {@code r2} (i.e. {@code r2.applyTo(v) = w}). Then</em>
<a class="jxr_linenumber" name="L1349" href="#L1349">1349</a> <em class="jxr_javadoccomment">     * {@code w = comp.applyTo(u)}, where</em>
<a class="jxr_linenumber" name="L1350" href="#L1350">1350</a> <em class="jxr_javadoccomment">     * {@code comp = r2.compose(r1, RotationConvention.VECTOR_OPERATOR)}.</em>
<a class="jxr_linenumber" name="L1351" href="#L1351">1351</a> <em class="jxr_javadoccomment">     * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L1352" href="#L1352">1352</a> <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L1353" href="#L1353">1353</a> <em class="jxr_javadoccomment">     * If the semantics of the rotations composition corresponds to a</em>
<a class="jxr_linenumber" name="L1354" href="#L1354">1354</a> <em class="jxr_javadoccomment">     * {@link RotationConvention#FRAME_TRANSFORM frame transform} convention,</em>
<a class="jxr_linenumber" name="L1355" href="#L1355">1355</a> <em class="jxr_javadoccomment">     * the application order will be reversed. So keeping the exact same</em>
<a class="jxr_linenumber" name="L1356" href="#L1356">1356</a> <em class="jxr_javadoccomment">     * meaning of all {@code r1}, {@code r2}, {@code u}, {@code v}, {@code w}</em>
<a class="jxr_linenumber" name="L1357" href="#L1357">1357</a> <em class="jxr_javadoccomment">     * and  {@code comp} as above, {@code comp} could also be computed as</em>
<a class="jxr_linenumber" name="L1358" href="#L1358">1358</a> <em class="jxr_javadoccomment">     * {@code comp = r1.compose(r2, RotationConvention.FRAME_TRANSFORM)}.</em>
<a class="jxr_linenumber" name="L1359" href="#L1359">1359</a> <em class="jxr_javadoccomment">     * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L1360" href="#L1360">1360</a> <em class="jxr_javadoccomment">     * @param r rotation to apply the rotation to</em>
<a class="jxr_linenumber" name="L1361" href="#L1361">1361</a> <em class="jxr_javadoccomment">     * @param convention convention to use for the semantics of the angle</em>
<a class="jxr_linenumber" name="L1362" href="#L1362">1362</a> <em class="jxr_javadoccomment">     * @return a new rotation which is the composition of r by the instance</em>
<a class="jxr_linenumber" name="L1363" href="#L1363">1363</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L1364" href="#L1364">1364</a>     <strong class="jxr_keyword">public</strong> FieldRotation&lt;T&gt; compose(<strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/Rotation.html">Rotation</a> r, <strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/RotationConvention.html">RotationConvention</a> convention) {
<a class="jxr_linenumber" name="L1365" href="#L1365">1365</a>         <strong class="jxr_keyword">return</strong> convention == RotationConvention.VECTOR_OPERATOR ?
<a class="jxr_linenumber" name="L1366" href="#L1366">1366</a>                              composeInternal(r) : applyTo(r, <strong class="jxr_keyword">this</strong>);
<a class="jxr_linenumber" name="L1367" href="#L1367">1367</a>     }
<a class="jxr_linenumber" name="L1368" href="#L1368">1368</a> 
<a class="jxr_linenumber" name="L1369" href="#L1369">1369</a>     <em class="jxr_javadoccomment">/** Compose the instance with another rotation using vector operator convention.</em>
<a class="jxr_linenumber" name="L1370" href="#L1370">1370</a> <em class="jxr_javadoccomment">     * @param r rotation to apply the rotation to</em>
<a class="jxr_linenumber" name="L1371" href="#L1371">1371</a> <em class="jxr_javadoccomment">     * @return a new rotation which is the composition of r by the instance</em>
<a class="jxr_linenumber" name="L1372" href="#L1372">1372</a> <em class="jxr_javadoccomment">     * using vector operator convention</em>
<a class="jxr_linenumber" name="L1373" href="#L1373">1373</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L1374" href="#L1374">1374</a>     <strong class="jxr_keyword">private</strong> FieldRotation&lt;T&gt; composeInternal(<strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/Rotation.html">Rotation</a> r) {
<a class="jxr_linenumber" name="L1375" href="#L1375">1375</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> FieldRotation&lt;T&gt;(q0.multiply(r.getQ0()).subtract(q1.multiply(r.getQ1()).add(q2.multiply(r.getQ2())).add(q3.multiply(r.getQ3()))),
<a class="jxr_linenumber" name="L1376" href="#L1376">1376</a>                         q0.multiply(r.getQ1()).add(q1.multiply(r.getQ0())).add(q3.multiply(r.getQ2()).subtract(q2.multiply(r.getQ3()))),
<a class="jxr_linenumber" name="L1377" href="#L1377">1377</a>                         q0.multiply(r.getQ2()).add(q2.multiply(r.getQ0())).add(q1.multiply(r.getQ3()).subtract(q3.multiply(r.getQ1()))),
<a class="jxr_linenumber" name="L1378" href="#L1378">1378</a>                         q0.multiply(r.getQ3()).add(q3.multiply(r.getQ0())).add(q2.multiply(r.getQ1()).subtract(q1.multiply(r.getQ2()))),
<a class="jxr_linenumber" name="L1379" href="#L1379">1379</a>                         false);
<a class="jxr_linenumber" name="L1380" href="#L1380">1380</a>     }
<a class="jxr_linenumber" name="L1381" href="#L1381">1381</a> 
<a class="jxr_linenumber" name="L1382" href="#L1382">1382</a>     <em class="jxr_javadoccomment">/** Apply a rotation to another rotation.</em>
<a class="jxr_linenumber" name="L1383" href="#L1383">1383</a> <em class="jxr_javadoccomment">     * Applying a rotation to another rotation is computing the composition</em>
<a class="jxr_linenumber" name="L1384" href="#L1384">1384</a> <em class="jxr_javadoccomment">     * in an order compliant with the following rule : let u be any</em>
<a class="jxr_linenumber" name="L1385" href="#L1385">1385</a> <em class="jxr_javadoccomment">     * vector and v its image by rInner (i.e. rInner.applyTo(u) = v), let w be the image</em>
<a class="jxr_linenumber" name="L1386" href="#L1386">1386</a> <em class="jxr_javadoccomment">     * of v by rOuter (i.e. rOuter.applyTo(v) = w), then w = comp.applyTo(u),</em>
<a class="jxr_linenumber" name="L1387" href="#L1387">1387</a> <em class="jxr_javadoccomment">     * where comp = applyTo(rOuter, rInner).</em>
<a class="jxr_linenumber" name="L1388" href="#L1388">1388</a> <em class="jxr_javadoccomment">     * @param r1 rotation to apply</em>
<a class="jxr_linenumber" name="L1389" href="#L1389">1389</a> <em class="jxr_javadoccomment">     * @param rInner rotation to apply the rotation to</em>
<a class="jxr_linenumber" name="L1390" href="#L1390">1390</a> <em class="jxr_javadoccomment">     * @param &lt;T&gt; the type of the field elements</em>
<a class="jxr_linenumber" name="L1391" href="#L1391">1391</a> <em class="jxr_javadoccomment">     * @return a new rotation which is the composition of r by the instance</em>
<a class="jxr_linenumber" name="L1392" href="#L1392">1392</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L1393" href="#L1393">1393</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> &lt;T <strong class="jxr_keyword">extends</strong> RealFieldElement&lt;T&gt;&gt; FieldRotation&lt;T&gt; applyTo(<strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/Rotation.html">Rotation</a> r1, <strong class="jxr_keyword">final</strong> FieldRotation&lt;T&gt; rInner) {
<a class="jxr_linenumber" name="L1394" href="#L1394">1394</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> FieldRotation&lt;T&gt;(rInner.q0.multiply(r1.getQ0()).subtract(rInner.q1.multiply(r1.getQ1()).add(rInner.q2.multiply(r1.getQ2())).add(rInner.q3.multiply(r1.getQ3()))),
<a class="jxr_linenumber" name="L1395" href="#L1395">1395</a>                                     rInner.q1.multiply(r1.getQ0()).add(rInner.q0.multiply(r1.getQ1())).add(rInner.q2.multiply(r1.getQ3()).subtract(rInner.q3.multiply(r1.getQ2()))),
<a class="jxr_linenumber" name="L1396" href="#L1396">1396</a>                                     rInner.q2.multiply(r1.getQ0()).add(rInner.q0.multiply(r1.getQ2())).add(rInner.q3.multiply(r1.getQ1()).subtract(rInner.q1.multiply(r1.getQ3()))),
<a class="jxr_linenumber" name="L1397" href="#L1397">1397</a>                                     rInner.q3.multiply(r1.getQ0()).add(rInner.q0.multiply(r1.getQ3())).add(rInner.q1.multiply(r1.getQ2()).subtract(rInner.q2.multiply(r1.getQ1()))),
<a class="jxr_linenumber" name="L1398" href="#L1398">1398</a>                                     false);
<a class="jxr_linenumber" name="L1399" href="#L1399">1399</a>     }
<a class="jxr_linenumber" name="L1400" href="#L1400">1400</a> 
<a class="jxr_linenumber" name="L1401" href="#L1401">1401</a>     <em class="jxr_javadoccomment">/** Apply the inverse of the instance to another rotation.</em>
<a class="jxr_linenumber" name="L1402" href="#L1402">1402</a> <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L1403" href="#L1403">1403</a> <em class="jxr_javadoccomment">     * Calling this method is equivalent to call</em>
<a class="jxr_linenumber" name="L1404" href="#L1404">1404</a> <em class="jxr_javadoccomment">     * {@link #composeInverse(FieldRotation, RotationConvention)</em>
<a class="jxr_linenumber" name="L1405" href="#L1405">1405</a> <em class="jxr_javadoccomment">     * composeInverse(r, RotationConvention.VECTOR_OPERATOR)}.</em>
<a class="jxr_linenumber" name="L1406" href="#L1406">1406</a> <em class="jxr_javadoccomment">     * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L1407" href="#L1407">1407</a> <em class="jxr_javadoccomment">     * @param r rotation to apply the rotation to</em>
<a class="jxr_linenumber" name="L1408" href="#L1408">1408</a> <em class="jxr_javadoccomment">     * @return a new rotation which is the composition of r by the inverse</em>
<a class="jxr_linenumber" name="L1409" href="#L1409">1409</a> <em class="jxr_javadoccomment">     * of the instance</em>
<a class="jxr_linenumber" name="L1410" href="#L1410">1410</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L1411" href="#L1411">1411</a>     <strong class="jxr_keyword">public</strong> FieldRotation&lt;T&gt; applyInverseTo(<strong class="jxr_keyword">final</strong> FieldRotation&lt;T&gt; r) {
<a class="jxr_linenumber" name="L1412" href="#L1412">1412</a>         <strong class="jxr_keyword">return</strong> composeInverse(r, RotationConvention.VECTOR_OPERATOR);
<a class="jxr_linenumber" name="L1413" href="#L1413">1413</a>     }
<a class="jxr_linenumber" name="L1414" href="#L1414">1414</a> 
<a class="jxr_linenumber" name="L1415" href="#L1415">1415</a>     <em class="jxr_javadoccomment">/** Compose the inverse of the instance with another rotation.</em>
<a class="jxr_linenumber" name="L1416" href="#L1416">1416</a> <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L1417" href="#L1417">1417</a> <em class="jxr_javadoccomment">     * If the semantics of the rotations composition corresponds to a</em>
<a class="jxr_linenumber" name="L1418" href="#L1418">1418</a> <em class="jxr_javadoccomment">     * {@link RotationConvention#VECTOR_OPERATOR vector operator} convention,</em>
<a class="jxr_linenumber" name="L1419" href="#L1419">1419</a> <em class="jxr_javadoccomment">     * applying the inverse of the instance to a rotation is computing</em>
<a class="jxr_linenumber" name="L1420" href="#L1420">1420</a> <em class="jxr_javadoccomment">     * the composition in an order compliant with the following rule :</em>
<a class="jxr_linenumber" name="L1421" href="#L1421">1421</a> <em class="jxr_javadoccomment">     * let {@code u} be any vector and {@code v} its image by {@code r1}</em>
<a class="jxr_linenumber" name="L1422" href="#L1422">1422</a> <em class="jxr_javadoccomment">     * (i.e. {@code r1.applyTo(u) = v}). Let {@code w} be the inverse image</em>
<a class="jxr_linenumber" name="L1423" href="#L1423">1423</a> <em class="jxr_javadoccomment">     * of {@code v} by {@code r2} (i.e. {@code r2.applyInverseTo(v) = w}).</em>
<a class="jxr_linenumber" name="L1424" href="#L1424">1424</a> <em class="jxr_javadoccomment">     * Then {@code w = comp.applyTo(u)}, where</em>
<a class="jxr_linenumber" name="L1425" href="#L1425">1425</a> <em class="jxr_javadoccomment">     * {@code comp = r2.composeInverse(r1)}.</em>
<a class="jxr_linenumber" name="L1426" href="#L1426">1426</a> <em class="jxr_javadoccomment">     * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L1427" href="#L1427">1427</a> <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L1428" href="#L1428">1428</a> <em class="jxr_javadoccomment">     * If the semantics of the rotations composition corresponds to a</em>
<a class="jxr_linenumber" name="L1429" href="#L1429">1429</a> <em class="jxr_javadoccomment">     * {@link RotationConvention#FRAME_TRANSFORM frame transform} convention,</em>
<a class="jxr_linenumber" name="L1430" href="#L1430">1430</a> <em class="jxr_javadoccomment">     * the application order will be reversed, which means it is the</em>
<a class="jxr_linenumber" name="L1431" href="#L1431">1431</a> <em class="jxr_javadoccomment">     * &lt;em&gt;innermost&lt;/em&gt; rotation that will be reversed. So keeping the exact same</em>
<a class="jxr_linenumber" name="L1432" href="#L1432">1432</a> <em class="jxr_javadoccomment">     * meaning of all {@code r1}, {@code r2}, {@code u}, {@code v}, {@code w}</em>
<a class="jxr_linenumber" name="L1433" href="#L1433">1433</a> <em class="jxr_javadoccomment">     * and  {@code comp} as above, {@code comp} could also be computed as</em>
<a class="jxr_linenumber" name="L1434" href="#L1434">1434</a> <em class="jxr_javadoccomment">     * {@code comp = r1.revert().composeInverse(r2.revert(), RotationConvention.FRAME_TRANSFORM)}.</em>
<a class="jxr_linenumber" name="L1435" href="#L1435">1435</a> <em class="jxr_javadoccomment">     * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L1436" href="#L1436">1436</a> <em class="jxr_javadoccomment">     * @param r rotation to apply the rotation to</em>
<a class="jxr_linenumber" name="L1437" href="#L1437">1437</a> <em class="jxr_javadoccomment">     * @param convention convention to use for the semantics of the angle</em>
<a class="jxr_linenumber" name="L1438" href="#L1438">1438</a> <em class="jxr_javadoccomment">     * @return a new rotation which is the composition of r by the inverse</em>
<a class="jxr_linenumber" name="L1439" href="#L1439">1439</a> <em class="jxr_javadoccomment">     * of the instance</em>
<a class="jxr_linenumber" name="L1440" href="#L1440">1440</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L1441" href="#L1441">1441</a>     <strong class="jxr_keyword">public</strong> FieldRotation&lt;T&gt; composeInverse(<strong class="jxr_keyword">final</strong> FieldRotation&lt;T&gt; r, <strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/RotationConvention.html">RotationConvention</a> convention) {
<a class="jxr_linenumber" name="L1442" href="#L1442">1442</a>         <strong class="jxr_keyword">return</strong> convention == RotationConvention.VECTOR_OPERATOR ?
<a class="jxr_linenumber" name="L1443" href="#L1443">1443</a>                              composeInverseInternal(r) : r.composeInternal(revert());
<a class="jxr_linenumber" name="L1444" href="#L1444">1444</a>     }
<a class="jxr_linenumber" name="L1445" href="#L1445">1445</a> 
<a class="jxr_linenumber" name="L1446" href="#L1446">1446</a>     <em class="jxr_javadoccomment">/** Compose the inverse of the instance with another rotation</em>
<a class="jxr_linenumber" name="L1447" href="#L1447">1447</a> <em class="jxr_javadoccomment">     * using vector operator convention.</em>
<a class="jxr_linenumber" name="L1448" href="#L1448">1448</a> <em class="jxr_javadoccomment">     * @param r rotation to apply the rotation to</em>
<a class="jxr_linenumber" name="L1449" href="#L1449">1449</a> <em class="jxr_javadoccomment">     * @return a new rotation which is the composition of r by the inverse</em>
<a class="jxr_linenumber" name="L1450" href="#L1450">1450</a> <em class="jxr_javadoccomment">     * of the instance using vector operator convention</em>
<a class="jxr_linenumber" name="L1451" href="#L1451">1451</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L1452" href="#L1452">1452</a>     <strong class="jxr_keyword">private</strong> FieldRotation&lt;T&gt; composeInverseInternal(FieldRotation&lt;T&gt; r) {
<a class="jxr_linenumber" name="L1453" href="#L1453">1453</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> FieldRotation&lt;T&gt;(r.q0.multiply(q0).add(r.q1.multiply(q1).add(r.q2.multiply(q2)).add(r.q3.multiply(q3))).negate(),
<a class="jxr_linenumber" name="L1454" href="#L1454">1454</a>                                     r.q0.multiply(q1).add(r.q2.multiply(q3).subtract(r.q3.multiply(q2))).subtract(r.q1.multiply(q0)),
<a class="jxr_linenumber" name="L1455" href="#L1455">1455</a>                                     r.q0.multiply(q2).add(r.q3.multiply(q1).subtract(r.q1.multiply(q3))).subtract(r.q2.multiply(q0)),
<a class="jxr_linenumber" name="L1456" href="#L1456">1456</a>                                     r.q0.multiply(q3).add(r.q1.multiply(q2).subtract(r.q2.multiply(q1))).subtract(r.q3.multiply(q0)),
<a class="jxr_linenumber" name="L1457" href="#L1457">1457</a>                                     false);
<a class="jxr_linenumber" name="L1458" href="#L1458">1458</a>     }
<a class="jxr_linenumber" name="L1459" href="#L1459">1459</a> 
<a class="jxr_linenumber" name="L1460" href="#L1460">1460</a>     <em class="jxr_javadoccomment">/** Apply the inverse of the instance to another rotation.</em>
<a class="jxr_linenumber" name="L1461" href="#L1461">1461</a> <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L1462" href="#L1462">1462</a> <em class="jxr_javadoccomment">     * Calling this method is equivalent to call</em>
<a class="jxr_linenumber" name="L1463" href="#L1463">1463</a> <em class="jxr_javadoccomment">     * {@link #composeInverse(Rotation, RotationConvention)</em>
<a class="jxr_linenumber" name="L1464" href="#L1464">1464</a> <em class="jxr_javadoccomment">     * composeInverse(r, RotationConvention.VECTOR_OPERATOR)}.</em>
<a class="jxr_linenumber" name="L1465" href="#L1465">1465</a> <em class="jxr_javadoccomment">     * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L1466" href="#L1466">1466</a> <em class="jxr_javadoccomment">     * @param r rotation to apply the rotation to</em>
<a class="jxr_linenumber" name="L1467" href="#L1467">1467</a> <em class="jxr_javadoccomment">     * @return a new rotation which is the composition of r by the inverse</em>
<a class="jxr_linenumber" name="L1468" href="#L1468">1468</a> <em class="jxr_javadoccomment">     * of the instance</em>
<a class="jxr_linenumber" name="L1469" href="#L1469">1469</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L1470" href="#L1470">1470</a>     <strong class="jxr_keyword">public</strong> FieldRotation&lt;T&gt; applyInverseTo(<strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/Rotation.html">Rotation</a> r) {
<a class="jxr_linenumber" name="L1471" href="#L1471">1471</a>         <strong class="jxr_keyword">return</strong> composeInverse(r, RotationConvention.VECTOR_OPERATOR);
<a class="jxr_linenumber" name="L1472" href="#L1472">1472</a>     }
<a class="jxr_linenumber" name="L1473" href="#L1473">1473</a> 
<a class="jxr_linenumber" name="L1474" href="#L1474">1474</a>     <em class="jxr_javadoccomment">/** Compose the inverse of the instance with another rotation.</em>
<a class="jxr_linenumber" name="L1475" href="#L1475">1475</a> <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L1476" href="#L1476">1476</a> <em class="jxr_javadoccomment">     * If the semantics of the rotations composition corresponds to a</em>
<a class="jxr_linenumber" name="L1477" href="#L1477">1477</a> <em class="jxr_javadoccomment">     * {@link RotationConvention#VECTOR_OPERATOR vector operator} convention,</em>
<a class="jxr_linenumber" name="L1478" href="#L1478">1478</a> <em class="jxr_javadoccomment">     * applying the inverse of the instance to a rotation is computing</em>
<a class="jxr_linenumber" name="L1479" href="#L1479">1479</a> <em class="jxr_javadoccomment">     * the composition in an order compliant with the following rule :</em>
<a class="jxr_linenumber" name="L1480" href="#L1480">1480</a> <em class="jxr_javadoccomment">     * let {@code u} be any vector and {@code v} its image by {@code r1}</em>
<a class="jxr_linenumber" name="L1481" href="#L1481">1481</a> <em class="jxr_javadoccomment">     * (i.e. {@code r1.applyTo(u) = v}). Let {@code w} be the inverse image</em>
<a class="jxr_linenumber" name="L1482" href="#L1482">1482</a> <em class="jxr_javadoccomment">     * of {@code v} by {@code r2} (i.e. {@code r2.applyInverseTo(v) = w}).</em>
<a class="jxr_linenumber" name="L1483" href="#L1483">1483</a> <em class="jxr_javadoccomment">     * Then {@code w = comp.applyTo(u)}, where</em>
<a class="jxr_linenumber" name="L1484" href="#L1484">1484</a> <em class="jxr_javadoccomment">     * {@code comp = r2.composeInverse(r1)}.</em>
<a class="jxr_linenumber" name="L1485" href="#L1485">1485</a> <em class="jxr_javadoccomment">     * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L1486" href="#L1486">1486</a> <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L1487" href="#L1487">1487</a> <em class="jxr_javadoccomment">     * If the semantics of the rotations composition corresponds to a</em>
<a class="jxr_linenumber" name="L1488" href="#L1488">1488</a> <em class="jxr_javadoccomment">     * {@link RotationConvention#FRAME_TRANSFORM frame transform} convention,</em>
<a class="jxr_linenumber" name="L1489" href="#L1489">1489</a> <em class="jxr_javadoccomment">     * the application order will be reversed, which means it is the</em>
<a class="jxr_linenumber" name="L1490" href="#L1490">1490</a> <em class="jxr_javadoccomment">     * &lt;em&gt;innermost&lt;/em&gt; rotation that will be reversed. So keeping the exact same</em>
<a class="jxr_linenumber" name="L1491" href="#L1491">1491</a> <em class="jxr_javadoccomment">     * meaning of all {@code r1}, {@code r2}, {@code u}, {@code v}, {@code w}</em>
<a class="jxr_linenumber" name="L1492" href="#L1492">1492</a> <em class="jxr_javadoccomment">     * and  {@code comp} as above, {@code comp} could also be computed as</em>
<a class="jxr_linenumber" name="L1493" href="#L1493">1493</a> <em class="jxr_javadoccomment">     * {@code comp = r1.revert().composeInverse(r2.revert(), RotationConvention.FRAME_TRANSFORM)}.</em>
<a class="jxr_linenumber" name="L1494" href="#L1494">1494</a> <em class="jxr_javadoccomment">     * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L1495" href="#L1495">1495</a> <em class="jxr_javadoccomment">     * @param r rotation to apply the rotation to</em>
<a class="jxr_linenumber" name="L1496" href="#L1496">1496</a> <em class="jxr_javadoccomment">     * @param convention convention to use for the semantics of the angle</em>
<a class="jxr_linenumber" name="L1497" href="#L1497">1497</a> <em class="jxr_javadoccomment">     * @return a new rotation which is the composition of r by the inverse</em>
<a class="jxr_linenumber" name="L1498" href="#L1498">1498</a> <em class="jxr_javadoccomment">     * of the instance</em>
<a class="jxr_linenumber" name="L1499" href="#L1499">1499</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L1500" href="#L1500">1500</a>     <strong class="jxr_keyword">public</strong> FieldRotation&lt;T&gt; composeInverse(<strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/Rotation.html">Rotation</a> r, <strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/RotationConvention.html">RotationConvention</a> convention) {
<a class="jxr_linenumber" name="L1501" href="#L1501">1501</a>         <strong class="jxr_keyword">return</strong> convention == RotationConvention.VECTOR_OPERATOR ?
<a class="jxr_linenumber" name="L1502" href="#L1502">1502</a>                              composeInverseInternal(r) : applyTo(r, revert());
<a class="jxr_linenumber" name="L1503" href="#L1503">1503</a>     }
<a class="jxr_linenumber" name="L1504" href="#L1504">1504</a> 
<a class="jxr_linenumber" name="L1505" href="#L1505">1505</a>     <em class="jxr_javadoccomment">/** Compose the inverse of the instance with another rotation</em>
<a class="jxr_linenumber" name="L1506" href="#L1506">1506</a> <em class="jxr_javadoccomment">     * using vector operator convention.</em>
<a class="jxr_linenumber" name="L1507" href="#L1507">1507</a> <em class="jxr_javadoccomment">     * @param r rotation to apply the rotation to</em>
<a class="jxr_linenumber" name="L1508" href="#L1508">1508</a> <em class="jxr_javadoccomment">     * @return a new rotation which is the composition of r by the inverse</em>
<a class="jxr_linenumber" name="L1509" href="#L1509">1509</a> <em class="jxr_javadoccomment">     * of the instance using vector operator convention</em>
<a class="jxr_linenumber" name="L1510" href="#L1510">1510</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L1511" href="#L1511">1511</a>     <strong class="jxr_keyword">private</strong> FieldRotation&lt;T&gt; composeInverseInternal(<a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/Rotation.html">Rotation</a> r) {
<a class="jxr_linenumber" name="L1512" href="#L1512">1512</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> FieldRotation&lt;T&gt;(q0.multiply(r.getQ0()).add(q1.multiply(r.getQ1()).add(q2.multiply(r.getQ2())).add(q3.multiply(r.getQ3()))).negate(),
<a class="jxr_linenumber" name="L1513" href="#L1513">1513</a>                                     q1.multiply(r.getQ0()).add(q3.multiply(r.getQ2()).subtract(q2.multiply(r.getQ3()))).subtract(q0.multiply(r.getQ1())),
<a class="jxr_linenumber" name="L1514" href="#L1514">1514</a>                                     q2.multiply(r.getQ0()).add(q1.multiply(r.getQ3()).subtract(q3.multiply(r.getQ1()))).subtract(q0.multiply(r.getQ2())),
<a class="jxr_linenumber" name="L1515" href="#L1515">1515</a>                                     q3.multiply(r.getQ0()).add(q2.multiply(r.getQ1()).subtract(q1.multiply(r.getQ2()))).subtract(q0.multiply(r.getQ3())),
<a class="jxr_linenumber" name="L1516" href="#L1516">1516</a>                                     false);
<a class="jxr_linenumber" name="L1517" href="#L1517">1517</a>     }
<a class="jxr_linenumber" name="L1518" href="#L1518">1518</a> 
<a class="jxr_linenumber" name="L1519" href="#L1519">1519</a>     <em class="jxr_javadoccomment">/** Apply the inverse of a rotation to another rotation.</em>
<a class="jxr_linenumber" name="L1520" href="#L1520">1520</a> <em class="jxr_javadoccomment">     * Applying the inverse of a rotation to another rotation is computing</em>
<a class="jxr_linenumber" name="L1521" href="#L1521">1521</a> <em class="jxr_javadoccomment">     * the composition in an order compliant with the following rule :</em>
<a class="jxr_linenumber" name="L1522" href="#L1522">1522</a> <em class="jxr_javadoccomment">     * let u be any vector and v its image by rInner (i.e. rInner.applyTo(u) = v),</em>
<a class="jxr_linenumber" name="L1523" href="#L1523">1523</a> <em class="jxr_javadoccomment">     * let w be the inverse image of v by rOuter</em>
<a class="jxr_linenumber" name="L1524" href="#L1524">1524</a> <em class="jxr_javadoccomment">     * (i.e. rOuter.applyInverseTo(v) = w), then w = comp.applyTo(u), where</em>
<a class="jxr_linenumber" name="L1525" href="#L1525">1525</a> <em class="jxr_javadoccomment">     * comp = applyInverseTo(rOuter, rInner).</em>
<a class="jxr_linenumber" name="L1526" href="#L1526">1526</a> <em class="jxr_javadoccomment">     * @param rOuter rotation to apply the rotation to</em>
<a class="jxr_linenumber" name="L1527" href="#L1527">1527</a> <em class="jxr_javadoccomment">     * @param rInner rotation to apply the rotation to</em>
<a class="jxr_linenumber" name="L1528" href="#L1528">1528</a> <em class="jxr_javadoccomment">     * @param &lt;T&gt; the type of the field elements</em>
<a class="jxr_linenumber" name="L1529" href="#L1529">1529</a> <em class="jxr_javadoccomment">     * @return a new rotation which is the composition of r by the inverse</em>
<a class="jxr_linenumber" name="L1530" href="#L1530">1530</a> <em class="jxr_javadoccomment">     * of the instance</em>
<a class="jxr_linenumber" name="L1531" href="#L1531">1531</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L1532" href="#L1532">1532</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> &lt;T <strong class="jxr_keyword">extends</strong> RealFieldElement&lt;T&gt;&gt; FieldRotation&lt;T&gt; applyInverseTo(<strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/Rotation.html">Rotation</a> rOuter, <strong class="jxr_keyword">final</strong> FieldRotation&lt;T&gt; rInner) {
<a class="jxr_linenumber" name="L1533" href="#L1533">1533</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> FieldRotation&lt;T&gt;(rInner.q0.multiply(rOuter.getQ0()).add(rInner.q1.multiply(rOuter.getQ1()).add(rInner.q2.multiply(rOuter.getQ2())).add(rInner.q3.multiply(rOuter.getQ3()))).negate(),
<a class="jxr_linenumber" name="L1534" href="#L1534">1534</a>                                     rInner.q0.multiply(rOuter.getQ1()).add(rInner.q2.multiply(rOuter.getQ3()).subtract(rInner.q3.multiply(rOuter.getQ2()))).subtract(rInner.q1.multiply(rOuter.getQ0())),
<a class="jxr_linenumber" name="L1535" href="#L1535">1535</a>                                     rInner.q0.multiply(rOuter.getQ2()).add(rInner.q3.multiply(rOuter.getQ1()).subtract(rInner.q1.multiply(rOuter.getQ3()))).subtract(rInner.q2.multiply(rOuter.getQ0())),
<a class="jxr_linenumber" name="L1536" href="#L1536">1536</a>                                     rInner.q0.multiply(rOuter.getQ3()).add(rInner.q1.multiply(rOuter.getQ2()).subtract(rInner.q2.multiply(rOuter.getQ1()))).subtract(rInner.q3.multiply(rOuter.getQ0())),
<a class="jxr_linenumber" name="L1537" href="#L1537">1537</a>                                     false);
<a class="jxr_linenumber" name="L1538" href="#L1538">1538</a>     }
<a class="jxr_linenumber" name="L1539" href="#L1539">1539</a> 
<a class="jxr_linenumber" name="L1540" href="#L1540">1540</a>     <em class="jxr_javadoccomment">/** Perfect orthogonality on a 3X3 matrix.</em>
<a class="jxr_linenumber" name="L1541" href="#L1541">1541</a> <em class="jxr_javadoccomment">     * @param m initial matrix (not exactly orthogonal)</em>
<a class="jxr_linenumber" name="L1542" href="#L1542">1542</a> <em class="jxr_javadoccomment">     * @param threshold convergence threshold for the iterative</em>
<a class="jxr_linenumber" name="L1543" href="#L1543">1543</a> <em class="jxr_javadoccomment">     * orthogonality correction (convergence is reached when the</em>
<a class="jxr_linenumber" name="L1544" href="#L1544">1544</a> <em class="jxr_javadoccomment">     * difference between two steps of the Frobenius norm of the</em>
<a class="jxr_linenumber" name="L1545" href="#L1545">1545</a> <em class="jxr_javadoccomment">     * correction is below this threshold)</em>
<a class="jxr_linenumber" name="L1546" href="#L1546">1546</a> <em class="jxr_javadoccomment">     * @return an orthogonal matrix close to m</em>
<a class="jxr_linenumber" name="L1547" href="#L1547">1547</a> <em class="jxr_javadoccomment">     * @exception NotARotationMatrixException if the matrix cannot be</em>
<a class="jxr_linenumber" name="L1548" href="#L1548">1548</a> <em class="jxr_javadoccomment">     * orthogonalized with the given threshold after 10 iterations</em>
<a class="jxr_linenumber" name="L1549" href="#L1549">1549</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L1550" href="#L1550">1550</a>     <strong class="jxr_keyword">private</strong> T[][] orthogonalizeMatrix(<strong class="jxr_keyword">final</strong> T[][] m, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> threshold)
<a class="jxr_linenumber" name="L1551" href="#L1551">1551</a>         <strong class="jxr_keyword">throws</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/NotARotationMatrixException.html">NotARotationMatrixException</a> {
<a class="jxr_linenumber" name="L1552" href="#L1552">1552</a> 
<a class="jxr_linenumber" name="L1553" href="#L1553">1553</a>         T x00 = m[0][0];
<a class="jxr_linenumber" name="L1554" href="#L1554">1554</a>         T x01 = m[0][1];
<a class="jxr_linenumber" name="L1555" href="#L1555">1555</a>         T x02 = m[0][2];
<a class="jxr_linenumber" name="L1556" href="#L1556">1556</a>         T x10 = m[1][0];
<a class="jxr_linenumber" name="L1557" href="#L1557">1557</a>         T x11 = m[1][1];
<a class="jxr_linenumber" name="L1558" href="#L1558">1558</a>         T x12 = m[1][2];
<a class="jxr_linenumber" name="L1559" href="#L1559">1559</a>         T x20 = m[2][0];
<a class="jxr_linenumber" name="L1560" href="#L1560">1560</a>         T x21 = m[2][1];
<a class="jxr_linenumber" name="L1561" href="#L1561">1561</a>         T x22 = m[2][2];
<a class="jxr_linenumber" name="L1562" href="#L1562">1562</a>         <strong class="jxr_keyword">double</strong> fn = 0;
<a class="jxr_linenumber" name="L1563" href="#L1563">1563</a>         <strong class="jxr_keyword">double</strong> fn1;
<a class="jxr_linenumber" name="L1564" href="#L1564">1564</a> 
<a class="jxr_linenumber" name="L1565" href="#L1565">1565</a>         <strong class="jxr_keyword">final</strong> T[][] o = MathArrays.buildArray(m[0][0].getField(), 3, 3);
<a class="jxr_linenumber" name="L1566" href="#L1566">1566</a> 
<a class="jxr_linenumber" name="L1567" href="#L1567">1567</a>         <em class="jxr_comment">// iterative correction: Xn+1 = Xn - 0.5 * (Xn.Mt.Xn - M)</em>
<a class="jxr_linenumber" name="L1568" href="#L1568">1568</a>         <strong class="jxr_keyword">int</strong> i = 0;
<a class="jxr_linenumber" name="L1569" href="#L1569">1569</a>         <strong class="jxr_keyword">while</strong> (++i &lt; 11) {
<a class="jxr_linenumber" name="L1570" href="#L1570">1570</a> 
<a class="jxr_linenumber" name="L1571" href="#L1571">1571</a>             <em class="jxr_comment">// Mt.Xn</em>
<a class="jxr_linenumber" name="L1572" href="#L1572">1572</a>             <strong class="jxr_keyword">final</strong> T mx00 = m[0][0].multiply(x00).add(m[1][0].multiply(x10)).add(m[2][0].multiply(x20));
<a class="jxr_linenumber" name="L1573" href="#L1573">1573</a>             <strong class="jxr_keyword">final</strong> T mx10 = m[0][1].multiply(x00).add(m[1][1].multiply(x10)).add(m[2][1].multiply(x20));
<a class="jxr_linenumber" name="L1574" href="#L1574">1574</a>             <strong class="jxr_keyword">final</strong> T mx20 = m[0][2].multiply(x00).add(m[1][2].multiply(x10)).add(m[2][2].multiply(x20));
<a class="jxr_linenumber" name="L1575" href="#L1575">1575</a>             <strong class="jxr_keyword">final</strong> T mx01 = m[0][0].multiply(x01).add(m[1][0].multiply(x11)).add(m[2][0].multiply(x21));
<a class="jxr_linenumber" name="L1576" href="#L1576">1576</a>             <strong class="jxr_keyword">final</strong> T mx11 = m[0][1].multiply(x01).add(m[1][1].multiply(x11)).add(m[2][1].multiply(x21));
<a class="jxr_linenumber" name="L1577" href="#L1577">1577</a>             <strong class="jxr_keyword">final</strong> T mx21 = m[0][2].multiply(x01).add(m[1][2].multiply(x11)).add(m[2][2].multiply(x21));
<a class="jxr_linenumber" name="L1578" href="#L1578">1578</a>             <strong class="jxr_keyword">final</strong> T mx02 = m[0][0].multiply(x02).add(m[1][0].multiply(x12)).add(m[2][0].multiply(x22));
<a class="jxr_linenumber" name="L1579" href="#L1579">1579</a>             <strong class="jxr_keyword">final</strong> T mx12 = m[0][1].multiply(x02).add(m[1][1].multiply(x12)).add(m[2][1].multiply(x22));
<a class="jxr_linenumber" name="L1580" href="#L1580">1580</a>             <strong class="jxr_keyword">final</strong> T mx22 = m[0][2].multiply(x02).add(m[1][2].multiply(x12)).add(m[2][2].multiply(x22));
<a class="jxr_linenumber" name="L1581" href="#L1581">1581</a> 
<a class="jxr_linenumber" name="L1582" href="#L1582">1582</a>             <em class="jxr_comment">// Xn+1</em>
<a class="jxr_linenumber" name="L1583" href="#L1583">1583</a>             o[0][0] = x00.subtract(x00.multiply(mx00).add(x01.multiply(mx10)).add(x02.multiply(mx20)).subtract(m[0][0]).multiply(0.5));
<a class="jxr_linenumber" name="L1584" href="#L1584">1584</a>             o[0][1] = x01.subtract(x00.multiply(mx01).add(x01.multiply(mx11)).add(x02.multiply(mx21)).subtract(m[0][1]).multiply(0.5));
<a class="jxr_linenumber" name="L1585" href="#L1585">1585</a>             o[0][2] = x02.subtract(x00.multiply(mx02).add(x01.multiply(mx12)).add(x02.multiply(mx22)).subtract(m[0][2]).multiply(0.5));
<a class="jxr_linenumber" name="L1586" href="#L1586">1586</a>             o[1][0] = x10.subtract(x10.multiply(mx00).add(x11.multiply(mx10)).add(x12.multiply(mx20)).subtract(m[1][0]).multiply(0.5));
<a class="jxr_linenumber" name="L1587" href="#L1587">1587</a>             o[1][1] = x11.subtract(x10.multiply(mx01).add(x11.multiply(mx11)).add(x12.multiply(mx21)).subtract(m[1][1]).multiply(0.5));
<a class="jxr_linenumber" name="L1588" href="#L1588">1588</a>             o[1][2] = x12.subtract(x10.multiply(mx02).add(x11.multiply(mx12)).add(x12.multiply(mx22)).subtract(m[1][2]).multiply(0.5));
<a class="jxr_linenumber" name="L1589" href="#L1589">1589</a>             o[2][0] = x20.subtract(x20.multiply(mx00).add(x21.multiply(mx10)).add(x22.multiply(mx20)).subtract(m[2][0]).multiply(0.5));
<a class="jxr_linenumber" name="L1590" href="#L1590">1590</a>             o[2][1] = x21.subtract(x20.multiply(mx01).add(x21.multiply(mx11)).add(x22.multiply(mx21)).subtract(m[2][1]).multiply(0.5));
<a class="jxr_linenumber" name="L1591" href="#L1591">1591</a>             o[2][2] = x22.subtract(x20.multiply(mx02).add(x21.multiply(mx12)).add(x22.multiply(mx22)).subtract(m[2][2]).multiply(0.5));
<a class="jxr_linenumber" name="L1592" href="#L1592">1592</a> 
<a class="jxr_linenumber" name="L1593" href="#L1593">1593</a>             <em class="jxr_comment">// correction on each elements</em>
<a class="jxr_linenumber" name="L1594" href="#L1594">1594</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> corr00 = o[0][0].getReal() - m[0][0].getReal();
<a class="jxr_linenumber" name="L1595" href="#L1595">1595</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> corr01 = o[0][1].getReal() - m[0][1].getReal();
<a class="jxr_linenumber" name="L1596" href="#L1596">1596</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> corr02 = o[0][2].getReal() - m[0][2].getReal();
<a class="jxr_linenumber" name="L1597" href="#L1597">1597</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> corr10 = o[1][0].getReal() - m[1][0].getReal();
<a class="jxr_linenumber" name="L1598" href="#L1598">1598</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> corr11 = o[1][1].getReal() - m[1][1].getReal();
<a class="jxr_linenumber" name="L1599" href="#L1599">1599</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> corr12 = o[1][2].getReal() - m[1][2].getReal();
<a class="jxr_linenumber" name="L1600" href="#L1600">1600</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> corr20 = o[2][0].getReal() - m[2][0].getReal();
<a class="jxr_linenumber" name="L1601" href="#L1601">1601</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> corr21 = o[2][1].getReal() - m[2][1].getReal();
<a class="jxr_linenumber" name="L1602" href="#L1602">1602</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> corr22 = o[2][2].getReal() - m[2][2].getReal();
<a class="jxr_linenumber" name="L1603" href="#L1603">1603</a> 
<a class="jxr_linenumber" name="L1604" href="#L1604">1604</a>             <em class="jxr_comment">// Frobenius norm of the correction</em>
<a class="jxr_linenumber" name="L1605" href="#L1605">1605</a>             fn1 = corr00 * corr00 + corr01 * corr01 + corr02 * corr02 +
<a class="jxr_linenumber" name="L1606" href="#L1606">1606</a>                   corr10 * corr10 + corr11 * corr11 + corr12 * corr12 +
<a class="jxr_linenumber" name="L1607" href="#L1607">1607</a>                   corr20 * corr20 + corr21 * corr21 + corr22 * corr22;
<a class="jxr_linenumber" name="L1608" href="#L1608">1608</a> 
<a class="jxr_linenumber" name="L1609" href="#L1609">1609</a>             <em class="jxr_comment">// convergence test</em>
<a class="jxr_linenumber" name="L1610" href="#L1610">1610</a>             <strong class="jxr_keyword">if</strong> (FastMath.abs(fn1 - fn) &lt;= threshold) {
<a class="jxr_linenumber" name="L1611" href="#L1611">1611</a>                 <strong class="jxr_keyword">return</strong> o;
<a class="jxr_linenumber" name="L1612" href="#L1612">1612</a>             }
<a class="jxr_linenumber" name="L1613" href="#L1613">1613</a> 
<a class="jxr_linenumber" name="L1614" href="#L1614">1614</a>             <em class="jxr_comment">// prepare next iteration</em>
<a class="jxr_linenumber" name="L1615" href="#L1615">1615</a>             x00 = o[0][0];
<a class="jxr_linenumber" name="L1616" href="#L1616">1616</a>             x01 = o[0][1];
<a class="jxr_linenumber" name="L1617" href="#L1617">1617</a>             x02 = o[0][2];
<a class="jxr_linenumber" name="L1618" href="#L1618">1618</a>             x10 = o[1][0];
<a class="jxr_linenumber" name="L1619" href="#L1619">1619</a>             x11 = o[1][1];
<a class="jxr_linenumber" name="L1620" href="#L1620">1620</a>             x12 = o[1][2];
<a class="jxr_linenumber" name="L1621" href="#L1621">1621</a>             x20 = o[2][0];
<a class="jxr_linenumber" name="L1622" href="#L1622">1622</a>             x21 = o[2][1];
<a class="jxr_linenumber" name="L1623" href="#L1623">1623</a>             x22 = o[2][2];
<a class="jxr_linenumber" name="L1624" href="#L1624">1624</a>             fn  = fn1;
<a class="jxr_linenumber" name="L1625" href="#L1625">1625</a> 
<a class="jxr_linenumber" name="L1626" href="#L1626">1626</a>         }
<a class="jxr_linenumber" name="L1627" href="#L1627">1627</a> 
<a class="jxr_linenumber" name="L1628" href="#L1628">1628</a>         <em class="jxr_comment">// the algorithm did not converge after 10 iterations</em>
<a class="jxr_linenumber" name="L1629" href="#L1629">1629</a>         <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/NotARotationMatrixException.html">NotARotationMatrixException</a>(LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX,
<a class="jxr_linenumber" name="L1630" href="#L1630">1630</a>                                               i - 1);
<a class="jxr_linenumber" name="L1631" href="#L1631">1631</a> 
<a class="jxr_linenumber" name="L1632" href="#L1632">1632</a>     }
<a class="jxr_linenumber" name="L1633" href="#L1633">1633</a> 
<a class="jxr_linenumber" name="L1634" href="#L1634">1634</a>     <em class="jxr_javadoccomment">/** Compute the &lt;i&gt;distance&lt;/i&gt; between two rotations.</em>
<a class="jxr_linenumber" name="L1635" href="#L1635">1635</a> <em class="jxr_javadoccomment">     * &lt;p&gt;The &lt;i&gt;distance&lt;/i&gt; is intended here as a way to check if two</em>
<a class="jxr_linenumber" name="L1636" href="#L1636">1636</a> <em class="jxr_javadoccomment">     * rotations are almost similar (i.e. they transform vectors the same way)</em>
<a class="jxr_linenumber" name="L1637" href="#L1637">1637</a> <em class="jxr_javadoccomment">     * or very different. It is mathematically defined as the angle of</em>
<a class="jxr_linenumber" name="L1638" href="#L1638">1638</a> <em class="jxr_javadoccomment">     * the rotation r that prepended to one of the rotations gives the other</em>
<a class="jxr_linenumber" name="L1639" href="#L1639">1639</a> <em class="jxr_javadoccomment">     * one:&lt;/p&gt;</em>
<a class="jxr_linenumber" name="L1640" href="#L1640">1640</a> <em class="jxr_javadoccomment">     * &lt;pre&gt;</em>
<a class="jxr_linenumber" name="L1641" href="#L1641">1641</a> <em class="jxr_javadoccomment">     *        r&lt;sub&gt;1&lt;/sub&gt;(r) = r&lt;sub&gt;2&lt;/sub&gt;</em>
<a class="jxr_linenumber" name="L1642" href="#L1642">1642</a> <em class="jxr_javadoccomment">     * &lt;/pre&gt;</em>
<a class="jxr_linenumber" name="L1643" href="#L1643">1643</a> <em class="jxr_javadoccomment">     * &lt;p&gt;This distance is an angle between 0 and &amp;pi;. Its value is the smallest</em>
<a class="jxr_linenumber" name="L1644" href="#L1644">1644</a> <em class="jxr_javadoccomment">     * possible upper bound of the angle in radians between r&lt;sub&gt;1&lt;/sub&gt;(v)</em>
<a class="jxr_linenumber" name="L1645" href="#L1645">1645</a> <em class="jxr_javadoccomment">     * and r&lt;sub&gt;2&lt;/sub&gt;(v) for all possible vectors v. This upper bound is</em>
<a class="jxr_linenumber" name="L1646" href="#L1646">1646</a> <em class="jxr_javadoccomment">     * reached for some v. The distance is equal to 0 if and only if the two</em>
<a class="jxr_linenumber" name="L1647" href="#L1647">1647</a> <em class="jxr_javadoccomment">     * rotations are identical.&lt;/p&gt;</em>
<a class="jxr_linenumber" name="L1648" href="#L1648">1648</a> <em class="jxr_javadoccomment">     * &lt;p&gt;Comparing two rotations should always be done using this value rather</em>
<a class="jxr_linenumber" name="L1649" href="#L1649">1649</a> <em class="jxr_javadoccomment">     * than for example comparing the components of the quaternions. It is much</em>
<a class="jxr_linenumber" name="L1650" href="#L1650">1650</a> <em class="jxr_javadoccomment">     * more stable, and has a geometric meaning. Also comparing quaternions</em>
<a class="jxr_linenumber" name="L1651" href="#L1651">1651</a> <em class="jxr_javadoccomment">     * components is error prone since for example quaternions (0.36, 0.48, -0.48, -0.64)</em>
<a class="jxr_linenumber" name="L1652" href="#L1652">1652</a> <em class="jxr_javadoccomment">     * and (-0.36, -0.48, 0.48, 0.64) represent exactly the same rotation despite</em>
<a class="jxr_linenumber" name="L1653" href="#L1653">1653</a> <em class="jxr_javadoccomment">     * their components are different (they are exact opposites).&lt;/p&gt;</em>
<a class="jxr_linenumber" name="L1654" href="#L1654">1654</a> <em class="jxr_javadoccomment">     * @param r1 first rotation</em>
<a class="jxr_linenumber" name="L1655" href="#L1655">1655</a> <em class="jxr_javadoccomment">     * @param r2 second rotation</em>
<a class="jxr_linenumber" name="L1656" href="#L1656">1656</a> <em class="jxr_javadoccomment">     * @param &lt;T&gt; the type of the field elements</em>
<a class="jxr_linenumber" name="L1657" href="#L1657">1657</a> <em class="jxr_javadoccomment">     * @return &lt;i&gt;distance&lt;/i&gt; between r1 and r2</em>
<a class="jxr_linenumber" name="L1658" href="#L1658">1658</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L1659" href="#L1659">1659</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> &lt;T <strong class="jxr_keyword">extends</strong> RealFieldElement&lt;T&gt;&gt; T distance(<strong class="jxr_keyword">final</strong> FieldRotation&lt;T&gt; r1, <strong class="jxr_keyword">final</strong> FieldRotation&lt;T&gt; r2) {
<a class="jxr_linenumber" name="L1660" href="#L1660">1660</a>         <strong class="jxr_keyword">return</strong> r1.composeInverseInternal(r2).getAngle();
<a class="jxr_linenumber" name="L1661" href="#L1661">1661</a>     }
<a class="jxr_linenumber" name="L1662" href="#L1662">1662</a> 
<a class="jxr_linenumber" name="L1663" href="#L1663">1663</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2003&#x2013;2016 <a href="http://www.apache.org/">The Apache Software Foundation</a>. All rights reserved.</div>
</body>
</html>
