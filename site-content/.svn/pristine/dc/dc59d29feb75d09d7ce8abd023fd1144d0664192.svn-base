<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements. See the NOTICE file distributed with this<a name="line.3"></a>
<span class="sourceLineNo">004</span> * work for additional information regarding copyright ownership. The ASF<a name="line.4"></a>
<span class="sourceLineNo">005</span> * licenses this file to You under the Apache License, Version 2.0 (the<a name="line.5"></a>
<span class="sourceLineNo">006</span> * "License"); you may not use this file except in compliance with the License.<a name="line.6"></a>
<span class="sourceLineNo">007</span> * You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> * http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the<a name="line.13"></a>
<span class="sourceLineNo">014</span> * License for the specific language governing permissions and limitations under<a name="line.14"></a>
<span class="sourceLineNo">015</span> * the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span>package org.apache.commons.math3.linear;<a name="line.17"></a>
<span class="sourceLineNo">018</span><a name="line.18"></a>
<span class="sourceLineNo">019</span>import java.lang.reflect.InvocationTargetException;<a name="line.19"></a>
<span class="sourceLineNo">020</span>import java.lang.reflect.Method;<a name="line.20"></a>
<span class="sourceLineNo">021</span>import java.util.Set;<a name="line.21"></a>
<span class="sourceLineNo">022</span>import java.util.HashSet;<a name="line.22"></a>
<span class="sourceLineNo">023</span>import java.util.Iterator;<a name="line.23"></a>
<span class="sourceLineNo">024</span>import java.util.Random;<a name="line.24"></a>
<span class="sourceLineNo">025</span><a name="line.25"></a>
<span class="sourceLineNo">026</span>import org.apache.commons.math3.analysis.UnivariateFunction;<a name="line.26"></a>
<span class="sourceLineNo">027</span>import org.apache.commons.math3.analysis.function.Sin;<a name="line.27"></a>
<span class="sourceLineNo">028</span>import org.apache.commons.math3.exception.MathUnsupportedOperationException;<a name="line.28"></a>
<span class="sourceLineNo">029</span>import org.apache.commons.math3.linear.RealVector.Entry;<a name="line.29"></a>
<span class="sourceLineNo">030</span>import org.apache.commons.math3.util.FastMath;<a name="line.30"></a>
<span class="sourceLineNo">031</span>import org.junit.Assert;<a name="line.31"></a>
<span class="sourceLineNo">032</span>import org.junit.Test;<a name="line.32"></a>
<span class="sourceLineNo">033</span><a name="line.33"></a>
<span class="sourceLineNo">034</span>/**<a name="line.34"></a>
<span class="sourceLineNo">035</span> * This is an abstract test of the {@link<a name="line.35"></a>
<span class="sourceLineNo">036</span> * RealVector#unmodifiableRealVector(RealVector) unmodifiable vector}<a name="line.36"></a>
<span class="sourceLineNo">037</span> * implementation. These unmodifiable vectors decorate a (modifiable)<a name="line.37"></a>
<span class="sourceLineNo">038</span> * {@link RealVector}; therefore, a new implementation of this abstract<a name="line.38"></a>
<span class="sourceLineNo">039</span> * test should be considered for each implementation of<a name="line.39"></a>
<span class="sourceLineNo">040</span> * {@link RealVector}.<a name="line.40"></a>
<span class="sourceLineNo">041</span> *<a name="line.41"></a>
<span class="sourceLineNo">042</span> *<a name="line.42"></a>
<span class="sourceLineNo">043</span> */<a name="line.43"></a>
<span class="sourceLineNo">044</span>public abstract class UnmodifiableRealVectorAbstractTest {<a name="line.44"></a>
<span class="sourceLineNo">045</span>    /** The dimension of the randomly generated vectors. */<a name="line.45"></a>
<span class="sourceLineNo">046</span>    protected static final int DIM = 100;<a name="line.46"></a>
<span class="sourceLineNo">047</span>    /** Absolute tolerance. */<a name="line.47"></a>
<span class="sourceLineNo">048</span>    protected static final double EPS = 10 * Math.ulp(1d);<a name="line.48"></a>
<span class="sourceLineNo">049</span>    /**<a name="line.49"></a>
<span class="sourceLineNo">050</span>     * The list of methods which are excluded from the general test<a name="line.50"></a>
<span class="sourceLineNo">051</span>     * {@link #testAllButExcluded()}.<a name="line.51"></a>
<span class="sourceLineNo">052</span>     */<a name="line.52"></a>
<span class="sourceLineNo">053</span>    protected static final Set&lt;String&gt; EXCLUDE = new HashSet&lt;String&gt;();<a name="line.53"></a>
<span class="sourceLineNo">054</span>    /** The random number generator (always initialized with the same seed. */<a name="line.54"></a>
<span class="sourceLineNo">055</span>    protected static final Random RANDOM;<a name="line.55"></a>
<span class="sourceLineNo">056</span><a name="line.56"></a>
<span class="sourceLineNo">057</span>    static {<a name="line.57"></a>
<span class="sourceLineNo">058</span>        EXCLUDE.add("getEntry");<a name="line.58"></a>
<span class="sourceLineNo">059</span>        EXCLUDE.add("setEntry");<a name="line.59"></a>
<span class="sourceLineNo">060</span>        EXCLUDE.add("addToEntry");<a name="line.60"></a>
<span class="sourceLineNo">061</span>        EXCLUDE.add("getSubVector");<a name="line.61"></a>
<span class="sourceLineNo">062</span>        EXCLUDE.add("setSubVector");<a name="line.62"></a>
<span class="sourceLineNo">063</span>        EXCLUDE.add("iterator");<a name="line.63"></a>
<span class="sourceLineNo">064</span>        EXCLUDE.add("sparseIterator");<a name="line.64"></a>
<span class="sourceLineNo">065</span>        EXCLUDE.add("walkInDefaultOrder");<a name="line.65"></a>
<span class="sourceLineNo">066</span>        EXCLUDE.add("walkInOptimizedOrder");<a name="line.66"></a>
<span class="sourceLineNo">067</span>        EXCLUDE.add("ebeDivide");<a name="line.67"></a>
<span class="sourceLineNo">068</span>        EXCLUDE.add("ebeMultiply");<a name="line.68"></a>
<span class="sourceLineNo">069</span><a name="line.69"></a>
<span class="sourceLineNo">070</span>        // Excluded because they are inherited from "Object".<a name="line.70"></a>
<span class="sourceLineNo">071</span>        for (Method m : Object.class.getMethods()) {<a name="line.71"></a>
<span class="sourceLineNo">072</span>            EXCLUDE.add(m.getName());<a name="line.72"></a>
<span class="sourceLineNo">073</span>        }<a name="line.73"></a>
<span class="sourceLineNo">074</span>        RANDOM = new Random(20110813);<a name="line.74"></a>
<span class="sourceLineNo">075</span>    }<a name="line.75"></a>
<span class="sourceLineNo">076</span><a name="line.76"></a>
<span class="sourceLineNo">077</span>    /**<a name="line.77"></a>
<span class="sourceLineNo">078</span>     * Returns {@code true} if the specified {@code double} are equal (within a<a name="line.78"></a>
<span class="sourceLineNo">079</span>     * given tolerance).<a name="line.79"></a>
<span class="sourceLineNo">080</span>     *<a name="line.80"></a>
<span class="sourceLineNo">081</span>     * @param x First {@code double}.<a name="line.81"></a>
<span class="sourceLineNo">082</span>     * @param y Second {@code double}.<a name="line.82"></a>
<span class="sourceLineNo">083</span>     * @return {@code true} if {@code x} and {@code y} are equal.<a name="line.83"></a>
<span class="sourceLineNo">084</span>     */<a name="line.84"></a>
<span class="sourceLineNo">085</span>    public static boolean equals(final double x, final double y) {<a name="line.85"></a>
<span class="sourceLineNo">086</span>        if (x == y) {<a name="line.86"></a>
<span class="sourceLineNo">087</span>            return true;<a name="line.87"></a>
<span class="sourceLineNo">088</span>        } else if (FastMath.abs(x) &lt;= EPS) {<a name="line.88"></a>
<span class="sourceLineNo">089</span>            return FastMath.abs(y) &lt;= EPS;<a name="line.89"></a>
<span class="sourceLineNo">090</span>        } else if (FastMath.abs(y) &lt;= EPS) {<a name="line.90"></a>
<span class="sourceLineNo">091</span>            return FastMath.abs(x) &lt;= EPS;<a name="line.91"></a>
<span class="sourceLineNo">092</span>        } else {<a name="line.92"></a>
<span class="sourceLineNo">093</span>            return FastMath.abs(x - y) &lt;= EPS * FastMath.min(FastMath.abs(x), FastMath.abs(y));<a name="line.93"></a>
<span class="sourceLineNo">094</span>        }<a name="line.94"></a>
<span class="sourceLineNo">095</span>    }<a name="line.95"></a>
<span class="sourceLineNo">096</span><a name="line.96"></a>
<span class="sourceLineNo">097</span>    /**<a name="line.97"></a>
<span class="sourceLineNo">098</span>     * Returns {@code true} if the specified {@code double} arrays are equal<a name="line.98"></a>
<span class="sourceLineNo">099</span>     * (within a given tolerance).<a name="line.99"></a>
<span class="sourceLineNo">100</span>     *<a name="line.100"></a>
<span class="sourceLineNo">101</span>     * @param x First array.<a name="line.101"></a>
<span class="sourceLineNo">102</span>     * @param y Second array.<a name="line.102"></a>
<span class="sourceLineNo">103</span>     * @return {@code true} if {@code x} and {@code y} are equal.<a name="line.103"></a>
<span class="sourceLineNo">104</span>     */<a name="line.104"></a>
<span class="sourceLineNo">105</span>    public static boolean equals(final double[] x, final double[] y) {<a name="line.105"></a>
<span class="sourceLineNo">106</span>        if (x.length != y.length) {<a name="line.106"></a>
<span class="sourceLineNo">107</span>            return false;<a name="line.107"></a>
<span class="sourceLineNo">108</span>        }<a name="line.108"></a>
<span class="sourceLineNo">109</span>        final int n = x.length;<a name="line.109"></a>
<span class="sourceLineNo">110</span>        for (int i = 0; i &lt; n; i++) {<a name="line.110"></a>
<span class="sourceLineNo">111</span>            if (!equals(x[i], y[i])) {<a name="line.111"></a>
<span class="sourceLineNo">112</span>                return false;<a name="line.112"></a>
<span class="sourceLineNo">113</span>            }<a name="line.113"></a>
<span class="sourceLineNo">114</span>        }<a name="line.114"></a>
<span class="sourceLineNo">115</span>        return true;<a name="line.115"></a>
<span class="sourceLineNo">116</span>    }<a name="line.116"></a>
<span class="sourceLineNo">117</span><a name="line.117"></a>
<span class="sourceLineNo">118</span>    /**<a name="line.118"></a>
<span class="sourceLineNo">119</span>     * Returns {@code true} if the specified {@code RealVector} are equal<a name="line.119"></a>
<span class="sourceLineNo">120</span>     * (within a given tolerance).<a name="line.120"></a>
<span class="sourceLineNo">121</span>     *<a name="line.121"></a>
<span class="sourceLineNo">122</span>     * @param x First vector.<a name="line.122"></a>
<span class="sourceLineNo">123</span>     * @param y Second vector.<a name="line.123"></a>
<span class="sourceLineNo">124</span>     * @return {@code true} if {@code x} and {@code y} are equal.<a name="line.124"></a>
<span class="sourceLineNo">125</span>     */<a name="line.125"></a>
<span class="sourceLineNo">126</span>    public static boolean equals(final RealVector x, final RealVector y) {<a name="line.126"></a>
<span class="sourceLineNo">127</span>        if (x.getDimension() != y.getDimension()) {<a name="line.127"></a>
<span class="sourceLineNo">128</span>            return false;<a name="line.128"></a>
<span class="sourceLineNo">129</span>        }<a name="line.129"></a>
<span class="sourceLineNo">130</span>        final int n = x.getDimension();<a name="line.130"></a>
<span class="sourceLineNo">131</span>        for (int i = 0; i &lt; n; i++) {<a name="line.131"></a>
<span class="sourceLineNo">132</span>            if (!equals(x.getEntry(i), y.getEntry(i))) {<a name="line.132"></a>
<span class="sourceLineNo">133</span>                return false;<a name="line.133"></a>
<span class="sourceLineNo">134</span>            }<a name="line.134"></a>
<span class="sourceLineNo">135</span>        }<a name="line.135"></a>
<span class="sourceLineNo">136</span>        return true;<a name="line.136"></a>
<span class="sourceLineNo">137</span>    }<a name="line.137"></a>
<span class="sourceLineNo">138</span><a name="line.138"></a>
<span class="sourceLineNo">139</span>    /**<a name="line.139"></a>
<span class="sourceLineNo">140</span>     * Returns {@code true} if the specified {@code RealVector} is equal to the<a name="line.140"></a>
<span class="sourceLineNo">141</span>     * specified {@code double} array (within a given tolerance).<a name="line.141"></a>
<span class="sourceLineNo">142</span>     *<a name="line.142"></a>
<span class="sourceLineNo">143</span>     * @param x Vector.<a name="line.143"></a>
<span class="sourceLineNo">144</span>     * @param y Array.<a name="line.144"></a>
<span class="sourceLineNo">145</span>     * @return {@code true} if {@code x} and {@code y} are equal.<a name="line.145"></a>
<span class="sourceLineNo">146</span>     */<a name="line.146"></a>
<span class="sourceLineNo">147</span>    public static boolean equals(final RealVector x, final double[] y) {<a name="line.147"></a>
<span class="sourceLineNo">148</span>        if (x.getDimension() != y.length) {<a name="line.148"></a>
<span class="sourceLineNo">149</span>            return false;<a name="line.149"></a>
<span class="sourceLineNo">150</span>        }<a name="line.150"></a>
<span class="sourceLineNo">151</span>        final int n = x.getDimension();<a name="line.151"></a>
<span class="sourceLineNo">152</span>        for (int i = 0; i &lt; n; i++) {<a name="line.152"></a>
<span class="sourceLineNo">153</span>            if (!equals(x.getEntry(i), y[i])) {<a name="line.153"></a>
<span class="sourceLineNo">154</span>                return false;<a name="line.154"></a>
<span class="sourceLineNo">155</span>            }<a name="line.155"></a>
<span class="sourceLineNo">156</span>        }<a name="line.156"></a>
<span class="sourceLineNo">157</span>        return true;<a name="line.157"></a>
<span class="sourceLineNo">158</span>    }<a name="line.158"></a>
<span class="sourceLineNo">159</span><a name="line.159"></a>
<span class="sourceLineNo">160</span>    /**<a name="line.160"></a>
<span class="sourceLineNo">161</span>     * Returns {@code true} if the specified {@code RealMatrix} are equal<a name="line.161"></a>
<span class="sourceLineNo">162</span>     * (within a given tolerance).<a name="line.162"></a>
<span class="sourceLineNo">163</span>     *<a name="line.163"></a>
<span class="sourceLineNo">164</span>     * @param x First matrix.<a name="line.164"></a>
<span class="sourceLineNo">165</span>     * @param y Second matrix.<a name="line.165"></a>
<span class="sourceLineNo">166</span>     * @return {@code true} if {@code x} and {@code y} are equal.<a name="line.166"></a>
<span class="sourceLineNo">167</span>     */<a name="line.167"></a>
<span class="sourceLineNo">168</span>    public static boolean equals(final RealMatrix x, final RealMatrix y) {<a name="line.168"></a>
<span class="sourceLineNo">169</span>        if (x.getRowDimension() != y.getRowDimension()) {<a name="line.169"></a>
<span class="sourceLineNo">170</span>            return false;<a name="line.170"></a>
<span class="sourceLineNo">171</span>        }<a name="line.171"></a>
<span class="sourceLineNo">172</span>        if (x.getColumnDimension() != y.getColumnDimension()) {<a name="line.172"></a>
<span class="sourceLineNo">173</span>            return false;<a name="line.173"></a>
<span class="sourceLineNo">174</span>        }<a name="line.174"></a>
<span class="sourceLineNo">175</span>        final int rows = x.getRowDimension();<a name="line.175"></a>
<span class="sourceLineNo">176</span>        final int cols = x.getColumnDimension();<a name="line.176"></a>
<span class="sourceLineNo">177</span>        for (int i = 0; i &lt; rows; i++) {<a name="line.177"></a>
<span class="sourceLineNo">178</span>            for (int j = 0; j &lt; cols; j++) {<a name="line.178"></a>
<span class="sourceLineNo">179</span>                if (!equals(x.getEntry(i, j), y.getEntry(i, j))) {<a name="line.179"></a>
<span class="sourceLineNo">180</span>                    return false;<a name="line.180"></a>
<span class="sourceLineNo">181</span>                }<a name="line.181"></a>
<span class="sourceLineNo">182</span>            }<a name="line.182"></a>
<span class="sourceLineNo">183</span>        }<a name="line.183"></a>
<span class="sourceLineNo">184</span>        return true;<a name="line.184"></a>
<span class="sourceLineNo">185</span>    }<a name="line.185"></a>
<span class="sourceLineNo">186</span><a name="line.186"></a>
<span class="sourceLineNo">187</span>    /**<a name="line.187"></a>
<span class="sourceLineNo">188</span>     * Returns {@code true} if the specified {@code Object} are equal.<a name="line.188"></a>
<span class="sourceLineNo">189</span>     *<a name="line.189"></a>
<span class="sourceLineNo">190</span>     * @param x First object.<a name="line.190"></a>
<span class="sourceLineNo">191</span>     * @param y Second object.<a name="line.191"></a>
<span class="sourceLineNo">192</span>     * @return {@code true} if {@code x} and {@code y} are equal.<a name="line.192"></a>
<span class="sourceLineNo">193</span>     * @throws IllegalArgumentException if {@code x} and {@code y} could<a name="line.193"></a>
<span class="sourceLineNo">194</span>     * not be compared.<a name="line.194"></a>
<span class="sourceLineNo">195</span>     */<a name="line.195"></a>
<span class="sourceLineNo">196</span>    public static boolean equals(final Object x, final Object y) {<a name="line.196"></a>
<span class="sourceLineNo">197</span>        if (x instanceof Boolean) {<a name="line.197"></a>
<span class="sourceLineNo">198</span>            if (y instanceof Boolean) {<a name="line.198"></a>
<span class="sourceLineNo">199</span>                return ((Boolean) x).booleanValue() == ((Boolean) y)<a name="line.199"></a>
<span class="sourceLineNo">200</span>                        .booleanValue();<a name="line.200"></a>
<span class="sourceLineNo">201</span>            } else {<a name="line.201"></a>
<span class="sourceLineNo">202</span>                return false;<a name="line.202"></a>
<span class="sourceLineNo">203</span>            }<a name="line.203"></a>
<span class="sourceLineNo">204</span>        }<a name="line.204"></a>
<span class="sourceLineNo">205</span>        if (x instanceof Integer) {<a name="line.205"></a>
<span class="sourceLineNo">206</span>            if (y instanceof Integer) {<a name="line.206"></a>
<span class="sourceLineNo">207</span>                return ((Integer) x).intValue() == ((Integer) y).intValue();<a name="line.207"></a>
<span class="sourceLineNo">208</span>            } else {<a name="line.208"></a>
<span class="sourceLineNo">209</span>                return false;<a name="line.209"></a>
<span class="sourceLineNo">210</span>            }<a name="line.210"></a>
<span class="sourceLineNo">211</span>        } else if (x instanceof Double) {<a name="line.211"></a>
<span class="sourceLineNo">212</span>            if (y instanceof Double) {<a name="line.212"></a>
<span class="sourceLineNo">213</span>                return equals(((Double) x).doubleValue(),<a name="line.213"></a>
<span class="sourceLineNo">214</span>                        ((Double) y).doubleValue());<a name="line.214"></a>
<span class="sourceLineNo">215</span>            } else {<a name="line.215"></a>
<span class="sourceLineNo">216</span>                return false;<a name="line.216"></a>
<span class="sourceLineNo">217</span>            }<a name="line.217"></a>
<span class="sourceLineNo">218</span>        } else if (x instanceof double[]) {<a name="line.218"></a>
<span class="sourceLineNo">219</span>            if (y instanceof double[]) {<a name="line.219"></a>
<span class="sourceLineNo">220</span>                return equals((double[]) x, (double[]) y);<a name="line.220"></a>
<span class="sourceLineNo">221</span>            } else if (y instanceof RealVector) {<a name="line.221"></a>
<span class="sourceLineNo">222</span>                return equals((RealVector) y, (double[]) x);<a name="line.222"></a>
<span class="sourceLineNo">223</span>            } else {<a name="line.223"></a>
<span class="sourceLineNo">224</span>                return false;<a name="line.224"></a>
<span class="sourceLineNo">225</span>            }<a name="line.225"></a>
<span class="sourceLineNo">226</span>        } else if (x instanceof RealVector) {<a name="line.226"></a>
<span class="sourceLineNo">227</span>            if (y instanceof double[]) {<a name="line.227"></a>
<span class="sourceLineNo">228</span>                return equals((RealVector) x, (double[]) y);<a name="line.228"></a>
<span class="sourceLineNo">229</span>            } else if (y instanceof RealVector) {<a name="line.229"></a>
<span class="sourceLineNo">230</span>                return equals((RealVector) x, (RealVector) y);<a name="line.230"></a>
<span class="sourceLineNo">231</span>            } else {<a name="line.231"></a>
<span class="sourceLineNo">232</span>                return false;<a name="line.232"></a>
<span class="sourceLineNo">233</span>            }<a name="line.233"></a>
<span class="sourceLineNo">234</span>        } else if (x instanceof RealMatrix) {<a name="line.234"></a>
<span class="sourceLineNo">235</span>            if (y instanceof RealMatrix) {<a name="line.235"></a>
<span class="sourceLineNo">236</span>                return equals((RealMatrix) x, (RealMatrix) y);<a name="line.236"></a>
<span class="sourceLineNo">237</span>            } else {<a name="line.237"></a>
<span class="sourceLineNo">238</span>                return false;<a name="line.238"></a>
<span class="sourceLineNo">239</span>            }<a name="line.239"></a>
<span class="sourceLineNo">240</span>        } else {<a name="line.240"></a>
<span class="sourceLineNo">241</span>            throw new IllegalArgumentException("could not compare " + x + ", "<a name="line.241"></a>
<span class="sourceLineNo">242</span>                    + y);<a name="line.242"></a>
<span class="sourceLineNo">243</span>        }<a name="line.243"></a>
<span class="sourceLineNo">244</span>    }<a name="line.244"></a>
<span class="sourceLineNo">245</span><a name="line.245"></a>
<span class="sourceLineNo">246</span>    /**<a name="line.246"></a>
<span class="sourceLineNo">247</span>     * Creates a new random vector of a specified type. This vector is then to<a name="line.247"></a>
<span class="sourceLineNo">248</span>     * be wrapped in an unmodifiable vector.<a name="line.248"></a>
<span class="sourceLineNo">249</span>     *<a name="line.249"></a>
<span class="sourceLineNo">250</span>     * @return a new random vector.<a name="line.250"></a>
<span class="sourceLineNo">251</span>     */<a name="line.251"></a>
<span class="sourceLineNo">252</span>    public abstract RealVector createVector();<a name="line.252"></a>
<span class="sourceLineNo">253</span><a name="line.253"></a>
<span class="sourceLineNo">254</span>    /**<a name="line.254"></a>
<span class="sourceLineNo">255</span>     * Creates a new random object of the specified type.<a name="line.255"></a>
<span class="sourceLineNo">256</span>     *<a name="line.256"></a>
<span class="sourceLineNo">257</span>     * @param c Class of the object to be created.<a name="line.257"></a>
<span class="sourceLineNo">258</span>     * @return a new random object.<a name="line.258"></a>
<span class="sourceLineNo">259</span>     * @throws IllegalArgumentException if the specified class is not<a name="line.259"></a>
<span class="sourceLineNo">260</span>     * recognized by this method.<a name="line.260"></a>
<span class="sourceLineNo">261</span>     */<a name="line.261"></a>
<span class="sourceLineNo">262</span>    public Object createParameter(final Class&lt;?&gt; c) {<a name="line.262"></a>
<span class="sourceLineNo">263</span>        if (c == Integer.TYPE) {<a name="line.263"></a>
<span class="sourceLineNo">264</span>            return Integer.valueOf(RANDOM.nextInt());<a name="line.264"></a>
<span class="sourceLineNo">265</span>        } else if (c == Double.TYPE) {<a name="line.265"></a>
<span class="sourceLineNo">266</span>            return Double.valueOf(RANDOM.nextDouble());<a name="line.266"></a>
<span class="sourceLineNo">267</span>        } else if (c == double[].class) {<a name="line.267"></a>
<span class="sourceLineNo">268</span>            final double[] v = new double[DIM];<a name="line.268"></a>
<span class="sourceLineNo">269</span>            for (int i = 0; i &lt; DIM; i++) {<a name="line.269"></a>
<span class="sourceLineNo">270</span>                v[i] = RANDOM.nextDouble();<a name="line.270"></a>
<span class="sourceLineNo">271</span>            }<a name="line.271"></a>
<span class="sourceLineNo">272</span>            return v;<a name="line.272"></a>
<span class="sourceLineNo">273</span>        } else if (c.isAssignableFrom(RealVector.class)) {<a name="line.273"></a>
<span class="sourceLineNo">274</span>            return createVector();<a name="line.274"></a>
<span class="sourceLineNo">275</span>        } else if (c.isAssignableFrom(UnivariateFunction.class)) {<a name="line.275"></a>
<span class="sourceLineNo">276</span>            return new Sin();<a name="line.276"></a>
<span class="sourceLineNo">277</span>        } else {<a name="line.277"></a>
<span class="sourceLineNo">278</span>            throw new IllegalArgumentException("could not create " + c);<a name="line.278"></a>
<span class="sourceLineNo">279</span>        }<a name="line.279"></a>
<span class="sourceLineNo">280</span>    }<a name="line.280"></a>
<span class="sourceLineNo">281</span><a name="line.281"></a>
<span class="sourceLineNo">282</span>    /**<a name="line.282"></a>
<span class="sourceLineNo">283</span>     * This is the general test of most methods in the<a name="line.283"></a>
<span class="sourceLineNo">284</span>     * {@link RealVector#unmodifiableRealVector(RealVector) unmodifiable vector}.<a name="line.284"></a>
<span class="sourceLineNo">285</span>     * It works as follows.<a name="line.285"></a>
<span class="sourceLineNo">286</span>     * First, an unmodifiable view of a copy of the specified random vector<a name="line.286"></a>
<span class="sourceLineNo">287</span>     * {@code u} is created: this defines {@code v}. Then the &lt;em&gt;same&lt;/em&gt;<a name="line.287"></a>
<span class="sourceLineNo">288</span>     * method {@code m} is invoked on {@code u} and {@code v}, with randomly<a name="line.288"></a>
<span class="sourceLineNo">289</span>     * generated parameters {@code args}.<a name="line.289"></a>
<span class="sourceLineNo">290</span>     * If it turns out that {@code u} has changed after the call of method<a name="line.290"></a>
<span class="sourceLineNo">291</span>     * {@code m}, then this test checks that the call of this method on<a name="line.291"></a>
<span class="sourceLineNo">292</span>     * {@code v} resulted in a {@link MathUnsupportedOperationException}. If<a name="line.292"></a>
<span class="sourceLineNo">293</span>     * {@code u} was not modified, then this test checks that the results<a name="line.293"></a>
<span class="sourceLineNo">294</span>     * returned by the call of method {@code m} on {@code u} and {@code v}<a name="line.294"></a>
<span class="sourceLineNo">295</span>     * returned the same result.<a name="line.295"></a>
<span class="sourceLineNo">296</span>     *<a name="line.296"></a>
<span class="sourceLineNo">297</span>     * @param m Method to be tested.<a name="line.297"></a>
<span class="sourceLineNo">298</span>     * @param u Random vector from which the unmodifiable view is to be<a name="line.298"></a>
<span class="sourceLineNo">299</span>     *constructed.<a name="line.299"></a>
<span class="sourceLineNo">300</span>     * @param args Arguments to be passed to method {@code m}.<a name="line.300"></a>
<span class="sourceLineNo">301</span>     */<a name="line.301"></a>
<span class="sourceLineNo">302</span>    private void callMethod(final Method m,<a name="line.302"></a>
<span class="sourceLineNo">303</span>                            final RealVector u,<a name="line.303"></a>
<span class="sourceLineNo">304</span>                            final Object... args)<a name="line.304"></a>
<span class="sourceLineNo">305</span>        throws IllegalAccessException,<a name="line.305"></a>
<span class="sourceLineNo">306</span>               IllegalArgumentException,<a name="line.306"></a>
<span class="sourceLineNo">307</span>               InvocationTargetException {<a name="line.307"></a>
<span class="sourceLineNo">308</span>        final RealVector uu = u.copy();<a name="line.308"></a>
<span class="sourceLineNo">309</span>        final RealVector v = RealVector.unmodifiableRealVector(u.copy());<a name="line.309"></a>
<span class="sourceLineNo">310</span>        Object exp = m.invoke(u, args);<a name="line.310"></a>
<span class="sourceLineNo">311</span>        if (equals(uu, u)) {<a name="line.311"></a>
<span class="sourceLineNo">312</span>            Object act = m.invoke(v, args);<a name="line.312"></a>
<span class="sourceLineNo">313</span>            Assert.assertTrue(m.toGenericString() + ", unmodifiable vector has changed",<a name="line.313"></a>
<span class="sourceLineNo">314</span>                              equals(uu, v));<a name="line.314"></a>
<span class="sourceLineNo">315</span>            Assert.assertTrue(m.toGenericString() + ", wrong result",<a name="line.315"></a>
<span class="sourceLineNo">316</span>                              equals(exp, act));<a name="line.316"></a>
<span class="sourceLineNo">317</span><a name="line.317"></a>
<span class="sourceLineNo">318</span>        } else {<a name="line.318"></a>
<span class="sourceLineNo">319</span>            boolean flag = false;<a name="line.319"></a>
<span class="sourceLineNo">320</span>            try {<a name="line.320"></a>
<span class="sourceLineNo">321</span>                m.invoke(v, args);<a name="line.321"></a>
<span class="sourceLineNo">322</span>            } catch (InvocationTargetException e) {<a name="line.322"></a>
<span class="sourceLineNo">323</span>                if (e.getCause() instanceof MathUnsupportedOperationException) {<a name="line.323"></a>
<span class="sourceLineNo">324</span>                    flag = true;<a name="line.324"></a>
<span class="sourceLineNo">325</span>                }<a name="line.325"></a>
<span class="sourceLineNo">326</span>            }<a name="line.326"></a>
<span class="sourceLineNo">327</span>            Assert.assertTrue(m.toGenericString()+", exception should have been thrown", flag);<a name="line.327"></a>
<span class="sourceLineNo">328</span>        }<a name="line.328"></a>
<span class="sourceLineNo">329</span>    }<a name="line.329"></a>
<span class="sourceLineNo">330</span><a name="line.330"></a>
<span class="sourceLineNo">331</span>    /**<a name="line.331"></a>
<span class="sourceLineNo">332</span>     * This test calls {@link #callMethod(Method, RealVector, Object...)} on<a name="line.332"></a>
<span class="sourceLineNo">333</span>     * every method defined in interface {@link RealVector}. It generates the<a name="line.333"></a>
<span class="sourceLineNo">334</span>     * appropriate random arguments. Some methods are manually excluded (see<a name="line.334"></a>
<span class="sourceLineNo">335</span>     * {@link #EXCLUDE}), they must be handled by separate tests.<a name="line.335"></a>
<span class="sourceLineNo">336</span>     */<a name="line.336"></a>
<span class="sourceLineNo">337</span>    @Test<a name="line.337"></a>
<span class="sourceLineNo">338</span>    public void testAllButExcluded()<a name="line.338"></a>
<span class="sourceLineNo">339</span>        throws IllegalAccessException,<a name="line.339"></a>
<span class="sourceLineNo">340</span>               IllegalArgumentException,<a name="line.340"></a>
<span class="sourceLineNo">341</span>               InvocationTargetException {<a name="line.341"></a>
<span class="sourceLineNo">342</span>        Method[] method = RealVector.class.getMethods();<a name="line.342"></a>
<span class="sourceLineNo">343</span>        for (int i = 0; i &lt; method.length; i++) {<a name="line.343"></a>
<span class="sourceLineNo">344</span>            Method m = method[i];<a name="line.344"></a>
<span class="sourceLineNo">345</span>            if (!EXCLUDE.contains(m.getName())) {<a name="line.345"></a>
<span class="sourceLineNo">346</span>                RealVector u = (RealVector) createParameter(RealVector.class);<a name="line.346"></a>
<span class="sourceLineNo">347</span>                Class&lt;?&gt;[] paramType = m.getParameterTypes();<a name="line.347"></a>
<span class="sourceLineNo">348</span>                Object[] param = new Object[paramType.length];<a name="line.348"></a>
<span class="sourceLineNo">349</span>                for (int j = 0; j &lt; paramType.length; j++) {<a name="line.349"></a>
<span class="sourceLineNo">350</span>                    param[j] = createParameter(paramType[j]);<a name="line.350"></a>
<span class="sourceLineNo">351</span>                }<a name="line.351"></a>
<span class="sourceLineNo">352</span>                callMethod(m, u, param);<a name="line.352"></a>
<span class="sourceLineNo">353</span>            }<a name="line.353"></a>
<span class="sourceLineNo">354</span>        }<a name="line.354"></a>
<span class="sourceLineNo">355</span>    }<a name="line.355"></a>
<span class="sourceLineNo">356</span><a name="line.356"></a>
<span class="sourceLineNo">357</span>    @Test<a name="line.357"></a>
<span class="sourceLineNo">358</span>    public void testGetEntry() {<a name="line.358"></a>
<span class="sourceLineNo">359</span>        RealVector u = createVector();<a name="line.359"></a>
<span class="sourceLineNo">360</span>        RealVector v = RealVector.unmodifiableRealVector(u);<a name="line.360"></a>
<span class="sourceLineNo">361</span>        for (int i = 0; i &lt; DIM; i++) {<a name="line.361"></a>
<span class="sourceLineNo">362</span>            Assert.assertTrue(equals(u.getEntry(i), v.getEntry(i)));<a name="line.362"></a>
<span class="sourceLineNo">363</span>        }<a name="line.363"></a>
<span class="sourceLineNo">364</span>    }<a name="line.364"></a>
<span class="sourceLineNo">365</span><a name="line.365"></a>
<span class="sourceLineNo">366</span>    @Test(expected = MathUnsupportedOperationException.class)<a name="line.366"></a>
<span class="sourceLineNo">367</span>    public void testSetEntry() {<a name="line.367"></a>
<span class="sourceLineNo">368</span>        RealVector u = createVector();<a name="line.368"></a>
<span class="sourceLineNo">369</span>        RealVector v = RealVector.unmodifiableRealVector(u);<a name="line.369"></a>
<span class="sourceLineNo">370</span>        for (int i = 0; i &lt; DIM; i++) {<a name="line.370"></a>
<span class="sourceLineNo">371</span>            v.setEntry(i, 0d);<a name="line.371"></a>
<span class="sourceLineNo">372</span>        }<a name="line.372"></a>
<span class="sourceLineNo">373</span>    }<a name="line.373"></a>
<span class="sourceLineNo">374</span><a name="line.374"></a>
<span class="sourceLineNo">375</span>    @Test(expected = MathUnsupportedOperationException.class)<a name="line.375"></a>
<span class="sourceLineNo">376</span>    public void testAddToEntry() {<a name="line.376"></a>
<span class="sourceLineNo">377</span>        RealVector u = createVector();<a name="line.377"></a>
<span class="sourceLineNo">378</span>        RealVector v = RealVector.unmodifiableRealVector(u);<a name="line.378"></a>
<span class="sourceLineNo">379</span>        for (int i = 0; i &lt; DIM; i++) {<a name="line.379"></a>
<span class="sourceLineNo">380</span>            v.addToEntry(i, 0d);<a name="line.380"></a>
<span class="sourceLineNo">381</span>        }<a name="line.381"></a>
<span class="sourceLineNo">382</span>    }<a name="line.382"></a>
<span class="sourceLineNo">383</span><a name="line.383"></a>
<span class="sourceLineNo">384</span>    @Test<a name="line.384"></a>
<span class="sourceLineNo">385</span>    public void testGetSubVector() {<a name="line.385"></a>
<span class="sourceLineNo">386</span>        RealVector u = createVector();<a name="line.386"></a>
<span class="sourceLineNo">387</span>        RealVector v = RealVector.unmodifiableRealVector(u);<a name="line.387"></a>
<span class="sourceLineNo">388</span>        for (int i = 0; i &lt; DIM; i++) {<a name="line.388"></a>
<span class="sourceLineNo">389</span>            for (int n = 1; n &lt; DIM - i; n++) {<a name="line.389"></a>
<span class="sourceLineNo">390</span>                RealVector exp = u.getSubVector(i, n);<a name="line.390"></a>
<span class="sourceLineNo">391</span>                RealVector act = v.getSubVector(i, n);<a name="line.391"></a>
<span class="sourceLineNo">392</span>                Assert.assertTrue(equals(exp, act));<a name="line.392"></a>
<span class="sourceLineNo">393</span>            }<a name="line.393"></a>
<span class="sourceLineNo">394</span>        }<a name="line.394"></a>
<span class="sourceLineNo">395</span>    }<a name="line.395"></a>
<span class="sourceLineNo">396</span><a name="line.396"></a>
<span class="sourceLineNo">397</span>    @Test(expected = MathUnsupportedOperationException.class)<a name="line.397"></a>
<span class="sourceLineNo">398</span>    public void testSetSubVector() {<a name="line.398"></a>
<span class="sourceLineNo">399</span>        RealVector u = createVector();<a name="line.399"></a>
<span class="sourceLineNo">400</span>        RealVector v = RealVector.unmodifiableRealVector(u);<a name="line.400"></a>
<span class="sourceLineNo">401</span>        v.setSubVector(0, new ArrayRealVector());<a name="line.401"></a>
<span class="sourceLineNo">402</span>    }<a name="line.402"></a>
<span class="sourceLineNo">403</span><a name="line.403"></a>
<span class="sourceLineNo">404</span>    @Test<a name="line.404"></a>
<span class="sourceLineNo">405</span>    public void testIterator() {<a name="line.405"></a>
<span class="sourceLineNo">406</span>        RealVector u = createVector();<a name="line.406"></a>
<span class="sourceLineNo">407</span>        Iterator&lt;Entry&gt; i = u.iterator();<a name="line.407"></a>
<span class="sourceLineNo">408</span>        RealVector v = RealVector.unmodifiableRealVector(u.copy());<a name="line.408"></a>
<span class="sourceLineNo">409</span>        Iterator&lt;Entry&gt; j = v.iterator();<a name="line.409"></a>
<span class="sourceLineNo">410</span>        boolean flag;<a name="line.410"></a>
<span class="sourceLineNo">411</span>        while (i.hasNext()) {<a name="line.411"></a>
<span class="sourceLineNo">412</span>            Assert.assertTrue(j.hasNext());<a name="line.412"></a>
<span class="sourceLineNo">413</span>            Entry exp = i.next();<a name="line.413"></a>
<span class="sourceLineNo">414</span>            Entry act = j.next();<a name="line.414"></a>
<span class="sourceLineNo">415</span>            Assert.assertTrue(equals(exp.getIndex(), act.getIndex()));<a name="line.415"></a>
<span class="sourceLineNo">416</span>            Assert.assertTrue(equals(exp.getValue(), act.getValue()));<a name="line.416"></a>
<span class="sourceLineNo">417</span>            exp.setIndex(RANDOM.nextInt(DIM));<a name="line.417"></a>
<span class="sourceLineNo">418</span>            act.setIndex(RANDOM.nextInt(DIM));<a name="line.418"></a>
<span class="sourceLineNo">419</span>            flag = false;<a name="line.419"></a>
<span class="sourceLineNo">420</span>            try {<a name="line.420"></a>
<span class="sourceLineNo">421</span>                act.setValue(RANDOM.nextDouble());<a name="line.421"></a>
<span class="sourceLineNo">422</span>            } catch (MathUnsupportedOperationException e) {<a name="line.422"></a>
<span class="sourceLineNo">423</span>                flag = true;<a name="line.423"></a>
<span class="sourceLineNo">424</span>            }<a name="line.424"></a>
<span class="sourceLineNo">425</span>            Assert.assertTrue("exception should have been thrown", flag);<a name="line.425"></a>
<span class="sourceLineNo">426</span>        }<a name="line.426"></a>
<span class="sourceLineNo">427</span>        Assert.assertFalse(j.hasNext());<a name="line.427"></a>
<span class="sourceLineNo">428</span>    }<a name="line.428"></a>
<span class="sourceLineNo">429</span><a name="line.429"></a>
<span class="sourceLineNo">430</span>    @Test<a name="line.430"></a>
<span class="sourceLineNo">431</span>    public void testSparseIterator() {<a name="line.431"></a>
<span class="sourceLineNo">432</span>        RealVector u = createVector();<a name="line.432"></a>
<span class="sourceLineNo">433</span>        Iterator&lt;Entry&gt; i = u.sparseIterator();<a name="line.433"></a>
<span class="sourceLineNo">434</span>        RealVector v = RealVector.unmodifiableRealVector(u.copy());<a name="line.434"></a>
<span class="sourceLineNo">435</span>        Iterator&lt;Entry&gt; j = v.sparseIterator();<a name="line.435"></a>
<span class="sourceLineNo">436</span>        boolean flag;<a name="line.436"></a>
<span class="sourceLineNo">437</span>        while (i.hasNext()) {<a name="line.437"></a>
<span class="sourceLineNo">438</span>            Assert.assertTrue(j.hasNext());<a name="line.438"></a>
<span class="sourceLineNo">439</span>            Entry exp = i.next();<a name="line.439"></a>
<span class="sourceLineNo">440</span>            Entry act = j.next();<a name="line.440"></a>
<span class="sourceLineNo">441</span>            Assert.assertTrue(equals(exp.getIndex(), act.getIndex()));<a name="line.441"></a>
<span class="sourceLineNo">442</span>            Assert.assertTrue(equals(exp.getValue(), act.getValue()));<a name="line.442"></a>
<span class="sourceLineNo">443</span>            exp.setIndex(RANDOM.nextInt(DIM));<a name="line.443"></a>
<span class="sourceLineNo">444</span>            act.setIndex(RANDOM.nextInt(DIM));<a name="line.444"></a>
<span class="sourceLineNo">445</span>            flag = false;<a name="line.445"></a>
<span class="sourceLineNo">446</span>            try {<a name="line.446"></a>
<span class="sourceLineNo">447</span>                act.setValue(RANDOM.nextDouble());<a name="line.447"></a>
<span class="sourceLineNo">448</span>            } catch (MathUnsupportedOperationException e) {<a name="line.448"></a>
<span class="sourceLineNo">449</span>                flag = true;<a name="line.449"></a>
<span class="sourceLineNo">450</span>            }<a name="line.450"></a>
<span class="sourceLineNo">451</span>            Assert.assertTrue("exception should have been thrown", flag);<a name="line.451"></a>
<span class="sourceLineNo">452</span>        }<a name="line.452"></a>
<span class="sourceLineNo">453</span>        Assert.assertFalse(j.hasNext());<a name="line.453"></a>
<span class="sourceLineNo">454</span>    }<a name="line.454"></a>
<span class="sourceLineNo">455</span>}<a name="line.455"></a>




























































</pre>
</div>
</body>
</html>
