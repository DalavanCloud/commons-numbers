<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>DividedDifferenceInterpolatorTest xref</title>
<link type="text/css" rel="stylesheet" href="../../../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../testapidocs/org/apache/commons/math3/analysis/interpolation/DividedDifferenceInterpolatorTest.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Licensed to the Apache Software Foundation (ASF) under one or more</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> * contributor license agreements.  See the NOTICE file distributed with</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * this work for additional information regarding copyright ownership.</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * The ASF licenses this file to You under the Apache License, Version 2.0</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * (the "License"); you may not use this file except in compliance with</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> * the License.  You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *      <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">package</strong> org.apache.commons.math3.analysis.interpolation;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.analysis.UnivariateFunction;
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.analysis.function.Expm1;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.analysis.function.Sin;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.NonMonotonicSequenceException;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.util.FastMath;
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> org.junit.Assert;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> org.junit.Test;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <em class="jxr_javadoccomment"> * Test case for Divided Difference interpolator.</em>
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <em class="jxr_javadoccomment"> * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <em class="jxr_javadoccomment"> * The error of polynomial interpolation is</em>
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <em class="jxr_javadoccomment"> *     f(z) - p(z) = f^(n)(zeta) * (z-x[0])(z-x[1])...(z-x[n-1]) / n!</em>
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <em class="jxr_javadoccomment"> * where f^(n) is the n-th derivative of the approximated function and</em>
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <em class="jxr_javadoccomment"> * zeta is some point in the interval determined by x[] and z.</em>
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  <em class="jxr_javadoccomment"> * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  <em class="jxr_javadoccomment"> * Since zeta is unknown, f^(n)(zeta) cannot be calculated. But we can bound</em>
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  <em class="jxr_javadoccomment"> * it and use the absolute value upper bound for estimates. For reference,</em>
<a class="jxr_linenumber" name="L38" href="#L38">38</a>  <em class="jxr_javadoccomment"> * see &lt;b&gt;Introduction to Numerical Analysis&lt;/b&gt;, ISBN 038795452X, chapter 2.</em>
<a class="jxr_linenumber" name="L39" href="#L39">39</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L40" href="#L40">40</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L41" href="#L41">41</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../../org/apache/commons/math3/analysis/interpolation/DividedDifferenceInterpolatorTest.html">DividedDifferenceInterpolatorTest</a> {
<a class="jxr_linenumber" name="L42" href="#L42">42</a>  
<a class="jxr_linenumber" name="L43" href="#L43">43</a>      <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L44" href="#L44">44</a>  <em class="jxr_javadoccomment">     * Test of interpolator for the sine function.</em>
<a class="jxr_linenumber" name="L45" href="#L45">45</a>  <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L46" href="#L46">46</a>  <em class="jxr_javadoccomment">     * |sin^(n)(zeta)| &lt;= 1.0, zeta in [0, 2*PI]</em>
<a class="jxr_linenumber" name="L47" href="#L47">47</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L48" href="#L48">48</a>      @Test
<a class="jxr_linenumber" name="L49" href="#L49">49</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testSinFunction() {
<a class="jxr_linenumber" name="L50" href="#L50">50</a>          UnivariateFunction f = <strong class="jxr_keyword">new</strong> Sin();
<a class="jxr_linenumber" name="L51" href="#L51">51</a>          UnivariateInterpolator interpolator = <strong class="jxr_keyword">new</strong> DividedDifferenceInterpolator();
<a class="jxr_linenumber" name="L52" href="#L52">52</a>          <strong class="jxr_keyword">double</strong> x[], y[], z, expected, result, tolerance;
<a class="jxr_linenumber" name="L53" href="#L53">53</a>  
<a class="jxr_linenumber" name="L54" href="#L54">54</a>          <em class="jxr_comment">// 6 interpolating points on interval [0, 2*PI]</em>
<a class="jxr_linenumber" name="L55" href="#L55">55</a>          <strong class="jxr_keyword">int</strong> n = 6;
<a class="jxr_linenumber" name="L56" href="#L56">56</a>          <strong class="jxr_keyword">double</strong> min = 0.0, max = 2 * FastMath.PI;
<a class="jxr_linenumber" name="L57" href="#L57">57</a>          x = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[n];
<a class="jxr_linenumber" name="L58" href="#L58">58</a>          y = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[n];
<a class="jxr_linenumber" name="L59" href="#L59">59</a>          <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; n; i++) {
<a class="jxr_linenumber" name="L60" href="#L60">60</a>              x[i] = min + i * (max - min) / n;
<a class="jxr_linenumber" name="L61" href="#L61">61</a>              y[i] = f.value(x[i]);
<a class="jxr_linenumber" name="L62" href="#L62">62</a>          }
<a class="jxr_linenumber" name="L63" href="#L63">63</a>          <strong class="jxr_keyword">double</strong> derivativebound = 1.0;
<a class="jxr_linenumber" name="L64" href="#L64">64</a>          UnivariateFunction p = interpolator.interpolate(x, y);
<a class="jxr_linenumber" name="L65" href="#L65">65</a>  
<a class="jxr_linenumber" name="L66" href="#L66">66</a>          z = FastMath.PI / 4; expected = f.value(z); result = p.value(z);
<a class="jxr_linenumber" name="L67" href="#L67">67</a>          tolerance = FastMath.abs(derivativebound * partialerror(x, z));
<a class="jxr_linenumber" name="L68" href="#L68">68</a>          Assert.assertEquals(expected, result, tolerance);
<a class="jxr_linenumber" name="L69" href="#L69">69</a>  
<a class="jxr_linenumber" name="L70" href="#L70">70</a>          z = FastMath.PI * 1.5; expected = f.value(z); result = p.value(z);
<a class="jxr_linenumber" name="L71" href="#L71">71</a>          tolerance = FastMath.abs(derivativebound * partialerror(x, z));
<a class="jxr_linenumber" name="L72" href="#L72">72</a>          Assert.assertEquals(expected, result, tolerance);
<a class="jxr_linenumber" name="L73" href="#L73">73</a>      }
<a class="jxr_linenumber" name="L74" href="#L74">74</a>  
<a class="jxr_linenumber" name="L75" href="#L75">75</a>      <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L76" href="#L76">76</a>  <em class="jxr_javadoccomment">     * Test of interpolator for the exponential function.</em>
<a class="jxr_linenumber" name="L77" href="#L77">77</a>  <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L78" href="#L78">78</a>  <em class="jxr_javadoccomment">     * |expm1^(n)(zeta)| &lt;= e, zeta in [-1, 1]</em>
<a class="jxr_linenumber" name="L79" href="#L79">79</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L80" href="#L80">80</a>      @Test
<a class="jxr_linenumber" name="L81" href="#L81">81</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testExpm1Function() {
<a class="jxr_linenumber" name="L82" href="#L82">82</a>          UnivariateFunction f = <strong class="jxr_keyword">new</strong> Expm1();
<a class="jxr_linenumber" name="L83" href="#L83">83</a>          UnivariateInterpolator interpolator = <strong class="jxr_keyword">new</strong> DividedDifferenceInterpolator();
<a class="jxr_linenumber" name="L84" href="#L84">84</a>          <strong class="jxr_keyword">double</strong> x[], y[], z, expected, result, tolerance;
<a class="jxr_linenumber" name="L85" href="#L85">85</a>  
<a class="jxr_linenumber" name="L86" href="#L86">86</a>          <em class="jxr_comment">// 5 interpolating points on interval [-1, 1]</em>
<a class="jxr_linenumber" name="L87" href="#L87">87</a>          <strong class="jxr_keyword">int</strong> n = 5;
<a class="jxr_linenumber" name="L88" href="#L88">88</a>          <strong class="jxr_keyword">double</strong> min = -1.0, max = 1.0;
<a class="jxr_linenumber" name="L89" href="#L89">89</a>          x = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[n];
<a class="jxr_linenumber" name="L90" href="#L90">90</a>          y = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[n];
<a class="jxr_linenumber" name="L91" href="#L91">91</a>          <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; n; i++) {
<a class="jxr_linenumber" name="L92" href="#L92">92</a>              x[i] = min + i * (max - min) / n;
<a class="jxr_linenumber" name="L93" href="#L93">93</a>              y[i] = f.value(x[i]);
<a class="jxr_linenumber" name="L94" href="#L94">94</a>          }
<a class="jxr_linenumber" name="L95" href="#L95">95</a>          <strong class="jxr_keyword">double</strong> derivativebound = FastMath.E;
<a class="jxr_linenumber" name="L96" href="#L96">96</a>          UnivariateFunction p = interpolator.interpolate(x, y);
<a class="jxr_linenumber" name="L97" href="#L97">97</a>  
<a class="jxr_linenumber" name="L98" href="#L98">98</a>          z = 0.0; expected = f.value(z); result = p.value(z);
<a class="jxr_linenumber" name="L99" href="#L99">99</a>          tolerance = FastMath.abs(derivativebound * partialerror(x, z));
<a class="jxr_linenumber" name="L100" href="#L100">100</a>         Assert.assertEquals(expected, result, tolerance);
<a class="jxr_linenumber" name="L101" href="#L101">101</a> 
<a class="jxr_linenumber" name="L102" href="#L102">102</a>         z = 0.5; expected = f.value(z); result = p.value(z);
<a class="jxr_linenumber" name="L103" href="#L103">103</a>         tolerance = FastMath.abs(derivativebound * partialerror(x, z));
<a class="jxr_linenumber" name="L104" href="#L104">104</a>         Assert.assertEquals(expected, result, tolerance);
<a class="jxr_linenumber" name="L105" href="#L105">105</a> 
<a class="jxr_linenumber" name="L106" href="#L106">106</a>         z = -0.5; expected = f.value(z); result = p.value(z);
<a class="jxr_linenumber" name="L107" href="#L107">107</a>         tolerance = FastMath.abs(derivativebound * partialerror(x, z));
<a class="jxr_linenumber" name="L108" href="#L108">108</a>         Assert.assertEquals(expected, result, tolerance);
<a class="jxr_linenumber" name="L109" href="#L109">109</a>     }
<a class="jxr_linenumber" name="L110" href="#L110">110</a> 
<a class="jxr_linenumber" name="L111" href="#L111">111</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L112" href="#L112">112</a> <em class="jxr_javadoccomment">     * Test of parameters for the interpolator.</em>
<a class="jxr_linenumber" name="L113" href="#L113">113</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L114" href="#L114">114</a>     @Test
<a class="jxr_linenumber" name="L115" href="#L115">115</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testParameters() {
<a class="jxr_linenumber" name="L116" href="#L116">116</a>         UnivariateInterpolator interpolator = <strong class="jxr_keyword">new</strong> DividedDifferenceInterpolator();
<a class="jxr_linenumber" name="L117" href="#L117">117</a> 
<a class="jxr_linenumber" name="L118" href="#L118">118</a>         <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L119" href="#L119">119</a>             <em class="jxr_comment">// bad abscissas array</em>
<a class="jxr_linenumber" name="L120" href="#L120">120</a>             <strong class="jxr_keyword">double</strong> x[] = { 1.0, 2.0, 2.0, 4.0 };
<a class="jxr_linenumber" name="L121" href="#L121">121</a>             <strong class="jxr_keyword">double</strong> y[] = { 0.0, 4.0, 4.0, 2.5 };
<a class="jxr_linenumber" name="L122" href="#L122">122</a>             UnivariateFunction p = interpolator.interpolate(x, y);
<a class="jxr_linenumber" name="L123" href="#L123">123</a>             p.value(0.0);
<a class="jxr_linenumber" name="L124" href="#L124">124</a>             Assert.fail(<span class="jxr_string">"Expecting NonMonotonicSequenceException - bad abscissas array"</span>);
<a class="jxr_linenumber" name="L125" href="#L125">125</a>         } <strong class="jxr_keyword">catch</strong> (NonMonotonicSequenceException ex) {
<a class="jxr_linenumber" name="L126" href="#L126">126</a>             <em class="jxr_comment">// expected</em>
<a class="jxr_linenumber" name="L127" href="#L127">127</a>         }
<a class="jxr_linenumber" name="L128" href="#L128">128</a>     }
<a class="jxr_linenumber" name="L129" href="#L129">129</a> 
<a class="jxr_linenumber" name="L130" href="#L130">130</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L131" href="#L131">131</a> <em class="jxr_javadoccomment">     * Returns the partial error term (z-x[0])(z-x[1])...(z-x[n-1])/n!</em>
<a class="jxr_linenumber" name="L132" href="#L132">132</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L133" href="#L133">133</a>     <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">double</strong> partialerror(<strong class="jxr_keyword">double</strong> x[], <strong class="jxr_keyword">double</strong> z) <strong class="jxr_keyword">throws</strong>
<a class="jxr_linenumber" name="L134" href="#L134">134</a>         IllegalArgumentException {
<a class="jxr_linenumber" name="L135" href="#L135">135</a> 
<a class="jxr_linenumber" name="L136" href="#L136">136</a>         <strong class="jxr_keyword">if</strong> (x.length &lt; 1) {
<a class="jxr_linenumber" name="L137" href="#L137">137</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> IllegalArgumentException
<a class="jxr_linenumber" name="L138" href="#L138">138</a>                 (<span class="jxr_string">"Interpolation array cannot be empty."</span>);
<a class="jxr_linenumber" name="L139" href="#L139">139</a>         }
<a class="jxr_linenumber" name="L140" href="#L140">140</a>         <strong class="jxr_keyword">double</strong> out = 1;
<a class="jxr_linenumber" name="L141" href="#L141">141</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; x.length; i++) {
<a class="jxr_linenumber" name="L142" href="#L142">142</a>             out *= (z - x[i]) / (i + 1);
<a class="jxr_linenumber" name="L143" href="#L143">143</a>         }
<a class="jxr_linenumber" name="L144" href="#L144">144</a>         <strong class="jxr_keyword">return</strong> out;
<a class="jxr_linenumber" name="L145" href="#L145">145</a>     }
<a class="jxr_linenumber" name="L146" href="#L146">146</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2003&#x2013;2016 <a href="http://www.apache.org/">The Apache Software Foundation</a>. All rights reserved.</div>
</body>
</html>
