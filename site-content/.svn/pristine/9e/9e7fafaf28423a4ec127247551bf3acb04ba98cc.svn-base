<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements. See the NOTICE file distributed with this<a name="line.3"></a>
<span class="sourceLineNo">004</span> * work for additional information regarding copyright ownership. The ASF<a name="line.4"></a>
<span class="sourceLineNo">005</span> * licenses this file to You under the Apache License, Version 2.0 (the<a name="line.5"></a>
<span class="sourceLineNo">006</span> * "License"); you may not use this file except in compliance with the License.<a name="line.6"></a>
<span class="sourceLineNo">007</span> * You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law<a name="line.8"></a>
<span class="sourceLineNo">009</span> * or agreed to in writing, software distributed under the License is<a name="line.9"></a>
<span class="sourceLineNo">010</span> * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY<a name="line.10"></a>
<span class="sourceLineNo">011</span> * KIND, either express or implied. See the License for the specific language<a name="line.11"></a>
<span class="sourceLineNo">012</span> * governing permissions and limitations under the License.<a name="line.12"></a>
<span class="sourceLineNo">013</span> */<a name="line.13"></a>
<span class="sourceLineNo">014</span>package org.apache.commons.math3.optim.nonlinear.vector.jacobian;<a name="line.14"></a>
<span class="sourceLineNo">015</span><a name="line.15"></a>
<span class="sourceLineNo">016</span>import java.util.Arrays;<a name="line.16"></a>
<span class="sourceLineNo">017</span>import java.util.List;<a name="line.17"></a>
<span class="sourceLineNo">018</span>import java.util.ArrayList;<a name="line.18"></a>
<span class="sourceLineNo">019</span>import java.awt.geom.Point2D;<a name="line.19"></a>
<span class="sourceLineNo">020</span><a name="line.20"></a>
<span class="sourceLineNo">021</span>import org.apache.commons.math3.optim.PointVectorValuePair;<a name="line.21"></a>
<span class="sourceLineNo">022</span>import org.apache.commons.math3.optim.InitialGuess;<a name="line.22"></a>
<span class="sourceLineNo">023</span>import org.apache.commons.math3.optim.MaxEval;<a name="line.23"></a>
<span class="sourceLineNo">024</span>import org.apache.commons.math3.optim.nonlinear.vector.Target;<a name="line.24"></a>
<span class="sourceLineNo">025</span>import org.apache.commons.math3.optim.nonlinear.vector.Weight;<a name="line.25"></a>
<span class="sourceLineNo">026</span>import org.apache.commons.math3.stat.descriptive.SummaryStatistics;<a name="line.26"></a>
<span class="sourceLineNo">027</span>import org.apache.commons.math3.stat.descriptive.StatisticalSummary;<a name="line.27"></a>
<span class="sourceLineNo">028</span>import org.apache.commons.math3.util.FastMath;<a name="line.28"></a>
<span class="sourceLineNo">029</span>import org.junit.Test;<a name="line.29"></a>
<span class="sourceLineNo">030</span>import org.junit.Assert;<a name="line.30"></a>
<span class="sourceLineNo">031</span><a name="line.31"></a>
<span class="sourceLineNo">032</span>/**<a name="line.32"></a>
<span class="sourceLineNo">033</span> * This class demonstrates the main functionality of the<a name="line.33"></a>
<span class="sourceLineNo">034</span> * {@link AbstractLeastSquaresOptimizer}, common to the<a name="line.34"></a>
<span class="sourceLineNo">035</span> * optimizer implementations in package<a name="line.35"></a>
<span class="sourceLineNo">036</span> * {@link org.apache.commons.math3.optimization.general}.<a name="line.36"></a>
<span class="sourceLineNo">037</span> * &lt;br/&gt;<a name="line.37"></a>
<span class="sourceLineNo">038</span> * Not enabled by default, as the class name does not end with "Test".<a name="line.38"></a>
<span class="sourceLineNo">039</span> * &lt;br/&gt;<a name="line.39"></a>
<span class="sourceLineNo">040</span> * Invoke by running<a name="line.40"></a>
<span class="sourceLineNo">041</span> * &lt;pre&gt;&lt;code&gt;<a name="line.41"></a>
<span class="sourceLineNo">042</span> *  mvn test -Dtest=AbstractLeastSquaresOptimizerTestValidation<a name="line.42"></a>
<span class="sourceLineNo">043</span> * &lt;/code&gt;&lt;/pre&gt;<a name="line.43"></a>
<span class="sourceLineNo">044</span> * or by running<a name="line.44"></a>
<span class="sourceLineNo">045</span> * &lt;pre&gt;&lt;code&gt;<a name="line.45"></a>
<span class="sourceLineNo">046</span> *  mvn test -Dtest=AbstractLeastSquaresOptimizerTestValidation -DargLine="-DmcRuns=1234 -server"<a name="line.46"></a>
<span class="sourceLineNo">047</span> * &lt;/code&gt;&lt;/pre&gt;<a name="line.47"></a>
<span class="sourceLineNo">048</span> */<a name="line.48"></a>
<span class="sourceLineNo">049</span>@Deprecated<a name="line.49"></a>
<span class="sourceLineNo">050</span>public class AbstractLeastSquaresOptimizerTestValidation {<a name="line.50"></a>
<span class="sourceLineNo">051</span>    private static final int MONTE_CARLO_RUNS = Integer.parseInt(System.getProperty("mcRuns",<a name="line.51"></a>
<span class="sourceLineNo">052</span>                                                                                    "100"));<a name="line.52"></a>
<span class="sourceLineNo">053</span><a name="line.53"></a>
<span class="sourceLineNo">054</span>    /**<a name="line.54"></a>
<span class="sourceLineNo">055</span>     * Using a Monte-Carlo procedure, this test checks the error estimations<a name="line.55"></a>
<span class="sourceLineNo">056</span>     * as provided by the square-root of the diagonal elements of the<a name="line.56"></a>
<span class="sourceLineNo">057</span>     * covariance matrix.<a name="line.57"></a>
<span class="sourceLineNo">058</span>     * &lt;br/&gt;<a name="line.58"></a>
<span class="sourceLineNo">059</span>     * The test generates sets of observations, each sampled from<a name="line.59"></a>
<span class="sourceLineNo">060</span>     * a Gaussian distribution.<a name="line.60"></a>
<span class="sourceLineNo">061</span>     * &lt;br/&gt;<a name="line.61"></a>
<span class="sourceLineNo">062</span>     * The optimization problem solved is defined in class<a name="line.62"></a>
<span class="sourceLineNo">063</span>     * {@link StraightLineProblem}.<a name="line.63"></a>
<span class="sourceLineNo">064</span>     * &lt;br/&gt;<a name="line.64"></a>
<span class="sourceLineNo">065</span>     * The output (on stdout) will be a table summarizing the distribution<a name="line.65"></a>
<span class="sourceLineNo">066</span>     * of parameters generated by the Monte-Carlo process and by the direct<a name="line.66"></a>
<span class="sourceLineNo">067</span>     * estimation provided by the diagonal elements of the covariance matrix.<a name="line.67"></a>
<span class="sourceLineNo">068</span>     */<a name="line.68"></a>
<span class="sourceLineNo">069</span>    @Test<a name="line.69"></a>
<span class="sourceLineNo">070</span>    public void testParametersErrorMonteCarloObservations() {<a name="line.70"></a>
<span class="sourceLineNo">071</span>        // Error on the observations.<a name="line.71"></a>
<span class="sourceLineNo">072</span>        final double yError = 15;<a name="line.72"></a>
<span class="sourceLineNo">073</span><a name="line.73"></a>
<span class="sourceLineNo">074</span>        // True values of the parameters.<a name="line.74"></a>
<span class="sourceLineNo">075</span>        final double slope = 123.456;<a name="line.75"></a>
<span class="sourceLineNo">076</span>        final double offset = -98.765;<a name="line.76"></a>
<span class="sourceLineNo">077</span><a name="line.77"></a>
<span class="sourceLineNo">078</span>        // Samples generator.<a name="line.78"></a>
<span class="sourceLineNo">079</span>        final RandomStraightLinePointGenerator lineGenerator<a name="line.79"></a>
<span class="sourceLineNo">080</span>            = new RandomStraightLinePointGenerator(slope, offset,<a name="line.80"></a>
<span class="sourceLineNo">081</span>                                                   yError,<a name="line.81"></a>
<span class="sourceLineNo">082</span>                                                   -1e3, 1e4,<a name="line.82"></a>
<span class="sourceLineNo">083</span>                                                   138577L);<a name="line.83"></a>
<span class="sourceLineNo">084</span><a name="line.84"></a>
<span class="sourceLineNo">085</span>        // Number of observations.<a name="line.85"></a>
<span class="sourceLineNo">086</span>        final int numObs = 100; // XXX Should be a command-line option.<a name="line.86"></a>
<span class="sourceLineNo">087</span>        // number of parameters.<a name="line.87"></a>
<span class="sourceLineNo">088</span>        final int numParams = 2;<a name="line.88"></a>
<span class="sourceLineNo">089</span><a name="line.89"></a>
<span class="sourceLineNo">090</span>        // Parameters found for each of Monte-Carlo run.<a name="line.90"></a>
<span class="sourceLineNo">091</span>        final SummaryStatistics[] paramsFoundByDirectSolution = new SummaryStatistics[numParams];<a name="line.91"></a>
<span class="sourceLineNo">092</span>        // Sigma estimations (square-root of the diagonal elements of the<a name="line.92"></a>
<span class="sourceLineNo">093</span>        // covariance matrix), for each Monte-Carlo run.<a name="line.93"></a>
<span class="sourceLineNo">094</span>        final SummaryStatistics[] sigmaEstimate = new SummaryStatistics[numParams];<a name="line.94"></a>
<span class="sourceLineNo">095</span><a name="line.95"></a>
<span class="sourceLineNo">096</span>        // Initialize statistics accumulators.<a name="line.96"></a>
<span class="sourceLineNo">097</span>        for (int i = 0; i &lt; numParams; i++) {<a name="line.97"></a>
<span class="sourceLineNo">098</span>            paramsFoundByDirectSolution[i] = new SummaryStatistics();<a name="line.98"></a>
<span class="sourceLineNo">099</span>            sigmaEstimate[i] = new SummaryStatistics();<a name="line.99"></a>
<span class="sourceLineNo">100</span>        }<a name="line.100"></a>
<span class="sourceLineNo">101</span><a name="line.101"></a>
<span class="sourceLineNo">102</span>        // Dummy optimizer (to compute the covariance matrix).<a name="line.102"></a>
<span class="sourceLineNo">103</span>        final AbstractLeastSquaresOptimizer optim = new DummyOptimizer();<a name="line.103"></a>
<span class="sourceLineNo">104</span>        final double[] init = { slope, offset };<a name="line.104"></a>
<span class="sourceLineNo">105</span><a name="line.105"></a>
<span class="sourceLineNo">106</span>        // Monte-Carlo (generates many sets of observations).<a name="line.106"></a>
<span class="sourceLineNo">107</span>        final int mcRepeat = MONTE_CARLO_RUNS;<a name="line.107"></a>
<span class="sourceLineNo">108</span>        int mcCount = 0;<a name="line.108"></a>
<span class="sourceLineNo">109</span>        while (mcCount &lt; mcRepeat) {<a name="line.109"></a>
<span class="sourceLineNo">110</span>            // Observations.<a name="line.110"></a>
<span class="sourceLineNo">111</span>            final Point2D.Double[] obs = lineGenerator.generate(numObs);<a name="line.111"></a>
<span class="sourceLineNo">112</span><a name="line.112"></a>
<span class="sourceLineNo">113</span>            final StraightLineProblem problem = new StraightLineProblem(yError);<a name="line.113"></a>
<span class="sourceLineNo">114</span>            for (int i = 0; i &lt; numObs; i++) {<a name="line.114"></a>
<span class="sourceLineNo">115</span>                final Point2D.Double p = obs[i];<a name="line.115"></a>
<span class="sourceLineNo">116</span>                problem.addPoint(p.x, p.y);<a name="line.116"></a>
<span class="sourceLineNo">117</span>            }<a name="line.117"></a>
<span class="sourceLineNo">118</span><a name="line.118"></a>
<span class="sourceLineNo">119</span>            // Direct solution (using simple regression).<a name="line.119"></a>
<span class="sourceLineNo">120</span>            final double[] regress = problem.solve();<a name="line.120"></a>
<span class="sourceLineNo">121</span><a name="line.121"></a>
<span class="sourceLineNo">122</span>            // Estimation of the standard deviation (diagonal elements of the<a name="line.122"></a>
<span class="sourceLineNo">123</span>            // covariance matrix).<a name="line.123"></a>
<span class="sourceLineNo">124</span>            final PointVectorValuePair optimum<a name="line.124"></a>
<span class="sourceLineNo">125</span>                = optim.optimize(new MaxEval(Integer.MAX_VALUE),<a name="line.125"></a>
<span class="sourceLineNo">126</span>                                 problem.getModelFunction(),<a name="line.126"></a>
<span class="sourceLineNo">127</span>                                 problem.getModelFunctionJacobian(),<a name="line.127"></a>
<span class="sourceLineNo">128</span>                                 new Target(problem.target()),<a name="line.128"></a>
<span class="sourceLineNo">129</span>                                 new Weight(problem.weight()),<a name="line.129"></a>
<span class="sourceLineNo">130</span>                                 new InitialGuess(init));<a name="line.130"></a>
<span class="sourceLineNo">131</span>            final double[] sigma = optim.computeSigma(optimum.getPoint(), 1e-14);<a name="line.131"></a>
<span class="sourceLineNo">132</span><a name="line.132"></a>
<span class="sourceLineNo">133</span>            // Accumulate statistics.<a name="line.133"></a>
<span class="sourceLineNo">134</span>            for (int i = 0; i &lt; numParams; i++) {<a name="line.134"></a>
<span class="sourceLineNo">135</span>                paramsFoundByDirectSolution[i].addValue(regress[i]);<a name="line.135"></a>
<span class="sourceLineNo">136</span>                sigmaEstimate[i].addValue(sigma[i]);<a name="line.136"></a>
<span class="sourceLineNo">137</span>            }<a name="line.137"></a>
<span class="sourceLineNo">138</span><a name="line.138"></a>
<span class="sourceLineNo">139</span>            // Next Monte-Carlo.<a name="line.139"></a>
<span class="sourceLineNo">140</span>            ++mcCount;<a name="line.140"></a>
<span class="sourceLineNo">141</span>        }<a name="line.141"></a>
<span class="sourceLineNo">142</span><a name="line.142"></a>
<span class="sourceLineNo">143</span>        // Print statistics.<a name="line.143"></a>
<span class="sourceLineNo">144</span>        final String line = "--------------------------------------------------------------";<a name="line.144"></a>
<span class="sourceLineNo">145</span>        System.out.println("                 True value       Mean        Std deviation");<a name="line.145"></a>
<span class="sourceLineNo">146</span>        for (int i = 0; i &lt; numParams; i++) {<a name="line.146"></a>
<span class="sourceLineNo">147</span>            System.out.println(line);<a name="line.147"></a>
<span class="sourceLineNo">148</span>            System.out.println("Parameter #" + i);<a name="line.148"></a>
<span class="sourceLineNo">149</span><a name="line.149"></a>
<span class="sourceLineNo">150</span>            StatisticalSummary s = paramsFoundByDirectSolution[i].getSummary();<a name="line.150"></a>
<span class="sourceLineNo">151</span>            System.out.printf("              %+.6e   %+.6e   %+.6e\n",<a name="line.151"></a>
<span class="sourceLineNo">152</span>                              init[i],<a name="line.152"></a>
<span class="sourceLineNo">153</span>                              s.getMean(),<a name="line.153"></a>
<span class="sourceLineNo">154</span>                              s.getStandardDeviation());<a name="line.154"></a>
<span class="sourceLineNo">155</span><a name="line.155"></a>
<span class="sourceLineNo">156</span>            s = sigmaEstimate[i].getSummary();<a name="line.156"></a>
<span class="sourceLineNo">157</span>            System.out.printf("sigma: %+.6e (%+.6e)\n",<a name="line.157"></a>
<span class="sourceLineNo">158</span>                              s.getMean(),<a name="line.158"></a>
<span class="sourceLineNo">159</span>                              s.getStandardDeviation());<a name="line.159"></a>
<span class="sourceLineNo">160</span>        }<a name="line.160"></a>
<span class="sourceLineNo">161</span>        System.out.println(line);<a name="line.161"></a>
<span class="sourceLineNo">162</span><a name="line.162"></a>
<span class="sourceLineNo">163</span>        // Check the error estimation.<a name="line.163"></a>
<span class="sourceLineNo">164</span>        for (int i = 0; i &lt; numParams; i++) {<a name="line.164"></a>
<span class="sourceLineNo">165</span>            Assert.assertEquals(paramsFoundByDirectSolution[i].getSummary().getStandardDeviation(),<a name="line.165"></a>
<span class="sourceLineNo">166</span>                                sigmaEstimate[i].getSummary().getMean(),<a name="line.166"></a>
<span class="sourceLineNo">167</span>                                8e-2);<a name="line.167"></a>
<span class="sourceLineNo">168</span>        }<a name="line.168"></a>
<span class="sourceLineNo">169</span>    }<a name="line.169"></a>
<span class="sourceLineNo">170</span><a name="line.170"></a>
<span class="sourceLineNo">171</span>    /**<a name="line.171"></a>
<span class="sourceLineNo">172</span>     * In this test, the set of observations is fixed.<a name="line.172"></a>
<span class="sourceLineNo">173</span>     * Using a Monte-Carlo procedure, it generates sets of parameters,<a name="line.173"></a>
<span class="sourceLineNo">174</span>     * and determine the parameter change that will result in the<a name="line.174"></a>
<span class="sourceLineNo">175</span>     * normalized chi-square becoming larger by one than the value from<a name="line.175"></a>
<span class="sourceLineNo">176</span>     * the best fit solution.<a name="line.176"></a>
<span class="sourceLineNo">177</span>     * &lt;br/&gt;<a name="line.177"></a>
<span class="sourceLineNo">178</span>     * The optimization problem solved is defined in class<a name="line.178"></a>
<span class="sourceLineNo">179</span>     * {@link StraightLineProblem}.<a name="line.179"></a>
<span class="sourceLineNo">180</span>     * &lt;br/&gt;<a name="line.180"></a>
<span class="sourceLineNo">181</span>     * The output (on stdout) will be a list of lines containing:<a name="line.181"></a>
<span class="sourceLineNo">182</span>     * &lt;ul&gt;<a name="line.182"></a>
<span class="sourceLineNo">183</span>     *  &lt;li&gt;slope of the straight line,&lt;/li&gt;<a name="line.183"></a>
<span class="sourceLineNo">184</span>     *  &lt;li&gt;intercept of the straight line,&lt;/li&gt;<a name="line.184"></a>
<span class="sourceLineNo">185</span>     *  &lt;li&gt;chi-square of the solution defined by the above two values.&lt;/li&gt;<a name="line.185"></a>
<span class="sourceLineNo">186</span>     * &lt;/ul&gt;<a name="line.186"></a>
<span class="sourceLineNo">187</span>     * The output is separated into two blocks (with a blank line between<a name="line.187"></a>
<span class="sourceLineNo">188</span>     * them); the first block will contain all parameter sets for which<a name="line.188"></a>
<span class="sourceLineNo">189</span>     * {@code chi2 &lt; chi2_b + 1}<a name="line.189"></a>
<span class="sourceLineNo">190</span>     * and the second block, all sets for which<a name="line.190"></a>
<span class="sourceLineNo">191</span>     * {@code chi2 &gt;= chi2_b + 1}<a name="line.191"></a>
<span class="sourceLineNo">192</span>     * where {@code chi2_b} is the lowest chi-square (corresponding to the<a name="line.192"></a>
<span class="sourceLineNo">193</span>     * best solution).<a name="line.193"></a>
<span class="sourceLineNo">194</span>     */<a name="line.194"></a>
<span class="sourceLineNo">195</span>    @Test<a name="line.195"></a>
<span class="sourceLineNo">196</span>    public void testParametersErrorMonteCarloParameters() {<a name="line.196"></a>
<span class="sourceLineNo">197</span>        // Error on the observations.<a name="line.197"></a>
<span class="sourceLineNo">198</span>        final double yError = 15;<a name="line.198"></a>
<span class="sourceLineNo">199</span><a name="line.199"></a>
<span class="sourceLineNo">200</span>        // True values of the parameters.<a name="line.200"></a>
<span class="sourceLineNo">201</span>        final double slope = 123.456;<a name="line.201"></a>
<span class="sourceLineNo">202</span>        final double offset = -98.765;<a name="line.202"></a>
<span class="sourceLineNo">203</span><a name="line.203"></a>
<span class="sourceLineNo">204</span>        // Samples generator.<a name="line.204"></a>
<span class="sourceLineNo">205</span>        final RandomStraightLinePointGenerator lineGenerator<a name="line.205"></a>
<span class="sourceLineNo">206</span>            = new RandomStraightLinePointGenerator(slope, offset,<a name="line.206"></a>
<span class="sourceLineNo">207</span>                                                   yError,<a name="line.207"></a>
<span class="sourceLineNo">208</span>                                                   -1e3, 1e4,<a name="line.208"></a>
<span class="sourceLineNo">209</span>                                                   13839013L);<a name="line.209"></a>
<span class="sourceLineNo">210</span><a name="line.210"></a>
<span class="sourceLineNo">211</span>        // Number of observations.<a name="line.211"></a>
<span class="sourceLineNo">212</span>        final int numObs = 10;<a name="line.212"></a>
<span class="sourceLineNo">213</span><a name="line.213"></a>
<span class="sourceLineNo">214</span>        // Create a single set of observations.<a name="line.214"></a>
<span class="sourceLineNo">215</span>        final Point2D.Double[] obs = lineGenerator.generate(numObs);<a name="line.215"></a>
<span class="sourceLineNo">216</span><a name="line.216"></a>
<span class="sourceLineNo">217</span>        final StraightLineProblem problem = new StraightLineProblem(yError);<a name="line.217"></a>
<span class="sourceLineNo">218</span>        for (int i = 0; i &lt; numObs; i++) {<a name="line.218"></a>
<span class="sourceLineNo">219</span>            final Point2D.Double p = obs[i];<a name="line.219"></a>
<span class="sourceLineNo">220</span>            problem.addPoint(p.x, p.y);<a name="line.220"></a>
<span class="sourceLineNo">221</span>        }<a name="line.221"></a>
<span class="sourceLineNo">222</span><a name="line.222"></a>
<span class="sourceLineNo">223</span>        // Direct solution (using simple regression).<a name="line.223"></a>
<span class="sourceLineNo">224</span>        final double[] regress = problem.solve();<a name="line.224"></a>
<span class="sourceLineNo">225</span><a name="line.225"></a>
<span class="sourceLineNo">226</span>        // Dummy optimizer (to compute the chi-square).<a name="line.226"></a>
<span class="sourceLineNo">227</span>        final AbstractLeastSquaresOptimizer optim = new DummyOptimizer();<a name="line.227"></a>
<span class="sourceLineNo">228</span>        // Get chi-square of the best parameters set for the given set of<a name="line.228"></a>
<span class="sourceLineNo">229</span>        // observations.<a name="line.229"></a>
<span class="sourceLineNo">230</span>        final double bestChi2N = getChi2N(optim, problem, regress);<a name="line.230"></a>
<span class="sourceLineNo">231</span>        final double[] sigma = optim.computeSigma(regress, 1e-14);<a name="line.231"></a>
<span class="sourceLineNo">232</span><a name="line.232"></a>
<span class="sourceLineNo">233</span>        // Monte-Carlo (generates a grid of parameters).<a name="line.233"></a>
<span class="sourceLineNo">234</span>        final int mcRepeat = MONTE_CARLO_RUNS;<a name="line.234"></a>
<span class="sourceLineNo">235</span>        final int gridSize = (int) FastMath.sqrt(mcRepeat);<a name="line.235"></a>
<span class="sourceLineNo">236</span><a name="line.236"></a>
<span class="sourceLineNo">237</span>        // Parameters found for each of Monte-Carlo run.<a name="line.237"></a>
<span class="sourceLineNo">238</span>        // Index 0 = slope<a name="line.238"></a>
<span class="sourceLineNo">239</span>        // Index 1 = offset<a name="line.239"></a>
<span class="sourceLineNo">240</span>        // Index 2 = normalized chi2<a name="line.240"></a>
<span class="sourceLineNo">241</span>        final List&lt;double[]&gt; paramsAndChi2 = new ArrayList&lt;double[]&gt;(gridSize * gridSize);<a name="line.241"></a>
<span class="sourceLineNo">242</span><a name="line.242"></a>
<span class="sourceLineNo">243</span>        final double slopeRange = 10 * sigma[0];<a name="line.243"></a>
<span class="sourceLineNo">244</span>        final double offsetRange = 10 * sigma[1];<a name="line.244"></a>
<span class="sourceLineNo">245</span>        final double minSlope = slope - 0.5 * slopeRange;<a name="line.245"></a>
<span class="sourceLineNo">246</span>        final double minOffset = offset - 0.5 * offsetRange;<a name="line.246"></a>
<span class="sourceLineNo">247</span>        final double deltaSlope =  slopeRange/ gridSize;<a name="line.247"></a>
<span class="sourceLineNo">248</span>        final double deltaOffset = offsetRange / gridSize;<a name="line.248"></a>
<span class="sourceLineNo">249</span>        for (int i = 0; i &lt; gridSize; i++) {<a name="line.249"></a>
<span class="sourceLineNo">250</span>            final double s = minSlope + i * deltaSlope;<a name="line.250"></a>
<span class="sourceLineNo">251</span>            for (int j = 0; j &lt; gridSize; j++) {<a name="line.251"></a>
<span class="sourceLineNo">252</span>                final double o = minOffset + j * deltaOffset;<a name="line.252"></a>
<span class="sourceLineNo">253</span>                final double chi2N = getChi2N(optim, problem, new double[] {s, o});<a name="line.253"></a>
<span class="sourceLineNo">254</span><a name="line.254"></a>
<span class="sourceLineNo">255</span>                paramsAndChi2.add(new double[] {s, o, chi2N});<a name="line.255"></a>
<span class="sourceLineNo">256</span>            }<a name="line.256"></a>
<span class="sourceLineNo">257</span>        }<a name="line.257"></a>
<span class="sourceLineNo">258</span><a name="line.258"></a>
<span class="sourceLineNo">259</span>        // Output (for use with "gnuplot").<a name="line.259"></a>
<span class="sourceLineNo">260</span><a name="line.260"></a>
<span class="sourceLineNo">261</span>        // Some info.<a name="line.261"></a>
<span class="sourceLineNo">262</span><a name="line.262"></a>
<span class="sourceLineNo">263</span>        // For plotting separately sets of parameters that have a large chi2.<a name="line.263"></a>
<span class="sourceLineNo">264</span>        final double chi2NPlusOne = bestChi2N + 1;<a name="line.264"></a>
<span class="sourceLineNo">265</span>        int numLarger = 0;<a name="line.265"></a>
<span class="sourceLineNo">266</span><a name="line.266"></a>
<span class="sourceLineNo">267</span>        final String lineFmt = "%+.10e %+.10e   %.8e\n";<a name="line.267"></a>
<span class="sourceLineNo">268</span><a name="line.268"></a>
<span class="sourceLineNo">269</span>        // Point with smallest chi-square.<a name="line.269"></a>
<span class="sourceLineNo">270</span>        System.out.printf(lineFmt, regress[0], regress[1], bestChi2N);<a name="line.270"></a>
<span class="sourceLineNo">271</span>        System.out.println(); // Empty line.<a name="line.271"></a>
<span class="sourceLineNo">272</span><a name="line.272"></a>
<span class="sourceLineNo">273</span>        // Points within the confidence interval.<a name="line.273"></a>
<span class="sourceLineNo">274</span>        for (double[] d : paramsAndChi2) {<a name="line.274"></a>
<span class="sourceLineNo">275</span>            if (d[2] &lt;= chi2NPlusOne) {<a name="line.275"></a>
<span class="sourceLineNo">276</span>                System.out.printf(lineFmt, d[0], d[1], d[2]);<a name="line.276"></a>
<span class="sourceLineNo">277</span>            }<a name="line.277"></a>
<span class="sourceLineNo">278</span>        }<a name="line.278"></a>
<span class="sourceLineNo">279</span>        System.out.println(); // Empty line.<a name="line.279"></a>
<span class="sourceLineNo">280</span><a name="line.280"></a>
<span class="sourceLineNo">281</span>        // Points outside the confidence interval.<a name="line.281"></a>
<span class="sourceLineNo">282</span>        for (double[] d : paramsAndChi2) {<a name="line.282"></a>
<span class="sourceLineNo">283</span>            if (d[2] &gt; chi2NPlusOne) {<a name="line.283"></a>
<span class="sourceLineNo">284</span>                ++numLarger;<a name="line.284"></a>
<span class="sourceLineNo">285</span>                System.out.printf(lineFmt, d[0], d[1], d[2]);<a name="line.285"></a>
<span class="sourceLineNo">286</span>            }<a name="line.286"></a>
<span class="sourceLineNo">287</span>        }<a name="line.287"></a>
<span class="sourceLineNo">288</span>        System.out.println(); // Empty line.<a name="line.288"></a>
<span class="sourceLineNo">289</span><a name="line.289"></a>
<span class="sourceLineNo">290</span>        System.out.println("# sigma=" + Arrays.toString(sigma));<a name="line.290"></a>
<span class="sourceLineNo">291</span>        System.out.println("# " + numLarger + " sets filtered out");<a name="line.291"></a>
<span class="sourceLineNo">292</span>    }<a name="line.292"></a>
<span class="sourceLineNo">293</span><a name="line.293"></a>
<span class="sourceLineNo">294</span>    /**<a name="line.294"></a>
<span class="sourceLineNo">295</span>     * @return the normalized chi-square.<a name="line.295"></a>
<span class="sourceLineNo">296</span>     */<a name="line.296"></a>
<span class="sourceLineNo">297</span>    private double getChi2N(AbstractLeastSquaresOptimizer optim,<a name="line.297"></a>
<span class="sourceLineNo">298</span>                            StraightLineProblem problem,<a name="line.298"></a>
<span class="sourceLineNo">299</span>                            double[] params) {<a name="line.299"></a>
<span class="sourceLineNo">300</span>        final double[] t = problem.target();<a name="line.300"></a>
<span class="sourceLineNo">301</span>        final double[] w = problem.weight();<a name="line.301"></a>
<span class="sourceLineNo">302</span><a name="line.302"></a>
<span class="sourceLineNo">303</span>        optim.optimize(new MaxEval(Integer.MAX_VALUE),<a name="line.303"></a>
<span class="sourceLineNo">304</span>                       problem.getModelFunction(),<a name="line.304"></a>
<span class="sourceLineNo">305</span>                       problem.getModelFunctionJacobian(),<a name="line.305"></a>
<span class="sourceLineNo">306</span>                       new Target(t),<a name="line.306"></a>
<span class="sourceLineNo">307</span>                       new Weight(w),<a name="line.307"></a>
<span class="sourceLineNo">308</span>                       new InitialGuess(params));<a name="line.308"></a>
<span class="sourceLineNo">309</span><a name="line.309"></a>
<span class="sourceLineNo">310</span>        return optim.getChiSquare() / (t.length - params.length);<a name="line.310"></a>
<span class="sourceLineNo">311</span>    }<a name="line.311"></a>
<span class="sourceLineNo">312</span>}<a name="line.312"></a>
<span class="sourceLineNo">313</span><a name="line.313"></a>
<span class="sourceLineNo">314</span>/**<a name="line.314"></a>
<span class="sourceLineNo">315</span> * A dummy optimizer.<a name="line.315"></a>
<span class="sourceLineNo">316</span> * Used for computing the covariance matrix.<a name="line.316"></a>
<span class="sourceLineNo">317</span> */<a name="line.317"></a>
<span class="sourceLineNo">318</span>@Deprecated<a name="line.318"></a>
<span class="sourceLineNo">319</span>class DummyOptimizer extends AbstractLeastSquaresOptimizer {<a name="line.319"></a>
<span class="sourceLineNo">320</span>    public DummyOptimizer() {<a name="line.320"></a>
<span class="sourceLineNo">321</span>        super(null);<a name="line.321"></a>
<span class="sourceLineNo">322</span>    }<a name="line.322"></a>
<span class="sourceLineNo">323</span><a name="line.323"></a>
<span class="sourceLineNo">324</span>    /**<a name="line.324"></a>
<span class="sourceLineNo">325</span>     * This method does nothing and returns a dummy value.<a name="line.325"></a>
<span class="sourceLineNo">326</span>     */<a name="line.326"></a>
<span class="sourceLineNo">327</span>    @Override<a name="line.327"></a>
<span class="sourceLineNo">328</span>    public PointVectorValuePair doOptimize() {<a name="line.328"></a>
<span class="sourceLineNo">329</span>        final double[] params = getStartPoint();<a name="line.329"></a>
<span class="sourceLineNo">330</span>        final double[] res = computeResiduals(computeObjectiveValue(params));<a name="line.330"></a>
<span class="sourceLineNo">331</span>        setCost(computeCost(res));<a name="line.331"></a>
<span class="sourceLineNo">332</span>        return new PointVectorValuePair(params, null);<a name="line.332"></a>
<span class="sourceLineNo">333</span>    }<a name="line.333"></a>
<span class="sourceLineNo">334</span>}<a name="line.334"></a>




























































</pre>
</div>
</body>
</html>
