<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>BinomialDistributionTest xref</title>
<link type="text/css" rel="stylesheet" href="../../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../testapidocs/org/apache/commons/math3/distribution/BinomialDistributionTest.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Licensed to the Apache Software Foundation (ASF) under one or more</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> * contributor license agreements. See the NOTICE file distributed with this</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * work for additional information regarding copyright ownership. The ASF</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * licenses this file to You under the Apache License, Version 2.0 (the</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * "License"); you may not use this file except in compliance with the License.</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> * You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> * <a href="http://www.apache.org/licenses/LICENSE-2.0" target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.0</a> Unless required by applicable law</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> * or agreed to in writing, software distributed under the License is</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * KIND, either express or implied. See the License for the specific language</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * governing permissions and limitations under the License.</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <strong class="jxr_keyword">package</strong> org.apache.commons.math3.distribution;
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  <strong class="jxr_keyword">import</strong> org.junit.Assert;
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">import</strong> org.junit.Test;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <em class="jxr_javadoccomment"> * Test cases for BinomialDistribution. Extends IntegerDistributionAbstractTest.</em>
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <em class="jxr_javadoccomment"> * See class javadoc for IntegerDistributionAbstractTest for details.</em>
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../org/apache/commons/math3/distribution/BinomialDistributionTest.html">BinomialDistributionTest</a> <strong class="jxr_keyword">extends</strong> <a href="../../../../../org/apache/commons/math3/distribution/IntegerDistributionAbstractTest.html">IntegerDistributionAbstractTest</a> {
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  
<a class="jxr_linenumber" name="L26" href="#L26">26</a>      <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <em class="jxr_javadoccomment">     * Constructor to override default tolerance.</em>
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L29" href="#L29">29</a>      <strong class="jxr_keyword">public</strong> <a href="../../../../../org/apache/commons/math3/distribution/BinomialDistributionTest.html">BinomialDistributionTest</a>() {
<a class="jxr_linenumber" name="L30" href="#L30">30</a>          setTolerance(1e-12);
<a class="jxr_linenumber" name="L31" href="#L31">31</a>      }
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  
<a class="jxr_linenumber" name="L33" href="#L33">33</a>      <em class="jxr_comment">// -------------- Implementations for abstract methods</em>
<a class="jxr_linenumber" name="L34" href="#L34">34</a>      <em class="jxr_comment">// -----------------------</em>
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  
<a class="jxr_linenumber" name="L36" href="#L36">36</a>      <em class="jxr_javadoccomment">/** Creates the default discrete distribution instance to use in tests. */</em>
<a class="jxr_linenumber" name="L37" href="#L37">37</a>      @Override
<a class="jxr_linenumber" name="L38" href="#L38">38</a>      <strong class="jxr_keyword">public</strong> IntegerDistribution makeDistribution() {
<a class="jxr_linenumber" name="L39" href="#L39">39</a>          <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> BinomialDistribution(10, 0.70);
<a class="jxr_linenumber" name="L40" href="#L40">40</a>      }
<a class="jxr_linenumber" name="L41" href="#L41">41</a>  
<a class="jxr_linenumber" name="L42" href="#L42">42</a>      <em class="jxr_javadoccomment">/** Creates the default probability density test input values. */</em>
<a class="jxr_linenumber" name="L43" href="#L43">43</a>      @Override
<a class="jxr_linenumber" name="L44" href="#L44">44</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">int</strong>[] makeDensityTestPoints() {
<a class="jxr_linenumber" name="L45" href="#L45">45</a>          <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">int</strong>[] { -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 };
<a class="jxr_linenumber" name="L46" href="#L46">46</a>      }
<a class="jxr_linenumber" name="L47" href="#L47">47</a>  
<a class="jxr_linenumber" name="L48" href="#L48">48</a>      <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L49" href="#L49">49</a>  <em class="jxr_javadoccomment">     * Creates the default probability density test expected values.</em>
<a class="jxr_linenumber" name="L50" href="#L50">50</a>  <em class="jxr_javadoccomment">     * Reference values are from R, version 2.15.3.</em>
<a class="jxr_linenumber" name="L51" href="#L51">51</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L52" href="#L52">52</a>      @Override
<a class="jxr_linenumber" name="L53" href="#L53">53</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">double</strong>[] makeDensityTestValues() {
<a class="jxr_linenumber" name="L54" href="#L54">54</a>          <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0d, 0.0000059049d, 0.000137781d, 0.0014467005,
<a class="jxr_linenumber" name="L55" href="#L55">55</a>              0.009001692, 0.036756909, 0.1029193452, 0.200120949, 0.266827932,
<a class="jxr_linenumber" name="L56" href="#L56">56</a>              0.2334744405, 0.121060821, 0.0282475249, 0d };
<a class="jxr_linenumber" name="L57" href="#L57">57</a>      }
<a class="jxr_linenumber" name="L58" href="#L58">58</a>  
<a class="jxr_linenumber" name="L59" href="#L59">59</a>      <em class="jxr_javadoccomment">/** Creates the default cumulative probability density test input values */</em>
<a class="jxr_linenumber" name="L60" href="#L60">60</a>      @Override
<a class="jxr_linenumber" name="L61" href="#L61">61</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">int</strong>[] makeCumulativeTestPoints() {
<a class="jxr_linenumber" name="L62" href="#L62">62</a>          <strong class="jxr_keyword">return</strong> makeDensityTestPoints();
<a class="jxr_linenumber" name="L63" href="#L63">63</a>      }
<a class="jxr_linenumber" name="L64" href="#L64">64</a>  
<a class="jxr_linenumber" name="L65" href="#L65">65</a>      <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L66" href="#L66">66</a>  <em class="jxr_javadoccomment">     * Creates the default cumulative probability density test expected values.</em>
<a class="jxr_linenumber" name="L67" href="#L67">67</a>  <em class="jxr_javadoccomment">     * Reference values are from R, version 2.15.3.</em>
<a class="jxr_linenumber" name="L68" href="#L68">68</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L69" href="#L69">69</a>      @Override
<a class="jxr_linenumber" name="L70" href="#L70">70</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">double</strong>[] makeCumulativeTestValues() {
<a class="jxr_linenumber" name="L71" href="#L71">71</a>          <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0d, 5.9049e-06, 0.0001436859, 0.0015903864, 0.0105920784,  0.0473489874,
<a class="jxr_linenumber" name="L72" href="#L72">72</a>              0.1502683326, 0.3503892816, 0.6172172136, 0.8506916541, 0.9717524751, 1d, 1d };
<a class="jxr_linenumber" name="L73" href="#L73">73</a>      }
<a class="jxr_linenumber" name="L74" href="#L74">74</a>  
<a class="jxr_linenumber" name="L75" href="#L75">75</a>      <em class="jxr_javadoccomment">/** Creates the default inverse cumulative probability test input values */</em>
<a class="jxr_linenumber" name="L76" href="#L76">76</a>      @Override
<a class="jxr_linenumber" name="L77" href="#L77">77</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">double</strong>[] makeInverseCumulativeTestPoints() {
<a class="jxr_linenumber" name="L78" href="#L78">78</a>          <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0, 0.001d, 0.010d, 0.025d, 0.050d, 0.100d,
<a class="jxr_linenumber" name="L79" href="#L79">79</a>                  0.999d, 0.990d, 0.975d, 0.950d, 0.900d, 1 };
<a class="jxr_linenumber" name="L80" href="#L80">80</a>      }
<a class="jxr_linenumber" name="L81" href="#L81">81</a>  
<a class="jxr_linenumber" name="L82" href="#L82">82</a>      <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L83" href="#L83">83</a>  <em class="jxr_javadoccomment">     * Creates the default inverse cumulative probability density test expected</em>
<a class="jxr_linenumber" name="L84" href="#L84">84</a>  <em class="jxr_javadoccomment">     * values</em>
<a class="jxr_linenumber" name="L85" href="#L85">85</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L86" href="#L86">86</a>      @Override
<a class="jxr_linenumber" name="L87" href="#L87">87</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">int</strong>[] makeInverseCumulativeTestValues() {
<a class="jxr_linenumber" name="L88" href="#L88">88</a>          <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">int</strong>[] { 0, 2, 3, 4, 5, 5, 10, 10, 10, 9, 9, 10 };
<a class="jxr_linenumber" name="L89" href="#L89">89</a>      }
<a class="jxr_linenumber" name="L90" href="#L90">90</a>  
<a class="jxr_linenumber" name="L91" href="#L91">91</a>      <em class="jxr_comment">// ----------------- Additional test cases ---------------------------------</em>
<a class="jxr_linenumber" name="L92" href="#L92">92</a>  
<a class="jxr_linenumber" name="L93" href="#L93">93</a>      <em class="jxr_javadoccomment">/** Test degenerate case p = 0 */</em>
<a class="jxr_linenumber" name="L94" href="#L94">94</a>      @Test
<a class="jxr_linenumber" name="L95" href="#L95">95</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testDegenerate0() {
<a class="jxr_linenumber" name="L96" href="#L96">96</a>          BinomialDistribution dist = <strong class="jxr_keyword">new</strong> BinomialDistribution(5, 0.0d);
<a class="jxr_linenumber" name="L97" href="#L97">97</a>          setDistribution(dist);
<a class="jxr_linenumber" name="L98" href="#L98">98</a>          setCumulativeTestPoints(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">int</strong>[] { -1, 0, 1, 5, 10 });
<a class="jxr_linenumber" name="L99" href="#L99">99</a>          setCumulativeTestValues(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0d, 1d, 1d, 1d, 1d });
<a class="jxr_linenumber" name="L100" href="#L100">100</a>         setDensityTestPoints(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">int</strong>[] { -1, 0, 1, 10, 11 });
<a class="jxr_linenumber" name="L101" href="#L101">101</a>         setDensityTestValues(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0d, 1d, 0d, 0d, 0d });
<a class="jxr_linenumber" name="L102" href="#L102">102</a>         setInverseCumulativeTestPoints(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0.1d, 0.5d });
<a class="jxr_linenumber" name="L103" href="#L103">103</a>         setInverseCumulativeTestValues(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">int</strong>[] { 0, 0 });
<a class="jxr_linenumber" name="L104" href="#L104">104</a>         verifyDensities();
<a class="jxr_linenumber" name="L105" href="#L105">105</a>         verifyCumulativeProbabilities();
<a class="jxr_linenumber" name="L106" href="#L106">106</a>         verifyInverseCumulativeProbabilities();
<a class="jxr_linenumber" name="L107" href="#L107">107</a>         Assert.assertEquals(dist.getSupportLowerBound(), 0);
<a class="jxr_linenumber" name="L108" href="#L108">108</a>         Assert.assertEquals(dist.getSupportUpperBound(), 0);
<a class="jxr_linenumber" name="L109" href="#L109">109</a>     }
<a class="jxr_linenumber" name="L110" href="#L110">110</a> 
<a class="jxr_linenumber" name="L111" href="#L111">111</a>     <em class="jxr_javadoccomment">/** Test degenerate case p = 1 */</em>
<a class="jxr_linenumber" name="L112" href="#L112">112</a>     @Test
<a class="jxr_linenumber" name="L113" href="#L113">113</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testDegenerate1() {
<a class="jxr_linenumber" name="L114" href="#L114">114</a>         BinomialDistribution dist = <strong class="jxr_keyword">new</strong> BinomialDistribution(5, 1.0d);
<a class="jxr_linenumber" name="L115" href="#L115">115</a>         setDistribution(dist);
<a class="jxr_linenumber" name="L116" href="#L116">116</a>         setCumulativeTestPoints(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">int</strong>[] { -1, 0, 1, 2, 5, 10 });
<a class="jxr_linenumber" name="L117" href="#L117">117</a>         setCumulativeTestValues(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0d, 0d, 0d, 0d, 1d, 1d });
<a class="jxr_linenumber" name="L118" href="#L118">118</a>         setDensityTestPoints(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">int</strong>[] { -1, 0, 1, 2, 5, 10 });
<a class="jxr_linenumber" name="L119" href="#L119">119</a>         setDensityTestValues(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0d, 0d, 0d, 0d, 1d, 0d });
<a class="jxr_linenumber" name="L120" href="#L120">120</a>         setInverseCumulativeTestPoints(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0.1d, 0.5d });
<a class="jxr_linenumber" name="L121" href="#L121">121</a>         setInverseCumulativeTestValues(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">int</strong>[] { 5, 5 });
<a class="jxr_linenumber" name="L122" href="#L122">122</a>         verifyDensities();
<a class="jxr_linenumber" name="L123" href="#L123">123</a>         verifyCumulativeProbabilities();
<a class="jxr_linenumber" name="L124" href="#L124">124</a>         verifyInverseCumulativeProbabilities();
<a class="jxr_linenumber" name="L125" href="#L125">125</a>         Assert.assertEquals(dist.getSupportLowerBound(), 5);
<a class="jxr_linenumber" name="L126" href="#L126">126</a>         Assert.assertEquals(dist.getSupportUpperBound(), 5);
<a class="jxr_linenumber" name="L127" href="#L127">127</a>     }
<a class="jxr_linenumber" name="L128" href="#L128">128</a> 
<a class="jxr_linenumber" name="L129" href="#L129">129</a>     <em class="jxr_javadoccomment">/** Test degenerate case n = 0 */</em>
<a class="jxr_linenumber" name="L130" href="#L130">130</a>     @Test
<a class="jxr_linenumber" name="L131" href="#L131">131</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testDegenerate2() {
<a class="jxr_linenumber" name="L132" href="#L132">132</a>         BinomialDistribution dist = <strong class="jxr_keyword">new</strong> BinomialDistribution(0, 0.01d);
<a class="jxr_linenumber" name="L133" href="#L133">133</a>         setDistribution(dist);
<a class="jxr_linenumber" name="L134" href="#L134">134</a>         setCumulativeTestPoints(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">int</strong>[] { -1, 0, 1, 2, 5, 10 });
<a class="jxr_linenumber" name="L135" href="#L135">135</a>         setCumulativeTestValues(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0d, 1d, 1d, 1d, 1d, 1d });
<a class="jxr_linenumber" name="L136" href="#L136">136</a>         setDensityTestPoints(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">int</strong>[] { -1, 0, 1, 2, 5, 10 });
<a class="jxr_linenumber" name="L137" href="#L137">137</a>         setDensityTestValues(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0d, 1d, 0d, 0d, 0d, 0d });
<a class="jxr_linenumber" name="L138" href="#L138">138</a>         setInverseCumulativeTestPoints(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0.1d, 0.5d });
<a class="jxr_linenumber" name="L139" href="#L139">139</a>         setInverseCumulativeTestValues(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">int</strong>[] { 0, 0 });
<a class="jxr_linenumber" name="L140" href="#L140">140</a>         verifyDensities();
<a class="jxr_linenumber" name="L141" href="#L141">141</a>         verifyCumulativeProbabilities();
<a class="jxr_linenumber" name="L142" href="#L142">142</a>         verifyInverseCumulativeProbabilities();
<a class="jxr_linenumber" name="L143" href="#L143">143</a>         Assert.assertEquals(dist.getSupportLowerBound(), 0);
<a class="jxr_linenumber" name="L144" href="#L144">144</a>         Assert.assertEquals(dist.getSupportUpperBound(), 0);
<a class="jxr_linenumber" name="L145" href="#L145">145</a>     }
<a class="jxr_linenumber" name="L146" href="#L146">146</a> 
<a class="jxr_linenumber" name="L147" href="#L147">147</a>     @Test
<a class="jxr_linenumber" name="L148" href="#L148">148</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testMoments() {
<a class="jxr_linenumber" name="L149" href="#L149">149</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> tol = 1e-9;
<a class="jxr_linenumber" name="L150" href="#L150">150</a>         BinomialDistribution dist;
<a class="jxr_linenumber" name="L151" href="#L151">151</a> 
<a class="jxr_linenumber" name="L152" href="#L152">152</a>         dist = <strong class="jxr_keyword">new</strong> BinomialDistribution(10, 0.5);
<a class="jxr_linenumber" name="L153" href="#L153">153</a>         Assert.assertEquals(dist.getNumericalMean(), 10d * 0.5d, tol);
<a class="jxr_linenumber" name="L154" href="#L154">154</a>         Assert.assertEquals(dist.getNumericalVariance(), 10d * 0.5d * 0.5d, tol);
<a class="jxr_linenumber" name="L155" href="#L155">155</a> 
<a class="jxr_linenumber" name="L156" href="#L156">156</a>         dist = <strong class="jxr_keyword">new</strong> BinomialDistribution(30, 0.3);
<a class="jxr_linenumber" name="L157" href="#L157">157</a>         Assert.assertEquals(dist.getNumericalMean(), 30d * 0.3d, tol);
<a class="jxr_linenumber" name="L158" href="#L158">158</a>         Assert.assertEquals(dist.getNumericalVariance(), 30d * 0.3d * (1d - 0.3d), tol);
<a class="jxr_linenumber" name="L159" href="#L159">159</a>     }
<a class="jxr_linenumber" name="L160" href="#L160">160</a> 
<a class="jxr_linenumber" name="L161" href="#L161">161</a>     @Test
<a class="jxr_linenumber" name="L162" href="#L162">162</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testMath718() {
<a class="jxr_linenumber" name="L163" href="#L163">163</a>         <em class="jxr_comment">// for large trials the evaluation of ContinuedFraction was inaccurate</em>
<a class="jxr_linenumber" name="L164" href="#L164">164</a>         <em class="jxr_comment">// do a sweep over several large trials to test if the current implementation is</em>
<a class="jxr_linenumber" name="L165" href="#L165">165</a>         <em class="jxr_comment">// numerically stable.</em>
<a class="jxr_linenumber" name="L166" href="#L166">166</a> 
<a class="jxr_linenumber" name="L167" href="#L167">167</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> trials = 500000; trials &lt; 20000000; trials += 100000) {
<a class="jxr_linenumber" name="L168" href="#L168">168</a>             BinomialDistribution dist = <strong class="jxr_keyword">new</strong> BinomialDistribution(trials, 0.5);
<a class="jxr_linenumber" name="L169" href="#L169">169</a>             <strong class="jxr_keyword">int</strong> p = dist.inverseCumulativeProbability(0.5);
<a class="jxr_linenumber" name="L170" href="#L170">170</a>             Assert.assertEquals(trials / 2, p);
<a class="jxr_linenumber" name="L171" href="#L171">171</a>         }
<a class="jxr_linenumber" name="L172" href="#L172">172</a>     }
<a class="jxr_linenumber" name="L173" href="#L173">173</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2003&#x2013;2016 <a href="http://www.apache.org/">The Apache Software Foundation</a>. All rights reserved.</div>
</body>
</html>
