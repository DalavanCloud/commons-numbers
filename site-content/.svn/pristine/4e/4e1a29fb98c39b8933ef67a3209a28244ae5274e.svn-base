<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span><a name="line.17"></a>
<span class="sourceLineNo">018</span>package org.apache.commons.math3.linear;<a name="line.18"></a>
<span class="sourceLineNo">019</span><a name="line.19"></a>
<span class="sourceLineNo">020</span>import java.util.Random;<a name="line.20"></a>
<span class="sourceLineNo">021</span><a name="line.21"></a>
<span class="sourceLineNo">022</span>import org.apache.commons.math3.distribution.NormalDistribution;<a name="line.22"></a>
<span class="sourceLineNo">023</span>import org.junit.Test;<a name="line.23"></a>
<span class="sourceLineNo">024</span>import org.junit.Assert;<a name="line.24"></a>
<span class="sourceLineNo">025</span><a name="line.25"></a>
<span class="sourceLineNo">026</span>public class SchurTransformerTest {<a name="line.26"></a>
<span class="sourceLineNo">027</span><a name="line.27"></a>
<span class="sourceLineNo">028</span>    private double[][] testSquare5 = {<a name="line.28"></a>
<span class="sourceLineNo">029</span>            { 5, 4, 3, 2, 1 },<a name="line.29"></a>
<span class="sourceLineNo">030</span>            { 1, 4, 0, 3, 3 },<a name="line.30"></a>
<span class="sourceLineNo">031</span>            { 2, 0, 3, 0, 0 },<a name="line.31"></a>
<span class="sourceLineNo">032</span>            { 3, 2, 1, 2, 5 },<a name="line.32"></a>
<span class="sourceLineNo">033</span>            { 4, 2, 1, 4, 1 }<a name="line.33"></a>
<span class="sourceLineNo">034</span>    };<a name="line.34"></a>
<span class="sourceLineNo">035</span><a name="line.35"></a>
<span class="sourceLineNo">036</span>    private double[][] testSquare3 = {<a name="line.36"></a>
<span class="sourceLineNo">037</span>            {  2, -1, 1 },<a name="line.37"></a>
<span class="sourceLineNo">038</span>            { -1,  2, 1 },<a name="line.38"></a>
<span class="sourceLineNo">039</span>            {  1, -1, 2 }<a name="line.39"></a>
<span class="sourceLineNo">040</span>    };<a name="line.40"></a>
<span class="sourceLineNo">041</span><a name="line.41"></a>
<span class="sourceLineNo">042</span>    // from http://eigen.tuxfamily.org/dox/classEigen_1_1RealSchur.html<a name="line.42"></a>
<span class="sourceLineNo">043</span>    private double[][] testRandom = {<a name="line.43"></a>
<span class="sourceLineNo">044</span>            {  0.680, -0.3300, -0.2700, -0.717, -0.687,  0.0259 },<a name="line.44"></a>
<span class="sourceLineNo">045</span>            { -0.211,  0.5360,  0.0268,  0.214, -0.198,  0.6780 },<a name="line.45"></a>
<span class="sourceLineNo">046</span>            {  0.566, -0.4440,  0.9040, -0.967, -0.740,  0.2250 },<a name="line.46"></a>
<span class="sourceLineNo">047</span>            {  0.597,  0.1080,  0.8320, -0.514, -0.782, -0.4080 },<a name="line.47"></a>
<span class="sourceLineNo">048</span>            {  0.823, -0.0452,  0.2710, -0.726,  0.998,  0.2750 },<a name="line.48"></a>
<span class="sourceLineNo">049</span>            { -0.605,  0.2580,  0.4350,  0.608, -0.563,  0.0486 }<a name="line.49"></a>
<span class="sourceLineNo">050</span>    };<a name="line.50"></a>
<span class="sourceLineNo">051</span><a name="line.51"></a>
<span class="sourceLineNo">052</span>    @Test<a name="line.52"></a>
<span class="sourceLineNo">053</span>    public void testNonSquare() {<a name="line.53"></a>
<span class="sourceLineNo">054</span>        try {<a name="line.54"></a>
<span class="sourceLineNo">055</span>            new SchurTransformer(MatrixUtils.createRealMatrix(new double[3][2]));<a name="line.55"></a>
<span class="sourceLineNo">056</span>            Assert.fail("an exception should have been thrown");<a name="line.56"></a>
<span class="sourceLineNo">057</span>        } catch (NonSquareMatrixException ime) {<a name="line.57"></a>
<span class="sourceLineNo">058</span>            // expected behavior<a name="line.58"></a>
<span class="sourceLineNo">059</span>        }<a name="line.59"></a>
<span class="sourceLineNo">060</span>    }<a name="line.60"></a>
<span class="sourceLineNo">061</span><a name="line.61"></a>
<span class="sourceLineNo">062</span>    @Test<a name="line.62"></a>
<span class="sourceLineNo">063</span>    public void testAEqualPTPt() {<a name="line.63"></a>
<span class="sourceLineNo">064</span>        checkAEqualPTPt(MatrixUtils.createRealMatrix(testSquare5));<a name="line.64"></a>
<span class="sourceLineNo">065</span>        checkAEqualPTPt(MatrixUtils.createRealMatrix(testSquare3));<a name="line.65"></a>
<span class="sourceLineNo">066</span>        checkAEqualPTPt(MatrixUtils.createRealMatrix(testRandom));<a name="line.66"></a>
<span class="sourceLineNo">067</span>   }<a name="line.67"></a>
<span class="sourceLineNo">068</span><a name="line.68"></a>
<span class="sourceLineNo">069</span>    @Test<a name="line.69"></a>
<span class="sourceLineNo">070</span>    public void testPOrthogonal() {<a name="line.70"></a>
<span class="sourceLineNo">071</span>        checkOrthogonal(new SchurTransformer(MatrixUtils.createRealMatrix(testSquare5)).getP());<a name="line.71"></a>
<span class="sourceLineNo">072</span>        checkOrthogonal(new SchurTransformer(MatrixUtils.createRealMatrix(testSquare3)).getP());<a name="line.72"></a>
<span class="sourceLineNo">073</span>        checkOrthogonal(new SchurTransformer(MatrixUtils.createRealMatrix(testRandom)).getP());        <a name="line.73"></a>
<span class="sourceLineNo">074</span>    }<a name="line.74"></a>
<span class="sourceLineNo">075</span><a name="line.75"></a>
<span class="sourceLineNo">076</span>    @Test<a name="line.76"></a>
<span class="sourceLineNo">077</span>    public void testPTOrthogonal() {<a name="line.77"></a>
<span class="sourceLineNo">078</span>        checkOrthogonal(new SchurTransformer(MatrixUtils.createRealMatrix(testSquare5)).getPT());<a name="line.78"></a>
<span class="sourceLineNo">079</span>        checkOrthogonal(new SchurTransformer(MatrixUtils.createRealMatrix(testSquare3)).getPT());<a name="line.79"></a>
<span class="sourceLineNo">080</span>        checkOrthogonal(new SchurTransformer(MatrixUtils.createRealMatrix(testRandom)).getPT());<a name="line.80"></a>
<span class="sourceLineNo">081</span>    }<a name="line.81"></a>
<span class="sourceLineNo">082</span><a name="line.82"></a>
<span class="sourceLineNo">083</span>    @Test<a name="line.83"></a>
<span class="sourceLineNo">084</span>    public void testSchurForm() {<a name="line.84"></a>
<span class="sourceLineNo">085</span>        checkSchurForm(new SchurTransformer(MatrixUtils.createRealMatrix(testSquare5)).getT());<a name="line.85"></a>
<span class="sourceLineNo">086</span>        checkSchurForm(new SchurTransformer(MatrixUtils.createRealMatrix(testSquare3)).getT());<a name="line.86"></a>
<span class="sourceLineNo">087</span>        checkSchurForm(new SchurTransformer(MatrixUtils.createRealMatrix(testRandom)).getT());<a name="line.87"></a>
<span class="sourceLineNo">088</span>    }<a name="line.88"></a>
<span class="sourceLineNo">089</span><a name="line.89"></a>
<span class="sourceLineNo">090</span>    @Test<a name="line.90"></a>
<span class="sourceLineNo">091</span>    public void testRandomData() {<a name="line.91"></a>
<span class="sourceLineNo">092</span>        for (int run = 0; run &lt; 100; run++) {<a name="line.92"></a>
<span class="sourceLineNo">093</span>            Random r = new Random(System.currentTimeMillis());<a name="line.93"></a>
<span class="sourceLineNo">094</span><a name="line.94"></a>
<span class="sourceLineNo">095</span>            // matrix size<a name="line.95"></a>
<span class="sourceLineNo">096</span>            int size = r.nextInt(20) + 4;<a name="line.96"></a>
<span class="sourceLineNo">097</span><a name="line.97"></a>
<span class="sourceLineNo">098</span>            double[][] data = new double[size][size];<a name="line.98"></a>
<span class="sourceLineNo">099</span>            for (int i = 0; i &lt; size; i++) {<a name="line.99"></a>
<span class="sourceLineNo">100</span>                for (int j = 0; j &lt; size; j++) {<a name="line.100"></a>
<span class="sourceLineNo">101</span>                    data[i][j] = r.nextInt(100);<a name="line.101"></a>
<span class="sourceLineNo">102</span>                }<a name="line.102"></a>
<span class="sourceLineNo">103</span>            }<a name="line.103"></a>
<span class="sourceLineNo">104</span><a name="line.104"></a>
<span class="sourceLineNo">105</span>            RealMatrix m = MatrixUtils.createRealMatrix(data);<a name="line.105"></a>
<span class="sourceLineNo">106</span>            RealMatrix s = checkAEqualPTPt(m);<a name="line.106"></a>
<span class="sourceLineNo">107</span>            checkSchurForm(s);<a name="line.107"></a>
<span class="sourceLineNo">108</span>        }<a name="line.108"></a>
<span class="sourceLineNo">109</span>    }<a name="line.109"></a>
<span class="sourceLineNo">110</span><a name="line.110"></a>
<span class="sourceLineNo">111</span>    @Test<a name="line.111"></a>
<span class="sourceLineNo">112</span>    public void testRandomDataNormalDistribution() {<a name="line.112"></a>
<span class="sourceLineNo">113</span>        for (int run = 0; run &lt; 100; run++) {<a name="line.113"></a>
<span class="sourceLineNo">114</span>            Random r = new Random(System.currentTimeMillis());<a name="line.114"></a>
<span class="sourceLineNo">115</span>            NormalDistribution dist = new NormalDistribution(0.0, r.nextDouble() * 5);<a name="line.115"></a>
<span class="sourceLineNo">116</span><a name="line.116"></a>
<span class="sourceLineNo">117</span>            // matrix size<a name="line.117"></a>
<span class="sourceLineNo">118</span>            int size = r.nextInt(20) + 4;<a name="line.118"></a>
<span class="sourceLineNo">119</span><a name="line.119"></a>
<span class="sourceLineNo">120</span>            double[][] data = new double[size][size];<a name="line.120"></a>
<span class="sourceLineNo">121</span>            for (int i = 0; i &lt; size; i++) {<a name="line.121"></a>
<span class="sourceLineNo">122</span>                for (int j = 0; j &lt; size; j++) {<a name="line.122"></a>
<span class="sourceLineNo">123</span>                    data[i][j] = dist.sample();<a name="line.123"></a>
<span class="sourceLineNo">124</span>                }<a name="line.124"></a>
<span class="sourceLineNo">125</span>            }<a name="line.125"></a>
<span class="sourceLineNo">126</span><a name="line.126"></a>
<span class="sourceLineNo">127</span>            RealMatrix m = MatrixUtils.createRealMatrix(data);<a name="line.127"></a>
<span class="sourceLineNo">128</span>            RealMatrix s = checkAEqualPTPt(m);<a name="line.128"></a>
<span class="sourceLineNo">129</span>            checkSchurForm(s);<a name="line.129"></a>
<span class="sourceLineNo">130</span>        }<a name="line.130"></a>
<span class="sourceLineNo">131</span>    }<a name="line.131"></a>
<span class="sourceLineNo">132</span><a name="line.132"></a>
<span class="sourceLineNo">133</span>    @Test<a name="line.133"></a>
<span class="sourceLineNo">134</span>    public void testMath848() {<a name="line.134"></a>
<span class="sourceLineNo">135</span>        double[][] data = {<a name="line.135"></a>
<span class="sourceLineNo">136</span>                { 0.1849449280, -0.0646971046,  0.0774755812, -0.0969651755, -0.0692648806,  0.3282344352, -0.0177423074,  0.2063136340},<a name="line.136"></a>
<span class="sourceLineNo">137</span>                {-0.0742700134, -0.0289063030, -0.0017269460, -0.0375550146, -0.0487737922, -0.2616837868, -0.0821201295, -0.2530000167},<a name="line.137"></a>
<span class="sourceLineNo">138</span>                { 0.2549910127,  0.0995733692, -0.0009718388,  0.0149282808,  0.1791878897, -0.0823182816,  0.0582629256,  0.3219545182},<a name="line.138"></a>
<span class="sourceLineNo">139</span>                {-0.0694747557, -0.1880649148, -0.2740630911,  0.0720096468, -0.1800836914, -0.3518996425,  0.2486747833,  0.6257938167},<a name="line.139"></a>
<span class="sourceLineNo">140</span>                { 0.0536360918, -0.1339297778,  0.2241579764, -0.0195327484, -0.0054103808,  0.0347564518,  0.5120802482, -0.0329902864},<a name="line.140"></a>
<span class="sourceLineNo">141</span>                {-0.5933332356, -0.2488721082,  0.2357173629,  0.0177285473,  0.0856630593, -0.3567126300, -0.1600668126, -0.1010899621},<a name="line.141"></a>
<span class="sourceLineNo">142</span>                {-0.0514349819, -0.0854319435,  0.1125050061,  0.0063453560, -0.2250000688, -0.2209343090,  0.1964623477, -0.1512329924},<a name="line.142"></a>
<span class="sourceLineNo">143</span>                { 0.0197395947, -0.1997170581, -0.1425959019, -0.2749477910, -0.0969467073,  0.0603688520, -0.2826905192,  0.1794315473}};<a name="line.143"></a>
<span class="sourceLineNo">144</span>        RealMatrix m = MatrixUtils.createRealMatrix(data);<a name="line.144"></a>
<span class="sourceLineNo">145</span>        RealMatrix s = checkAEqualPTPt(m);<a name="line.145"></a>
<span class="sourceLineNo">146</span>        checkSchurForm(s);<a name="line.146"></a>
<span class="sourceLineNo">147</span>    }<a name="line.147"></a>
<span class="sourceLineNo">148</span><a name="line.148"></a>
<span class="sourceLineNo">149</span>    ///////////////////////////////////////////////////////////////////////////<a name="line.149"></a>
<span class="sourceLineNo">150</span>    // Test helpers<a name="line.150"></a>
<span class="sourceLineNo">151</span>    ///////////////////////////////////////////////////////////////////////////<a name="line.151"></a>
<span class="sourceLineNo">152</span><a name="line.152"></a>
<span class="sourceLineNo">153</span>    private RealMatrix checkAEqualPTPt(RealMatrix matrix) {<a name="line.153"></a>
<span class="sourceLineNo">154</span>        SchurTransformer transformer = new SchurTransformer(matrix);<a name="line.154"></a>
<span class="sourceLineNo">155</span>        RealMatrix p  = transformer.getP();<a name="line.155"></a>
<span class="sourceLineNo">156</span>        RealMatrix t  = transformer.getT();<a name="line.156"></a>
<span class="sourceLineNo">157</span>        RealMatrix pT = transformer.getPT();<a name="line.157"></a>
<span class="sourceLineNo">158</span>        <a name="line.158"></a>
<span class="sourceLineNo">159</span>        RealMatrix result = p.multiply(t).multiply(pT);<a name="line.159"></a>
<span class="sourceLineNo">160</span><a name="line.160"></a>
<span class="sourceLineNo">161</span>        double norm = result.subtract(matrix).getNorm();<a name="line.161"></a>
<span class="sourceLineNo">162</span>        Assert.assertEquals(0, norm, 1.0e-9);<a name="line.162"></a>
<span class="sourceLineNo">163</span>        <a name="line.163"></a>
<span class="sourceLineNo">164</span>        return t;<a name="line.164"></a>
<span class="sourceLineNo">165</span>    }<a name="line.165"></a>
<span class="sourceLineNo">166</span><a name="line.166"></a>
<span class="sourceLineNo">167</span>    private void checkOrthogonal(RealMatrix m) {<a name="line.167"></a>
<span class="sourceLineNo">168</span>        RealMatrix mTm = m.transpose().multiply(m);<a name="line.168"></a>
<span class="sourceLineNo">169</span>        RealMatrix id  = MatrixUtils.createRealIdentityMatrix(mTm.getRowDimension());<a name="line.169"></a>
<span class="sourceLineNo">170</span>        Assert.assertEquals(0, mTm.subtract(id).getNorm(), 1.0e-14);<a name="line.170"></a>
<span class="sourceLineNo">171</span>    }<a name="line.171"></a>
<span class="sourceLineNo">172</span><a name="line.172"></a>
<span class="sourceLineNo">173</span>    private void checkSchurForm(final RealMatrix m) {<a name="line.173"></a>
<span class="sourceLineNo">174</span>        final int rows = m.getRowDimension();<a name="line.174"></a>
<span class="sourceLineNo">175</span>        final int cols = m.getColumnDimension();<a name="line.175"></a>
<span class="sourceLineNo">176</span>        for (int i = 0; i &lt; rows; ++i) {<a name="line.176"></a>
<span class="sourceLineNo">177</span>            for (int j = 0; j &lt; cols; ++j) {<a name="line.177"></a>
<span class="sourceLineNo">178</span>                if (i &gt; j + 1) {<a name="line.178"></a>
<span class="sourceLineNo">179</span>                    Assert.assertEquals(0, m.getEntry(i, j), 1.0e-16);<a name="line.179"></a>
<span class="sourceLineNo">180</span>                }<a name="line.180"></a>
<span class="sourceLineNo">181</span>            }<a name="line.181"></a>
<span class="sourceLineNo">182</span>        }<a name="line.182"></a>
<span class="sourceLineNo">183</span>    }<a name="line.183"></a>
<span class="sourceLineNo">184</span><a name="line.184"></a>
<span class="sourceLineNo">185</span>    @SuppressWarnings("unused")<a name="line.185"></a>
<span class="sourceLineNo">186</span>    private void checkMatricesValues(double[][] matrix, double[][] pRef, double[][] hRef) {<a name="line.186"></a>
<span class="sourceLineNo">187</span><a name="line.187"></a>
<span class="sourceLineNo">188</span>        SchurTransformer transformer =<a name="line.188"></a>
<span class="sourceLineNo">189</span>            new SchurTransformer(MatrixUtils.createRealMatrix(matrix));<a name="line.189"></a>
<span class="sourceLineNo">190</span><a name="line.190"></a>
<span class="sourceLineNo">191</span>        // check values against known references<a name="line.191"></a>
<span class="sourceLineNo">192</span>        RealMatrix p = transformer.getP();<a name="line.192"></a>
<span class="sourceLineNo">193</span>        Assert.assertEquals(0, p.subtract(MatrixUtils.createRealMatrix(pRef)).getNorm(), 1.0e-14);<a name="line.193"></a>
<span class="sourceLineNo">194</span><a name="line.194"></a>
<span class="sourceLineNo">195</span>        RealMatrix t = transformer.getT();<a name="line.195"></a>
<span class="sourceLineNo">196</span>        Assert.assertEquals(0, t.subtract(MatrixUtils.createRealMatrix(hRef)).getNorm(), 1.0e-14);<a name="line.196"></a>
<span class="sourceLineNo">197</span><a name="line.197"></a>
<span class="sourceLineNo">198</span>        // check the same cached instance is returned the second time<a name="line.198"></a>
<span class="sourceLineNo">199</span>        Assert.assertTrue(p == transformer.getP());<a name="line.199"></a>
<span class="sourceLineNo">200</span>        Assert.assertTrue(t == transformer.getT());<a name="line.200"></a>
<span class="sourceLineNo">201</span>    }<a name="line.201"></a>
<span class="sourceLineNo">202</span>}<a name="line.202"></a>




























































</pre>
</div>
</body>
</html>
