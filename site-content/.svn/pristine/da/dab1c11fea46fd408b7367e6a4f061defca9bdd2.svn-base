<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span>package org.apache.commons.math3.stat.correlation;<a name="line.17"></a>
<span class="sourceLineNo">018</span><a name="line.18"></a>
<span class="sourceLineNo">019</span>import java.util.Arrays;<a name="line.19"></a>
<span class="sourceLineNo">020</span><a name="line.20"></a>
<span class="sourceLineNo">021</span>import org.apache.commons.math3.TestUtils;<a name="line.21"></a>
<span class="sourceLineNo">022</span>import org.apache.commons.math3.linear.BlockRealMatrix;<a name="line.22"></a>
<span class="sourceLineNo">023</span>import org.apache.commons.math3.linear.RealMatrix;<a name="line.23"></a>
<span class="sourceLineNo">024</span>import org.junit.Assert;<a name="line.24"></a>
<span class="sourceLineNo">025</span>import org.junit.Before;<a name="line.25"></a>
<span class="sourceLineNo">026</span>import org.junit.Test;<a name="line.26"></a>
<span class="sourceLineNo">027</span><a name="line.27"></a>
<span class="sourceLineNo">028</span>/**<a name="line.28"></a>
<span class="sourceLineNo">029</span> * Test cases for Kendall's Tau rank correlation.<a name="line.29"></a>
<span class="sourceLineNo">030</span> */<a name="line.30"></a>
<span class="sourceLineNo">031</span>public class KendallsCorrelationTest extends PearsonsCorrelationTest {<a name="line.31"></a>
<span class="sourceLineNo">032</span><a name="line.32"></a>
<span class="sourceLineNo">033</span>    private KendallsCorrelation correlation;<a name="line.33"></a>
<span class="sourceLineNo">034</span><a name="line.34"></a>
<span class="sourceLineNo">035</span>    @Before<a name="line.35"></a>
<span class="sourceLineNo">036</span>    public void setUp() {<a name="line.36"></a>
<span class="sourceLineNo">037</span>        correlation = new KendallsCorrelation();<a name="line.37"></a>
<span class="sourceLineNo">038</span>    }<a name="line.38"></a>
<span class="sourceLineNo">039</span><a name="line.39"></a>
<span class="sourceLineNo">040</span>    /**<a name="line.40"></a>
<span class="sourceLineNo">041</span>     * Test Longley dataset against R.<a name="line.41"></a>
<span class="sourceLineNo">042</span>     */<a name="line.42"></a>
<span class="sourceLineNo">043</span>    @Override<a name="line.43"></a>
<span class="sourceLineNo">044</span>    @Test<a name="line.44"></a>
<span class="sourceLineNo">045</span>    public void testLongly() {<a name="line.45"></a>
<span class="sourceLineNo">046</span>        RealMatrix matrix = createRealMatrix(longleyData, 16, 7);<a name="line.46"></a>
<span class="sourceLineNo">047</span>        KendallsCorrelation corrInstance = new KendallsCorrelation(matrix);<a name="line.47"></a>
<span class="sourceLineNo">048</span>        RealMatrix correlationMatrix = corrInstance.getCorrelationMatrix();<a name="line.48"></a>
<span class="sourceLineNo">049</span>        double[] rData = new double[] {<a name="line.49"></a>
<span class="sourceLineNo">050</span>                1, 0.9166666666666666, 0.9333333333333332, 0.3666666666666666, 0.05, 0.8999999999999999,<a name="line.50"></a>
<span class="sourceLineNo">051</span>                0.8999999999999999, 0.9166666666666666, 1, 0.9833333333333333, 0.45, 0.03333333333333333,<a name="line.51"></a>
<span class="sourceLineNo">052</span>                0.9833333333333333, 0.9833333333333333, 0.9333333333333332, 0.9833333333333333, 1,<a name="line.52"></a>
<span class="sourceLineNo">053</span>                0.4333333333333333, 0.05, 0.9666666666666666, 0.9666666666666666, 0.3666666666666666,<a name="line.53"></a>
<span class="sourceLineNo">054</span>                0.45, 0.4333333333333333, 1, -0.2166666666666666, 0.4666666666666666, 0.4666666666666666, 0.05,<a name="line.54"></a>
<span class="sourceLineNo">055</span>                0.03333333333333333, 0.05, -0.2166666666666666, 1, 0.05, 0.05, 0.8999999999999999, 0.9833333333333333,<a name="line.55"></a>
<span class="sourceLineNo">056</span>                0.9666666666666666, 0.4666666666666666, 0.05, 1, 0.9999999999999999, 0.8999999999999999,<a name="line.56"></a>
<span class="sourceLineNo">057</span>                0.9833333333333333, 0.9666666666666666, 0.4666666666666666, 0.05, 0.9999999999999999, 1<a name="line.57"></a>
<span class="sourceLineNo">058</span>        };<a name="line.58"></a>
<span class="sourceLineNo">059</span>        TestUtils.assertEquals("Kendall's correlation matrix", createRealMatrix(rData, 7, 7), correlationMatrix, 10E-15);<a name="line.59"></a>
<span class="sourceLineNo">060</span>    }<a name="line.60"></a>
<span class="sourceLineNo">061</span><a name="line.61"></a>
<span class="sourceLineNo">062</span>    /**<a name="line.62"></a>
<span class="sourceLineNo">063</span>     * Test R swiss fertility dataset.<a name="line.63"></a>
<span class="sourceLineNo">064</span>     */<a name="line.64"></a>
<span class="sourceLineNo">065</span>    @Test<a name="line.65"></a>
<span class="sourceLineNo">066</span>    public void testSwiss() {<a name="line.66"></a>
<span class="sourceLineNo">067</span>        RealMatrix matrix = createRealMatrix(swissData, 47, 5);<a name="line.67"></a>
<span class="sourceLineNo">068</span>        KendallsCorrelation corrInstance = new KendallsCorrelation(matrix);<a name="line.68"></a>
<span class="sourceLineNo">069</span>        RealMatrix correlationMatrix = corrInstance.getCorrelationMatrix();<a name="line.69"></a>
<span class="sourceLineNo">070</span>        double[] rData = new double[] {<a name="line.70"></a>
<span class="sourceLineNo">071</span>                1, 0.1795465254708308, -0.4762437404200669, -0.3306111613580587, 0.2453703703703704,<a name="line.71"></a>
<span class="sourceLineNo">072</span>                0.1795465254708308, 1, -0.4505221560842292, -0.4761645631778491, 0.2054604569820847,<a name="line.72"></a>
<span class="sourceLineNo">073</span>                -0.4762437404200669, -0.4505221560842292, 1, 0.528943683925829, -0.3212755391722673,<a name="line.73"></a>
<span class="sourceLineNo">074</span>                -0.3306111613580587, -0.4761645631778491, 0.528943683925829, 1, -0.08479652265379604,<a name="line.74"></a>
<span class="sourceLineNo">075</span>                0.2453703703703704, 0.2054604569820847, -0.3212755391722673, -0.08479652265379604, 1<a name="line.75"></a>
<span class="sourceLineNo">076</span>        };<a name="line.76"></a>
<span class="sourceLineNo">077</span>        TestUtils.assertEquals("Kendall's correlation matrix", createRealMatrix(rData, 5, 5), correlationMatrix, 10E-15);<a name="line.77"></a>
<span class="sourceLineNo">078</span>    }<a name="line.78"></a>
<span class="sourceLineNo">079</span><a name="line.79"></a>
<span class="sourceLineNo">080</span>    @Test<a name="line.80"></a>
<span class="sourceLineNo">081</span>    public void testSimpleOrdered() {<a name="line.81"></a>
<span class="sourceLineNo">082</span>        final int length = 10;<a name="line.82"></a>
<span class="sourceLineNo">083</span>        final double[] xArray = new double[length];<a name="line.83"></a>
<span class="sourceLineNo">084</span>        final double[] yArray = new double[length];<a name="line.84"></a>
<span class="sourceLineNo">085</span>        for (int i = 0; i &lt; length; i++) {<a name="line.85"></a>
<span class="sourceLineNo">086</span>            xArray[i] = i;<a name="line.86"></a>
<span class="sourceLineNo">087</span>            yArray[i] = i;<a name="line.87"></a>
<span class="sourceLineNo">088</span>        }<a name="line.88"></a>
<span class="sourceLineNo">089</span>        Assert.assertEquals(1.0, correlation.correlation(xArray, yArray), Double.MIN_VALUE);<a name="line.89"></a>
<span class="sourceLineNo">090</span>    }<a name="line.90"></a>
<span class="sourceLineNo">091</span><a name="line.91"></a>
<span class="sourceLineNo">092</span>    @Test<a name="line.92"></a>
<span class="sourceLineNo">093</span>    public void testSimpleReversed() {<a name="line.93"></a>
<span class="sourceLineNo">094</span>        final int length = 10;<a name="line.94"></a>
<span class="sourceLineNo">095</span>        final double[] xArray = new double[length];<a name="line.95"></a>
<span class="sourceLineNo">096</span>        final double[] yArray = new double[length];<a name="line.96"></a>
<span class="sourceLineNo">097</span>        for (int i = 0; i &lt; length; i++) {<a name="line.97"></a>
<span class="sourceLineNo">098</span>            xArray[length - i - 1] = i;<a name="line.98"></a>
<span class="sourceLineNo">099</span>            yArray[i] = i;<a name="line.99"></a>
<span class="sourceLineNo">100</span>        }<a name="line.100"></a>
<span class="sourceLineNo">101</span>        Assert.assertEquals(-1.0, correlation.correlation(xArray, yArray), Double.MIN_VALUE);<a name="line.101"></a>
<span class="sourceLineNo">102</span>    }<a name="line.102"></a>
<span class="sourceLineNo">103</span><a name="line.103"></a>
<span class="sourceLineNo">104</span>    @Test<a name="line.104"></a>
<span class="sourceLineNo">105</span>    public void testSimpleOrderedPowerOf2() {<a name="line.105"></a>
<span class="sourceLineNo">106</span>        final int length = 16;<a name="line.106"></a>
<span class="sourceLineNo">107</span>        final double[] xArray = new double[length];<a name="line.107"></a>
<span class="sourceLineNo">108</span>        final double[] yArray = new double[length];<a name="line.108"></a>
<span class="sourceLineNo">109</span>        for (int i = 0; i &lt; length; i++) {<a name="line.109"></a>
<span class="sourceLineNo">110</span>            xArray[i] = i;<a name="line.110"></a>
<span class="sourceLineNo">111</span>            yArray[i] = i;<a name="line.111"></a>
<span class="sourceLineNo">112</span>        }<a name="line.112"></a>
<span class="sourceLineNo">113</span>        Assert.assertEquals(1.0, correlation.correlation(xArray, yArray), Double.MIN_VALUE);<a name="line.113"></a>
<span class="sourceLineNo">114</span>    }<a name="line.114"></a>
<span class="sourceLineNo">115</span><a name="line.115"></a>
<span class="sourceLineNo">116</span>    @Test<a name="line.116"></a>
<span class="sourceLineNo">117</span>    public void testSimpleReversedPowerOf2() {<a name="line.117"></a>
<span class="sourceLineNo">118</span>        final int length = 16;<a name="line.118"></a>
<span class="sourceLineNo">119</span>        final double[] xArray = new double[length];<a name="line.119"></a>
<span class="sourceLineNo">120</span>        final double[] yArray = new double[length];<a name="line.120"></a>
<span class="sourceLineNo">121</span>        for (int i = 0; i &lt; length; i++) {<a name="line.121"></a>
<span class="sourceLineNo">122</span>            xArray[length - i - 1] = i;<a name="line.122"></a>
<span class="sourceLineNo">123</span>            yArray[i] = i;<a name="line.123"></a>
<span class="sourceLineNo">124</span>        }<a name="line.124"></a>
<span class="sourceLineNo">125</span>        Assert.assertEquals(-1.0, correlation.correlation(xArray, yArray), Double.MIN_VALUE);<a name="line.125"></a>
<span class="sourceLineNo">126</span>    }<a name="line.126"></a>
<span class="sourceLineNo">127</span><a name="line.127"></a>
<span class="sourceLineNo">128</span>    @Test<a name="line.128"></a>
<span class="sourceLineNo">129</span>    public void testSimpleJumble() {<a name="line.129"></a>
<span class="sourceLineNo">130</span>        //                                     A    B    C    D<a name="line.130"></a>
<span class="sourceLineNo">131</span>        final double[] xArray = new double[] {1.0, 2.0, 3.0, 4.0};<a name="line.131"></a>
<span class="sourceLineNo">132</span>        final double[] yArray = new double[] {1.0, 3.0, 2.0, 4.0};<a name="line.132"></a>
<span class="sourceLineNo">133</span><a name="line.133"></a>
<span class="sourceLineNo">134</span>        // 6 pairs: (A,B) (A,C) (A,D) (B,C) (B,D) (C,D)<a name="line.134"></a>
<span class="sourceLineNo">135</span>        // (B,C) is discordant, the other 5 are concordant<a name="line.135"></a>
<span class="sourceLineNo">136</span><a name="line.136"></a>
<span class="sourceLineNo">137</span>        Assert.assertEquals((5 - 1) / (double) 6,<a name="line.137"></a>
<span class="sourceLineNo">138</span>                correlation.correlation(xArray, yArray),<a name="line.138"></a>
<span class="sourceLineNo">139</span>                Double.MIN_VALUE);<a name="line.139"></a>
<span class="sourceLineNo">140</span>    }<a name="line.140"></a>
<span class="sourceLineNo">141</span><a name="line.141"></a>
<span class="sourceLineNo">142</span>    @Test<a name="line.142"></a>
<span class="sourceLineNo">143</span>    public void testBalancedJumble() {<a name="line.143"></a>
<span class="sourceLineNo">144</span>        //                                     A    B    C    D<a name="line.144"></a>
<span class="sourceLineNo">145</span>        final double[] xArray = new double[] {1.0, 2.0, 3.0, 4.0};<a name="line.145"></a>
<span class="sourceLineNo">146</span>        final double[] yArray = new double[] {1.0, 4.0, 3.0, 2.0};<a name="line.146"></a>
<span class="sourceLineNo">147</span><a name="line.147"></a>
<span class="sourceLineNo">148</span>        // 6 pairs: (A,B) (A,C) (A,D) (B,C) (B,D) (C,D)<a name="line.148"></a>
<span class="sourceLineNo">149</span>        // (A,B) (A,C), (A,D) are concordant, the other 3 are discordant<a name="line.149"></a>
<span class="sourceLineNo">150</span><a name="line.150"></a>
<span class="sourceLineNo">151</span>        Assert.assertEquals(0.0,<a name="line.151"></a>
<span class="sourceLineNo">152</span>                correlation.correlation(xArray, yArray),<a name="line.152"></a>
<span class="sourceLineNo">153</span>                Double.MIN_VALUE);<a name="line.153"></a>
<span class="sourceLineNo">154</span>    }<a name="line.154"></a>
<span class="sourceLineNo">155</span><a name="line.155"></a>
<span class="sourceLineNo">156</span>    @Test<a name="line.156"></a>
<span class="sourceLineNo">157</span>    public void testOrderedTies() {<a name="line.157"></a>
<span class="sourceLineNo">158</span>        final int length = 10;<a name="line.158"></a>
<span class="sourceLineNo">159</span>        final double[] xArray = new double[length];<a name="line.159"></a>
<span class="sourceLineNo">160</span>        final double[] yArray = new double[length];<a name="line.160"></a>
<span class="sourceLineNo">161</span>        for (int i = 0; i &lt; length; i++) {<a name="line.161"></a>
<span class="sourceLineNo">162</span>            xArray[i] = i / 2;<a name="line.162"></a>
<span class="sourceLineNo">163</span>            yArray[i] = i / 2;<a name="line.163"></a>
<span class="sourceLineNo">164</span>        }<a name="line.164"></a>
<span class="sourceLineNo">165</span>        // 5 pairs of points that are tied in both values.<a name="line.165"></a>
<span class="sourceLineNo">166</span>        // 16 + 12 + 8 + 4 = 40 concordant<a name="line.166"></a>
<span class="sourceLineNo">167</span>        // (40 - 0) / Math.sqrt((45 - 5) * (45 - 5)) = 1<a name="line.167"></a>
<span class="sourceLineNo">168</span>        Assert.assertEquals(1.0, correlation.correlation(xArray, yArray), Double.MIN_VALUE);<a name="line.168"></a>
<span class="sourceLineNo">169</span>    }<a name="line.169"></a>
<span class="sourceLineNo">170</span><a name="line.170"></a>
<span class="sourceLineNo">171</span><a name="line.171"></a>
<span class="sourceLineNo">172</span>    @Test<a name="line.172"></a>
<span class="sourceLineNo">173</span>    public void testAllTiesInBoth() {<a name="line.173"></a>
<span class="sourceLineNo">174</span>        final int length = 10;<a name="line.174"></a>
<span class="sourceLineNo">175</span>        final double[] xArray = new double[length];<a name="line.175"></a>
<span class="sourceLineNo">176</span>        final double[] yArray = new double[length];<a name="line.176"></a>
<span class="sourceLineNo">177</span>        Assert.assertEquals(Double.NaN, correlation.correlation(xArray, yArray), 0);<a name="line.177"></a>
<span class="sourceLineNo">178</span>    }<a name="line.178"></a>
<span class="sourceLineNo">179</span><a name="line.179"></a>
<span class="sourceLineNo">180</span>    @Test<a name="line.180"></a>
<span class="sourceLineNo">181</span>    public void testAllTiesInX() {<a name="line.181"></a>
<span class="sourceLineNo">182</span>        final int length = 10;<a name="line.182"></a>
<span class="sourceLineNo">183</span>        final double[] xArray = new double[length];<a name="line.183"></a>
<span class="sourceLineNo">184</span>        final double[] yArray = new double[length];<a name="line.184"></a>
<span class="sourceLineNo">185</span>        for (int i = 0; i &lt; length; i++) {<a name="line.185"></a>
<span class="sourceLineNo">186</span>            xArray[i] = i;<a name="line.186"></a>
<span class="sourceLineNo">187</span>        }<a name="line.187"></a>
<span class="sourceLineNo">188</span>        Assert.assertEquals(Double.NaN, correlation.correlation(xArray, yArray), 0);<a name="line.188"></a>
<span class="sourceLineNo">189</span>    }<a name="line.189"></a>
<span class="sourceLineNo">190</span><a name="line.190"></a>
<span class="sourceLineNo">191</span>    @Test<a name="line.191"></a>
<span class="sourceLineNo">192</span>    public void testAllTiesInY() {<a name="line.192"></a>
<span class="sourceLineNo">193</span>        final int length = 10;<a name="line.193"></a>
<span class="sourceLineNo">194</span>        final double[] xArray = new double[length];<a name="line.194"></a>
<span class="sourceLineNo">195</span>        final double[] yArray = new double[length];<a name="line.195"></a>
<span class="sourceLineNo">196</span>        for (int i = 0; i &lt; length; i++) {<a name="line.196"></a>
<span class="sourceLineNo">197</span>            yArray[i] = i;<a name="line.197"></a>
<span class="sourceLineNo">198</span>        }<a name="line.198"></a>
<span class="sourceLineNo">199</span>        Assert.assertEquals(Double.NaN, correlation.correlation(xArray, yArray), 0);<a name="line.199"></a>
<span class="sourceLineNo">200</span>    }<a name="line.200"></a>
<span class="sourceLineNo">201</span><a name="line.201"></a>
<span class="sourceLineNo">202</span>    @Test<a name="line.202"></a>
<span class="sourceLineNo">203</span>    public void testSingleElement() {<a name="line.203"></a>
<span class="sourceLineNo">204</span>        final int length = 1;<a name="line.204"></a>
<span class="sourceLineNo">205</span>        final double[] xArray = new double[length];<a name="line.205"></a>
<span class="sourceLineNo">206</span>        final double[] yArray = new double[length];<a name="line.206"></a>
<span class="sourceLineNo">207</span>        Assert.assertEquals(Double.NaN, correlation.correlation(xArray, yArray), 0);<a name="line.207"></a>
<span class="sourceLineNo">208</span>    }<a name="line.208"></a>
<span class="sourceLineNo">209</span><a name="line.209"></a>
<span class="sourceLineNo">210</span>    @Test<a name="line.210"></a>
<span class="sourceLineNo">211</span>    public void testTwoElements() {<a name="line.211"></a>
<span class="sourceLineNo">212</span>        final double[] xArray = new double[] {2.0, 1.0};<a name="line.212"></a>
<span class="sourceLineNo">213</span>        final double[] yArray = new double[] {1.0, 2.0};<a name="line.213"></a>
<span class="sourceLineNo">214</span>        Assert.assertEquals(-1.0, correlation.correlation(xArray, yArray), Double.MIN_VALUE);<a name="line.214"></a>
<span class="sourceLineNo">215</span>    }<a name="line.215"></a>
<span class="sourceLineNo">216</span><a name="line.216"></a>
<span class="sourceLineNo">217</span>    @Test<a name="line.217"></a>
<span class="sourceLineNo">218</span>    public void test2dDoubleArray() {<a name="line.218"></a>
<span class="sourceLineNo">219</span>        final double[][] input = new double[][] {<a name="line.219"></a>
<span class="sourceLineNo">220</span>                new double[] {2.0, 1.0, 2.0},<a name="line.220"></a>
<span class="sourceLineNo">221</span>                new double[] {1.0, 2.0, 1.0},<a name="line.221"></a>
<span class="sourceLineNo">222</span>                new double[] {0.0, 0.0, 0.0}<a name="line.222"></a>
<span class="sourceLineNo">223</span>        };<a name="line.223"></a>
<span class="sourceLineNo">224</span><a name="line.224"></a>
<span class="sourceLineNo">225</span>        final double[][] expected = new double[][] {<a name="line.225"></a>
<span class="sourceLineNo">226</span>                new double[] {1.0, 1.0 / 3.0, 1.0},<a name="line.226"></a>
<span class="sourceLineNo">227</span>                new double[] {1.0 / 3.0, 1.0, 1.0 / 3.0},<a name="line.227"></a>
<span class="sourceLineNo">228</span>                new double[] {1.0, 1.0 / 3.0, 1.0}};<a name="line.228"></a>
<span class="sourceLineNo">229</span><a name="line.229"></a>
<span class="sourceLineNo">230</span>        Assert.assertEquals(correlation.computeCorrelationMatrix(input),<a name="line.230"></a>
<span class="sourceLineNo">231</span>                new BlockRealMatrix(expected));<a name="line.231"></a>
<span class="sourceLineNo">232</span><a name="line.232"></a>
<span class="sourceLineNo">233</span>    }<a name="line.233"></a>
<span class="sourceLineNo">234</span><a name="line.234"></a>
<span class="sourceLineNo">235</span>    @Test<a name="line.235"></a>
<span class="sourceLineNo">236</span>    public void testBlockMatrix() {<a name="line.236"></a>
<span class="sourceLineNo">237</span>        final double[][] input = new double[][] {<a name="line.237"></a>
<span class="sourceLineNo">238</span>                new double[] {2.0, 1.0, 2.0},<a name="line.238"></a>
<span class="sourceLineNo">239</span>                new double[] {1.0, 2.0, 1.0},<a name="line.239"></a>
<span class="sourceLineNo">240</span>                new double[] {0.0, 0.0, 0.0}<a name="line.240"></a>
<span class="sourceLineNo">241</span>        };<a name="line.241"></a>
<span class="sourceLineNo">242</span><a name="line.242"></a>
<span class="sourceLineNo">243</span>        final double[][] expected = new double[][] {<a name="line.243"></a>
<span class="sourceLineNo">244</span>                new double[] {1.0, 1.0 / 3.0, 1.0},<a name="line.244"></a>
<span class="sourceLineNo">245</span>                new double[] {1.0 / 3.0, 1.0, 1.0 / 3.0},<a name="line.245"></a>
<span class="sourceLineNo">246</span>                new double[] {1.0, 1.0 / 3.0, 1.0}};<a name="line.246"></a>
<span class="sourceLineNo">247</span><a name="line.247"></a>
<span class="sourceLineNo">248</span>        Assert.assertEquals(<a name="line.248"></a>
<span class="sourceLineNo">249</span>                correlation.computeCorrelationMatrix(new BlockRealMatrix(input)),<a name="line.249"></a>
<span class="sourceLineNo">250</span>                new BlockRealMatrix(expected));<a name="line.250"></a>
<span class="sourceLineNo">251</span>    }<a name="line.251"></a>
<span class="sourceLineNo">252</span><a name="line.252"></a>
<span class="sourceLineNo">253</span>    @Test<a name="line.253"></a>
<span class="sourceLineNo">254</span>    public void testLargeArray() {<a name="line.254"></a>
<span class="sourceLineNo">255</span>        // test integer overflow detected in MATH-1068<a name="line.255"></a>
<span class="sourceLineNo">256</span>        double[] xArray = new double[100000];<a name="line.256"></a>
<span class="sourceLineNo">257</span>        Arrays.fill(xArray, 0, 2500, 1.0);<a name="line.257"></a>
<span class="sourceLineNo">258</span><a name="line.258"></a>
<span class="sourceLineNo">259</span>        Assert.assertEquals(1.0, correlation.correlation(xArray, xArray), 1e-6);<a name="line.259"></a>
<span class="sourceLineNo">260</span>    }<a name="line.260"></a>
<span class="sourceLineNo">261</span>}<a name="line.261"></a>




























































</pre>
</div>
</body>
</html>
