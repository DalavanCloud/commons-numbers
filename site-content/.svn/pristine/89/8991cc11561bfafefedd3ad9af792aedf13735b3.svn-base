<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>SubLine xref</title>
<link type="text/css" rel="stylesheet" href="../../../../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../../apidocs/org/apache/commons/math3/geometry/euclidean/twod/SubLine.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Licensed to the Apache Software Foundation (ASF) under one or more</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> * contributor license agreements.  See the NOTICE file distributed with</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * this work for additional information regarding copyright ownership.</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * The ASF licenses this file to You under the Apache License, Version 2.0</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * (the "License"); you may not use this file except in compliance with</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> * the License.  You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *      <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">package</strong> org.apache.commons.math3.geometry.euclidean.twod;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <strong class="jxr_keyword">import</strong> java.util.ArrayList;
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> java.util.List;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.geometry.Point;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.geometry.euclidean.oned.Interval;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint;
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane;
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.geometry.partitioning.BSPTree;
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.geometry.partitioning.Hyperplane;
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.geometry.partitioning.Region;
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.geometry.partitioning.Region.Location;
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.geometry.partitioning.SubHyperplane;
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.util.FastMath;
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  <em class="jxr_javadoccomment">/** This class represents a sub-hyperplane for {@link Line}.</em>
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  <em class="jxr_javadoccomment"> * @since 3.0</em>
<a class="jxr_linenumber" name="L38" href="#L38">38</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L39" href="#L39">39</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/twod/SubLine.html">SubLine</a> <strong class="jxr_keyword">extends</strong> AbstractSubHyperplane&lt;Euclidean2D, Euclidean1D&gt; {
<a class="jxr_linenumber" name="L40" href="#L40">40</a>  
<a class="jxr_linenumber" name="L41" href="#L41">41</a>      <em class="jxr_javadoccomment">/** Default value for tolerance. */</em>
<a class="jxr_linenumber" name="L42" href="#L42">42</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> DEFAULT_TOLERANCE = 1.0e-10;
<a class="jxr_linenumber" name="L43" href="#L43">43</a>  
<a class="jxr_linenumber" name="L44" href="#L44">44</a>      <em class="jxr_javadoccomment">/** Simple constructor.</em>
<a class="jxr_linenumber" name="L45" href="#L45">45</a>  <em class="jxr_javadoccomment">     * @param hyperplane underlying hyperplane</em>
<a class="jxr_linenumber" name="L46" href="#L46">46</a>  <em class="jxr_javadoccomment">     * @param remainingRegion remaining region of the hyperplane</em>
<a class="jxr_linenumber" name="L47" href="#L47">47</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L48" href="#L48">48</a>      <strong class="jxr_keyword">public</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/twod/SubLine.html">SubLine</a>(<strong class="jxr_keyword">final</strong> Hyperplane&lt;Euclidean2D&gt; hyperplane,
<a class="jxr_linenumber" name="L49" href="#L49">49</a>                     <strong class="jxr_keyword">final</strong> Region&lt;Euclidean1D&gt; remainingRegion) {
<a class="jxr_linenumber" name="L50" href="#L50">50</a>          <strong class="jxr_keyword">super</strong>(hyperplane, remainingRegion);
<a class="jxr_linenumber" name="L51" href="#L51">51</a>      }
<a class="jxr_linenumber" name="L52" href="#L52">52</a>  
<a class="jxr_linenumber" name="L53" href="#L53">53</a>      <em class="jxr_javadoccomment">/** Create a sub-line from two endpoints.</em>
<a class="jxr_linenumber" name="L54" href="#L54">54</a>  <em class="jxr_javadoccomment">     * @param start start point</em>
<a class="jxr_linenumber" name="L55" href="#L55">55</a>  <em class="jxr_javadoccomment">     * @param end end point</em>
<a class="jxr_linenumber" name="L56" href="#L56">56</a>  <em class="jxr_javadoccomment">     * @param tolerance tolerance below which points are considered identical</em>
<a class="jxr_linenumber" name="L57" href="#L57">57</a>  <em class="jxr_javadoccomment">     * @since 3.3</em>
<a class="jxr_linenumber" name="L58" href="#L58">58</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L59" href="#L59">59</a>      <strong class="jxr_keyword">public</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/twod/SubLine.html">SubLine</a>(<strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/twod/Vector2D.html">Vector2D</a> start, <strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/twod/Vector2D.html">Vector2D</a> end, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> tolerance) {
<a class="jxr_linenumber" name="L60" href="#L60">60</a>          <strong class="jxr_keyword">super</strong>(<strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/twod/Line.html">Line</a>(start, end, tolerance), buildIntervalSet(start, end, tolerance));
<a class="jxr_linenumber" name="L61" href="#L61">61</a>      }
<a class="jxr_linenumber" name="L62" href="#L62">62</a>  
<a class="jxr_linenumber" name="L63" href="#L63">63</a>      <em class="jxr_javadoccomment">/** Create a sub-line from two endpoints.</em>
<a class="jxr_linenumber" name="L64" href="#L64">64</a>  <em class="jxr_javadoccomment">     * @param start start point</em>
<a class="jxr_linenumber" name="L65" href="#L65">65</a>  <em class="jxr_javadoccomment">     * @param end end point</em>
<a class="jxr_linenumber" name="L66" href="#L66">66</a>  <em class="jxr_javadoccomment">     * @deprecated as of 3.3, replaced with {@link #SubLine(Vector2D, Vector2D, double)}</em>
<a class="jxr_linenumber" name="L67" href="#L67">67</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L68" href="#L68">68</a>      @Deprecated
<a class="jxr_linenumber" name="L69" href="#L69">69</a>      <strong class="jxr_keyword">public</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/twod/SubLine.html">SubLine</a>(<strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/twod/Vector2D.html">Vector2D</a> start, <strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/twod/Vector2D.html">Vector2D</a> end) {
<a class="jxr_linenumber" name="L70" href="#L70">70</a>          <strong class="jxr_keyword">this</strong>(start, end, DEFAULT_TOLERANCE);
<a class="jxr_linenumber" name="L71" href="#L71">71</a>      }
<a class="jxr_linenumber" name="L72" href="#L72">72</a>  
<a class="jxr_linenumber" name="L73" href="#L73">73</a>      <em class="jxr_javadoccomment">/** Create a sub-line from a segment.</em>
<a class="jxr_linenumber" name="L74" href="#L74">74</a>  <em class="jxr_javadoccomment">     * @param segment single segment forming the sub-line</em>
<a class="jxr_linenumber" name="L75" href="#L75">75</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L76" href="#L76">76</a>      <strong class="jxr_keyword">public</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/twod/SubLine.html">SubLine</a>(<strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/twod/Segment.html">Segment</a> segment) {
<a class="jxr_linenumber" name="L77" href="#L77">77</a>          <strong class="jxr_keyword">super</strong>(segment.getLine(),
<a class="jxr_linenumber" name="L78" href="#L78">78</a>                buildIntervalSet(segment.getStart(), segment.getEnd(), segment.getLine().getTolerance()));
<a class="jxr_linenumber" name="L79" href="#L79">79</a>      }
<a class="jxr_linenumber" name="L80" href="#L80">80</a>  
<a class="jxr_linenumber" name="L81" href="#L81">81</a>      <em class="jxr_javadoccomment">/** Get the endpoints of the sub-line.</em>
<a class="jxr_linenumber" name="L82" href="#L82">82</a>  <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L83" href="#L83">83</a>  <em class="jxr_javadoccomment">     * A subline may be any arbitrary number of disjoints segments, so the endpoints</em>
<a class="jxr_linenumber" name="L84" href="#L84">84</a>  <em class="jxr_javadoccomment">     * are provided as a list of endpoint pairs. Each element of the list represents</em>
<a class="jxr_linenumber" name="L85" href="#L85">85</a>  <em class="jxr_javadoccomment">     * one segment, and each segment contains a start point at index 0 and an end point</em>
<a class="jxr_linenumber" name="L86" href="#L86">86</a>  <em class="jxr_javadoccomment">     * at index 1. If the sub-line is unbounded in the negative infinity direction,</em>
<a class="jxr_linenumber" name="L87" href="#L87">87</a>  <em class="jxr_javadoccomment">     * the start point of the first segment will have infinite coordinates. If the</em>
<a class="jxr_linenumber" name="L88" href="#L88">88</a>  <em class="jxr_javadoccomment">     * sub-line is unbounded in the positive infinity direction, the end point of the</em>
<a class="jxr_linenumber" name="L89" href="#L89">89</a>  <em class="jxr_javadoccomment">     * last segment will have infinite coordinates. So a sub-line covering the whole</em>
<a class="jxr_linenumber" name="L90" href="#L90">90</a>  <em class="jxr_javadoccomment">     * line will contain just one row and both elements of this row will have infinite</em>
<a class="jxr_linenumber" name="L91" href="#L91">91</a>  <em class="jxr_javadoccomment">     * coordinates. If the sub-line is empty, the returned list will contain 0 segments.</em>
<a class="jxr_linenumber" name="L92" href="#L92">92</a>  <em class="jxr_javadoccomment">     * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L93" href="#L93">93</a>  <em class="jxr_javadoccomment">     * @return list of segments endpoints</em>
<a class="jxr_linenumber" name="L94" href="#L94">94</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L95" href="#L95">95</a>      <strong class="jxr_keyword">public</strong> List&lt;Segment&gt; getSegments() {
<a class="jxr_linenumber" name="L96" href="#L96">96</a>  
<a class="jxr_linenumber" name="L97" href="#L97">97</a>          <strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/twod/Line.html">Line</a> line = (Line) getHyperplane();
<a class="jxr_linenumber" name="L98" href="#L98">98</a>          <strong class="jxr_keyword">final</strong> List&lt;Interval&gt; list = ((IntervalsSet) getRemainingRegion()).asList();
<a class="jxr_linenumber" name="L99" href="#L99">99</a>          <strong class="jxr_keyword">final</strong> List&lt;Segment&gt; segments = <strong class="jxr_keyword">new</strong> ArrayList&lt;Segment&gt;(list.size());
<a class="jxr_linenumber" name="L100" href="#L100">100</a> 
<a class="jxr_linenumber" name="L101" href="#L101">101</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">final</strong> Interval interval : list) {
<a class="jxr_linenumber" name="L102" href="#L102">102</a>             <strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/twod/Vector2D.html">Vector2D</a> start = line.toSpace((Point&lt;Euclidean1D&gt;) <strong class="jxr_keyword">new</strong> Vector1D(interval.getInf()));
<a class="jxr_linenumber" name="L103" href="#L103">103</a>             <strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/twod/Vector2D.html">Vector2D</a> end   = line.toSpace((Point&lt;Euclidean1D&gt;) <strong class="jxr_keyword">new</strong> Vector1D(interval.getSup()));
<a class="jxr_linenumber" name="L104" href="#L104">104</a>             segments.add(<strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/twod/Segment.html">Segment</a>(start, end, line));
<a class="jxr_linenumber" name="L105" href="#L105">105</a>         }
<a class="jxr_linenumber" name="L106" href="#L106">106</a> 
<a class="jxr_linenumber" name="L107" href="#L107">107</a>         <strong class="jxr_keyword">return</strong> segments;
<a class="jxr_linenumber" name="L108" href="#L108">108</a> 
<a class="jxr_linenumber" name="L109" href="#L109">109</a>     }
<a class="jxr_linenumber" name="L110" href="#L110">110</a> 
<a class="jxr_linenumber" name="L111" href="#L111">111</a>     <em class="jxr_javadoccomment">/** Get the intersection of the instance and another sub-line.</em>
<a class="jxr_linenumber" name="L112" href="#L112">112</a> <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L113" href="#L113">113</a> <em class="jxr_javadoccomment">     * This method is related to the {@link Line#intersection(Line)</em>
<a class="jxr_linenumber" name="L114" href="#L114">114</a> <em class="jxr_javadoccomment">     * intersection} method in the {@link Line Line} class, but in addition</em>
<a class="jxr_linenumber" name="L115" href="#L115">115</a> <em class="jxr_javadoccomment">     * to compute the point along infinite lines, it also checks the point</em>
<a class="jxr_linenumber" name="L116" href="#L116">116</a> <em class="jxr_javadoccomment">     * lies on both sub-line ranges.</em>
<a class="jxr_linenumber" name="L117" href="#L117">117</a> <em class="jxr_javadoccomment">     * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L118" href="#L118">118</a> <em class="jxr_javadoccomment">     * @param subLine other sub-line which may intersect instance</em>
<a class="jxr_linenumber" name="L119" href="#L119">119</a> <em class="jxr_javadoccomment">     * @param includeEndPoints if true, endpoints are considered to belong to</em>
<a class="jxr_linenumber" name="L120" href="#L120">120</a> <em class="jxr_javadoccomment">     * instance (i.e. they are closed sets) and may be returned, otherwise endpoints</em>
<a class="jxr_linenumber" name="L121" href="#L121">121</a> <em class="jxr_javadoccomment">     * are considered to not belong to instance (i.e. they are open sets) and intersection</em>
<a class="jxr_linenumber" name="L122" href="#L122">122</a> <em class="jxr_javadoccomment">     * occurring on endpoints lead to null being returned</em>
<a class="jxr_linenumber" name="L123" href="#L123">123</a> <em class="jxr_javadoccomment">     * @return the intersection point if there is one, null if the sub-lines don't intersect</em>
<a class="jxr_linenumber" name="L124" href="#L124">124</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L125" href="#L125">125</a>     <strong class="jxr_keyword">public</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/twod/Vector2D.html">Vector2D</a> intersection(<strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/twod/SubLine.html">SubLine</a> subLine, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">boolean</strong> includeEndPoints) {
<a class="jxr_linenumber" name="L126" href="#L126">126</a> 
<a class="jxr_linenumber" name="L127" href="#L127">127</a>         <em class="jxr_comment">// retrieve the underlying lines</em>
<a class="jxr_linenumber" name="L128" href="#L128">128</a>         <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/twod/Line.html">Line</a> line1 = (Line) getHyperplane();
<a class="jxr_linenumber" name="L129" href="#L129">129</a>         <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/twod/Line.html">Line</a> line2 = (Line) subLine.getHyperplane();
<a class="jxr_linenumber" name="L130" href="#L130">130</a> 
<a class="jxr_linenumber" name="L131" href="#L131">131</a>         <em class="jxr_comment">// compute the intersection on infinite line</em>
<a class="jxr_linenumber" name="L132" href="#L132">132</a>         <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/twod/Vector2D.html">Vector2D</a> v2D = line1.intersection(line2);
<a class="jxr_linenumber" name="L133" href="#L133">133</a>         <strong class="jxr_keyword">if</strong> (v2D == <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L134" href="#L134">134</a>             <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L135" href="#L135">135</a>         }
<a class="jxr_linenumber" name="L136" href="#L136">136</a> 
<a class="jxr_linenumber" name="L137" href="#L137">137</a>         <em class="jxr_comment">// check location of point with respect to first sub-line</em>
<a class="jxr_linenumber" name="L138" href="#L138">138</a>         <a href="../../../../../../../org/apache/commons/math3/geometry/partitioning/Region.html">Location</a> loc1 = getRemainingRegion().checkPoint(line1.toSubSpace((Point&lt;Euclidean2D&gt;) v2D));
<a class="jxr_linenumber" name="L139" href="#L139">139</a> 
<a class="jxr_linenumber" name="L140" href="#L140">140</a>         <em class="jxr_comment">// check location of point with respect to second sub-line</em>
<a class="jxr_linenumber" name="L141" href="#L141">141</a>         <a href="../../../../../../../org/apache/commons/math3/geometry/partitioning/Region.html">Location</a> loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace((Point&lt;Euclidean2D&gt;) v2D));
<a class="jxr_linenumber" name="L142" href="#L142">142</a> 
<a class="jxr_linenumber" name="L143" href="#L143">143</a>         <strong class="jxr_keyword">if</strong> (includeEndPoints) {
<a class="jxr_linenumber" name="L144" href="#L144">144</a>             <strong class="jxr_keyword">return</strong> ((loc1 != Location.OUTSIDE) &amp;&amp; (loc2 != Location.OUTSIDE)) ? v2D : <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L145" href="#L145">145</a>         } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L146" href="#L146">146</a>             <strong class="jxr_keyword">return</strong> ((loc1 == Location.INSIDE) &amp;&amp; (loc2 == Location.INSIDE)) ? v2D : <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L147" href="#L147">147</a>         }
<a class="jxr_linenumber" name="L148" href="#L148">148</a> 
<a class="jxr_linenumber" name="L149" href="#L149">149</a>     }
<a class="jxr_linenumber" name="L150" href="#L150">150</a> 
<a class="jxr_linenumber" name="L151" href="#L151">151</a>     <em class="jxr_javadoccomment">/** Build an interval set from two points.</em>
<a class="jxr_linenumber" name="L152" href="#L152">152</a> <em class="jxr_javadoccomment">     * @param start start point</em>
<a class="jxr_linenumber" name="L153" href="#L153">153</a> <em class="jxr_javadoccomment">     * @param end end point</em>
<a class="jxr_linenumber" name="L154" href="#L154">154</a> <em class="jxr_javadoccomment">     * @param tolerance tolerance below which points are considered identical</em>
<a class="jxr_linenumber" name="L155" href="#L155">155</a> <em class="jxr_javadoccomment">     * @return an interval set</em>
<a class="jxr_linenumber" name="L156" href="#L156">156</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L157" href="#L157">157</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet.html">IntervalsSet</a> buildIntervalSet(<strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/twod/Vector2D.html">Vector2D</a> start, <strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/twod/Vector2D.html">Vector2D</a> end, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> tolerance) {
<a class="jxr_linenumber" name="L158" href="#L158">158</a>         <strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/twod/Line.html">Line</a> line = <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/twod/Line.html">Line</a>(start, end, tolerance);
<a class="jxr_linenumber" name="L159" href="#L159">159</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet.html">IntervalsSet</a>(line.toSubSpace((Point&lt;Euclidean2D&gt;) start).getX(),
<a class="jxr_linenumber" name="L160" href="#L160">160</a>                                 line.toSubSpace((Point&lt;Euclidean2D&gt;) end).getX(),
<a class="jxr_linenumber" name="L161" href="#L161">161</a>                                 tolerance);
<a class="jxr_linenumber" name="L162" href="#L162">162</a>     }
<a class="jxr_linenumber" name="L163" href="#L163">163</a> 
<a class="jxr_linenumber" name="L164" href="#L164">164</a>     <em class="jxr_javadoccomment">/** {@inheritDoc} */</em>
<a class="jxr_linenumber" name="L165" href="#L165">165</a>     @Override
<a class="jxr_linenumber" name="L166" href="#L166">166</a>     <strong class="jxr_keyword">protected</strong> AbstractSubHyperplane&lt;Euclidean2D, Euclidean1D&gt; buildNew(<strong class="jxr_keyword">final</strong> Hyperplane&lt;Euclidean2D&gt; hyperplane,
<a class="jxr_linenumber" name="L167" href="#L167">167</a>                                                                        <strong class="jxr_keyword">final</strong> Region&lt;Euclidean1D&gt; remainingRegion) {
<a class="jxr_linenumber" name="L168" href="#L168">168</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/twod/SubLine.html">SubLine</a>(hyperplane, remainingRegion);
<a class="jxr_linenumber" name="L169" href="#L169">169</a>     }
<a class="jxr_linenumber" name="L170" href="#L170">170</a> 
<a class="jxr_linenumber" name="L171" href="#L171">171</a>     <em class="jxr_javadoccomment">/** {@inheritDoc} */</em>
<a class="jxr_linenumber" name="L172" href="#L172">172</a>     @Override
<a class="jxr_linenumber" name="L173" href="#L173">173</a>     <strong class="jxr_keyword">public</strong> SplitSubHyperplane&lt;Euclidean2D&gt; split(<strong class="jxr_keyword">final</strong> Hyperplane&lt;Euclidean2D&gt; hyperplane) {
<a class="jxr_linenumber" name="L174" href="#L174">174</a> 
<a class="jxr_linenumber" name="L175" href="#L175">175</a>         <strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/twod/Line.html">Line</a>    thisLine  = (Line) getHyperplane();
<a class="jxr_linenumber" name="L176" href="#L176">176</a>         <strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/twod/Line.html">Line</a>    otherLine = (Line) hyperplane;
<a class="jxr_linenumber" name="L177" href="#L177">177</a>         <strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/twod/Vector2D.html">Vector2D</a> crossing = thisLine.intersection(otherLine);
<a class="jxr_linenumber" name="L178" href="#L178">178</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> tolerance  = thisLine.getTolerance();
<a class="jxr_linenumber" name="L179" href="#L179">179</a> 
<a class="jxr_linenumber" name="L180" href="#L180">180</a>         <strong class="jxr_keyword">if</strong> (crossing == <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L181" href="#L181">181</a>             <em class="jxr_comment">// the lines are parallel</em>
<a class="jxr_linenumber" name="L182" href="#L182">182</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> global = otherLine.getOffset(thisLine);
<a class="jxr_linenumber" name="L183" href="#L183">183</a>             <strong class="jxr_keyword">if</strong> (global &lt; -tolerance) {
<a class="jxr_linenumber" name="L184" href="#L184">184</a>                 <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> SplitSubHyperplane&lt;Euclidean2D&gt;(<strong class="jxr_keyword">null</strong>, <strong class="jxr_keyword">this</strong>);
<a class="jxr_linenumber" name="L185" href="#L185">185</a>             } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (global &gt; tolerance) {
<a class="jxr_linenumber" name="L186" href="#L186">186</a>                 <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> SplitSubHyperplane&lt;Euclidean2D&gt;(<strong class="jxr_keyword">this</strong>, <strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L187" href="#L187">187</a>             } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L188" href="#L188">188</a>                 <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> SplitSubHyperplane&lt;Euclidean2D&gt;(<strong class="jxr_keyword">null</strong>, <strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L189" href="#L189">189</a>             }
<a class="jxr_linenumber" name="L190" href="#L190">190</a>         }
<a class="jxr_linenumber" name="L191" href="#L191">191</a> 
<a class="jxr_linenumber" name="L192" href="#L192">192</a>         <em class="jxr_comment">// the lines do intersect</em>
<a class="jxr_linenumber" name="L193" href="#L193">193</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">boolean</strong> direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) &lt; 0;
<a class="jxr_linenumber" name="L194" href="#L194">194</a>         <strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/oned/Vector1D.html">Vector1D</a> x      = thisLine.toSubSpace((Point&lt;Euclidean2D&gt;) crossing);
<a class="jxr_linenumber" name="L195" href="#L195">195</a>         <strong class="jxr_keyword">final</strong> SubHyperplane&lt;Euclidean1D&gt; subPlus  =
<a class="jxr_linenumber" name="L196" href="#L196">196</a>                 <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint.html">OrientedPoint</a>(x, !direct, tolerance).wholeHyperplane();
<a class="jxr_linenumber" name="L197" href="#L197">197</a>         <strong class="jxr_keyword">final</strong> SubHyperplane&lt;Euclidean1D&gt; subMinus =
<a class="jxr_linenumber" name="L198" href="#L198">198</a>                 <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint.html">OrientedPoint</a>(x,  direct, tolerance).wholeHyperplane();
<a class="jxr_linenumber" name="L199" href="#L199">199</a> 
<a class="jxr_linenumber" name="L200" href="#L200">200</a>         <strong class="jxr_keyword">final</strong> BSPTree&lt;Euclidean1D&gt; splitTree = getRemainingRegion().getTree(false).split(subMinus);
<a class="jxr_linenumber" name="L201" href="#L201">201</a>         <strong class="jxr_keyword">final</strong> BSPTree&lt;Euclidean1D&gt; plusTree  = getRemainingRegion().isEmpty(splitTree.getPlus()) ?
<a class="jxr_linenumber" name="L202" href="#L202">202</a>                                                <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean1D&gt;(Boolean.FALSE) :
<a class="jxr_linenumber" name="L203" href="#L203">203</a>                                                <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean1D&gt;(subPlus, <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean1D&gt;(Boolean.FALSE),
<a class="jxr_linenumber" name="L204" href="#L204">204</a>                                                                         splitTree.getPlus(), <strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L205" href="#L205">205</a>         <strong class="jxr_keyword">final</strong> BSPTree&lt;Euclidean1D&gt; minusTree = getRemainingRegion().isEmpty(splitTree.getMinus()) ?
<a class="jxr_linenumber" name="L206" href="#L206">206</a>                                                <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean1D&gt;(Boolean.FALSE) :
<a class="jxr_linenumber" name="L207" href="#L207">207</a>                                                <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean1D&gt;(subMinus, <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean1D&gt;(Boolean.FALSE),
<a class="jxr_linenumber" name="L208" href="#L208">208</a>                                                                         splitTree.getMinus(), <strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L209" href="#L209">209</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> SplitSubHyperplane&lt;Euclidean2D&gt;(<strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/twod/SubLine.html">SubLine</a>(thisLine.copySelf(), <strong class="jxr_keyword">new</strong> IntervalsSet(plusTree, tolerance)),
<a class="jxr_linenumber" name="L210" href="#L210">210</a>                                                    <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/twod/SubLine.html">SubLine</a>(thisLine.copySelf(), <strong class="jxr_keyword">new</strong> IntervalsSet(minusTree, tolerance)));
<a class="jxr_linenumber" name="L211" href="#L211">211</a> 
<a class="jxr_linenumber" name="L212" href="#L212">212</a>     }
<a class="jxr_linenumber" name="L213" href="#L213">213</a> 
<a class="jxr_linenumber" name="L214" href="#L214">214</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2003&#x2013;2016 <a href="http://www.apache.org/">The Apache Software Foundation</a>. All rights reserved.</div>
</body>
</html>
