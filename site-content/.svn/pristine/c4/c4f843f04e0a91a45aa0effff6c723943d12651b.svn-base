<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span>package org.apache.commons.math3.geometry.euclidean.twod.hull;<a name="line.17"></a>
<span class="sourceLineNo">018</span><a name="line.18"></a>
<span class="sourceLineNo">019</span>import java.util.ArrayList;<a name="line.19"></a>
<span class="sourceLineNo">020</span>import java.util.Arrays;<a name="line.20"></a>
<span class="sourceLineNo">021</span>import java.util.Collection;<a name="line.21"></a>
<span class="sourceLineNo">022</span>import java.util.Collections;<a name="line.22"></a>
<span class="sourceLineNo">023</span>import java.util.List;<a name="line.23"></a>
<span class="sourceLineNo">024</span><a name="line.24"></a>
<span class="sourceLineNo">025</span>import org.apache.commons.math3.exception.NullArgumentException;<a name="line.25"></a>
<span class="sourceLineNo">026</span>import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;<a name="line.26"></a>
<span class="sourceLineNo">027</span>import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;<a name="line.27"></a>
<span class="sourceLineNo">028</span>import org.apache.commons.math3.geometry.partitioning.Region;<a name="line.28"></a>
<span class="sourceLineNo">029</span>import org.apache.commons.math3.geometry.partitioning.Region.Location;<a name="line.29"></a>
<span class="sourceLineNo">030</span>import org.apache.commons.math3.random.MersenneTwister;<a name="line.30"></a>
<span class="sourceLineNo">031</span>import org.apache.commons.math3.random.RandomGenerator;<a name="line.31"></a>
<span class="sourceLineNo">032</span>import org.apache.commons.math3.util.FastMath;<a name="line.32"></a>
<span class="sourceLineNo">033</span>import org.apache.commons.math3.util.MathArrays;<a name="line.33"></a>
<span class="sourceLineNo">034</span>import org.apache.commons.math3.util.Precision;<a name="line.34"></a>
<span class="sourceLineNo">035</span>import org.junit.Assert;<a name="line.35"></a>
<span class="sourceLineNo">036</span>import org.junit.Before;<a name="line.36"></a>
<span class="sourceLineNo">037</span>import org.junit.Test;<a name="line.37"></a>
<span class="sourceLineNo">038</span><a name="line.38"></a>
<span class="sourceLineNo">039</span>/**<a name="line.39"></a>
<span class="sourceLineNo">040</span> * Abstract base test class for 2D convex hull generators.<a name="line.40"></a>
<span class="sourceLineNo">041</span> * <a name="line.41"></a>
<span class="sourceLineNo">042</span> */<a name="line.42"></a>
<span class="sourceLineNo">043</span>public abstract class ConvexHullGenerator2DAbstractTest {<a name="line.43"></a>
<span class="sourceLineNo">044</span><a name="line.44"></a>
<span class="sourceLineNo">045</span>    protected ConvexHullGenerator2D generator;<a name="line.45"></a>
<span class="sourceLineNo">046</span>    protected RandomGenerator random;<a name="line.46"></a>
<span class="sourceLineNo">047</span><a name="line.47"></a>
<span class="sourceLineNo">048</span>    protected abstract ConvexHullGenerator2D createConvexHullGenerator(boolean includeCollinearPoints);<a name="line.48"></a>
<span class="sourceLineNo">049</span><a name="line.49"></a>
<span class="sourceLineNo">050</span>    protected Collection&lt;Vector2D&gt; reducePoints(Collection&lt;Vector2D&gt; points) {<a name="line.50"></a>
<span class="sourceLineNo">051</span>        // do nothing by default, may be overridden by other tests<a name="line.51"></a>
<span class="sourceLineNo">052</span>        return points;<a name="line.52"></a>
<span class="sourceLineNo">053</span>    }<a name="line.53"></a>
<span class="sourceLineNo">054</span><a name="line.54"></a>
<span class="sourceLineNo">055</span>    @Before<a name="line.55"></a>
<span class="sourceLineNo">056</span>    public void setUp() {<a name="line.56"></a>
<span class="sourceLineNo">057</span>        // by default, do not include collinear points<a name="line.57"></a>
<span class="sourceLineNo">058</span>        generator = createConvexHullGenerator(false);<a name="line.58"></a>
<span class="sourceLineNo">059</span>        random = new MersenneTwister(10);<a name="line.59"></a>
<span class="sourceLineNo">060</span>    }<a name="line.60"></a>
<span class="sourceLineNo">061</span><a name="line.61"></a>
<span class="sourceLineNo">062</span>    // ------------------------------------------------------------------------------<a name="line.62"></a>
<span class="sourceLineNo">063</span><a name="line.63"></a>
<span class="sourceLineNo">064</span>    @Test(expected = NullArgumentException.class)<a name="line.64"></a>
<span class="sourceLineNo">065</span>    public void testNullArgument() {<a name="line.65"></a>
<span class="sourceLineNo">066</span>        generator.generate(null);<a name="line.66"></a>
<span class="sourceLineNo">067</span>    }<a name="line.67"></a>
<span class="sourceLineNo">068</span>    <a name="line.68"></a>
<span class="sourceLineNo">069</span>    @Test<a name="line.69"></a>
<span class="sourceLineNo">070</span>    public void testEmpty() {<a name="line.70"></a>
<span class="sourceLineNo">071</span>        ConvexHull2D hull = generator.generate(Collections.&lt;Vector2D&gt;emptyList());<a name="line.71"></a>
<span class="sourceLineNo">072</span>        Assert.assertTrue(hull.getVertices().length == 0);<a name="line.72"></a>
<span class="sourceLineNo">073</span>        Assert.assertTrue(hull.getLineSegments().length == 0);<a name="line.73"></a>
<span class="sourceLineNo">074</span>    }<a name="line.74"></a>
<span class="sourceLineNo">075</span><a name="line.75"></a>
<span class="sourceLineNo">076</span>    @Test<a name="line.76"></a>
<span class="sourceLineNo">077</span>    public void testOnePoint() {<a name="line.77"></a>
<span class="sourceLineNo">078</span>        List&lt;Vector2D&gt; points = createRandomPoints(1);<a name="line.78"></a>
<span class="sourceLineNo">079</span>        ConvexHull2D hull = generator.generate(points);<a name="line.79"></a>
<span class="sourceLineNo">080</span>        Assert.assertTrue(hull.getVertices().length == 1);<a name="line.80"></a>
<span class="sourceLineNo">081</span>        Assert.assertTrue(hull.getLineSegments().length == 0);<a name="line.81"></a>
<span class="sourceLineNo">082</span>    }<a name="line.82"></a>
<span class="sourceLineNo">083</span><a name="line.83"></a>
<span class="sourceLineNo">084</span>    @Test<a name="line.84"></a>
<span class="sourceLineNo">085</span>    public void testTwoPoints() {<a name="line.85"></a>
<span class="sourceLineNo">086</span>        List&lt;Vector2D&gt; points = createRandomPoints(2);<a name="line.86"></a>
<span class="sourceLineNo">087</span>        ConvexHull2D hull = generator.generate(points);<a name="line.87"></a>
<span class="sourceLineNo">088</span>        Assert.assertTrue(hull.getVertices().length == 2);<a name="line.88"></a>
<span class="sourceLineNo">089</span>        Assert.assertTrue(hull.getLineSegments().length == 1);<a name="line.89"></a>
<span class="sourceLineNo">090</span>    }<a name="line.90"></a>
<span class="sourceLineNo">091</span><a name="line.91"></a>
<span class="sourceLineNo">092</span>    @Test<a name="line.92"></a>
<span class="sourceLineNo">093</span>    public void testAllIdentical() {<a name="line.93"></a>
<span class="sourceLineNo">094</span>        final Collection&lt;Vector2D&gt; points = new ArrayList&lt;Vector2D&gt;();<a name="line.94"></a>
<span class="sourceLineNo">095</span>        points.add(new Vector2D(1, 1));<a name="line.95"></a>
<span class="sourceLineNo">096</span>        points.add(new Vector2D(1, 1));<a name="line.96"></a>
<span class="sourceLineNo">097</span>        points.add(new Vector2D(1, 1));<a name="line.97"></a>
<span class="sourceLineNo">098</span>        points.add(new Vector2D(1, 1));<a name="line.98"></a>
<span class="sourceLineNo">099</span><a name="line.99"></a>
<span class="sourceLineNo">100</span>        final ConvexHull2D hull = generator.generate(points);<a name="line.100"></a>
<span class="sourceLineNo">101</span>        Assert.assertTrue(hull.getVertices().length == 1);<a name="line.101"></a>
<span class="sourceLineNo">102</span>    }<a name="line.102"></a>
<span class="sourceLineNo">103</span><a name="line.103"></a>
<span class="sourceLineNo">104</span>    @Test<a name="line.104"></a>
<span class="sourceLineNo">105</span>    public void testConvexHull() {<a name="line.105"></a>
<span class="sourceLineNo">106</span>        // execute 100 random variations<a name="line.106"></a>
<span class="sourceLineNo">107</span>        for (int i = 0; i &lt; 100; i++) {<a name="line.107"></a>
<span class="sourceLineNo">108</span>            // randomize the size from 4 to 100<a name="line.108"></a>
<span class="sourceLineNo">109</span>            int size = (int) FastMath.floor(random.nextDouble() * 96.0 + 4.0);<a name="line.109"></a>
<span class="sourceLineNo">110</span><a name="line.110"></a>
<span class="sourceLineNo">111</span>            List&lt;Vector2D&gt; points = createRandomPoints(size);<a name="line.111"></a>
<span class="sourceLineNo">112</span>            ConvexHull2D hull = generator.generate(reducePoints(points));<a name="line.112"></a>
<span class="sourceLineNo">113</span>            checkConvexHull(points, hull);<a name="line.113"></a>
<span class="sourceLineNo">114</span>        }<a name="line.114"></a>
<span class="sourceLineNo">115</span>    }<a name="line.115"></a>
<span class="sourceLineNo">116</span><a name="line.116"></a>
<span class="sourceLineNo">117</span>    @Test<a name="line.117"></a>
<span class="sourceLineNo">118</span>    public void testCollinearPoints() {<a name="line.118"></a>
<span class="sourceLineNo">119</span>        final Collection&lt;Vector2D&gt; points = new ArrayList&lt;Vector2D&gt;();<a name="line.119"></a>
<span class="sourceLineNo">120</span>        points.add(new Vector2D(1, 1));<a name="line.120"></a>
<span class="sourceLineNo">121</span>        points.add(new Vector2D(2, 2));<a name="line.121"></a>
<span class="sourceLineNo">122</span>        points.add(new Vector2D(2, 4));<a name="line.122"></a>
<span class="sourceLineNo">123</span>        points.add(new Vector2D(4, 1));<a name="line.123"></a>
<span class="sourceLineNo">124</span>        points.add(new Vector2D(10, 1));<a name="line.124"></a>
<span class="sourceLineNo">125</span><a name="line.125"></a>
<span class="sourceLineNo">126</span>        final ConvexHull2D hull = generator.generate(points);<a name="line.126"></a>
<span class="sourceLineNo">127</span>        checkConvexHull(points, hull);<a name="line.127"></a>
<span class="sourceLineNo">128</span>    }<a name="line.128"></a>
<span class="sourceLineNo">129</span><a name="line.129"></a>
<span class="sourceLineNo">130</span>    @Test<a name="line.130"></a>
<span class="sourceLineNo">131</span>    public void testCollinearPointsReverse() {<a name="line.131"></a>
<span class="sourceLineNo">132</span>        final Collection&lt;Vector2D&gt; points = new ArrayList&lt;Vector2D&gt;();<a name="line.132"></a>
<span class="sourceLineNo">133</span>        points.add(new Vector2D(1, 1));<a name="line.133"></a>
<span class="sourceLineNo">134</span>        points.add(new Vector2D(2, 2));<a name="line.134"></a>
<span class="sourceLineNo">135</span>        points.add(new Vector2D(2, 4));<a name="line.135"></a>
<span class="sourceLineNo">136</span>        points.add(new Vector2D(10, 1));<a name="line.136"></a>
<span class="sourceLineNo">137</span>        points.add(new Vector2D(4, 1));<a name="line.137"></a>
<span class="sourceLineNo">138</span><a name="line.138"></a>
<span class="sourceLineNo">139</span>        final ConvexHull2D hull = generator.generate(points);<a name="line.139"></a>
<span class="sourceLineNo">140</span>        checkConvexHull(points, hull);<a name="line.140"></a>
<span class="sourceLineNo">141</span>    }<a name="line.141"></a>
<span class="sourceLineNo">142</span><a name="line.142"></a>
<span class="sourceLineNo">143</span>    @Test<a name="line.143"></a>
<span class="sourceLineNo">144</span>    public void testCollinearPointsIncluded() {<a name="line.144"></a>
<span class="sourceLineNo">145</span>        final Collection&lt;Vector2D&gt; points = new ArrayList&lt;Vector2D&gt;();<a name="line.145"></a>
<span class="sourceLineNo">146</span>        points.add(new Vector2D(1, 1));<a name="line.146"></a>
<span class="sourceLineNo">147</span>        points.add(new Vector2D(2, 2));<a name="line.147"></a>
<span class="sourceLineNo">148</span>        points.add(new Vector2D(2, 4));<a name="line.148"></a>
<span class="sourceLineNo">149</span>        points.add(new Vector2D(4, 1));<a name="line.149"></a>
<span class="sourceLineNo">150</span>        points.add(new Vector2D(10, 1));<a name="line.150"></a>
<span class="sourceLineNo">151</span><a name="line.151"></a>
<span class="sourceLineNo">152</span>        final ConvexHull2D hull = createConvexHullGenerator(true).generate(points);<a name="line.152"></a>
<span class="sourceLineNo">153</span>        checkConvexHull(points, hull, true);<a name="line.153"></a>
<span class="sourceLineNo">154</span>    }<a name="line.154"></a>
<span class="sourceLineNo">155</span><a name="line.155"></a>
<span class="sourceLineNo">156</span>    @Test<a name="line.156"></a>
<span class="sourceLineNo">157</span>    public void testCollinearPointsIncludedReverse() {<a name="line.157"></a>
<span class="sourceLineNo">158</span>        final Collection&lt;Vector2D&gt; points = new ArrayList&lt;Vector2D&gt;();<a name="line.158"></a>
<span class="sourceLineNo">159</span>        points.add(new Vector2D(1, 1));<a name="line.159"></a>
<span class="sourceLineNo">160</span>        points.add(new Vector2D(2, 2));<a name="line.160"></a>
<span class="sourceLineNo">161</span>        points.add(new Vector2D(2, 4));<a name="line.161"></a>
<span class="sourceLineNo">162</span>        points.add(new Vector2D(10, 1));<a name="line.162"></a>
<span class="sourceLineNo">163</span>        points.add(new Vector2D(4, 1));<a name="line.163"></a>
<span class="sourceLineNo">164</span><a name="line.164"></a>
<span class="sourceLineNo">165</span>        final ConvexHull2D hull = createConvexHullGenerator(true).generate(points);<a name="line.165"></a>
<span class="sourceLineNo">166</span>        checkConvexHull(points, hull, true);<a name="line.166"></a>
<span class="sourceLineNo">167</span>    }<a name="line.167"></a>
<span class="sourceLineNo">168</span><a name="line.168"></a>
<span class="sourceLineNo">169</span>    @Test<a name="line.169"></a>
<span class="sourceLineNo">170</span>    public void testIdenticalPoints() {<a name="line.170"></a>
<span class="sourceLineNo">171</span>        final Collection&lt;Vector2D&gt; points = new ArrayList&lt;Vector2D&gt;();<a name="line.171"></a>
<span class="sourceLineNo">172</span>        points.add(new Vector2D(1, 1));<a name="line.172"></a>
<span class="sourceLineNo">173</span>        points.add(new Vector2D(2, 2));<a name="line.173"></a>
<span class="sourceLineNo">174</span>        points.add(new Vector2D(2, 4));<a name="line.174"></a>
<span class="sourceLineNo">175</span>        points.add(new Vector2D(4, 1));<a name="line.175"></a>
<span class="sourceLineNo">176</span>        points.add(new Vector2D(1, 1));<a name="line.176"></a>
<span class="sourceLineNo">177</span><a name="line.177"></a>
<span class="sourceLineNo">178</span>        final ConvexHull2D hull = generator.generate(points);<a name="line.178"></a>
<span class="sourceLineNo">179</span>        checkConvexHull(points, hull);<a name="line.179"></a>
<span class="sourceLineNo">180</span>    }<a name="line.180"></a>
<span class="sourceLineNo">181</span><a name="line.181"></a>
<span class="sourceLineNo">182</span>    @Test<a name="line.182"></a>
<span class="sourceLineNo">183</span>    public void testIdenticalPoints2() {<a name="line.183"></a>
<span class="sourceLineNo">184</span>        final Collection&lt;Vector2D&gt; points = new ArrayList&lt;Vector2D&gt;();<a name="line.184"></a>
<span class="sourceLineNo">185</span>        points.add(new Vector2D(1, 1));<a name="line.185"></a>
<span class="sourceLineNo">186</span>        points.add(new Vector2D(2, 2));<a name="line.186"></a>
<span class="sourceLineNo">187</span>        points.add(new Vector2D(2, 4));<a name="line.187"></a>
<span class="sourceLineNo">188</span>        points.add(new Vector2D(4, 1));<a name="line.188"></a>
<span class="sourceLineNo">189</span>        points.add(new Vector2D(1, 1));<a name="line.189"></a>
<span class="sourceLineNo">190</span><a name="line.190"></a>
<span class="sourceLineNo">191</span>        final ConvexHull2D hull = createConvexHullGenerator(true).generate(points);<a name="line.191"></a>
<span class="sourceLineNo">192</span>        checkConvexHull(points, hull, true);<a name="line.192"></a>
<span class="sourceLineNo">193</span>    }<a name="line.193"></a>
<span class="sourceLineNo">194</span><a name="line.194"></a>
<span class="sourceLineNo">195</span>    @Test<a name="line.195"></a>
<span class="sourceLineNo">196</span>    public void testClosePoints() {<a name="line.196"></a>
<span class="sourceLineNo">197</span>        final Collection&lt;Vector2D&gt; points = new ArrayList&lt;Vector2D&gt;();<a name="line.197"></a>
<span class="sourceLineNo">198</span>        points.add(new Vector2D(1, 1));<a name="line.198"></a>
<span class="sourceLineNo">199</span>        points.add(new Vector2D(2, 2));<a name="line.199"></a>
<span class="sourceLineNo">200</span>        points.add(new Vector2D(2, 4));<a name="line.200"></a>
<span class="sourceLineNo">201</span>        points.add(new Vector2D(4, 1));<a name="line.201"></a>
<span class="sourceLineNo">202</span>        points.add(new Vector2D(1.00001, 1));<a name="line.202"></a>
<span class="sourceLineNo">203</span><a name="line.203"></a>
<span class="sourceLineNo">204</span>        final ConvexHull2D hull = generator.generate(points);<a name="line.204"></a>
<span class="sourceLineNo">205</span>        checkConvexHull(points, hull);<a name="line.205"></a>
<span class="sourceLineNo">206</span>    }<a name="line.206"></a>
<span class="sourceLineNo">207</span><a name="line.207"></a>
<span class="sourceLineNo">208</span>    @Test<a name="line.208"></a>
<span class="sourceLineNo">209</span>    public void testCollinearPointOnExistingBoundary() {<a name="line.209"></a>
<span class="sourceLineNo">210</span>        // MATH-1135: check that collinear points on the hull are handled correctly<a name="line.210"></a>
<span class="sourceLineNo">211</span>        //            when only a minimal hull shall be constructed<a name="line.211"></a>
<span class="sourceLineNo">212</span>        final Collection&lt;Vector2D&gt; points = new ArrayList&lt;Vector2D&gt;();<a name="line.212"></a>
<span class="sourceLineNo">213</span>        points.add(new Vector2D(7.3152, 34.7472));<a name="line.213"></a>
<span class="sourceLineNo">214</span>        points.add(new Vector2D(6.400799999999997, 34.747199999999985));<a name="line.214"></a>
<span class="sourceLineNo">215</span>        points.add(new Vector2D(5.486399999999997, 34.7472));<a name="line.215"></a>
<span class="sourceLineNo">216</span>        points.add(new Vector2D(4.876799999999999, 34.7472));<a name="line.216"></a>
<span class="sourceLineNo">217</span>        points.add(new Vector2D(4.876799999999999, 34.1376));<a name="line.217"></a>
<span class="sourceLineNo">218</span>        points.add(new Vector2D(4.876799999999999, 30.48));<a name="line.218"></a>
<span class="sourceLineNo">219</span>        points.add(new Vector2D(6.0959999999999965, 30.48));<a name="line.219"></a>
<span class="sourceLineNo">220</span>        points.add(new Vector2D(6.0959999999999965, 34.1376));<a name="line.220"></a>
<span class="sourceLineNo">221</span>        points.add(new Vector2D(7.315199999999996, 34.1376));<a name="line.221"></a>
<span class="sourceLineNo">222</span>        points.add(new Vector2D(7.3152, 30.48));<a name="line.222"></a>
<span class="sourceLineNo">223</span><a name="line.223"></a>
<span class="sourceLineNo">224</span>        final ConvexHull2D hull = createConvexHullGenerator(false).generate(points);<a name="line.224"></a>
<span class="sourceLineNo">225</span>        checkConvexHull(points, hull);<a name="line.225"></a>
<span class="sourceLineNo">226</span>    }<a name="line.226"></a>
<span class="sourceLineNo">227</span><a name="line.227"></a>
<span class="sourceLineNo">228</span>    @Test<a name="line.228"></a>
<span class="sourceLineNo">229</span>    public void testCollinearPointsInAnyOrder() {<a name="line.229"></a>
<span class="sourceLineNo">230</span>        // MATH-1148: collinear points on the hull might be in any order<a name="line.230"></a>
<span class="sourceLineNo">231</span>        //            make sure that they are processed in the proper order<a name="line.231"></a>
<span class="sourceLineNo">232</span>        //            for each algorithm.<a name="line.232"></a>
<span class="sourceLineNo">233</span><a name="line.233"></a>
<span class="sourceLineNo">234</span>        List&lt;Vector2D&gt; points = new ArrayList&lt;Vector2D&gt;();<a name="line.234"></a>
<span class="sourceLineNo">235</span><a name="line.235"></a>
<span class="sourceLineNo">236</span>        // first case: 3 points are collinear<a name="line.236"></a>
<span class="sourceLineNo">237</span>        points.add(new Vector2D(16.078200000000184, -36.52519999989808));<a name="line.237"></a>
<span class="sourceLineNo">238</span>        points.add(new Vector2D(19.164300000000186, -36.52519999989808));<a name="line.238"></a>
<span class="sourceLineNo">239</span>        points.add(new Vector2D(19.1643, -25.28136477910407));<a name="line.239"></a>
<span class="sourceLineNo">240</span>        points.add(new Vector2D(19.1643, -17.678400000004157));<a name="line.240"></a>
<span class="sourceLineNo">241</span><a name="line.241"></a>
<span class="sourceLineNo">242</span>        ConvexHull2D hull = createConvexHullGenerator(false).generate(points);<a name="line.242"></a>
<span class="sourceLineNo">243</span>        checkConvexHull(points, hull);<a name="line.243"></a>
<span class="sourceLineNo">244</span><a name="line.244"></a>
<span class="sourceLineNo">245</span>        hull = createConvexHullGenerator(true).generate(points);<a name="line.245"></a>
<span class="sourceLineNo">246</span>        checkConvexHull(points, hull, true);<a name="line.246"></a>
<span class="sourceLineNo">247</span>        <a name="line.247"></a>
<span class="sourceLineNo">248</span>        points.clear();<a name="line.248"></a>
<span class="sourceLineNo">249</span>        <a name="line.249"></a>
<span class="sourceLineNo">250</span>        // second case: multiple points are collinear<a name="line.250"></a>
<span class="sourceLineNo">251</span>        points.add(new Vector2D(0, -29.959696875));<a name="line.251"></a>
<span class="sourceLineNo">252</span>        points.add(new Vector2D(0, -31.621809375));<a name="line.252"></a>
<span class="sourceLineNo">253</span>        points.add(new Vector2D(0, -28.435696875));<a name="line.253"></a>
<span class="sourceLineNo">254</span>        points.add(new Vector2D(0, -33.145809375));<a name="line.254"></a>
<span class="sourceLineNo">255</span>        points.add(new Vector2D(3.048, -33.145809375));<a name="line.255"></a>
<span class="sourceLineNo">256</span>        points.add(new Vector2D(3.048, -31.621809375));<a name="line.256"></a>
<span class="sourceLineNo">257</span>        points.add(new Vector2D(3.048, -29.959696875));<a name="line.257"></a>
<span class="sourceLineNo">258</span>        points.add(new Vector2D(4.572, -33.145809375));<a name="line.258"></a>
<span class="sourceLineNo">259</span>        points.add(new Vector2D(4.572, -28.435696875));<a name="line.259"></a>
<span class="sourceLineNo">260</span><a name="line.260"></a>
<span class="sourceLineNo">261</span>        hull = createConvexHullGenerator(false).generate(points);<a name="line.261"></a>
<span class="sourceLineNo">262</span>        checkConvexHull(points, hull);<a name="line.262"></a>
<span class="sourceLineNo">263</span><a name="line.263"></a>
<span class="sourceLineNo">264</span>        hull = createConvexHullGenerator(true).generate(points);<a name="line.264"></a>
<span class="sourceLineNo">265</span>        checkConvexHull(points, hull, true);<a name="line.265"></a>
<span class="sourceLineNo">266</span>    }<a name="line.266"></a>
<span class="sourceLineNo">267</span><a name="line.267"></a>
<span class="sourceLineNo">268</span>    @Test<a name="line.268"></a>
<span class="sourceLineNo">269</span>    public void testIssue1123() {<a name="line.269"></a>
<span class="sourceLineNo">270</span><a name="line.270"></a>
<span class="sourceLineNo">271</span>        List&lt;Vector2D&gt; points = new ArrayList&lt;Vector2D&gt;();<a name="line.271"></a>
<span class="sourceLineNo">272</span><a name="line.272"></a>
<span class="sourceLineNo">273</span>        int[][] data = new int[][] { { -11, -1 }, { -11, 0 }, { -11, 1 },<a name="line.273"></a>
<span class="sourceLineNo">274</span>                { -10, -3 }, { -10, -2 }, { -10, -1 }, { -10, 0 }, { -10, 1 },<a name="line.274"></a>
<span class="sourceLineNo">275</span>                { -10, 2 }, { -10, 3 }, { -9, -4 }, { -9, -3 }, { -9, -2 },<a name="line.275"></a>
<span class="sourceLineNo">276</span>                { -9, -1 }, { -9, 0 }, { -9, 1 }, { -9, 2 }, { -9, 3 },<a name="line.276"></a>
<span class="sourceLineNo">277</span>                { -9, 4 }, { -8, -5 }, { -8, -4 }, { -8, -3 }, { -8, -2 },<a name="line.277"></a>
<span class="sourceLineNo">278</span>                { -8, -1 }, { -8, 0 }, { -8, 1 }, { -8, 2 }, { -8, 3 },<a name="line.278"></a>
<span class="sourceLineNo">279</span>                { -8, 4 }, { -8, 5 }, { -7, -6 }, { -7, -5 }, { -7, -4 },<a name="line.279"></a>
<span class="sourceLineNo">280</span>                { -7, -3 }, { -7, -2 }, { -7, -1 }, { -7, 0 }, { -7, 1 },<a name="line.280"></a>
<span class="sourceLineNo">281</span>                { -7, 2 }, { -7, 3 }, { -7, 4 }, { -7, 5 }, { -7, 6 },<a name="line.281"></a>
<span class="sourceLineNo">282</span>                { -6, -7 }, { -6, -6 }, { -6, -5 }, { -6, -4 }, { -6, -3 },<a name="line.282"></a>
<span class="sourceLineNo">283</span>                { -6, -2 }, { -6, -1 }, { -6, 0 }, { -6, 1 }, { -6, 2 },<a name="line.283"></a>
<span class="sourceLineNo">284</span>                { -6, 3 }, { -6, 4 }, { -6, 5 }, { -6, 6 }, { -6, 7 },<a name="line.284"></a>
<span class="sourceLineNo">285</span>                { -5, -7 }, { -5, -6 }, { -5, -5 }, { -5, -4 }, { -5, -3 },<a name="line.285"></a>
<span class="sourceLineNo">286</span>                { -5, -2 }, { -5, 4 }, { -5, 5 }, { -5, 6 }, { -5, 7 },<a name="line.286"></a>
<span class="sourceLineNo">287</span>                { -4, -7 }, { -4, -6 }, { -4, -5 }, { -4, -4 }, { -4, -3 },<a name="line.287"></a>
<span class="sourceLineNo">288</span>                { -4, -2 }, { -4, 4 }, { -4, 5 }, { -4, 6 }, { -4, 7 },<a name="line.288"></a>
<span class="sourceLineNo">289</span>                { -3, -8 }, { -3, -7 }, { -3, -6 }, { -3, -5 }, { -3, -4 },<a name="line.289"></a>
<span class="sourceLineNo">290</span>                { -3, -3 }, { -3, -2 }, { -3, 4 }, { -3, 5 }, { -3, 6 },<a name="line.290"></a>
<span class="sourceLineNo">291</span>                { -3, 7 }, { -3, 8 }, { -2, -8 }, { -2, -7 }, { -2, -6 },<a name="line.291"></a>
<span class="sourceLineNo">292</span>                { -2, -5 }, { -2, -4 }, { -2, -3 }, { -2, -2 }, { -2, 4 },<a name="line.292"></a>
<span class="sourceLineNo">293</span>                { -2, 5 }, { -2, 6 }, { -2, 7 }, { -2, 8 }, { -1, -8 },<a name="line.293"></a>
<span class="sourceLineNo">294</span>                { -1, -7 }, { -1, -6 }, { -1, -5 }, { -1, -4 }, { -1, -3 },<a name="line.294"></a>
<span class="sourceLineNo">295</span>                { -1, -2 }, { -1, 4 }, { -1, 5 }, { -1, 6 }, { -1, 7 },<a name="line.295"></a>
<span class="sourceLineNo">296</span>                { -1, 8 }, { 0, -8 }, { 0, -7 }, { 0, -6 }, { 0, -5 },<a name="line.296"></a>
<span class="sourceLineNo">297</span>                { 0, -4 }, { 0, -3 }, { 0, -2 }, { 0, 4 }, { 0, 5 }, { 0, 6 },<a name="line.297"></a>
<span class="sourceLineNo">298</span>                { 0, 7 }, { 0, 8 }, { 1, -8 }, { 1, -7 }, { 1, -6 }, { 1, -5 },<a name="line.298"></a>
<span class="sourceLineNo">299</span>                { 1, -4 }, { 1, -3 }, { 1, -2 }, { 1, -1 }, { 1, 0 }, { 1, 1 },<a name="line.299"></a>
<span class="sourceLineNo">300</span>                { 1, 2 }, { 1, 3 }, { 1, 4 }, { 1, 5 }, { 1, 6 }, { 1, 7 },<a name="line.300"></a>
<span class="sourceLineNo">301</span>                { 1, 8 }, { 2, -8 }, { 2, -7 }, { 2, -6 }, { 2, -5 },<a name="line.301"></a>
<span class="sourceLineNo">302</span>                { 2, -4 }, { 2, -3 }, { 2, -2 }, { 2, -1 }, { 2, 0 }, { 2, 1 },<a name="line.302"></a>
<span class="sourceLineNo">303</span>                { 2, 2 }, { 2, 3 }, { 2, 4 }, { 2, 5 }, { 2, 6 }, { 2, 7 },<a name="line.303"></a>
<span class="sourceLineNo">304</span>                { 2, 8 }, { 3, -8 }, { 3, -7 }, { 3, -6 }, { 3, -5 },<a name="line.304"></a>
<span class="sourceLineNo">305</span>                { 3, -4 }, { 3, -3 }, { 3, -2 }, { 3, -1 }, { 3, 0 }, { 3, 1 },<a name="line.305"></a>
<span class="sourceLineNo">306</span>                { 3, 2 }, { 3, 3 }, { 3, 4 }, { 3, 5 }, { 3, 6 }, { 3, 7 },<a name="line.306"></a>
<span class="sourceLineNo">307</span>                { 3, 8 }, { 4, -7 }, { 4, -6 }, { 4, -5 }, { 4, -4 },<a name="line.307"></a>
<span class="sourceLineNo">308</span>                { 4, -3 }, { 4, -2 }, { 4, -1 }, { 4, 0 }, { 4, 1 }, { 4, 2 },<a name="line.308"></a>
<span class="sourceLineNo">309</span>                { 4, 3 }, { 4, 4 }, { 4, 5 }, { 4, 6 }, { 4, 7 }, { 5, -7 },<a name="line.309"></a>
<span class="sourceLineNo">310</span>                { 5, -6 }, { 5, -5 }, { 5, -4 }, { 5, -3 }, { 5, -2 },<a name="line.310"></a>
<span class="sourceLineNo">311</span>                { 5, -1 }, { 5, 0 }, { 5, 1 }, { 5, 2 }, { 5, 3 }, { 5, 4 },<a name="line.311"></a>
<span class="sourceLineNo">312</span>                { 5, 5 }, { 5, 6 }, { 5, 7 }, { 6, -7 }, { 6, -6 }, { 6, -5 },<a name="line.312"></a>
<span class="sourceLineNo">313</span>                { 6, -4 }, { 6, -3 }, { 6, -2 }, { 6, -1 }, { 6, 0 }, { 6, 1 },<a name="line.313"></a>
<span class="sourceLineNo">314</span>                { 6, 2 }, { 6, 3 }, { 6, 4 }, { 6, 5 }, { 6, 6 }, { 6, 7 },<a name="line.314"></a>
<span class="sourceLineNo">315</span>                { 7, -6 }, { 7, -5 }, { 7, -4 }, { 7, -3 }, { 7, -2 },<a name="line.315"></a>
<span class="sourceLineNo">316</span>                { 7, -1 }, { 7, 0 }, { 7, 1 }, { 7, 2 }, { 7, 3 }, { 7, 4 },<a name="line.316"></a>
<span class="sourceLineNo">317</span>                { 7, 5 }, { 7, 6 }, { 8, -5 }, { 8, -4 }, { 8, -3 }, { 8, -2 },<a name="line.317"></a>
<span class="sourceLineNo">318</span>                { 8, -1 }, { 8, 0 }, { 8, 1 }, { 8, 2 }, { 8, 3 }, { 8, 4 },<a name="line.318"></a>
<span class="sourceLineNo">319</span>                { 8, 5 }, { 9, -4 }, { 9, -3 }, { 9, -2 }, { 9, -1 }, { 9, 0 },<a name="line.319"></a>
<span class="sourceLineNo">320</span>                { 9, 1 }, { 9, 2 }, { 9, 3 }, { 9, 4 }, { 10, -3 }, { 10, -2 },<a name="line.320"></a>
<span class="sourceLineNo">321</span>                { 10, -1 }, { 10, 0 }, { 10, 1 }, { 10, 2 }, { 10, 3 },<a name="line.321"></a>
<span class="sourceLineNo">322</span>                { 11, -1 }, { 11, 0 }, { 11, 1 } };<a name="line.322"></a>
<span class="sourceLineNo">323</span><a name="line.323"></a>
<span class="sourceLineNo">324</span>        for (int[] line : data) {<a name="line.324"></a>
<span class="sourceLineNo">325</span>            points.add(new Vector2D(line[0], line[1]));<a name="line.325"></a>
<span class="sourceLineNo">326</span>        }<a name="line.326"></a>
<span class="sourceLineNo">327</span><a name="line.327"></a>
<span class="sourceLineNo">328</span>        Vector2D[] referenceHull = new Vector2D[] { <a name="line.328"></a>
<span class="sourceLineNo">329</span>            new Vector2D(-11.0, -1.0),<a name="line.329"></a>
<span class="sourceLineNo">330</span>            new Vector2D(-10.0, -3.0),<a name="line.330"></a>
<span class="sourceLineNo">331</span>            new Vector2D( -6.0, -7.0),<a name="line.331"></a>
<span class="sourceLineNo">332</span>            new Vector2D( -3.0, -8.0),<a name="line.332"></a>
<span class="sourceLineNo">333</span>            new Vector2D(  3.0, -8.0),<a name="line.333"></a>
<span class="sourceLineNo">334</span>            new Vector2D(  6.0, -7.0),<a name="line.334"></a>
<span class="sourceLineNo">335</span>            new Vector2D( 10.0, -3.0),<a name="line.335"></a>
<span class="sourceLineNo">336</span>            new Vector2D( 11.0, -1.0),<a name="line.336"></a>
<span class="sourceLineNo">337</span>            new Vector2D( 11.0,  1.0),<a name="line.337"></a>
<span class="sourceLineNo">338</span>            new Vector2D( 10.0,  3.0),<a name="line.338"></a>
<span class="sourceLineNo">339</span>            new Vector2D(  6.0,  7.0),<a name="line.339"></a>
<span class="sourceLineNo">340</span>            new Vector2D(  3.0,  8.0),<a name="line.340"></a>
<span class="sourceLineNo">341</span>            new Vector2D( -3.0,  8.0),<a name="line.341"></a>
<span class="sourceLineNo">342</span>            new Vector2D( -6.0,  7.0),<a name="line.342"></a>
<span class="sourceLineNo">343</span>            new Vector2D(-10.0,  3.0),<a name="line.343"></a>
<span class="sourceLineNo">344</span>            new Vector2D(-11.0,  1.0),<a name="line.344"></a>
<span class="sourceLineNo">345</span>        };<a name="line.345"></a>
<span class="sourceLineNo">346</span><a name="line.346"></a>
<span class="sourceLineNo">347</span>        ConvexHull2D convHull = generator.generate(points);<a name="line.347"></a>
<span class="sourceLineNo">348</span>        Region&lt;Euclidean2D&gt; hullRegion = convHull.createRegion();<a name="line.348"></a>
<span class="sourceLineNo">349</span><a name="line.349"></a>
<span class="sourceLineNo">350</span>        Assert.assertEquals(274.0, hullRegion.getSize(), 1.0e-12);<a name="line.350"></a>
<span class="sourceLineNo">351</span>        double perimeter = 0;<a name="line.351"></a>
<span class="sourceLineNo">352</span>        for (int i = 0; i &lt; referenceHull.length; ++i) {<a name="line.352"></a>
<span class="sourceLineNo">353</span>            perimeter += Vector2D.distance(referenceHull[i],<a name="line.353"></a>
<span class="sourceLineNo">354</span>                                           referenceHull[(i + 1) % referenceHull.length]);<a name="line.354"></a>
<span class="sourceLineNo">355</span>        }<a name="line.355"></a>
<span class="sourceLineNo">356</span>        Assert.assertEquals(perimeter, hullRegion.getBoundarySize(), 1.0e-12);<a name="line.356"></a>
<span class="sourceLineNo">357</span><a name="line.357"></a>
<span class="sourceLineNo">358</span>        for (int i = 0; i &lt; referenceHull.length; ++i) {<a name="line.358"></a>
<span class="sourceLineNo">359</span>            Assert.assertEquals(Location.BOUNDARY, hullRegion.checkPoint(referenceHull[i]));<a name="line.359"></a>
<span class="sourceLineNo">360</span>        }<a name="line.360"></a>
<span class="sourceLineNo">361</span><a name="line.361"></a>
<span class="sourceLineNo">362</span>    }<a name="line.362"></a>
<span class="sourceLineNo">363</span><a name="line.363"></a>
<span class="sourceLineNo">364</span>    // ------------------------------------------------------------------------------<a name="line.364"></a>
<span class="sourceLineNo">365</span>    <a name="line.365"></a>
<span class="sourceLineNo">366</span>    protected final List&lt;Vector2D&gt; createRandomPoints(int size) {<a name="line.366"></a>
<span class="sourceLineNo">367</span>        // create the cloud container<a name="line.367"></a>
<span class="sourceLineNo">368</span>        List&lt;Vector2D&gt; points = new ArrayList&lt;Vector2D&gt;(size);<a name="line.368"></a>
<span class="sourceLineNo">369</span>        // fill the cloud with a random distribution of points<a name="line.369"></a>
<span class="sourceLineNo">370</span>        for (int i = 0; i &lt; size; i++) {<a name="line.370"></a>
<span class="sourceLineNo">371</span>            points.add(new Vector2D(random.nextDouble() * 2.0 - 1.0, random.nextDouble() * 2.0 - 1.0));<a name="line.371"></a>
<span class="sourceLineNo">372</span>        }<a name="line.372"></a>
<span class="sourceLineNo">373</span>        return points;<a name="line.373"></a>
<span class="sourceLineNo">374</span>    }<a name="line.374"></a>
<span class="sourceLineNo">375</span><a name="line.375"></a>
<span class="sourceLineNo">376</span>    protected final void checkConvexHull(final Collection&lt;Vector2D&gt; points, final ConvexHull2D hull) {<a name="line.376"></a>
<span class="sourceLineNo">377</span>        checkConvexHull(points, hull, false);<a name="line.377"></a>
<span class="sourceLineNo">378</span>    }<a name="line.378"></a>
<span class="sourceLineNo">379</span><a name="line.379"></a>
<span class="sourceLineNo">380</span>    protected final void checkConvexHull(final Collection&lt;Vector2D&gt; points, final ConvexHull2D hull,<a name="line.380"></a>
<span class="sourceLineNo">381</span>                                         final boolean includesCollinearPoints) {<a name="line.381"></a>
<span class="sourceLineNo">382</span>        checkConvexHull(points, hull, includesCollinearPoints, 1e-10);<a name="line.382"></a>
<span class="sourceLineNo">383</span>    }<a name="line.383"></a>
<span class="sourceLineNo">384</span><a name="line.384"></a>
<span class="sourceLineNo">385</span>    protected final void checkConvexHull(final Collection&lt;Vector2D&gt; points, final ConvexHull2D hull,<a name="line.385"></a>
<span class="sourceLineNo">386</span>                                         final boolean includesCollinearPoints, final double tolerance) {<a name="line.386"></a>
<span class="sourceLineNo">387</span>        Assert.assertNotNull(hull);<a name="line.387"></a>
<span class="sourceLineNo">388</span>        Assert.assertTrue(isConvex(hull, includesCollinearPoints, tolerance));<a name="line.388"></a>
<span class="sourceLineNo">389</span>        checkPointsInsideHullRegion(points, hull, includesCollinearPoints);<a name="line.389"></a>
<span class="sourceLineNo">390</span>    }<a name="line.390"></a>
<span class="sourceLineNo">391</span><a name="line.391"></a>
<span class="sourceLineNo">392</span>    // verify that the constructed hull is really convex<a name="line.392"></a>
<span class="sourceLineNo">393</span>    protected final boolean isConvex(final ConvexHull2D hull, final boolean includesCollinearPoints,<a name="line.393"></a>
<span class="sourceLineNo">394</span>                                     final double tolerance) {<a name="line.394"></a>
<span class="sourceLineNo">395</span><a name="line.395"></a>
<span class="sourceLineNo">396</span>        final Vector2D[] points = hull.getVertices();<a name="line.396"></a>
<span class="sourceLineNo">397</span>        int sign = 0;<a name="line.397"></a>
<span class="sourceLineNo">398</span><a name="line.398"></a>
<span class="sourceLineNo">399</span>        for (int i = 0; i &lt; points.length; i++) {<a name="line.399"></a>
<span class="sourceLineNo">400</span>            Vector2D p1 = points[i == 0 ? points.length - 1 : i - 1];<a name="line.400"></a>
<span class="sourceLineNo">401</span>            Vector2D p2 = points[i];<a name="line.401"></a>
<span class="sourceLineNo">402</span>            Vector2D p3 = points[i == points.length - 1 ? 0 : i + 1];<a name="line.402"></a>
<span class="sourceLineNo">403</span><a name="line.403"></a>
<span class="sourceLineNo">404</span>            Vector2D d1 = p2.subtract(p1);<a name="line.404"></a>
<span class="sourceLineNo">405</span>            Vector2D d2 = p3.subtract(p2);<a name="line.405"></a>
<span class="sourceLineNo">406</span><a name="line.406"></a>
<span class="sourceLineNo">407</span>            Assert.assertTrue(d1.getNorm() &gt; 1e-10);<a name="line.407"></a>
<span class="sourceLineNo">408</span>            Assert.assertTrue(d2.getNorm() &gt; 1e-10);<a name="line.408"></a>
<span class="sourceLineNo">409</span><a name="line.409"></a>
<span class="sourceLineNo">410</span>            final double cross = MathArrays.linearCombination(d1.getX(), d2.getY(), -d1.getY(), d2.getX());<a name="line.410"></a>
<span class="sourceLineNo">411</span>            final int cmp = Precision.compareTo(cross, 0.0, tolerance);<a name="line.411"></a>
<span class="sourceLineNo">412</span><a name="line.412"></a>
<span class="sourceLineNo">413</span>            if (sign != 0 &amp;&amp; cmp != sign) {<a name="line.413"></a>
<span class="sourceLineNo">414</span>                if (includesCollinearPoints &amp;&amp; cmp == 0) {<a name="line.414"></a>
<span class="sourceLineNo">415</span>                    // in case of collinear points the cross product will be zero<a name="line.415"></a>
<span class="sourceLineNo">416</span>                } else {<a name="line.416"></a>
<span class="sourceLineNo">417</span>                    return false;<a name="line.417"></a>
<span class="sourceLineNo">418</span>                }<a name="line.418"></a>
<span class="sourceLineNo">419</span>            }<a name="line.419"></a>
<span class="sourceLineNo">420</span>            <a name="line.420"></a>
<span class="sourceLineNo">421</span>            sign = cmp;<a name="line.421"></a>
<span class="sourceLineNo">422</span>        }<a name="line.422"></a>
<span class="sourceLineNo">423</span>        <a name="line.423"></a>
<span class="sourceLineNo">424</span>        return true;<a name="line.424"></a>
<span class="sourceLineNo">425</span>    }<a name="line.425"></a>
<span class="sourceLineNo">426</span>    <a name="line.426"></a>
<span class="sourceLineNo">427</span>    // verify that all points are inside the convex hull region<a name="line.427"></a>
<span class="sourceLineNo">428</span>    protected final void checkPointsInsideHullRegion(final Collection&lt;Vector2D&gt; points,<a name="line.428"></a>
<span class="sourceLineNo">429</span>                                                     final ConvexHull2D hull,<a name="line.429"></a>
<span class="sourceLineNo">430</span>                                                     final boolean includesCollinearPoints) {<a name="line.430"></a>
<span class="sourceLineNo">431</span><a name="line.431"></a>
<span class="sourceLineNo">432</span>        final Collection&lt;Vector2D&gt; hullVertices = Arrays.asList(hull.getVertices());<a name="line.432"></a>
<span class="sourceLineNo">433</span>        final Region&lt;Euclidean2D&gt; region = hull.createRegion();<a name="line.433"></a>
<span class="sourceLineNo">434</span><a name="line.434"></a>
<span class="sourceLineNo">435</span>        for (final Vector2D p : points) {<a name="line.435"></a>
<span class="sourceLineNo">436</span>            Location location = region.checkPoint(p);<a name="line.436"></a>
<span class="sourceLineNo">437</span>            Assert.assertTrue(location != Location.OUTSIDE);<a name="line.437"></a>
<span class="sourceLineNo">438</span><a name="line.438"></a>
<span class="sourceLineNo">439</span>            if (location == Location.BOUNDARY &amp;&amp; includesCollinearPoints) {<a name="line.439"></a>
<span class="sourceLineNo">440</span>                Assert.assertTrue(hullVertices.contains(p));<a name="line.440"></a>
<span class="sourceLineNo">441</span>            }<a name="line.441"></a>
<span class="sourceLineNo">442</span>        }<a name="line.442"></a>
<span class="sourceLineNo">443</span>    }<a name="line.443"></a>
<span class="sourceLineNo">444</span>}<a name="line.444"></a>




























































</pre>
</div>
</body>
</html>
