<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span>package org.apache.commons.math3.geometry.euclidean.twod;<a name="line.17"></a>
<span class="sourceLineNo">018</span><a name="line.18"></a>
<span class="sourceLineNo">019</span>import java.util.ArrayList;<a name="line.19"></a>
<span class="sourceLineNo">020</span>import java.util.Arrays;<a name="line.20"></a>
<span class="sourceLineNo">021</span>import java.util.List;<a name="line.21"></a>
<span class="sourceLineNo">022</span><a name="line.22"></a>
<span class="sourceLineNo">023</span>import org.apache.commons.math3.geometry.enclosing.EnclosingBall;<a name="line.23"></a>
<span class="sourceLineNo">024</span>import org.apache.commons.math3.random.RandomGenerator;<a name="line.24"></a>
<span class="sourceLineNo">025</span>import org.apache.commons.math3.random.UnitSphereRandomVectorGenerator;<a name="line.25"></a>
<span class="sourceLineNo">026</span>import org.apache.commons.math3.random.Well1024a;<a name="line.26"></a>
<span class="sourceLineNo">027</span>import org.junit.Assert;<a name="line.27"></a>
<span class="sourceLineNo">028</span>import org.junit.Test;<a name="line.28"></a>
<span class="sourceLineNo">029</span><a name="line.29"></a>
<span class="sourceLineNo">030</span><a name="line.30"></a>
<span class="sourceLineNo">031</span>public class DiskGeneratorTest {<a name="line.31"></a>
<span class="sourceLineNo">032</span><a name="line.32"></a>
<span class="sourceLineNo">033</span>    @Test<a name="line.33"></a>
<span class="sourceLineNo">034</span>    public void testSupport0Point() {<a name="line.34"></a>
<span class="sourceLineNo">035</span>        List&lt;Vector2D&gt; support = Arrays.asList(new Vector2D[0]);<a name="line.35"></a>
<span class="sourceLineNo">036</span>        EnclosingBall&lt;Euclidean2D, Vector2D&gt; disk = new DiskGenerator().ballOnSupport(support);<a name="line.36"></a>
<span class="sourceLineNo">037</span>        Assert.assertTrue(disk.getRadius() &lt; 0);<a name="line.37"></a>
<span class="sourceLineNo">038</span>        Assert.assertEquals(0, disk.getSupportSize());<a name="line.38"></a>
<span class="sourceLineNo">039</span>        Assert.assertEquals(0, disk.getSupport().length);<a name="line.39"></a>
<span class="sourceLineNo">040</span>    }<a name="line.40"></a>
<span class="sourceLineNo">041</span><a name="line.41"></a>
<span class="sourceLineNo">042</span>    @Test<a name="line.42"></a>
<span class="sourceLineNo">043</span>    public void testSupport1Point() {<a name="line.43"></a>
<span class="sourceLineNo">044</span>        List&lt;Vector2D&gt; support = Arrays.asList(new Vector2D(1, 2));<a name="line.44"></a>
<span class="sourceLineNo">045</span>        EnclosingBall&lt;Euclidean2D, Vector2D&gt; disk = new DiskGenerator().ballOnSupport(support);<a name="line.45"></a>
<span class="sourceLineNo">046</span>        Assert.assertEquals(0.0, disk.getRadius(), 1.0e-10);<a name="line.46"></a>
<span class="sourceLineNo">047</span>        Assert.assertTrue(disk.contains(support.get(0)));<a name="line.47"></a>
<span class="sourceLineNo">048</span>        Assert.assertTrue(disk.contains(support.get(0), 0.5));<a name="line.48"></a>
<span class="sourceLineNo">049</span>        Assert.assertFalse(disk.contains(new Vector2D(support.get(0).getX() + 0.1,<a name="line.49"></a>
<span class="sourceLineNo">050</span>                                                      support.get(0).getY() - 0.1),<a name="line.50"></a>
<span class="sourceLineNo">051</span>                                         0.001));<a name="line.51"></a>
<span class="sourceLineNo">052</span>        Assert.assertTrue(disk.contains(new Vector2D(support.get(0).getX() + 0.1,<a name="line.52"></a>
<span class="sourceLineNo">053</span>                                                     support.get(0).getY() - 0.1),<a name="line.53"></a>
<span class="sourceLineNo">054</span>                                        0.5));<a name="line.54"></a>
<span class="sourceLineNo">055</span>        Assert.assertEquals(0, support.get(0).distance(disk.getCenter()), 1.0e-10);<a name="line.55"></a>
<span class="sourceLineNo">056</span>        Assert.assertEquals(1, disk.getSupportSize());<a name="line.56"></a>
<span class="sourceLineNo">057</span>        Assert.assertTrue(support.get(0) == disk.getSupport()[0]);<a name="line.57"></a>
<span class="sourceLineNo">058</span>    }<a name="line.58"></a>
<span class="sourceLineNo">059</span><a name="line.59"></a>
<span class="sourceLineNo">060</span>    @Test<a name="line.60"></a>
<span class="sourceLineNo">061</span>    public void testSupport2Points() {<a name="line.61"></a>
<span class="sourceLineNo">062</span>        List&lt;Vector2D&gt; support = Arrays.asList(new Vector2D(1, 0),<a name="line.62"></a>
<span class="sourceLineNo">063</span>                                               new Vector2D(3, 0));<a name="line.63"></a>
<span class="sourceLineNo">064</span>        EnclosingBall&lt;Euclidean2D, Vector2D&gt; disk = new DiskGenerator().ballOnSupport(support);<a name="line.64"></a>
<span class="sourceLineNo">065</span>        Assert.assertEquals(1.0, disk.getRadius(), 1.0e-10);<a name="line.65"></a>
<span class="sourceLineNo">066</span>        int i = 0;<a name="line.66"></a>
<span class="sourceLineNo">067</span>        for (Vector2D v : support) {<a name="line.67"></a>
<span class="sourceLineNo">068</span>            Assert.assertTrue(disk.contains(v));<a name="line.68"></a>
<span class="sourceLineNo">069</span>            Assert.assertEquals(1.0, v.distance(disk.getCenter()), 1.0e-10);<a name="line.69"></a>
<span class="sourceLineNo">070</span>            Assert.assertTrue(v == disk.getSupport()[i++]);<a name="line.70"></a>
<span class="sourceLineNo">071</span>        }<a name="line.71"></a>
<span class="sourceLineNo">072</span>        Assert.assertTrue(disk.contains(new Vector2D(2, 0.9)));<a name="line.72"></a>
<span class="sourceLineNo">073</span>        Assert.assertFalse(disk.contains(Vector2D.ZERO));<a name="line.73"></a>
<span class="sourceLineNo">074</span>        Assert.assertEquals(0.0, new Vector2D(2, 0).distance(disk.getCenter()), 1.0e-10);<a name="line.74"></a>
<span class="sourceLineNo">075</span>        Assert.assertEquals(2, disk.getSupportSize());<a name="line.75"></a>
<span class="sourceLineNo">076</span>    }<a name="line.76"></a>
<span class="sourceLineNo">077</span><a name="line.77"></a>
<span class="sourceLineNo">078</span>    @Test<a name="line.78"></a>
<span class="sourceLineNo">079</span>    public void testSupport3Points() {<a name="line.79"></a>
<span class="sourceLineNo">080</span>        List&lt;Vector2D&gt; support = Arrays.asList(new Vector2D(1, 0),<a name="line.80"></a>
<span class="sourceLineNo">081</span>                                               new Vector2D(3, 0),<a name="line.81"></a>
<span class="sourceLineNo">082</span>                                               new Vector2D(2, 2));<a name="line.82"></a>
<span class="sourceLineNo">083</span>        EnclosingBall&lt;Euclidean2D, Vector2D&gt; disk = new DiskGenerator().ballOnSupport(support);<a name="line.83"></a>
<span class="sourceLineNo">084</span>        Assert.assertEquals(5.0 / 4.0, disk.getRadius(), 1.0e-10);<a name="line.84"></a>
<span class="sourceLineNo">085</span>        int i = 0;<a name="line.85"></a>
<span class="sourceLineNo">086</span>        for (Vector2D v : support) {<a name="line.86"></a>
<span class="sourceLineNo">087</span>            Assert.assertTrue(disk.contains(v));<a name="line.87"></a>
<span class="sourceLineNo">088</span>            Assert.assertEquals(5.0 / 4.0, v.distance(disk.getCenter()), 1.0e-10);<a name="line.88"></a>
<span class="sourceLineNo">089</span>            Assert.assertTrue(v == disk.getSupport()[i++]);<a name="line.89"></a>
<span class="sourceLineNo">090</span>        }<a name="line.90"></a>
<span class="sourceLineNo">091</span>        Assert.assertTrue(disk.contains(new Vector2D(2, 0.9)));<a name="line.91"></a>
<span class="sourceLineNo">092</span>        Assert.assertFalse(disk.contains(new Vector2D(0.9,  0)));<a name="line.92"></a>
<span class="sourceLineNo">093</span>        Assert.assertFalse(disk.contains(new Vector2D(3.1,  0)));<a name="line.93"></a>
<span class="sourceLineNo">094</span>        Assert.assertTrue(disk.contains(new Vector2D(2.0, -0.499)));<a name="line.94"></a>
<span class="sourceLineNo">095</span>        Assert.assertFalse(disk.contains(new Vector2D(2.0, -0.501)));<a name="line.95"></a>
<span class="sourceLineNo">096</span>        Assert.assertEquals(0.0, new Vector2D(2.0, 3.0 / 4.0).distance(disk.getCenter()), 1.0e-10);<a name="line.96"></a>
<span class="sourceLineNo">097</span>        Assert.assertEquals(3, disk.getSupportSize());<a name="line.97"></a>
<span class="sourceLineNo">098</span>    }<a name="line.98"></a>
<span class="sourceLineNo">099</span><a name="line.99"></a>
<span class="sourceLineNo">100</span>    @Test<a name="line.100"></a>
<span class="sourceLineNo">101</span>    public void testRandom() {<a name="line.101"></a>
<span class="sourceLineNo">102</span>        final RandomGenerator random = new Well1024a(0x12faa818373ffe90l);<a name="line.102"></a>
<span class="sourceLineNo">103</span>        final UnitSphereRandomVectorGenerator sr = new UnitSphereRandomVectorGenerator(2, random);<a name="line.103"></a>
<span class="sourceLineNo">104</span>        for (int i = 0; i &lt; 500; ++i) {<a name="line.104"></a>
<span class="sourceLineNo">105</span>            double d = 25 * random.nextDouble();<a name="line.105"></a>
<span class="sourceLineNo">106</span>            double refRadius = 10 * random.nextDouble();<a name="line.106"></a>
<span class="sourceLineNo">107</span>            Vector2D refCenter = new Vector2D(d, new Vector2D(sr.nextVector()));<a name="line.107"></a>
<span class="sourceLineNo">108</span>            List&lt;Vector2D&gt; support = new ArrayList&lt;Vector2D&gt;();<a name="line.108"></a>
<span class="sourceLineNo">109</span>            for (int j = 0; j &lt; 3; ++j) {<a name="line.109"></a>
<span class="sourceLineNo">110</span>                support.add(new Vector2D(1.0, refCenter, refRadius, new Vector2D(sr.nextVector())));<a name="line.110"></a>
<span class="sourceLineNo">111</span>            }<a name="line.111"></a>
<span class="sourceLineNo">112</span>            EnclosingBall&lt;Euclidean2D, Vector2D&gt; disk = new DiskGenerator().ballOnSupport(support);<a name="line.112"></a>
<span class="sourceLineNo">113</span>            Assert.assertEquals(0.0, refCenter.distance(disk.getCenter()), 3e-9 * refRadius);<a name="line.113"></a>
<span class="sourceLineNo">114</span>            Assert.assertEquals(refRadius, disk.getRadius(), 7e-10 * refRadius);<a name="line.114"></a>
<span class="sourceLineNo">115</span>        }<a name="line.115"></a>
<span class="sourceLineNo">116</span>        <a name="line.116"></a>
<span class="sourceLineNo">117</span>    }<a name="line.117"></a>
<span class="sourceLineNo">118</span>}<a name="line.118"></a>




























































</pre>
</div>
</body>
</html>
