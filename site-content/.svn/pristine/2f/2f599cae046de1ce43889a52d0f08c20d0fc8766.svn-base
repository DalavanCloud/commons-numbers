<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span>package org.apache.commons.math3.random;<a name="line.17"></a>
<span class="sourceLineNo">018</span><a name="line.18"></a>
<span class="sourceLineNo">019</span>import java.text.DecimalFormat;<a name="line.19"></a>
<span class="sourceLineNo">020</span>import java.util.ArrayList;<a name="line.20"></a>
<span class="sourceLineNo">021</span>import java.util.HashSet;<a name="line.21"></a>
<span class="sourceLineNo">022</span>import java.util.List;<a name="line.22"></a>
<span class="sourceLineNo">023</span><a name="line.23"></a>
<span class="sourceLineNo">024</span>import org.apache.commons.math3.Retry;<a name="line.24"></a>
<span class="sourceLineNo">025</span>import org.apache.commons.math3.RetryRunner;<a name="line.25"></a>
<span class="sourceLineNo">026</span>import org.apache.commons.math3.TestUtils;<a name="line.26"></a>
<span class="sourceLineNo">027</span>import org.apache.commons.math3.distribution.BetaDistribution;<a name="line.27"></a>
<span class="sourceLineNo">028</span>import org.apache.commons.math3.distribution.BinomialDistribution;<a name="line.28"></a>
<span class="sourceLineNo">029</span>import org.apache.commons.math3.distribution.BinomialDistributionTest;<a name="line.29"></a>
<span class="sourceLineNo">030</span>import org.apache.commons.math3.distribution.CauchyDistribution;<a name="line.30"></a>
<span class="sourceLineNo">031</span>import org.apache.commons.math3.distribution.ChiSquaredDistribution;<a name="line.31"></a>
<span class="sourceLineNo">032</span>import org.apache.commons.math3.distribution.ExponentialDistribution;<a name="line.32"></a>
<span class="sourceLineNo">033</span>import org.apache.commons.math3.distribution.FDistribution;<a name="line.33"></a>
<span class="sourceLineNo">034</span>import org.apache.commons.math3.distribution.GammaDistribution;<a name="line.34"></a>
<span class="sourceLineNo">035</span>import org.apache.commons.math3.distribution.HypergeometricDistribution;<a name="line.35"></a>
<span class="sourceLineNo">036</span>import org.apache.commons.math3.distribution.HypergeometricDistributionTest;<a name="line.36"></a>
<span class="sourceLineNo">037</span>import org.apache.commons.math3.distribution.NormalDistribution;<a name="line.37"></a>
<span class="sourceLineNo">038</span>import org.apache.commons.math3.distribution.PascalDistribution;<a name="line.38"></a>
<span class="sourceLineNo">039</span>import org.apache.commons.math3.distribution.PascalDistributionTest;<a name="line.39"></a>
<span class="sourceLineNo">040</span>import org.apache.commons.math3.distribution.PoissonDistribution;<a name="line.40"></a>
<span class="sourceLineNo">041</span>import org.apache.commons.math3.distribution.TDistribution;<a name="line.41"></a>
<span class="sourceLineNo">042</span>import org.apache.commons.math3.distribution.WeibullDistribution;<a name="line.42"></a>
<span class="sourceLineNo">043</span>import org.apache.commons.math3.distribution.ZipfDistribution;<a name="line.43"></a>
<span class="sourceLineNo">044</span>import org.apache.commons.math3.distribution.ZipfDistributionTest;<a name="line.44"></a>
<span class="sourceLineNo">045</span>import org.apache.commons.math3.stat.Frequency;<a name="line.45"></a>
<span class="sourceLineNo">046</span>import org.apache.commons.math3.stat.inference.ChiSquareTest;<a name="line.46"></a>
<span class="sourceLineNo">047</span>import org.apache.commons.math3.util.FastMath;<a name="line.47"></a>
<span class="sourceLineNo">048</span>import org.apache.commons.math3.exception.MathIllegalArgumentException;<a name="line.48"></a>
<span class="sourceLineNo">049</span>import org.junit.Assert;<a name="line.49"></a>
<span class="sourceLineNo">050</span>import org.junit.Test;<a name="line.50"></a>
<span class="sourceLineNo">051</span>import org.junit.runner.RunWith;<a name="line.51"></a>
<span class="sourceLineNo">052</span><a name="line.52"></a>
<span class="sourceLineNo">053</span>/**<a name="line.53"></a>
<span class="sourceLineNo">054</span> * Test cases for the RandomDataGenerator class.<a name="line.54"></a>
<span class="sourceLineNo">055</span> *<a name="line.55"></a>
<span class="sourceLineNo">056</span> */<a name="line.56"></a>
<span class="sourceLineNo">057</span>@RunWith(RetryRunner.class)<a name="line.57"></a>
<span class="sourceLineNo">058</span>public class RandomDataGeneratorTest {<a name="line.58"></a>
<span class="sourceLineNo">059</span><a name="line.59"></a>
<span class="sourceLineNo">060</span>    public RandomDataGeneratorTest() {<a name="line.60"></a>
<span class="sourceLineNo">061</span>        randomData = new RandomDataGenerator();<a name="line.61"></a>
<span class="sourceLineNo">062</span>        randomData.reSeed(1000);<a name="line.62"></a>
<span class="sourceLineNo">063</span>    }<a name="line.63"></a>
<span class="sourceLineNo">064</span><a name="line.64"></a>
<span class="sourceLineNo">065</span>    protected final long smallSampleSize = 1000;<a name="line.65"></a>
<span class="sourceLineNo">066</span>    protected final double[] expected = { 250, 250, 250, 250 };<a name="line.66"></a>
<span class="sourceLineNo">067</span>    protected final int largeSampleSize = 10000;<a name="line.67"></a>
<span class="sourceLineNo">068</span>    private final String[] hex = { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9",<a name="line.68"></a>
<span class="sourceLineNo">069</span>            "a", "b", "c", "d", "e", "f" };<a name="line.69"></a>
<span class="sourceLineNo">070</span>    protected RandomDataGenerator randomData = null;<a name="line.70"></a>
<span class="sourceLineNo">071</span>    protected final ChiSquareTest testStatistic = new ChiSquareTest();<a name="line.71"></a>
<span class="sourceLineNo">072</span><a name="line.72"></a>
<span class="sourceLineNo">073</span>    @Test<a name="line.73"></a>
<span class="sourceLineNo">074</span>    public void testNextIntExtremeValues() {<a name="line.74"></a>
<span class="sourceLineNo">075</span>        int x = randomData.nextInt(Integer.MIN_VALUE, Integer.MAX_VALUE);<a name="line.75"></a>
<span class="sourceLineNo">076</span>        int y = randomData.nextInt(Integer.MIN_VALUE, Integer.MAX_VALUE);<a name="line.76"></a>
<span class="sourceLineNo">077</span>        Assert.assertFalse(x == y);<a name="line.77"></a>
<span class="sourceLineNo">078</span>    }<a name="line.78"></a>
<span class="sourceLineNo">079</span><a name="line.79"></a>
<span class="sourceLineNo">080</span>    @Test<a name="line.80"></a>
<span class="sourceLineNo">081</span>    public void testNextLongExtremeValues() {<a name="line.81"></a>
<span class="sourceLineNo">082</span>        long x = randomData.nextLong(Long.MIN_VALUE, Long.MAX_VALUE);<a name="line.82"></a>
<span class="sourceLineNo">083</span>        long y = randomData.nextLong(Long.MIN_VALUE, Long.MAX_VALUE);<a name="line.83"></a>
<span class="sourceLineNo">084</span>        Assert.assertFalse(x == y);<a name="line.84"></a>
<span class="sourceLineNo">085</span>    }<a name="line.85"></a>
<span class="sourceLineNo">086</span>    <a name="line.86"></a>
<span class="sourceLineNo">087</span>    @Test<a name="line.87"></a>
<span class="sourceLineNo">088</span>    public void testNextUniformExtremeValues() {<a name="line.88"></a>
<span class="sourceLineNo">089</span>        double x = randomData.nextUniform(-Double.MAX_VALUE, Double.MAX_VALUE);<a name="line.89"></a>
<span class="sourceLineNo">090</span>        double y = randomData.nextUniform(-Double.MAX_VALUE, Double.MAX_VALUE);<a name="line.90"></a>
<span class="sourceLineNo">091</span>        Assert.assertFalse(x == y);<a name="line.91"></a>
<span class="sourceLineNo">092</span>        Assert.assertFalse(Double.isNaN(x));<a name="line.92"></a>
<span class="sourceLineNo">093</span>        Assert.assertFalse(Double.isNaN(y));<a name="line.93"></a>
<span class="sourceLineNo">094</span>        Assert.assertFalse(Double.isInfinite(x));<a name="line.94"></a>
<span class="sourceLineNo">095</span>        Assert.assertFalse(Double.isInfinite(y));<a name="line.95"></a>
<span class="sourceLineNo">096</span>    }<a name="line.96"></a>
<span class="sourceLineNo">097</span>    <a name="line.97"></a>
<span class="sourceLineNo">098</span>    @Test<a name="line.98"></a>
<span class="sourceLineNo">099</span>    public void testNextIntIAE() {<a name="line.99"></a>
<span class="sourceLineNo">100</span>        try {<a name="line.100"></a>
<span class="sourceLineNo">101</span>            randomData.nextInt(4, 3);<a name="line.101"></a>
<span class="sourceLineNo">102</span>            Assert.fail("MathIllegalArgumentException expected");<a name="line.102"></a>
<span class="sourceLineNo">103</span>        } catch (MathIllegalArgumentException ex) {<a name="line.103"></a>
<span class="sourceLineNo">104</span>            // ignored<a name="line.104"></a>
<span class="sourceLineNo">105</span>        }<a name="line.105"></a>
<span class="sourceLineNo">106</span>    }<a name="line.106"></a>
<span class="sourceLineNo">107</span>    <a name="line.107"></a>
<span class="sourceLineNo">108</span>    @Test<a name="line.108"></a>
<span class="sourceLineNo">109</span>    public void testNextIntNegativeToPositiveRange() {<a name="line.109"></a>
<span class="sourceLineNo">110</span>        for (int i = 0; i &lt; 5; i++) {<a name="line.110"></a>
<span class="sourceLineNo">111</span>            checkNextIntUniform(-3, 5);<a name="line.111"></a>
<span class="sourceLineNo">112</span>            checkNextIntUniform(-3, 6);<a name="line.112"></a>
<span class="sourceLineNo">113</span>        }<a name="line.113"></a>
<span class="sourceLineNo">114</span>    }<a name="line.114"></a>
<span class="sourceLineNo">115</span><a name="line.115"></a>
<span class="sourceLineNo">116</span>    @Test <a name="line.116"></a>
<span class="sourceLineNo">117</span>    public void testNextIntNegativeRange() {<a name="line.117"></a>
<span class="sourceLineNo">118</span>        for (int i = 0; i &lt; 5; i++) {<a name="line.118"></a>
<span class="sourceLineNo">119</span>            checkNextIntUniform(-7, -4);<a name="line.119"></a>
<span class="sourceLineNo">120</span>            checkNextIntUniform(-15, -2);<a name="line.120"></a>
<span class="sourceLineNo">121</span>            checkNextIntUniform(Integer.MIN_VALUE + 1, Integer.MIN_VALUE + 12);<a name="line.121"></a>
<span class="sourceLineNo">122</span>        }<a name="line.122"></a>
<span class="sourceLineNo">123</span>    }<a name="line.123"></a>
<span class="sourceLineNo">124</span><a name="line.124"></a>
<span class="sourceLineNo">125</span>    @Test <a name="line.125"></a>
<span class="sourceLineNo">126</span>    public void testNextIntPositiveRange() {<a name="line.126"></a>
<span class="sourceLineNo">127</span>        for (int i = 0; i &lt; 5; i++) {<a name="line.127"></a>
<span class="sourceLineNo">128</span>            checkNextIntUniform(0, 3);<a name="line.128"></a>
<span class="sourceLineNo">129</span>            checkNextIntUniform(2, 12);<a name="line.129"></a>
<span class="sourceLineNo">130</span>            checkNextIntUniform(1,2);<a name="line.130"></a>
<span class="sourceLineNo">131</span>            checkNextIntUniform(Integer.MAX_VALUE - 12, Integer.MAX_VALUE - 1);<a name="line.131"></a>
<span class="sourceLineNo">132</span>        }<a name="line.132"></a>
<span class="sourceLineNo">133</span>    }<a name="line.133"></a>
<span class="sourceLineNo">134</span><a name="line.134"></a>
<span class="sourceLineNo">135</span>    private void checkNextIntUniform(int min, int max) {<a name="line.135"></a>
<span class="sourceLineNo">136</span>        final Frequency freq = new Frequency();<a name="line.136"></a>
<span class="sourceLineNo">137</span>        for (int i = 0; i &lt; smallSampleSize; i++) {<a name="line.137"></a>
<span class="sourceLineNo">138</span>            final int value = randomData.nextInt(min, max);<a name="line.138"></a>
<span class="sourceLineNo">139</span>            Assert.assertTrue("nextInt range", (value &gt;= min) &amp;&amp; (value &lt;= max));<a name="line.139"></a>
<span class="sourceLineNo">140</span>            freq.addValue(value);<a name="line.140"></a>
<span class="sourceLineNo">141</span>        }<a name="line.141"></a>
<span class="sourceLineNo">142</span>        final int len = max - min + 1;<a name="line.142"></a>
<span class="sourceLineNo">143</span>        final long[] observed = new long[len];<a name="line.143"></a>
<span class="sourceLineNo">144</span>        for (int i = 0; i &lt; len; i++) {<a name="line.144"></a>
<span class="sourceLineNo">145</span>            observed[i] = freq.getCount(min + i);<a name="line.145"></a>
<span class="sourceLineNo">146</span>        }<a name="line.146"></a>
<span class="sourceLineNo">147</span>        final double[] expected = new double[len];<a name="line.147"></a>
<span class="sourceLineNo">148</span>        for (int i = 0; i &lt; len; i++) {<a name="line.148"></a>
<span class="sourceLineNo">149</span>            expected[i] = 1d / len;<a name="line.149"></a>
<span class="sourceLineNo">150</span>        }<a name="line.150"></a>
<span class="sourceLineNo">151</span>        <a name="line.151"></a>
<span class="sourceLineNo">152</span>        TestUtils.assertChiSquareAccept(expected, observed, 0.001);<a name="line.152"></a>
<span class="sourceLineNo">153</span>    }<a name="line.153"></a>
<span class="sourceLineNo">154</span><a name="line.154"></a>
<span class="sourceLineNo">155</span>    @Test<a name="line.155"></a>
<span class="sourceLineNo">156</span>    public void testNextIntWideRange() {<a name="line.156"></a>
<span class="sourceLineNo">157</span>        int lower = -0x6543210F;<a name="line.157"></a>
<span class="sourceLineNo">158</span>        int upper =  0x456789AB;<a name="line.158"></a>
<span class="sourceLineNo">159</span>        int max   = Integer.MIN_VALUE;<a name="line.159"></a>
<span class="sourceLineNo">160</span>        int min   = Integer.MAX_VALUE;<a name="line.160"></a>
<span class="sourceLineNo">161</span>        for (int i = 0; i &lt; 1000000; ++i) {<a name="line.161"></a>
<span class="sourceLineNo">162</span>            int r = randomData.nextInt(lower, upper);<a name="line.162"></a>
<span class="sourceLineNo">163</span>            max = FastMath.max(max, r);<a name="line.163"></a>
<span class="sourceLineNo">164</span>            min = FastMath.min(min, r);<a name="line.164"></a>
<span class="sourceLineNo">165</span>            Assert.assertTrue(r &gt;= lower);<a name="line.165"></a>
<span class="sourceLineNo">166</span>            Assert.assertTrue(r &lt;= upper);<a name="line.166"></a>
<span class="sourceLineNo">167</span>        }<a name="line.167"></a>
<span class="sourceLineNo">168</span>        double ratio = (((double) max)   - ((double) min)) /<a name="line.168"></a>
<span class="sourceLineNo">169</span>                       (((double) upper) - ((double) lower));<a name="line.169"></a>
<span class="sourceLineNo">170</span>        Assert.assertTrue(ratio &gt; 0.99999);<a name="line.170"></a>
<span class="sourceLineNo">171</span>    }<a name="line.171"></a>
<span class="sourceLineNo">172</span>    <a name="line.172"></a>
<span class="sourceLineNo">173</span>    @Test<a name="line.173"></a>
<span class="sourceLineNo">174</span>    public void testNextLongIAE() {<a name="line.174"></a>
<span class="sourceLineNo">175</span>        try {<a name="line.175"></a>
<span class="sourceLineNo">176</span>            randomData.nextLong(4, 3);<a name="line.176"></a>
<span class="sourceLineNo">177</span>            Assert.fail("MathIllegalArgumentException expected");<a name="line.177"></a>
<span class="sourceLineNo">178</span>        } catch (MathIllegalArgumentException ex) {<a name="line.178"></a>
<span class="sourceLineNo">179</span>            // ignored<a name="line.179"></a>
<span class="sourceLineNo">180</span>        }<a name="line.180"></a>
<span class="sourceLineNo">181</span>    }<a name="line.181"></a>
<span class="sourceLineNo">182</span><a name="line.182"></a>
<span class="sourceLineNo">183</span>    @Test<a name="line.183"></a>
<span class="sourceLineNo">184</span>    public void testNextLongNegativeToPositiveRange() {<a name="line.184"></a>
<span class="sourceLineNo">185</span>        for (int i = 0; i &lt; 5; i++) {<a name="line.185"></a>
<span class="sourceLineNo">186</span>            checkNextLongUniform(-3, 5);<a name="line.186"></a>
<span class="sourceLineNo">187</span>            checkNextLongUniform(-3, 6);<a name="line.187"></a>
<span class="sourceLineNo">188</span>        }<a name="line.188"></a>
<span class="sourceLineNo">189</span>    }<a name="line.189"></a>
<span class="sourceLineNo">190</span><a name="line.190"></a>
<span class="sourceLineNo">191</span>    @Test <a name="line.191"></a>
<span class="sourceLineNo">192</span>    public void testNextLongNegativeRange() {<a name="line.192"></a>
<span class="sourceLineNo">193</span>        for (int i = 0; i &lt; 5; i++) {<a name="line.193"></a>
<span class="sourceLineNo">194</span>            checkNextLongUniform(-7, -4);<a name="line.194"></a>
<span class="sourceLineNo">195</span>            checkNextLongUniform(-15, -2);<a name="line.195"></a>
<span class="sourceLineNo">196</span>            checkNextLongUniform(Long.MIN_VALUE + 1, Long.MIN_VALUE + 12);<a name="line.196"></a>
<span class="sourceLineNo">197</span>        }<a name="line.197"></a>
<span class="sourceLineNo">198</span>    }<a name="line.198"></a>
<span class="sourceLineNo">199</span><a name="line.199"></a>
<span class="sourceLineNo">200</span>    @Test <a name="line.200"></a>
<span class="sourceLineNo">201</span>    public void testNextLongPositiveRange() {<a name="line.201"></a>
<span class="sourceLineNo">202</span>        for (int i = 0; i &lt; 5; i++) {<a name="line.202"></a>
<span class="sourceLineNo">203</span>            checkNextLongUniform(0, 3);<a name="line.203"></a>
<span class="sourceLineNo">204</span>            checkNextLongUniform(2, 12);<a name="line.204"></a>
<span class="sourceLineNo">205</span>            checkNextLongUniform(Long.MAX_VALUE - 12, Long.MAX_VALUE - 1);<a name="line.205"></a>
<span class="sourceLineNo">206</span>        }<a name="line.206"></a>
<span class="sourceLineNo">207</span>    }<a name="line.207"></a>
<span class="sourceLineNo">208</span><a name="line.208"></a>
<span class="sourceLineNo">209</span>    private void checkNextLongUniform(long min, long max) {<a name="line.209"></a>
<span class="sourceLineNo">210</span>        final Frequency freq = new Frequency();<a name="line.210"></a>
<span class="sourceLineNo">211</span>        for (int i = 0; i &lt; smallSampleSize; i++) {<a name="line.211"></a>
<span class="sourceLineNo">212</span>            final long value = randomData.nextLong(min, max);<a name="line.212"></a>
<span class="sourceLineNo">213</span>            Assert.assertTrue("nextLong range: " + value + " " + min + " " + max,<a name="line.213"></a>
<span class="sourceLineNo">214</span>                              (value &gt;= min) &amp;&amp; (value &lt;= max));<a name="line.214"></a>
<span class="sourceLineNo">215</span>            freq.addValue(value);<a name="line.215"></a>
<span class="sourceLineNo">216</span>        }<a name="line.216"></a>
<span class="sourceLineNo">217</span>        final int len = ((int) (max - min)) + 1;<a name="line.217"></a>
<span class="sourceLineNo">218</span>        final long[] observed = new long[len];<a name="line.218"></a>
<span class="sourceLineNo">219</span>        for (int i = 0; i &lt; len; i++) {<a name="line.219"></a>
<span class="sourceLineNo">220</span>            observed[i] = freq.getCount(min + i);<a name="line.220"></a>
<span class="sourceLineNo">221</span>        }<a name="line.221"></a>
<span class="sourceLineNo">222</span>        final double[] expected = new double[len];<a name="line.222"></a>
<span class="sourceLineNo">223</span>        for (int i = 0; i &lt; len; i++) {<a name="line.223"></a>
<span class="sourceLineNo">224</span>            expected[i] = 1d / len;<a name="line.224"></a>
<span class="sourceLineNo">225</span>        }<a name="line.225"></a>
<span class="sourceLineNo">226</span>        <a name="line.226"></a>
<span class="sourceLineNo">227</span>        TestUtils.assertChiSquareAccept(expected, observed, 0.01);<a name="line.227"></a>
<span class="sourceLineNo">228</span>    }<a name="line.228"></a>
<span class="sourceLineNo">229</span><a name="line.229"></a>
<span class="sourceLineNo">230</span>    @Test<a name="line.230"></a>
<span class="sourceLineNo">231</span>    public void testNextLongWideRange() {<a name="line.231"></a>
<span class="sourceLineNo">232</span>        long lower = -0x6543210FEDCBA987L;<a name="line.232"></a>
<span class="sourceLineNo">233</span>        long upper =  0x456789ABCDEF0123L;<a name="line.233"></a>
<span class="sourceLineNo">234</span>        long max = Long.MIN_VALUE;<a name="line.234"></a>
<span class="sourceLineNo">235</span>        long min = Long.MAX_VALUE;<a name="line.235"></a>
<span class="sourceLineNo">236</span>        for (int i = 0; i &lt; 10000000; ++i) {<a name="line.236"></a>
<span class="sourceLineNo">237</span>            long r = randomData.nextLong(lower, upper);<a name="line.237"></a>
<span class="sourceLineNo">238</span>            max = FastMath.max(max, r);<a name="line.238"></a>
<span class="sourceLineNo">239</span>            min = FastMath.min(min, r);<a name="line.239"></a>
<span class="sourceLineNo">240</span>            Assert.assertTrue(r &gt;= lower);<a name="line.240"></a>
<span class="sourceLineNo">241</span>            Assert.assertTrue(r &lt;= upper);<a name="line.241"></a>
<span class="sourceLineNo">242</span>        }<a name="line.242"></a>
<span class="sourceLineNo">243</span>        double ratio = (((double) max)   - ((double) min)) /<a name="line.243"></a>
<span class="sourceLineNo">244</span>                       (((double) upper) - ((double) lower));<a name="line.244"></a>
<span class="sourceLineNo">245</span>        Assert.assertTrue(ratio &gt; 0.99999);<a name="line.245"></a>
<span class="sourceLineNo">246</span>    }<a name="line.246"></a>
<span class="sourceLineNo">247</span>    <a name="line.247"></a>
<span class="sourceLineNo">248</span>    @Test<a name="line.248"></a>
<span class="sourceLineNo">249</span>    public void testNextSecureLongIAE() {<a name="line.249"></a>
<span class="sourceLineNo">250</span>        try {<a name="line.250"></a>
<span class="sourceLineNo">251</span>            randomData.nextSecureLong(4, 3);<a name="line.251"></a>
<span class="sourceLineNo">252</span>            Assert.fail("MathIllegalArgumentException expected");<a name="line.252"></a>
<span class="sourceLineNo">253</span>        } catch (MathIllegalArgumentException ex) {<a name="line.253"></a>
<span class="sourceLineNo">254</span>            // ignored<a name="line.254"></a>
<span class="sourceLineNo">255</span>        }<a name="line.255"></a>
<span class="sourceLineNo">256</span>    }<a name="line.256"></a>
<span class="sourceLineNo">257</span>    <a name="line.257"></a>
<span class="sourceLineNo">258</span>    @Test<a name="line.258"></a>
<span class="sourceLineNo">259</span>    @Retry(3)<a name="line.259"></a>
<span class="sourceLineNo">260</span>    public void testNextSecureLongNegativeToPositiveRange() {<a name="line.260"></a>
<span class="sourceLineNo">261</span>        for (int i = 0; i &lt; 5; i++) {<a name="line.261"></a>
<span class="sourceLineNo">262</span>            checkNextSecureLongUniform(-3, 5);<a name="line.262"></a>
<span class="sourceLineNo">263</span>            checkNextSecureLongUniform(-3, 6);<a name="line.263"></a>
<span class="sourceLineNo">264</span>        }<a name="line.264"></a>
<span class="sourceLineNo">265</span>    }<a name="line.265"></a>
<span class="sourceLineNo">266</span>    <a name="line.266"></a>
<span class="sourceLineNo">267</span>    @Test<a name="line.267"></a>
<span class="sourceLineNo">268</span>    @Retry(3)<a name="line.268"></a>
<span class="sourceLineNo">269</span>    public void testNextSecureLongNegativeRange() {<a name="line.269"></a>
<span class="sourceLineNo">270</span>        for (int i = 0; i &lt; 5; i++) {<a name="line.270"></a>
<span class="sourceLineNo">271</span>            checkNextSecureLongUniform(-7, -4);<a name="line.271"></a>
<span class="sourceLineNo">272</span>            checkNextSecureLongUniform(-15, -2);<a name="line.272"></a>
<span class="sourceLineNo">273</span>        }<a name="line.273"></a>
<span class="sourceLineNo">274</span>    }<a name="line.274"></a>
<span class="sourceLineNo">275</span>    <a name="line.275"></a>
<span class="sourceLineNo">276</span>    @Test<a name="line.276"></a>
<span class="sourceLineNo">277</span>    @Retry(3)<a name="line.277"></a>
<span class="sourceLineNo">278</span>    public void testNextSecureLongPositiveRange() {<a name="line.278"></a>
<span class="sourceLineNo">279</span>        for (int i = 0; i &lt; 5; i++) {<a name="line.279"></a>
<span class="sourceLineNo">280</span>            checkNextSecureLongUniform(0, 3);<a name="line.280"></a>
<span class="sourceLineNo">281</span>            checkNextSecureLongUniform(2, 12);<a name="line.281"></a>
<span class="sourceLineNo">282</span>        }<a name="line.282"></a>
<span class="sourceLineNo">283</span>    }<a name="line.283"></a>
<span class="sourceLineNo">284</span>    <a name="line.284"></a>
<span class="sourceLineNo">285</span>    private void checkNextSecureLongUniform(int min, int max) {<a name="line.285"></a>
<span class="sourceLineNo">286</span>        final Frequency freq = new Frequency();<a name="line.286"></a>
<span class="sourceLineNo">287</span>        for (int i = 0; i &lt; smallSampleSize; i++) {<a name="line.287"></a>
<span class="sourceLineNo">288</span>            final long value = randomData.nextSecureLong(min, max);<a name="line.288"></a>
<span class="sourceLineNo">289</span>            Assert.assertTrue("nextLong range", (value &gt;= min) &amp;&amp; (value &lt;= max));<a name="line.289"></a>
<span class="sourceLineNo">290</span>            freq.addValue(value);<a name="line.290"></a>
<span class="sourceLineNo">291</span>        }<a name="line.291"></a>
<span class="sourceLineNo">292</span>        final int len = max - min + 1;<a name="line.292"></a>
<span class="sourceLineNo">293</span>        final long[] observed = new long[len];<a name="line.293"></a>
<span class="sourceLineNo">294</span>        for (int i = 0; i &lt; len; i++) {<a name="line.294"></a>
<span class="sourceLineNo">295</span>            observed[i] = freq.getCount(min + i);<a name="line.295"></a>
<span class="sourceLineNo">296</span>        }<a name="line.296"></a>
<span class="sourceLineNo">297</span>        final double[] expected = new double[len];<a name="line.297"></a>
<span class="sourceLineNo">298</span>        for (int i = 0; i &lt; len; i++) {<a name="line.298"></a>
<span class="sourceLineNo">299</span>            expected[i] = 1d / len;<a name="line.299"></a>
<span class="sourceLineNo">300</span>        }<a name="line.300"></a>
<span class="sourceLineNo">301</span>        <a name="line.301"></a>
<span class="sourceLineNo">302</span>        TestUtils.assertChiSquareAccept(expected, observed, 0.0001);<a name="line.302"></a>
<span class="sourceLineNo">303</span>    }<a name="line.303"></a>
<span class="sourceLineNo">304</span><a name="line.304"></a>
<span class="sourceLineNo">305</span>    @Test<a name="line.305"></a>
<span class="sourceLineNo">306</span>    public void testNextSecureIntIAE() {<a name="line.306"></a>
<span class="sourceLineNo">307</span>        try {<a name="line.307"></a>
<span class="sourceLineNo">308</span>            randomData.nextSecureInt(4, 3);<a name="line.308"></a>
<span class="sourceLineNo">309</span>            Assert.fail("MathIllegalArgumentException expected");<a name="line.309"></a>
<span class="sourceLineNo">310</span>        } catch (MathIllegalArgumentException ex) {<a name="line.310"></a>
<span class="sourceLineNo">311</span>            // ignored<a name="line.311"></a>
<span class="sourceLineNo">312</span>        }<a name="line.312"></a>
<span class="sourceLineNo">313</span>    }<a name="line.313"></a>
<span class="sourceLineNo">314</span>    <a name="line.314"></a>
<span class="sourceLineNo">315</span>    @Test<a name="line.315"></a>
<span class="sourceLineNo">316</span>    @Retry(3)<a name="line.316"></a>
<span class="sourceLineNo">317</span>    public void testNextSecureIntNegativeToPositiveRange() {<a name="line.317"></a>
<span class="sourceLineNo">318</span>        for (int i = 0; i &lt; 5; i++) {<a name="line.318"></a>
<span class="sourceLineNo">319</span>            checkNextSecureIntUniform(-3, 5);<a name="line.319"></a>
<span class="sourceLineNo">320</span>            checkNextSecureIntUniform(-3, 6);<a name="line.320"></a>
<span class="sourceLineNo">321</span>        }<a name="line.321"></a>
<span class="sourceLineNo">322</span>    }<a name="line.322"></a>
<span class="sourceLineNo">323</span>    <a name="line.323"></a>
<span class="sourceLineNo">324</span>    @Test<a name="line.324"></a>
<span class="sourceLineNo">325</span>    @Retry(3)<a name="line.325"></a>
<span class="sourceLineNo">326</span>    public void testNextSecureIntNegativeRange() {<a name="line.326"></a>
<span class="sourceLineNo">327</span>        for (int i = 0; i &lt; 5; i++) {<a name="line.327"></a>
<span class="sourceLineNo">328</span>            checkNextSecureIntUniform(-7, -4);<a name="line.328"></a>
<span class="sourceLineNo">329</span>            checkNextSecureIntUniform(-15, -2);<a name="line.329"></a>
<span class="sourceLineNo">330</span>        }<a name="line.330"></a>
<span class="sourceLineNo">331</span>    }<a name="line.331"></a>
<span class="sourceLineNo">332</span>    <a name="line.332"></a>
<span class="sourceLineNo">333</span>    @Test <a name="line.333"></a>
<span class="sourceLineNo">334</span>    @Retry(3)<a name="line.334"></a>
<span class="sourceLineNo">335</span>    public void testNextSecureIntPositiveRange() {<a name="line.335"></a>
<span class="sourceLineNo">336</span>        for (int i = 0; i &lt; 5; i++) {<a name="line.336"></a>
<span class="sourceLineNo">337</span>            checkNextSecureIntUniform(0, 3);<a name="line.337"></a>
<span class="sourceLineNo">338</span>            checkNextSecureIntUniform(2, 12);<a name="line.338"></a>
<span class="sourceLineNo">339</span>        }<a name="line.339"></a>
<span class="sourceLineNo">340</span>    }<a name="line.340"></a>
<span class="sourceLineNo">341</span>     <a name="line.341"></a>
<span class="sourceLineNo">342</span>    private void checkNextSecureIntUniform(int min, int max) {<a name="line.342"></a>
<span class="sourceLineNo">343</span>        final Frequency freq = new Frequency();<a name="line.343"></a>
<span class="sourceLineNo">344</span>        for (int i = 0; i &lt; smallSampleSize; i++) {<a name="line.344"></a>
<span class="sourceLineNo">345</span>            final int value = randomData.nextSecureInt(min, max);<a name="line.345"></a>
<span class="sourceLineNo">346</span>            Assert.assertTrue("nextInt range", (value &gt;= min) &amp;&amp; (value &lt;= max));<a name="line.346"></a>
<span class="sourceLineNo">347</span>            freq.addValue(value);<a name="line.347"></a>
<span class="sourceLineNo">348</span>        }<a name="line.348"></a>
<span class="sourceLineNo">349</span>        final int len = max - min + 1;<a name="line.349"></a>
<span class="sourceLineNo">350</span>        final long[] observed = new long[len];<a name="line.350"></a>
<span class="sourceLineNo">351</span>        for (int i = 0; i &lt; len; i++) {<a name="line.351"></a>
<span class="sourceLineNo">352</span>            observed[i] = freq.getCount(min + i);<a name="line.352"></a>
<span class="sourceLineNo">353</span>        }<a name="line.353"></a>
<span class="sourceLineNo">354</span>        final double[] expected = new double[len];<a name="line.354"></a>
<span class="sourceLineNo">355</span>        for (int i = 0; i &lt; len; i++) {<a name="line.355"></a>
<span class="sourceLineNo">356</span>            expected[i] = 1d / len;<a name="line.356"></a>
<span class="sourceLineNo">357</span>        }<a name="line.357"></a>
<span class="sourceLineNo">358</span>        <a name="line.358"></a>
<span class="sourceLineNo">359</span>        TestUtils.assertChiSquareAccept(expected, observed, 0.0001);<a name="line.359"></a>
<span class="sourceLineNo">360</span>    }<a name="line.360"></a>
<span class="sourceLineNo">361</span>    <a name="line.361"></a>
<span class="sourceLineNo">362</span>    <a name="line.362"></a>
<span class="sourceLineNo">363</span><a name="line.363"></a>
<span class="sourceLineNo">364</span>    /**<a name="line.364"></a>
<span class="sourceLineNo">365</span>     * Make sure that empirical distribution of random Poisson(4)'s has P(X &lt;=<a name="line.365"></a>
<span class="sourceLineNo">366</span>     * 5) close to actual cumulative Poisson probability and that nextPoisson<a name="line.366"></a>
<span class="sourceLineNo">367</span>     * fails when mean is non-positive.<a name="line.367"></a>
<span class="sourceLineNo">368</span>     */<a name="line.368"></a>
<span class="sourceLineNo">369</span>    @Test<a name="line.369"></a>
<span class="sourceLineNo">370</span>    public void testNextPoisson() {<a name="line.370"></a>
<span class="sourceLineNo">371</span>        try {<a name="line.371"></a>
<span class="sourceLineNo">372</span>            randomData.nextPoisson(0);<a name="line.372"></a>
<span class="sourceLineNo">373</span>            Assert.fail("zero mean -- expecting MathIllegalArgumentException");<a name="line.373"></a>
<span class="sourceLineNo">374</span>        } catch (MathIllegalArgumentException ex) {<a name="line.374"></a>
<span class="sourceLineNo">375</span>            // ignored<a name="line.375"></a>
<span class="sourceLineNo">376</span>        }<a name="line.376"></a>
<span class="sourceLineNo">377</span>        try {<a name="line.377"></a>
<span class="sourceLineNo">378</span>            randomData.nextPoisson(-1);<a name="line.378"></a>
<span class="sourceLineNo">379</span>            Assert.fail("negative mean supplied -- MathIllegalArgumentException expected");<a name="line.379"></a>
<span class="sourceLineNo">380</span>        } catch (MathIllegalArgumentException ex) {<a name="line.380"></a>
<span class="sourceLineNo">381</span>            // ignored<a name="line.381"></a>
<span class="sourceLineNo">382</span>        }<a name="line.382"></a>
<span class="sourceLineNo">383</span>        try {<a name="line.383"></a>
<span class="sourceLineNo">384</span>            randomData.nextPoisson(0);<a name="line.384"></a>
<span class="sourceLineNo">385</span>            Assert.fail("0 mean supplied -- MathIllegalArgumentException expected");<a name="line.385"></a>
<span class="sourceLineNo">386</span>        } catch (MathIllegalArgumentException ex) {<a name="line.386"></a>
<span class="sourceLineNo">387</span>            // ignored<a name="line.387"></a>
<span class="sourceLineNo">388</span>        }<a name="line.388"></a>
<span class="sourceLineNo">389</span>        <a name="line.389"></a>
<span class="sourceLineNo">390</span>        final double mean = 4.0d;<a name="line.390"></a>
<span class="sourceLineNo">391</span>        final int len = 5;<a name="line.391"></a>
<span class="sourceLineNo">392</span>        PoissonDistribution poissonDistribution = new PoissonDistribution(mean);<a name="line.392"></a>
<span class="sourceLineNo">393</span>        Frequency f = new Frequency();<a name="line.393"></a>
<span class="sourceLineNo">394</span>        randomData.reSeed(1000);<a name="line.394"></a>
<span class="sourceLineNo">395</span>        for (int i = 0; i &lt; largeSampleSize; i++) {<a name="line.395"></a>
<span class="sourceLineNo">396</span>            f.addValue(randomData.nextPoisson(mean));<a name="line.396"></a>
<span class="sourceLineNo">397</span>        }<a name="line.397"></a>
<span class="sourceLineNo">398</span>        final long[] observed = new long[len];<a name="line.398"></a>
<span class="sourceLineNo">399</span>        for (int i = 0; i &lt; len; i++) {<a name="line.399"></a>
<span class="sourceLineNo">400</span>            observed[i] = f.getCount(i + 1);<a name="line.400"></a>
<span class="sourceLineNo">401</span>        }<a name="line.401"></a>
<span class="sourceLineNo">402</span>        final double[] expected = new double[len];<a name="line.402"></a>
<span class="sourceLineNo">403</span>        for (int i = 0; i &lt; len; i++) {<a name="line.403"></a>
<span class="sourceLineNo">404</span>            expected[i] = poissonDistribution.probability(i + 1) * largeSampleSize;<a name="line.404"></a>
<span class="sourceLineNo">405</span>        }<a name="line.405"></a>
<span class="sourceLineNo">406</span>        <a name="line.406"></a>
<span class="sourceLineNo">407</span>        TestUtils.assertChiSquareAccept(expected, observed, 0.0001);<a name="line.407"></a>
<span class="sourceLineNo">408</span>    }<a name="line.408"></a>
<span class="sourceLineNo">409</span><a name="line.409"></a>
<span class="sourceLineNo">410</span>    @Test<a name="line.410"></a>
<span class="sourceLineNo">411</span>    public void testNextPoissonConsistency() {<a name="line.411"></a>
<span class="sourceLineNo">412</span><a name="line.412"></a>
<span class="sourceLineNo">413</span>        // Small integral means<a name="line.413"></a>
<span class="sourceLineNo">414</span>        for (int i = 1; i &lt; 100; i++) {<a name="line.414"></a>
<span class="sourceLineNo">415</span>            checkNextPoissonConsistency(i);<a name="line.415"></a>
<span class="sourceLineNo">416</span>        }<a name="line.416"></a>
<span class="sourceLineNo">417</span>        // non-integer means<a name="line.417"></a>
<span class="sourceLineNo">418</span>        for (int i = 1; i &lt; 10; i++) {<a name="line.418"></a>
<span class="sourceLineNo">419</span>            checkNextPoissonConsistency(randomData.nextUniform(1, 1000));<a name="line.419"></a>
<span class="sourceLineNo">420</span>        }<a name="line.420"></a>
<span class="sourceLineNo">421</span>        // large means<a name="line.421"></a>
<span class="sourceLineNo">422</span>        for (int i = 1; i &lt; 10; i++) {<a name="line.422"></a>
<span class="sourceLineNo">423</span>            checkNextPoissonConsistency(randomData.nextUniform(1000, 10000));<a name="line.423"></a>
<span class="sourceLineNo">424</span>        }<a name="line.424"></a>
<span class="sourceLineNo">425</span>    }<a name="line.425"></a>
<span class="sourceLineNo">426</span><a name="line.426"></a>
<span class="sourceLineNo">427</span>    /**<a name="line.427"></a>
<span class="sourceLineNo">428</span>     * Verifies that nextPoisson(mean) generates an empirical distribution of values<a name="line.428"></a>
<span class="sourceLineNo">429</span>     * consistent with PoissonDistributionImpl by generating 1000 values, computing a<a name="line.429"></a>
<span class="sourceLineNo">430</span>     * grouped frequency distribution of the observed values and comparing this distribution<a name="line.430"></a>
<span class="sourceLineNo">431</span>     * to the corresponding expected distribution computed using PoissonDistributionImpl.<a name="line.431"></a>
<span class="sourceLineNo">432</span>     * Uses ChiSquare test of goodness of fit to evaluate the null hypothesis that the<a name="line.432"></a>
<span class="sourceLineNo">433</span>     * distributions are the same. If the null hypothesis can be rejected with confidence<a name="line.433"></a>
<span class="sourceLineNo">434</span>     * 1 - alpha, the check fails.<a name="line.434"></a>
<span class="sourceLineNo">435</span>     */<a name="line.435"></a>
<span class="sourceLineNo">436</span>    public void checkNextPoissonConsistency(double mean) {<a name="line.436"></a>
<span class="sourceLineNo">437</span>        // Generate sample values<a name="line.437"></a>
<span class="sourceLineNo">438</span>        final int sampleSize = 1000;        // Number of deviates to generate<a name="line.438"></a>
<span class="sourceLineNo">439</span>        final int minExpectedCount = 7;     // Minimum size of expected bin count<a name="line.439"></a>
<span class="sourceLineNo">440</span>        long maxObservedValue = 0;<a name="line.440"></a>
<span class="sourceLineNo">441</span>        final double alpha = 0.001;         // Probability of false failure<a name="line.441"></a>
<span class="sourceLineNo">442</span>        Frequency frequency = new Frequency();<a name="line.442"></a>
<span class="sourceLineNo">443</span>        for (int i = 0; i &lt; sampleSize; i++) {<a name="line.443"></a>
<span class="sourceLineNo">444</span>            long value = randomData.nextPoisson(mean);<a name="line.444"></a>
<span class="sourceLineNo">445</span>            if (value &gt; maxObservedValue) {<a name="line.445"></a>
<span class="sourceLineNo">446</span>                maxObservedValue = value;<a name="line.446"></a>
<span class="sourceLineNo">447</span>            }<a name="line.447"></a>
<span class="sourceLineNo">448</span>            frequency.addValue(value);<a name="line.448"></a>
<span class="sourceLineNo">449</span>        }<a name="line.449"></a>
<span class="sourceLineNo">450</span><a name="line.450"></a>
<span class="sourceLineNo">451</span>        /*<a name="line.451"></a>
<span class="sourceLineNo">452</span>         *  Set up bins for chi-square test.<a name="line.452"></a>
<span class="sourceLineNo">453</span>         *  Ensure expected counts are all at least minExpectedCount.<a name="line.453"></a>
<span class="sourceLineNo">454</span>         *  Start with upper and lower tail bins.<a name="line.454"></a>
<span class="sourceLineNo">455</span>         *  Lower bin = [0, lower); Upper bin = [upper, +inf).<a name="line.455"></a>
<span class="sourceLineNo">456</span>         */<a name="line.456"></a>
<span class="sourceLineNo">457</span>        PoissonDistribution poissonDistribution = new PoissonDistribution(mean);<a name="line.457"></a>
<span class="sourceLineNo">458</span>        int lower = 1;<a name="line.458"></a>
<span class="sourceLineNo">459</span>        while (poissonDistribution.cumulativeProbability(lower - 1) * sampleSize &lt; minExpectedCount) {<a name="line.459"></a>
<span class="sourceLineNo">460</span>            lower++;<a name="line.460"></a>
<span class="sourceLineNo">461</span>        }<a name="line.461"></a>
<span class="sourceLineNo">462</span>        int upper = (int) (5 * mean);  // Even for mean = 1, not much mass beyond 5<a name="line.462"></a>
<span class="sourceLineNo">463</span>        while ((1 - poissonDistribution.cumulativeProbability(upper - 1)) * sampleSize &lt; minExpectedCount) {<a name="line.463"></a>
<span class="sourceLineNo">464</span>            upper--;<a name="line.464"></a>
<span class="sourceLineNo">465</span>        }<a name="line.465"></a>
<span class="sourceLineNo">466</span><a name="line.466"></a>
<span class="sourceLineNo">467</span>        // Set bin width for interior bins.  For poisson, only need to look at end bins.<a name="line.467"></a>
<span class="sourceLineNo">468</span>        int binWidth = 0;<a name="line.468"></a>
<span class="sourceLineNo">469</span>        boolean widthSufficient = false;<a name="line.469"></a>
<span class="sourceLineNo">470</span>        double lowerBinMass = 0;<a name="line.470"></a>
<span class="sourceLineNo">471</span>        double upperBinMass = 0;<a name="line.471"></a>
<span class="sourceLineNo">472</span>        while (!widthSufficient) {<a name="line.472"></a>
<span class="sourceLineNo">473</span>            binWidth++;<a name="line.473"></a>
<span class="sourceLineNo">474</span>            lowerBinMass = poissonDistribution.cumulativeProbability(lower - 1, lower + binWidth - 1);<a name="line.474"></a>
<span class="sourceLineNo">475</span>            upperBinMass = poissonDistribution.cumulativeProbability(upper - binWidth - 1, upper - 1);<a name="line.475"></a>
<span class="sourceLineNo">476</span>            widthSufficient = FastMath.min(lowerBinMass, upperBinMass) * sampleSize &gt;= minExpectedCount;<a name="line.476"></a>
<span class="sourceLineNo">477</span>        }<a name="line.477"></a>
<span class="sourceLineNo">478</span><a name="line.478"></a>
<span class="sourceLineNo">479</span>        /*<a name="line.479"></a>
<span class="sourceLineNo">480</span>         *  Determine interior bin bounds.  Bins are<a name="line.480"></a>
<span class="sourceLineNo">481</span>         *  [1, lower = binBounds[0]), [lower, binBounds[1]), [binBounds[1], binBounds[2]), ... ,<a name="line.481"></a>
<span class="sourceLineNo">482</span>         *    [binBounds[binCount - 2], upper = binBounds[binCount - 1]), [upper, +inf)<a name="line.482"></a>
<span class="sourceLineNo">483</span>         *<a name="line.483"></a>
<span class="sourceLineNo">484</span>         */<a name="line.484"></a>
<span class="sourceLineNo">485</span>        List&lt;Integer&gt; binBounds = new ArrayList&lt;Integer&gt;();<a name="line.485"></a>
<span class="sourceLineNo">486</span>        binBounds.add(lower);<a name="line.486"></a>
<span class="sourceLineNo">487</span>        int bound = lower + binWidth;<a name="line.487"></a>
<span class="sourceLineNo">488</span>        while (bound &lt; upper - binWidth) {<a name="line.488"></a>
<span class="sourceLineNo">489</span>            binBounds.add(bound);<a name="line.489"></a>
<span class="sourceLineNo">490</span>            bound += binWidth;<a name="line.490"></a>
<span class="sourceLineNo">491</span>        }<a name="line.491"></a>
<span class="sourceLineNo">492</span>        binBounds.add(upper); // The size of bin [binBounds[binCount - 2], upper) satisfies binWidth &lt;= size &lt; 2*binWidth.<a name="line.492"></a>
<span class="sourceLineNo">493</span><a name="line.493"></a>
<span class="sourceLineNo">494</span>        // Compute observed and expected bin counts<a name="line.494"></a>
<span class="sourceLineNo">495</span>        final int binCount = binBounds.size() + 1;<a name="line.495"></a>
<span class="sourceLineNo">496</span>        long[] observed = new long[binCount];<a name="line.496"></a>
<span class="sourceLineNo">497</span>        double[] expected = new double[binCount];<a name="line.497"></a>
<span class="sourceLineNo">498</span><a name="line.498"></a>
<span class="sourceLineNo">499</span>        // Bottom bin<a name="line.499"></a>
<span class="sourceLineNo">500</span>        observed[0] = 0;<a name="line.500"></a>
<span class="sourceLineNo">501</span>        for (int i = 0; i &lt; lower; i++) {<a name="line.501"></a>
<span class="sourceLineNo">502</span>            observed[0] += frequency.getCount(i);<a name="line.502"></a>
<span class="sourceLineNo">503</span>        }<a name="line.503"></a>
<span class="sourceLineNo">504</span>        expected[0] = poissonDistribution.cumulativeProbability(lower - 1) * sampleSize;<a name="line.504"></a>
<span class="sourceLineNo">505</span><a name="line.505"></a>
<span class="sourceLineNo">506</span>        // Top bin<a name="line.506"></a>
<span class="sourceLineNo">507</span>        observed[binCount - 1] = 0;<a name="line.507"></a>
<span class="sourceLineNo">508</span>        for (int i = upper; i &lt;= maxObservedValue; i++) {<a name="line.508"></a>
<span class="sourceLineNo">509</span>            observed[binCount - 1] += frequency.getCount(i);<a name="line.509"></a>
<span class="sourceLineNo">510</span>        }<a name="line.510"></a>
<span class="sourceLineNo">511</span>        expected[binCount - 1] = (1 - poissonDistribution.cumulativeProbability(upper - 1)) * sampleSize;<a name="line.511"></a>
<span class="sourceLineNo">512</span><a name="line.512"></a>
<span class="sourceLineNo">513</span>        // Interior bins<a name="line.513"></a>
<span class="sourceLineNo">514</span>        for (int i = 1; i &lt; binCount - 1; i++) {<a name="line.514"></a>
<span class="sourceLineNo">515</span>            observed[i] = 0;<a name="line.515"></a>
<span class="sourceLineNo">516</span>            for (int j = binBounds.get(i - 1); j &lt; binBounds.get(i); j++) {<a name="line.516"></a>
<span class="sourceLineNo">517</span>                observed[i] += frequency.getCount(j);<a name="line.517"></a>
<span class="sourceLineNo">518</span>            } // Expected count is (mass in [binBounds[i-1], binBounds[i])) * sampleSize<a name="line.518"></a>
<span class="sourceLineNo">519</span>            expected[i] = (poissonDistribution.cumulativeProbability(binBounds.get(i) - 1) -<a name="line.519"></a>
<span class="sourceLineNo">520</span>                poissonDistribution.cumulativeProbability(binBounds.get(i - 1) -1)) * sampleSize;<a name="line.520"></a>
<span class="sourceLineNo">521</span>        }<a name="line.521"></a>
<span class="sourceLineNo">522</span><a name="line.522"></a>
<span class="sourceLineNo">523</span>        // Use chisquare test to verify that generated values are poisson(mean)-distributed<a name="line.523"></a>
<span class="sourceLineNo">524</span>        ChiSquareTest chiSquareTest = new ChiSquareTest();<a name="line.524"></a>
<span class="sourceLineNo">525</span>            // Fail if we can reject null hypothesis that distributions are the same<a name="line.525"></a>
<span class="sourceLineNo">526</span>        if (chiSquareTest.chiSquareTest(expected, observed, alpha)) {<a name="line.526"></a>
<span class="sourceLineNo">527</span>            StringBuilder msgBuffer = new StringBuilder();<a name="line.527"></a>
<span class="sourceLineNo">528</span>            DecimalFormat df = new DecimalFormat("#.##");<a name="line.528"></a>
<span class="sourceLineNo">529</span>            msgBuffer.append("Chisquare test failed for mean = ");<a name="line.529"></a>
<span class="sourceLineNo">530</span>            msgBuffer.append(mean);<a name="line.530"></a>
<span class="sourceLineNo">531</span>            msgBuffer.append(" p-value = ");<a name="line.531"></a>
<span class="sourceLineNo">532</span>            msgBuffer.append(chiSquareTest.chiSquareTest(expected, observed));<a name="line.532"></a>
<span class="sourceLineNo">533</span>            msgBuffer.append(" chisquare statistic = ");<a name="line.533"></a>
<span class="sourceLineNo">534</span>            msgBuffer.append(chiSquareTest.chiSquare(expected, observed));<a name="line.534"></a>
<span class="sourceLineNo">535</span>            msgBuffer.append(". \n");<a name="line.535"></a>
<span class="sourceLineNo">536</span>            msgBuffer.append("bin\t\texpected\tobserved\n");<a name="line.536"></a>
<span class="sourceLineNo">537</span>            for (int i = 0; i &lt; expected.length; i++) {<a name="line.537"></a>
<span class="sourceLineNo">538</span>                msgBuffer.append("[");<a name="line.538"></a>
<span class="sourceLineNo">539</span>                msgBuffer.append(i == 0 ? 1: binBounds.get(i - 1));<a name="line.539"></a>
<span class="sourceLineNo">540</span>                msgBuffer.append(",");<a name="line.540"></a>
<span class="sourceLineNo">541</span>                msgBuffer.append(i == binBounds.size() ? "inf": binBounds.get(i));<a name="line.541"></a>
<span class="sourceLineNo">542</span>                msgBuffer.append(")");<a name="line.542"></a>
<span class="sourceLineNo">543</span>                msgBuffer.append("\t\t");<a name="line.543"></a>
<span class="sourceLineNo">544</span>                msgBuffer.append(df.format(expected[i]));<a name="line.544"></a>
<span class="sourceLineNo">545</span>                msgBuffer.append("\t\t");<a name="line.545"></a>
<span class="sourceLineNo">546</span>                msgBuffer.append(observed[i]);<a name="line.546"></a>
<span class="sourceLineNo">547</span>                msgBuffer.append("\n");<a name="line.547"></a>
<span class="sourceLineNo">548</span>            }<a name="line.548"></a>
<span class="sourceLineNo">549</span>            msgBuffer.append("This test can fail randomly due to sampling error with probability ");<a name="line.549"></a>
<span class="sourceLineNo">550</span>            msgBuffer.append(alpha);<a name="line.550"></a>
<span class="sourceLineNo">551</span>            msgBuffer.append(".");<a name="line.551"></a>
<span class="sourceLineNo">552</span>            Assert.fail(msgBuffer.toString());<a name="line.552"></a>
<span class="sourceLineNo">553</span>        }<a name="line.553"></a>
<span class="sourceLineNo">554</span>    }<a name="line.554"></a>
<span class="sourceLineNo">555</span><a name="line.555"></a>
<span class="sourceLineNo">556</span>    /** test dispersion and failure modes for nextHex() */<a name="line.556"></a>
<span class="sourceLineNo">557</span>    @Test<a name="line.557"></a>
<span class="sourceLineNo">558</span>    public void testNextHex() {<a name="line.558"></a>
<span class="sourceLineNo">559</span>        try {<a name="line.559"></a>
<span class="sourceLineNo">560</span>            randomData.nextHexString(-1);<a name="line.560"></a>
<span class="sourceLineNo">561</span>            Assert.fail("negative length supplied -- MathIllegalArgumentException expected");<a name="line.561"></a>
<span class="sourceLineNo">562</span>        } catch (MathIllegalArgumentException ex) {<a name="line.562"></a>
<span class="sourceLineNo">563</span>            // ignored<a name="line.563"></a>
<span class="sourceLineNo">564</span>        }<a name="line.564"></a>
<span class="sourceLineNo">565</span>        try {<a name="line.565"></a>
<span class="sourceLineNo">566</span>            randomData.nextHexString(0);<a name="line.566"></a>
<span class="sourceLineNo">567</span>            Assert.fail("zero length supplied -- MathIllegalArgumentException expected");<a name="line.567"></a>
<span class="sourceLineNo">568</span>        } catch (MathIllegalArgumentException ex) {<a name="line.568"></a>
<span class="sourceLineNo">569</span>            // ignored<a name="line.569"></a>
<span class="sourceLineNo">570</span>        }<a name="line.570"></a>
<span class="sourceLineNo">571</span>        String hexString = randomData.nextHexString(3);<a name="line.571"></a>
<span class="sourceLineNo">572</span>        if (hexString.length() != 3) {<a name="line.572"></a>
<span class="sourceLineNo">573</span>            Assert.fail("incorrect length for generated string");<a name="line.573"></a>
<span class="sourceLineNo">574</span>        }<a name="line.574"></a>
<span class="sourceLineNo">575</span>        hexString = randomData.nextHexString(1);<a name="line.575"></a>
<span class="sourceLineNo">576</span>        if (hexString.length() != 1) {<a name="line.576"></a>
<span class="sourceLineNo">577</span>            Assert.fail("incorrect length for generated string");<a name="line.577"></a>
<span class="sourceLineNo">578</span>        }<a name="line.578"></a>
<span class="sourceLineNo">579</span>        try {<a name="line.579"></a>
<span class="sourceLineNo">580</span>            hexString = randomData.nextHexString(0);<a name="line.580"></a>
<span class="sourceLineNo">581</span>            Assert.fail("zero length requested -- expecting MathIllegalArgumentException");<a name="line.581"></a>
<span class="sourceLineNo">582</span>        } catch (MathIllegalArgumentException ex) {<a name="line.582"></a>
<span class="sourceLineNo">583</span>            // ignored<a name="line.583"></a>
<span class="sourceLineNo">584</span>        }<a name="line.584"></a>
<span class="sourceLineNo">585</span>        Frequency f = new Frequency();<a name="line.585"></a>
<span class="sourceLineNo">586</span>        for (int i = 0; i &lt; smallSampleSize; i++) {<a name="line.586"></a>
<span class="sourceLineNo">587</span>            hexString = randomData.nextHexString(100);<a name="line.587"></a>
<span class="sourceLineNo">588</span>            if (hexString.length() != 100) {<a name="line.588"></a>
<span class="sourceLineNo">589</span>                Assert.fail("incorrect length for generated string");<a name="line.589"></a>
<span class="sourceLineNo">590</span>            }<a name="line.590"></a>
<span class="sourceLineNo">591</span>            for (int j = 0; j &lt; hexString.length(); j++) {<a name="line.591"></a>
<span class="sourceLineNo">592</span>                f.addValue(hexString.substring(j, j + 1));<a name="line.592"></a>
<span class="sourceLineNo">593</span>            }<a name="line.593"></a>
<span class="sourceLineNo">594</span>        }<a name="line.594"></a>
<span class="sourceLineNo">595</span>        double[] expected = new double[16];<a name="line.595"></a>
<span class="sourceLineNo">596</span>        long[] observed = new long[16];<a name="line.596"></a>
<span class="sourceLineNo">597</span>        for (int i = 0; i &lt; 16; i++) {<a name="line.597"></a>
<span class="sourceLineNo">598</span>            expected[i] = (double) smallSampleSize * 100 / 16;<a name="line.598"></a>
<span class="sourceLineNo">599</span>            observed[i] = f.getCount(hex[i]);<a name="line.599"></a>
<span class="sourceLineNo">600</span>        }<a name="line.600"></a>
<span class="sourceLineNo">601</span>        TestUtils.assertChiSquareAccept(expected, observed, 0.001);<a name="line.601"></a>
<span class="sourceLineNo">602</span>    }<a name="line.602"></a>
<span class="sourceLineNo">603</span><a name="line.603"></a>
<span class="sourceLineNo">604</span>    /** test dispersion and failure modes for nextHex() */<a name="line.604"></a>
<span class="sourceLineNo">605</span>    @Test<a name="line.605"></a>
<span class="sourceLineNo">606</span>    @Retry(3)<a name="line.606"></a>
<span class="sourceLineNo">607</span>    public void testNextSecureHex() {<a name="line.607"></a>
<span class="sourceLineNo">608</span>        try {<a name="line.608"></a>
<span class="sourceLineNo">609</span>            randomData.nextSecureHexString(-1);<a name="line.609"></a>
<span class="sourceLineNo">610</span>            Assert.fail("negative length -- MathIllegalArgumentException expected");<a name="line.610"></a>
<span class="sourceLineNo">611</span>        } catch (MathIllegalArgumentException ex) {<a name="line.611"></a>
<span class="sourceLineNo">612</span>            // ignored<a name="line.612"></a>
<span class="sourceLineNo">613</span>        }<a name="line.613"></a>
<span class="sourceLineNo">614</span>        try {<a name="line.614"></a>
<span class="sourceLineNo">615</span>            randomData.nextSecureHexString(0);<a name="line.615"></a>
<span class="sourceLineNo">616</span>            Assert.fail("zero length -- MathIllegalArgumentException expected");<a name="line.616"></a>
<span class="sourceLineNo">617</span>        } catch (MathIllegalArgumentException ex) {<a name="line.617"></a>
<span class="sourceLineNo">618</span>            // ignored<a name="line.618"></a>
<span class="sourceLineNo">619</span>        }<a name="line.619"></a>
<span class="sourceLineNo">620</span>        String hexString = randomData.nextSecureHexString(3);<a name="line.620"></a>
<span class="sourceLineNo">621</span>        if (hexString.length() != 3) {<a name="line.621"></a>
<span class="sourceLineNo">622</span>            Assert.fail("incorrect length for generated string");<a name="line.622"></a>
<span class="sourceLineNo">623</span>        }<a name="line.623"></a>
<span class="sourceLineNo">624</span>        hexString = randomData.nextSecureHexString(1);<a name="line.624"></a>
<span class="sourceLineNo">625</span>        if (hexString.length() != 1) {<a name="line.625"></a>
<span class="sourceLineNo">626</span>            Assert.fail("incorrect length for generated string");<a name="line.626"></a>
<span class="sourceLineNo">627</span>        }<a name="line.627"></a>
<span class="sourceLineNo">628</span>        try {<a name="line.628"></a>
<span class="sourceLineNo">629</span>            hexString = randomData.nextSecureHexString(0);<a name="line.629"></a>
<span class="sourceLineNo">630</span>            Assert.fail("zero length requested -- expecting MathIllegalArgumentException");<a name="line.630"></a>
<span class="sourceLineNo">631</span>        } catch (MathIllegalArgumentException ex) {<a name="line.631"></a>
<span class="sourceLineNo">632</span>            // ignored<a name="line.632"></a>
<span class="sourceLineNo">633</span>        }<a name="line.633"></a>
<span class="sourceLineNo">634</span>        Frequency f = new Frequency();<a name="line.634"></a>
<span class="sourceLineNo">635</span>        for (int i = 0; i &lt; smallSampleSize; i++) {<a name="line.635"></a>
<span class="sourceLineNo">636</span>            hexString = randomData.nextSecureHexString(100);<a name="line.636"></a>
<span class="sourceLineNo">637</span>            if (hexString.length() != 100) {<a name="line.637"></a>
<span class="sourceLineNo">638</span>                Assert.fail("incorrect length for generated string");<a name="line.638"></a>
<span class="sourceLineNo">639</span>            }<a name="line.639"></a>
<span class="sourceLineNo">640</span>            for (int j = 0; j &lt; hexString.length(); j++) {<a name="line.640"></a>
<span class="sourceLineNo">641</span>                f.addValue(hexString.substring(j, j + 1));<a name="line.641"></a>
<span class="sourceLineNo">642</span>            }<a name="line.642"></a>
<span class="sourceLineNo">643</span>        }<a name="line.643"></a>
<span class="sourceLineNo">644</span>        double[] expected = new double[16];<a name="line.644"></a>
<span class="sourceLineNo">645</span>        long[] observed = new long[16];<a name="line.645"></a>
<span class="sourceLineNo">646</span>        for (int i = 0; i &lt; 16; i++) {<a name="line.646"></a>
<span class="sourceLineNo">647</span>            expected[i] = (double) smallSampleSize * 100 / 16;<a name="line.647"></a>
<span class="sourceLineNo">648</span>            observed[i] = f.getCount(hex[i]);<a name="line.648"></a>
<span class="sourceLineNo">649</span>        }<a name="line.649"></a>
<span class="sourceLineNo">650</span>        TestUtils.assertChiSquareAccept(expected, observed, 0.001);<a name="line.650"></a>
<span class="sourceLineNo">651</span>    }<a name="line.651"></a>
<span class="sourceLineNo">652</span><a name="line.652"></a>
<span class="sourceLineNo">653</span>    @Test<a name="line.653"></a>
<span class="sourceLineNo">654</span>    public void testNextUniformIAE() {<a name="line.654"></a>
<span class="sourceLineNo">655</span>        try {<a name="line.655"></a>
<span class="sourceLineNo">656</span>            randomData.nextUniform(4, 3);<a name="line.656"></a>
<span class="sourceLineNo">657</span>            Assert.fail("MathIllegalArgumentException expected");<a name="line.657"></a>
<span class="sourceLineNo">658</span>        } catch (MathIllegalArgumentException ex) {<a name="line.658"></a>
<span class="sourceLineNo">659</span>            // ignored<a name="line.659"></a>
<span class="sourceLineNo">660</span>        }<a name="line.660"></a>
<span class="sourceLineNo">661</span>        try {<a name="line.661"></a>
<span class="sourceLineNo">662</span>            randomData.nextUniform(0, Double.POSITIVE_INFINITY);<a name="line.662"></a>
<span class="sourceLineNo">663</span>            Assert.fail("MathIllegalArgumentException expected");<a name="line.663"></a>
<span class="sourceLineNo">664</span>        } catch (MathIllegalArgumentException ex) {<a name="line.664"></a>
<span class="sourceLineNo">665</span>            // ignored<a name="line.665"></a>
<span class="sourceLineNo">666</span>        }<a name="line.666"></a>
<span class="sourceLineNo">667</span>        try {<a name="line.667"></a>
<span class="sourceLineNo">668</span>            randomData.nextUniform(Double.NEGATIVE_INFINITY, 0);<a name="line.668"></a>
<span class="sourceLineNo">669</span>            Assert.fail("MathIllegalArgumentException expected");<a name="line.669"></a>
<span class="sourceLineNo">670</span>        } catch (MathIllegalArgumentException ex) {<a name="line.670"></a>
<span class="sourceLineNo">671</span>            // ignored<a name="line.671"></a>
<span class="sourceLineNo">672</span>        }<a name="line.672"></a>
<span class="sourceLineNo">673</span>        try {<a name="line.673"></a>
<span class="sourceLineNo">674</span>            randomData.nextUniform(0, Double.NaN);<a name="line.674"></a>
<span class="sourceLineNo">675</span>            Assert.fail("MathIllegalArgumentException expected");<a name="line.675"></a>
<span class="sourceLineNo">676</span>        } catch (MathIllegalArgumentException ex) {<a name="line.676"></a>
<span class="sourceLineNo">677</span>            // ignored<a name="line.677"></a>
<span class="sourceLineNo">678</span>        }<a name="line.678"></a>
<span class="sourceLineNo">679</span>        try {<a name="line.679"></a>
<span class="sourceLineNo">680</span>            randomData.nextUniform(Double.NaN, 0);<a name="line.680"></a>
<span class="sourceLineNo">681</span>            Assert.fail("MathIllegalArgumentException expected");<a name="line.681"></a>
<span class="sourceLineNo">682</span>        } catch (MathIllegalArgumentException ex) {<a name="line.682"></a>
<span class="sourceLineNo">683</span>            // ignored<a name="line.683"></a>
<span class="sourceLineNo">684</span>        }<a name="line.684"></a>
<span class="sourceLineNo">685</span>    }<a name="line.685"></a>
<span class="sourceLineNo">686</span>    <a name="line.686"></a>
<span class="sourceLineNo">687</span>    @Test<a name="line.687"></a>
<span class="sourceLineNo">688</span>    public void testNextUniformUniformPositiveBounds() {<a name="line.688"></a>
<span class="sourceLineNo">689</span>        for (int i = 0; i &lt; 5; i++) {<a name="line.689"></a>
<span class="sourceLineNo">690</span>            checkNextUniformUniform(0, 10);<a name="line.690"></a>
<span class="sourceLineNo">691</span>        }<a name="line.691"></a>
<span class="sourceLineNo">692</span>    }<a name="line.692"></a>
<span class="sourceLineNo">693</span>    <a name="line.693"></a>
<span class="sourceLineNo">694</span>    @Test<a name="line.694"></a>
<span class="sourceLineNo">695</span>    public void testNextUniformUniformNegativeToPositiveBounds() {<a name="line.695"></a>
<span class="sourceLineNo">696</span>        for (int i = 0; i &lt; 5; i++) {<a name="line.696"></a>
<span class="sourceLineNo">697</span>            checkNextUniformUniform(-3, 5);<a name="line.697"></a>
<span class="sourceLineNo">698</span>        }<a name="line.698"></a>
<span class="sourceLineNo">699</span>    }<a name="line.699"></a>
<span class="sourceLineNo">700</span>    <a name="line.700"></a>
<span class="sourceLineNo">701</span>    @Test<a name="line.701"></a>
<span class="sourceLineNo">702</span>    public void testNextUniformUniformNegaiveBounds() {<a name="line.702"></a>
<span class="sourceLineNo">703</span>        for (int i = 0; i &lt; 5; i++) {<a name="line.703"></a>
<span class="sourceLineNo">704</span>            checkNextUniformUniform(-7, -3);<a name="line.704"></a>
<span class="sourceLineNo">705</span>        }<a name="line.705"></a>
<span class="sourceLineNo">706</span>    }<a name="line.706"></a>
<span class="sourceLineNo">707</span>    <a name="line.707"></a>
<span class="sourceLineNo">708</span>    @Test<a name="line.708"></a>
<span class="sourceLineNo">709</span>    public void testNextUniformUniformMaximalInterval() {<a name="line.709"></a>
<span class="sourceLineNo">710</span>        for (int i = 0; i &lt; 5; i++) {<a name="line.710"></a>
<span class="sourceLineNo">711</span>            checkNextUniformUniform(-Double.MAX_VALUE, Double.MAX_VALUE);<a name="line.711"></a>
<span class="sourceLineNo">712</span>        }<a name="line.712"></a>
<span class="sourceLineNo">713</span>    }<a name="line.713"></a>
<span class="sourceLineNo">714</span>    <a name="line.714"></a>
<span class="sourceLineNo">715</span>    private void checkNextUniformUniform(double min, double max) {<a name="line.715"></a>
<span class="sourceLineNo">716</span>        // Set up bin bounds - min, binBound[0], ..., binBound[binCount-2], max<a name="line.716"></a>
<span class="sourceLineNo">717</span>        final int binCount = 5;<a name="line.717"></a>
<span class="sourceLineNo">718</span>        final double binSize = max / binCount - min/binCount; // Prevent overflow in extreme value case<a name="line.718"></a>
<span class="sourceLineNo">719</span>        final double[] binBounds = new double[binCount - 1];<a name="line.719"></a>
<span class="sourceLineNo">720</span>        binBounds[0] = min + binSize;<a name="line.720"></a>
<span class="sourceLineNo">721</span>        for (int i = 1; i &lt; binCount - 1; i++) {<a name="line.721"></a>
<span class="sourceLineNo">722</span>            binBounds[i] = binBounds[i - 1] + binSize;  // + instead of * to avoid overflow in extreme case<a name="line.722"></a>
<span class="sourceLineNo">723</span>        }<a name="line.723"></a>
<span class="sourceLineNo">724</span>        <a name="line.724"></a>
<span class="sourceLineNo">725</span>        final Frequency freq = new Frequency();<a name="line.725"></a>
<span class="sourceLineNo">726</span>        for (int i = 0; i &lt; smallSampleSize; i++) {<a name="line.726"></a>
<span class="sourceLineNo">727</span>            final double value = randomData.nextUniform(min, max);<a name="line.727"></a>
<span class="sourceLineNo">728</span>            Assert.assertTrue("nextUniform range", (value &gt; min) &amp;&amp; (value &lt; max));<a name="line.728"></a>
<span class="sourceLineNo">729</span>            // Find bin<a name="line.729"></a>
<span class="sourceLineNo">730</span>            int j = 0;<a name="line.730"></a>
<span class="sourceLineNo">731</span>            while (j &lt; binCount - 1 &amp;&amp; value &gt; binBounds[j]) {<a name="line.731"></a>
<span class="sourceLineNo">732</span>                j++;<a name="line.732"></a>
<span class="sourceLineNo">733</span>            }<a name="line.733"></a>
<span class="sourceLineNo">734</span>            freq.addValue(j);<a name="line.734"></a>
<span class="sourceLineNo">735</span>        }<a name="line.735"></a>
<span class="sourceLineNo">736</span>       <a name="line.736"></a>
<span class="sourceLineNo">737</span>        final long[] observed = new long[binCount];<a name="line.737"></a>
<span class="sourceLineNo">738</span>        for (int i = 0; i &lt; binCount; i++) {<a name="line.738"></a>
<span class="sourceLineNo">739</span>            observed[i] = freq.getCount(i);<a name="line.739"></a>
<span class="sourceLineNo">740</span>        }<a name="line.740"></a>
<span class="sourceLineNo">741</span>        final double[] expected = new double[binCount];<a name="line.741"></a>
<span class="sourceLineNo">742</span>        for (int i = 0; i &lt; binCount; i++) {<a name="line.742"></a>
<span class="sourceLineNo">743</span>            expected[i] = 1d / binCount;<a name="line.743"></a>
<span class="sourceLineNo">744</span>        }<a name="line.744"></a>
<span class="sourceLineNo">745</span>        <a name="line.745"></a>
<span class="sourceLineNo">746</span>        TestUtils.assertChiSquareAccept(expected, observed, 0.01);<a name="line.746"></a>
<span class="sourceLineNo">747</span>    }<a name="line.747"></a>
<span class="sourceLineNo">748</span><a name="line.748"></a>
<span class="sourceLineNo">749</span>    /** test exclusive endpoints of nextUniform **/<a name="line.749"></a>
<span class="sourceLineNo">750</span>    @Test<a name="line.750"></a>
<span class="sourceLineNo">751</span>    public void testNextUniformExclusiveEndpoints() {<a name="line.751"></a>
<span class="sourceLineNo">752</span>        for (int i = 0; i &lt; 1000; i++) {<a name="line.752"></a>
<span class="sourceLineNo">753</span>            double u = randomData.nextUniform(0.99, 1);<a name="line.753"></a>
<span class="sourceLineNo">754</span>            Assert.assertTrue(u &gt; 0.99 &amp;&amp; u &lt; 1);<a name="line.754"></a>
<span class="sourceLineNo">755</span>        }<a name="line.755"></a>
<span class="sourceLineNo">756</span>    }<a name="line.756"></a>
<span class="sourceLineNo">757</span><a name="line.757"></a>
<span class="sourceLineNo">758</span>    /** test failure modes and distribution of nextGaussian() */<a name="line.758"></a>
<span class="sourceLineNo">759</span>    @Test<a name="line.759"></a>
<span class="sourceLineNo">760</span>    public void testNextGaussian() {<a name="line.760"></a>
<span class="sourceLineNo">761</span>        try {<a name="line.761"></a>
<span class="sourceLineNo">762</span>            randomData.nextGaussian(0, 0);<a name="line.762"></a>
<span class="sourceLineNo">763</span>            Assert.fail("zero sigma -- MathIllegalArgumentException expected");<a name="line.763"></a>
<span class="sourceLineNo">764</span>        } catch (MathIllegalArgumentException ex) {<a name="line.764"></a>
<span class="sourceLineNo">765</span>            // ignored<a name="line.765"></a>
<span class="sourceLineNo">766</span>        }<a name="line.766"></a>
<span class="sourceLineNo">767</span>        double[] quartiles = TestUtils.getDistributionQuartiles(new NormalDistribution(0,1));<a name="line.767"></a>
<span class="sourceLineNo">768</span>        long[] counts = new long[4];<a name="line.768"></a>
<span class="sourceLineNo">769</span>        randomData.reSeed(1000);<a name="line.769"></a>
<span class="sourceLineNo">770</span>        for (int i = 0; i &lt; 1000; i++) {<a name="line.770"></a>
<span class="sourceLineNo">771</span>            double value = randomData.nextGaussian(0, 1);<a name="line.771"></a>
<span class="sourceLineNo">772</span>            TestUtils.updateCounts(value, counts, quartiles);<a name="line.772"></a>
<span class="sourceLineNo">773</span>        }<a name="line.773"></a>
<span class="sourceLineNo">774</span>        TestUtils.assertChiSquareAccept(expected, counts, 0.001);<a name="line.774"></a>
<span class="sourceLineNo">775</span>    }<a name="line.775"></a>
<span class="sourceLineNo">776</span><a name="line.776"></a>
<span class="sourceLineNo">777</span>    /** test failure modes and distribution of nextExponential() */<a name="line.777"></a>
<span class="sourceLineNo">778</span>    @Test<a name="line.778"></a>
<span class="sourceLineNo">779</span>    public void testNextExponential() {<a name="line.779"></a>
<span class="sourceLineNo">780</span>        try {<a name="line.780"></a>
<span class="sourceLineNo">781</span>            randomData.nextExponential(-1);<a name="line.781"></a>
<span class="sourceLineNo">782</span>            Assert.fail("negative mean -- expecting MathIllegalArgumentException");<a name="line.782"></a>
<span class="sourceLineNo">783</span>        } catch (MathIllegalArgumentException ex) {<a name="line.783"></a>
<span class="sourceLineNo">784</span>            // ignored<a name="line.784"></a>
<span class="sourceLineNo">785</span>        }<a name="line.785"></a>
<span class="sourceLineNo">786</span>        try {<a name="line.786"></a>
<span class="sourceLineNo">787</span>            randomData.nextExponential(0);<a name="line.787"></a>
<span class="sourceLineNo">788</span>            Assert.fail("zero mean -- expecting MathIllegalArgumentException");<a name="line.788"></a>
<span class="sourceLineNo">789</span>        } catch (MathIllegalArgumentException ex) {<a name="line.789"></a>
<span class="sourceLineNo">790</span>            // ignored<a name="line.790"></a>
<span class="sourceLineNo">791</span>        }<a name="line.791"></a>
<span class="sourceLineNo">792</span>        double[] quartiles;<a name="line.792"></a>
<span class="sourceLineNo">793</span>        long[] counts;<a name="line.793"></a>
<span class="sourceLineNo">794</span><a name="line.794"></a>
<span class="sourceLineNo">795</span>        // Mean 1<a name="line.795"></a>
<span class="sourceLineNo">796</span>        quartiles = TestUtils.getDistributionQuartiles(new ExponentialDistribution(1));<a name="line.796"></a>
<span class="sourceLineNo">797</span>        counts = new long[4];<a name="line.797"></a>
<span class="sourceLineNo">798</span>        randomData.reSeed(1000);<a name="line.798"></a>
<span class="sourceLineNo">799</span>        for (int i = 0; i &lt; 1000; i++) {<a name="line.799"></a>
<span class="sourceLineNo">800</span>            double value = randomData.nextExponential(1);<a name="line.800"></a>
<span class="sourceLineNo">801</span>            TestUtils.updateCounts(value, counts, quartiles);<a name="line.801"></a>
<span class="sourceLineNo">802</span>        }<a name="line.802"></a>
<span class="sourceLineNo">803</span>        TestUtils.assertChiSquareAccept(expected, counts, 0.001);<a name="line.803"></a>
<span class="sourceLineNo">804</span><a name="line.804"></a>
<span class="sourceLineNo">805</span>        // Mean 5<a name="line.805"></a>
<span class="sourceLineNo">806</span>        quartiles = TestUtils.getDistributionQuartiles(new ExponentialDistribution(5));<a name="line.806"></a>
<span class="sourceLineNo">807</span>        counts = new long[4];<a name="line.807"></a>
<span class="sourceLineNo">808</span>        randomData.reSeed(1000);<a name="line.808"></a>
<span class="sourceLineNo">809</span>        for (int i = 0; i &lt; 1000; i++) {<a name="line.809"></a>
<span class="sourceLineNo">810</span>            double value = randomData.nextExponential(5);<a name="line.810"></a>
<span class="sourceLineNo">811</span>            TestUtils.updateCounts(value, counts, quartiles);<a name="line.811"></a>
<span class="sourceLineNo">812</span>        }<a name="line.812"></a>
<span class="sourceLineNo">813</span>        TestUtils.assertChiSquareAccept(expected, counts, 0.001);<a name="line.813"></a>
<span class="sourceLineNo">814</span>    }<a name="line.814"></a>
<span class="sourceLineNo">815</span><a name="line.815"></a>
<span class="sourceLineNo">816</span>    /** test reseeding, algorithm/provider games */<a name="line.816"></a>
<span class="sourceLineNo">817</span>    @Test<a name="line.817"></a>
<span class="sourceLineNo">818</span>    public void testConfig() {<a name="line.818"></a>
<span class="sourceLineNo">819</span>        randomData.reSeed(1000);<a name="line.819"></a>
<span class="sourceLineNo">820</span>        double v = randomData.nextUniform(0, 1);<a name="line.820"></a>
<span class="sourceLineNo">821</span>        randomData.reSeed();<a name="line.821"></a>
<span class="sourceLineNo">822</span>        Assert.assertTrue("different seeds", FastMath.abs(v - randomData.nextUniform(0, 1)) &gt; 10E-12);<a name="line.822"></a>
<span class="sourceLineNo">823</span>        randomData.reSeed(1000);<a name="line.823"></a>
<span class="sourceLineNo">824</span>        Assert.assertEquals("same seeds", v, randomData.nextUniform(0, 1), 10E-12);<a name="line.824"></a>
<span class="sourceLineNo">825</span>        randomData.reSeedSecure(1000);<a name="line.825"></a>
<span class="sourceLineNo">826</span>        String hex = randomData.nextSecureHexString(40);<a name="line.826"></a>
<span class="sourceLineNo">827</span>        randomData.reSeedSecure();<a name="line.827"></a>
<span class="sourceLineNo">828</span>        Assert.assertTrue("different seeds", !hex.equals(randomData<a name="line.828"></a>
<span class="sourceLineNo">829</span>                .nextSecureHexString(40)));<a name="line.829"></a>
<span class="sourceLineNo">830</span>        randomData.reSeedSecure(1000);<a name="line.830"></a>
<span class="sourceLineNo">831</span>        Assert.assertTrue("same seeds", !hex<a name="line.831"></a>
<span class="sourceLineNo">832</span>                .equals(randomData.nextSecureHexString(40)));<a name="line.832"></a>
<span class="sourceLineNo">833</span><a name="line.833"></a>
<span class="sourceLineNo">834</span>        /*<a name="line.834"></a>
<span class="sourceLineNo">835</span>         * remove this test back soon, since it takes about 4 seconds<a name="line.835"></a>
<span class="sourceLineNo">836</span>         *<a name="line.836"></a>
<span class="sourceLineNo">837</span>         * try { randomData.setSecureAlgorithm("SHA1PRNG","SUN"); } catch<a name="line.837"></a>
<span class="sourceLineNo">838</span>         * (NoSuchProviderException ex) { ; } Assert.assertTrue("different seeds",<a name="line.838"></a>
<span class="sourceLineNo">839</span>         * !hex.equals(randomData.nextSecureHexString(40))); try {<a name="line.839"></a>
<span class="sourceLineNo">840</span>         * randomData.setSecureAlgorithm("NOSUCHTHING","SUN");<a name="line.840"></a>
<span class="sourceLineNo">841</span>         * Assert.fail("expecting NoSuchAlgorithmException"); } catch<a name="line.841"></a>
<span class="sourceLineNo">842</span>         * (NoSuchProviderException ex) { ; } catch (NoSuchAlgorithmException<a name="line.842"></a>
<span class="sourceLineNo">843</span>         * ex) { ; }<a name="line.843"></a>
<span class="sourceLineNo">844</span>         *<a name="line.844"></a>
<span class="sourceLineNo">845</span>         * try { randomData.setSecureAlgorithm("SHA1PRNG","NOSUCHPROVIDER");<a name="line.845"></a>
<span class="sourceLineNo">846</span>         * Assert.fail("expecting NoSuchProviderException"); } catch<a name="line.846"></a>
<span class="sourceLineNo">847</span>         * (NoSuchProviderException ex) { ; }<a name="line.847"></a>
<span class="sourceLineNo">848</span>         */<a name="line.848"></a>
<span class="sourceLineNo">849</span><a name="line.849"></a>
<span class="sourceLineNo">850</span>        // test reseeding without first using the generators<a name="line.850"></a>
<span class="sourceLineNo">851</span>        RandomDataGenerator rd = new RandomDataGenerator();<a name="line.851"></a>
<span class="sourceLineNo">852</span>        rd.reSeed(100);<a name="line.852"></a>
<span class="sourceLineNo">853</span>        rd.nextLong(1, 2);<a name="line.853"></a>
<span class="sourceLineNo">854</span>        RandomDataGenerator rd2 = new RandomDataGenerator();<a name="line.854"></a>
<span class="sourceLineNo">855</span>        rd2.reSeedSecure(2000);<a name="line.855"></a>
<span class="sourceLineNo">856</span>        rd2.nextSecureLong(1, 2);<a name="line.856"></a>
<span class="sourceLineNo">857</span>        rd = new RandomDataGenerator();<a name="line.857"></a>
<span class="sourceLineNo">858</span>        rd.reSeed();<a name="line.858"></a>
<span class="sourceLineNo">859</span>        rd.nextLong(1, 2);<a name="line.859"></a>
<span class="sourceLineNo">860</span>        rd2 = new RandomDataGenerator();<a name="line.860"></a>
<span class="sourceLineNo">861</span>        rd2.reSeedSecure();<a name="line.861"></a>
<span class="sourceLineNo">862</span>        rd2.nextSecureLong(1, 2);<a name="line.862"></a>
<span class="sourceLineNo">863</span>    }<a name="line.863"></a>
<span class="sourceLineNo">864</span><a name="line.864"></a>
<span class="sourceLineNo">865</span>    /** tests for nextSample() sampling from Collection */<a name="line.865"></a>
<span class="sourceLineNo">866</span>    @Test<a name="line.866"></a>
<span class="sourceLineNo">867</span>    public void testNextSample() {<a name="line.867"></a>
<span class="sourceLineNo">868</span>        Object[][] c = { { "0", "1" }, { "0", "2" }, { "0", "3" },<a name="line.868"></a>
<span class="sourceLineNo">869</span>                { "0", "4" }, { "1", "2" }, { "1", "3" }, { "1", "4" },<a name="line.869"></a>
<span class="sourceLineNo">870</span>                { "2", "3" }, { "2", "4" }, { "3", "4" } };<a name="line.870"></a>
<span class="sourceLineNo">871</span>        long[] observed = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };<a name="line.871"></a>
<span class="sourceLineNo">872</span>        double[] expected = { 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 };<a name="line.872"></a>
<span class="sourceLineNo">873</span><a name="line.873"></a>
<span class="sourceLineNo">874</span>        HashSet&lt;Object&gt; cPop = new HashSet&lt;Object&gt;(); // {0,1,2,3,4}<a name="line.874"></a>
<span class="sourceLineNo">875</span>        for (int i = 0; i &lt; 5; i++) {<a name="line.875"></a>
<span class="sourceLineNo">876</span>            cPop.add(Integer.toString(i));<a name="line.876"></a>
<span class="sourceLineNo">877</span>        }<a name="line.877"></a>
<span class="sourceLineNo">878</span><a name="line.878"></a>
<span class="sourceLineNo">879</span>        Object[] sets = new Object[10]; // 2-sets from 5<a name="line.879"></a>
<span class="sourceLineNo">880</span>        for (int i = 0; i &lt; 10; i++) {<a name="line.880"></a>
<span class="sourceLineNo">881</span>            HashSet&lt;Object&gt; hs = new HashSet&lt;Object&gt;();<a name="line.881"></a>
<span class="sourceLineNo">882</span>            hs.add(c[i][0]);<a name="line.882"></a>
<span class="sourceLineNo">883</span>            hs.add(c[i][1]);<a name="line.883"></a>
<span class="sourceLineNo">884</span>            sets[i] = hs;<a name="line.884"></a>
<span class="sourceLineNo">885</span>        }<a name="line.885"></a>
<span class="sourceLineNo">886</span><a name="line.886"></a>
<span class="sourceLineNo">887</span>        for (int i = 0; i &lt; 1000; i++) {<a name="line.887"></a>
<span class="sourceLineNo">888</span>            Object[] cSamp = randomData.nextSample(cPop, 2);<a name="line.888"></a>
<span class="sourceLineNo">889</span>            observed[findSample(sets, cSamp)]++;<a name="line.889"></a>
<span class="sourceLineNo">890</span>        }<a name="line.890"></a>
<span class="sourceLineNo">891</span><a name="line.891"></a>
<span class="sourceLineNo">892</span>        /*<a name="line.892"></a>
<span class="sourceLineNo">893</span>         * Use ChiSquare dist with df = 10-1 = 9, alpha = .001 Change to 21.67<a name="line.893"></a>
<span class="sourceLineNo">894</span>         * for alpha = .01<a name="line.894"></a>
<span class="sourceLineNo">895</span>         */<a name="line.895"></a>
<span class="sourceLineNo">896</span>        Assert.assertTrue("chi-square test -- will fail about 1 in 1000 times",<a name="line.896"></a>
<span class="sourceLineNo">897</span>                testStatistic.chiSquare(expected, observed) &lt; 27.88);<a name="line.897"></a>
<span class="sourceLineNo">898</span><a name="line.898"></a>
<span class="sourceLineNo">899</span>        // Make sure sample of size = size of collection returns same collection<a name="line.899"></a>
<span class="sourceLineNo">900</span>        HashSet&lt;Object&gt; hs = new HashSet&lt;Object&gt;();<a name="line.900"></a>
<span class="sourceLineNo">901</span>        hs.add("one");<a name="line.901"></a>
<span class="sourceLineNo">902</span>        Object[] one = randomData.nextSample(hs, 1);<a name="line.902"></a>
<span class="sourceLineNo">903</span>        String oneString = (String) one[0];<a name="line.903"></a>
<span class="sourceLineNo">904</span>        if ((one.length != 1) || !oneString.equals("one")) {<a name="line.904"></a>
<span class="sourceLineNo">905</span>            Assert.fail("bad sample for set size = 1, sample size = 1");<a name="line.905"></a>
<span class="sourceLineNo">906</span>        }<a name="line.906"></a>
<span class="sourceLineNo">907</span><a name="line.907"></a>
<span class="sourceLineNo">908</span>        // Make sure we fail for sample size &gt; collection size<a name="line.908"></a>
<span class="sourceLineNo">909</span>        try {<a name="line.909"></a>
<span class="sourceLineNo">910</span>            one = randomData.nextSample(hs, 2);<a name="line.910"></a>
<span class="sourceLineNo">911</span>            Assert.fail("sample size &gt; set size, expecting MathIllegalArgumentException");<a name="line.911"></a>
<span class="sourceLineNo">912</span>        } catch (MathIllegalArgumentException ex) {<a name="line.912"></a>
<span class="sourceLineNo">913</span>            // ignored<a name="line.913"></a>
<span class="sourceLineNo">914</span>        }<a name="line.914"></a>
<span class="sourceLineNo">915</span><a name="line.915"></a>
<span class="sourceLineNo">916</span>        // Make sure we fail for empty collection<a name="line.916"></a>
<span class="sourceLineNo">917</span>        try {<a name="line.917"></a>
<span class="sourceLineNo">918</span>            hs = new HashSet&lt;Object&gt;();<a name="line.918"></a>
<span class="sourceLineNo">919</span>            one = randomData.nextSample(hs, 0);<a name="line.919"></a>
<span class="sourceLineNo">920</span>            Assert.fail("n = k = 0, expecting MathIllegalArgumentException");<a name="line.920"></a>
<span class="sourceLineNo">921</span>        } catch (MathIllegalArgumentException ex) {<a name="line.921"></a>
<span class="sourceLineNo">922</span>            // ignored<a name="line.922"></a>
<span class="sourceLineNo">923</span>        }<a name="line.923"></a>
<span class="sourceLineNo">924</span>    }<a name="line.924"></a>
<span class="sourceLineNo">925</span><a name="line.925"></a>
<span class="sourceLineNo">926</span>    @SuppressWarnings("unchecked")<a name="line.926"></a>
<span class="sourceLineNo">927</span>    private int findSample(Object[] u, Object[] samp) {<a name="line.927"></a>
<span class="sourceLineNo">928</span>        for (int i = 0; i &lt; u.length; i++) {<a name="line.928"></a>
<span class="sourceLineNo">929</span>            HashSet&lt;Object&gt; set = (HashSet&lt;Object&gt;) u[i];<a name="line.929"></a>
<span class="sourceLineNo">930</span>            HashSet&lt;Object&gt; sampSet = new HashSet&lt;Object&gt;();<a name="line.930"></a>
<span class="sourceLineNo">931</span>            for (int j = 0; j &lt; samp.length; j++) {<a name="line.931"></a>
<span class="sourceLineNo">932</span>                sampSet.add(samp[j]);<a name="line.932"></a>
<span class="sourceLineNo">933</span>            }<a name="line.933"></a>
<span class="sourceLineNo">934</span>            if (set.equals(sampSet)) {<a name="line.934"></a>
<span class="sourceLineNo">935</span>                return i;<a name="line.935"></a>
<span class="sourceLineNo">936</span>            }<a name="line.936"></a>
<span class="sourceLineNo">937</span>        }<a name="line.937"></a>
<span class="sourceLineNo">938</span>        Assert.fail("sample not found:{" + samp[0] + "," + samp[1] + "}");<a name="line.938"></a>
<span class="sourceLineNo">939</span>        return -1;<a name="line.939"></a>
<span class="sourceLineNo">940</span>    }<a name="line.940"></a>
<span class="sourceLineNo">941</span><a name="line.941"></a>
<span class="sourceLineNo">942</span>    /** tests for nextPermutation */<a name="line.942"></a>
<span class="sourceLineNo">943</span>    @Test<a name="line.943"></a>
<span class="sourceLineNo">944</span>    public void testNextPermutation() {<a name="line.944"></a>
<span class="sourceLineNo">945</span>        int[][] p = { { 0, 1, 2 }, { 0, 2, 1 }, { 1, 0, 2 }, { 1, 2, 0 },<a name="line.945"></a>
<span class="sourceLineNo">946</span>                { 2, 0, 1 }, { 2, 1, 0 } };<a name="line.946"></a>
<span class="sourceLineNo">947</span>        long[] observed = { 0, 0, 0, 0, 0, 0 };<a name="line.947"></a>
<span class="sourceLineNo">948</span>        double[] expected = { 100, 100, 100, 100, 100, 100 };<a name="line.948"></a>
<span class="sourceLineNo">949</span><a name="line.949"></a>
<span class="sourceLineNo">950</span>        for (int i = 0; i &lt; 600; i++) {<a name="line.950"></a>
<span class="sourceLineNo">951</span>            int[] perm = randomData.nextPermutation(3, 3);<a name="line.951"></a>
<span class="sourceLineNo">952</span>            observed[findPerm(p, perm)]++;<a name="line.952"></a>
<span class="sourceLineNo">953</span>        }<a name="line.953"></a>
<span class="sourceLineNo">954</span>        <a name="line.954"></a>
<span class="sourceLineNo">955</span>        String[] labels = {"{0, 1, 2}", "{ 0, 2, 1 }", "{ 1, 0, 2 }",<a name="line.955"></a>
<span class="sourceLineNo">956</span>                "{ 1, 2, 0 }", "{ 2, 0, 1 }", "{ 2, 1, 0 }"};<a name="line.956"></a>
<span class="sourceLineNo">957</span>        TestUtils.assertChiSquareAccept(labels, expected, observed, 0.001);<a name="line.957"></a>
<span class="sourceLineNo">958</span><a name="line.958"></a>
<span class="sourceLineNo">959</span>        // Check size = 1 boundary case<a name="line.959"></a>
<span class="sourceLineNo">960</span>        int[] perm = randomData.nextPermutation(1, 1);<a name="line.960"></a>
<span class="sourceLineNo">961</span>        if ((perm.length != 1) || (perm[0] != 0)) {<a name="line.961"></a>
<span class="sourceLineNo">962</span>            Assert.fail("bad permutation for n = 1, sample k = 1");<a name="line.962"></a>
<span class="sourceLineNo">963</span><a name="line.963"></a>
<span class="sourceLineNo">964</span>            // Make sure we fail for k size &gt; n<a name="line.964"></a>
<span class="sourceLineNo">965</span>            try {<a name="line.965"></a>
<span class="sourceLineNo">966</span>                perm = randomData.nextPermutation(2, 3);<a name="line.966"></a>
<span class="sourceLineNo">967</span>                Assert.fail("permutation k &gt; n, expecting MathIllegalArgumentException");<a name="line.967"></a>
<span class="sourceLineNo">968</span>            } catch (MathIllegalArgumentException ex) {<a name="line.968"></a>
<span class="sourceLineNo">969</span>                // ignored<a name="line.969"></a>
<span class="sourceLineNo">970</span>            }<a name="line.970"></a>
<span class="sourceLineNo">971</span><a name="line.971"></a>
<span class="sourceLineNo">972</span>            // Make sure we fail for n = 0<a name="line.972"></a>
<span class="sourceLineNo">973</span>            try {<a name="line.973"></a>
<span class="sourceLineNo">974</span>                perm = randomData.nextPermutation(0, 0);<a name="line.974"></a>
<span class="sourceLineNo">975</span>                Assert.fail("permutation k = n = 0, expecting MathIllegalArgumentException");<a name="line.975"></a>
<span class="sourceLineNo">976</span>            } catch (MathIllegalArgumentException ex) {<a name="line.976"></a>
<span class="sourceLineNo">977</span>                // ignored<a name="line.977"></a>
<span class="sourceLineNo">978</span>            }<a name="line.978"></a>
<span class="sourceLineNo">979</span><a name="line.979"></a>
<span class="sourceLineNo">980</span>            // Make sure we fail for k &lt; n &lt; 0<a name="line.980"></a>
<span class="sourceLineNo">981</span>            try {<a name="line.981"></a>
<span class="sourceLineNo">982</span>                perm = randomData.nextPermutation(-1, -3);<a name="line.982"></a>
<span class="sourceLineNo">983</span>                Assert.fail("permutation k &lt; n &lt; 0, expecting MathIllegalArgumentException");<a name="line.983"></a>
<span class="sourceLineNo">984</span>            } catch (MathIllegalArgumentException ex) {<a name="line.984"></a>
<span class="sourceLineNo">985</span>                // ignored<a name="line.985"></a>
<span class="sourceLineNo">986</span>            }<a name="line.986"></a>
<span class="sourceLineNo">987</span><a name="line.987"></a>
<span class="sourceLineNo">988</span>        }<a name="line.988"></a>
<span class="sourceLineNo">989</span>    }<a name="line.989"></a>
<span class="sourceLineNo">990</span><a name="line.990"></a>
<span class="sourceLineNo">991</span>    // Disable until we have equals<a name="line.991"></a>
<span class="sourceLineNo">992</span>    //public void testSerial() {<a name="line.992"></a>
<span class="sourceLineNo">993</span>    //    Assert.assertEquals(randomData, TestUtils.serializeAndRecover(randomData));<a name="line.993"></a>
<span class="sourceLineNo">994</span>    //}<a name="line.994"></a>
<span class="sourceLineNo">995</span><a name="line.995"></a>
<span class="sourceLineNo">996</span>    private int findPerm(int[][] p, int[] samp) {<a name="line.996"></a>
<span class="sourceLineNo">997</span>        for (int i = 0; i &lt; p.length; i++) {<a name="line.997"></a>
<span class="sourceLineNo">998</span>            boolean good = true;<a name="line.998"></a>
<span class="sourceLineNo">999</span>            for (int j = 0; j &lt; samp.length; j++) {<a name="line.999"></a>
<span class="sourceLineNo">1000</span>                if (samp[j] != p[i][j]) {<a name="line.1000"></a>
<span class="sourceLineNo">1001</span>                    good = false;<a name="line.1001"></a>
<span class="sourceLineNo">1002</span>                }<a name="line.1002"></a>
<span class="sourceLineNo">1003</span>            }<a name="line.1003"></a>
<span class="sourceLineNo">1004</span>            if (good) {<a name="line.1004"></a>
<span class="sourceLineNo">1005</span>                return i;<a name="line.1005"></a>
<span class="sourceLineNo">1006</span>            }<a name="line.1006"></a>
<span class="sourceLineNo">1007</span>        }<a name="line.1007"></a>
<span class="sourceLineNo">1008</span>        Assert.fail("permutation not found");<a name="line.1008"></a>
<span class="sourceLineNo">1009</span>        return -1;<a name="line.1009"></a>
<span class="sourceLineNo">1010</span>    }<a name="line.1010"></a>
<span class="sourceLineNo">1011</span><a name="line.1011"></a>
<span class="sourceLineNo">1012</span>    @Test<a name="line.1012"></a>
<span class="sourceLineNo">1013</span>    public void testNextInversionDeviate() {<a name="line.1013"></a>
<span class="sourceLineNo">1014</span>        // Set the seed for the default random generator<a name="line.1014"></a>
<span class="sourceLineNo">1015</span>        RandomGenerator rg = new Well19937c(100);<a name="line.1015"></a>
<span class="sourceLineNo">1016</span>        RandomDataGenerator rdg = new RandomDataGenerator(rg);<a name="line.1016"></a>
<span class="sourceLineNo">1017</span>        double[] quantiles = new double[10];<a name="line.1017"></a>
<span class="sourceLineNo">1018</span>        for (int i = 0; i &lt; 10; i++) {<a name="line.1018"></a>
<span class="sourceLineNo">1019</span>            quantiles[i] = rdg.nextUniform(0, 1);<a name="line.1019"></a>
<span class="sourceLineNo">1020</span>        }<a name="line.1020"></a>
<span class="sourceLineNo">1021</span>        // Reseed again so the inversion generator gets the same sequence<a name="line.1021"></a>
<span class="sourceLineNo">1022</span>        rg.setSeed(100);<a name="line.1022"></a>
<span class="sourceLineNo">1023</span>        BetaDistribution betaDistribution = new BetaDistribution(rg, 2, 4,<a name="line.1023"></a>
<span class="sourceLineNo">1024</span>                                                                 BetaDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);<a name="line.1024"></a>
<span class="sourceLineNo">1025</span>        /*<a name="line.1025"></a>
<span class="sourceLineNo">1026</span>         *  Generate a sequence of deviates using inversion - the distribution function<a name="line.1026"></a>
<span class="sourceLineNo">1027</span>         *  evaluated at the random value from the distribution should match the uniform<a name="line.1027"></a>
<span class="sourceLineNo">1028</span>         *  random value used to generate it, which is stored in the quantiles[] array.<a name="line.1028"></a>
<span class="sourceLineNo">1029</span>         */<a name="line.1029"></a>
<span class="sourceLineNo">1030</span>        for (int i = 0; i &lt; 10; i++) {<a name="line.1030"></a>
<span class="sourceLineNo">1031</span>            double value = betaDistribution.sample();<a name="line.1031"></a>
<span class="sourceLineNo">1032</span>            Assert.assertEquals(betaDistribution.cumulativeProbability(value), quantiles[i], 10E-9);<a name="line.1032"></a>
<span class="sourceLineNo">1033</span>        }<a name="line.1033"></a>
<span class="sourceLineNo">1034</span>    }<a name="line.1034"></a>
<span class="sourceLineNo">1035</span><a name="line.1035"></a>
<span class="sourceLineNo">1036</span>    @Test<a name="line.1036"></a>
<span class="sourceLineNo">1037</span>    public void testNextBeta() {<a name="line.1037"></a>
<span class="sourceLineNo">1038</span>        double[] quartiles = TestUtils.getDistributionQuartiles(new BetaDistribution(2,5));<a name="line.1038"></a>
<span class="sourceLineNo">1039</span>        long[] counts = new long[4];<a name="line.1039"></a>
<span class="sourceLineNo">1040</span>        randomData.reSeed(1000);<a name="line.1040"></a>
<span class="sourceLineNo">1041</span>        for (int i = 0; i &lt; 1000; i++) {<a name="line.1041"></a>
<span class="sourceLineNo">1042</span>            double value = randomData.nextBeta(2, 5);<a name="line.1042"></a>
<span class="sourceLineNo">1043</span>            TestUtils.updateCounts(value, counts, quartiles);<a name="line.1043"></a>
<span class="sourceLineNo">1044</span>        }<a name="line.1044"></a>
<span class="sourceLineNo">1045</span>        TestUtils.assertChiSquareAccept(expected, counts, 0.001);<a name="line.1045"></a>
<span class="sourceLineNo">1046</span>    }<a name="line.1046"></a>
<span class="sourceLineNo">1047</span><a name="line.1047"></a>
<span class="sourceLineNo">1048</span>    @Test<a name="line.1048"></a>
<span class="sourceLineNo">1049</span>    public void testNextCauchy() {<a name="line.1049"></a>
<span class="sourceLineNo">1050</span>        double[] quartiles = TestUtils.getDistributionQuartiles(new CauchyDistribution(1.2, 2.1));<a name="line.1050"></a>
<span class="sourceLineNo">1051</span>        long[] counts = new long[4];<a name="line.1051"></a>
<span class="sourceLineNo">1052</span>        randomData.reSeed(1000);<a name="line.1052"></a>
<span class="sourceLineNo">1053</span>        for (int i = 0; i &lt; 1000; i++) {<a name="line.1053"></a>
<span class="sourceLineNo">1054</span>            double value = randomData.nextCauchy(1.2, 2.1);<a name="line.1054"></a>
<span class="sourceLineNo">1055</span>            TestUtils.updateCounts(value, counts, quartiles);<a name="line.1055"></a>
<span class="sourceLineNo">1056</span>        }<a name="line.1056"></a>
<span class="sourceLineNo">1057</span>        TestUtils.assertChiSquareAccept(expected, counts, 0.001);<a name="line.1057"></a>
<span class="sourceLineNo">1058</span>    }<a name="line.1058"></a>
<span class="sourceLineNo">1059</span><a name="line.1059"></a>
<span class="sourceLineNo">1060</span>    @Test<a name="line.1060"></a>
<span class="sourceLineNo">1061</span>    public void testNextChiSquare() {<a name="line.1061"></a>
<span class="sourceLineNo">1062</span>        double[] quartiles = TestUtils.getDistributionQuartiles(new ChiSquaredDistribution(12));<a name="line.1062"></a>
<span class="sourceLineNo">1063</span>        long[] counts = new long[4];<a name="line.1063"></a>
<span class="sourceLineNo">1064</span>        randomData.reSeed(1000);<a name="line.1064"></a>
<span class="sourceLineNo">1065</span>        for (int i = 0; i &lt; 1000; i++) {<a name="line.1065"></a>
<span class="sourceLineNo">1066</span>            double value = randomData.nextChiSquare(12);<a name="line.1066"></a>
<span class="sourceLineNo">1067</span>            TestUtils.updateCounts(value, counts, quartiles);<a name="line.1067"></a>
<span class="sourceLineNo">1068</span>        }<a name="line.1068"></a>
<span class="sourceLineNo">1069</span>        TestUtils.assertChiSquareAccept(expected, counts, 0.001);<a name="line.1069"></a>
<span class="sourceLineNo">1070</span>    }<a name="line.1070"></a>
<span class="sourceLineNo">1071</span><a name="line.1071"></a>
<span class="sourceLineNo">1072</span>    @Test<a name="line.1072"></a>
<span class="sourceLineNo">1073</span>    public void testNextF() {<a name="line.1073"></a>
<span class="sourceLineNo">1074</span>        double[] quartiles = TestUtils.getDistributionQuartiles(new FDistribution(12, 5));<a name="line.1074"></a>
<span class="sourceLineNo">1075</span>        long[] counts = new long[4];<a name="line.1075"></a>
<span class="sourceLineNo">1076</span>        randomData.reSeed(1000);<a name="line.1076"></a>
<span class="sourceLineNo">1077</span>        for (int i = 0; i &lt; 1000; i++) {<a name="line.1077"></a>
<span class="sourceLineNo">1078</span>            double value = randomData.nextF(12, 5);<a name="line.1078"></a>
<span class="sourceLineNo">1079</span>            TestUtils.updateCounts(value, counts, quartiles);<a name="line.1079"></a>
<span class="sourceLineNo">1080</span>        }<a name="line.1080"></a>
<span class="sourceLineNo">1081</span>        TestUtils.assertChiSquareAccept(expected, counts, 0.001);<a name="line.1081"></a>
<span class="sourceLineNo">1082</span>    }<a name="line.1082"></a>
<span class="sourceLineNo">1083</span><a name="line.1083"></a>
<span class="sourceLineNo">1084</span>    @Test<a name="line.1084"></a>
<span class="sourceLineNo">1085</span>    public void testNextGamma() {<a name="line.1085"></a>
<span class="sourceLineNo">1086</span>        double[] quartiles;<a name="line.1086"></a>
<span class="sourceLineNo">1087</span>        long[] counts;<a name="line.1087"></a>
<span class="sourceLineNo">1088</span><a name="line.1088"></a>
<span class="sourceLineNo">1089</span>        // Tests shape &gt; 1, one case in the rejection sampling<a name="line.1089"></a>
<span class="sourceLineNo">1090</span>        quartiles = TestUtils.getDistributionQuartiles(new GammaDistribution(4, 2));<a name="line.1090"></a>
<span class="sourceLineNo">1091</span>        counts = new long[4];<a name="line.1091"></a>
<span class="sourceLineNo">1092</span>        randomData.reSeed(1000);<a name="line.1092"></a>
<span class="sourceLineNo">1093</span>        for (int i = 0; i &lt; 1000; i++) {<a name="line.1093"></a>
<span class="sourceLineNo">1094</span>            double value = randomData.nextGamma(4, 2);<a name="line.1094"></a>
<span class="sourceLineNo">1095</span>            TestUtils.updateCounts(value, counts, quartiles);<a name="line.1095"></a>
<span class="sourceLineNo">1096</span>        }<a name="line.1096"></a>
<span class="sourceLineNo">1097</span>        TestUtils.assertChiSquareAccept(expected, counts, 0.001);<a name="line.1097"></a>
<span class="sourceLineNo">1098</span><a name="line.1098"></a>
<span class="sourceLineNo">1099</span>        // Tests shape &lt;= 1, another case in the rejection sampling<a name="line.1099"></a>
<span class="sourceLineNo">1100</span>        quartiles = TestUtils.getDistributionQuartiles(new GammaDistribution(0.3, 3));<a name="line.1100"></a>
<span class="sourceLineNo">1101</span>        counts = new long[4];<a name="line.1101"></a>
<span class="sourceLineNo">1102</span>        randomData.reSeed(1000);<a name="line.1102"></a>
<span class="sourceLineNo">1103</span>        for (int i = 0; i &lt; 1000; i++) {<a name="line.1103"></a>
<span class="sourceLineNo">1104</span>            double value = randomData.nextGamma(0.3, 3);<a name="line.1104"></a>
<span class="sourceLineNo">1105</span>            TestUtils.updateCounts(value, counts, quartiles);<a name="line.1105"></a>
<span class="sourceLineNo">1106</span>        }<a name="line.1106"></a>
<span class="sourceLineNo">1107</span>        TestUtils.assertChiSquareAccept(expected, counts, 0.001);<a name="line.1107"></a>
<span class="sourceLineNo">1108</span>    }<a name="line.1108"></a>
<span class="sourceLineNo">1109</span><a name="line.1109"></a>
<span class="sourceLineNo">1110</span>    @Test<a name="line.1110"></a>
<span class="sourceLineNo">1111</span>    public void testNextT() {<a name="line.1111"></a>
<span class="sourceLineNo">1112</span>        double[] quartiles = TestUtils.getDistributionQuartiles(new TDistribution(10));<a name="line.1112"></a>
<span class="sourceLineNo">1113</span>        long[] counts = new long[4];<a name="line.1113"></a>
<span class="sourceLineNo">1114</span>        randomData.reSeed(1000);<a name="line.1114"></a>
<span class="sourceLineNo">1115</span>        for (int i = 0; i &lt; 1000; i++) {<a name="line.1115"></a>
<span class="sourceLineNo">1116</span>            double value = randomData.nextT(10);<a name="line.1116"></a>
<span class="sourceLineNo">1117</span>            TestUtils.updateCounts(value, counts, quartiles);<a name="line.1117"></a>
<span class="sourceLineNo">1118</span>        }<a name="line.1118"></a>
<span class="sourceLineNo">1119</span>        TestUtils.assertChiSquareAccept(expected, counts, 0.001);<a name="line.1119"></a>
<span class="sourceLineNo">1120</span>    }<a name="line.1120"></a>
<span class="sourceLineNo">1121</span><a name="line.1121"></a>
<span class="sourceLineNo">1122</span>    @Test<a name="line.1122"></a>
<span class="sourceLineNo">1123</span>    public void testNextWeibull() {<a name="line.1123"></a>
<span class="sourceLineNo">1124</span>        double[] quartiles = TestUtils.getDistributionQuartiles(new WeibullDistribution(1.2, 2.1));<a name="line.1124"></a>
<span class="sourceLineNo">1125</span>        long[] counts = new long[4];<a name="line.1125"></a>
<span class="sourceLineNo">1126</span>        randomData.reSeed(1000);<a name="line.1126"></a>
<span class="sourceLineNo">1127</span>        for (int i = 0; i &lt; 1000; i++) {<a name="line.1127"></a>
<span class="sourceLineNo">1128</span>            double value = randomData.nextWeibull(1.2, 2.1);<a name="line.1128"></a>
<span class="sourceLineNo">1129</span>            TestUtils.updateCounts(value, counts, quartiles);<a name="line.1129"></a>
<span class="sourceLineNo">1130</span>        }<a name="line.1130"></a>
<span class="sourceLineNo">1131</span>        TestUtils.assertChiSquareAccept(expected, counts, 0.001);<a name="line.1131"></a>
<span class="sourceLineNo">1132</span>    }<a name="line.1132"></a>
<span class="sourceLineNo">1133</span><a name="line.1133"></a>
<span class="sourceLineNo">1134</span>    @Test<a name="line.1134"></a>
<span class="sourceLineNo">1135</span>    public void testNextBinomial() {<a name="line.1135"></a>
<span class="sourceLineNo">1136</span>        BinomialDistributionTest testInstance = new BinomialDistributionTest();<a name="line.1136"></a>
<span class="sourceLineNo">1137</span>        int[] densityPoints = testInstance.makeDensityTestPoints();<a name="line.1137"></a>
<span class="sourceLineNo">1138</span>        double[] densityValues = testInstance.makeDensityTestValues();<a name="line.1138"></a>
<span class="sourceLineNo">1139</span>        int sampleSize = 1000;<a name="line.1139"></a>
<span class="sourceLineNo">1140</span>        int length = TestUtils.eliminateZeroMassPoints(densityPoints, densityValues);<a name="line.1140"></a>
<span class="sourceLineNo">1141</span>        BinomialDistribution distribution = (BinomialDistribution) testInstance.makeDistribution();<a name="line.1141"></a>
<span class="sourceLineNo">1142</span>        double[] expectedCounts = new double[length];<a name="line.1142"></a>
<span class="sourceLineNo">1143</span>        long[] observedCounts = new long[length];<a name="line.1143"></a>
<span class="sourceLineNo">1144</span>        for (int i = 0; i &lt; length; i++) {<a name="line.1144"></a>
<span class="sourceLineNo">1145</span>            expectedCounts[i] = sampleSize * densityValues[i];<a name="line.1145"></a>
<span class="sourceLineNo">1146</span>        }<a name="line.1146"></a>
<span class="sourceLineNo">1147</span>        randomData.reSeed(1000);<a name="line.1147"></a>
<span class="sourceLineNo">1148</span>        for (int i = 0; i &lt; sampleSize; i++) {<a name="line.1148"></a>
<span class="sourceLineNo">1149</span>          int value = randomData.nextBinomial(distribution.getNumberOfTrials(),<a name="line.1149"></a>
<span class="sourceLineNo">1150</span>                  distribution.getProbabilityOfSuccess());<a name="line.1150"></a>
<span class="sourceLineNo">1151</span>          for (int j = 0; j &lt; length; j++) {<a name="line.1151"></a>
<span class="sourceLineNo">1152</span>              if (value == densityPoints[j]) {<a name="line.1152"></a>
<span class="sourceLineNo">1153</span>                  observedCounts[j]++;<a name="line.1153"></a>
<span class="sourceLineNo">1154</span>              }<a name="line.1154"></a>
<span class="sourceLineNo">1155</span>          }<a name="line.1155"></a>
<span class="sourceLineNo">1156</span>        }<a name="line.1156"></a>
<span class="sourceLineNo">1157</span>        TestUtils.assertChiSquareAccept(densityPoints, expectedCounts, observedCounts, .001);<a name="line.1157"></a>
<span class="sourceLineNo">1158</span>    }<a name="line.1158"></a>
<span class="sourceLineNo">1159</span><a name="line.1159"></a>
<span class="sourceLineNo">1160</span>    @Test<a name="line.1160"></a>
<span class="sourceLineNo">1161</span>    public void testNextHypergeometric() {<a name="line.1161"></a>
<span class="sourceLineNo">1162</span>        HypergeometricDistributionTest testInstance = new HypergeometricDistributionTest();<a name="line.1162"></a>
<span class="sourceLineNo">1163</span>        int[] densityPoints = testInstance.makeDensityTestPoints();<a name="line.1163"></a>
<span class="sourceLineNo">1164</span>        double[] densityValues = testInstance.makeDensityTestValues();<a name="line.1164"></a>
<span class="sourceLineNo">1165</span>        int sampleSize = 1000;<a name="line.1165"></a>
<span class="sourceLineNo">1166</span>        int length = TestUtils.eliminateZeroMassPoints(densityPoints, densityValues);<a name="line.1166"></a>
<span class="sourceLineNo">1167</span>        HypergeometricDistribution distribution = (HypergeometricDistribution) testInstance.makeDistribution();<a name="line.1167"></a>
<span class="sourceLineNo">1168</span>        double[] expectedCounts = new double[length];<a name="line.1168"></a>
<span class="sourceLineNo">1169</span>        long[] observedCounts = new long[length];<a name="line.1169"></a>
<span class="sourceLineNo">1170</span>        for (int i = 0; i &lt; length; i++) {<a name="line.1170"></a>
<span class="sourceLineNo">1171</span>            expectedCounts[i] = sampleSize * densityValues[i];<a name="line.1171"></a>
<span class="sourceLineNo">1172</span>        }<a name="line.1172"></a>
<span class="sourceLineNo">1173</span>        randomData.reSeed(1000);<a name="line.1173"></a>
<span class="sourceLineNo">1174</span>        for (int i = 0; i &lt; sampleSize; i++) {<a name="line.1174"></a>
<span class="sourceLineNo">1175</span>          int value = randomData.nextHypergeometric(distribution.getPopulationSize(),<a name="line.1175"></a>
<span class="sourceLineNo">1176</span>                  distribution.getNumberOfSuccesses(), distribution.getSampleSize());<a name="line.1176"></a>
<span class="sourceLineNo">1177</span>          for (int j = 0; j &lt; length; j++) {<a name="line.1177"></a>
<span class="sourceLineNo">1178</span>              if (value == densityPoints[j]) {<a name="line.1178"></a>
<span class="sourceLineNo">1179</span>                  observedCounts[j]++;<a name="line.1179"></a>
<span class="sourceLineNo">1180</span>              }<a name="line.1180"></a>
<span class="sourceLineNo">1181</span>          }<a name="line.1181"></a>
<span class="sourceLineNo">1182</span>        }<a name="line.1182"></a>
<span class="sourceLineNo">1183</span>        TestUtils.assertChiSquareAccept(densityPoints, expectedCounts, observedCounts, .001);<a name="line.1183"></a>
<span class="sourceLineNo">1184</span>    }<a name="line.1184"></a>
<span class="sourceLineNo">1185</span><a name="line.1185"></a>
<span class="sourceLineNo">1186</span>    @Test<a name="line.1186"></a>
<span class="sourceLineNo">1187</span>    public void testNextPascal() {<a name="line.1187"></a>
<span class="sourceLineNo">1188</span>        PascalDistributionTest testInstance = new PascalDistributionTest();<a name="line.1188"></a>
<span class="sourceLineNo">1189</span>        int[] densityPoints = testInstance.makeDensityTestPoints();<a name="line.1189"></a>
<span class="sourceLineNo">1190</span>        double[] densityValues = testInstance.makeDensityTestValues();<a name="line.1190"></a>
<span class="sourceLineNo">1191</span>        int sampleSize = 1000;<a name="line.1191"></a>
<span class="sourceLineNo">1192</span>        int length = TestUtils.eliminateZeroMassPoints(densityPoints, densityValues);<a name="line.1192"></a>
<span class="sourceLineNo">1193</span>        PascalDistribution distribution = (PascalDistribution) testInstance.makeDistribution();<a name="line.1193"></a>
<span class="sourceLineNo">1194</span>        double[] expectedCounts = new double[length];<a name="line.1194"></a>
<span class="sourceLineNo">1195</span>        long[] observedCounts = new long[length];<a name="line.1195"></a>
<span class="sourceLineNo">1196</span>        for (int i = 0; i &lt; length; i++) {<a name="line.1196"></a>
<span class="sourceLineNo">1197</span>            expectedCounts[i] = sampleSize * densityValues[i];<a name="line.1197"></a>
<span class="sourceLineNo">1198</span>        }<a name="line.1198"></a>
<span class="sourceLineNo">1199</span>        randomData.reSeed(1000);<a name="line.1199"></a>
<span class="sourceLineNo">1200</span>        for (int i = 0; i &lt; sampleSize; i++) {<a name="line.1200"></a>
<span class="sourceLineNo">1201</span>          int value = randomData.nextPascal(distribution.getNumberOfSuccesses(), distribution.getProbabilityOfSuccess());<a name="line.1201"></a>
<span class="sourceLineNo">1202</span>          for (int j = 0; j &lt; length; j++) {<a name="line.1202"></a>
<span class="sourceLineNo">1203</span>              if (value == densityPoints[j]) {<a name="line.1203"></a>
<span class="sourceLineNo">1204</span>                  observedCounts[j]++;<a name="line.1204"></a>
<span class="sourceLineNo">1205</span>              }<a name="line.1205"></a>
<span class="sourceLineNo">1206</span>          }<a name="line.1206"></a>
<span class="sourceLineNo">1207</span>        }<a name="line.1207"></a>
<span class="sourceLineNo">1208</span>        TestUtils.assertChiSquareAccept(densityPoints, expectedCounts, observedCounts, .001);<a name="line.1208"></a>
<span class="sourceLineNo">1209</span>    }<a name="line.1209"></a>
<span class="sourceLineNo">1210</span><a name="line.1210"></a>
<span class="sourceLineNo">1211</span>    @Test<a name="line.1211"></a>
<span class="sourceLineNo">1212</span>    public void testNextZipf() {<a name="line.1212"></a>
<span class="sourceLineNo">1213</span>        ZipfDistributionTest testInstance = new ZipfDistributionTest();<a name="line.1213"></a>
<span class="sourceLineNo">1214</span>        int[] densityPoints = testInstance.makeDensityTestPoints();<a name="line.1214"></a>
<span class="sourceLineNo">1215</span>        double[] densityValues = testInstance.makeDensityTestValues();<a name="line.1215"></a>
<span class="sourceLineNo">1216</span>        int sampleSize = 1000;<a name="line.1216"></a>
<span class="sourceLineNo">1217</span>        int length = TestUtils.eliminateZeroMassPoints(densityPoints, densityValues);<a name="line.1217"></a>
<span class="sourceLineNo">1218</span>        ZipfDistribution distribution = (ZipfDistribution) testInstance.makeDistribution();<a name="line.1218"></a>
<span class="sourceLineNo">1219</span>        double[] expectedCounts = new double[length];<a name="line.1219"></a>
<span class="sourceLineNo">1220</span>        long[] observedCounts = new long[length];<a name="line.1220"></a>
<span class="sourceLineNo">1221</span>        for (int i = 0; i &lt; length; i++) {<a name="line.1221"></a>
<span class="sourceLineNo">1222</span>            expectedCounts[i] = sampleSize * densityValues[i];<a name="line.1222"></a>
<span class="sourceLineNo">1223</span>        }<a name="line.1223"></a>
<span class="sourceLineNo">1224</span>        randomData.reSeed(1000);<a name="line.1224"></a>
<span class="sourceLineNo">1225</span>        for (int i = 0; i &lt; sampleSize; i++) {<a name="line.1225"></a>
<span class="sourceLineNo">1226</span>          int value = randomData.nextZipf(distribution.getNumberOfElements(), distribution.getExponent());<a name="line.1226"></a>
<span class="sourceLineNo">1227</span>          for (int j = 0; j &lt; length; j++) {<a name="line.1227"></a>
<span class="sourceLineNo">1228</span>              if (value == densityPoints[j]) {<a name="line.1228"></a>
<span class="sourceLineNo">1229</span>                  observedCounts[j]++;<a name="line.1229"></a>
<span class="sourceLineNo">1230</span>              }<a name="line.1230"></a>
<span class="sourceLineNo">1231</span>          }<a name="line.1231"></a>
<span class="sourceLineNo">1232</span>        }<a name="line.1232"></a>
<span class="sourceLineNo">1233</span>        TestUtils.assertChiSquareAccept(densityPoints, expectedCounts, observedCounts, .001);<a name="line.1233"></a>
<span class="sourceLineNo">1234</span>    }<a name="line.1234"></a>
<span class="sourceLineNo">1235</span><a name="line.1235"></a>
<span class="sourceLineNo">1236</span>    @Test<a name="line.1236"></a>
<span class="sourceLineNo">1237</span>    /**<a name="line.1237"></a>
<span class="sourceLineNo">1238</span>     * MATH-720<a name="line.1238"></a>
<span class="sourceLineNo">1239</span>     */<a name="line.1239"></a>
<span class="sourceLineNo">1240</span>    public void testReseed() {<a name="line.1240"></a>
<span class="sourceLineNo">1241</span>        PoissonDistribution x = new PoissonDistribution(3.0);<a name="line.1241"></a>
<span class="sourceLineNo">1242</span>        x.reseedRandomGenerator(0);<a name="line.1242"></a>
<span class="sourceLineNo">1243</span>        final double u = x.sample();<a name="line.1243"></a>
<span class="sourceLineNo">1244</span>        PoissonDistribution y = new PoissonDistribution(3.0);<a name="line.1244"></a>
<span class="sourceLineNo">1245</span>        y.reseedRandomGenerator(0);<a name="line.1245"></a>
<span class="sourceLineNo">1246</span>        Assert.assertEquals(u, y.sample(), 0);<a name="line.1246"></a>
<span class="sourceLineNo">1247</span>    }<a name="line.1247"></a>
<span class="sourceLineNo">1248</span><a name="line.1248"></a>
<span class="sourceLineNo">1249</span>}<a name="line.1249"></a>




























































</pre>
</div>
</body>
</html>
