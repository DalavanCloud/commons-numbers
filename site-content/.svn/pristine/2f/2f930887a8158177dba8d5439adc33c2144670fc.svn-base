<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span>package org.apache.commons.math3.distribution;<a name="line.17"></a>
<span class="sourceLineNo">018</span><a name="line.18"></a>
<span class="sourceLineNo">019</span>import org.apache.commons.math3.exception.NotStrictlyPositiveException;<a name="line.19"></a>
<span class="sourceLineNo">020</span>import org.junit.Assert;<a name="line.20"></a>
<span class="sourceLineNo">021</span>import org.junit.Test;<a name="line.21"></a>
<span class="sourceLineNo">022</span>import org.apache.commons.math3.TestUtils;<a name="line.22"></a>
<span class="sourceLineNo">023</span>/**<a name="line.23"></a>
<span class="sourceLineNo">024</span> * Test cases for TDistribution.<a name="line.24"></a>
<span class="sourceLineNo">025</span> * Extends ContinuousDistributionAbstractTest.  See class javadoc for<a name="line.25"></a>
<span class="sourceLineNo">026</span> * ContinuousDistributionAbstractTest for details.<a name="line.26"></a>
<span class="sourceLineNo">027</span> *<a name="line.27"></a>
<span class="sourceLineNo">028</span> */<a name="line.28"></a>
<span class="sourceLineNo">029</span>public class TDistributionTest extends RealDistributionAbstractTest {<a name="line.29"></a>
<span class="sourceLineNo">030</span><a name="line.30"></a>
<span class="sourceLineNo">031</span>//-------------- Implementations for abstract methods -----------------------<a name="line.31"></a>
<span class="sourceLineNo">032</span><a name="line.32"></a>
<span class="sourceLineNo">033</span>    /** Creates the default continuous distribution instance to use in tests. */<a name="line.33"></a>
<span class="sourceLineNo">034</span>    @Override<a name="line.34"></a>
<span class="sourceLineNo">035</span>    public TDistribution makeDistribution() {<a name="line.35"></a>
<span class="sourceLineNo">036</span>        return new TDistribution(5.0);<a name="line.36"></a>
<span class="sourceLineNo">037</span>    }<a name="line.37"></a>
<span class="sourceLineNo">038</span><a name="line.38"></a>
<span class="sourceLineNo">039</span>    /** Creates the default cumulative probability distribution test input values */<a name="line.39"></a>
<span class="sourceLineNo">040</span>    @Override<a name="line.40"></a>
<span class="sourceLineNo">041</span>    public double[] makeCumulativeTestPoints() {<a name="line.41"></a>
<span class="sourceLineNo">042</span>        // quantiles computed using R version 2.9.2<a name="line.42"></a>
<span class="sourceLineNo">043</span>        return new double[] {-5.89342953136, -3.36492999891, -2.57058183564, -2.01504837333, -1.47588404882,<a name="line.43"></a>
<span class="sourceLineNo">044</span>                5.89342953136, 3.36492999891, 2.57058183564, 2.01504837333, 1.47588404882};<a name="line.44"></a>
<span class="sourceLineNo">045</span>    }<a name="line.45"></a>
<span class="sourceLineNo">046</span><a name="line.46"></a>
<span class="sourceLineNo">047</span>    /** Creates the default cumulative probability density test expected values */<a name="line.47"></a>
<span class="sourceLineNo">048</span>    @Override<a name="line.48"></a>
<span class="sourceLineNo">049</span>    public double[] makeCumulativeTestValues() {<a name="line.49"></a>
<span class="sourceLineNo">050</span>        return new double[] {0.001, 0.01, 0.025, 0.05, 0.1, 0.999,<a name="line.50"></a>
<span class="sourceLineNo">051</span>                0.990, 0.975, 0.950, 0.900};<a name="line.51"></a>
<span class="sourceLineNo">052</span>    }<a name="line.52"></a>
<span class="sourceLineNo">053</span><a name="line.53"></a>
<span class="sourceLineNo">054</span>    /** Creates the default probability density test expected values */<a name="line.54"></a>
<span class="sourceLineNo">055</span>    @Override<a name="line.55"></a>
<span class="sourceLineNo">056</span>    public double[] makeDensityTestValues() {<a name="line.56"></a>
<span class="sourceLineNo">057</span>        return new double[] {0.000756494565517, 0.0109109752919, 0.0303377878006, 0.0637967988952, 0.128289492005,<a name="line.57"></a>
<span class="sourceLineNo">058</span>                0.000756494565517, 0.0109109752919, 0.0303377878006, 0.0637967988952, 0.128289492005};<a name="line.58"></a>
<span class="sourceLineNo">059</span>    }<a name="line.59"></a>
<span class="sourceLineNo">060</span><a name="line.60"></a>
<span class="sourceLineNo">061</span>    // --------------------- Override tolerance  --------------<a name="line.61"></a>
<span class="sourceLineNo">062</span>    @Override<a name="line.62"></a>
<span class="sourceLineNo">063</span>    public void setUp() {<a name="line.63"></a>
<span class="sourceLineNo">064</span>        super.setUp();<a name="line.64"></a>
<span class="sourceLineNo">065</span>        setTolerance(1E-9);<a name="line.65"></a>
<span class="sourceLineNo">066</span>    }<a name="line.66"></a>
<span class="sourceLineNo">067</span><a name="line.67"></a>
<span class="sourceLineNo">068</span>    //---------------------------- Additional test cases -------------------------<a name="line.68"></a>
<span class="sourceLineNo">069</span>    /**<a name="line.69"></a>
<span class="sourceLineNo">070</span>     * @see &lt;a href="http://issues.apache.org/bugzilla/show_bug.cgi?id=27243"&gt;<a name="line.70"></a>
<span class="sourceLineNo">071</span>     *      Bug report that prompted this unit test.&lt;/a&gt;<a name="line.71"></a>
<span class="sourceLineNo">072</span>     */<a name="line.72"></a>
<span class="sourceLineNo">073</span>    @Test<a name="line.73"></a>
<span class="sourceLineNo">074</span>    public void testCumulativeProbabilityAgainstStackOverflow() {<a name="line.74"></a>
<span class="sourceLineNo">075</span>        TDistribution td = new TDistribution(5.);<a name="line.75"></a>
<span class="sourceLineNo">076</span>        td.cumulativeProbability(.1);<a name="line.76"></a>
<span class="sourceLineNo">077</span>        td.cumulativeProbability(.01);<a name="line.77"></a>
<span class="sourceLineNo">078</span>    }<a name="line.78"></a>
<span class="sourceLineNo">079</span><a name="line.79"></a>
<span class="sourceLineNo">080</span>    @Test<a name="line.80"></a>
<span class="sourceLineNo">081</span>    public void testSmallDf() {<a name="line.81"></a>
<span class="sourceLineNo">082</span>        setDistribution(new TDistribution(1d));<a name="line.82"></a>
<span class="sourceLineNo">083</span>        // quantiles computed using R version 2.9.2<a name="line.83"></a>
<span class="sourceLineNo">084</span>        setCumulativeTestPoints(new double[] {-318.308838986, -31.8205159538, -12.7062047362,<a name="line.84"></a>
<span class="sourceLineNo">085</span>                -6.31375151468, -3.07768353718, 318.308838986, 31.8205159538, 12.7062047362,<a name="line.85"></a>
<span class="sourceLineNo">086</span>                 6.31375151468, 3.07768353718});<a name="line.86"></a>
<span class="sourceLineNo">087</span>        setDensityTestValues(new double[] {3.14158231817e-06, 0.000314055924703, 0.00195946145194,<a name="line.87"></a>
<span class="sourceLineNo">088</span>                0.00778959736375, 0.0303958893917, 3.14158231817e-06, 0.000314055924703,<a name="line.88"></a>
<span class="sourceLineNo">089</span>                0.00195946145194, 0.00778959736375, 0.0303958893917});<a name="line.89"></a>
<span class="sourceLineNo">090</span>        setInverseCumulativeTestValues(getCumulativeTestPoints());<a name="line.90"></a>
<span class="sourceLineNo">091</span>        verifyCumulativeProbabilities();<a name="line.91"></a>
<span class="sourceLineNo">092</span>        verifyInverseCumulativeProbabilities();<a name="line.92"></a>
<span class="sourceLineNo">093</span>        verifyDensities();<a name="line.93"></a>
<span class="sourceLineNo">094</span>    }<a name="line.94"></a>
<span class="sourceLineNo">095</span><a name="line.95"></a>
<span class="sourceLineNo">096</span>    @Test<a name="line.96"></a>
<span class="sourceLineNo">097</span>    public void testInverseCumulativeProbabilityExtremes() {<a name="line.97"></a>
<span class="sourceLineNo">098</span>        setInverseCumulativeTestPoints(new double[] {0, 1});<a name="line.98"></a>
<span class="sourceLineNo">099</span>        setInverseCumulativeTestValues(<a name="line.99"></a>
<span class="sourceLineNo">100</span>                new double[] {Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY});<a name="line.100"></a>
<span class="sourceLineNo">101</span>        verifyInverseCumulativeProbabilities();<a name="line.101"></a>
<span class="sourceLineNo">102</span>    }<a name="line.102"></a>
<span class="sourceLineNo">103</span>    <a name="line.103"></a>
<span class="sourceLineNo">104</span>    @Test<a name="line.104"></a>
<span class="sourceLineNo">105</span>    public void testCumulativeProbablilityExtremes() {<a name="line.105"></a>
<span class="sourceLineNo">106</span>        TDistribution dist;<a name="line.106"></a>
<span class="sourceLineNo">107</span>        for (int i = 1; i &lt; 11; i++) {<a name="line.107"></a>
<span class="sourceLineNo">108</span>            dist = new TDistribution(i * 5);<a name="line.108"></a>
<span class="sourceLineNo">109</span>            Assert.assertEquals(1,<a name="line.109"></a>
<span class="sourceLineNo">110</span>                dist.cumulativeProbability(Double.POSITIVE_INFINITY), Double.MIN_VALUE);<a name="line.110"></a>
<span class="sourceLineNo">111</span>            Assert.assertEquals(0,<a name="line.111"></a>
<span class="sourceLineNo">112</span>                dist.cumulativeProbability(Double.NEGATIVE_INFINITY), Double.MIN_VALUE);<a name="line.112"></a>
<span class="sourceLineNo">113</span>        }   <a name="line.113"></a>
<span class="sourceLineNo">114</span>    }<a name="line.114"></a>
<span class="sourceLineNo">115</span><a name="line.115"></a>
<span class="sourceLineNo">116</span>    @Test<a name="line.116"></a>
<span class="sourceLineNo">117</span>    public void testDfAccessors() {<a name="line.117"></a>
<span class="sourceLineNo">118</span>        TDistribution dist = (TDistribution) getDistribution();<a name="line.118"></a>
<span class="sourceLineNo">119</span>        Assert.assertEquals(5d, dist.getDegreesOfFreedom(), Double.MIN_VALUE);<a name="line.119"></a>
<span class="sourceLineNo">120</span>    }<a name="line.120"></a>
<span class="sourceLineNo">121</span><a name="line.121"></a>
<span class="sourceLineNo">122</span>    @Test(expected=NotStrictlyPositiveException.class)<a name="line.122"></a>
<span class="sourceLineNo">123</span>    public void testPreconditions() {<a name="line.123"></a>
<span class="sourceLineNo">124</span>        new TDistribution(0);<a name="line.124"></a>
<span class="sourceLineNo">125</span>    }<a name="line.125"></a>
<span class="sourceLineNo">126</span><a name="line.126"></a>
<span class="sourceLineNo">127</span>    @Test<a name="line.127"></a>
<span class="sourceLineNo">128</span>    public void testMoments() {<a name="line.128"></a>
<span class="sourceLineNo">129</span>        final double tol = 1e-9;<a name="line.129"></a>
<span class="sourceLineNo">130</span>        TDistribution dist;<a name="line.130"></a>
<span class="sourceLineNo">131</span><a name="line.131"></a>
<span class="sourceLineNo">132</span>        dist = new TDistribution(1);<a name="line.132"></a>
<span class="sourceLineNo">133</span>        Assert.assertTrue(Double.isNaN(dist.getNumericalMean()));<a name="line.133"></a>
<span class="sourceLineNo">134</span>        Assert.assertTrue(Double.isNaN(dist.getNumericalVariance()));<a name="line.134"></a>
<span class="sourceLineNo">135</span><a name="line.135"></a>
<span class="sourceLineNo">136</span>        dist = new TDistribution(1.5);<a name="line.136"></a>
<span class="sourceLineNo">137</span>        Assert.assertEquals(dist.getNumericalMean(), 0, tol);<a name="line.137"></a>
<span class="sourceLineNo">138</span>        Assert.assertTrue(Double.isInfinite(dist.getNumericalVariance()));<a name="line.138"></a>
<span class="sourceLineNo">139</span><a name="line.139"></a>
<span class="sourceLineNo">140</span>        dist = new TDistribution(5);<a name="line.140"></a>
<span class="sourceLineNo">141</span>        Assert.assertEquals(dist.getNumericalMean(), 0, tol);<a name="line.141"></a>
<span class="sourceLineNo">142</span>        Assert.assertEquals(dist.getNumericalVariance(), 5d / (5d - 2d), tol);<a name="line.142"></a>
<span class="sourceLineNo">143</span>    }<a name="line.143"></a>
<span class="sourceLineNo">144</span><a name="line.144"></a>
<span class="sourceLineNo">145</span>    /*<a name="line.145"></a>
<span class="sourceLineNo">146</span>     * Adding this test to benchmark against tables published by NIST<a name="line.146"></a>
<span class="sourceLineNo">147</span>     * http://itl.nist.gov/div898/handbook/eda/section3/eda3672.htm<a name="line.147"></a>
<span class="sourceLineNo">148</span>     * Have chosen tabulated results for degrees of freedom 2,10,30,100<a name="line.148"></a>
<span class="sourceLineNo">149</span>     * Have chosen problevels from 0.10 to 0.001<a name="line.149"></a>
<span class="sourceLineNo">150</span>     */<a name="line.150"></a>
<span class="sourceLineNo">151</span>    @Test<a name="line.151"></a>
<span class="sourceLineNo">152</span>    public void nistData(){<a name="line.152"></a>
<span class="sourceLineNo">153</span>        double[] prob = new double[]{ 0.10,0.05,0.025,0.01,0.005,0.001};<a name="line.153"></a>
<span class="sourceLineNo">154</span>        double[] args2 = new double[]{1.886,2.920,4.303,6.965,9.925,22.327};<a name="line.154"></a>
<span class="sourceLineNo">155</span>        double[] args10 = new double[]{1.372,1.812,2.228,2.764,3.169,4.143};<a name="line.155"></a>
<span class="sourceLineNo">156</span>        double[] args30 = new double[]{1.310,1.697,2.042,2.457,2.750,3.385};<a name="line.156"></a>
<span class="sourceLineNo">157</span>        double[] args100= new double[]{1.290,1.660,1.984,2.364,2.626,3.174};<a name="line.157"></a>
<span class="sourceLineNo">158</span>        TestUtils.assertEquals(prob, makeNistResults(args2, 2), 1.0e-4);<a name="line.158"></a>
<span class="sourceLineNo">159</span>        TestUtils.assertEquals(prob, makeNistResults(args10, 10), 1.0e-4);<a name="line.159"></a>
<span class="sourceLineNo">160</span>        TestUtils.assertEquals(prob, makeNistResults(args30, 30), 1.0e-4);<a name="line.160"></a>
<span class="sourceLineNo">161</span>        TestUtils.assertEquals(prob, makeNistResults(args100, 100), 1.0e-4);<a name="line.161"></a>
<span class="sourceLineNo">162</span>        return;<a name="line.162"></a>
<span class="sourceLineNo">163</span>    }<a name="line.163"></a>
<span class="sourceLineNo">164</span>    private double[] makeNistResults(double[] args, int df){<a name="line.164"></a>
<span class="sourceLineNo">165</span>        TDistribution td =  new TDistribution(df);<a name="line.165"></a>
<span class="sourceLineNo">166</span>        double[] res  = new double[ args.length ];<a name="line.166"></a>
<span class="sourceLineNo">167</span>        for( int i = 0 ; i &lt; res.length ; i++){<a name="line.167"></a>
<span class="sourceLineNo">168</span>            res[i] = 1.0 - td.cumulativeProbability(args[i]);<a name="line.168"></a>
<span class="sourceLineNo">169</span>        }<a name="line.169"></a>
<span class="sourceLineNo">170</span>        return res;<a name="line.170"></a>
<span class="sourceLineNo">171</span>    }<a name="line.171"></a>
<span class="sourceLineNo">172</span>}<a name="line.172"></a>




























































</pre>
</div>
</body>
</html>
