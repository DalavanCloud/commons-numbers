<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>//Licensed to the Apache Software Foundation (ASF) under one<a name="line.1"></a>
<span class="sourceLineNo">002</span>//or more contributor license agreements.  See the NOTICE file<a name="line.2"></a>
<span class="sourceLineNo">003</span>//distributed with this work for additional information<a name="line.3"></a>
<span class="sourceLineNo">004</span>//regarding copyright ownership.  The ASF licenses this file<a name="line.4"></a>
<span class="sourceLineNo">005</span>//to you under the Apache License, Version 2.0 (the<a name="line.5"></a>
<span class="sourceLineNo">006</span>//"License"); you may not use this file except in compliance<a name="line.6"></a>
<span class="sourceLineNo">007</span>//with the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span><a name="line.8"></a>
<span class="sourceLineNo">009</span>//http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span><a name="line.10"></a>
<span class="sourceLineNo">011</span>//Unless required by applicable law or agreed to in writing,<a name="line.11"></a>
<span class="sourceLineNo">012</span>//software distributed under the License is distributed on an<a name="line.12"></a>
<span class="sourceLineNo">013</span>//"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY<a name="line.13"></a>
<span class="sourceLineNo">014</span>//KIND, either express or implied.  See the License for the<a name="line.14"></a>
<span class="sourceLineNo">015</span>//specific language governing permissions and limitations<a name="line.15"></a>
<span class="sourceLineNo">016</span>//under the License.<a name="line.16"></a>
<span class="sourceLineNo">017</span><a name="line.17"></a>
<span class="sourceLineNo">018</span>package org.apache.commons.math3.stat.descriptive.moment;<a name="line.18"></a>
<span class="sourceLineNo">019</span><a name="line.19"></a>
<span class="sourceLineNo">020</span>import org.apache.commons.math3.exception.DimensionMismatchException;<a name="line.20"></a>
<span class="sourceLineNo">021</span>import org.apache.commons.math3.TestUtils;<a name="line.21"></a>
<span class="sourceLineNo">022</span>import org.apache.commons.math3.linear.RealMatrix;<a name="line.22"></a>
<span class="sourceLineNo">023</span><a name="line.23"></a>
<span class="sourceLineNo">024</span>import org.junit.Test;<a name="line.24"></a>
<span class="sourceLineNo">025</span>import org.junit.Assert;<a name="line.25"></a>
<span class="sourceLineNo">026</span><a name="line.26"></a>
<span class="sourceLineNo">027</span>public class VectorialCovarianceTest {<a name="line.27"></a>
<span class="sourceLineNo">028</span>    private double[][] points;<a name="line.28"></a>
<span class="sourceLineNo">029</span><a name="line.29"></a>
<span class="sourceLineNo">030</span>    public VectorialCovarianceTest() {<a name="line.30"></a>
<span class="sourceLineNo">031</span>        points = new double[][] {<a name="line.31"></a>
<span class="sourceLineNo">032</span>            { 1.2, 2.3,  4.5},<a name="line.32"></a>
<span class="sourceLineNo">033</span>            {-0.7, 2.3,  5.0},<a name="line.33"></a>
<span class="sourceLineNo">034</span>            { 3.1, 0.0, -3.1},<a name="line.34"></a>
<span class="sourceLineNo">035</span>            { 6.0, 1.2,  4.2},<a name="line.35"></a>
<span class="sourceLineNo">036</span>            {-0.7, 2.3,  5.0}<a name="line.36"></a>
<span class="sourceLineNo">037</span>        };<a name="line.37"></a>
<span class="sourceLineNo">038</span>    }<a name="line.38"></a>
<span class="sourceLineNo">039</span><a name="line.39"></a>
<span class="sourceLineNo">040</span>    @Test<a name="line.40"></a>
<span class="sourceLineNo">041</span>    public void testMismatch() {<a name="line.41"></a>
<span class="sourceLineNo">042</span>        try {<a name="line.42"></a>
<span class="sourceLineNo">043</span>            new VectorialCovariance(8, true).increment(new double[5]);<a name="line.43"></a>
<span class="sourceLineNo">044</span>            Assert.fail("an exception should have been thrown");<a name="line.44"></a>
<span class="sourceLineNo">045</span>        } catch (DimensionMismatchException dme) {<a name="line.45"></a>
<span class="sourceLineNo">046</span>            Assert.assertEquals(5, dme.getArgument());<a name="line.46"></a>
<span class="sourceLineNo">047</span>            Assert.assertEquals(8, dme.getDimension());<a name="line.47"></a>
<span class="sourceLineNo">048</span>        }<a name="line.48"></a>
<span class="sourceLineNo">049</span>    }<a name="line.49"></a>
<span class="sourceLineNo">050</span><a name="line.50"></a>
<span class="sourceLineNo">051</span>    @Test<a name="line.51"></a>
<span class="sourceLineNo">052</span>    public void testSimplistic() {<a name="line.52"></a>
<span class="sourceLineNo">053</span>        VectorialCovariance stat = new VectorialCovariance(2, true);<a name="line.53"></a>
<span class="sourceLineNo">054</span>        stat.increment(new double[] {-1.0,  1.0});<a name="line.54"></a>
<span class="sourceLineNo">055</span>        stat.increment(new double[] { 1.0, -1.0});<a name="line.55"></a>
<span class="sourceLineNo">056</span>        RealMatrix c = stat.getResult();<a name="line.56"></a>
<span class="sourceLineNo">057</span>        Assert.assertEquals( 2.0, c.getEntry(0, 0), 1.0e-12);<a name="line.57"></a>
<span class="sourceLineNo">058</span>        Assert.assertEquals(-2.0, c.getEntry(1, 0), 1.0e-12);<a name="line.58"></a>
<span class="sourceLineNo">059</span>        Assert.assertEquals( 2.0, c.getEntry(1, 1), 1.0e-12);<a name="line.59"></a>
<span class="sourceLineNo">060</span>    }<a name="line.60"></a>
<span class="sourceLineNo">061</span><a name="line.61"></a>
<span class="sourceLineNo">062</span>    @Test<a name="line.62"></a>
<span class="sourceLineNo">063</span>    public void testBasicStats() {<a name="line.63"></a>
<span class="sourceLineNo">064</span><a name="line.64"></a>
<span class="sourceLineNo">065</span>        VectorialCovariance stat = new VectorialCovariance(points[0].length, true);<a name="line.65"></a>
<span class="sourceLineNo">066</span>        for (int i = 0; i &lt; points.length; ++i) {<a name="line.66"></a>
<span class="sourceLineNo">067</span>            stat.increment(points[i]);<a name="line.67"></a>
<span class="sourceLineNo">068</span>        }<a name="line.68"></a>
<span class="sourceLineNo">069</span><a name="line.69"></a>
<span class="sourceLineNo">070</span>        Assert.assertEquals(points.length, stat.getN());<a name="line.70"></a>
<span class="sourceLineNo">071</span><a name="line.71"></a>
<span class="sourceLineNo">072</span>        RealMatrix c = stat.getResult();<a name="line.72"></a>
<span class="sourceLineNo">073</span>        double[][] refC    = new double[][] {<a name="line.73"></a>
<span class="sourceLineNo">074</span>                { 8.0470, -1.9195, -3.4445},<a name="line.74"></a>
<span class="sourceLineNo">075</span>                {-1.9195,  1.0470,  3.2795},<a name="line.75"></a>
<span class="sourceLineNo">076</span>                {-3.4445,  3.2795, 12.2070}<a name="line.76"></a>
<span class="sourceLineNo">077</span>        };<a name="line.77"></a>
<span class="sourceLineNo">078</span><a name="line.78"></a>
<span class="sourceLineNo">079</span>        for (int i = 0; i &lt; c.getRowDimension(); ++i) {<a name="line.79"></a>
<span class="sourceLineNo">080</span>            for (int j = 0; j &lt;= i; ++j) {<a name="line.80"></a>
<span class="sourceLineNo">081</span>                Assert.assertEquals(refC[i][j], c.getEntry(i, j), 1.0e-12);<a name="line.81"></a>
<span class="sourceLineNo">082</span>            }<a name="line.82"></a>
<span class="sourceLineNo">083</span>        }<a name="line.83"></a>
<span class="sourceLineNo">084</span><a name="line.84"></a>
<span class="sourceLineNo">085</span>    }<a name="line.85"></a>
<span class="sourceLineNo">086</span><a name="line.86"></a>
<span class="sourceLineNo">087</span>    @Test<a name="line.87"></a>
<span class="sourceLineNo">088</span>    public void testSerial(){<a name="line.88"></a>
<span class="sourceLineNo">089</span>        VectorialCovariance stat = new VectorialCovariance(points[0].length, true);<a name="line.89"></a>
<span class="sourceLineNo">090</span>        Assert.assertEquals(stat, TestUtils.serializeAndRecover(stat));<a name="line.90"></a>
<span class="sourceLineNo">091</span>    }<a name="line.91"></a>
<span class="sourceLineNo">092</span>}<a name="line.92"></a>




























































</pre>
</div>
</body>
</html>
