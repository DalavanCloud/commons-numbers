<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span>package org.apache.commons.math3.distribution;<a name="line.17"></a>
<span class="sourceLineNo">018</span><a name="line.18"></a>
<span class="sourceLineNo">019</span>import static org.junit.Assert.assertEquals;<a name="line.19"></a>
<span class="sourceLineNo">020</span><a name="line.20"></a>
<span class="sourceLineNo">021</span>import java.util.ArrayList;<a name="line.21"></a>
<span class="sourceLineNo">022</span>import java.util.List;<a name="line.22"></a>
<span class="sourceLineNo">023</span><a name="line.23"></a>
<span class="sourceLineNo">024</span>import org.apache.commons.math3.exception.DimensionMismatchException;<a name="line.24"></a>
<span class="sourceLineNo">025</span>import org.apache.commons.math3.exception.MathArithmeticException;<a name="line.25"></a>
<span class="sourceLineNo">026</span>import org.apache.commons.math3.exception.NotANumberException;<a name="line.26"></a>
<span class="sourceLineNo">027</span>import org.apache.commons.math3.exception.NotFiniteNumberException;<a name="line.27"></a>
<span class="sourceLineNo">028</span>import org.apache.commons.math3.exception.NotPositiveException;<a name="line.28"></a>
<span class="sourceLineNo">029</span>import org.apache.commons.math3.util.FastMath;<a name="line.29"></a>
<span class="sourceLineNo">030</span>import org.apache.commons.math3.util.Pair;<a name="line.30"></a>
<span class="sourceLineNo">031</span>import org.junit.Assert;<a name="line.31"></a>
<span class="sourceLineNo">032</span>import org.junit.Test;<a name="line.32"></a>
<span class="sourceLineNo">033</span><a name="line.33"></a>
<span class="sourceLineNo">034</span>/**<a name="line.34"></a>
<span class="sourceLineNo">035</span> * Test class for {@link EnumeratedRealDistribution}.<a name="line.35"></a>
<span class="sourceLineNo">036</span> * <a name="line.36"></a>
<span class="sourceLineNo">037</span> */<a name="line.37"></a>
<span class="sourceLineNo">038</span>public class EnumeratedRealDistributionTest {<a name="line.38"></a>
<span class="sourceLineNo">039</span><a name="line.39"></a>
<span class="sourceLineNo">040</span>    /**<a name="line.40"></a>
<span class="sourceLineNo">041</span>     * The distribution object used for testing.<a name="line.41"></a>
<span class="sourceLineNo">042</span>     */<a name="line.42"></a>
<span class="sourceLineNo">043</span>    private final EnumeratedRealDistribution testDistribution;<a name="line.43"></a>
<span class="sourceLineNo">044</span><a name="line.44"></a>
<span class="sourceLineNo">045</span>    /**<a name="line.45"></a>
<span class="sourceLineNo">046</span>     * Creates the default distribution object used for testing.<a name="line.46"></a>
<span class="sourceLineNo">047</span>     */<a name="line.47"></a>
<span class="sourceLineNo">048</span>    public EnumeratedRealDistributionTest() {<a name="line.48"></a>
<span class="sourceLineNo">049</span>        // Non-sorted singleton array with duplicates should be allowed.<a name="line.49"></a>
<span class="sourceLineNo">050</span>        // Values with zero-probability do not extend the support.<a name="line.50"></a>
<span class="sourceLineNo">051</span>        testDistribution = new EnumeratedRealDistribution(<a name="line.51"></a>
<span class="sourceLineNo">052</span>                new double[]{3.0, -1.0, 3.0, 7.0, -2.0, 8.0},<a name="line.52"></a>
<span class="sourceLineNo">053</span>                new double[]{0.2, 0.2, 0.3, 0.3, 0.0, 0.0});<a name="line.53"></a>
<span class="sourceLineNo">054</span>    }<a name="line.54"></a>
<span class="sourceLineNo">055</span><a name="line.55"></a>
<span class="sourceLineNo">056</span>    /**<a name="line.56"></a>
<span class="sourceLineNo">057</span>     * Tests if the {@link EnumeratedRealDistribution} constructor throws<a name="line.57"></a>
<span class="sourceLineNo">058</span>     * exceptions for invalid data.<a name="line.58"></a>
<span class="sourceLineNo">059</span>     */<a name="line.59"></a>
<span class="sourceLineNo">060</span>    @Test<a name="line.60"></a>
<span class="sourceLineNo">061</span>    public void testExceptions() {<a name="line.61"></a>
<span class="sourceLineNo">062</span>        EnumeratedRealDistribution invalid = null;<a name="line.62"></a>
<span class="sourceLineNo">063</span>        try {<a name="line.63"></a>
<span class="sourceLineNo">064</span>            invalid = new EnumeratedRealDistribution(new double[]{1.0, 2.0}, new double[]{0.0});<a name="line.64"></a>
<span class="sourceLineNo">065</span>            Assert.fail("Expected DimensionMismatchException");<a name="line.65"></a>
<span class="sourceLineNo">066</span>        } catch (DimensionMismatchException e) {<a name="line.66"></a>
<span class="sourceLineNo">067</span>        }<a name="line.67"></a>
<span class="sourceLineNo">068</span>        try{<a name="line.68"></a>
<span class="sourceLineNo">069</span>        invalid = new EnumeratedRealDistribution(new double[]{1.0, 2.0}, new double[]{0.0, -1.0});<a name="line.69"></a>
<span class="sourceLineNo">070</span>            Assert.fail("Expected NotPositiveException");<a name="line.70"></a>
<span class="sourceLineNo">071</span>        } catch (NotPositiveException e) {<a name="line.71"></a>
<span class="sourceLineNo">072</span>        }<a name="line.72"></a>
<span class="sourceLineNo">073</span>        try {<a name="line.73"></a>
<span class="sourceLineNo">074</span>            invalid = new EnumeratedRealDistribution(new double[]{1.0, 2.0}, new double[]{0.0, 0.0});<a name="line.74"></a>
<span class="sourceLineNo">075</span>            Assert.fail("Expected MathArithmeticException");<a name="line.75"></a>
<span class="sourceLineNo">076</span>        } catch (MathArithmeticException e) {<a name="line.76"></a>
<span class="sourceLineNo">077</span>        }<a name="line.77"></a>
<span class="sourceLineNo">078</span>        try {<a name="line.78"></a>
<span class="sourceLineNo">079</span>            invalid = new EnumeratedRealDistribution(new double[]{1.0, 2.0}, new double[]{0.0, Double.NaN});<a name="line.79"></a>
<span class="sourceLineNo">080</span>            Assert.fail("Expected NotANumberException");<a name="line.80"></a>
<span class="sourceLineNo">081</span>        } catch (NotANumberException e) {<a name="line.81"></a>
<span class="sourceLineNo">082</span>        }<a name="line.82"></a>
<span class="sourceLineNo">083</span>        try {<a name="line.83"></a>
<span class="sourceLineNo">084</span>            invalid = new EnumeratedRealDistribution(new double[]{1.0, 2.0}, new double[]{0.0, Double.POSITIVE_INFINITY});<a name="line.84"></a>
<span class="sourceLineNo">085</span>            Assert.fail("Expected NotFiniteNumberException");<a name="line.85"></a>
<span class="sourceLineNo">086</span>        } catch (NotFiniteNumberException e) {<a name="line.86"></a>
<span class="sourceLineNo">087</span>        }<a name="line.87"></a>
<span class="sourceLineNo">088</span>        Assert.assertNull("Expected non-initialized DiscreteRealDistribution", invalid);<a name="line.88"></a>
<span class="sourceLineNo">089</span>    }<a name="line.89"></a>
<span class="sourceLineNo">090</span><a name="line.90"></a>
<span class="sourceLineNo">091</span>    /**<a name="line.91"></a>
<span class="sourceLineNo">092</span>     * Tests if the distribution returns proper probability values.<a name="line.92"></a>
<span class="sourceLineNo">093</span>     */<a name="line.93"></a>
<span class="sourceLineNo">094</span>    @Test<a name="line.94"></a>
<span class="sourceLineNo">095</span>    public void testProbability() {<a name="line.95"></a>
<span class="sourceLineNo">096</span>        double[] points = new double[]{-2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0};<a name="line.96"></a>
<span class="sourceLineNo">097</span>        double[] results = new double[]{0, 0.2, 0, 0, 0, 0.5, 0, 0, 0, 0.3, 0};<a name="line.97"></a>
<span class="sourceLineNo">098</span>        for (int p = 0; p &lt; points.length; p++) {<a name="line.98"></a>
<span class="sourceLineNo">099</span>            double density = testDistribution.probability(points[p]);<a name="line.99"></a>
<span class="sourceLineNo">100</span>            Assert.assertEquals(results[p], density, 0.0);<a name="line.100"></a>
<span class="sourceLineNo">101</span>        }<a name="line.101"></a>
<span class="sourceLineNo">102</span>    }<a name="line.102"></a>
<span class="sourceLineNo">103</span><a name="line.103"></a>
<span class="sourceLineNo">104</span>    /**<a name="line.104"></a>
<span class="sourceLineNo">105</span>     * Tests if the distribution returns proper density values.<a name="line.105"></a>
<span class="sourceLineNo">106</span>     */<a name="line.106"></a>
<span class="sourceLineNo">107</span>    @Test<a name="line.107"></a>
<span class="sourceLineNo">108</span>    public void testDensity() {<a name="line.108"></a>
<span class="sourceLineNo">109</span>        double[] points = new double[]{-2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0};<a name="line.109"></a>
<span class="sourceLineNo">110</span>        double[] results = new double[]{0, 0.2, 0, 0, 0, 0.5, 0, 0, 0, 0.3, 0};<a name="line.110"></a>
<span class="sourceLineNo">111</span>        for (int p = 0; p &lt; points.length; p++) {<a name="line.111"></a>
<span class="sourceLineNo">112</span>            double density = testDistribution.density(points[p]);<a name="line.112"></a>
<span class="sourceLineNo">113</span>            Assert.assertEquals(results[p], density, 0.0);<a name="line.113"></a>
<span class="sourceLineNo">114</span>        }<a name="line.114"></a>
<span class="sourceLineNo">115</span>    }<a name="line.115"></a>
<span class="sourceLineNo">116</span><a name="line.116"></a>
<span class="sourceLineNo">117</span>    /**<a name="line.117"></a>
<span class="sourceLineNo">118</span>     * Tests if the distribution returns proper cumulative probability values.<a name="line.118"></a>
<span class="sourceLineNo">119</span>     */<a name="line.119"></a>
<span class="sourceLineNo">120</span>    @Test<a name="line.120"></a>
<span class="sourceLineNo">121</span>    public void testCumulativeProbability() {<a name="line.121"></a>
<span class="sourceLineNo">122</span>        double[] points = new double[]{-2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0};<a name="line.122"></a>
<span class="sourceLineNo">123</span>        double[] results = new double[]{0, 0.2, 0.2, 0.2, 0.2, 0.7, 0.7, 0.7, 0.7, 1.0, 1.0};<a name="line.123"></a>
<span class="sourceLineNo">124</span>        for (int p = 0; p &lt; points.length; p++) {<a name="line.124"></a>
<span class="sourceLineNo">125</span>            double probability = testDistribution.cumulativeProbability(points[p]);<a name="line.125"></a>
<span class="sourceLineNo">126</span>            Assert.assertEquals(results[p], probability, 1e-10);<a name="line.126"></a>
<span class="sourceLineNo">127</span>        }<a name="line.127"></a>
<span class="sourceLineNo">128</span>    }<a name="line.128"></a>
<span class="sourceLineNo">129</span><a name="line.129"></a>
<span class="sourceLineNo">130</span>    /**<a name="line.130"></a>
<span class="sourceLineNo">131</span>     * Tests if the distribution returns proper mean value.<a name="line.131"></a>
<span class="sourceLineNo">132</span>     */<a name="line.132"></a>
<span class="sourceLineNo">133</span>    @Test<a name="line.133"></a>
<span class="sourceLineNo">134</span>    public void testGetNumericalMean() {<a name="line.134"></a>
<span class="sourceLineNo">135</span>        Assert.assertEquals(3.4, testDistribution.getNumericalMean(), 1e-10);<a name="line.135"></a>
<span class="sourceLineNo">136</span>    }<a name="line.136"></a>
<span class="sourceLineNo">137</span><a name="line.137"></a>
<span class="sourceLineNo">138</span>    /**<a name="line.138"></a>
<span class="sourceLineNo">139</span>     * Tests if the distribution returns proper variance.<a name="line.139"></a>
<span class="sourceLineNo">140</span>     */<a name="line.140"></a>
<span class="sourceLineNo">141</span>    @Test<a name="line.141"></a>
<span class="sourceLineNo">142</span>    public void testGetNumericalVariance() {<a name="line.142"></a>
<span class="sourceLineNo">143</span>        Assert.assertEquals(7.84, testDistribution.getNumericalVariance(), 1e-10);<a name="line.143"></a>
<span class="sourceLineNo">144</span>    }<a name="line.144"></a>
<span class="sourceLineNo">145</span><a name="line.145"></a>
<span class="sourceLineNo">146</span>    /**<a name="line.146"></a>
<span class="sourceLineNo">147</span>     * Tests if the distribution returns proper lower bound.<a name="line.147"></a>
<span class="sourceLineNo">148</span>     */<a name="line.148"></a>
<span class="sourceLineNo">149</span>    @Test<a name="line.149"></a>
<span class="sourceLineNo">150</span>    public void testGetSupportLowerBound() {<a name="line.150"></a>
<span class="sourceLineNo">151</span>        Assert.assertEquals(-1, testDistribution.getSupportLowerBound(), 0);<a name="line.151"></a>
<span class="sourceLineNo">152</span>    }<a name="line.152"></a>
<span class="sourceLineNo">153</span><a name="line.153"></a>
<span class="sourceLineNo">154</span>    /**<a name="line.154"></a>
<span class="sourceLineNo">155</span>     * Tests if the distribution returns proper upper bound.<a name="line.155"></a>
<span class="sourceLineNo">156</span>     */<a name="line.156"></a>
<span class="sourceLineNo">157</span>    @Test<a name="line.157"></a>
<span class="sourceLineNo">158</span>    public void testGetSupportUpperBound() {<a name="line.158"></a>
<span class="sourceLineNo">159</span>        Assert.assertEquals(7, testDistribution.getSupportUpperBound(), 0);<a name="line.159"></a>
<span class="sourceLineNo">160</span>    }<a name="line.160"></a>
<span class="sourceLineNo">161</span><a name="line.161"></a>
<span class="sourceLineNo">162</span>    /**<a name="line.162"></a>
<span class="sourceLineNo">163</span>     * Tests if the distribution returns properly that the support includes the<a name="line.163"></a>
<span class="sourceLineNo">164</span>     * lower bound.<a name="line.164"></a>
<span class="sourceLineNo">165</span>     */<a name="line.165"></a>
<span class="sourceLineNo">166</span>    @Test<a name="line.166"></a>
<span class="sourceLineNo">167</span>    public void testIsSupportLowerBoundInclusive() {<a name="line.167"></a>
<span class="sourceLineNo">168</span>        Assert.assertTrue(testDistribution.isSupportLowerBoundInclusive());<a name="line.168"></a>
<span class="sourceLineNo">169</span>    }<a name="line.169"></a>
<span class="sourceLineNo">170</span><a name="line.170"></a>
<span class="sourceLineNo">171</span>    /**<a name="line.171"></a>
<span class="sourceLineNo">172</span>     * Tests if the distribution returns properly that the support includes the<a name="line.172"></a>
<span class="sourceLineNo">173</span>     * upper bound.<a name="line.173"></a>
<span class="sourceLineNo">174</span>     */<a name="line.174"></a>
<span class="sourceLineNo">175</span>    @Test<a name="line.175"></a>
<span class="sourceLineNo">176</span>    public void testIsSupportUpperBoundInclusive() {<a name="line.176"></a>
<span class="sourceLineNo">177</span>        Assert.assertTrue(testDistribution.isSupportUpperBoundInclusive());<a name="line.177"></a>
<span class="sourceLineNo">178</span>    }<a name="line.178"></a>
<span class="sourceLineNo">179</span><a name="line.179"></a>
<span class="sourceLineNo">180</span>    /**<a name="line.180"></a>
<span class="sourceLineNo">181</span>     * Tests if the distribution returns properly that the support is connected.<a name="line.181"></a>
<span class="sourceLineNo">182</span>     */<a name="line.182"></a>
<span class="sourceLineNo">183</span>    @Test<a name="line.183"></a>
<span class="sourceLineNo">184</span>    public void testIsSupportConnected() {<a name="line.184"></a>
<span class="sourceLineNo">185</span>        Assert.assertTrue(testDistribution.isSupportConnected());<a name="line.185"></a>
<span class="sourceLineNo">186</span>    }<a name="line.186"></a>
<span class="sourceLineNo">187</span><a name="line.187"></a>
<span class="sourceLineNo">188</span>    /**<a name="line.188"></a>
<span class="sourceLineNo">189</span>     * Tests sampling.<a name="line.189"></a>
<span class="sourceLineNo">190</span>     */<a name="line.190"></a>
<span class="sourceLineNo">191</span>    @Test<a name="line.191"></a>
<span class="sourceLineNo">192</span>    public void testSample() {<a name="line.192"></a>
<span class="sourceLineNo">193</span>        final int n = 1000000;<a name="line.193"></a>
<span class="sourceLineNo">194</span>        testDistribution.reseedRandomGenerator(-334759360); // fixed seed<a name="line.194"></a>
<span class="sourceLineNo">195</span>        final double[] samples = testDistribution.sample(n);<a name="line.195"></a>
<span class="sourceLineNo">196</span>        Assert.assertEquals(n, samples.length);<a name="line.196"></a>
<span class="sourceLineNo">197</span>        double sum = 0;<a name="line.197"></a>
<span class="sourceLineNo">198</span>        double sumOfSquares = 0;<a name="line.198"></a>
<span class="sourceLineNo">199</span>        for (int i = 0; i &lt; samples.length; i++) {<a name="line.199"></a>
<span class="sourceLineNo">200</span>            sum += samples[i];<a name="line.200"></a>
<span class="sourceLineNo">201</span>            sumOfSquares += samples[i] * samples[i];<a name="line.201"></a>
<span class="sourceLineNo">202</span>        }<a name="line.202"></a>
<span class="sourceLineNo">203</span>        Assert.assertEquals(testDistribution.getNumericalMean(),<a name="line.203"></a>
<span class="sourceLineNo">204</span>                sum / n, 1e-2);<a name="line.204"></a>
<span class="sourceLineNo">205</span>        Assert.assertEquals(testDistribution.getNumericalVariance(),<a name="line.205"></a>
<span class="sourceLineNo">206</span>                sumOfSquares / n - FastMath.pow(sum / n, 2), 1e-2);<a name="line.206"></a>
<span class="sourceLineNo">207</span>    }<a name="line.207"></a>
<span class="sourceLineNo">208</span><a name="line.208"></a>
<span class="sourceLineNo">209</span>    @Test<a name="line.209"></a>
<span class="sourceLineNo">210</span>    public void testIssue942() {<a name="line.210"></a>
<span class="sourceLineNo">211</span>        List&lt;Pair&lt;Object,Double&gt;&gt; list = new ArrayList&lt;Pair&lt;Object, Double&gt;&gt;();<a name="line.211"></a>
<span class="sourceLineNo">212</span>        list.add(new Pair&lt;Object, Double&gt;(new Object() {}, new Double(0)));<a name="line.212"></a>
<span class="sourceLineNo">213</span>        list.add(new Pair&lt;Object, Double&gt;(new Object() {}, new Double(1)));<a name="line.213"></a>
<span class="sourceLineNo">214</span>        Assert.assertEquals(1, new EnumeratedDistribution&lt;Object&gt;(list).sample(1).length);<a name="line.214"></a>
<span class="sourceLineNo">215</span>    }<a name="line.215"></a>
<span class="sourceLineNo">216</span><a name="line.216"></a>
<span class="sourceLineNo">217</span>    @Test<a name="line.217"></a>
<span class="sourceLineNo">218</span>    public void testIssue1065() {<a name="line.218"></a>
<span class="sourceLineNo">219</span>        // Test Distribution for inverseCumulativeProbability<a name="line.219"></a>
<span class="sourceLineNo">220</span>        //<a name="line.220"></a>
<span class="sourceLineNo">221</span>        //         ^<a name="line.221"></a>
<span class="sourceLineNo">222</span>        //         |<a name="line.222"></a>
<span class="sourceLineNo">223</span>        // 1.000   +--------------------------------o===============<a name="line.223"></a>
<span class="sourceLineNo">224</span>        //         |                               3|<a name="line.224"></a>
<span class="sourceLineNo">225</span>        //         |                                |<a name="line.225"></a>
<span class="sourceLineNo">226</span>        //         |                             1o=<a name="line.226"></a>
<span class="sourceLineNo">227</span>        // 0.750   +-------------------------&gt; o==  .<a name="line.227"></a>
<span class="sourceLineNo">228</span>        //         |                          3|  . .<a name="line.228"></a>
<span class="sourceLineNo">229</span>        //         |                   0       |  . .<a name="line.229"></a>
<span class="sourceLineNo">230</span>        // 0.5625  +---------------&gt; o==o======   . .<a name="line.230"></a>
<span class="sourceLineNo">231</span>        //         |                 |  .      .  . .<a name="line.231"></a>
<span class="sourceLineNo">232</span>        //         |                 |  .      .  . .<a name="line.232"></a>
<span class="sourceLineNo">233</span>        //         |                5|  .      .  . .<a name="line.233"></a>
<span class="sourceLineNo">234</span>        //         |                 |  .      .  . .<a name="line.234"></a>
<span class="sourceLineNo">235</span>        //         |             o===   .      .  . .<a name="line.235"></a>
<span class="sourceLineNo">236</span>        //         |             |   .  .      .  . .<a name="line.236"></a>
<span class="sourceLineNo">237</span>        //         |            4|   .  .      .  . .<a name="line.237"></a>
<span class="sourceLineNo">238</span>        //         |             |   .  .      .  . .<a name="line.238"></a>
<span class="sourceLineNo">239</span>        // 0.000   +=============----+--+------+--+-+---------------&gt;<a name="line.239"></a>
<span class="sourceLineNo">240</span>        //                      14  18 21     28 31 33<a name="line.240"></a>
<span class="sourceLineNo">241</span>        //<a name="line.241"></a>
<span class="sourceLineNo">242</span>        // sum  = 4+5+0+3+1+3 = 16<a name="line.242"></a>
<span class="sourceLineNo">243</span>        <a name="line.243"></a>
<span class="sourceLineNo">244</span>        EnumeratedRealDistribution distribution = new EnumeratedRealDistribution(<a name="line.244"></a>
<span class="sourceLineNo">245</span>                new double[] { 14.0, 18.0, 21.0, 28.0, 31.0, 33.0 },<a name="line.245"></a>
<span class="sourceLineNo">246</span>                new double[] { 4.0 / 16.0, 5.0 / 16.0, 0.0 / 16.0, 3.0 / 16.0, 1.0 / 16.0, 3.0 / 16.0 });<a name="line.246"></a>
<span class="sourceLineNo">247</span>        <a name="line.247"></a>
<span class="sourceLineNo">248</span>        assertEquals(14.0, distribution.inverseCumulativeProbability(0.0000), 0.0);<a name="line.248"></a>
<span class="sourceLineNo">249</span>        assertEquals(14.0, distribution.inverseCumulativeProbability(0.2500), 0.0);<a name="line.249"></a>
<span class="sourceLineNo">250</span>        assertEquals(33.0, distribution.inverseCumulativeProbability(1.0000), 0.0);<a name="line.250"></a>
<span class="sourceLineNo">251</span><a name="line.251"></a>
<span class="sourceLineNo">252</span>        assertEquals(18.0, distribution.inverseCumulativeProbability(0.5000), 0.0);<a name="line.252"></a>
<span class="sourceLineNo">253</span>        assertEquals(18.0, distribution.inverseCumulativeProbability(0.5624), 0.0);<a name="line.253"></a>
<span class="sourceLineNo">254</span>        assertEquals(28.0, distribution.inverseCumulativeProbability(0.5626), 0.0);<a name="line.254"></a>
<span class="sourceLineNo">255</span>        assertEquals(31.0, distribution.inverseCumulativeProbability(0.7600), 0.0);<a name="line.255"></a>
<span class="sourceLineNo">256</span>        assertEquals(18.0, distribution.inverseCumulativeProbability(0.5625), 0.0);<a name="line.256"></a>
<span class="sourceLineNo">257</span>        assertEquals(28.0, distribution.inverseCumulativeProbability(0.7500), 0.0);<a name="line.257"></a>
<span class="sourceLineNo">258</span>    }<a name="line.258"></a>
<span class="sourceLineNo">259</span>}<a name="line.259"></a>




























































</pre>
</div>
</body>
</html>
