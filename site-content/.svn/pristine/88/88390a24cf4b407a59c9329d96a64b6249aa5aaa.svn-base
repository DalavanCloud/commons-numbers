<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>DBSCANClusterer xref</title>
<link type="text/css" rel="stylesheet" href="../../../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../apidocs/org/apache/commons/math3/stat/clustering/DBSCANClusterer.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Licensed to the Apache Software Foundation (ASF) under one or more</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> * contributor license agreements.  See the NOTICE file distributed with</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * this work for additional information regarding copyright ownership.</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * The ASF licenses this file to You under the Apache License, Version 2.0</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * (the "License"); you may not use this file except in compliance with</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> * the License.  You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *      <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">package</strong> org.apache.commons.math3.stat.clustering;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <strong class="jxr_keyword">import</strong> java.util.ArrayList;
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> java.util.Collection;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> java.util.HashMap;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> java.util.HashSet;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <strong class="jxr_keyword">import</strong> java.util.List;
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> java.util.Map;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> java.util.Set;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.NotPositiveException;
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.NullArgumentException;
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.util.MathUtils;
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <em class="jxr_javadoccomment"> * DBSCAN (density-based spatial clustering of applications with noise) algorithm.</em>
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <em class="jxr_javadoccomment"> * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <em class="jxr_javadoccomment"> * The DBSCAN algorithm forms clusters based on the idea of density connectivity, i.e.</em>
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  <em class="jxr_javadoccomment"> * a point p is density connected to another point q, if there exists a chain of</em>
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  <em class="jxr_javadoccomment"> * points p&lt;sub&gt;i&lt;/sub&gt;, with i = 1 .. n and p&lt;sub&gt;1&lt;/sub&gt; = p and p&lt;sub&gt;n&lt;/sub&gt; = q,</em>
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  <em class="jxr_javadoccomment"> * such that each pair &amp;lt;p&lt;sub&gt;i&lt;/sub&gt;, p&lt;sub&gt;i+1&lt;/sub&gt;&amp;gt; is directly density-reachable.</em>
<a class="jxr_linenumber" name="L38" href="#L38">38</a>  <em class="jxr_javadoccomment"> * A point q is directly density-reachable from point p if it is in the &amp;epsilon;-neighborhood</em>
<a class="jxr_linenumber" name="L39" href="#L39">39</a>  <em class="jxr_javadoccomment"> * of this point.</em>
<a class="jxr_linenumber" name="L40" href="#L40">40</a>  <em class="jxr_javadoccomment"> * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L41" href="#L41">41</a>  <em class="jxr_javadoccomment"> * Any point that is not density-reachable from a formed cluster is treated as noise, and</em>
<a class="jxr_linenumber" name="L42" href="#L42">42</a>  <em class="jxr_javadoccomment"> * will thus not be present in the result.</em>
<a class="jxr_linenumber" name="L43" href="#L43">43</a>  <em class="jxr_javadoccomment"> * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L44" href="#L44">44</a>  <em class="jxr_javadoccomment"> * The algorithm requires two parameters:</em>
<a class="jxr_linenumber" name="L45" href="#L45">45</a>  <em class="jxr_javadoccomment"> * &lt;ul&gt;</em>
<a class="jxr_linenumber" name="L46" href="#L46">46</a>  <em class="jxr_javadoccomment"> *   &lt;li&gt;eps: the distance that defines the &amp;epsilon;-neighborhood of a point</em>
<a class="jxr_linenumber" name="L47" href="#L47">47</a>  <em class="jxr_javadoccomment"> *   &lt;li&gt;minPoints: the minimum number of density-connected points required to form a cluster</em>
<a class="jxr_linenumber" name="L48" href="#L48">48</a>  <em class="jxr_javadoccomment"> * &lt;/ul&gt;</em>
<a class="jxr_linenumber" name="L49" href="#L49">49</a>  <em class="jxr_javadoccomment"> * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L50" href="#L50">50</a>  <em class="jxr_javadoccomment"> * &lt;b&gt;Note:&lt;/b&gt; as DBSCAN is not a centroid-based clustering algorithm, the resulting</em>
<a class="jxr_linenumber" name="L51" href="#L51">51</a>  <em class="jxr_javadoccomment"> * {@link Cluster} objects will have no defined center, i.e. {@link Cluster#getCenter()} will</em>
<a class="jxr_linenumber" name="L52" href="#L52">52</a>  <em class="jxr_javadoccomment"> * return {@code null}.</em>
<a class="jxr_linenumber" name="L53" href="#L53">53</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L54" href="#L54">54</a>  <em class="jxr_javadoccomment"> * @param &lt;T&gt; type of the points to cluster</em>
<a class="jxr_linenumber" name="L55" href="#L55">55</a>  <em class="jxr_javadoccomment"> * @see &lt;a href="<a href="http://en.wikipedia.org/wiki/DBSCAN" target="alexandria_uri">http://en.wikipedia.org/wiki/DBSCAN</a>"&gt;DBSCAN (wikipedia)&lt;/a&gt;</em>
<a class="jxr_linenumber" name="L56" href="#L56">56</a>  <em class="jxr_javadoccomment"> * @see &lt;a href="<a href="http://www.dbs.ifi.lmu.de/Publikationen/Papers/KDD-96.final.frame.pdf" target="alexandria_uri">http://www.dbs.ifi.lmu.de/Publikationen/Papers/KDD-96.final.frame.pdf</a>"&gt;</em>
<a class="jxr_linenumber" name="L57" href="#L57">57</a>  <em class="jxr_javadoccomment"> * A Density-Based Algorithm for Discovering Clusters in Large Spatial Databases with Noise&lt;/a&gt;</em>
<a class="jxr_linenumber" name="L58" href="#L58">58</a>  <em class="jxr_javadoccomment"> * @since 3.1</em>
<a class="jxr_linenumber" name="L59" href="#L59">59</a>  <em class="jxr_javadoccomment"> * @deprecated As of 3.2 (to be removed in 4.0),</em>
<a class="jxr_linenumber" name="L60" href="#L60">60</a>  <em class="jxr_javadoccomment"> * use {@link org.apache.commons.math3.ml.clustering.DBSCANClusterer} instead</em>
<a class="jxr_linenumber" name="L61" href="#L61">61</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L62" href="#L62">62</a>  @Deprecated
<a class="jxr_linenumber" name="L63" href="#L63">63</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">class</strong> DBSCANClusterer&lt;T <strong class="jxr_keyword">extends</strong> Clusterable&lt;T&gt;&gt; {
<a class="jxr_linenumber" name="L64" href="#L64">64</a>  
<a class="jxr_linenumber" name="L65" href="#L65">65</a>      <em class="jxr_javadoccomment">/** Maximum radius of the neighborhood to be considered. */</em>
<a class="jxr_linenumber" name="L66" href="#L66">66</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>              eps;
<a class="jxr_linenumber" name="L67" href="#L67">67</a>  
<a class="jxr_linenumber" name="L68" href="#L68">68</a>      <em class="jxr_javadoccomment">/** Minimum number of points needed for a cluster. */</em>
<a class="jxr_linenumber" name="L69" href="#L69">69</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong>                 minPts;
<a class="jxr_linenumber" name="L70" href="#L70">70</a>  
<a class="jxr_linenumber" name="L71" href="#L71">71</a>      <em class="jxr_javadoccomment">/** Status of a point during the clustering process. */</em>
<a class="jxr_linenumber" name="L72" href="#L72">72</a>      <strong class="jxr_keyword">private</strong> enum <a href="../../../../../../org/apache/commons/math3/stat/clustering/DBSCANClusterer.html">PointStatus</a> {
<a class="jxr_linenumber" name="L73" href="#L73">73</a>          <em class="jxr_javadoccomment">/** The point has is considered to be noise. */</em>
<a class="jxr_linenumber" name="L74" href="#L74">74</a>          NOISE,
<a class="jxr_linenumber" name="L75" href="#L75">75</a>          <em class="jxr_javadoccomment">/** The point is already part of a cluster. */</em>
<a class="jxr_linenumber" name="L76" href="#L76">76</a>          PART_OF_CLUSTER
<a class="jxr_linenumber" name="L77" href="#L77">77</a>      }
<a class="jxr_linenumber" name="L78" href="#L78">78</a>  
<a class="jxr_linenumber" name="L79" href="#L79">79</a>      <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L80" href="#L80">80</a>  <em class="jxr_javadoccomment">     * Creates a new instance of a DBSCANClusterer.</em>
<a class="jxr_linenumber" name="L81" href="#L81">81</a>  <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L82" href="#L82">82</a>  <em class="jxr_javadoccomment">     * @param eps maximum radius of the neighborhood to be considered</em>
<a class="jxr_linenumber" name="L83" href="#L83">83</a>  <em class="jxr_javadoccomment">     * @param minPts minimum number of points needed for a cluster</em>
<a class="jxr_linenumber" name="L84" href="#L84">84</a>  <em class="jxr_javadoccomment">     * @throws NotPositiveException if {@code eps &lt; 0.0} or {@code minPts &lt; 0}</em>
<a class="jxr_linenumber" name="L85" href="#L85">85</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L86" href="#L86">86</a>      <strong class="jxr_keyword">public</strong> <a href="../../../../../../org/apache/commons/math3/stat/clustering/DBSCANClusterer.html">DBSCANClusterer</a>(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> eps, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> minPts)
<a class="jxr_linenumber" name="L87" href="#L87">87</a>          <strong class="jxr_keyword">throws</strong> <a href="../../../../../../org/apache/commons/math3/exception/NotPositiveException.html">NotPositiveException</a> {
<a class="jxr_linenumber" name="L88" href="#L88">88</a>          <strong class="jxr_keyword">if</strong> (eps &lt; 0.0d) {
<a class="jxr_linenumber" name="L89" href="#L89">89</a>              <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/exception/NotPositiveException.html">NotPositiveException</a>(eps);
<a class="jxr_linenumber" name="L90" href="#L90">90</a>          }
<a class="jxr_linenumber" name="L91" href="#L91">91</a>          <strong class="jxr_keyword">if</strong> (minPts &lt; 0) {
<a class="jxr_linenumber" name="L92" href="#L92">92</a>              <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/exception/NotPositiveException.html">NotPositiveException</a>(minPts);
<a class="jxr_linenumber" name="L93" href="#L93">93</a>          }
<a class="jxr_linenumber" name="L94" href="#L94">94</a>          <strong class="jxr_keyword">this</strong>.eps = eps;
<a class="jxr_linenumber" name="L95" href="#L95">95</a>          <strong class="jxr_keyword">this</strong>.minPts = minPts;
<a class="jxr_linenumber" name="L96" href="#L96">96</a>      }
<a class="jxr_linenumber" name="L97" href="#L97">97</a>  
<a class="jxr_linenumber" name="L98" href="#L98">98</a>      <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L99" href="#L99">99</a>  <em class="jxr_javadoccomment">     * Returns the maximum radius of the neighborhood to be considered.</em>
<a class="jxr_linenumber" name="L100" href="#L100">100</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L101" href="#L101">101</a> <em class="jxr_javadoccomment">     * @return maximum radius of the neighborhood</em>
<a class="jxr_linenumber" name="L102" href="#L102">102</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L103" href="#L103">103</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">double</strong> getEps() {
<a class="jxr_linenumber" name="L104" href="#L104">104</a>         <strong class="jxr_keyword">return</strong> eps;
<a class="jxr_linenumber" name="L105" href="#L105">105</a>     }
<a class="jxr_linenumber" name="L106" href="#L106">106</a> 
<a class="jxr_linenumber" name="L107" href="#L107">107</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L108" href="#L108">108</a> <em class="jxr_javadoccomment">     * Returns the minimum number of points needed for a cluster.</em>
<a class="jxr_linenumber" name="L109" href="#L109">109</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L110" href="#L110">110</a> <em class="jxr_javadoccomment">     * @return minimum number of points needed for a cluster</em>
<a class="jxr_linenumber" name="L111" href="#L111">111</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L112" href="#L112">112</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">int</strong> getMinPts() {
<a class="jxr_linenumber" name="L113" href="#L113">113</a>         <strong class="jxr_keyword">return</strong> minPts;
<a class="jxr_linenumber" name="L114" href="#L114">114</a>     }
<a class="jxr_linenumber" name="L115" href="#L115">115</a> 
<a class="jxr_linenumber" name="L116" href="#L116">116</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L117" href="#L117">117</a> <em class="jxr_javadoccomment">     * Performs DBSCAN cluster analysis.</em>
<a class="jxr_linenumber" name="L118" href="#L118">118</a> <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L119" href="#L119">119</a> <em class="jxr_javadoccomment">     * &lt;b&gt;Note:&lt;/b&gt; as DBSCAN is not a centroid-based clustering algorithm, the resulting</em>
<a class="jxr_linenumber" name="L120" href="#L120">120</a> <em class="jxr_javadoccomment">     * {@link Cluster} objects will have no defined center, i.e. {@link Cluster#getCenter()} will</em>
<a class="jxr_linenumber" name="L121" href="#L121">121</a> <em class="jxr_javadoccomment">     * return {@code null}.</em>
<a class="jxr_linenumber" name="L122" href="#L122">122</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L123" href="#L123">123</a> <em class="jxr_javadoccomment">     * @param points the points to cluster</em>
<a class="jxr_linenumber" name="L124" href="#L124">124</a> <em class="jxr_javadoccomment">     * @return the list of clusters</em>
<a class="jxr_linenumber" name="L125" href="#L125">125</a> <em class="jxr_javadoccomment">     * @throws NullArgumentException if the data points are null</em>
<a class="jxr_linenumber" name="L126" href="#L126">126</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L127" href="#L127">127</a>     <strong class="jxr_keyword">public</strong> List&lt;Cluster&lt;T&gt;&gt; cluster(<strong class="jxr_keyword">final</strong> Collection&lt;T&gt; points) <strong class="jxr_keyword">throws</strong> NullArgumentException {
<a class="jxr_linenumber" name="L128" href="#L128">128</a> 
<a class="jxr_linenumber" name="L129" href="#L129">129</a>         <em class="jxr_comment">// sanity checks</em>
<a class="jxr_linenumber" name="L130" href="#L130">130</a>         MathUtils.checkNotNull(points);
<a class="jxr_linenumber" name="L131" href="#L131">131</a> 
<a class="jxr_linenumber" name="L132" href="#L132">132</a>         <strong class="jxr_keyword">final</strong> List&lt;Cluster&lt;T&gt;&gt; clusters = <strong class="jxr_keyword">new</strong> ArrayList&lt;Cluster&lt;T&gt;&gt;();
<a class="jxr_linenumber" name="L133" href="#L133">133</a>         <strong class="jxr_keyword">final</strong> Map&lt;Clusterable&lt;T&gt;, PointStatus&gt; visited = <strong class="jxr_keyword">new</strong> HashMap&lt;Clusterable&lt;T&gt;, PointStatus&gt;();
<a class="jxr_linenumber" name="L134" href="#L134">134</a> 
<a class="jxr_linenumber" name="L135" href="#L135">135</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">final</strong> T point : points) {
<a class="jxr_linenumber" name="L136" href="#L136">136</a>             <strong class="jxr_keyword">if</strong> (visited.get(point) != <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L137" href="#L137">137</a>                 <strong class="jxr_keyword">continue</strong>;
<a class="jxr_linenumber" name="L138" href="#L138">138</a>             }
<a class="jxr_linenumber" name="L139" href="#L139">139</a>             <strong class="jxr_keyword">final</strong> List&lt;T&gt; neighbors = getNeighbors(point, points);
<a class="jxr_linenumber" name="L140" href="#L140">140</a>             <strong class="jxr_keyword">if</strong> (neighbors.size() &gt;= minPts) {
<a class="jxr_linenumber" name="L141" href="#L141">141</a>                 <em class="jxr_comment">// DBSCAN does not care about center points</em>
<a class="jxr_linenumber" name="L142" href="#L142">142</a>                 <strong class="jxr_keyword">final</strong> Cluster&lt;T&gt; cluster = <strong class="jxr_keyword">new</strong> Cluster&lt;T&gt;(<strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L143" href="#L143">143</a>                 clusters.add(expandCluster(cluster, point, neighbors, points, visited));
<a class="jxr_linenumber" name="L144" href="#L144">144</a>             } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L145" href="#L145">145</a>                 visited.put(point, PointStatus.NOISE);
<a class="jxr_linenumber" name="L146" href="#L146">146</a>             }
<a class="jxr_linenumber" name="L147" href="#L147">147</a>         }
<a class="jxr_linenumber" name="L148" href="#L148">148</a> 
<a class="jxr_linenumber" name="L149" href="#L149">149</a>         <strong class="jxr_keyword">return</strong> clusters;
<a class="jxr_linenumber" name="L150" href="#L150">150</a>     }
<a class="jxr_linenumber" name="L151" href="#L151">151</a> 
<a class="jxr_linenumber" name="L152" href="#L152">152</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L153" href="#L153">153</a> <em class="jxr_javadoccomment">     * Expands the cluster to include density-reachable items.</em>
<a class="jxr_linenumber" name="L154" href="#L154">154</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L155" href="#L155">155</a> <em class="jxr_javadoccomment">     * @param cluster Cluster to expand</em>
<a class="jxr_linenumber" name="L156" href="#L156">156</a> <em class="jxr_javadoccomment">     * @param point Point to add to cluster</em>
<a class="jxr_linenumber" name="L157" href="#L157">157</a> <em class="jxr_javadoccomment">     * @param neighbors List of neighbors</em>
<a class="jxr_linenumber" name="L158" href="#L158">158</a> <em class="jxr_javadoccomment">     * @param points the data set</em>
<a class="jxr_linenumber" name="L159" href="#L159">159</a> <em class="jxr_javadoccomment">     * @param visited the set of already visited points</em>
<a class="jxr_linenumber" name="L160" href="#L160">160</a> <em class="jxr_javadoccomment">     * @return the expanded cluster</em>
<a class="jxr_linenumber" name="L161" href="#L161">161</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L162" href="#L162">162</a>     <strong class="jxr_keyword">private</strong> Cluster&lt;T&gt; expandCluster(<strong class="jxr_keyword">final</strong> Cluster&lt;T&gt; cluster,
<a class="jxr_linenumber" name="L163" href="#L163">163</a>                                      <strong class="jxr_keyword">final</strong> T point,
<a class="jxr_linenumber" name="L164" href="#L164">164</a>                                      <strong class="jxr_keyword">final</strong> List&lt;T&gt; neighbors,
<a class="jxr_linenumber" name="L165" href="#L165">165</a>                                      <strong class="jxr_keyword">final</strong> Collection&lt;T&gt; points,
<a class="jxr_linenumber" name="L166" href="#L166">166</a>                                      <strong class="jxr_keyword">final</strong> Map&lt;Clusterable&lt;T&gt;, PointStatus&gt; visited) {
<a class="jxr_linenumber" name="L167" href="#L167">167</a>         cluster.addPoint(point);
<a class="jxr_linenumber" name="L168" href="#L168">168</a>         visited.put(point, PointStatus.PART_OF_CLUSTER);
<a class="jxr_linenumber" name="L169" href="#L169">169</a> 
<a class="jxr_linenumber" name="L170" href="#L170">170</a>         List&lt;T&gt; seeds = <strong class="jxr_keyword">new</strong> ArrayList&lt;T&gt;(neighbors);
<a class="jxr_linenumber" name="L171" href="#L171">171</a>         <strong class="jxr_keyword">int</strong> index = 0;
<a class="jxr_linenumber" name="L172" href="#L172">172</a>         <strong class="jxr_keyword">while</strong> (index &lt; seeds.size()) {
<a class="jxr_linenumber" name="L173" href="#L173">173</a>             <strong class="jxr_keyword">final</strong> T current = seeds.get(index);
<a class="jxr_linenumber" name="L174" href="#L174">174</a>             <a href="../../../../../../org/apache/commons/math3/stat/clustering/DBSCANClusterer.html">PointStatus</a> pStatus = visited.get(current);
<a class="jxr_linenumber" name="L175" href="#L175">175</a>             <em class="jxr_comment">// only check non-visited points</em>
<a class="jxr_linenumber" name="L176" href="#L176">176</a>             <strong class="jxr_keyword">if</strong> (pStatus == <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L177" href="#L177">177</a>                 <strong class="jxr_keyword">final</strong> List&lt;T&gt; currentNeighbors = getNeighbors(current, points);
<a class="jxr_linenumber" name="L178" href="#L178">178</a>                 <strong class="jxr_keyword">if</strong> (currentNeighbors.size() &gt;= minPts) {
<a class="jxr_linenumber" name="L179" href="#L179">179</a>                     seeds = merge(seeds, currentNeighbors);
<a class="jxr_linenumber" name="L180" href="#L180">180</a>                 }
<a class="jxr_linenumber" name="L181" href="#L181">181</a>             }
<a class="jxr_linenumber" name="L182" href="#L182">182</a> 
<a class="jxr_linenumber" name="L183" href="#L183">183</a>             <strong class="jxr_keyword">if</strong> (pStatus != PointStatus.PART_OF_CLUSTER) {
<a class="jxr_linenumber" name="L184" href="#L184">184</a>                 visited.put(current, PointStatus.PART_OF_CLUSTER);
<a class="jxr_linenumber" name="L185" href="#L185">185</a>                 cluster.addPoint(current);
<a class="jxr_linenumber" name="L186" href="#L186">186</a>             }
<a class="jxr_linenumber" name="L187" href="#L187">187</a> 
<a class="jxr_linenumber" name="L188" href="#L188">188</a>             index++;
<a class="jxr_linenumber" name="L189" href="#L189">189</a>         }
<a class="jxr_linenumber" name="L190" href="#L190">190</a>         <strong class="jxr_keyword">return</strong> cluster;
<a class="jxr_linenumber" name="L191" href="#L191">191</a>     }
<a class="jxr_linenumber" name="L192" href="#L192">192</a> 
<a class="jxr_linenumber" name="L193" href="#L193">193</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L194" href="#L194">194</a> <em class="jxr_javadoccomment">     * Returns a list of density-reachable neighbors of a {@code point}.</em>
<a class="jxr_linenumber" name="L195" href="#L195">195</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L196" href="#L196">196</a> <em class="jxr_javadoccomment">     * @param point the point to look for</em>
<a class="jxr_linenumber" name="L197" href="#L197">197</a> <em class="jxr_javadoccomment">     * @param points possible neighbors</em>
<a class="jxr_linenumber" name="L198" href="#L198">198</a> <em class="jxr_javadoccomment">     * @return the List of neighbors</em>
<a class="jxr_linenumber" name="L199" href="#L199">199</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L200" href="#L200">200</a>     <strong class="jxr_keyword">private</strong> List&lt;T&gt; getNeighbors(<strong class="jxr_keyword">final</strong> T point, <strong class="jxr_keyword">final</strong> Collection&lt;T&gt; points) {
<a class="jxr_linenumber" name="L201" href="#L201">201</a>         <strong class="jxr_keyword">final</strong> List&lt;T&gt; neighbors = <strong class="jxr_keyword">new</strong> ArrayList&lt;T&gt;();
<a class="jxr_linenumber" name="L202" href="#L202">202</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">final</strong> T neighbor : points) {
<a class="jxr_linenumber" name="L203" href="#L203">203</a>             <strong class="jxr_keyword">if</strong> (point != neighbor &amp;&amp; neighbor.distanceFrom(point) &lt;= eps) {
<a class="jxr_linenumber" name="L204" href="#L204">204</a>                 neighbors.add(neighbor);
<a class="jxr_linenumber" name="L205" href="#L205">205</a>             }
<a class="jxr_linenumber" name="L206" href="#L206">206</a>         }
<a class="jxr_linenumber" name="L207" href="#L207">207</a>         <strong class="jxr_keyword">return</strong> neighbors;
<a class="jxr_linenumber" name="L208" href="#L208">208</a>     }
<a class="jxr_linenumber" name="L209" href="#L209">209</a> 
<a class="jxr_linenumber" name="L210" href="#L210">210</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L211" href="#L211">211</a> <em class="jxr_javadoccomment">     * Merges two lists together.</em>
<a class="jxr_linenumber" name="L212" href="#L212">212</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L213" href="#L213">213</a> <em class="jxr_javadoccomment">     * @param one first list</em>
<a class="jxr_linenumber" name="L214" href="#L214">214</a> <em class="jxr_javadoccomment">     * @param two second list</em>
<a class="jxr_linenumber" name="L215" href="#L215">215</a> <em class="jxr_javadoccomment">     * @return merged lists</em>
<a class="jxr_linenumber" name="L216" href="#L216">216</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L217" href="#L217">217</a>     <strong class="jxr_keyword">private</strong> List&lt;T&gt; merge(<strong class="jxr_keyword">final</strong> List&lt;T&gt; one, <strong class="jxr_keyword">final</strong> List&lt;T&gt; two) {
<a class="jxr_linenumber" name="L218" href="#L218">218</a>         <strong class="jxr_keyword">final</strong> Set&lt;T&gt; oneSet = <strong class="jxr_keyword">new</strong> HashSet&lt;T&gt;(one);
<a class="jxr_linenumber" name="L219" href="#L219">219</a>         <strong class="jxr_keyword">for</strong> (T item : two) {
<a class="jxr_linenumber" name="L220" href="#L220">220</a>             <strong class="jxr_keyword">if</strong> (!oneSet.contains(item)) {
<a class="jxr_linenumber" name="L221" href="#L221">221</a>                 one.add(item);
<a class="jxr_linenumber" name="L222" href="#L222">222</a>             }
<a class="jxr_linenumber" name="L223" href="#L223">223</a>         }
<a class="jxr_linenumber" name="L224" href="#L224">224</a>         <strong class="jxr_keyword">return</strong> one;
<a class="jxr_linenumber" name="L225" href="#L225">225</a>     }
<a class="jxr_linenumber" name="L226" href="#L226">226</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2003&#x2013;2016 <a href="http://www.apache.org/">The Apache Software Foundation</a>. All rights reserved.</div>
</body>
</html>
