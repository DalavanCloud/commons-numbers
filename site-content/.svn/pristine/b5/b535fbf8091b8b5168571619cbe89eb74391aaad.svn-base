<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>PolynomialsUtils xref</title>
<link type="text/css" rel="stylesheet" href="../../../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../apidocs/org/apache/commons/math3/analysis/polynomials/PolynomialsUtils.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Licensed to the Apache Software Foundation (ASF) under one or more</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> * contributor license agreements.  See the NOTICE file distributed with</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * this work for additional information regarding copyright ownership.</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * The ASF licenses this file to You under the Apache License, Version 2.0</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * (the "License"); you may not use this file except in compliance with</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> * the License.  You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *      <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">package</strong> org.apache.commons.math3.analysis.polynomials;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <strong class="jxr_keyword">import</strong> java.util.ArrayList;
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> java.util.HashMap;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> java.util.List;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> java.util.Map;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.fraction.BigFraction;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.util.CombinatoricsUtils;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.util.FastMath;
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <em class="jxr_javadoccomment"> * A collection of static methods that operate on or return polynomials.</em>
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <em class="jxr_javadoccomment"> * @since 2.0</em>
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../../org/apache/commons/math3/analysis/polynomials/PolynomialsUtils.html">PolynomialsUtils</a> {
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  
<a class="jxr_linenumber" name="L35" href="#L35">35</a>      <em class="jxr_javadoccomment">/** Coefficients for Chebyshev polynomials. */</em>
<a class="jxr_linenumber" name="L36" href="#L36">36</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> List&lt;BigFraction&gt; CHEBYSHEV_COEFFICIENTS;
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  
<a class="jxr_linenumber" name="L38" href="#L38">38</a>      <em class="jxr_javadoccomment">/** Coefficients for Hermite polynomials. */</em>
<a class="jxr_linenumber" name="L39" href="#L39">39</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> List&lt;BigFraction&gt; HERMITE_COEFFICIENTS;
<a class="jxr_linenumber" name="L40" href="#L40">40</a>  
<a class="jxr_linenumber" name="L41" href="#L41">41</a>      <em class="jxr_javadoccomment">/** Coefficients for Laguerre polynomials. */</em>
<a class="jxr_linenumber" name="L42" href="#L42">42</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> List&lt;BigFraction&gt; LAGUERRE_COEFFICIENTS;
<a class="jxr_linenumber" name="L43" href="#L43">43</a>  
<a class="jxr_linenumber" name="L44" href="#L44">44</a>      <em class="jxr_javadoccomment">/** Coefficients for Legendre polynomials. */</em>
<a class="jxr_linenumber" name="L45" href="#L45">45</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> List&lt;BigFraction&gt; LEGENDRE_COEFFICIENTS;
<a class="jxr_linenumber" name="L46" href="#L46">46</a>  
<a class="jxr_linenumber" name="L47" href="#L47">47</a>      <em class="jxr_javadoccomment">/** Coefficients for Jacobi polynomials. */</em>
<a class="jxr_linenumber" name="L48" href="#L48">48</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> Map&lt;JacobiKey, List&lt;BigFraction&gt;&gt; JACOBI_COEFFICIENTS;
<a class="jxr_linenumber" name="L49" href="#L49">49</a>  
<a class="jxr_linenumber" name="L50" href="#L50">50</a>      <strong class="jxr_keyword">static</strong> {
<a class="jxr_linenumber" name="L51" href="#L51">51</a>  
<a class="jxr_linenumber" name="L52" href="#L52">52</a>          <em class="jxr_comment">// initialize recurrence for Chebyshev polynomials</em>
<a class="jxr_linenumber" name="L53" href="#L53">53</a>          <em class="jxr_comment">// T0(X) = 1, T1(X) = 0 + 1 * X</em>
<a class="jxr_linenumber" name="L54" href="#L54">54</a>          CHEBYSHEV_COEFFICIENTS = <strong class="jxr_keyword">new</strong> ArrayList&lt;BigFraction&gt;();
<a class="jxr_linenumber" name="L55" href="#L55">55</a>          CHEBYSHEV_COEFFICIENTS.add(BigFraction.ONE);
<a class="jxr_linenumber" name="L56" href="#L56">56</a>          CHEBYSHEV_COEFFICIENTS.add(BigFraction.ZERO);
<a class="jxr_linenumber" name="L57" href="#L57">57</a>          CHEBYSHEV_COEFFICIENTS.add(BigFraction.ONE);
<a class="jxr_linenumber" name="L58" href="#L58">58</a>  
<a class="jxr_linenumber" name="L59" href="#L59">59</a>          <em class="jxr_comment">// initialize recurrence for Hermite polynomials</em>
<a class="jxr_linenumber" name="L60" href="#L60">60</a>          <em class="jxr_comment">// H0(X) = 1, H1(X) = 0 + 2 * X</em>
<a class="jxr_linenumber" name="L61" href="#L61">61</a>          HERMITE_COEFFICIENTS = <strong class="jxr_keyword">new</strong> ArrayList&lt;BigFraction&gt;();
<a class="jxr_linenumber" name="L62" href="#L62">62</a>          HERMITE_COEFFICIENTS.add(BigFraction.ONE);
<a class="jxr_linenumber" name="L63" href="#L63">63</a>          HERMITE_COEFFICIENTS.add(BigFraction.ZERO);
<a class="jxr_linenumber" name="L64" href="#L64">64</a>          HERMITE_COEFFICIENTS.add(BigFraction.TWO);
<a class="jxr_linenumber" name="L65" href="#L65">65</a>  
<a class="jxr_linenumber" name="L66" href="#L66">66</a>          <em class="jxr_comment">// initialize recurrence for Laguerre polynomials</em>
<a class="jxr_linenumber" name="L67" href="#L67">67</a>          <em class="jxr_comment">// L0(X) = 1, L1(X) = 1 - 1 * X</em>
<a class="jxr_linenumber" name="L68" href="#L68">68</a>          LAGUERRE_COEFFICIENTS = <strong class="jxr_keyword">new</strong> ArrayList&lt;BigFraction&gt;();
<a class="jxr_linenumber" name="L69" href="#L69">69</a>          LAGUERRE_COEFFICIENTS.add(BigFraction.ONE);
<a class="jxr_linenumber" name="L70" href="#L70">70</a>          LAGUERRE_COEFFICIENTS.add(BigFraction.ONE);
<a class="jxr_linenumber" name="L71" href="#L71">71</a>          LAGUERRE_COEFFICIENTS.add(BigFraction.MINUS_ONE);
<a class="jxr_linenumber" name="L72" href="#L72">72</a>  
<a class="jxr_linenumber" name="L73" href="#L73">73</a>          <em class="jxr_comment">// initialize recurrence for Legendre polynomials</em>
<a class="jxr_linenumber" name="L74" href="#L74">74</a>          <em class="jxr_comment">// P0(X) = 1, P1(X) = 0 + 1 * X</em>
<a class="jxr_linenumber" name="L75" href="#L75">75</a>          LEGENDRE_COEFFICIENTS = <strong class="jxr_keyword">new</strong> ArrayList&lt;BigFraction&gt;();
<a class="jxr_linenumber" name="L76" href="#L76">76</a>          LEGENDRE_COEFFICIENTS.add(BigFraction.ONE);
<a class="jxr_linenumber" name="L77" href="#L77">77</a>          LEGENDRE_COEFFICIENTS.add(BigFraction.ZERO);
<a class="jxr_linenumber" name="L78" href="#L78">78</a>          LEGENDRE_COEFFICIENTS.add(BigFraction.ONE);
<a class="jxr_linenumber" name="L79" href="#L79">79</a>  
<a class="jxr_linenumber" name="L80" href="#L80">80</a>          <em class="jxr_comment">// initialize map for Jacobi polynomials</em>
<a class="jxr_linenumber" name="L81" href="#L81">81</a>          JACOBI_COEFFICIENTS = <strong class="jxr_keyword">new</strong> HashMap&lt;JacobiKey, List&lt;BigFraction&gt;&gt;();
<a class="jxr_linenumber" name="L82" href="#L82">82</a>  
<a class="jxr_linenumber" name="L83" href="#L83">83</a>      }
<a class="jxr_linenumber" name="L84" href="#L84">84</a>  
<a class="jxr_linenumber" name="L85" href="#L85">85</a>      <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L86" href="#L86">86</a>  <em class="jxr_javadoccomment">     * Private constructor, to prevent instantiation.</em>
<a class="jxr_linenumber" name="L87" href="#L87">87</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L88" href="#L88">88</a>      <strong class="jxr_keyword">private</strong> <a href="../../../../../../org/apache/commons/math3/analysis/polynomials/PolynomialsUtils.html">PolynomialsUtils</a>() {
<a class="jxr_linenumber" name="L89" href="#L89">89</a>      }
<a class="jxr_linenumber" name="L90" href="#L90">90</a>  
<a class="jxr_linenumber" name="L91" href="#L91">91</a>      <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L92" href="#L92">92</a>  <em class="jxr_javadoccomment">     * Create a Chebyshev polynomial of the first kind.</em>
<a class="jxr_linenumber" name="L93" href="#L93">93</a>  <em class="jxr_javadoccomment">     * &lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Chebyshev_polynomials"&gt;Chebyshev</em>
<a class="jxr_linenumber" name="L94" href="#L94">94</a>  <em class="jxr_javadoccomment">     * polynomials of the first kind&lt;/a&gt; are orthogonal polynomials.</em>
<a class="jxr_linenumber" name="L95" href="#L95">95</a>  <em class="jxr_javadoccomment">     * They can be defined by the following recurrence relations:&lt;/p&gt;&lt;p&gt;</em>
<a class="jxr_linenumber" name="L96" href="#L96">96</a>  <em class="jxr_javadoccomment">     * \(</em>
<a class="jxr_linenumber" name="L97" href="#L97">97</a>  <em class="jxr_javadoccomment">     *    T_0(x) = 1 &#92;&#92;</em>
<a class="jxr_linenumber" name="L98" href="#L98">98</a>  <em class="jxr_javadoccomment">     *    T_1(x) = x &#92;&#92;</em>
<a class="jxr_linenumber" name="L99" href="#L99">99</a>  <em class="jxr_javadoccomment">     *    T_{k+1}(x) = 2x T_k(x) - T_{k-1}(x)</em>
<a class="jxr_linenumber" name="L100" href="#L100">100</a> <em class="jxr_javadoccomment">     * \)</em>
<a class="jxr_linenumber" name="L101" href="#L101">101</a> <em class="jxr_javadoccomment">     * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L102" href="#L102">102</a> <em class="jxr_javadoccomment">     * @param degree degree of the polynomial</em>
<a class="jxr_linenumber" name="L103" href="#L103">103</a> <em class="jxr_javadoccomment">     * @return Chebyshev polynomial of specified degree</em>
<a class="jxr_linenumber" name="L104" href="#L104">104</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L105" href="#L105">105</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <a href="../../../../../../org/apache/commons/math3/analysis/polynomials/PolynomialFunction.html">PolynomialFunction</a> createChebyshevPolynomial(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> degree) {
<a class="jxr_linenumber" name="L106" href="#L106">106</a>         <strong class="jxr_keyword">return</strong> buildPolynomial(degree, CHEBYSHEV_COEFFICIENTS,
<a class="jxr_linenumber" name="L107" href="#L107">107</a>                 <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/analysis/polynomials/PolynomialsUtils.html">RecurrenceCoefficientsGenerator</a>() {
<a class="jxr_linenumber" name="L108" href="#L108">108</a>             <em class="jxr_javadoccomment">/** Fixed recurrence coefficients. */</em>
<a class="jxr_linenumber" name="L109" href="#L109">109</a>             <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> <a href="../../../../../../org/apache/commons/math3/fraction/BigFraction.html">BigFraction</a>[] coeffs = { BigFraction.ZERO, BigFraction.TWO, BigFraction.ONE };
<a class="jxr_linenumber" name="L110" href="#L110">110</a>             <em class="jxr_javadoccomment">/** {@inheritDoc} */</em>
<a class="jxr_linenumber" name="L111" href="#L111">111</a>             <strong class="jxr_keyword">public</strong> <a href="../../../../../../org/apache/commons/math3/fraction/BigFraction.html">BigFraction</a>[] generate(<strong class="jxr_keyword">int</strong> k) {
<a class="jxr_linenumber" name="L112" href="#L112">112</a>                 <strong class="jxr_keyword">return</strong> coeffs;
<a class="jxr_linenumber" name="L113" href="#L113">113</a>             }
<a class="jxr_linenumber" name="L114" href="#L114">114</a>         });
<a class="jxr_linenumber" name="L115" href="#L115">115</a>     }
<a class="jxr_linenumber" name="L116" href="#L116">116</a> 
<a class="jxr_linenumber" name="L117" href="#L117">117</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L118" href="#L118">118</a> <em class="jxr_javadoccomment">     * Create a Hermite polynomial.</em>
<a class="jxr_linenumber" name="L119" href="#L119">119</a> <em class="jxr_javadoccomment">     * &lt;p&gt;&lt;a href="<a href="http://mathworld.wolfram.com/HermitePolynomial.html" target="alexandria_uri">http://mathworld.wolfram.com/HermitePolynomial.html</a>"&gt;Hermite</em>
<a class="jxr_linenumber" name="L120" href="#L120">120</a> <em class="jxr_javadoccomment">     * polynomials&lt;/a&gt; are orthogonal polynomials.</em>
<a class="jxr_linenumber" name="L121" href="#L121">121</a> <em class="jxr_javadoccomment">     * They can be defined by the following recurrence relations:&lt;/p&gt;&lt;p&gt;</em>
<a class="jxr_linenumber" name="L122" href="#L122">122</a> <em class="jxr_javadoccomment">     * \(</em>
<a class="jxr_linenumber" name="L123" href="#L123">123</a> <em class="jxr_javadoccomment">     *  H_0(x) = 1 &#92;&#92;</em>
<a class="jxr_linenumber" name="L124" href="#L124">124</a> <em class="jxr_javadoccomment">     *  H_1(x) = 2x &#92;&#92;</em>
<a class="jxr_linenumber" name="L125" href="#L125">125</a> <em class="jxr_javadoccomment">     *  H_{k+1}(x) = 2x H_k(X) - 2k H_{k-1}(x)</em>
<a class="jxr_linenumber" name="L126" href="#L126">126</a> <em class="jxr_javadoccomment">     * \)</em>
<a class="jxr_linenumber" name="L127" href="#L127">127</a> <em class="jxr_javadoccomment">     * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L128" href="#L128">128</a> 
<a class="jxr_linenumber" name="L129" href="#L129">129</a> <em class="jxr_javadoccomment">     * @param degree degree of the polynomial</em>
<a class="jxr_linenumber" name="L130" href="#L130">130</a> <em class="jxr_javadoccomment">     * @return Hermite polynomial of specified degree</em>
<a class="jxr_linenumber" name="L131" href="#L131">131</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L132" href="#L132">132</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <a href="../../../../../../org/apache/commons/math3/analysis/polynomials/PolynomialFunction.html">PolynomialFunction</a> createHermitePolynomial(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> degree) {
<a class="jxr_linenumber" name="L133" href="#L133">133</a>         <strong class="jxr_keyword">return</strong> buildPolynomial(degree, HERMITE_COEFFICIENTS,
<a class="jxr_linenumber" name="L134" href="#L134">134</a>                 <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/analysis/polynomials/PolynomialsUtils.html">RecurrenceCoefficientsGenerator</a>() {
<a class="jxr_linenumber" name="L135" href="#L135">135</a>             <em class="jxr_javadoccomment">/** {@inheritDoc} */</em>
<a class="jxr_linenumber" name="L136" href="#L136">136</a>             <strong class="jxr_keyword">public</strong> <a href="../../../../../../org/apache/commons/math3/fraction/BigFraction.html">BigFraction</a>[] generate(<strong class="jxr_keyword">int</strong> k) {
<a class="jxr_linenumber" name="L137" href="#L137">137</a>                 <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/fraction/BigFraction.html">BigFraction</a>[] {
<a class="jxr_linenumber" name="L138" href="#L138">138</a>                         BigFraction.ZERO,
<a class="jxr_linenumber" name="L139" href="#L139">139</a>                         BigFraction.TWO,
<a class="jxr_linenumber" name="L140" href="#L140">140</a>                         <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/fraction/BigFraction.html">BigFraction</a>(2 * k)};
<a class="jxr_linenumber" name="L141" href="#L141">141</a>             }
<a class="jxr_linenumber" name="L142" href="#L142">142</a>         });
<a class="jxr_linenumber" name="L143" href="#L143">143</a>     }
<a class="jxr_linenumber" name="L144" href="#L144">144</a> 
<a class="jxr_linenumber" name="L145" href="#L145">145</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L146" href="#L146">146</a> <em class="jxr_javadoccomment">     * Create a Laguerre polynomial.</em>
<a class="jxr_linenumber" name="L147" href="#L147">147</a> <em class="jxr_javadoccomment">     * &lt;p&gt;&lt;a href="<a href="http://mathworld.wolfram.com/LaguerrePolynomial.html" target="alexandria_uri">http://mathworld.wolfram.com/LaguerrePolynomial.html</a>"&gt;Laguerre</em>
<a class="jxr_linenumber" name="L148" href="#L148">148</a> <em class="jxr_javadoccomment">     * polynomials&lt;/a&gt; are orthogonal polynomials.</em>
<a class="jxr_linenumber" name="L149" href="#L149">149</a> <em class="jxr_javadoccomment">     * They can be defined by the following recurrence relations:&lt;/p&gt;&lt;p&gt;</em>
<a class="jxr_linenumber" name="L150" href="#L150">150</a> <em class="jxr_javadoccomment">     * \(</em>
<a class="jxr_linenumber" name="L151" href="#L151">151</a> <em class="jxr_javadoccomment">     *   L_0(x) = 1 &#92;&#92;</em>
<a class="jxr_linenumber" name="L152" href="#L152">152</a> <em class="jxr_javadoccomment">     *   L_1(x) = 1 - x &#92;&#92;</em>
<a class="jxr_linenumber" name="L153" href="#L153">153</a> <em class="jxr_javadoccomment">     *   (k+1) L_{k+1}(x) = (2k + 1 - x) L_k(x) - k L_{k-1}(x)</em>
<a class="jxr_linenumber" name="L154" href="#L154">154</a> <em class="jxr_javadoccomment">     * \)</em>
<a class="jxr_linenumber" name="L155" href="#L155">155</a> <em class="jxr_javadoccomment">     * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L156" href="#L156">156</a> <em class="jxr_javadoccomment">     * @param degree degree of the polynomial</em>
<a class="jxr_linenumber" name="L157" href="#L157">157</a> <em class="jxr_javadoccomment">     * @return Laguerre polynomial of specified degree</em>
<a class="jxr_linenumber" name="L158" href="#L158">158</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L159" href="#L159">159</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <a href="../../../../../../org/apache/commons/math3/analysis/polynomials/PolynomialFunction.html">PolynomialFunction</a> createLaguerrePolynomial(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> degree) {
<a class="jxr_linenumber" name="L160" href="#L160">160</a>         <strong class="jxr_keyword">return</strong> buildPolynomial(degree, LAGUERRE_COEFFICIENTS,
<a class="jxr_linenumber" name="L161" href="#L161">161</a>                 <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/analysis/polynomials/PolynomialsUtils.html">RecurrenceCoefficientsGenerator</a>() {
<a class="jxr_linenumber" name="L162" href="#L162">162</a>             <em class="jxr_javadoccomment">/** {@inheritDoc} */</em>
<a class="jxr_linenumber" name="L163" href="#L163">163</a>             <strong class="jxr_keyword">public</strong> <a href="../../../../../../org/apache/commons/math3/fraction/BigFraction.html">BigFraction</a>[] generate(<strong class="jxr_keyword">int</strong> k) {
<a class="jxr_linenumber" name="L164" href="#L164">164</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> kP1 = k + 1;
<a class="jxr_linenumber" name="L165" href="#L165">165</a>                 <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/fraction/BigFraction.html">BigFraction</a>[] {
<a class="jxr_linenumber" name="L166" href="#L166">166</a>                         <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/fraction/BigFraction.html">BigFraction</a>(2 * k + 1, kP1),
<a class="jxr_linenumber" name="L167" href="#L167">167</a>                         <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/fraction/BigFraction.html">BigFraction</a>(-1, kP1),
<a class="jxr_linenumber" name="L168" href="#L168">168</a>                         <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/fraction/BigFraction.html">BigFraction</a>(k, kP1)};
<a class="jxr_linenumber" name="L169" href="#L169">169</a>             }
<a class="jxr_linenumber" name="L170" href="#L170">170</a>         });
<a class="jxr_linenumber" name="L171" href="#L171">171</a>     }
<a class="jxr_linenumber" name="L172" href="#L172">172</a> 
<a class="jxr_linenumber" name="L173" href="#L173">173</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L174" href="#L174">174</a> <em class="jxr_javadoccomment">     * Create a Legendre polynomial.</em>
<a class="jxr_linenumber" name="L175" href="#L175">175</a> <em class="jxr_javadoccomment">     * &lt;p&gt;&lt;a href="<a href="http://mathworld.wolfram.com/LegendrePolynomial.html" target="alexandria_uri">http://mathworld.wolfram.com/LegendrePolynomial.html</a>"&gt;Legendre</em>
<a class="jxr_linenumber" name="L176" href="#L176">176</a> <em class="jxr_javadoccomment">     * polynomials&lt;/a&gt; are orthogonal polynomials.</em>
<a class="jxr_linenumber" name="L177" href="#L177">177</a> <em class="jxr_javadoccomment">     * They can be defined by the following recurrence relations:&lt;/p&gt;&lt;p&gt;</em>
<a class="jxr_linenumber" name="L178" href="#L178">178</a> <em class="jxr_javadoccomment">     * \(</em>
<a class="jxr_linenumber" name="L179" href="#L179">179</a> <em class="jxr_javadoccomment">     *   P_0(x) = 1 &#92;&#92;</em>
<a class="jxr_linenumber" name="L180" href="#L180">180</a> <em class="jxr_javadoccomment">     *   P_1(x) = x &#92;&#92;</em>
<a class="jxr_linenumber" name="L181" href="#L181">181</a> <em class="jxr_javadoccomment">     *   (k+1) P_{k+1}(x) = (2k+1) x P_k(x) - k P_{k-1}(x)</em>
<a class="jxr_linenumber" name="L182" href="#L182">182</a> <em class="jxr_javadoccomment">     * \)</em>
<a class="jxr_linenumber" name="L183" href="#L183">183</a> <em class="jxr_javadoccomment">     * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L184" href="#L184">184</a> <em class="jxr_javadoccomment">     * @param degree degree of the polynomial</em>
<a class="jxr_linenumber" name="L185" href="#L185">185</a> <em class="jxr_javadoccomment">     * @return Legendre polynomial of specified degree</em>
<a class="jxr_linenumber" name="L186" href="#L186">186</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L187" href="#L187">187</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <a href="../../../../../../org/apache/commons/math3/analysis/polynomials/PolynomialFunction.html">PolynomialFunction</a> createLegendrePolynomial(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> degree) {
<a class="jxr_linenumber" name="L188" href="#L188">188</a>         <strong class="jxr_keyword">return</strong> buildPolynomial(degree, LEGENDRE_COEFFICIENTS,
<a class="jxr_linenumber" name="L189" href="#L189">189</a>                                <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/analysis/polynomials/PolynomialsUtils.html">RecurrenceCoefficientsGenerator</a>() {
<a class="jxr_linenumber" name="L190" href="#L190">190</a>             <em class="jxr_javadoccomment">/** {@inheritDoc} */</em>
<a class="jxr_linenumber" name="L191" href="#L191">191</a>             <strong class="jxr_keyword">public</strong> <a href="../../../../../../org/apache/commons/math3/fraction/BigFraction.html">BigFraction</a>[] generate(<strong class="jxr_keyword">int</strong> k) {
<a class="jxr_linenumber" name="L192" href="#L192">192</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> kP1 = k + 1;
<a class="jxr_linenumber" name="L193" href="#L193">193</a>                 <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/fraction/BigFraction.html">BigFraction</a>[] {
<a class="jxr_linenumber" name="L194" href="#L194">194</a>                         BigFraction.ZERO,
<a class="jxr_linenumber" name="L195" href="#L195">195</a>                         <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/fraction/BigFraction.html">BigFraction</a>(k + kP1, kP1),
<a class="jxr_linenumber" name="L196" href="#L196">196</a>                         <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/fraction/BigFraction.html">BigFraction</a>(k, kP1)};
<a class="jxr_linenumber" name="L197" href="#L197">197</a>             }
<a class="jxr_linenumber" name="L198" href="#L198">198</a>         });
<a class="jxr_linenumber" name="L199" href="#L199">199</a>     }
<a class="jxr_linenumber" name="L200" href="#L200">200</a> 
<a class="jxr_linenumber" name="L201" href="#L201">201</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L202" href="#L202">202</a> <em class="jxr_javadoccomment">     * Create a Jacobi polynomial.</em>
<a class="jxr_linenumber" name="L203" href="#L203">203</a> <em class="jxr_javadoccomment">     * &lt;p&gt;&lt;a href="<a href="http://mathworld.wolfram.com/JacobiPolynomial.html" target="alexandria_uri">http://mathworld.wolfram.com/JacobiPolynomial.html</a>"&gt;Jacobi</em>
<a class="jxr_linenumber" name="L204" href="#L204">204</a> <em class="jxr_javadoccomment">     * polynomials&lt;/a&gt; are orthogonal polynomials.</em>
<a class="jxr_linenumber" name="L205" href="#L205">205</a> <em class="jxr_javadoccomment">     * They can be defined by the following recurrence relations:&lt;/p&gt;&lt;p&gt;</em>
<a class="jxr_linenumber" name="L206" href="#L206">206</a> <em class="jxr_javadoccomment">     * \(</em>
<a class="jxr_linenumber" name="L207" href="#L207">207</a> <em class="jxr_javadoccomment">     *    P_0^{vw}(x) = 1 &#92;&#92;</em>
<a class="jxr_linenumber" name="L208" href="#L208">208</a> <em class="jxr_javadoccomment">     *    P_{-1}^{vw}(x) = 0 &#92;&#92;</em>
<a class="jxr_linenumber" name="L209" href="#L209">209</a> <em class="jxr_javadoccomment">     *    2k(k + v + w)(2k + v + w - 2) P_k^{vw}(x) = &#92;&#92;</em>
<a class="jxr_linenumber" name="L210" href="#L210">210</a> <em class="jxr_javadoccomment">     *    (2k + v + w - 1)[(2k + v + w)(2k + v + w - 2) x + v^2 - w^2] P_{k-1}^{vw}(x) &#92;&#92;</em>
<a class="jxr_linenumber" name="L211" href="#L211">211</a> <em class="jxr_javadoccomment">     *  - 2(k + v - 1)(k + w - 1)(2k + v + w) P_{k-2}^{vw}(x)</em>
<a class="jxr_linenumber" name="L212" href="#L212">212</a> <em class="jxr_javadoccomment">     * \)</em>
<a class="jxr_linenumber" name="L213" href="#L213">213</a> <em class="jxr_javadoccomment">     * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L214" href="#L214">214</a> <em class="jxr_javadoccomment">     * @param degree degree of the polynomial</em>
<a class="jxr_linenumber" name="L215" href="#L215">215</a> <em class="jxr_javadoccomment">     * @param v first exponent</em>
<a class="jxr_linenumber" name="L216" href="#L216">216</a> <em class="jxr_javadoccomment">     * @param w second exponent</em>
<a class="jxr_linenumber" name="L217" href="#L217">217</a> <em class="jxr_javadoccomment">     * @return Jacobi polynomial of specified degree</em>
<a class="jxr_linenumber" name="L218" href="#L218">218</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L219" href="#L219">219</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <a href="../../../../../../org/apache/commons/math3/analysis/polynomials/PolynomialFunction.html">PolynomialFunction</a> createJacobiPolynomial(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> degree, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> v, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> w) {
<a class="jxr_linenumber" name="L220" href="#L220">220</a> 
<a class="jxr_linenumber" name="L221" href="#L221">221</a>         <em class="jxr_comment">// select the appropriate list</em>
<a class="jxr_linenumber" name="L222" href="#L222">222</a>         <strong class="jxr_keyword">final</strong> <a href="../../../../../../org/apache/commons/math3/analysis/polynomials/PolynomialsUtils.html">JacobiKey</a> key = <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/analysis/polynomials/PolynomialsUtils.html">JacobiKey</a>(v, w);
<a class="jxr_linenumber" name="L223" href="#L223">223</a> 
<a class="jxr_linenumber" name="L224" href="#L224">224</a>         <strong class="jxr_keyword">if</strong> (!JACOBI_COEFFICIENTS.containsKey(key)) {
<a class="jxr_linenumber" name="L225" href="#L225">225</a> 
<a class="jxr_linenumber" name="L226" href="#L226">226</a>             <em class="jxr_comment">// allocate a new list for v, w</em>
<a class="jxr_linenumber" name="L227" href="#L227">227</a>             <strong class="jxr_keyword">final</strong> List&lt;BigFraction&gt; list = <strong class="jxr_keyword">new</strong> ArrayList&lt;BigFraction&gt;();
<a class="jxr_linenumber" name="L228" href="#L228">228</a>             JACOBI_COEFFICIENTS.put(key, list);
<a class="jxr_linenumber" name="L229" href="#L229">229</a> 
<a class="jxr_linenumber" name="L230" href="#L230">230</a>             <em class="jxr_comment">// Pv,w,0(x) = 1;</em>
<a class="jxr_linenumber" name="L231" href="#L231">231</a>             list.add(BigFraction.ONE);
<a class="jxr_linenumber" name="L232" href="#L232">232</a> 
<a class="jxr_linenumber" name="L233" href="#L233">233</a>             <em class="jxr_comment">// P1(x) = (v - w) / 2 + (2 + v + w) * X / 2</em>
<a class="jxr_linenumber" name="L234" href="#L234">234</a>             list.add(<strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/fraction/BigFraction.html">BigFraction</a>(v - w, 2));
<a class="jxr_linenumber" name="L235" href="#L235">235</a>             list.add(<strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/fraction/BigFraction.html">BigFraction</a>(2 + v + w, 2));
<a class="jxr_linenumber" name="L236" href="#L236">236</a> 
<a class="jxr_linenumber" name="L237" href="#L237">237</a>         }
<a class="jxr_linenumber" name="L238" href="#L238">238</a> 
<a class="jxr_linenumber" name="L239" href="#L239">239</a>         <strong class="jxr_keyword">return</strong> buildPolynomial(degree, JACOBI_COEFFICIENTS.get(key),
<a class="jxr_linenumber" name="L240" href="#L240">240</a>                                <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/analysis/polynomials/PolynomialsUtils.html">RecurrenceCoefficientsGenerator</a>() {
<a class="jxr_linenumber" name="L241" href="#L241">241</a>             <em class="jxr_javadoccomment">/** {@inheritDoc} */</em>
<a class="jxr_linenumber" name="L242" href="#L242">242</a>             <strong class="jxr_keyword">public</strong> <a href="../../../../../../org/apache/commons/math3/fraction/BigFraction.html">BigFraction</a>[] generate(<strong class="jxr_keyword">int</strong> k) {
<a class="jxr_linenumber" name="L243" href="#L243">243</a>                 k++;
<a class="jxr_linenumber" name="L244" href="#L244">244</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> kvw      = k + v + w;
<a class="jxr_linenumber" name="L245" href="#L245">245</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> twoKvw   = kvw + k;
<a class="jxr_linenumber" name="L246" href="#L246">246</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> twoKvwM1 = twoKvw - 1;
<a class="jxr_linenumber" name="L247" href="#L247">247</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> twoKvwM2 = twoKvw - 2;
<a class="jxr_linenumber" name="L248" href="#L248">248</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> den      = 2 * k *  kvw * twoKvwM2;
<a class="jxr_linenumber" name="L249" href="#L249">249</a> 
<a class="jxr_linenumber" name="L250" href="#L250">250</a>                 <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/fraction/BigFraction.html">BigFraction</a>[] {
<a class="jxr_linenumber" name="L251" href="#L251">251</a>                     <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/fraction/BigFraction.html">BigFraction</a>(twoKvwM1 * (v * v - w * w), den),
<a class="jxr_linenumber" name="L252" href="#L252">252</a>                     <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/fraction/BigFraction.html">BigFraction</a>(twoKvwM1 * twoKvw * twoKvwM2, den),
<a class="jxr_linenumber" name="L253" href="#L253">253</a>                     <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/fraction/BigFraction.html">BigFraction</a>(2 * (k + v - 1) * (k + w - 1) * twoKvw, den)
<a class="jxr_linenumber" name="L254" href="#L254">254</a>                 };
<a class="jxr_linenumber" name="L255" href="#L255">255</a>             }
<a class="jxr_linenumber" name="L256" href="#L256">256</a>         });
<a class="jxr_linenumber" name="L257" href="#L257">257</a> 
<a class="jxr_linenumber" name="L258" href="#L258">258</a>     }
<a class="jxr_linenumber" name="L259" href="#L259">259</a> 
<a class="jxr_linenumber" name="L260" href="#L260">260</a>     <em class="jxr_javadoccomment">/** Inner class for Jacobi polynomials keys. */</em>
<a class="jxr_linenumber" name="L261" href="#L261">261</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../../org/apache/commons/math3/analysis/polynomials/PolynomialsUtils.html">JacobiKey</a> {
<a class="jxr_linenumber" name="L262" href="#L262">262</a> 
<a class="jxr_linenumber" name="L263" href="#L263">263</a>         <em class="jxr_javadoccomment">/** First exponent. */</em>
<a class="jxr_linenumber" name="L264" href="#L264">264</a>         <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> v;
<a class="jxr_linenumber" name="L265" href="#L265">265</a> 
<a class="jxr_linenumber" name="L266" href="#L266">266</a>         <em class="jxr_javadoccomment">/** Second exponent. */</em>
<a class="jxr_linenumber" name="L267" href="#L267">267</a>         <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> w;
<a class="jxr_linenumber" name="L268" href="#L268">268</a> 
<a class="jxr_linenumber" name="L269" href="#L269">269</a>         <em class="jxr_javadoccomment">/** Simple constructor.</em>
<a class="jxr_linenumber" name="L270" href="#L270">270</a> <em class="jxr_javadoccomment">         * @param v first exponent</em>
<a class="jxr_linenumber" name="L271" href="#L271">271</a> <em class="jxr_javadoccomment">         * @param w second exponent</em>
<a class="jxr_linenumber" name="L272" href="#L272">272</a> <em class="jxr_javadoccomment">         */</em>
<a class="jxr_linenumber" name="L273" href="#L273">273</a>         <a href="../../../../../../org/apache/commons/math3/analysis/polynomials/PolynomialsUtils.html">JacobiKey</a>(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> v, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> w) {
<a class="jxr_linenumber" name="L274" href="#L274">274</a>             <strong class="jxr_keyword">this</strong>.v = v;
<a class="jxr_linenumber" name="L275" href="#L275">275</a>             <strong class="jxr_keyword">this</strong>.w = w;
<a class="jxr_linenumber" name="L276" href="#L276">276</a>         }
<a class="jxr_linenumber" name="L277" href="#L277">277</a> 
<a class="jxr_linenumber" name="L278" href="#L278">278</a>         <em class="jxr_javadoccomment">/** Get hash code.</em>
<a class="jxr_linenumber" name="L279" href="#L279">279</a> <em class="jxr_javadoccomment">         * @return hash code</em>
<a class="jxr_linenumber" name="L280" href="#L280">280</a> <em class="jxr_javadoccomment">         */</em>
<a class="jxr_linenumber" name="L281" href="#L281">281</a>         @Override
<a class="jxr_linenumber" name="L282" href="#L282">282</a>         <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">int</strong> hashCode() {
<a class="jxr_linenumber" name="L283" href="#L283">283</a>             <strong class="jxr_keyword">return</strong> (v &lt;&lt; 16) ^ w;
<a class="jxr_linenumber" name="L284" href="#L284">284</a>         }
<a class="jxr_linenumber" name="L285" href="#L285">285</a> 
<a class="jxr_linenumber" name="L286" href="#L286">286</a>         <em class="jxr_javadoccomment">/** Check if the instance represent the same key as another instance.</em>
<a class="jxr_linenumber" name="L287" href="#L287">287</a> <em class="jxr_javadoccomment">         * @param key other key</em>
<a class="jxr_linenumber" name="L288" href="#L288">288</a> <em class="jxr_javadoccomment">         * @return true if the instance and the other key refer to the same polynomial</em>
<a class="jxr_linenumber" name="L289" href="#L289">289</a> <em class="jxr_javadoccomment">         */</em>
<a class="jxr_linenumber" name="L290" href="#L290">290</a>         @Override
<a class="jxr_linenumber" name="L291" href="#L291">291</a>         <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">boolean</strong> equals(<strong class="jxr_keyword">final</strong> Object key) {
<a class="jxr_linenumber" name="L292" href="#L292">292</a> 
<a class="jxr_linenumber" name="L293" href="#L293">293</a>             <strong class="jxr_keyword">if</strong> ((key == <strong class="jxr_keyword">null</strong>) || !(key instanceof JacobiKey)) {
<a class="jxr_linenumber" name="L294" href="#L294">294</a>                 <strong class="jxr_keyword">return</strong> false;
<a class="jxr_linenumber" name="L295" href="#L295">295</a>             }
<a class="jxr_linenumber" name="L296" href="#L296">296</a> 
<a class="jxr_linenumber" name="L297" href="#L297">297</a>             <strong class="jxr_keyword">final</strong> <a href="../../../../../../org/apache/commons/math3/analysis/polynomials/PolynomialsUtils.html">JacobiKey</a> otherK = (JacobiKey) key;
<a class="jxr_linenumber" name="L298" href="#L298">298</a>             <strong class="jxr_keyword">return</strong> (v == otherK.v) &amp;&amp; (w == otherK.w);
<a class="jxr_linenumber" name="L299" href="#L299">299</a> 
<a class="jxr_linenumber" name="L300" href="#L300">300</a>         }
<a class="jxr_linenumber" name="L301" href="#L301">301</a>     }
<a class="jxr_linenumber" name="L302" href="#L302">302</a> 
<a class="jxr_linenumber" name="L303" href="#L303">303</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L304" href="#L304">304</a> <em class="jxr_javadoccomment">     * Compute the coefficients of the polynomial \(P_s(x)\)</em>
<a class="jxr_linenumber" name="L305" href="#L305">305</a> <em class="jxr_javadoccomment">     * whose values at point {@code x} will be the same as the those from the</em>
<a class="jxr_linenumber" name="L306" href="#L306">306</a> <em class="jxr_javadoccomment">     * original polynomial \(P(x)\) when computed at {@code x + shift}.</em>
<a class="jxr_linenumber" name="L307" href="#L307">307</a> <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L308" href="#L308">308</a> <em class="jxr_javadoccomment">     * More precisely, let \(\Delta = \) {@code shift} and let</em>
<a class="jxr_linenumber" name="L309" href="#L309">309</a> <em class="jxr_javadoccomment">     * \(P_s(x) = P(x + \Delta)\).  The returned array</em>
<a class="jxr_linenumber" name="L310" href="#L310">310</a> <em class="jxr_javadoccomment">     * consists of the coefficients of \(P_s\).  So if \(a_0, ..., a_{n-1}\)</em>
<a class="jxr_linenumber" name="L311" href="#L311">311</a> <em class="jxr_javadoccomment">     * are the coefficients of \(P\), then the returned array</em>
<a class="jxr_linenumber" name="L312" href="#L312">312</a> <em class="jxr_javadoccomment">     * \(b_0, ..., b_{n-1}\) satisfies the identity</em>
<a class="jxr_linenumber" name="L313" href="#L313">313</a> <em class="jxr_javadoccomment">     * \(\sum_{i=0}^{n-1} b_i x^i = \sum_{i=0}^{n-1} a_i (x + \Delta)^i\) for all \(x\).</em>
<a class="jxr_linenumber" name="L314" href="#L314">314</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L315" href="#L315">315</a> <em class="jxr_javadoccomment">     * @param coefficients Coefficients of the original polynomial.</em>
<a class="jxr_linenumber" name="L316" href="#L316">316</a> <em class="jxr_javadoccomment">     * @param shift Shift value.</em>
<a class="jxr_linenumber" name="L317" href="#L317">317</a> <em class="jxr_javadoccomment">     * @return the coefficients \(b_i\) of the shifted</em>
<a class="jxr_linenumber" name="L318" href="#L318">318</a> <em class="jxr_javadoccomment">     * polynomial.</em>
<a class="jxr_linenumber" name="L319" href="#L319">319</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L320" href="#L320">320</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">double</strong>[] shift(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] coefficients,
<a class="jxr_linenumber" name="L321" href="#L321">321</a>                                  <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> shift) {
<a class="jxr_linenumber" name="L322" href="#L322">322</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> dp1 = coefficients.length;
<a class="jxr_linenumber" name="L323" href="#L323">323</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] newCoefficients = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[dp1];
<a class="jxr_linenumber" name="L324" href="#L324">324</a> 
<a class="jxr_linenumber" name="L325" href="#L325">325</a>         <em class="jxr_comment">// Pascal triangle.</em>
<a class="jxr_linenumber" name="L326" href="#L326">326</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong>[][] coeff = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">int</strong>[dp1][dp1];
<a class="jxr_linenumber" name="L327" href="#L327">327</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; dp1; i++){
<a class="jxr_linenumber" name="L328" href="#L328">328</a>             <strong class="jxr_keyword">for</strong>(<strong class="jxr_keyword">int</strong> j = 0; j &lt;= i; j++){
<a class="jxr_linenumber" name="L329" href="#L329">329</a>                 coeff[i][j] = (<strong class="jxr_keyword">int</strong>) CombinatoricsUtils.binomialCoefficient(i, j);
<a class="jxr_linenumber" name="L330" href="#L330">330</a>             }
<a class="jxr_linenumber" name="L331" href="#L331">331</a>         }
<a class="jxr_linenumber" name="L332" href="#L332">332</a> 
<a class="jxr_linenumber" name="L333" href="#L333">333</a>         <em class="jxr_comment">// First polynomial coefficient.</em>
<a class="jxr_linenumber" name="L334" href="#L334">334</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; dp1; i++){
<a class="jxr_linenumber" name="L335" href="#L335">335</a>             newCoefficients[0] += coefficients[i] * FastMath.pow(shift, i);
<a class="jxr_linenumber" name="L336" href="#L336">336</a>         }
<a class="jxr_linenumber" name="L337" href="#L337">337</a> 
<a class="jxr_linenumber" name="L338" href="#L338">338</a>         <em class="jxr_comment">// Superior order.</em>
<a class="jxr_linenumber" name="L339" href="#L339">339</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> d = dp1 - 1;
<a class="jxr_linenumber" name="L340" href="#L340">340</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; d; i++) {
<a class="jxr_linenumber" name="L341" href="#L341">341</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = i; j &lt; d; j++){
<a class="jxr_linenumber" name="L342" href="#L342">342</a>                 newCoefficients[i + 1] += coeff[j + 1][j - i] *
<a class="jxr_linenumber" name="L343" href="#L343">343</a>                     coefficients[j + 1] * FastMath.pow(shift, j - i);
<a class="jxr_linenumber" name="L344" href="#L344">344</a>             }
<a class="jxr_linenumber" name="L345" href="#L345">345</a>         }
<a class="jxr_linenumber" name="L346" href="#L346">346</a> 
<a class="jxr_linenumber" name="L347" href="#L347">347</a>         <strong class="jxr_keyword">return</strong> newCoefficients;
<a class="jxr_linenumber" name="L348" href="#L348">348</a>     }
<a class="jxr_linenumber" name="L349" href="#L349">349</a> 
<a class="jxr_linenumber" name="L350" href="#L350">350</a> 
<a class="jxr_linenumber" name="L351" href="#L351">351</a>     <em class="jxr_javadoccomment">/** Get the coefficients array for a given degree.</em>
<a class="jxr_linenumber" name="L352" href="#L352">352</a> <em class="jxr_javadoccomment">     * @param degree degree of the polynomial</em>
<a class="jxr_linenumber" name="L353" href="#L353">353</a> <em class="jxr_javadoccomment">     * @param coefficients list where the computed coefficients are stored</em>
<a class="jxr_linenumber" name="L354" href="#L354">354</a> <em class="jxr_javadoccomment">     * @param generator recurrence coefficients generator</em>
<a class="jxr_linenumber" name="L355" href="#L355">355</a> <em class="jxr_javadoccomment">     * @return coefficients array</em>
<a class="jxr_linenumber" name="L356" href="#L356">356</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L357" href="#L357">357</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <a href="../../../../../../org/apache/commons/math3/analysis/polynomials/PolynomialFunction.html">PolynomialFunction</a> buildPolynomial(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> degree,
<a class="jxr_linenumber" name="L358" href="#L358">358</a>                                                       <strong class="jxr_keyword">final</strong> List&lt;BigFraction&gt; coefficients,
<a class="jxr_linenumber" name="L359" href="#L359">359</a>                                                       <strong class="jxr_keyword">final</strong> <a href="../../../../../../org/apache/commons/math3/analysis/polynomials/PolynomialsUtils.html">RecurrenceCoefficientsGenerator</a> generator) {
<a class="jxr_linenumber" name="L360" href="#L360">360</a>         <strong class="jxr_keyword">synchronized</strong> (coefficients) {
<a class="jxr_linenumber" name="L361" href="#L361">361</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> maxDegree = (<strong class="jxr_keyword">int</strong>) FastMath.floor(FastMath.sqrt(2 * coefficients.size())) - 1;
<a class="jxr_linenumber" name="L362" href="#L362">362</a>             <strong class="jxr_keyword">if</strong> (degree &gt; maxDegree) {
<a class="jxr_linenumber" name="L363" href="#L363">363</a>                 computeUpToDegree(degree, maxDegree, generator, coefficients);
<a class="jxr_linenumber" name="L364" href="#L364">364</a>             }
<a class="jxr_linenumber" name="L365" href="#L365">365</a>         }
<a class="jxr_linenumber" name="L366" href="#L366">366</a> 
<a class="jxr_linenumber" name="L367" href="#L367">367</a>         <em class="jxr_comment">// coefficient  for polynomial 0 is  l [0]</em>
<a class="jxr_linenumber" name="L368" href="#L368">368</a>         <em class="jxr_comment">// coefficients for polynomial 1 are l [1] ... l [2] (degrees 0 ... 1)</em>
<a class="jxr_linenumber" name="L369" href="#L369">369</a>         <em class="jxr_comment">// coefficients for polynomial 2 are l [3] ... l [5] (degrees 0 ... 2)</em>
<a class="jxr_linenumber" name="L370" href="#L370">370</a>         <em class="jxr_comment">// coefficients for polynomial 3 are l [6] ... l [9] (degrees 0 ... 3)</em>
<a class="jxr_linenumber" name="L371" href="#L371">371</a>         <em class="jxr_comment">// coefficients for polynomial 4 are l[10] ... l[14] (degrees 0 ... 4)</em>
<a class="jxr_linenumber" name="L372" href="#L372">372</a>         <em class="jxr_comment">// coefficients for polynomial 5 are l[15] ... l[20] (degrees 0 ... 5)</em>
<a class="jxr_linenumber" name="L373" href="#L373">373</a>         <em class="jxr_comment">// coefficients for polynomial 6 are l[21] ... l[27] (degrees 0 ... 6)</em>
<a class="jxr_linenumber" name="L374" href="#L374">374</a>         <em class="jxr_comment">// ...</em>
<a class="jxr_linenumber" name="L375" href="#L375">375</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> start = degree * (degree + 1) / 2;
<a class="jxr_linenumber" name="L376" href="#L376">376</a> 
<a class="jxr_linenumber" name="L377" href="#L377">377</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] a = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[degree + 1];
<a class="jxr_linenumber" name="L378" href="#L378">378</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt;= degree; ++i) {
<a class="jxr_linenumber" name="L379" href="#L379">379</a>             a[i] = coefficients.get(start + i).doubleValue();
<a class="jxr_linenumber" name="L380" href="#L380">380</a>         }
<a class="jxr_linenumber" name="L381" href="#L381">381</a> 
<a class="jxr_linenumber" name="L382" href="#L382">382</a>         <em class="jxr_comment">// build the polynomial</em>
<a class="jxr_linenumber" name="L383" href="#L383">383</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/analysis/polynomials/PolynomialFunction.html">PolynomialFunction</a>(a);
<a class="jxr_linenumber" name="L384" href="#L384">384</a> 
<a class="jxr_linenumber" name="L385" href="#L385">385</a>     }
<a class="jxr_linenumber" name="L386" href="#L386">386</a> 
<a class="jxr_linenumber" name="L387" href="#L387">387</a>     <em class="jxr_javadoccomment">/** Compute polynomial coefficients up to a given degree.</em>
<a class="jxr_linenumber" name="L388" href="#L388">388</a> <em class="jxr_javadoccomment">     * @param degree maximal degree</em>
<a class="jxr_linenumber" name="L389" href="#L389">389</a> <em class="jxr_javadoccomment">     * @param maxDegree current maximal degree</em>
<a class="jxr_linenumber" name="L390" href="#L390">390</a> <em class="jxr_javadoccomment">     * @param generator recurrence coefficients generator</em>
<a class="jxr_linenumber" name="L391" href="#L391">391</a> <em class="jxr_javadoccomment">     * @param coefficients list where the computed coefficients should be appended</em>
<a class="jxr_linenumber" name="L392" href="#L392">392</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L393" href="#L393">393</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">void</strong> computeUpToDegree(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> degree, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> maxDegree,
<a class="jxr_linenumber" name="L394" href="#L394">394</a>                                           <strong class="jxr_keyword">final</strong> <a href="../../../../../../org/apache/commons/math3/analysis/polynomials/PolynomialsUtils.html">RecurrenceCoefficientsGenerator</a> generator,
<a class="jxr_linenumber" name="L395" href="#L395">395</a>                                           <strong class="jxr_keyword">final</strong> List&lt;BigFraction&gt; coefficients) {
<a class="jxr_linenumber" name="L396" href="#L396">396</a> 
<a class="jxr_linenumber" name="L397" href="#L397">397</a>         <strong class="jxr_keyword">int</strong> startK = (maxDegree - 1) * maxDegree / 2;
<a class="jxr_linenumber" name="L398" href="#L398">398</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> k = maxDegree; k &lt; degree; ++k) {
<a class="jxr_linenumber" name="L399" href="#L399">399</a> 
<a class="jxr_linenumber" name="L400" href="#L400">400</a>             <em class="jxr_comment">// start indices of two previous polynomials Pk(X) and Pk-1(X)</em>
<a class="jxr_linenumber" name="L401" href="#L401">401</a>             <strong class="jxr_keyword">int</strong> startKm1 = startK;
<a class="jxr_linenumber" name="L402" href="#L402">402</a>             startK += k;
<a class="jxr_linenumber" name="L403" href="#L403">403</a> 
<a class="jxr_linenumber" name="L404" href="#L404">404</a>             <em class="jxr_comment">// Pk+1(X) = (a[0] + a[1] X) Pk(X) - a[2] Pk-1(X)</em>
<a class="jxr_linenumber" name="L405" href="#L405">405</a>             <a href="../../../../../../org/apache/commons/math3/fraction/BigFraction.html">BigFraction</a>[] ai = generator.generate(k);
<a class="jxr_linenumber" name="L406" href="#L406">406</a> 
<a class="jxr_linenumber" name="L407" href="#L407">407</a>             <a href="../../../../../../org/apache/commons/math3/fraction/BigFraction.html">BigFraction</a> ck     = coefficients.get(startK);
<a class="jxr_linenumber" name="L408" href="#L408">408</a>             <a href="../../../../../../org/apache/commons/math3/fraction/BigFraction.html">BigFraction</a> ckm1   = coefficients.get(startKm1);
<a class="jxr_linenumber" name="L409" href="#L409">409</a> 
<a class="jxr_linenumber" name="L410" href="#L410">410</a>             <em class="jxr_comment">// degree 0 coefficient</em>
<a class="jxr_linenumber" name="L411" href="#L411">411</a>             coefficients.add(ck.multiply(ai[0]).subtract(ckm1.multiply(ai[2])));
<a class="jxr_linenumber" name="L412" href="#L412">412</a> 
<a class="jxr_linenumber" name="L413" href="#L413">413</a>             <em class="jxr_comment">// degree 1 to degree k-1 coefficients</em>
<a class="jxr_linenumber" name="L414" href="#L414">414</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 1; i &lt; k; ++i) {
<a class="jxr_linenumber" name="L415" href="#L415">415</a>                 <strong class="jxr_keyword">final</strong> <a href="../../../../../../org/apache/commons/math3/fraction/BigFraction.html">BigFraction</a> ckPrev = ck;
<a class="jxr_linenumber" name="L416" href="#L416">416</a>                 ck     = coefficients.get(startK + i);
<a class="jxr_linenumber" name="L417" href="#L417">417</a>                 ckm1   = coefficients.get(startKm1 + i);
<a class="jxr_linenumber" name="L418" href="#L418">418</a>                 coefficients.add(ck.multiply(ai[0]).add(ckPrev.multiply(ai[1])).subtract(ckm1.multiply(ai[2])));
<a class="jxr_linenumber" name="L419" href="#L419">419</a>             }
<a class="jxr_linenumber" name="L420" href="#L420">420</a> 
<a class="jxr_linenumber" name="L421" href="#L421">421</a>             <em class="jxr_comment">// degree k coefficient</em>
<a class="jxr_linenumber" name="L422" href="#L422">422</a>             <strong class="jxr_keyword">final</strong> <a href="../../../../../../org/apache/commons/math3/fraction/BigFraction.html">BigFraction</a> ckPrev = ck;
<a class="jxr_linenumber" name="L423" href="#L423">423</a>             ck = coefficients.get(startK + k);
<a class="jxr_linenumber" name="L424" href="#L424">424</a>             coefficients.add(ck.multiply(ai[0]).add(ckPrev.multiply(ai[1])));
<a class="jxr_linenumber" name="L425" href="#L425">425</a> 
<a class="jxr_linenumber" name="L426" href="#L426">426</a>             <em class="jxr_comment">// degree k+1 coefficient</em>
<a class="jxr_linenumber" name="L427" href="#L427">427</a>             coefficients.add(ck.multiply(ai[1]));
<a class="jxr_linenumber" name="L428" href="#L428">428</a> 
<a class="jxr_linenumber" name="L429" href="#L429">429</a>         }
<a class="jxr_linenumber" name="L430" href="#L430">430</a> 
<a class="jxr_linenumber" name="L431" href="#L431">431</a>     }
<a class="jxr_linenumber" name="L432" href="#L432">432</a> 
<a class="jxr_linenumber" name="L433" href="#L433">433</a>     <em class="jxr_javadoccomment">/** Interface for recurrence coefficients generation. */</em>
<a class="jxr_linenumber" name="L434" href="#L434">434</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">interface</strong> <a href="../../../../../../org/apache/commons/math3/analysis/polynomials/PolynomialsUtils.html">RecurrenceCoefficientsGenerator</a> {
<a class="jxr_linenumber" name="L435" href="#L435">435</a>         <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L436" href="#L436">436</a> <em class="jxr_javadoccomment">         * Generate recurrence coefficients.</em>
<a class="jxr_linenumber" name="L437" href="#L437">437</a> <em class="jxr_javadoccomment">         * @param k highest degree of the polynomials used in the recurrence</em>
<a class="jxr_linenumber" name="L438" href="#L438">438</a> <em class="jxr_javadoccomment">         * @return an array of three coefficients such that</em>
<a class="jxr_linenumber" name="L439" href="#L439">439</a> <em class="jxr_javadoccomment">         * \( P_{k+1}(x) = (a[0] + a[1] x) P_k(x) - a[2] P_{k-1}(x) \)</em>
<a class="jxr_linenumber" name="L440" href="#L440">440</a> <em class="jxr_javadoccomment">         */</em>
<a class="jxr_linenumber" name="L441" href="#L441">441</a>         <a href="../../../../../../org/apache/commons/math3/fraction/BigFraction.html">BigFraction</a>[] generate(<strong class="jxr_keyword">int</strong> k);
<a class="jxr_linenumber" name="L442" href="#L442">442</a>     }
<a class="jxr_linenumber" name="L443" href="#L443">443</a> 
<a class="jxr_linenumber" name="L444" href="#L444">444</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2003&#x2013;2016 <a href="http://www.apache.org/">The Apache Software Foundation</a>. All rights reserved.</div>
</body>
</html>
