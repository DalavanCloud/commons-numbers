<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span><a name="line.17"></a>
<span class="sourceLineNo">018</span>package org.apache.commons.math3.ode.nonstiff;<a name="line.18"></a>
<span class="sourceLineNo">019</span><a name="line.19"></a>
<span class="sourceLineNo">020</span><a name="line.20"></a>
<span class="sourceLineNo">021</span>import org.apache.commons.math3.exception.DimensionMismatchException;<a name="line.21"></a>
<span class="sourceLineNo">022</span>import org.apache.commons.math3.exception.MaxCountExceededException;<a name="line.22"></a>
<span class="sourceLineNo">023</span>import org.apache.commons.math3.exception.NoBracketingException;<a name="line.23"></a>
<span class="sourceLineNo">024</span>import org.apache.commons.math3.exception.NumberIsTooSmallException;<a name="line.24"></a>
<span class="sourceLineNo">025</span>import org.apache.commons.math3.ode.FirstOrderIntegrator;<a name="line.25"></a>
<span class="sourceLineNo">026</span>import org.apache.commons.math3.ode.TestProblem1;<a name="line.26"></a>
<span class="sourceLineNo">027</span>import org.apache.commons.math3.ode.TestProblem5;<a name="line.27"></a>
<span class="sourceLineNo">028</span>import org.apache.commons.math3.ode.TestProblem6;<a name="line.28"></a>
<span class="sourceLineNo">029</span>import org.apache.commons.math3.ode.TestProblemHandler;<a name="line.29"></a>
<span class="sourceLineNo">030</span>import org.apache.commons.math3.util.FastMath;<a name="line.30"></a>
<span class="sourceLineNo">031</span>import org.junit.Assert;<a name="line.31"></a>
<span class="sourceLineNo">032</span>import org.junit.Test;<a name="line.32"></a>
<span class="sourceLineNo">033</span><a name="line.33"></a>
<span class="sourceLineNo">034</span>public class AdamsBashforthIntegratorTest {<a name="line.34"></a>
<span class="sourceLineNo">035</span><a name="line.35"></a>
<span class="sourceLineNo">036</span>    @Test(expected=DimensionMismatchException.class)<a name="line.36"></a>
<span class="sourceLineNo">037</span>    public void dimensionCheck() throws NumberIsTooSmallException, DimensionMismatchException, MaxCountExceededException, NoBracketingException {<a name="line.37"></a>
<span class="sourceLineNo">038</span>        TestProblem1 pb = new TestProblem1();<a name="line.38"></a>
<span class="sourceLineNo">039</span>        FirstOrderIntegrator integ =<a name="line.39"></a>
<span class="sourceLineNo">040</span>            new AdamsBashforthIntegrator(2, 0.0, 1.0, 1.0e-10, 1.0e-10);<a name="line.40"></a>
<span class="sourceLineNo">041</span>        integ.integrate(pb,<a name="line.41"></a>
<span class="sourceLineNo">042</span>                        0.0, new double[pb.getDimension()+10],<a name="line.42"></a>
<span class="sourceLineNo">043</span>                        1.0, new double[pb.getDimension()+10]);<a name="line.43"></a>
<span class="sourceLineNo">044</span>    }<a name="line.44"></a>
<span class="sourceLineNo">045</span><a name="line.45"></a>
<span class="sourceLineNo">046</span>    @Test(expected=NumberIsTooSmallException.class)<a name="line.46"></a>
<span class="sourceLineNo">047</span>    public void testMinStep() throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException {<a name="line.47"></a>
<span class="sourceLineNo">048</span><a name="line.48"></a>
<span class="sourceLineNo">049</span>          TestProblem1 pb = new TestProblem1();<a name="line.49"></a>
<span class="sourceLineNo">050</span>          double minStep = 0.1 * (pb.getFinalTime() - pb.getInitialTime());<a name="line.50"></a>
<span class="sourceLineNo">051</span>          double maxStep = pb.getFinalTime() - pb.getInitialTime();<a name="line.51"></a>
<span class="sourceLineNo">052</span>          double[] vecAbsoluteTolerance = { 1.0e-15, 1.0e-16 };<a name="line.52"></a>
<span class="sourceLineNo">053</span>          double[] vecRelativeTolerance = { 1.0e-15, 1.0e-16 };<a name="line.53"></a>
<span class="sourceLineNo">054</span><a name="line.54"></a>
<span class="sourceLineNo">055</span>          FirstOrderIntegrator integ = new AdamsBashforthIntegrator(4, minStep, maxStep,<a name="line.55"></a>
<span class="sourceLineNo">056</span>                                                                    vecAbsoluteTolerance,<a name="line.56"></a>
<span class="sourceLineNo">057</span>                                                                    vecRelativeTolerance);<a name="line.57"></a>
<span class="sourceLineNo">058</span>          TestProblemHandler handler = new TestProblemHandler(pb, integ);<a name="line.58"></a>
<span class="sourceLineNo">059</span>          integ.addStepHandler(handler);<a name="line.59"></a>
<span class="sourceLineNo">060</span>          integ.integrate(pb,<a name="line.60"></a>
<span class="sourceLineNo">061</span>                          pb.getInitialTime(), pb.getInitialState(),<a name="line.61"></a>
<span class="sourceLineNo">062</span>                          pb.getFinalTime(), new double[pb.getDimension()]);<a name="line.62"></a>
<span class="sourceLineNo">063</span><a name="line.63"></a>
<span class="sourceLineNo">064</span>    }<a name="line.64"></a>
<span class="sourceLineNo">065</span><a name="line.65"></a>
<span class="sourceLineNo">066</span>    @Test<a name="line.66"></a>
<span class="sourceLineNo">067</span>    public void testIncreasingTolerance() throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException<a name="line.67"></a>
<span class="sourceLineNo">068</span>        {<a name="line.68"></a>
<span class="sourceLineNo">069</span><a name="line.69"></a>
<span class="sourceLineNo">070</span>        int previousCalls = Integer.MAX_VALUE;<a name="line.70"></a>
<span class="sourceLineNo">071</span>        for (int i = -12; i &lt; -5; ++i) {<a name="line.71"></a>
<span class="sourceLineNo">072</span>            TestProblem1 pb = new TestProblem1();<a name="line.72"></a>
<span class="sourceLineNo">073</span>            double minStep = 0;<a name="line.73"></a>
<span class="sourceLineNo">074</span>            double maxStep = pb.getFinalTime() - pb.getInitialTime();<a name="line.74"></a>
<span class="sourceLineNo">075</span>            double scalAbsoluteTolerance = FastMath.pow(10.0, i);<a name="line.75"></a>
<span class="sourceLineNo">076</span>            double scalRelativeTolerance = 0.01 * scalAbsoluteTolerance;<a name="line.76"></a>
<span class="sourceLineNo">077</span><a name="line.77"></a>
<span class="sourceLineNo">078</span>            FirstOrderIntegrator integ = new AdamsBashforthIntegrator(4, minStep, maxStep,<a name="line.78"></a>
<span class="sourceLineNo">079</span>                                                                      scalAbsoluteTolerance,<a name="line.79"></a>
<span class="sourceLineNo">080</span>                                                                      scalRelativeTolerance);<a name="line.80"></a>
<span class="sourceLineNo">081</span>            TestProblemHandler handler = new TestProblemHandler(pb, integ);<a name="line.81"></a>
<span class="sourceLineNo">082</span>            integ.addStepHandler(handler);<a name="line.82"></a>
<span class="sourceLineNo">083</span>            integ.integrate(pb,<a name="line.83"></a>
<span class="sourceLineNo">084</span>                            pb.getInitialTime(), pb.getInitialState(),<a name="line.84"></a>
<span class="sourceLineNo">085</span>                            pb.getFinalTime(), new double[pb.getDimension()]);<a name="line.85"></a>
<span class="sourceLineNo">086</span><a name="line.86"></a>
<span class="sourceLineNo">087</span>            // the 50 and 300 factors are only valid for this test<a name="line.87"></a>
<span class="sourceLineNo">088</span>            // and has been obtained from trial and error<a name="line.88"></a>
<span class="sourceLineNo">089</span>            // there is no general relation between local and global errors<a name="line.89"></a>
<span class="sourceLineNo">090</span>            Assert.assertTrue(handler.getMaximalValueError() &gt; (50.0 * scalAbsoluteTolerance));<a name="line.90"></a>
<span class="sourceLineNo">091</span>            Assert.assertTrue(handler.getMaximalValueError() &lt; (300.0 * scalAbsoluteTolerance));<a name="line.91"></a>
<span class="sourceLineNo">092</span>            Assert.assertEquals(0, handler.getMaximalTimeError(), 1.0e-16);<a name="line.92"></a>
<span class="sourceLineNo">093</span><a name="line.93"></a>
<span class="sourceLineNo">094</span>            int calls = pb.getCalls();<a name="line.94"></a>
<span class="sourceLineNo">095</span>            Assert.assertEquals(integ.getEvaluations(), calls);<a name="line.95"></a>
<span class="sourceLineNo">096</span>            Assert.assertTrue(calls &lt;= previousCalls);<a name="line.96"></a>
<span class="sourceLineNo">097</span>            previousCalls = calls;<a name="line.97"></a>
<span class="sourceLineNo">098</span><a name="line.98"></a>
<span class="sourceLineNo">099</span>        }<a name="line.99"></a>
<span class="sourceLineNo">100</span><a name="line.100"></a>
<span class="sourceLineNo">101</span>    }<a name="line.101"></a>
<span class="sourceLineNo">102</span><a name="line.102"></a>
<span class="sourceLineNo">103</span>    @Test(expected = MaxCountExceededException.class)<a name="line.103"></a>
<span class="sourceLineNo">104</span>    public void exceedMaxEvaluations() throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException {<a name="line.104"></a>
<span class="sourceLineNo">105</span><a name="line.105"></a>
<span class="sourceLineNo">106</span>        TestProblem1 pb  = new TestProblem1();<a name="line.106"></a>
<span class="sourceLineNo">107</span>        double range = pb.getFinalTime() - pb.getInitialTime();<a name="line.107"></a>
<span class="sourceLineNo">108</span><a name="line.108"></a>
<span class="sourceLineNo">109</span>        AdamsBashforthIntegrator integ = new AdamsBashforthIntegrator(2, 0, range, 1.0e-12, 1.0e-12);<a name="line.109"></a>
<span class="sourceLineNo">110</span>        TestProblemHandler handler = new TestProblemHandler(pb, integ);<a name="line.110"></a>
<span class="sourceLineNo">111</span>        integ.addStepHandler(handler);<a name="line.111"></a>
<span class="sourceLineNo">112</span>        integ.setMaxEvaluations(650);<a name="line.112"></a>
<span class="sourceLineNo">113</span>        integ.integrate(pb,<a name="line.113"></a>
<span class="sourceLineNo">114</span>                        pb.getInitialTime(), pb.getInitialState(),<a name="line.114"></a>
<span class="sourceLineNo">115</span>                        pb.getFinalTime(), new double[pb.getDimension()]);<a name="line.115"></a>
<span class="sourceLineNo">116</span><a name="line.116"></a>
<span class="sourceLineNo">117</span>    }<a name="line.117"></a>
<span class="sourceLineNo">118</span><a name="line.118"></a>
<span class="sourceLineNo">119</span>    @Test<a name="line.119"></a>
<span class="sourceLineNo">120</span>    public void backward() throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException {<a name="line.120"></a>
<span class="sourceLineNo">121</span><a name="line.121"></a>
<span class="sourceLineNo">122</span>        TestProblem5 pb = new TestProblem5();<a name="line.122"></a>
<span class="sourceLineNo">123</span>        double range = FastMath.abs(pb.getFinalTime() - pb.getInitialTime());<a name="line.123"></a>
<span class="sourceLineNo">124</span><a name="line.124"></a>
<span class="sourceLineNo">125</span>        FirstOrderIntegrator integ = new AdamsBashforthIntegrator(4, 0, range, 1.0e-12, 1.0e-12);<a name="line.125"></a>
<span class="sourceLineNo">126</span>        TestProblemHandler handler = new TestProblemHandler(pb, integ);<a name="line.126"></a>
<span class="sourceLineNo">127</span>        integ.addStepHandler(handler);<a name="line.127"></a>
<span class="sourceLineNo">128</span>        integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),<a name="line.128"></a>
<span class="sourceLineNo">129</span>                        pb.getFinalTime(), new double[pb.getDimension()]);<a name="line.129"></a>
<span class="sourceLineNo">130</span><a name="line.130"></a>
<span class="sourceLineNo">131</span>        Assert.assertTrue(handler.getLastError() &lt; 1.5e-8);<a name="line.131"></a>
<span class="sourceLineNo">132</span>        Assert.assertTrue(handler.getMaximalValueError() &lt; 1.5e-8);<a name="line.132"></a>
<span class="sourceLineNo">133</span>        Assert.assertEquals(0, handler.getMaximalTimeError(), 1.0e-16);<a name="line.133"></a>
<span class="sourceLineNo">134</span>        Assert.assertEquals("Adams-Bashforth", integ.getName());<a name="line.134"></a>
<span class="sourceLineNo">135</span>    }<a name="line.135"></a>
<span class="sourceLineNo">136</span><a name="line.136"></a>
<span class="sourceLineNo">137</span>    @Test<a name="line.137"></a>
<span class="sourceLineNo">138</span>    public void polynomial() throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException {<a name="line.138"></a>
<span class="sourceLineNo">139</span>        TestProblem6 pb = new TestProblem6();<a name="line.139"></a>
<span class="sourceLineNo">140</span>        double range = FastMath.abs(pb.getFinalTime() - pb.getInitialTime());<a name="line.140"></a>
<span class="sourceLineNo">141</span><a name="line.141"></a>
<span class="sourceLineNo">142</span>        for (int nSteps = 2; nSteps &lt; 8; ++nSteps) {<a name="line.142"></a>
<span class="sourceLineNo">143</span>            AdamsBashforthIntegrator integ =<a name="line.143"></a>
<span class="sourceLineNo">144</span>                new AdamsBashforthIntegrator(nSteps, 1.0e-6 * range, 0.1 * range, 1.0e-5, 1.0e-5);<a name="line.144"></a>
<span class="sourceLineNo">145</span>            TestProblemHandler handler = new TestProblemHandler(pb, integ);<a name="line.145"></a>
<span class="sourceLineNo">146</span>            integ.addStepHandler(handler);<a name="line.146"></a>
<span class="sourceLineNo">147</span>            integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),<a name="line.147"></a>
<span class="sourceLineNo">148</span>                            pb.getFinalTime(), new double[pb.getDimension()]);<a name="line.148"></a>
<span class="sourceLineNo">149</span>            if (nSteps &lt; 4) {<a name="line.149"></a>
<span class="sourceLineNo">150</span>                Assert.assertTrue(handler.getMaximalValueError() &gt; 1.0e-03);<a name="line.150"></a>
<span class="sourceLineNo">151</span>            } else {<a name="line.151"></a>
<span class="sourceLineNo">152</span>                Assert.assertTrue(handler.getMaximalValueError() &lt; 4.0e-12);<a name="line.152"></a>
<span class="sourceLineNo">153</span>            }<a name="line.153"></a>
<span class="sourceLineNo">154</span>        }<a name="line.154"></a>
<span class="sourceLineNo">155</span><a name="line.155"></a>
<span class="sourceLineNo">156</span>    }<a name="line.156"></a>
<span class="sourceLineNo">157</span><a name="line.157"></a>
<span class="sourceLineNo">158</span>}<a name="line.158"></a>




























































</pre>
</div>
</body>
</html>
