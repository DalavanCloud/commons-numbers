<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>AbstractLeastSquaresOptimizerTestValidation xref</title>
<link type="text/css" rel="stylesheet" href="../../../../../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../../../testapidocs/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Licensed to the Apache Software Foundation (ASF) under one or more</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> * contributor license agreements. See the NOTICE file distributed with this</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * work for additional information regarding copyright ownership. The ASF</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * licenses this file to You under the Apache License, Version 2.0 (the</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * "License"); you may not use this file except in compliance with the License.</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> * You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> * <a href="http://www.apache.org/licenses/LICENSE-2.0" target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.0</a> Unless required by applicable law</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> * or agreed to in writing, software distributed under the License is</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * KIND, either express or implied. See the License for the specific language</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * governing permissions and limitations under the License.</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <strong class="jxr_keyword">package</strong> org.apache.commons.math3.optim.nonlinear.vector.jacobian;
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  <strong class="jxr_keyword">import</strong> java.util.Arrays;
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">import</strong> java.util.List;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  <strong class="jxr_keyword">import</strong> java.util.ArrayList;
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <strong class="jxr_keyword">import</strong> java.awt.geom.Point2D;
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.optim.PointVectorValuePair;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.optim.InitialGuess;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.optim.MaxEval;
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.optim.nonlinear.vector.Target;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.optim.nonlinear.vector.Weight;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.stat.descriptive.SummaryStatistics;
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.stat.descriptive.StatisticalSummary;
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.util.FastMath;
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <strong class="jxr_keyword">import</strong> org.junit.Test;
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <strong class="jxr_keyword">import</strong> org.junit.Assert;
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <em class="jxr_javadoccomment"> * This class demonstrates the main functionality of the</em>
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <em class="jxr_javadoccomment"> * {@link AbstractLeastSquaresOptimizer}, common to the</em>
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  <em class="jxr_javadoccomment"> * optimizer implementations in package</em>
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  <em class="jxr_javadoccomment"> * {@link org.apache.commons.math3.optimization.general}.</em>
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  <em class="jxr_javadoccomment"> * &lt;br/&gt;</em>
<a class="jxr_linenumber" name="L38" href="#L38">38</a>  <em class="jxr_javadoccomment"> * Not enabled by default, as the class name does not end with "Test".</em>
<a class="jxr_linenumber" name="L39" href="#L39">39</a>  <em class="jxr_javadoccomment"> * &lt;br/&gt;</em>
<a class="jxr_linenumber" name="L40" href="#L40">40</a>  <em class="jxr_javadoccomment"> * Invoke by running</em>
<a class="jxr_linenumber" name="L41" href="#L41">41</a>  <em class="jxr_javadoccomment"> * &lt;pre&gt;&lt;code&gt;</em>
<a class="jxr_linenumber" name="L42" href="#L42">42</a>  <em class="jxr_javadoccomment"> *  mvn test -Dtest=AbstractLeastSquaresOptimizerTestValidation</em>
<a class="jxr_linenumber" name="L43" href="#L43">43</a>  <em class="jxr_javadoccomment"> * &lt;/code&gt;&lt;/pre&gt;</em>
<a class="jxr_linenumber" name="L44" href="#L44">44</a>  <em class="jxr_javadoccomment"> * or by running</em>
<a class="jxr_linenumber" name="L45" href="#L45">45</a>  <em class="jxr_javadoccomment"> * &lt;pre&gt;&lt;code&gt;</em>
<a class="jxr_linenumber" name="L46" href="#L46">46</a>  <em class="jxr_javadoccomment"> *  mvn test -Dtest=AbstractLeastSquaresOptimizerTestValidation -DargLine="-DmcRuns=1234 -server"</em>
<a class="jxr_linenumber" name="L47" href="#L47">47</a>  <em class="jxr_javadoccomment"> * &lt;/code&gt;&lt;/pre&gt;</em>
<a class="jxr_linenumber" name="L48" href="#L48">48</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L49" href="#L49">49</a>  @Deprecated
<a class="jxr_linenumber" name="L50" href="#L50">50</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../../../../org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.html">AbstractLeastSquaresOptimizerTestValidation</a> {
<a class="jxr_linenumber" name="L51" href="#L51">51</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> MONTE_CARLO_RUNS = Integer.parseInt(System.getProperty(<span class="jxr_string">"mcRuns"</span>,
<a class="jxr_linenumber" name="L52" href="#L52">52</a>                                                                                      <span class="jxr_string">"100"</span>));
<a class="jxr_linenumber" name="L53" href="#L53">53</a>  
<a class="jxr_linenumber" name="L54" href="#L54">54</a>      <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L55" href="#L55">55</a>  <em class="jxr_javadoccomment">     * Using a Monte-Carlo procedure, this test checks the error estimations</em>
<a class="jxr_linenumber" name="L56" href="#L56">56</a>  <em class="jxr_javadoccomment">     * as provided by the square-root of the diagonal elements of the</em>
<a class="jxr_linenumber" name="L57" href="#L57">57</a>  <em class="jxr_javadoccomment">     * covariance matrix.</em>
<a class="jxr_linenumber" name="L58" href="#L58">58</a>  <em class="jxr_javadoccomment">     * &lt;br/&gt;</em>
<a class="jxr_linenumber" name="L59" href="#L59">59</a>  <em class="jxr_javadoccomment">     * The test generates sets of observations, each sampled from</em>
<a class="jxr_linenumber" name="L60" href="#L60">60</a>  <em class="jxr_javadoccomment">     * a Gaussian distribution.</em>
<a class="jxr_linenumber" name="L61" href="#L61">61</a>  <em class="jxr_javadoccomment">     * &lt;br/&gt;</em>
<a class="jxr_linenumber" name="L62" href="#L62">62</a>  <em class="jxr_javadoccomment">     * The optimization problem solved is defined in class</em>
<a class="jxr_linenumber" name="L63" href="#L63">63</a>  <em class="jxr_javadoccomment">     * {@link StraightLineProblem}.</em>
<a class="jxr_linenumber" name="L64" href="#L64">64</a>  <em class="jxr_javadoccomment">     * &lt;br/&gt;</em>
<a class="jxr_linenumber" name="L65" href="#L65">65</a>  <em class="jxr_javadoccomment">     * The output (on stdout) will be a table summarizing the distribution</em>
<a class="jxr_linenumber" name="L66" href="#L66">66</a>  <em class="jxr_javadoccomment">     * of parameters generated by the Monte-Carlo process and by the direct</em>
<a class="jxr_linenumber" name="L67" href="#L67">67</a>  <em class="jxr_javadoccomment">     * estimation provided by the diagonal elements of the covariance matrix.</em>
<a class="jxr_linenumber" name="L68" href="#L68">68</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L69" href="#L69">69</a>      @Test
<a class="jxr_linenumber" name="L70" href="#L70">70</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testParametersErrorMonteCarloObservations() {
<a class="jxr_linenumber" name="L71" href="#L71">71</a>          <em class="jxr_comment">// Error on the observations.</em>
<a class="jxr_linenumber" name="L72" href="#L72">72</a>          <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> yError = 15;
<a class="jxr_linenumber" name="L73" href="#L73">73</a>  
<a class="jxr_linenumber" name="L74" href="#L74">74</a>          <em class="jxr_comment">// True values of the parameters.</em>
<a class="jxr_linenumber" name="L75" href="#L75">75</a>          <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> slope = 123.456;
<a class="jxr_linenumber" name="L76" href="#L76">76</a>          <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> offset = -98.765;
<a class="jxr_linenumber" name="L77" href="#L77">77</a>  
<a class="jxr_linenumber" name="L78" href="#L78">78</a>          <em class="jxr_comment">// Samples generator.</em>
<a class="jxr_linenumber" name="L79" href="#L79">79</a>          <strong class="jxr_keyword">final</strong> <a href="../../../../../../../../org/apache/commons/math3/optim/nonlinear/vector/jacobian/RandomStraightLinePointGenerator.html">RandomStraightLinePointGenerator</a> lineGenerator
<a class="jxr_linenumber" name="L80" href="#L80">80</a>              = <strong class="jxr_keyword">new</strong> <a href="../../../../../../../../org/apache/commons/math3/optim/nonlinear/vector/jacobian/RandomStraightLinePointGenerator.html">RandomStraightLinePointGenerator</a>(slope, offset,
<a class="jxr_linenumber" name="L81" href="#L81">81</a>                                                     yError,
<a class="jxr_linenumber" name="L82" href="#L82">82</a>                                                     -1e3, 1e4,
<a class="jxr_linenumber" name="L83" href="#L83">83</a>                                                     138577L);
<a class="jxr_linenumber" name="L84" href="#L84">84</a>  
<a class="jxr_linenumber" name="L85" href="#L85">85</a>          <em class="jxr_comment">// Number of observations.</em>
<a class="jxr_linenumber" name="L86" href="#L86">86</a>          <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> numObs = 100; <em class="jxr_comment">// XXX Should be a command-line option.</em>
<a class="jxr_linenumber" name="L87" href="#L87">87</a>          <em class="jxr_comment">// number of parameters.</em>
<a class="jxr_linenumber" name="L88" href="#L88">88</a>          <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> numParams = 2;
<a class="jxr_linenumber" name="L89" href="#L89">89</a>  
<a class="jxr_linenumber" name="L90" href="#L90">90</a>          <em class="jxr_comment">// Parameters found for each of Monte-Carlo run.</em>
<a class="jxr_linenumber" name="L91" href="#L91">91</a>          <strong class="jxr_keyword">final</strong> SummaryStatistics[] paramsFoundByDirectSolution = <strong class="jxr_keyword">new</strong> SummaryStatistics[numParams];
<a class="jxr_linenumber" name="L92" href="#L92">92</a>          <em class="jxr_comment">// Sigma estimations (square-root of the diagonal elements of the</em>
<a class="jxr_linenumber" name="L93" href="#L93">93</a>          <em class="jxr_comment">// covariance matrix), for each Monte-Carlo run.</em>
<a class="jxr_linenumber" name="L94" href="#L94">94</a>          <strong class="jxr_keyword">final</strong> SummaryStatistics[] sigmaEstimate = <strong class="jxr_keyword">new</strong> SummaryStatistics[numParams];
<a class="jxr_linenumber" name="L95" href="#L95">95</a>  
<a class="jxr_linenumber" name="L96" href="#L96">96</a>          <em class="jxr_comment">// Initialize statistics accumulators.</em>
<a class="jxr_linenumber" name="L97" href="#L97">97</a>          <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; numParams; i++) {
<a class="jxr_linenumber" name="L98" href="#L98">98</a>              paramsFoundByDirectSolution[i] = <strong class="jxr_keyword">new</strong> SummaryStatistics();
<a class="jxr_linenumber" name="L99" href="#L99">99</a>              sigmaEstimate[i] = <strong class="jxr_keyword">new</strong> SummaryStatistics();
<a class="jxr_linenumber" name="L100" href="#L100">100</a>         }
<a class="jxr_linenumber" name="L101" href="#L101">101</a> 
<a class="jxr_linenumber" name="L102" href="#L102">102</a>         <em class="jxr_comment">// Dummy optimizer (to compute the covariance matrix).</em>
<a class="jxr_linenumber" name="L103" href="#L103">103</a>         <strong class="jxr_keyword">final</strong> AbstractLeastSquaresOptimizer optim = <strong class="jxr_keyword">new</strong> <a href="../../../../../../../../org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.html">DummyOptimizer</a>();
<a class="jxr_linenumber" name="L104" href="#L104">104</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] init = { slope, offset };
<a class="jxr_linenumber" name="L105" href="#L105">105</a> 
<a class="jxr_linenumber" name="L106" href="#L106">106</a>         <em class="jxr_comment">// Monte-Carlo (generates many sets of observations).</em>
<a class="jxr_linenumber" name="L107" href="#L107">107</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> mcRepeat = MONTE_CARLO_RUNS;
<a class="jxr_linenumber" name="L108" href="#L108">108</a>         <strong class="jxr_keyword">int</strong> mcCount = 0;
<a class="jxr_linenumber" name="L109" href="#L109">109</a>         <strong class="jxr_keyword">while</strong> (mcCount &lt; mcRepeat) {
<a class="jxr_linenumber" name="L110" href="#L110">110</a>             <em class="jxr_comment">// Observations.</em>
<a class="jxr_linenumber" name="L111" href="#L111">111</a>             <strong class="jxr_keyword">final</strong> Point2D.Double[] obs = lineGenerator.generate(numObs);
<a class="jxr_linenumber" name="L112" href="#L112">112</a> 
<a class="jxr_linenumber" name="L113" href="#L113">113</a>             <strong class="jxr_keyword">final</strong> <a href="../../../../../../../../org/apache/commons/math3/optim/nonlinear/vector/jacobian/StraightLineProblem.html">StraightLineProblem</a> problem = <strong class="jxr_keyword">new</strong> <a href="../../../../../../../../org/apache/commons/math3/optim/nonlinear/vector/jacobian/StraightLineProblem.html">StraightLineProblem</a>(yError);
<a class="jxr_linenumber" name="L114" href="#L114">114</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; numObs; i++) {
<a class="jxr_linenumber" name="L115" href="#L115">115</a>                 <strong class="jxr_keyword">final</strong> Point2D.Double p = obs[i];
<a class="jxr_linenumber" name="L116" href="#L116">116</a>                 problem.addPoint(p.x, p.y);
<a class="jxr_linenumber" name="L117" href="#L117">117</a>             }
<a class="jxr_linenumber" name="L118" href="#L118">118</a> 
<a class="jxr_linenumber" name="L119" href="#L119">119</a>             <em class="jxr_comment">// Direct solution (using simple regression).</em>
<a class="jxr_linenumber" name="L120" href="#L120">120</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] regress = problem.solve();
<a class="jxr_linenumber" name="L121" href="#L121">121</a> 
<a class="jxr_linenumber" name="L122" href="#L122">122</a>             <em class="jxr_comment">// Estimation of the standard deviation (diagonal elements of the</em>
<a class="jxr_linenumber" name="L123" href="#L123">123</a>             <em class="jxr_comment">// covariance matrix).</em>
<a class="jxr_linenumber" name="L124" href="#L124">124</a>             <strong class="jxr_keyword">final</strong> PointVectorValuePair optimum
<a class="jxr_linenumber" name="L125" href="#L125">125</a>                 = optim.optimize(<strong class="jxr_keyword">new</strong> MaxEval(Integer.MAX_VALUE),
<a class="jxr_linenumber" name="L126" href="#L126">126</a>                                  problem.getModelFunction(),
<a class="jxr_linenumber" name="L127" href="#L127">127</a>                                  problem.getModelFunctionJacobian(),
<a class="jxr_linenumber" name="L128" href="#L128">128</a>                                  <strong class="jxr_keyword">new</strong> Target(problem.target()),
<a class="jxr_linenumber" name="L129" href="#L129">129</a>                                  <strong class="jxr_keyword">new</strong> Weight(problem.weight()),
<a class="jxr_linenumber" name="L130" href="#L130">130</a>                                  <strong class="jxr_keyword">new</strong> InitialGuess(init));
<a class="jxr_linenumber" name="L131" href="#L131">131</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] sigma = optim.computeSigma(optimum.getPoint(), 1e-14);
<a class="jxr_linenumber" name="L132" href="#L132">132</a> 
<a class="jxr_linenumber" name="L133" href="#L133">133</a>             <em class="jxr_comment">// Accumulate statistics.</em>
<a class="jxr_linenumber" name="L134" href="#L134">134</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; numParams; i++) {
<a class="jxr_linenumber" name="L135" href="#L135">135</a>                 paramsFoundByDirectSolution[i].addValue(regress[i]);
<a class="jxr_linenumber" name="L136" href="#L136">136</a>                 sigmaEstimate[i].addValue(sigma[i]);
<a class="jxr_linenumber" name="L137" href="#L137">137</a>             }
<a class="jxr_linenumber" name="L138" href="#L138">138</a> 
<a class="jxr_linenumber" name="L139" href="#L139">139</a>             <em class="jxr_comment">// Next Monte-Carlo.</em>
<a class="jxr_linenumber" name="L140" href="#L140">140</a>             ++mcCount;
<a class="jxr_linenumber" name="L141" href="#L141">141</a>         }
<a class="jxr_linenumber" name="L142" href="#L142">142</a> 
<a class="jxr_linenumber" name="L143" href="#L143">143</a>         <em class="jxr_comment">// Print statistics.</em>
<a class="jxr_linenumber" name="L144" href="#L144">144</a>         <strong class="jxr_keyword">final</strong> String line = <span class="jxr_string">"--------------------------------------------------------------"</span>;
<a class="jxr_linenumber" name="L145" href="#L145">145</a>         System.out.println(<span class="jxr_string">"                 True value       Mean        Std deviation"</span>);
<a class="jxr_linenumber" name="L146" href="#L146">146</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; numParams; i++) {
<a class="jxr_linenumber" name="L147" href="#L147">147</a>             System.out.println(line);
<a class="jxr_linenumber" name="L148" href="#L148">148</a>             System.out.println(<span class="jxr_string">"Parameter #"</span> + i);
<a class="jxr_linenumber" name="L149" href="#L149">149</a> 
<a class="jxr_linenumber" name="L150" href="#L150">150</a>             StatisticalSummary s = paramsFoundByDirectSolution[i].getSummary();
<a class="jxr_linenumber" name="L151" href="#L151">151</a>             System.out.printf(<span class="jxr_string">"              %+.6e   %+.6e   %+.6e\n"</span>,
<a class="jxr_linenumber" name="L152" href="#L152">152</a>                               init[i],
<a class="jxr_linenumber" name="L153" href="#L153">153</a>                               s.getMean(),
<a class="jxr_linenumber" name="L154" href="#L154">154</a>                               s.getStandardDeviation());
<a class="jxr_linenumber" name="L155" href="#L155">155</a> 
<a class="jxr_linenumber" name="L156" href="#L156">156</a>             s = sigmaEstimate[i].getSummary();
<a class="jxr_linenumber" name="L157" href="#L157">157</a>             System.out.printf(<span class="jxr_string">"sigma: %+.6e (%+.6e)\n"</span>,
<a class="jxr_linenumber" name="L158" href="#L158">158</a>                               s.getMean(),
<a class="jxr_linenumber" name="L159" href="#L159">159</a>                               s.getStandardDeviation());
<a class="jxr_linenumber" name="L160" href="#L160">160</a>         }
<a class="jxr_linenumber" name="L161" href="#L161">161</a>         System.out.println(line);
<a class="jxr_linenumber" name="L162" href="#L162">162</a> 
<a class="jxr_linenumber" name="L163" href="#L163">163</a>         <em class="jxr_comment">// Check the error estimation.</em>
<a class="jxr_linenumber" name="L164" href="#L164">164</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; numParams; i++) {
<a class="jxr_linenumber" name="L165" href="#L165">165</a>             Assert.assertEquals(paramsFoundByDirectSolution[i].getSummary().getStandardDeviation(),
<a class="jxr_linenumber" name="L166" href="#L166">166</a>                                 sigmaEstimate[i].getSummary().getMean(),
<a class="jxr_linenumber" name="L167" href="#L167">167</a>                                 8e-2);
<a class="jxr_linenumber" name="L168" href="#L168">168</a>         }
<a class="jxr_linenumber" name="L169" href="#L169">169</a>     }
<a class="jxr_linenumber" name="L170" href="#L170">170</a> 
<a class="jxr_linenumber" name="L171" href="#L171">171</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L172" href="#L172">172</a> <em class="jxr_javadoccomment">     * In this test, the set of observations is fixed.</em>
<a class="jxr_linenumber" name="L173" href="#L173">173</a> <em class="jxr_javadoccomment">     * Using a Monte-Carlo procedure, it generates sets of parameters,</em>
<a class="jxr_linenumber" name="L174" href="#L174">174</a> <em class="jxr_javadoccomment">     * and determine the parameter change that will result in the</em>
<a class="jxr_linenumber" name="L175" href="#L175">175</a> <em class="jxr_javadoccomment">     * normalized chi-square becoming larger by one than the value from</em>
<a class="jxr_linenumber" name="L176" href="#L176">176</a> <em class="jxr_javadoccomment">     * the best fit solution.</em>
<a class="jxr_linenumber" name="L177" href="#L177">177</a> <em class="jxr_javadoccomment">     * &lt;br/&gt;</em>
<a class="jxr_linenumber" name="L178" href="#L178">178</a> <em class="jxr_javadoccomment">     * The optimization problem solved is defined in class</em>
<a class="jxr_linenumber" name="L179" href="#L179">179</a> <em class="jxr_javadoccomment">     * {@link StraightLineProblem}.</em>
<a class="jxr_linenumber" name="L180" href="#L180">180</a> <em class="jxr_javadoccomment">     * &lt;br/&gt;</em>
<a class="jxr_linenumber" name="L181" href="#L181">181</a> <em class="jxr_javadoccomment">     * The output (on stdout) will be a list of lines containing:</em>
<a class="jxr_linenumber" name="L182" href="#L182">182</a> <em class="jxr_javadoccomment">     * &lt;ul&gt;</em>
<a class="jxr_linenumber" name="L183" href="#L183">183</a> <em class="jxr_javadoccomment">     *  &lt;li&gt;slope of the straight line,&lt;/li&gt;</em>
<a class="jxr_linenumber" name="L184" href="#L184">184</a> <em class="jxr_javadoccomment">     *  &lt;li&gt;intercept of the straight line,&lt;/li&gt;</em>
<a class="jxr_linenumber" name="L185" href="#L185">185</a> <em class="jxr_javadoccomment">     *  &lt;li&gt;chi-square of the solution defined by the above two values.&lt;/li&gt;</em>
<a class="jxr_linenumber" name="L186" href="#L186">186</a> <em class="jxr_javadoccomment">     * &lt;/ul&gt;</em>
<a class="jxr_linenumber" name="L187" href="#L187">187</a> <em class="jxr_javadoccomment">     * The output is separated into two blocks (with a blank line between</em>
<a class="jxr_linenumber" name="L188" href="#L188">188</a> <em class="jxr_javadoccomment">     * them); the first block will contain all parameter sets for which</em>
<a class="jxr_linenumber" name="L189" href="#L189">189</a> <em class="jxr_javadoccomment">     * {@code chi2 &lt; chi2_b + 1}</em>
<a class="jxr_linenumber" name="L190" href="#L190">190</a> <em class="jxr_javadoccomment">     * and the second block, all sets for which</em>
<a class="jxr_linenumber" name="L191" href="#L191">191</a> <em class="jxr_javadoccomment">     * {@code chi2 &gt;= chi2_b + 1}</em>
<a class="jxr_linenumber" name="L192" href="#L192">192</a> <em class="jxr_javadoccomment">     * where {@code chi2_b} is the lowest chi-square (corresponding to the</em>
<a class="jxr_linenumber" name="L193" href="#L193">193</a> <em class="jxr_javadoccomment">     * best solution).</em>
<a class="jxr_linenumber" name="L194" href="#L194">194</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L195" href="#L195">195</a>     @Test
<a class="jxr_linenumber" name="L196" href="#L196">196</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testParametersErrorMonteCarloParameters() {
<a class="jxr_linenumber" name="L197" href="#L197">197</a>         <em class="jxr_comment">// Error on the observations.</em>
<a class="jxr_linenumber" name="L198" href="#L198">198</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> yError = 15;
<a class="jxr_linenumber" name="L199" href="#L199">199</a> 
<a class="jxr_linenumber" name="L200" href="#L200">200</a>         <em class="jxr_comment">// True values of the parameters.</em>
<a class="jxr_linenumber" name="L201" href="#L201">201</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> slope = 123.456;
<a class="jxr_linenumber" name="L202" href="#L202">202</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> offset = -98.765;
<a class="jxr_linenumber" name="L203" href="#L203">203</a> 
<a class="jxr_linenumber" name="L204" href="#L204">204</a>         <em class="jxr_comment">// Samples generator.</em>
<a class="jxr_linenumber" name="L205" href="#L205">205</a>         <strong class="jxr_keyword">final</strong> <a href="../../../../../../../../org/apache/commons/math3/optim/nonlinear/vector/jacobian/RandomStraightLinePointGenerator.html">RandomStraightLinePointGenerator</a> lineGenerator
<a class="jxr_linenumber" name="L206" href="#L206">206</a>             = <strong class="jxr_keyword">new</strong> <a href="../../../../../../../../org/apache/commons/math3/optim/nonlinear/vector/jacobian/RandomStraightLinePointGenerator.html">RandomStraightLinePointGenerator</a>(slope, offset,
<a class="jxr_linenumber" name="L207" href="#L207">207</a>                                                    yError,
<a class="jxr_linenumber" name="L208" href="#L208">208</a>                                                    -1e3, 1e4,
<a class="jxr_linenumber" name="L209" href="#L209">209</a>                                                    13839013L);
<a class="jxr_linenumber" name="L210" href="#L210">210</a> 
<a class="jxr_linenumber" name="L211" href="#L211">211</a>         <em class="jxr_comment">// Number of observations.</em>
<a class="jxr_linenumber" name="L212" href="#L212">212</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> numObs = 10;
<a class="jxr_linenumber" name="L213" href="#L213">213</a> 
<a class="jxr_linenumber" name="L214" href="#L214">214</a>         <em class="jxr_comment">// Create a single set of observations.</em>
<a class="jxr_linenumber" name="L215" href="#L215">215</a>         <strong class="jxr_keyword">final</strong> Point2D.Double[] obs = lineGenerator.generate(numObs);
<a class="jxr_linenumber" name="L216" href="#L216">216</a> 
<a class="jxr_linenumber" name="L217" href="#L217">217</a>         <strong class="jxr_keyword">final</strong> <a href="../../../../../../../../org/apache/commons/math3/optim/nonlinear/vector/jacobian/StraightLineProblem.html">StraightLineProblem</a> problem = <strong class="jxr_keyword">new</strong> <a href="../../../../../../../../org/apache/commons/math3/optim/nonlinear/vector/jacobian/StraightLineProblem.html">StraightLineProblem</a>(yError);
<a class="jxr_linenumber" name="L218" href="#L218">218</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; numObs; i++) {
<a class="jxr_linenumber" name="L219" href="#L219">219</a>             <strong class="jxr_keyword">final</strong> Point2D.Double p = obs[i];
<a class="jxr_linenumber" name="L220" href="#L220">220</a>             problem.addPoint(p.x, p.y);
<a class="jxr_linenumber" name="L221" href="#L221">221</a>         }
<a class="jxr_linenumber" name="L222" href="#L222">222</a> 
<a class="jxr_linenumber" name="L223" href="#L223">223</a>         <em class="jxr_comment">// Direct solution (using simple regression).</em>
<a class="jxr_linenumber" name="L224" href="#L224">224</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] regress = problem.solve();
<a class="jxr_linenumber" name="L225" href="#L225">225</a> 
<a class="jxr_linenumber" name="L226" href="#L226">226</a>         <em class="jxr_comment">// Dummy optimizer (to compute the chi-square).</em>
<a class="jxr_linenumber" name="L227" href="#L227">227</a>         <strong class="jxr_keyword">final</strong> AbstractLeastSquaresOptimizer optim = <strong class="jxr_keyword">new</strong> <a href="../../../../../../../../org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.html">DummyOptimizer</a>();
<a class="jxr_linenumber" name="L228" href="#L228">228</a>         <em class="jxr_comment">// Get chi-square of the best parameters set for the given set of</em>
<a class="jxr_linenumber" name="L229" href="#L229">229</a>         <em class="jxr_comment">// observations.</em>
<a class="jxr_linenumber" name="L230" href="#L230">230</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> bestChi2N = getChi2N(optim, problem, regress);
<a class="jxr_linenumber" name="L231" href="#L231">231</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] sigma = optim.computeSigma(regress, 1e-14);
<a class="jxr_linenumber" name="L232" href="#L232">232</a> 
<a class="jxr_linenumber" name="L233" href="#L233">233</a>         <em class="jxr_comment">// Monte-Carlo (generates a grid of parameters).</em>
<a class="jxr_linenumber" name="L234" href="#L234">234</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> mcRepeat = MONTE_CARLO_RUNS;
<a class="jxr_linenumber" name="L235" href="#L235">235</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> gridSize = (<strong class="jxr_keyword">int</strong>) FastMath.sqrt(mcRepeat);
<a class="jxr_linenumber" name="L236" href="#L236">236</a> 
<a class="jxr_linenumber" name="L237" href="#L237">237</a>         <em class="jxr_comment">// Parameters found for each of Monte-Carlo run.</em>
<a class="jxr_linenumber" name="L238" href="#L238">238</a>         <em class="jxr_comment">// Index 0 = slope</em>
<a class="jxr_linenumber" name="L239" href="#L239">239</a>         <em class="jxr_comment">// Index 1 = offset</em>
<a class="jxr_linenumber" name="L240" href="#L240">240</a>         <em class="jxr_comment">// Index 2 = normalized chi2</em>
<a class="jxr_linenumber" name="L241" href="#L241">241</a>         <strong class="jxr_keyword">final</strong> List&lt;<strong class="jxr_keyword">double</strong>[]&gt; paramsAndChi2 = <strong class="jxr_keyword">new</strong> ArrayList&lt;<strong class="jxr_keyword">double</strong>[]&gt;(gridSize * gridSize);
<a class="jxr_linenumber" name="L242" href="#L242">242</a> 
<a class="jxr_linenumber" name="L243" href="#L243">243</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> slopeRange = 10 * sigma[0];
<a class="jxr_linenumber" name="L244" href="#L244">244</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> offsetRange = 10 * sigma[1];
<a class="jxr_linenumber" name="L245" href="#L245">245</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> minSlope = slope - 0.5 * slopeRange;
<a class="jxr_linenumber" name="L246" href="#L246">246</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> minOffset = offset - 0.5 * offsetRange;
<a class="jxr_linenumber" name="L247" href="#L247">247</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> deltaSlope =  slopeRange/ gridSize;
<a class="jxr_linenumber" name="L248" href="#L248">248</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> deltaOffset = offsetRange / gridSize;
<a class="jxr_linenumber" name="L249" href="#L249">249</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; gridSize; i++) {
<a class="jxr_linenumber" name="L250" href="#L250">250</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> s = minSlope + i * deltaSlope;
<a class="jxr_linenumber" name="L251" href="#L251">251</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = 0; j &lt; gridSize; j++) {
<a class="jxr_linenumber" name="L252" href="#L252">252</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> o = minOffset + j * deltaOffset;
<a class="jxr_linenumber" name="L253" href="#L253">253</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> chi2N = getChi2N(optim, problem, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {s, o});
<a class="jxr_linenumber" name="L254" href="#L254">254</a> 
<a class="jxr_linenumber" name="L255" href="#L255">255</a>                 paramsAndChi2.add(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {s, o, chi2N});
<a class="jxr_linenumber" name="L256" href="#L256">256</a>             }
<a class="jxr_linenumber" name="L257" href="#L257">257</a>         }
<a class="jxr_linenumber" name="L258" href="#L258">258</a> 
<a class="jxr_linenumber" name="L259" href="#L259">259</a>         <em class="jxr_comment">// Output (for use with "gnuplot").</em>
<a class="jxr_linenumber" name="L260" href="#L260">260</a> 
<a class="jxr_linenumber" name="L261" href="#L261">261</a>         <em class="jxr_comment">// Some info.</em>
<a class="jxr_linenumber" name="L262" href="#L262">262</a> 
<a class="jxr_linenumber" name="L263" href="#L263">263</a>         <em class="jxr_comment">// For plotting separately sets of parameters that have a large chi2.</em>
<a class="jxr_linenumber" name="L264" href="#L264">264</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> chi2NPlusOne = bestChi2N + 1;
<a class="jxr_linenumber" name="L265" href="#L265">265</a>         <strong class="jxr_keyword">int</strong> numLarger = 0;
<a class="jxr_linenumber" name="L266" href="#L266">266</a> 
<a class="jxr_linenumber" name="L267" href="#L267">267</a>         <strong class="jxr_keyword">final</strong> String lineFmt = <span class="jxr_string">"%+.10e %+.10e   %.8e\n"</span>;
<a class="jxr_linenumber" name="L268" href="#L268">268</a> 
<a class="jxr_linenumber" name="L269" href="#L269">269</a>         <em class="jxr_comment">// Point with smallest chi-square.</em>
<a class="jxr_linenumber" name="L270" href="#L270">270</a>         System.out.printf(lineFmt, regress[0], regress[1], bestChi2N);
<a class="jxr_linenumber" name="L271" href="#L271">271</a>         System.out.println(); <em class="jxr_comment">// Empty line.</em>
<a class="jxr_linenumber" name="L272" href="#L272">272</a> 
<a class="jxr_linenumber" name="L273" href="#L273">273</a>         <em class="jxr_comment">// Points within the confidence interval.</em>
<a class="jxr_linenumber" name="L274" href="#L274">274</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">double</strong>[] d : paramsAndChi2) {
<a class="jxr_linenumber" name="L275" href="#L275">275</a>             <strong class="jxr_keyword">if</strong> (d[2] &lt;= chi2NPlusOne) {
<a class="jxr_linenumber" name="L276" href="#L276">276</a>                 System.out.printf(lineFmt, d[0], d[1], d[2]);
<a class="jxr_linenumber" name="L277" href="#L277">277</a>             }
<a class="jxr_linenumber" name="L278" href="#L278">278</a>         }
<a class="jxr_linenumber" name="L279" href="#L279">279</a>         System.out.println(); <em class="jxr_comment">// Empty line.</em>
<a class="jxr_linenumber" name="L280" href="#L280">280</a> 
<a class="jxr_linenumber" name="L281" href="#L281">281</a>         <em class="jxr_comment">// Points outside the confidence interval.</em>
<a class="jxr_linenumber" name="L282" href="#L282">282</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">double</strong>[] d : paramsAndChi2) {
<a class="jxr_linenumber" name="L283" href="#L283">283</a>             <strong class="jxr_keyword">if</strong> (d[2] &gt; chi2NPlusOne) {
<a class="jxr_linenumber" name="L284" href="#L284">284</a>                 ++numLarger;
<a class="jxr_linenumber" name="L285" href="#L285">285</a>                 System.out.printf(lineFmt, d[0], d[1], d[2]);
<a class="jxr_linenumber" name="L286" href="#L286">286</a>             }
<a class="jxr_linenumber" name="L287" href="#L287">287</a>         }
<a class="jxr_linenumber" name="L288" href="#L288">288</a>         System.out.println(); <em class="jxr_comment">// Empty line.</em>
<a class="jxr_linenumber" name="L289" href="#L289">289</a> 
<a class="jxr_linenumber" name="L290" href="#L290">290</a>         System.out.println(<span class="jxr_string">"# sigma="</span> + Arrays.toString(sigma));
<a class="jxr_linenumber" name="L291" href="#L291">291</a>         System.out.println(<span class="jxr_string">"# "</span> + numLarger + <span class="jxr_string">" sets filtered out"</span>);
<a class="jxr_linenumber" name="L292" href="#L292">292</a>     }
<a class="jxr_linenumber" name="L293" href="#L293">293</a> 
<a class="jxr_linenumber" name="L294" href="#L294">294</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L295" href="#L295">295</a> <em class="jxr_javadoccomment">     * @return the normalized chi-square.</em>
<a class="jxr_linenumber" name="L296" href="#L296">296</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L297" href="#L297">297</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">double</strong> getChi2N(AbstractLeastSquaresOptimizer optim,
<a class="jxr_linenumber" name="L298" href="#L298">298</a>                             <a href="../../../../../../../../org/apache/commons/math3/optim/nonlinear/vector/jacobian/StraightLineProblem.html">StraightLineProblem</a> problem,
<a class="jxr_linenumber" name="L299" href="#L299">299</a>                             <strong class="jxr_keyword">double</strong>[] params) {
<a class="jxr_linenumber" name="L300" href="#L300">300</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] t = problem.target();
<a class="jxr_linenumber" name="L301" href="#L301">301</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] w = problem.weight();
<a class="jxr_linenumber" name="L302" href="#L302">302</a> 
<a class="jxr_linenumber" name="L303" href="#L303">303</a>         optim.optimize(<strong class="jxr_keyword">new</strong> MaxEval(Integer.MAX_VALUE),
<a class="jxr_linenumber" name="L304" href="#L304">304</a>                        problem.getModelFunction(),
<a class="jxr_linenumber" name="L305" href="#L305">305</a>                        problem.getModelFunctionJacobian(),
<a class="jxr_linenumber" name="L306" href="#L306">306</a>                        <strong class="jxr_keyword">new</strong> Target(t),
<a class="jxr_linenumber" name="L307" href="#L307">307</a>                        <strong class="jxr_keyword">new</strong> Weight(w),
<a class="jxr_linenumber" name="L308" href="#L308">308</a>                        <strong class="jxr_keyword">new</strong> InitialGuess(params));
<a class="jxr_linenumber" name="L309" href="#L309">309</a> 
<a class="jxr_linenumber" name="L310" href="#L310">310</a>         <strong class="jxr_keyword">return</strong> optim.getChiSquare() / (t.length - params.length);
<a class="jxr_linenumber" name="L311" href="#L311">311</a>     }
<a class="jxr_linenumber" name="L312" href="#L312">312</a> }
<a class="jxr_linenumber" name="L313" href="#L313">313</a> 
<a class="jxr_linenumber" name="L314" href="#L314">314</a> <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L315" href="#L315">315</a> <em class="jxr_javadoccomment"> * A dummy optimizer.</em>
<a class="jxr_linenumber" name="L316" href="#L316">316</a> <em class="jxr_javadoccomment"> * Used for computing the covariance matrix.</em>
<a class="jxr_linenumber" name="L317" href="#L317">317</a> <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L318" href="#L318">318</a> @Deprecated
<a class="jxr_linenumber" name="L319" href="#L319">319</a> <strong class="jxr_keyword">class</strong> <a href="../../../../../../../../org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.html">DummyOptimizer</a> <strong class="jxr_keyword">extends</strong> AbstractLeastSquaresOptimizer {
<a class="jxr_linenumber" name="L320" href="#L320">320</a>     <strong class="jxr_keyword">public</strong> <a href="../../../../../../../../org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.html">DummyOptimizer</a>() {
<a class="jxr_linenumber" name="L321" href="#L321">321</a>         <strong class="jxr_keyword">super</strong>(<strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L322" href="#L322">322</a>     }
<a class="jxr_linenumber" name="L323" href="#L323">323</a> 
<a class="jxr_linenumber" name="L324" href="#L324">324</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L325" href="#L325">325</a> <em class="jxr_javadoccomment">     * This method does nothing and returns a dummy value.</em>
<a class="jxr_linenumber" name="L326" href="#L326">326</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L327" href="#L327">327</a>     @Override
<a class="jxr_linenumber" name="L328" href="#L328">328</a>     <strong class="jxr_keyword">public</strong> PointVectorValuePair doOptimize() {
<a class="jxr_linenumber" name="L329" href="#L329">329</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] params = getStartPoint();
<a class="jxr_linenumber" name="L330" href="#L330">330</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] res = computeResiduals(computeObjectiveValue(params));
<a class="jxr_linenumber" name="L331" href="#L331">331</a>         setCost(computeCost(res));
<a class="jxr_linenumber" name="L332" href="#L332">332</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> PointVectorValuePair(params, <strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L333" href="#L333">333</a>     }
<a class="jxr_linenumber" name="L334" href="#L334">334</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2003&#x2013;2016 <a href="http://www.apache.org/">The Apache Software Foundation</a>. All rights reserved.</div>
</body>
</html>
