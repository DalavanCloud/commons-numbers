<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span><a name="line.17"></a>
<span class="sourceLineNo">018</span>package org.apache.commons.math3.analysis;<a name="line.18"></a>
<span class="sourceLineNo">019</span><a name="line.19"></a>
<span class="sourceLineNo">020</span>import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;<a name="line.20"></a>
<span class="sourceLineNo">021</span>import org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction;<a name="line.21"></a>
<span class="sourceLineNo">022</span>import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;<a name="line.22"></a>
<span class="sourceLineNo">023</span>import org.apache.commons.math3.analysis.function.Add;<a name="line.23"></a>
<span class="sourceLineNo">024</span>import org.apache.commons.math3.analysis.function.Constant;<a name="line.24"></a>
<span class="sourceLineNo">025</span>import org.apache.commons.math3.analysis.function.Cos;<a name="line.25"></a>
<span class="sourceLineNo">026</span>import org.apache.commons.math3.analysis.function.Cosh;<a name="line.26"></a>
<span class="sourceLineNo">027</span>import org.apache.commons.math3.analysis.function.Divide;<a name="line.27"></a>
<span class="sourceLineNo">028</span>import org.apache.commons.math3.analysis.function.Identity;<a name="line.28"></a>
<span class="sourceLineNo">029</span>import org.apache.commons.math3.analysis.function.Inverse;<a name="line.29"></a>
<span class="sourceLineNo">030</span>import org.apache.commons.math3.analysis.function.Log;<a name="line.30"></a>
<span class="sourceLineNo">031</span>import org.apache.commons.math3.analysis.function.Max;<a name="line.31"></a>
<span class="sourceLineNo">032</span>import org.apache.commons.math3.analysis.function.Min;<a name="line.32"></a>
<span class="sourceLineNo">033</span>import org.apache.commons.math3.analysis.function.Minus;<a name="line.33"></a>
<span class="sourceLineNo">034</span>import org.apache.commons.math3.analysis.function.Multiply;<a name="line.34"></a>
<span class="sourceLineNo">035</span>import org.apache.commons.math3.analysis.function.Pow;<a name="line.35"></a>
<span class="sourceLineNo">036</span>import org.apache.commons.math3.analysis.function.Power;<a name="line.36"></a>
<span class="sourceLineNo">037</span>import org.apache.commons.math3.analysis.function.Sin;<a name="line.37"></a>
<span class="sourceLineNo">038</span>import org.apache.commons.math3.analysis.function.Sinc;<a name="line.38"></a>
<span class="sourceLineNo">039</span>import org.apache.commons.math3.exception.NotStrictlyPositiveException;<a name="line.39"></a>
<span class="sourceLineNo">040</span>import org.apache.commons.math3.exception.NumberIsTooLargeException;<a name="line.40"></a>
<span class="sourceLineNo">041</span>import org.apache.commons.math3.util.FastMath;<a name="line.41"></a>
<span class="sourceLineNo">042</span>import org.junit.Assert;<a name="line.42"></a>
<span class="sourceLineNo">043</span>import org.junit.Test;<a name="line.43"></a>
<span class="sourceLineNo">044</span><a name="line.44"></a>
<span class="sourceLineNo">045</span>/**<a name="line.45"></a>
<span class="sourceLineNo">046</span> * Test for {@link FunctionUtils}.<a name="line.46"></a>
<span class="sourceLineNo">047</span> */<a name="line.47"></a>
<span class="sourceLineNo">048</span>public class FunctionUtilsTest {<a name="line.48"></a>
<span class="sourceLineNo">049</span>    private final double EPS = FastMath.ulp(1d);<a name="line.49"></a>
<span class="sourceLineNo">050</span><a name="line.50"></a>
<span class="sourceLineNo">051</span>    @Test<a name="line.51"></a>
<span class="sourceLineNo">052</span>    public void testCompose() {<a name="line.52"></a>
<span class="sourceLineNo">053</span>        UnivariateFunction id = new Identity();<a name="line.53"></a>
<span class="sourceLineNo">054</span>        Assert.assertEquals(3, FunctionUtils.compose(id, id, id).value(3), EPS);<a name="line.54"></a>
<span class="sourceLineNo">055</span><a name="line.55"></a>
<span class="sourceLineNo">056</span>        UnivariateFunction c = new Constant(4);<a name="line.56"></a>
<span class="sourceLineNo">057</span>        Assert.assertEquals(4, FunctionUtils.compose(id, c).value(3), EPS);<a name="line.57"></a>
<span class="sourceLineNo">058</span>        Assert.assertEquals(4, FunctionUtils.compose(c, id).value(3), EPS);<a name="line.58"></a>
<span class="sourceLineNo">059</span><a name="line.59"></a>
<span class="sourceLineNo">060</span>        UnivariateFunction m = new Minus();<a name="line.60"></a>
<span class="sourceLineNo">061</span>        Assert.assertEquals(-3, FunctionUtils.compose(m).value(3), EPS);<a name="line.61"></a>
<span class="sourceLineNo">062</span>        Assert.assertEquals(3, FunctionUtils.compose(m, m).value(3), EPS);<a name="line.62"></a>
<span class="sourceLineNo">063</span><a name="line.63"></a>
<span class="sourceLineNo">064</span>        UnivariateFunction inv = new Inverse();<a name="line.64"></a>
<span class="sourceLineNo">065</span>        Assert.assertEquals(-0.25, FunctionUtils.compose(inv, m, c, id).value(3), EPS);<a name="line.65"></a>
<span class="sourceLineNo">066</span><a name="line.66"></a>
<span class="sourceLineNo">067</span>        UnivariateFunction pow = new Power(2);<a name="line.67"></a>
<span class="sourceLineNo">068</span>        Assert.assertEquals(81, FunctionUtils.compose(pow, pow).value(3), EPS);<a name="line.68"></a>
<span class="sourceLineNo">069</span>    }<a name="line.69"></a>
<span class="sourceLineNo">070</span><a name="line.70"></a>
<span class="sourceLineNo">071</span>    @Test<a name="line.71"></a>
<span class="sourceLineNo">072</span>    public void testComposeDifferentiable() {<a name="line.72"></a>
<span class="sourceLineNo">073</span>        UnivariateDifferentiableFunction id = new Identity();<a name="line.73"></a>
<span class="sourceLineNo">074</span>        Assert.assertEquals(1, FunctionUtils.compose(id, id, id).value(new DerivativeStructure(1, 1, 0, 3)).getPartialDerivative(1), EPS);<a name="line.74"></a>
<span class="sourceLineNo">075</span><a name="line.75"></a>
<span class="sourceLineNo">076</span>        UnivariateDifferentiableFunction c = new Constant(4);<a name="line.76"></a>
<span class="sourceLineNo">077</span>        Assert.assertEquals(0, FunctionUtils.compose(id, c).value(new DerivativeStructure(1, 1, 0, 3)).getPartialDerivative(1), EPS);<a name="line.77"></a>
<span class="sourceLineNo">078</span>        Assert.assertEquals(0, FunctionUtils.compose(c, id).value(new DerivativeStructure(1, 1, 0, 3)).getPartialDerivative(1), EPS);<a name="line.78"></a>
<span class="sourceLineNo">079</span><a name="line.79"></a>
<span class="sourceLineNo">080</span>        UnivariateDifferentiableFunction m = new Minus();<a name="line.80"></a>
<span class="sourceLineNo">081</span>        Assert.assertEquals(-1, FunctionUtils.compose(m).value(new DerivativeStructure(1, 1, 0, 3)).getPartialDerivative(1), EPS);<a name="line.81"></a>
<span class="sourceLineNo">082</span>        Assert.assertEquals(1, FunctionUtils.compose(m, m).value(new DerivativeStructure(1, 1, 0, 3)).getPartialDerivative(1), EPS);<a name="line.82"></a>
<span class="sourceLineNo">083</span><a name="line.83"></a>
<span class="sourceLineNo">084</span>        UnivariateDifferentiableFunction inv = new Inverse();<a name="line.84"></a>
<span class="sourceLineNo">085</span>        Assert.assertEquals(0.25, FunctionUtils.compose(inv, m, id).value(new DerivativeStructure(1, 1, 0, 2)).getPartialDerivative(1), EPS);<a name="line.85"></a>
<span class="sourceLineNo">086</span><a name="line.86"></a>
<span class="sourceLineNo">087</span>        UnivariateDifferentiableFunction pow = new Power(2);<a name="line.87"></a>
<span class="sourceLineNo">088</span>        Assert.assertEquals(108, FunctionUtils.compose(pow, pow).value(new DerivativeStructure(1, 1, 0, 3)).getPartialDerivative(1), EPS);<a name="line.88"></a>
<span class="sourceLineNo">089</span><a name="line.89"></a>
<span class="sourceLineNo">090</span>        UnivariateDifferentiableFunction log = new Log();<a name="line.90"></a>
<span class="sourceLineNo">091</span>        double a = 9876.54321;<a name="line.91"></a>
<span class="sourceLineNo">092</span>        Assert.assertEquals(pow.value(new DerivativeStructure(1, 1, 0, a)).getPartialDerivative(1) / pow.value(a),<a name="line.92"></a>
<span class="sourceLineNo">093</span>                            FunctionUtils.compose(log, pow).value(new DerivativeStructure(1, 1, 0, a)).getPartialDerivative(1), EPS);<a name="line.93"></a>
<span class="sourceLineNo">094</span>    }<a name="line.94"></a>
<span class="sourceLineNo">095</span><a name="line.95"></a>
<span class="sourceLineNo">096</span>    @Test<a name="line.96"></a>
<span class="sourceLineNo">097</span>    public void testAdd() {<a name="line.97"></a>
<span class="sourceLineNo">098</span>        UnivariateFunction id = new Identity();<a name="line.98"></a>
<span class="sourceLineNo">099</span>        UnivariateFunction c = new Constant(4);<a name="line.99"></a>
<span class="sourceLineNo">100</span>        UnivariateFunction m = new Minus();<a name="line.100"></a>
<span class="sourceLineNo">101</span>        UnivariateFunction inv = new Inverse();<a name="line.101"></a>
<span class="sourceLineNo">102</span><a name="line.102"></a>
<span class="sourceLineNo">103</span>        Assert.assertEquals(4.5, FunctionUtils.add(inv, m, c, id).value(2), EPS);<a name="line.103"></a>
<span class="sourceLineNo">104</span>        Assert.assertEquals(4 + 2, FunctionUtils.add(c, id).value(2), EPS);<a name="line.104"></a>
<span class="sourceLineNo">105</span>        Assert.assertEquals(4 - 2, FunctionUtils.add(c, FunctionUtils.compose(m, id)).value(2), EPS);<a name="line.105"></a>
<span class="sourceLineNo">106</span>    }<a name="line.106"></a>
<span class="sourceLineNo">107</span><a name="line.107"></a>
<span class="sourceLineNo">108</span>    @Test<a name="line.108"></a>
<span class="sourceLineNo">109</span>    public void testAddDifferentiable() {<a name="line.109"></a>
<span class="sourceLineNo">110</span>        UnivariateDifferentiableFunction sin = new Sin();<a name="line.110"></a>
<span class="sourceLineNo">111</span>        UnivariateDifferentiableFunction c = new Constant(4);<a name="line.111"></a>
<span class="sourceLineNo">112</span>        UnivariateDifferentiableFunction m = new Minus();<a name="line.112"></a>
<span class="sourceLineNo">113</span>        UnivariateDifferentiableFunction inv = new Inverse();<a name="line.113"></a>
<span class="sourceLineNo">114</span><a name="line.114"></a>
<span class="sourceLineNo">115</span>        final double a = 123.456;<a name="line.115"></a>
<span class="sourceLineNo">116</span>        Assert.assertEquals(- 1 / (a * a) -1 + FastMath.cos(a),<a name="line.116"></a>
<span class="sourceLineNo">117</span>                            FunctionUtils.add(inv, m, c, sin).value(new DerivativeStructure(1, 1, 0, a)).getPartialDerivative(1),<a name="line.117"></a>
<span class="sourceLineNo">118</span>                            EPS);<a name="line.118"></a>
<span class="sourceLineNo">119</span>    }<a name="line.119"></a>
<span class="sourceLineNo">120</span><a name="line.120"></a>
<span class="sourceLineNo">121</span>    @Test<a name="line.121"></a>
<span class="sourceLineNo">122</span>    public void testMultiply() {<a name="line.122"></a>
<span class="sourceLineNo">123</span>        UnivariateFunction c = new Constant(4);<a name="line.123"></a>
<span class="sourceLineNo">124</span>        Assert.assertEquals(16, FunctionUtils.multiply(c, c).value(12345), EPS);<a name="line.124"></a>
<span class="sourceLineNo">125</span><a name="line.125"></a>
<span class="sourceLineNo">126</span>        UnivariateFunction inv = new Inverse();<a name="line.126"></a>
<span class="sourceLineNo">127</span>        UnivariateFunction pow = new Power(2);<a name="line.127"></a>
<span class="sourceLineNo">128</span>        Assert.assertEquals(1, FunctionUtils.multiply(FunctionUtils.compose(inv, pow), pow).value(3.5), EPS);<a name="line.128"></a>
<span class="sourceLineNo">129</span>    }<a name="line.129"></a>
<span class="sourceLineNo">130</span><a name="line.130"></a>
<span class="sourceLineNo">131</span>    @Test<a name="line.131"></a>
<span class="sourceLineNo">132</span>    public void testMultiplyDifferentiable() {<a name="line.132"></a>
<span class="sourceLineNo">133</span>        UnivariateDifferentiableFunction c = new Constant(4);<a name="line.133"></a>
<span class="sourceLineNo">134</span>        UnivariateDifferentiableFunction id = new Identity();<a name="line.134"></a>
<span class="sourceLineNo">135</span>        final double a = 1.2345678;<a name="line.135"></a>
<span class="sourceLineNo">136</span>        Assert.assertEquals(8 * a, FunctionUtils.multiply(c, id, id).value(new DerivativeStructure(1, 1, 0, a)).getPartialDerivative(1), EPS);<a name="line.136"></a>
<span class="sourceLineNo">137</span><a name="line.137"></a>
<span class="sourceLineNo">138</span>        UnivariateDifferentiableFunction inv = new Inverse();<a name="line.138"></a>
<span class="sourceLineNo">139</span>        UnivariateDifferentiableFunction pow = new Power(2.5);<a name="line.139"></a>
<span class="sourceLineNo">140</span>        UnivariateDifferentiableFunction cos = new Cos();<a name="line.140"></a>
<span class="sourceLineNo">141</span>        Assert.assertEquals(1.5 * FastMath.sqrt(a) * FastMath.cos(a) - FastMath.pow(a, 1.5) * FastMath.sin(a),<a name="line.141"></a>
<span class="sourceLineNo">142</span>                            FunctionUtils.multiply(inv, pow, cos).value(new DerivativeStructure(1, 1, 0, a)).getPartialDerivative(1), EPS);<a name="line.142"></a>
<span class="sourceLineNo">143</span><a name="line.143"></a>
<span class="sourceLineNo">144</span>        UnivariateDifferentiableFunction cosh = new Cosh();<a name="line.144"></a>
<span class="sourceLineNo">145</span>        Assert.assertEquals(1.5 * FastMath.sqrt(a) * FastMath.cosh(a) + FastMath.pow(a, 1.5) * FastMath.sinh(a),<a name="line.145"></a>
<span class="sourceLineNo">146</span>                            FunctionUtils.multiply(inv, pow, cosh).value(new DerivativeStructure(1, 1, 0, a)).getPartialDerivative(1), 8 * EPS);<a name="line.146"></a>
<span class="sourceLineNo">147</span>    }<a name="line.147"></a>
<span class="sourceLineNo">148</span><a name="line.148"></a>
<span class="sourceLineNo">149</span>    @Test<a name="line.149"></a>
<span class="sourceLineNo">150</span>    public void testCombine() {<a name="line.150"></a>
<span class="sourceLineNo">151</span>        BivariateFunction bi = new Add();<a name="line.151"></a>
<span class="sourceLineNo">152</span>        UnivariateFunction id = new Identity();<a name="line.152"></a>
<span class="sourceLineNo">153</span>        UnivariateFunction m = new Minus();<a name="line.153"></a>
<span class="sourceLineNo">154</span>        UnivariateFunction c = FunctionUtils.combine(bi, id, m);<a name="line.154"></a>
<span class="sourceLineNo">155</span>        Assert.assertEquals(0, c.value(2.3456), EPS);<a name="line.155"></a>
<span class="sourceLineNo">156</span><a name="line.156"></a>
<span class="sourceLineNo">157</span>        bi = new Multiply();<a name="line.157"></a>
<span class="sourceLineNo">158</span>        UnivariateFunction inv = new Inverse();<a name="line.158"></a>
<span class="sourceLineNo">159</span>        c = FunctionUtils.combine(bi, id, inv);<a name="line.159"></a>
<span class="sourceLineNo">160</span>        Assert.assertEquals(1, c.value(2.3456), EPS);<a name="line.160"></a>
<span class="sourceLineNo">161</span>    }<a name="line.161"></a>
<span class="sourceLineNo">162</span><a name="line.162"></a>
<span class="sourceLineNo">163</span>    @Test<a name="line.163"></a>
<span class="sourceLineNo">164</span>    public void testCollector() {<a name="line.164"></a>
<span class="sourceLineNo">165</span>        BivariateFunction bi = new Add();<a name="line.165"></a>
<span class="sourceLineNo">166</span>        MultivariateFunction coll = FunctionUtils.collector(bi, 0);<a name="line.166"></a>
<span class="sourceLineNo">167</span>        Assert.assertEquals(10, coll.value(new double[] {1, 2, 3, 4}), EPS);<a name="line.167"></a>
<span class="sourceLineNo">168</span><a name="line.168"></a>
<span class="sourceLineNo">169</span>        bi = new Multiply();<a name="line.169"></a>
<span class="sourceLineNo">170</span>        coll = FunctionUtils.collector(bi, 1);<a name="line.170"></a>
<span class="sourceLineNo">171</span>        Assert.assertEquals(24, coll.value(new double[] {1, 2, 3, 4}), EPS);<a name="line.171"></a>
<span class="sourceLineNo">172</span><a name="line.172"></a>
<span class="sourceLineNo">173</span>        bi = new Max();<a name="line.173"></a>
<span class="sourceLineNo">174</span>        coll = FunctionUtils.collector(bi, Double.NEGATIVE_INFINITY);<a name="line.174"></a>
<span class="sourceLineNo">175</span>        Assert.assertEquals(10, coll.value(new double[] {1, -2, 7.5, 10, -24, 9.99}), 0);<a name="line.175"></a>
<span class="sourceLineNo">176</span><a name="line.176"></a>
<span class="sourceLineNo">177</span>        bi = new Min();<a name="line.177"></a>
<span class="sourceLineNo">178</span>        coll = FunctionUtils.collector(bi, Double.POSITIVE_INFINITY);<a name="line.178"></a>
<span class="sourceLineNo">179</span>        Assert.assertEquals(-24, coll.value(new double[] {1, -2, 7.5, 10, -24, 9.99}), 0);<a name="line.179"></a>
<span class="sourceLineNo">180</span>    }<a name="line.180"></a>
<span class="sourceLineNo">181</span><a name="line.181"></a>
<span class="sourceLineNo">182</span>    @Test<a name="line.182"></a>
<span class="sourceLineNo">183</span>    public void testSinc() {<a name="line.183"></a>
<span class="sourceLineNo">184</span>        BivariateFunction div = new Divide();<a name="line.184"></a>
<span class="sourceLineNo">185</span>        UnivariateFunction sin = new Sin();<a name="line.185"></a>
<span class="sourceLineNo">186</span>        UnivariateFunction id = new Identity();<a name="line.186"></a>
<span class="sourceLineNo">187</span>        UnivariateFunction sinc1 = FunctionUtils.combine(div, sin, id);<a name="line.187"></a>
<span class="sourceLineNo">188</span>        UnivariateFunction sinc2 = new Sinc();<a name="line.188"></a>
<span class="sourceLineNo">189</span><a name="line.189"></a>
<span class="sourceLineNo">190</span>        for (int i = 0; i &lt; 10; i++) {<a name="line.190"></a>
<span class="sourceLineNo">191</span>            double x = FastMath.random();<a name="line.191"></a>
<span class="sourceLineNo">192</span>            Assert.assertEquals(sinc1.value(x), sinc2.value(x), EPS);<a name="line.192"></a>
<span class="sourceLineNo">193</span>        }<a name="line.193"></a>
<span class="sourceLineNo">194</span>    }<a name="line.194"></a>
<span class="sourceLineNo">195</span><a name="line.195"></a>
<span class="sourceLineNo">196</span>    @Test<a name="line.196"></a>
<span class="sourceLineNo">197</span>    public void testFixingArguments() {<a name="line.197"></a>
<span class="sourceLineNo">198</span>        UnivariateFunction scaler = FunctionUtils.fix1stArgument(new Multiply(), 10);<a name="line.198"></a>
<span class="sourceLineNo">199</span>        Assert.assertEquals(1.23456, scaler.value(0.123456), EPS);<a name="line.199"></a>
<span class="sourceLineNo">200</span><a name="line.200"></a>
<span class="sourceLineNo">201</span>        UnivariateFunction pow1 = new Power(2);<a name="line.201"></a>
<span class="sourceLineNo">202</span>        UnivariateFunction pow2 = FunctionUtils.fix2ndArgument(new Pow(), 2);<a name="line.202"></a>
<span class="sourceLineNo">203</span><a name="line.203"></a>
<span class="sourceLineNo">204</span>        for (int i = 0; i &lt; 10; i++) {<a name="line.204"></a>
<span class="sourceLineNo">205</span>            double x = FastMath.random() * 10;<a name="line.205"></a>
<span class="sourceLineNo">206</span>            Assert.assertEquals(pow1.value(x), pow2.value(x), 0);<a name="line.206"></a>
<span class="sourceLineNo">207</span>        }<a name="line.207"></a>
<span class="sourceLineNo">208</span>    }<a name="line.208"></a>
<span class="sourceLineNo">209</span><a name="line.209"></a>
<span class="sourceLineNo">210</span>    @Test(expected = NumberIsTooLargeException.class)<a name="line.210"></a>
<span class="sourceLineNo">211</span>    public void testSampleWrongBounds(){<a name="line.211"></a>
<span class="sourceLineNo">212</span>        FunctionUtils.sample(new Sin(), FastMath.PI, 0.0, 10);<a name="line.212"></a>
<span class="sourceLineNo">213</span>    }<a name="line.213"></a>
<span class="sourceLineNo">214</span><a name="line.214"></a>
<span class="sourceLineNo">215</span>    @Test(expected = NotStrictlyPositiveException.class)<a name="line.215"></a>
<span class="sourceLineNo">216</span>    public void testSampleNegativeNumberOfPoints(){<a name="line.216"></a>
<span class="sourceLineNo">217</span>        FunctionUtils.sample(new Sin(), 0.0, FastMath.PI, -1);<a name="line.217"></a>
<span class="sourceLineNo">218</span>    }<a name="line.218"></a>
<span class="sourceLineNo">219</span><a name="line.219"></a>
<span class="sourceLineNo">220</span>    @Test(expected = NotStrictlyPositiveException.class)<a name="line.220"></a>
<span class="sourceLineNo">221</span>    public void testSampleNullNumberOfPoints(){<a name="line.221"></a>
<span class="sourceLineNo">222</span>        FunctionUtils.sample(new Sin(), 0.0, FastMath.PI, 0);<a name="line.222"></a>
<span class="sourceLineNo">223</span>    }<a name="line.223"></a>
<span class="sourceLineNo">224</span><a name="line.224"></a>
<span class="sourceLineNo">225</span>    @Test<a name="line.225"></a>
<span class="sourceLineNo">226</span>    public void testSample() {<a name="line.226"></a>
<span class="sourceLineNo">227</span>        final int n = 11;<a name="line.227"></a>
<span class="sourceLineNo">228</span>        final double min = 0.0;<a name="line.228"></a>
<span class="sourceLineNo">229</span>        final double max = FastMath.PI;<a name="line.229"></a>
<span class="sourceLineNo">230</span>        final double[] actual = FunctionUtils.sample(new Sin(), min, max, n);<a name="line.230"></a>
<span class="sourceLineNo">231</span>        for (int i = 0; i &lt; n; i++) {<a name="line.231"></a>
<span class="sourceLineNo">232</span>            final double x = min + (max - min) / n * i;<a name="line.232"></a>
<span class="sourceLineNo">233</span>            Assert.assertEquals("x = " + x, FastMath.sin(x), actual[i], 0.0);<a name="line.233"></a>
<span class="sourceLineNo">234</span>        }<a name="line.234"></a>
<span class="sourceLineNo">235</span>    }<a name="line.235"></a>
<span class="sourceLineNo">236</span><a name="line.236"></a>
<span class="sourceLineNo">237</span>    @Test<a name="line.237"></a>
<span class="sourceLineNo">238</span>    @Deprecated<a name="line.238"></a>
<span class="sourceLineNo">239</span>    public void testToDifferentiableUnivariateFunction() {<a name="line.239"></a>
<span class="sourceLineNo">240</span><a name="line.240"></a>
<span class="sourceLineNo">241</span>        // Sin implements both UnivariateDifferentiableFunction and DifferentiableUnivariateFunction<a name="line.241"></a>
<span class="sourceLineNo">242</span>        Sin sin = new Sin();<a name="line.242"></a>
<span class="sourceLineNo">243</span>        DifferentiableUnivariateFunction converted = FunctionUtils.toDifferentiableUnivariateFunction(sin);<a name="line.243"></a>
<span class="sourceLineNo">244</span>        for (double x = 0.1; x &lt; 0.5; x += 0.01) {<a name="line.244"></a>
<span class="sourceLineNo">245</span>            Assert.assertEquals(sin.value(x), converted.value(x), 1.0e-10);<a name="line.245"></a>
<span class="sourceLineNo">246</span>            Assert.assertEquals(sin.derivative().value(x), converted.derivative().value(x), 1.0e-10);<a name="line.246"></a>
<span class="sourceLineNo">247</span>        }<a name="line.247"></a>
<span class="sourceLineNo">248</span><a name="line.248"></a>
<span class="sourceLineNo">249</span>    }<a name="line.249"></a>
<span class="sourceLineNo">250</span><a name="line.250"></a>
<span class="sourceLineNo">251</span>    @Test<a name="line.251"></a>
<span class="sourceLineNo">252</span>    @Deprecated<a name="line.252"></a>
<span class="sourceLineNo">253</span>    public void testToUnivariateDifferential() {<a name="line.253"></a>
<span class="sourceLineNo">254</span><a name="line.254"></a>
<span class="sourceLineNo">255</span>        // Sin implements both UnivariateDifferentiableFunction and DifferentiableUnivariateFunction<a name="line.255"></a>
<span class="sourceLineNo">256</span>        Sin sin = new Sin();<a name="line.256"></a>
<span class="sourceLineNo">257</span>        UnivariateDifferentiableFunction converted = FunctionUtils.toUnivariateDifferential(sin);<a name="line.257"></a>
<span class="sourceLineNo">258</span>        for (double x = 0.1; x &lt; 0.5; x += 0.01) {<a name="line.258"></a>
<span class="sourceLineNo">259</span>            DerivativeStructure t = new DerivativeStructure(2, 1, x, 1.0, 2.0);<a name="line.259"></a>
<span class="sourceLineNo">260</span>            Assert.assertEquals(sin.value(t).getValue(), converted.value(t).getValue(), 1.0e-10);<a name="line.260"></a>
<span class="sourceLineNo">261</span>            Assert.assertEquals(sin.value(t).getPartialDerivative(1, 0),<a name="line.261"></a>
<span class="sourceLineNo">262</span>                                converted.value(t).getPartialDerivative(1, 0),<a name="line.262"></a>
<span class="sourceLineNo">263</span>                                1.0e-10);<a name="line.263"></a>
<span class="sourceLineNo">264</span>            Assert.assertEquals(sin.value(t).getPartialDerivative(0, 1),<a name="line.264"></a>
<span class="sourceLineNo">265</span>                                converted.value(t).getPartialDerivative(0, 1),<a name="line.265"></a>
<span class="sourceLineNo">266</span>                                1.0e-10);<a name="line.266"></a>
<span class="sourceLineNo">267</span>        }<a name="line.267"></a>
<span class="sourceLineNo">268</span><a name="line.268"></a>
<span class="sourceLineNo">269</span>    }<a name="line.269"></a>
<span class="sourceLineNo">270</span><a name="line.270"></a>
<span class="sourceLineNo">271</span>    @Test<a name="line.271"></a>
<span class="sourceLineNo">272</span>    @Deprecated<a name="line.272"></a>
<span class="sourceLineNo">273</span>    public void testToDifferentiableMultivariateFunction() {<a name="line.273"></a>
<span class="sourceLineNo">274</span><a name="line.274"></a>
<span class="sourceLineNo">275</span>        MultivariateDifferentiableFunction hypot = new MultivariateDifferentiableFunction() {<a name="line.275"></a>
<span class="sourceLineNo">276</span>            <a name="line.276"></a>
<span class="sourceLineNo">277</span>            public double value(double[] point) {<a name="line.277"></a>
<span class="sourceLineNo">278</span>                return FastMath.hypot(point[0], point[1]);<a name="line.278"></a>
<span class="sourceLineNo">279</span>            }<a name="line.279"></a>
<span class="sourceLineNo">280</span>            <a name="line.280"></a>
<span class="sourceLineNo">281</span>            public DerivativeStructure value(DerivativeStructure[] point) {<a name="line.281"></a>
<span class="sourceLineNo">282</span>                return DerivativeStructure.hypot(point[0], point[1]);<a name="line.282"></a>
<span class="sourceLineNo">283</span>            }<a name="line.283"></a>
<span class="sourceLineNo">284</span>        };<a name="line.284"></a>
<span class="sourceLineNo">285</span><a name="line.285"></a>
<span class="sourceLineNo">286</span>        DifferentiableMultivariateFunction converted = FunctionUtils.toDifferentiableMultivariateFunction(hypot);<a name="line.286"></a>
<span class="sourceLineNo">287</span>        for (double x = 0.1; x &lt; 0.5; x += 0.01) {<a name="line.287"></a>
<span class="sourceLineNo">288</span>            for (double y = 0.1; y &lt; 0.5; y += 0.01) {<a name="line.288"></a>
<span class="sourceLineNo">289</span>                double[] point = new double[] { x, y };<a name="line.289"></a>
<span class="sourceLineNo">290</span>                Assert.assertEquals(hypot.value(point), converted.value(point), 1.0e-10);<a name="line.290"></a>
<span class="sourceLineNo">291</span>                Assert.assertEquals(x / hypot.value(point), converted.gradient().value(point)[0], 1.0e-10);<a name="line.291"></a>
<span class="sourceLineNo">292</span>                Assert.assertEquals(y / hypot.value(point), converted.gradient().value(point)[1], 1.0e-10);<a name="line.292"></a>
<span class="sourceLineNo">293</span>            }<a name="line.293"></a>
<span class="sourceLineNo">294</span>        }<a name="line.294"></a>
<span class="sourceLineNo">295</span><a name="line.295"></a>
<span class="sourceLineNo">296</span>    }<a name="line.296"></a>
<span class="sourceLineNo">297</span><a name="line.297"></a>
<span class="sourceLineNo">298</span>    @Test<a name="line.298"></a>
<span class="sourceLineNo">299</span>    @Deprecated<a name="line.299"></a>
<span class="sourceLineNo">300</span>    public void testToMultivariateDifferentiableFunction() {<a name="line.300"></a>
<span class="sourceLineNo">301</span><a name="line.301"></a>
<span class="sourceLineNo">302</span>        DifferentiableMultivariateFunction hypot = new DifferentiableMultivariateFunction() {<a name="line.302"></a>
<span class="sourceLineNo">303</span>            <a name="line.303"></a>
<span class="sourceLineNo">304</span>            public double value(double[] point) {<a name="line.304"></a>
<span class="sourceLineNo">305</span>                return FastMath.hypot(point[0], point[1]);<a name="line.305"></a>
<span class="sourceLineNo">306</span>            }<a name="line.306"></a>
<span class="sourceLineNo">307</span><a name="line.307"></a>
<span class="sourceLineNo">308</span>            public MultivariateFunction partialDerivative(final int k) {<a name="line.308"></a>
<span class="sourceLineNo">309</span>                return new MultivariateFunction() {<a name="line.309"></a>
<span class="sourceLineNo">310</span>                    public double value(double[] point) {<a name="line.310"></a>
<span class="sourceLineNo">311</span>                        return point[k] / FastMath.hypot(point[0], point[1]);<a name="line.311"></a>
<span class="sourceLineNo">312</span>                    }<a name="line.312"></a>
<span class="sourceLineNo">313</span>                };<a name="line.313"></a>
<span class="sourceLineNo">314</span>            }<a name="line.314"></a>
<span class="sourceLineNo">315</span><a name="line.315"></a>
<span class="sourceLineNo">316</span>            public MultivariateVectorFunction gradient() {<a name="line.316"></a>
<span class="sourceLineNo">317</span>                return new MultivariateVectorFunction() {<a name="line.317"></a>
<span class="sourceLineNo">318</span>                    public double[] value(double[] point) {<a name="line.318"></a>
<span class="sourceLineNo">319</span>                        final double h = FastMath.hypot(point[0], point[1]);<a name="line.319"></a>
<span class="sourceLineNo">320</span>                        return new double[] { point[0] / h, point[1] / h };<a name="line.320"></a>
<span class="sourceLineNo">321</span>                    }<a name="line.321"></a>
<span class="sourceLineNo">322</span>                };<a name="line.322"></a>
<span class="sourceLineNo">323</span>            }<a name="line.323"></a>
<span class="sourceLineNo">324</span>            <a name="line.324"></a>
<span class="sourceLineNo">325</span>        };<a name="line.325"></a>
<span class="sourceLineNo">326</span><a name="line.326"></a>
<span class="sourceLineNo">327</span>        MultivariateDifferentiableFunction converted = FunctionUtils.toMultivariateDifferentiableFunction(hypot);<a name="line.327"></a>
<span class="sourceLineNo">328</span>        for (double x = 0.1; x &lt; 0.5; x += 0.01) {<a name="line.328"></a>
<span class="sourceLineNo">329</span>            for (double y = 0.1; y &lt; 0.5; y += 0.01) {<a name="line.329"></a>
<span class="sourceLineNo">330</span>                DerivativeStructure[] t = new DerivativeStructure[] {<a name="line.330"></a>
<span class="sourceLineNo">331</span>                    new DerivativeStructure(3, 1, x, 1.0, 2.0, 3.0 ),<a name="line.331"></a>
<span class="sourceLineNo">332</span>                    new DerivativeStructure(3, 1, y, 4.0, 5.0, 6.0 )<a name="line.332"></a>
<span class="sourceLineNo">333</span>                };<a name="line.333"></a>
<span class="sourceLineNo">334</span>                DerivativeStructure h = DerivativeStructure.hypot(t[0], t[1]);<a name="line.334"></a>
<span class="sourceLineNo">335</span>                Assert.assertEquals(h.getValue(), converted.value(t).getValue(), 1.0e-10);<a name="line.335"></a>
<span class="sourceLineNo">336</span>                Assert.assertEquals(h.getPartialDerivative(1, 0, 0),<a name="line.336"></a>
<span class="sourceLineNo">337</span>                                    converted.value(t).getPartialDerivative(1, 0, 0),<a name="line.337"></a>
<span class="sourceLineNo">338</span>                                    1.0e-10);<a name="line.338"></a>
<span class="sourceLineNo">339</span>                Assert.assertEquals(h.getPartialDerivative(0, 1, 0),<a name="line.339"></a>
<span class="sourceLineNo">340</span>                                    converted.value(t).getPartialDerivative(0, 1, 0),<a name="line.340"></a>
<span class="sourceLineNo">341</span>                                    1.0e-10);<a name="line.341"></a>
<span class="sourceLineNo">342</span>                Assert.assertEquals(h.getPartialDerivative(0, 0, 1),<a name="line.342"></a>
<span class="sourceLineNo">343</span>                                    converted.value(t).getPartialDerivative(0, 0, 1),<a name="line.343"></a>
<span class="sourceLineNo">344</span>                                    1.0e-10);<a name="line.344"></a>
<span class="sourceLineNo">345</span>            }<a name="line.345"></a>
<span class="sourceLineNo">346</span>        }<a name="line.346"></a>
<span class="sourceLineNo">347</span>    }<a name="line.347"></a>
<span class="sourceLineNo">348</span><a name="line.348"></a>
<span class="sourceLineNo">349</span>}<a name="line.349"></a>




























































</pre>
</div>
</body>
</html>
