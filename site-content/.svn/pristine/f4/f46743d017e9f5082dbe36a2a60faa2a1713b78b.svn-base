<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span>package org.apache.commons.math3.random;<a name="line.17"></a>
<span class="sourceLineNo">018</span><a name="line.18"></a>
<span class="sourceLineNo">019</span>import java.util.Arrays;<a name="line.19"></a>
<span class="sourceLineNo">020</span><a name="line.20"></a>
<span class="sourceLineNo">021</span>import org.apache.commons.math3.TestUtils;<a name="line.21"></a>
<span class="sourceLineNo">022</span>import org.apache.commons.math3.stat.Frequency;<a name="line.22"></a>
<span class="sourceLineNo">023</span>import org.apache.commons.math3.stat.descriptive.SummaryStatistics;<a name="line.23"></a>
<span class="sourceLineNo">024</span>import org.apache.commons.math3.util.FastMath;<a name="line.24"></a>
<span class="sourceLineNo">025</span>import org.apache.commons.math3.exception.MathIllegalArgumentException;<a name="line.25"></a>
<span class="sourceLineNo">026</span><a name="line.26"></a>
<span class="sourceLineNo">027</span>import org.junit.Assert;<a name="line.27"></a>
<span class="sourceLineNo">028</span>import org.junit.Before;<a name="line.28"></a>
<span class="sourceLineNo">029</span>import org.junit.Test;<a name="line.29"></a>
<span class="sourceLineNo">030</span><a name="line.30"></a>
<span class="sourceLineNo">031</span>/**<a name="line.31"></a>
<span class="sourceLineNo">032</span> * Base class for RandomGenerator tests.<a name="line.32"></a>
<span class="sourceLineNo">033</span> *<a name="line.33"></a>
<span class="sourceLineNo">034</span> * Tests RandomGenerator methods directly and also executes RandomDataTest<a name="line.34"></a>
<span class="sourceLineNo">035</span> * test cases against a RandomDataImpl created using the provided generator.<a name="line.35"></a>
<span class="sourceLineNo">036</span> *<a name="line.36"></a>
<span class="sourceLineNo">037</span> * RandomGenerator test classes should extend this class, implementing<a name="line.37"></a>
<span class="sourceLineNo">038</span> * makeGenerator() to provide a concrete generator to test. The generator<a name="line.38"></a>
<span class="sourceLineNo">039</span> * returned by makeGenerator should be seeded with a fixed seed.<a name="line.39"></a>
<span class="sourceLineNo">040</span> *<a name="line.40"></a>
<span class="sourceLineNo">041</span> */<a name="line.41"></a>
<span class="sourceLineNo">042</span><a name="line.42"></a>
<span class="sourceLineNo">043</span>public abstract class RandomGeneratorAbstractTest extends RandomDataGeneratorTest {<a name="line.43"></a>
<span class="sourceLineNo">044</span><a name="line.44"></a>
<span class="sourceLineNo">045</span>    /** RandomGenerator under test */<a name="line.45"></a>
<span class="sourceLineNo">046</span>    protected RandomGenerator generator;<a name="line.46"></a>
<span class="sourceLineNo">047</span><a name="line.47"></a>
<span class="sourceLineNo">048</span>    /**<a name="line.48"></a>
<span class="sourceLineNo">049</span>     * Override this method in subclasses to provide a concrete generator to test.<a name="line.49"></a>
<span class="sourceLineNo">050</span>     * Return a generator seeded with a fixed seed.<a name="line.50"></a>
<span class="sourceLineNo">051</span>     */<a name="line.51"></a>
<span class="sourceLineNo">052</span>    protected abstract RandomGenerator makeGenerator();<a name="line.52"></a>
<span class="sourceLineNo">053</span><a name="line.53"></a>
<span class="sourceLineNo">054</span>    /**<a name="line.54"></a>
<span class="sourceLineNo">055</span>     * Initialize generator and randomData instance in superclass.<a name="line.55"></a>
<span class="sourceLineNo">056</span>     */<a name="line.56"></a>
<span class="sourceLineNo">057</span>    public RandomGeneratorAbstractTest() {<a name="line.57"></a>
<span class="sourceLineNo">058</span>        generator = makeGenerator();<a name="line.58"></a>
<span class="sourceLineNo">059</span>        randomData = new RandomDataGenerator(generator);<a name="line.59"></a>
<span class="sourceLineNo">060</span>    }<a name="line.60"></a>
<span class="sourceLineNo">061</span><a name="line.61"></a>
<span class="sourceLineNo">062</span>    /**<a name="line.62"></a>
<span class="sourceLineNo">063</span>     * Set a fixed seed for the tests<a name="line.63"></a>
<span class="sourceLineNo">064</span>     */<a name="line.64"></a>
<span class="sourceLineNo">065</span>    @Before<a name="line.65"></a>
<span class="sourceLineNo">066</span>    public void setUp() {<a name="line.66"></a>
<span class="sourceLineNo">067</span>        generator = makeGenerator();<a name="line.67"></a>
<span class="sourceLineNo">068</span>    }<a name="line.68"></a>
<span class="sourceLineNo">069</span>    <a name="line.69"></a>
<span class="sourceLineNo">070</span>    // Omit secureXxx tests, since they do not use the provided generator<a name="line.70"></a>
<span class="sourceLineNo">071</span>    @Override<a name="line.71"></a>
<span class="sourceLineNo">072</span>    public void testNextSecureLongIAE() {}<a name="line.72"></a>
<span class="sourceLineNo">073</span>    @Override<a name="line.73"></a>
<span class="sourceLineNo">074</span>    public void testNextSecureLongNegativeToPositiveRange() {}<a name="line.74"></a>
<span class="sourceLineNo">075</span>    @Override<a name="line.75"></a>
<span class="sourceLineNo">076</span>    public void testNextSecureLongNegativeRange() {}<a name="line.76"></a>
<span class="sourceLineNo">077</span>    @Override<a name="line.77"></a>
<span class="sourceLineNo">078</span>    public void testNextSecureLongPositiveRange() {}<a name="line.78"></a>
<span class="sourceLineNo">079</span>    @Override<a name="line.79"></a>
<span class="sourceLineNo">080</span>    public void testNextSecureIntIAE() {}<a name="line.80"></a>
<span class="sourceLineNo">081</span>    @Override<a name="line.81"></a>
<span class="sourceLineNo">082</span>    public void testNextSecureIntNegativeToPositiveRange() {}<a name="line.82"></a>
<span class="sourceLineNo">083</span>    @Override<a name="line.83"></a>
<span class="sourceLineNo">084</span>    public void testNextSecureIntNegativeRange() {}<a name="line.84"></a>
<span class="sourceLineNo">085</span>    @Override<a name="line.85"></a>
<span class="sourceLineNo">086</span>    public void testNextSecureIntPositiveRange() {}<a name="line.86"></a>
<span class="sourceLineNo">087</span>    @Override<a name="line.87"></a>
<span class="sourceLineNo">088</span>    public void testNextSecureHex() {}<a name="line.88"></a>
<span class="sourceLineNo">089</span><a name="line.89"></a>
<span class="sourceLineNo">090</span>    @Test<a name="line.90"></a>
<span class="sourceLineNo">091</span>    /**<a name="line.91"></a>
<span class="sourceLineNo">092</span>     * Tests uniformity of nextInt(int) distribution by generating 1000<a name="line.92"></a>
<span class="sourceLineNo">093</span>     * samples for each of 10 test values and for each sample performing<a name="line.93"></a>
<span class="sourceLineNo">094</span>     * a chi-square test of homogeneity of the observed distribution with<a name="line.94"></a>
<span class="sourceLineNo">095</span>     * the expected uniform distribution.  Tests are performed at the .01<a name="line.95"></a>
<span class="sourceLineNo">096</span>     * level and an average failure rate higher than 2% (i.e. more than 20<a name="line.96"></a>
<span class="sourceLineNo">097</span>     * null hypothesis rejections) causes the test case to fail.<a name="line.97"></a>
<span class="sourceLineNo">098</span>     *<a name="line.98"></a>
<span class="sourceLineNo">099</span>     * All random values are generated using the generator instance used by<a name="line.99"></a>
<span class="sourceLineNo">100</span>     * other tests and the generator is not reseeded, so this is a fixed seed<a name="line.100"></a>
<span class="sourceLineNo">101</span>     * test.<a name="line.101"></a>
<span class="sourceLineNo">102</span>     */<a name="line.102"></a>
<span class="sourceLineNo">103</span>    public void testNextIntDirect() {<a name="line.103"></a>
<span class="sourceLineNo">104</span>        // Set up test values - end of the array filled randomly<a name="line.104"></a>
<span class="sourceLineNo">105</span>        int[] testValues = new int[] {4, 10, 12, 32, 100, 10000, 0, 0, 0, 0};<a name="line.105"></a>
<span class="sourceLineNo">106</span>        for (int i = 6; i &lt; 10; i++) {<a name="line.106"></a>
<span class="sourceLineNo">107</span>            final int val = generator.nextInt();<a name="line.107"></a>
<span class="sourceLineNo">108</span>            testValues[i] = val &lt; 0 ? -val : val + 1;<a name="line.108"></a>
<span class="sourceLineNo">109</span>        }<a name="line.109"></a>
<span class="sourceLineNo">110</span><a name="line.110"></a>
<span class="sourceLineNo">111</span>        final int numTests = 1000;<a name="line.111"></a>
<span class="sourceLineNo">112</span>        for (int i = 0; i &lt; testValues.length; i++) {<a name="line.112"></a>
<span class="sourceLineNo">113</span>            final int n = testValues[i];<a name="line.113"></a>
<span class="sourceLineNo">114</span>            // Set up bins<a name="line.114"></a>
<span class="sourceLineNo">115</span>            int[] binUpperBounds;<a name="line.115"></a>
<span class="sourceLineNo">116</span>            if (n &lt; 32) {<a name="line.116"></a>
<span class="sourceLineNo">117</span>                binUpperBounds = new int[n];<a name="line.117"></a>
<span class="sourceLineNo">118</span>                for (int k = 0; k &lt; n; k++) {<a name="line.118"></a>
<span class="sourceLineNo">119</span>                    binUpperBounds[k] = k;<a name="line.119"></a>
<span class="sourceLineNo">120</span>                }<a name="line.120"></a>
<span class="sourceLineNo">121</span>            } else {<a name="line.121"></a>
<span class="sourceLineNo">122</span>                binUpperBounds = new int[10];<a name="line.122"></a>
<span class="sourceLineNo">123</span>                final int step = n / 10;<a name="line.123"></a>
<span class="sourceLineNo">124</span>                for (int k = 0; k &lt; 9; k++) {<a name="line.124"></a>
<span class="sourceLineNo">125</span>                    binUpperBounds[k] = (k + 1) * step;<a name="line.125"></a>
<span class="sourceLineNo">126</span>                }<a name="line.126"></a>
<span class="sourceLineNo">127</span>                binUpperBounds[9] = n - 1;<a name="line.127"></a>
<span class="sourceLineNo">128</span>            }<a name="line.128"></a>
<span class="sourceLineNo">129</span>            // Run the tests<a name="line.129"></a>
<span class="sourceLineNo">130</span>            int numFailures = 0;<a name="line.130"></a>
<span class="sourceLineNo">131</span>            final int binCount = binUpperBounds.length;<a name="line.131"></a>
<span class="sourceLineNo">132</span>            final long[] observed = new long[binCount];<a name="line.132"></a>
<span class="sourceLineNo">133</span>            final double[] expected = new double[binCount];<a name="line.133"></a>
<span class="sourceLineNo">134</span>            expected[0] = binUpperBounds[0] == 0 ? (double) smallSampleSize / (double) n :<a name="line.134"></a>
<span class="sourceLineNo">135</span>                (double) ((binUpperBounds[0] + 1) * smallSampleSize) / (double) n;<a name="line.135"></a>
<span class="sourceLineNo">136</span>            for (int k = 1; k &lt; binCount; k++) {<a name="line.136"></a>
<span class="sourceLineNo">137</span>                expected[k] = (double) smallSampleSize *<a name="line.137"></a>
<span class="sourceLineNo">138</span>                (double) (binUpperBounds[k] - binUpperBounds[k - 1]) / n;<a name="line.138"></a>
<span class="sourceLineNo">139</span>            }<a name="line.139"></a>
<span class="sourceLineNo">140</span>            for (int j = 0; j &lt; numTests; j++) {<a name="line.140"></a>
<span class="sourceLineNo">141</span>                Arrays.fill(observed, 0);<a name="line.141"></a>
<span class="sourceLineNo">142</span>                for (int k = 0; k &lt; smallSampleSize; k++) {<a name="line.142"></a>
<span class="sourceLineNo">143</span>                    final int value = generator.nextInt(n);<a name="line.143"></a>
<span class="sourceLineNo">144</span>                    Assert.assertTrue("nextInt range",(value &gt;= 0) &amp;&amp; (value &lt; n));<a name="line.144"></a>
<span class="sourceLineNo">145</span>                    for (int l = 0; l &lt; binCount; l++) {<a name="line.145"></a>
<span class="sourceLineNo">146</span>                        if (binUpperBounds[l] &gt;= value) {<a name="line.146"></a>
<span class="sourceLineNo">147</span>                            observed[l]++;<a name="line.147"></a>
<span class="sourceLineNo">148</span>                            break;<a name="line.148"></a>
<span class="sourceLineNo">149</span>                        }<a name="line.149"></a>
<span class="sourceLineNo">150</span>                    }<a name="line.150"></a>
<span class="sourceLineNo">151</span>                }<a name="line.151"></a>
<span class="sourceLineNo">152</span>                if (testStatistic.chiSquareTest(expected, observed) &lt; 0.01) {<a name="line.152"></a>
<span class="sourceLineNo">153</span>                    numFailures++;<a name="line.153"></a>
<span class="sourceLineNo">154</span>                }<a name="line.154"></a>
<span class="sourceLineNo">155</span>            }<a name="line.155"></a>
<span class="sourceLineNo">156</span>            if ((double) numFailures / (double) numTests &gt; 0.02) {<a name="line.156"></a>
<span class="sourceLineNo">157</span>                Assert.fail("Too many failures for n = " + n +<a name="line.157"></a>
<span class="sourceLineNo">158</span>                " " + numFailures + " out of " + numTests + " tests failed.");<a name="line.158"></a>
<span class="sourceLineNo">159</span>            }<a name="line.159"></a>
<span class="sourceLineNo">160</span>        }<a name="line.160"></a>
<span class="sourceLineNo">161</span>    }<a name="line.161"></a>
<span class="sourceLineNo">162</span><a name="line.162"></a>
<span class="sourceLineNo">163</span>    @Test<a name="line.163"></a>
<span class="sourceLineNo">164</span>    public void testNextIntIAE2() {<a name="line.164"></a>
<span class="sourceLineNo">165</span>        try {<a name="line.165"></a>
<span class="sourceLineNo">166</span>            generator.nextInt(-1);<a name="line.166"></a>
<span class="sourceLineNo">167</span>            Assert.fail("MathIllegalArgumentException expected");<a name="line.167"></a>
<span class="sourceLineNo">168</span>        } catch (MathIllegalArgumentException ex) {<a name="line.168"></a>
<span class="sourceLineNo">169</span>            // ignored<a name="line.169"></a>
<span class="sourceLineNo">170</span>        }<a name="line.170"></a>
<span class="sourceLineNo">171</span>        try {<a name="line.171"></a>
<span class="sourceLineNo">172</span>            generator.nextInt(0);<a name="line.172"></a>
<span class="sourceLineNo">173</span>        } catch (MathIllegalArgumentException ex) {<a name="line.173"></a>
<span class="sourceLineNo">174</span>            // ignored<a name="line.174"></a>
<span class="sourceLineNo">175</span>        }<a name="line.175"></a>
<span class="sourceLineNo">176</span>    }<a name="line.176"></a>
<span class="sourceLineNo">177</span><a name="line.177"></a>
<span class="sourceLineNo">178</span>    @Test<a name="line.178"></a>
<span class="sourceLineNo">179</span>    public void testNextLongDirect() {<a name="line.179"></a>
<span class="sourceLineNo">180</span>        long q1 = Long.MAX_VALUE/4;<a name="line.180"></a>
<span class="sourceLineNo">181</span>        long q2 = 2 *  q1;<a name="line.181"></a>
<span class="sourceLineNo">182</span>        long q3 = 3 * q1;<a name="line.182"></a>
<span class="sourceLineNo">183</span><a name="line.183"></a>
<span class="sourceLineNo">184</span>        Frequency freq = new Frequency();<a name="line.184"></a>
<span class="sourceLineNo">185</span>        long val = 0;<a name="line.185"></a>
<span class="sourceLineNo">186</span>        int value = 0;<a name="line.186"></a>
<span class="sourceLineNo">187</span>        for (int i=0; i&lt;smallSampleSize; i++) {<a name="line.187"></a>
<span class="sourceLineNo">188</span>            val = generator.nextLong();<a name="line.188"></a>
<span class="sourceLineNo">189</span>            val = val &lt; 0 ? -val : val;<a name="line.189"></a>
<span class="sourceLineNo">190</span>            if (val &lt; q1) {<a name="line.190"></a>
<span class="sourceLineNo">191</span>                value = 0;<a name="line.191"></a>
<span class="sourceLineNo">192</span>            } else if (val &lt; q2) {<a name="line.192"></a>
<span class="sourceLineNo">193</span>                value = 1;<a name="line.193"></a>
<span class="sourceLineNo">194</span>            } else if (val &lt; q3) {<a name="line.194"></a>
<span class="sourceLineNo">195</span>                value = 2;<a name="line.195"></a>
<span class="sourceLineNo">196</span>            } else {<a name="line.196"></a>
<span class="sourceLineNo">197</span>                value = 3;<a name="line.197"></a>
<span class="sourceLineNo">198</span>            }<a name="line.198"></a>
<span class="sourceLineNo">199</span>            freq.addValue(value);<a name="line.199"></a>
<span class="sourceLineNo">200</span>        }<a name="line.200"></a>
<span class="sourceLineNo">201</span>        long[] observed = new long[4];<a name="line.201"></a>
<span class="sourceLineNo">202</span>        for (int i=0; i&lt;4; i++) {<a name="line.202"></a>
<span class="sourceLineNo">203</span>            observed[i] = freq.getCount(i);<a name="line.203"></a>
<span class="sourceLineNo">204</span>        }<a name="line.204"></a>
<span class="sourceLineNo">205</span><a name="line.205"></a>
<span class="sourceLineNo">206</span>        /* Use ChiSquare dist with df = 4-1 = 3, alpha = .001<a name="line.206"></a>
<span class="sourceLineNo">207</span>         * Change to 11.34 for alpha = .01<a name="line.207"></a>
<span class="sourceLineNo">208</span>         */<a name="line.208"></a>
<span class="sourceLineNo">209</span>        Assert.assertTrue("chi-square test -- will fail about 1 in 1000 times",<a name="line.209"></a>
<span class="sourceLineNo">210</span>                testStatistic.chiSquare(expected,observed) &lt; 16.27);<a name="line.210"></a>
<span class="sourceLineNo">211</span>    }<a name="line.211"></a>
<span class="sourceLineNo">212</span><a name="line.212"></a>
<span class="sourceLineNo">213</span>    @Test<a name="line.213"></a>
<span class="sourceLineNo">214</span>    public void testNextBooleanDirect() {<a name="line.214"></a>
<span class="sourceLineNo">215</span>        long halfSampleSize = smallSampleSize / 2;<a name="line.215"></a>
<span class="sourceLineNo">216</span>        double[] expected = {halfSampleSize, halfSampleSize};<a name="line.216"></a>
<span class="sourceLineNo">217</span>        long[] observed = new long[2];<a name="line.217"></a>
<span class="sourceLineNo">218</span>        for (int i=0; i&lt;smallSampleSize; i++) {<a name="line.218"></a>
<span class="sourceLineNo">219</span>            if (generator.nextBoolean()) {<a name="line.219"></a>
<span class="sourceLineNo">220</span>                observed[0]++;<a name="line.220"></a>
<span class="sourceLineNo">221</span>            } else {<a name="line.221"></a>
<span class="sourceLineNo">222</span>                observed[1]++;<a name="line.222"></a>
<span class="sourceLineNo">223</span>            }<a name="line.223"></a>
<span class="sourceLineNo">224</span>        }<a name="line.224"></a>
<span class="sourceLineNo">225</span>        /* Use ChiSquare dist with df = 2-1 = 1, alpha = .001<a name="line.225"></a>
<span class="sourceLineNo">226</span>         * Change to 6.635 for alpha = .01<a name="line.226"></a>
<span class="sourceLineNo">227</span>         */<a name="line.227"></a>
<span class="sourceLineNo">228</span>        Assert.assertTrue("chi-square test -- will fail about 1 in 1000 times",<a name="line.228"></a>
<span class="sourceLineNo">229</span>                testStatistic.chiSquare(expected,observed) &lt; 10.828);<a name="line.229"></a>
<span class="sourceLineNo">230</span>    }<a name="line.230"></a>
<span class="sourceLineNo">231</span><a name="line.231"></a>
<span class="sourceLineNo">232</span>    @Test<a name="line.232"></a>
<span class="sourceLineNo">233</span>    public void testNextFloatDirect() {<a name="line.233"></a>
<span class="sourceLineNo">234</span>        Frequency freq = new Frequency();<a name="line.234"></a>
<span class="sourceLineNo">235</span>        float val = 0;<a name="line.235"></a>
<span class="sourceLineNo">236</span>        int value = 0;<a name="line.236"></a>
<span class="sourceLineNo">237</span>        for (int i=0; i&lt;smallSampleSize; i++) {<a name="line.237"></a>
<span class="sourceLineNo">238</span>            val = generator.nextFloat();<a name="line.238"></a>
<span class="sourceLineNo">239</span>            if (val &lt; 0.25) {<a name="line.239"></a>
<span class="sourceLineNo">240</span>                value = 0;<a name="line.240"></a>
<span class="sourceLineNo">241</span>            } else if (val &lt; 0.5) {<a name="line.241"></a>
<span class="sourceLineNo">242</span>                value = 1;<a name="line.242"></a>
<span class="sourceLineNo">243</span>            } else if (val &lt; 0.75) {<a name="line.243"></a>
<span class="sourceLineNo">244</span>                value = 2;<a name="line.244"></a>
<span class="sourceLineNo">245</span>            } else {<a name="line.245"></a>
<span class="sourceLineNo">246</span>                value = 3;<a name="line.246"></a>
<span class="sourceLineNo">247</span>            }<a name="line.247"></a>
<span class="sourceLineNo">248</span>            freq.addValue(value);<a name="line.248"></a>
<span class="sourceLineNo">249</span>        }<a name="line.249"></a>
<span class="sourceLineNo">250</span>        long[] observed = new long[4];<a name="line.250"></a>
<span class="sourceLineNo">251</span>        for (int i=0; i&lt;4; i++) {<a name="line.251"></a>
<span class="sourceLineNo">252</span>            observed[i] = freq.getCount(i);<a name="line.252"></a>
<span class="sourceLineNo">253</span>        }<a name="line.253"></a>
<span class="sourceLineNo">254</span><a name="line.254"></a>
<span class="sourceLineNo">255</span>        /* Use ChiSquare dist with df = 4-1 = 3, alpha = .001<a name="line.255"></a>
<span class="sourceLineNo">256</span>         * Change to 11.34 for alpha = .01<a name="line.256"></a>
<span class="sourceLineNo">257</span>         */<a name="line.257"></a>
<span class="sourceLineNo">258</span>        Assert.assertTrue("chi-square test -- will fail about 1 in 1000 times",<a name="line.258"></a>
<span class="sourceLineNo">259</span>                testStatistic.chiSquare(expected,observed) &lt; 16.27);<a name="line.259"></a>
<span class="sourceLineNo">260</span>    }<a name="line.260"></a>
<span class="sourceLineNo">261</span><a name="line.261"></a>
<span class="sourceLineNo">262</span>    @Test<a name="line.262"></a>
<span class="sourceLineNo">263</span>    public void testDoubleDirect() {<a name="line.263"></a>
<span class="sourceLineNo">264</span>        SummaryStatistics sample = new SummaryStatistics();<a name="line.264"></a>
<span class="sourceLineNo">265</span>        final int N = 10000;<a name="line.265"></a>
<span class="sourceLineNo">266</span>        for (int i = 0; i &lt; N; ++i) {<a name="line.266"></a>
<span class="sourceLineNo">267</span>            sample.addValue(generator.nextDouble());<a name="line.267"></a>
<span class="sourceLineNo">268</span>        }<a name="line.268"></a>
<span class="sourceLineNo">269</span>        Assert.assertEquals("Note: This test will fail randomly about 1 in 100 times.",<a name="line.269"></a>
<span class="sourceLineNo">270</span>                0.5, sample.getMean(), FastMath.sqrt(N/12.0) * 2.576);<a name="line.270"></a>
<span class="sourceLineNo">271</span>        Assert.assertEquals(1.0 / (2.0 * FastMath.sqrt(3.0)),<a name="line.271"></a>
<span class="sourceLineNo">272</span>                     sample.getStandardDeviation(), 0.01);<a name="line.272"></a>
<span class="sourceLineNo">273</span>    }<a name="line.273"></a>
<span class="sourceLineNo">274</span><a name="line.274"></a>
<span class="sourceLineNo">275</span>    @Test<a name="line.275"></a>
<span class="sourceLineNo">276</span>    public void testFloatDirect() {<a name="line.276"></a>
<span class="sourceLineNo">277</span>        SummaryStatistics sample = new SummaryStatistics();<a name="line.277"></a>
<span class="sourceLineNo">278</span>        final int N = 1000;<a name="line.278"></a>
<span class="sourceLineNo">279</span>        for (int i = 0; i &lt; N; ++i) {<a name="line.279"></a>
<span class="sourceLineNo">280</span>            sample.addValue(generator.nextFloat());<a name="line.280"></a>
<span class="sourceLineNo">281</span>        }<a name="line.281"></a>
<span class="sourceLineNo">282</span>        Assert.assertEquals("Note: This test will fail randomly about 1 in 100 times.",<a name="line.282"></a>
<span class="sourceLineNo">283</span>                0.5, sample.getMean(), FastMath.sqrt(N/12.0) * 2.576);<a name="line.283"></a>
<span class="sourceLineNo">284</span>        Assert.assertEquals(1.0 / (2.0 * FastMath.sqrt(3.0)),<a name="line.284"></a>
<span class="sourceLineNo">285</span>                     sample.getStandardDeviation(), 0.01);<a name="line.285"></a>
<span class="sourceLineNo">286</span>    }<a name="line.286"></a>
<span class="sourceLineNo">287</span><a name="line.287"></a>
<span class="sourceLineNo">288</span>    @Test(expected=MathIllegalArgumentException.class)<a name="line.288"></a>
<span class="sourceLineNo">289</span>    public void testNextIntNeg() {<a name="line.289"></a>
<span class="sourceLineNo">290</span>        generator.nextInt(-1);<a name="line.290"></a>
<span class="sourceLineNo">291</span>    }<a name="line.291"></a>
<span class="sourceLineNo">292</span><a name="line.292"></a>
<span class="sourceLineNo">293</span>    @Test<a name="line.293"></a>
<span class="sourceLineNo">294</span>    public void testNextInt2() {<a name="line.294"></a>
<span class="sourceLineNo">295</span>        int walk = 0;<a name="line.295"></a>
<span class="sourceLineNo">296</span>        final int N = 10000;<a name="line.296"></a>
<span class="sourceLineNo">297</span>        for (int k = 0; k &lt; N; ++k) {<a name="line.297"></a>
<span class="sourceLineNo">298</span>           if (generator.nextInt() &gt;= 0) {<a name="line.298"></a>
<span class="sourceLineNo">299</span>               ++walk;<a name="line.299"></a>
<span class="sourceLineNo">300</span>           } else {<a name="line.300"></a>
<span class="sourceLineNo">301</span>               --walk;<a name="line.301"></a>
<span class="sourceLineNo">302</span>           }<a name="line.302"></a>
<span class="sourceLineNo">303</span>        }<a name="line.303"></a>
<span class="sourceLineNo">304</span>        Assert.assertTrue("Walked too far astray: " + walk + "\nNote: This " +<a name="line.304"></a>
<span class="sourceLineNo">305</span>                "test will fail randomly about 1 in 100 times.",<a name="line.305"></a>
<span class="sourceLineNo">306</span>                FastMath.abs(walk) &lt; FastMath.sqrt(N) * 2.576);<a name="line.306"></a>
<span class="sourceLineNo">307</span>    }<a name="line.307"></a>
<span class="sourceLineNo">308</span><a name="line.308"></a>
<span class="sourceLineNo">309</span>    @Test<a name="line.309"></a>
<span class="sourceLineNo">310</span>    public void testNextLong2() {<a name="line.310"></a>
<span class="sourceLineNo">311</span>        int walk = 0;<a name="line.311"></a>
<span class="sourceLineNo">312</span>        final int N = 1000;<a name="line.312"></a>
<span class="sourceLineNo">313</span>        for (int k = 0; k &lt; N; ++k) {<a name="line.313"></a>
<span class="sourceLineNo">314</span>           if (generator.nextLong() &gt;= 0) {<a name="line.314"></a>
<span class="sourceLineNo">315</span>               ++walk;<a name="line.315"></a>
<span class="sourceLineNo">316</span>           } else {<a name="line.316"></a>
<span class="sourceLineNo">317</span>               --walk;<a name="line.317"></a>
<span class="sourceLineNo">318</span>           }<a name="line.318"></a>
<span class="sourceLineNo">319</span>        }<a name="line.319"></a>
<span class="sourceLineNo">320</span>        Assert.assertTrue("Walked too far astray: " + walk + "\nNote: This " +<a name="line.320"></a>
<span class="sourceLineNo">321</span>                "test will fail randomly about 1 in 100 times.",<a name="line.321"></a>
<span class="sourceLineNo">322</span>                FastMath.abs(walk) &lt; FastMath.sqrt(N) * 2.576);<a name="line.322"></a>
<span class="sourceLineNo">323</span>    }<a name="line.323"></a>
<span class="sourceLineNo">324</span><a name="line.324"></a>
<span class="sourceLineNo">325</span>    @Test<a name="line.325"></a>
<span class="sourceLineNo">326</span>    public void testNexBoolean2() {<a name="line.326"></a>
<span class="sourceLineNo">327</span>        int walk = 0;<a name="line.327"></a>
<span class="sourceLineNo">328</span>        final int N = 10000;<a name="line.328"></a>
<span class="sourceLineNo">329</span>        for (int k = 0; k &lt; N; ++k) {<a name="line.329"></a>
<span class="sourceLineNo">330</span>           if (generator.nextBoolean()) {<a name="line.330"></a>
<span class="sourceLineNo">331</span>               ++walk;<a name="line.331"></a>
<span class="sourceLineNo">332</span>           } else {<a name="line.332"></a>
<span class="sourceLineNo">333</span>               --walk;<a name="line.333"></a>
<span class="sourceLineNo">334</span>           }<a name="line.334"></a>
<span class="sourceLineNo">335</span>        }<a name="line.335"></a>
<span class="sourceLineNo">336</span>        Assert.assertTrue("Walked too far astray: " + walk + "\nNote: This " +<a name="line.336"></a>
<span class="sourceLineNo">337</span>                "test will fail randomly about 1 in 100 times.",<a name="line.337"></a>
<span class="sourceLineNo">338</span>                FastMath.abs(walk) &lt; FastMath.sqrt(N) * 2.576);<a name="line.338"></a>
<span class="sourceLineNo">339</span>    }<a name="line.339"></a>
<span class="sourceLineNo">340</span><a name="line.340"></a>
<span class="sourceLineNo">341</span>    @Test<a name="line.341"></a>
<span class="sourceLineNo">342</span>    public void testNexBytes() {<a name="line.342"></a>
<span class="sourceLineNo">343</span>        long[] count = new long[256];<a name="line.343"></a>
<span class="sourceLineNo">344</span>        byte[] bytes = new byte[10];<a name="line.344"></a>
<span class="sourceLineNo">345</span>        double[] expected = new double[256];<a name="line.345"></a>
<span class="sourceLineNo">346</span>        final int sampleSize = 100000;<a name="line.346"></a>
<span class="sourceLineNo">347</span><a name="line.347"></a>
<span class="sourceLineNo">348</span>        for (int i = 0; i &lt; 256; i++) {<a name="line.348"></a>
<span class="sourceLineNo">349</span>            expected[i] = (double) sampleSize / 265f;<a name="line.349"></a>
<span class="sourceLineNo">350</span>        }<a name="line.350"></a>
<span class="sourceLineNo">351</span><a name="line.351"></a>
<span class="sourceLineNo">352</span>        for (int k = 0; k &lt; sampleSize; ++k) {<a name="line.352"></a>
<span class="sourceLineNo">353</span>           generator.nextBytes(bytes);<a name="line.353"></a>
<span class="sourceLineNo">354</span>           for (byte b : bytes) {<a name="line.354"></a>
<span class="sourceLineNo">355</span>               ++count[b + 128];<a name="line.355"></a>
<span class="sourceLineNo">356</span>           }<a name="line.356"></a>
<span class="sourceLineNo">357</span>        }<a name="line.357"></a>
<span class="sourceLineNo">358</span><a name="line.358"></a>
<span class="sourceLineNo">359</span>        TestUtils.assertChiSquareAccept(expected, count, 0.001);<a name="line.359"></a>
<span class="sourceLineNo">360</span><a name="line.360"></a>
<span class="sourceLineNo">361</span>    }<a name="line.361"></a>
<span class="sourceLineNo">362</span><a name="line.362"></a>
<span class="sourceLineNo">363</span>    @Test<a name="line.363"></a>
<span class="sourceLineNo">364</span>    public void testSeeding() {<a name="line.364"></a>
<span class="sourceLineNo">365</span>        // makeGenerator initializes with fixed seed<a name="line.365"></a>
<span class="sourceLineNo">366</span>        RandomGenerator gen = makeGenerator();<a name="line.366"></a>
<span class="sourceLineNo">367</span>        RandomGenerator gen1 = makeGenerator();<a name="line.367"></a>
<span class="sourceLineNo">368</span>        checkSameSequence(gen, gen1);<a name="line.368"></a>
<span class="sourceLineNo">369</span>        // reseed, but recreate the second one<a name="line.369"></a>
<span class="sourceLineNo">370</span>        // verifies MATH-723<a name="line.370"></a>
<span class="sourceLineNo">371</span>        gen.setSeed(100);<a name="line.371"></a>
<span class="sourceLineNo">372</span>        gen1 = makeGenerator();<a name="line.372"></a>
<span class="sourceLineNo">373</span>        gen1.setSeed(100);<a name="line.373"></a>
<span class="sourceLineNo">374</span>        checkSameSequence(gen, gen1);<a name="line.374"></a>
<span class="sourceLineNo">375</span>    }<a name="line.375"></a>
<span class="sourceLineNo">376</span><a name="line.376"></a>
<span class="sourceLineNo">377</span>    private void checkSameSequence(RandomGenerator gen1, RandomGenerator gen2) {<a name="line.377"></a>
<span class="sourceLineNo">378</span>        final int len = 11;  // Needs to be an odd number to check MATH-723<a name="line.378"></a>
<span class="sourceLineNo">379</span>        final double[][] values = new double[2][len];<a name="line.379"></a>
<span class="sourceLineNo">380</span>        for (int i = 0; i &lt; len; i++) {<a name="line.380"></a>
<span class="sourceLineNo">381</span>            values[0][i] = gen1.nextDouble();<a name="line.381"></a>
<span class="sourceLineNo">382</span>        }<a name="line.382"></a>
<span class="sourceLineNo">383</span>        for (int i = 0; i &lt; len; i++) {<a name="line.383"></a>
<span class="sourceLineNo">384</span>            values[1][i] = gen2.nextDouble();<a name="line.384"></a>
<span class="sourceLineNo">385</span>        }<a name="line.385"></a>
<span class="sourceLineNo">386</span>        Assert.assertTrue(Arrays.equals(values[0], values[1]));<a name="line.386"></a>
<span class="sourceLineNo">387</span>        for (int i = 0; i &lt; len; i++) {<a name="line.387"></a>
<span class="sourceLineNo">388</span>            values[0][i] = gen1.nextFloat();<a name="line.388"></a>
<span class="sourceLineNo">389</span>        }<a name="line.389"></a>
<span class="sourceLineNo">390</span>        for (int i = 0; i &lt; len; i++) {<a name="line.390"></a>
<span class="sourceLineNo">391</span>            values[1][i] = gen2.nextFloat();<a name="line.391"></a>
<span class="sourceLineNo">392</span>        }<a name="line.392"></a>
<span class="sourceLineNo">393</span>        Assert.assertTrue(Arrays.equals(values[0], values[1]));<a name="line.393"></a>
<span class="sourceLineNo">394</span>        for (int i = 0; i &lt; len; i++) {<a name="line.394"></a>
<span class="sourceLineNo">395</span>            values[0][i] = gen1.nextInt();<a name="line.395"></a>
<span class="sourceLineNo">396</span>        }<a name="line.396"></a>
<span class="sourceLineNo">397</span>        for (int i = 0; i &lt; len; i++) {<a name="line.397"></a>
<span class="sourceLineNo">398</span>            values[1][i] = gen2.nextInt();<a name="line.398"></a>
<span class="sourceLineNo">399</span>        }<a name="line.399"></a>
<span class="sourceLineNo">400</span>        Assert.assertTrue(Arrays.equals(values[0], values[1]));<a name="line.400"></a>
<span class="sourceLineNo">401</span>        for (int i = 0; i &lt; len; i++) {<a name="line.401"></a>
<span class="sourceLineNo">402</span>            values[0][i] = gen1.nextLong();<a name="line.402"></a>
<span class="sourceLineNo">403</span>        }<a name="line.403"></a>
<span class="sourceLineNo">404</span>        for (int i = 0; i &lt; len; i++) {<a name="line.404"></a>
<span class="sourceLineNo">405</span>            values[1][i] = gen2.nextLong();<a name="line.405"></a>
<span class="sourceLineNo">406</span>        }<a name="line.406"></a>
<span class="sourceLineNo">407</span>        Assert.assertTrue(Arrays.equals(values[0], values[1]));<a name="line.407"></a>
<span class="sourceLineNo">408</span>        for (int i = 0; i &lt; len; i++) {<a name="line.408"></a>
<span class="sourceLineNo">409</span>            values[0][i] = gen1.nextInt(len);<a name="line.409"></a>
<span class="sourceLineNo">410</span>        }<a name="line.410"></a>
<span class="sourceLineNo">411</span>        for (int i = 0; i &lt; len; i++) {<a name="line.411"></a>
<span class="sourceLineNo">412</span>            values[1][i] = gen2.nextInt(len);<a name="line.412"></a>
<span class="sourceLineNo">413</span>        }<a name="line.413"></a>
<span class="sourceLineNo">414</span>        Assert.assertTrue(Arrays.equals(values[0], values[1]));<a name="line.414"></a>
<span class="sourceLineNo">415</span>        for (int i = 0; i &lt; len; i++) {<a name="line.415"></a>
<span class="sourceLineNo">416</span>            values[0][i] = gen1.nextBoolean() ? 1 : 0;<a name="line.416"></a>
<span class="sourceLineNo">417</span>        }<a name="line.417"></a>
<span class="sourceLineNo">418</span>        for (int i = 0; i &lt; len; i++) {<a name="line.418"></a>
<span class="sourceLineNo">419</span>            values[1][i] = gen2.nextBoolean() ? 1 : 0;<a name="line.419"></a>
<span class="sourceLineNo">420</span>        }<a name="line.420"></a>
<span class="sourceLineNo">421</span>        Assert.assertTrue(Arrays.equals(values[0], values[1]));<a name="line.421"></a>
<span class="sourceLineNo">422</span>        for (int i = 0; i &lt; len; i++) {<a name="line.422"></a>
<span class="sourceLineNo">423</span>            values[0][i] = gen1.nextGaussian();<a name="line.423"></a>
<span class="sourceLineNo">424</span>        }<a name="line.424"></a>
<span class="sourceLineNo">425</span>        for (int i = 0; i &lt; len; i++) {<a name="line.425"></a>
<span class="sourceLineNo">426</span>            values[1][i] = gen2.nextGaussian();<a name="line.426"></a>
<span class="sourceLineNo">427</span>        }<a name="line.427"></a>
<span class="sourceLineNo">428</span>        Assert.assertTrue(Arrays.equals(values[0], values[1]));<a name="line.428"></a>
<span class="sourceLineNo">429</span>    }<a name="line.429"></a>
<span class="sourceLineNo">430</span><a name="line.430"></a>
<span class="sourceLineNo">431</span>}<a name="line.431"></a>




























































</pre>
</div>
</body>
</html>
