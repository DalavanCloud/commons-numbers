<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span>package org.apache.commons.math3.geometry.partitioning.utilities;<a name="line.17"></a>
<span class="sourceLineNo">018</span><a name="line.18"></a>
<span class="sourceLineNo">019</span>import org.apache.commons.math3.geometry.partitioning.utilities.AVLTree;<a name="line.19"></a>
<span class="sourceLineNo">020</span>import org.junit.Assert;<a name="line.20"></a>
<span class="sourceLineNo">021</span>import org.junit.Test;<a name="line.21"></a>
<span class="sourceLineNo">022</span><a name="line.22"></a>
<span class="sourceLineNo">023</span>@Deprecated<a name="line.23"></a>
<span class="sourceLineNo">024</span>public class AVLTreeTest {<a name="line.24"></a>
<span class="sourceLineNo">025</span><a name="line.25"></a>
<span class="sourceLineNo">026</span>    @Test<a name="line.26"></a>
<span class="sourceLineNo">027</span>    public void testInsert() {<a name="line.27"></a>
<span class="sourceLineNo">028</span>        // this array in this order allows to pass in all branches<a name="line.28"></a>
<span class="sourceLineNo">029</span>        // of the insertion algorithm<a name="line.29"></a>
<span class="sourceLineNo">030</span>        int[] array = { 16, 13, 15, 14,  2,  0, 12,  9,  8,  5,<a name="line.30"></a>
<span class="sourceLineNo">031</span>            11, 18, 19, 17,  4,  7,  1,  3,  6, 10 };<a name="line.31"></a>
<span class="sourceLineNo">032</span>        AVLTree&lt;Integer&gt; tree = buildTree(array);<a name="line.32"></a>
<span class="sourceLineNo">033</span><a name="line.33"></a>
<span class="sourceLineNo">034</span>        Assert.assertEquals(array.length, tree.size());<a name="line.34"></a>
<span class="sourceLineNo">035</span><a name="line.35"></a>
<span class="sourceLineNo">036</span>        for (int i = 0; i &lt; array.length; ++i) {<a name="line.36"></a>
<span class="sourceLineNo">037</span>            Assert.assertEquals(array[i], value(tree.getNotSmaller(new Integer(array[i]))));<a name="line.37"></a>
<span class="sourceLineNo">038</span>        }<a name="line.38"></a>
<span class="sourceLineNo">039</span><a name="line.39"></a>
<span class="sourceLineNo">040</span>        checkOrder(tree);<a name="line.40"></a>
<span class="sourceLineNo">041</span><a name="line.41"></a>
<span class="sourceLineNo">042</span>    }<a name="line.42"></a>
<span class="sourceLineNo">043</span><a name="line.43"></a>
<span class="sourceLineNo">044</span>    @Test<a name="line.44"></a>
<span class="sourceLineNo">045</span>    public void testDelete1() {<a name="line.45"></a>
<span class="sourceLineNo">046</span>        int[][][] arrays = {<a name="line.46"></a>
<span class="sourceLineNo">047</span>            { { 16, 13, 15, 14, 2, 0, 12, 9, 8, 5, 11, 18, 19, 17, 4, 7, 1, 3, 6, 10 },<a name="line.47"></a>
<span class="sourceLineNo">048</span>                { 11, 10, 9, 12, 16, 15, 13, 18, 5, 0, 3, 2, 14, 6, 19, 17, 8, 4, 7, 1 } },<a name="line.48"></a>
<span class="sourceLineNo">049</span>                { { 16, 13, 15, 14, 2, 0, 12, 9, 8, 5, 11, 18, 19, 17, 4, 7, 1, 3, 6, 10 },<a name="line.49"></a>
<span class="sourceLineNo">050</span>                    { 0, 17, 14, 15, 16, 18,  6 } },<a name="line.50"></a>
<span class="sourceLineNo">051</span>                    { { 6, 2, 7, 8, 1, 4, 3, 5 }, { 8 } },<a name="line.51"></a>
<span class="sourceLineNo">052</span>                    { { 6, 2, 7, 8, 1, 4, 5 }, { 8 } },<a name="line.52"></a>
<span class="sourceLineNo">053</span>                    { { 3, 7, 2, 1, 5, 8, 4 }, { 1 } },<a name="line.53"></a>
<span class="sourceLineNo">054</span>                    { { 3, 7, 2, 1, 5, 8, 6 }, { 1 } }<a name="line.54"></a>
<span class="sourceLineNo">055</span>        };<a name="line.55"></a>
<span class="sourceLineNo">056</span>        for (int i = 0; i &lt; arrays.length; ++i) {<a name="line.56"></a>
<span class="sourceLineNo">057</span>            AVLTree&lt;Integer&gt; tree = buildTree(arrays[i][0]);<a name="line.57"></a>
<span class="sourceLineNo">058</span>            Assert.assertTrue(! tree.delete(new Integer(-2000)));<a name="line.58"></a>
<span class="sourceLineNo">059</span>            for (int j = 0; j &lt; arrays[i][1].length; ++j) {<a name="line.59"></a>
<span class="sourceLineNo">060</span>                Assert.assertTrue(tree.delete(tree.getNotSmaller(new Integer(arrays[i][1][j])).getElement()));<a name="line.60"></a>
<span class="sourceLineNo">061</span>                Assert.assertEquals(arrays[i][0].length - j - 1, tree.size());<a name="line.61"></a>
<span class="sourceLineNo">062</span>            }<a name="line.62"></a>
<span class="sourceLineNo">063</span>        }<a name="line.63"></a>
<span class="sourceLineNo">064</span>    }<a name="line.64"></a>
<span class="sourceLineNo">065</span><a name="line.65"></a>
<span class="sourceLineNo">066</span>    @Test<a name="line.66"></a>
<span class="sourceLineNo">067</span>    public void testNavigation() {<a name="line.67"></a>
<span class="sourceLineNo">068</span>        int[] array = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };<a name="line.68"></a>
<span class="sourceLineNo">069</span>        AVLTree&lt;Integer&gt; tree = buildTree(array);<a name="line.69"></a>
<span class="sourceLineNo">070</span><a name="line.70"></a>
<span class="sourceLineNo">071</span>        AVLTree&lt;Integer&gt;.Node node = tree.getSmallest();<a name="line.71"></a>
<span class="sourceLineNo">072</span>        Assert.assertEquals(array[0], value(node));<a name="line.72"></a>
<span class="sourceLineNo">073</span>        for (int i = 0; i &lt; array.length; ++i) {<a name="line.73"></a>
<span class="sourceLineNo">074</span>            Assert.assertEquals(array[i], value(node));<a name="line.74"></a>
<span class="sourceLineNo">075</span>            node = node.getNext();<a name="line.75"></a>
<span class="sourceLineNo">076</span>        }<a name="line.76"></a>
<span class="sourceLineNo">077</span>        Assert.assertNull(node);<a name="line.77"></a>
<span class="sourceLineNo">078</span><a name="line.78"></a>
<span class="sourceLineNo">079</span>        node = tree.getLargest();<a name="line.79"></a>
<span class="sourceLineNo">080</span>        Assert.assertEquals(array[array.length - 1], value(node));<a name="line.80"></a>
<span class="sourceLineNo">081</span>        for (int i = array.length - 1; i &gt;= 0; --i) {<a name="line.81"></a>
<span class="sourceLineNo">082</span>            Assert.assertEquals(array[i], value(node));<a name="line.82"></a>
<span class="sourceLineNo">083</span>            node = node.getPrevious();<a name="line.83"></a>
<span class="sourceLineNo">084</span>        }<a name="line.84"></a>
<span class="sourceLineNo">085</span>        Assert.assertNull(node);<a name="line.85"></a>
<span class="sourceLineNo">086</span><a name="line.86"></a>
<span class="sourceLineNo">087</span>        checkOrder(tree);<a name="line.87"></a>
<span class="sourceLineNo">088</span><a name="line.88"></a>
<span class="sourceLineNo">089</span>    }<a name="line.89"></a>
<span class="sourceLineNo">090</span><a name="line.90"></a>
<span class="sourceLineNo">091</span>    @Test<a name="line.91"></a>
<span class="sourceLineNo">092</span>    public void testSearch() {<a name="line.92"></a>
<span class="sourceLineNo">093</span>        int[] array = { 2, 4, 6, 8, 10, 12, 14 };<a name="line.93"></a>
<span class="sourceLineNo">094</span>        AVLTree&lt;Integer&gt; tree = buildTree(array);<a name="line.94"></a>
<span class="sourceLineNo">095</span><a name="line.95"></a>
<span class="sourceLineNo">096</span>        Assert.assertNull(tree.getNotLarger(new Integer(array[0] - 1)));<a name="line.96"></a>
<span class="sourceLineNo">097</span>        Assert.assertNull(tree.getNotSmaller(new Integer(array[array.length - 1] + 1)));<a name="line.97"></a>
<span class="sourceLineNo">098</span><a name="line.98"></a>
<span class="sourceLineNo">099</span>        for (int i = 0; i &lt; array.length; ++i) {<a name="line.99"></a>
<span class="sourceLineNo">100</span>            Assert.assertEquals(array[i],<a name="line.100"></a>
<span class="sourceLineNo">101</span>                                value(tree.getNotSmaller(new Integer(array[i] - 1))));<a name="line.101"></a>
<span class="sourceLineNo">102</span>            Assert.assertEquals(array[i],<a name="line.102"></a>
<span class="sourceLineNo">103</span>                                value(tree.getNotLarger(new Integer(array[i] + 1))));<a name="line.103"></a>
<span class="sourceLineNo">104</span>        }<a name="line.104"></a>
<span class="sourceLineNo">105</span><a name="line.105"></a>
<span class="sourceLineNo">106</span>        checkOrder(tree);<a name="line.106"></a>
<span class="sourceLineNo">107</span><a name="line.107"></a>
<span class="sourceLineNo">108</span>    }<a name="line.108"></a>
<span class="sourceLineNo">109</span><a name="line.109"></a>
<span class="sourceLineNo">110</span>    @Test<a name="line.110"></a>
<span class="sourceLineNo">111</span>    public void testRepetition() {<a name="line.111"></a>
<span class="sourceLineNo">112</span>        int[] array = { 1, 1, 3, 3, 4, 5, 6, 7, 7, 7, 7, 7 };<a name="line.112"></a>
<span class="sourceLineNo">113</span>        AVLTree&lt;Integer&gt; tree = buildTree(array);<a name="line.113"></a>
<span class="sourceLineNo">114</span>        Assert.assertEquals(array.length, tree.size());<a name="line.114"></a>
<span class="sourceLineNo">115</span><a name="line.115"></a>
<span class="sourceLineNo">116</span>        AVLTree&lt;Integer&gt;.Node node = tree.getNotSmaller(new Integer(3));<a name="line.116"></a>
<span class="sourceLineNo">117</span>        Assert.assertEquals(3, value(node));<a name="line.117"></a>
<span class="sourceLineNo">118</span>        Assert.assertEquals(1, value(node.getPrevious()));<a name="line.118"></a>
<span class="sourceLineNo">119</span>        Assert.assertEquals(3, value(node.getNext()));<a name="line.119"></a>
<span class="sourceLineNo">120</span>        Assert.assertEquals(4, value(node.getNext().getNext()));<a name="line.120"></a>
<span class="sourceLineNo">121</span><a name="line.121"></a>
<span class="sourceLineNo">122</span>        node = tree.getNotLarger(new Integer(2));<a name="line.122"></a>
<span class="sourceLineNo">123</span>        Assert.assertEquals(1, value(node));<a name="line.123"></a>
<span class="sourceLineNo">124</span>        Assert.assertEquals(1, value(node.getPrevious()));<a name="line.124"></a>
<span class="sourceLineNo">125</span>        Assert.assertEquals(3, value(node.getNext()));<a name="line.125"></a>
<span class="sourceLineNo">126</span>        Assert.assertNull(node.getPrevious().getPrevious());<a name="line.126"></a>
<span class="sourceLineNo">127</span><a name="line.127"></a>
<span class="sourceLineNo">128</span>        AVLTree&lt;Integer&gt;.Node otherNode = tree.getNotSmaller(new Integer(1));<a name="line.128"></a>
<span class="sourceLineNo">129</span>        Assert.assertTrue(node != otherNode);<a name="line.129"></a>
<span class="sourceLineNo">130</span>        Assert.assertEquals(1, value(otherNode));<a name="line.130"></a>
<span class="sourceLineNo">131</span>        Assert.assertNull(otherNode.getPrevious());<a name="line.131"></a>
<span class="sourceLineNo">132</span><a name="line.132"></a>
<span class="sourceLineNo">133</span>        node = tree.getNotLarger(new Integer(10));<a name="line.133"></a>
<span class="sourceLineNo">134</span>        Assert.assertEquals(7, value(node));<a name="line.134"></a>
<span class="sourceLineNo">135</span>        Assert.assertNull(node.getNext());<a name="line.135"></a>
<span class="sourceLineNo">136</span>        node = node.getPrevious();<a name="line.136"></a>
<span class="sourceLineNo">137</span>        Assert.assertEquals(7, value(node));<a name="line.137"></a>
<span class="sourceLineNo">138</span>        node = node.getPrevious();<a name="line.138"></a>
<span class="sourceLineNo">139</span>        Assert.assertEquals(7, value(node));<a name="line.139"></a>
<span class="sourceLineNo">140</span>        node = node.getPrevious();<a name="line.140"></a>
<span class="sourceLineNo">141</span>        Assert.assertEquals(7, value(node));<a name="line.141"></a>
<span class="sourceLineNo">142</span>        node = node.getPrevious();<a name="line.142"></a>
<span class="sourceLineNo">143</span>        Assert.assertEquals(7, value(node));<a name="line.143"></a>
<span class="sourceLineNo">144</span>        node = node.getPrevious();<a name="line.144"></a>
<span class="sourceLineNo">145</span>        Assert.assertEquals(6, value(node));<a name="line.145"></a>
<span class="sourceLineNo">146</span><a name="line.146"></a>
<span class="sourceLineNo">147</span>        checkOrder(tree);<a name="line.147"></a>
<span class="sourceLineNo">148</span><a name="line.148"></a>
<span class="sourceLineNo">149</span>    }<a name="line.149"></a>
<span class="sourceLineNo">150</span><a name="line.150"></a>
<span class="sourceLineNo">151</span>    private AVLTree&lt;Integer&gt; buildTree(int[] array) {<a name="line.151"></a>
<span class="sourceLineNo">152</span>        AVLTree&lt;Integer&gt; tree = new AVLTree&lt;Integer&gt;();<a name="line.152"></a>
<span class="sourceLineNo">153</span>        for (int i = 0; i &lt; array.length; ++i) {<a name="line.153"></a>
<span class="sourceLineNo">154</span>            tree.insert(new Integer(array[i]));<a name="line.154"></a>
<span class="sourceLineNo">155</span>            tree.insert(null);<a name="line.155"></a>
<span class="sourceLineNo">156</span>        }<a name="line.156"></a>
<span class="sourceLineNo">157</span>        return tree;<a name="line.157"></a>
<span class="sourceLineNo">158</span>    }<a name="line.158"></a>
<span class="sourceLineNo">159</span><a name="line.159"></a>
<span class="sourceLineNo">160</span>    private int value(AVLTree&lt;Integer&gt;.Node node) {<a name="line.160"></a>
<span class="sourceLineNo">161</span>        return node.getElement().intValue();<a name="line.161"></a>
<span class="sourceLineNo">162</span>    }<a name="line.162"></a>
<span class="sourceLineNo">163</span><a name="line.163"></a>
<span class="sourceLineNo">164</span>    private void checkOrder(AVLTree&lt;Integer&gt; tree) {<a name="line.164"></a>
<span class="sourceLineNo">165</span>        AVLTree&lt;Integer&gt;.Node next = null;<a name="line.165"></a>
<span class="sourceLineNo">166</span>        for (AVLTree&lt;Integer&gt;.Node node = tree.getSmallest();<a name="line.166"></a>
<span class="sourceLineNo">167</span>        node != null;<a name="line.167"></a>
<span class="sourceLineNo">168</span>        node = next) {<a name="line.168"></a>
<span class="sourceLineNo">169</span>            next = node.getNext();<a name="line.169"></a>
<span class="sourceLineNo">170</span>            if (next != null) {<a name="line.170"></a>
<span class="sourceLineNo">171</span>                Assert.assertTrue(node.getElement().compareTo(next.getElement()) &lt;= 0);<a name="line.171"></a>
<span class="sourceLineNo">172</span>            }<a name="line.172"></a>
<span class="sourceLineNo">173</span>        }<a name="line.173"></a>
<span class="sourceLineNo">174</span>    }<a name="line.174"></a>
<span class="sourceLineNo">175</span><a name="line.175"></a>
<span class="sourceLineNo">176</span>}<a name="line.176"></a>




























































</pre>
</div>
</body>
</html>
