<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>UnivariateStatisticAbstractTest xref</title>
<link type="text/css" rel="stylesheet" href="../../../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../testapidocs/org/apache/commons/math3/stat/descriptive/UnivariateStatisticAbstractTest.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Licensed to the Apache Software Foundation (ASF) under one or more</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> * contributor license agreements.  See the NOTICE file distributed with</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * this work for additional information regarding copyright ownership.</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * The ASF licenses this file to You under the Apache License, Version 2.0</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * (the "License"); you may not use this file except in compliance with</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> * the License.  You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *      <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment">s * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">package</strong> org.apache.commons.math3.stat.descriptive;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <strong class="jxr_keyword">import</strong> java.util.ArrayList;
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> java.util.List;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.TestUtils;
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.distribution.IntegerDistribution;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.distribution.UniformIntegerDistribution;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.distribution.RealDistribution;
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.distribution.NormalDistribution;
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.util.FastMath;
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <strong class="jxr_keyword">import</strong> org.junit.Assert;
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <strong class="jxr_keyword">import</strong> org.junit.Test;
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <em class="jxr_javadoccomment"> * Test cases for the {@link UnivariateStatistic} class.</em>
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">abstract</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../../org/apache/commons/math3/stat/descriptive/UnivariateStatisticAbstractTest.html">UnivariateStatisticAbstractTest</a> {
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  
<a class="jxr_linenumber" name="L37" href="#L37">37</a>      <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">double</strong> mean = 12.404545454545455d;
<a class="jxr_linenumber" name="L38" href="#L38">38</a>      <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">double</strong> geoMean = 12.070589161633011d;
<a class="jxr_linenumber" name="L39" href="#L39">39</a>  
<a class="jxr_linenumber" name="L40" href="#L40">40</a>      <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">double</strong> <strong class="jxr_keyword">var</strong> = 10.00235930735931d;
<a class="jxr_linenumber" name="L41" href="#L41">41</a>      <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">double</strong> std = FastMath.sqrt(<strong class="jxr_keyword">var</strong>);
<a class="jxr_linenumber" name="L42" href="#L42">42</a>      <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">double</strong> skew = 1.437423729196190d;
<a class="jxr_linenumber" name="L43" href="#L43">43</a>      <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">double</strong> kurt = 2.377191264804700d;
<a class="jxr_linenumber" name="L44" href="#L44">44</a>  
<a class="jxr_linenumber" name="L45" href="#L45">45</a>      <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">double</strong> min = 8.2d;
<a class="jxr_linenumber" name="L46" href="#L46">46</a>      <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">double</strong> max = 21d;
<a class="jxr_linenumber" name="L47" href="#L47">47</a>      <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">double</strong> median = 12d;
<a class="jxr_linenumber" name="L48" href="#L48">48</a>      <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">double</strong> percentile5 = 8.29d;
<a class="jxr_linenumber" name="L49" href="#L49">49</a>      <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">double</strong> percentile95 = 20.82d;
<a class="jxr_linenumber" name="L50" href="#L50">50</a>  
<a class="jxr_linenumber" name="L51" href="#L51">51</a>      <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">double</strong> product = 628096400563833396009676.9200400128d;
<a class="jxr_linenumber" name="L52" href="#L52">52</a>      <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">double</strong> sumLog = 54.7969806116451507d;
<a class="jxr_linenumber" name="L53" href="#L53">53</a>      <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">double</strong> sumSq = 3595.250d;
<a class="jxr_linenumber" name="L54" href="#L54">54</a>      <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">double</strong> sum = 272.90d;
<a class="jxr_linenumber" name="L55" href="#L55">55</a>      <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">double</strong> secondMoment = 210.04954545454547d;
<a class="jxr_linenumber" name="L56" href="#L56">56</a>      <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">double</strong> thirdMoment = 868.0906859504136;
<a class="jxr_linenumber" name="L57" href="#L57">57</a>      <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">double</strong> fourthMoment = 9244.080993773481;
<a class="jxr_linenumber" name="L58" href="#L58">58</a>  
<a class="jxr_linenumber" name="L59" href="#L59">59</a>  
<a class="jxr_linenumber" name="L60" href="#L60">60</a>      <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">double</strong> weightedMean = 12.366995073891626d;
<a class="jxr_linenumber" name="L61" href="#L61">61</a>      <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">double</strong> weightedVar =   9.974760968886391d;
<a class="jxr_linenumber" name="L62" href="#L62">62</a>      <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">double</strong> weightedStd = FastMath.sqrt(weightedVar);
<a class="jxr_linenumber" name="L63" href="#L63">63</a>      <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">double</strong> weightedProduct = 8517647448765288000000d;
<a class="jxr_linenumber" name="L64" href="#L64">64</a>      <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">double</strong> weightedSum = 251.05d;
<a class="jxr_linenumber" name="L65" href="#L65">65</a>  
<a class="jxr_linenumber" name="L66" href="#L66">66</a>      <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">double</strong> tolerance = 10E-12;
<a class="jxr_linenumber" name="L67" href="#L67">67</a>  
<a class="jxr_linenumber" name="L68" href="#L68">68</a>      <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">double</strong>[] testArray =
<a class="jxr_linenumber" name="L69" href="#L69">69</a>          { 12.5, 12.0, 11.8, 14.2, 14.9, 14.5, 21.0,  8.2, 10.3, 11.3,
<a class="jxr_linenumber" name="L70" href="#L70">70</a>            14.1,  9.9, 12.2, 12.0, 12.1, 11.0, 19.8, 11.0, 10.0,  8.8,
<a class="jxr_linenumber" name="L71" href="#L71">71</a>             9.0, 12.3 };
<a class="jxr_linenumber" name="L72" href="#L72">72</a>  
<a class="jxr_linenumber" name="L73" href="#L73">73</a>      <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">double</strong>[] testWeightsArray =
<a class="jxr_linenumber" name="L74" href="#L74">74</a>          {  1.5,  0.8,  1.2,  0.4,  0.8,  1.8,  1.2,  1.1,  1.0,  0.7,
<a class="jxr_linenumber" name="L75" href="#L75">75</a>             1.3,  0.6,  0.7,  1.3,  0.7,  1.0,  0.4,  0.1,  1.4,  0.9,
<a class="jxr_linenumber" name="L76" href="#L76">76</a>             1.1,  0.3 };
<a class="jxr_linenumber" name="L77" href="#L77">77</a>  
<a class="jxr_linenumber" name="L78" href="#L78">78</a>      <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">double</strong>[] identicalWeightsArray =
<a class="jxr_linenumber" name="L79" href="#L79">79</a>          {  0.5,  0.5,  0.5,  0.5,  0.5,  0.5,  0.5,  0.5,  0.5,  0.5,
<a class="jxr_linenumber" name="L80" href="#L80">80</a>             0.5,  0.5,  0.5,  0.5,  0.5,  0.5,  0.5,  0.5,  0.5,  0.5,
<a class="jxr_linenumber" name="L81" href="#L81">81</a>             0.5,  0.5 };
<a class="jxr_linenumber" name="L82" href="#L82">82</a>  
<a class="jxr_linenumber" name="L83" href="#L83">83</a>      <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">double</strong>[] unitWeightsArray =
<a class="jxr_linenumber" name="L84" href="#L84">84</a>          {  1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0,
<a class="jxr_linenumber" name="L85" href="#L85">85</a>             1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0,
<a class="jxr_linenumber" name="L86" href="#L86">86</a>             1.0,  1.0 };
<a class="jxr_linenumber" name="L87" href="#L87">87</a>  
<a class="jxr_linenumber" name="L88" href="#L88">88</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">abstract</strong> UnivariateStatistic getUnivariateStatistic();
<a class="jxr_linenumber" name="L89" href="#L89">89</a>  
<a class="jxr_linenumber" name="L90" href="#L90">90</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">abstract</strong> <strong class="jxr_keyword">double</strong> expectedValue();
<a class="jxr_linenumber" name="L91" href="#L91">91</a>  
<a class="jxr_linenumber" name="L92" href="#L92">92</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">double</strong> getTolerance() {
<a class="jxr_linenumber" name="L93" href="#L93">93</a>          <strong class="jxr_keyword">return</strong> tolerance;
<a class="jxr_linenumber" name="L94" href="#L94">94</a>      }
<a class="jxr_linenumber" name="L95" href="#L95">95</a>  
<a class="jxr_linenumber" name="L96" href="#L96">96</a>      @Test
<a class="jxr_linenumber" name="L97" href="#L97">97</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testEvaluation() {
<a class="jxr_linenumber" name="L98" href="#L98">98</a>          Assert.assertEquals(
<a class="jxr_linenumber" name="L99" href="#L99">99</a>              expectedValue(),
<a class="jxr_linenumber" name="L100" href="#L100">100</a>             getUnivariateStatistic().evaluate(testArray),
<a class="jxr_linenumber" name="L101" href="#L101">101</a>             getTolerance());
<a class="jxr_linenumber" name="L102" href="#L102">102</a>     }
<a class="jxr_linenumber" name="L103" href="#L103">103</a> 
<a class="jxr_linenumber" name="L104" href="#L104">104</a>     @Test
<a class="jxr_linenumber" name="L105" href="#L105">105</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testEvaluateArraySegment() {
<a class="jxr_linenumber" name="L106" href="#L106">106</a>         <strong class="jxr_keyword">final</strong> UnivariateStatistic stat = getUnivariateStatistic();
<a class="jxr_linenumber" name="L107" href="#L107">107</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] arrayZero = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[5];
<a class="jxr_linenumber" name="L108" href="#L108">108</a>         System.arraycopy(testArray, 0, arrayZero, 0, 5);
<a class="jxr_linenumber" name="L109" href="#L109">109</a>         Assert.assertEquals(stat.evaluate(arrayZero), stat.evaluate(testArray, 0, 5), 0);
<a class="jxr_linenumber" name="L110" href="#L110">110</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] arrayOne = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[5];
<a class="jxr_linenumber" name="L111" href="#L111">111</a>         System.arraycopy(testArray, 5, arrayOne, 0, 5);
<a class="jxr_linenumber" name="L112" href="#L112">112</a>         Assert.assertEquals(stat.evaluate(arrayOne), stat.evaluate(testArray, 5, 5), 0);
<a class="jxr_linenumber" name="L113" href="#L113">113</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] arrayEnd = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[5];
<a class="jxr_linenumber" name="L114" href="#L114">114</a>         System.arraycopy(testArray, testArray.length - 5, arrayEnd, 0, 5);
<a class="jxr_linenumber" name="L115" href="#L115">115</a>         Assert.assertEquals(stat.evaluate(arrayEnd), stat.evaluate(testArray, testArray.length - 5, 5), 0);
<a class="jxr_linenumber" name="L116" href="#L116">116</a>     }
<a class="jxr_linenumber" name="L117" href="#L117">117</a> 
<a class="jxr_linenumber" name="L118" href="#L118">118</a>     @Test
<a class="jxr_linenumber" name="L119" href="#L119">119</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testEvaluateArraySegmentWeighted() {
<a class="jxr_linenumber" name="L120" href="#L120">120</a>         <em class="jxr_comment">// See if this statistic computes weighted statistics</em>
<a class="jxr_linenumber" name="L121" href="#L121">121</a>         <em class="jxr_comment">// If not, skip this test</em>
<a class="jxr_linenumber" name="L122" href="#L122">122</a>         UnivariateStatistic statistic = getUnivariateStatistic();
<a class="jxr_linenumber" name="L123" href="#L123">123</a>         <strong class="jxr_keyword">if</strong> (!(statistic instanceof WeightedEvaluation)) {
<a class="jxr_linenumber" name="L124" href="#L124">124</a>             <strong class="jxr_keyword">return</strong>;
<a class="jxr_linenumber" name="L125" href="#L125">125</a>         }
<a class="jxr_linenumber" name="L126" href="#L126">126</a>         <strong class="jxr_keyword">final</strong> WeightedEvaluation stat = (WeightedEvaluation) getUnivariateStatistic();
<a class="jxr_linenumber" name="L127" href="#L127">127</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] arrayZero = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[5];
<a class="jxr_linenumber" name="L128" href="#L128">128</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] weightZero = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[5];
<a class="jxr_linenumber" name="L129" href="#L129">129</a>         System.arraycopy(testArray, 0, arrayZero, 0, 5);
<a class="jxr_linenumber" name="L130" href="#L130">130</a>         System.arraycopy(testWeightsArray, 0, weightZero, 0, 5);
<a class="jxr_linenumber" name="L131" href="#L131">131</a>         Assert.assertEquals(stat.evaluate(arrayZero, weightZero),
<a class="jxr_linenumber" name="L132" href="#L132">132</a>                 stat.evaluate(testArray, testWeightsArray, 0, 5), 0);
<a class="jxr_linenumber" name="L133" href="#L133">133</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] arrayOne = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[5];
<a class="jxr_linenumber" name="L134" href="#L134">134</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] weightOne = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[5];
<a class="jxr_linenumber" name="L135" href="#L135">135</a>         System.arraycopy(testArray, 5, arrayOne, 0, 5);
<a class="jxr_linenumber" name="L136" href="#L136">136</a>         System.arraycopy(testWeightsArray, 5, weightOne, 0, 5);
<a class="jxr_linenumber" name="L137" href="#L137">137</a>         Assert.assertEquals(stat.evaluate(arrayOne, weightOne),
<a class="jxr_linenumber" name="L138" href="#L138">138</a>                 stat.evaluate(testArray, testWeightsArray, 5, 5), 0);
<a class="jxr_linenumber" name="L139" href="#L139">139</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] arrayEnd = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[5];
<a class="jxr_linenumber" name="L140" href="#L140">140</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] weightEnd = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[5];
<a class="jxr_linenumber" name="L141" href="#L141">141</a>         System.arraycopy(testArray, testArray.length - 5, arrayEnd, 0, 5);
<a class="jxr_linenumber" name="L142" href="#L142">142</a>         System.arraycopy(testWeightsArray, testArray.length - 5, weightEnd, 0, 5);
<a class="jxr_linenumber" name="L143" href="#L143">143</a>         Assert.assertEquals(stat.evaluate(arrayEnd, weightEnd),
<a class="jxr_linenumber" name="L144" href="#L144">144</a>                 stat.evaluate(testArray, testWeightsArray, testArray.length - 5, 5), 0);
<a class="jxr_linenumber" name="L145" href="#L145">145</a>     }
<a class="jxr_linenumber" name="L146" href="#L146">146</a> 
<a class="jxr_linenumber" name="L147" href="#L147">147</a>     @Test
<a class="jxr_linenumber" name="L148" href="#L148">148</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testCopy() {
<a class="jxr_linenumber" name="L149" href="#L149">149</a>         UnivariateStatistic original = getUnivariateStatistic();
<a class="jxr_linenumber" name="L150" href="#L150">150</a>         UnivariateStatistic copy = original.copy();
<a class="jxr_linenumber" name="L151" href="#L151">151</a>         Assert.assertEquals(
<a class="jxr_linenumber" name="L152" href="#L152">152</a>                 expectedValue(),
<a class="jxr_linenumber" name="L153" href="#L153">153</a>                 copy.evaluate(testArray),
<a class="jxr_linenumber" name="L154" href="#L154">154</a>                 getTolerance());
<a class="jxr_linenumber" name="L155" href="#L155">155</a>     }
<a class="jxr_linenumber" name="L156" href="#L156">156</a> 
<a class="jxr_linenumber" name="L157" href="#L157">157</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L158" href="#L158">158</a> <em class="jxr_javadoccomment">     * Tests consistency of weighted statistic computation.</em>
<a class="jxr_linenumber" name="L159" href="#L159">159</a> <em class="jxr_javadoccomment">     * For statistics that support weighted evaluation, this test case compares</em>
<a class="jxr_linenumber" name="L160" href="#L160">160</a> <em class="jxr_javadoccomment">     * the result of direct computation on an array with repeated values with</em>
<a class="jxr_linenumber" name="L161" href="#L161">161</a> <em class="jxr_javadoccomment">     * a weighted computation on the corresponding (shorter) array with each</em>
<a class="jxr_linenumber" name="L162" href="#L162">162</a> <em class="jxr_javadoccomment">     * value appearing only once but with a weight value equal to its multiplicity</em>
<a class="jxr_linenumber" name="L163" href="#L163">163</a> <em class="jxr_javadoccomment">     * in the repeating array.</em>
<a class="jxr_linenumber" name="L164" href="#L164">164</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L165" href="#L165">165</a> 
<a class="jxr_linenumber" name="L166" href="#L166">166</a>     @Test
<a class="jxr_linenumber" name="L167" href="#L167">167</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testWeightedConsistency() {
<a class="jxr_linenumber" name="L168" href="#L168">168</a> 
<a class="jxr_linenumber" name="L169" href="#L169">169</a>         <em class="jxr_comment">// See if this statistic computes weighted statistics</em>
<a class="jxr_linenumber" name="L170" href="#L170">170</a>         <em class="jxr_comment">// If not, skip this test</em>
<a class="jxr_linenumber" name="L171" href="#L171">171</a>         UnivariateStatistic statistic = getUnivariateStatistic();
<a class="jxr_linenumber" name="L172" href="#L172">172</a>         <strong class="jxr_keyword">if</strong> (!(statistic instanceof WeightedEvaluation)) {
<a class="jxr_linenumber" name="L173" href="#L173">173</a>             <strong class="jxr_keyword">return</strong>;
<a class="jxr_linenumber" name="L174" href="#L174">174</a>         }
<a class="jxr_linenumber" name="L175" href="#L175">175</a> 
<a class="jxr_linenumber" name="L176" href="#L176">176</a>         <em class="jxr_comment">// Create arrays of values and corresponding integral weights</em>
<a class="jxr_linenumber" name="L177" href="#L177">177</a>         <em class="jxr_comment">// and longer array with values repeated according to the weights</em>
<a class="jxr_linenumber" name="L178" href="#L178">178</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> len = 10;        <em class="jxr_comment">// length of values array</em>
<a class="jxr_linenumber" name="L179" href="#L179">179</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> mu = 0;       <em class="jxr_comment">// mean of test data</em>
<a class="jxr_linenumber" name="L180" href="#L180">180</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> sigma = 5;    <em class="jxr_comment">// std dev of test data</em>
<a class="jxr_linenumber" name="L181" href="#L181">181</a>         <strong class="jxr_keyword">double</strong>[] values = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[len];
<a class="jxr_linenumber" name="L182" href="#L182">182</a>         <strong class="jxr_keyword">double</strong>[] weights = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[len];
<a class="jxr_linenumber" name="L183" href="#L183">183</a> 
<a class="jxr_linenumber" name="L184" href="#L184">184</a>         <em class="jxr_comment">// Fill weights array with random int values between 1 and 5</em>
<a class="jxr_linenumber" name="L185" href="#L185">185</a>         <strong class="jxr_keyword">int</strong>[] intWeights = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">int</strong>[len];
<a class="jxr_linenumber" name="L186" href="#L186">186</a>         <strong class="jxr_keyword">final</strong> IntegerDistribution weightDist = <strong class="jxr_keyword">new</strong> UniformIntegerDistribution(1, 5);
<a class="jxr_linenumber" name="L187" href="#L187">187</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; len; i++) {
<a class="jxr_linenumber" name="L188" href="#L188">188</a>             intWeights[i] = weightDist.sample();
<a class="jxr_linenumber" name="L189" href="#L189">189</a>             weights[i] = intWeights[i];
<a class="jxr_linenumber" name="L190" href="#L190">190</a>         }
<a class="jxr_linenumber" name="L191" href="#L191">191</a> 
<a class="jxr_linenumber" name="L192" href="#L192">192</a>         <em class="jxr_comment">// Fill values array with random data from N(mu, sigma)</em>
<a class="jxr_linenumber" name="L193" href="#L193">193</a>         <em class="jxr_comment">// and fill valuesList with values from values array with</em>
<a class="jxr_linenumber" name="L194" href="#L194">194</a>         <em class="jxr_comment">// values[i] repeated weights[i] times, each i</em>
<a class="jxr_linenumber" name="L195" href="#L195">195</a>         <strong class="jxr_keyword">final</strong> RealDistribution valueDist = <strong class="jxr_keyword">new</strong> NormalDistribution(mu, sigma);
<a class="jxr_linenumber" name="L196" href="#L196">196</a>         List&lt;Double&gt; valuesList = <strong class="jxr_keyword">new</strong> ArrayList&lt;Double&gt;();
<a class="jxr_linenumber" name="L197" href="#L197">197</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; len; i++) {
<a class="jxr_linenumber" name="L198" href="#L198">198</a>             <strong class="jxr_keyword">double</strong> value = valueDist.sample();
<a class="jxr_linenumber" name="L199" href="#L199">199</a>             values[i] = value;
<a class="jxr_linenumber" name="L200" href="#L200">200</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = 0; j &lt; intWeights[i]; j++) {
<a class="jxr_linenumber" name="L201" href="#L201">201</a>                 valuesList.add(<strong class="jxr_keyword">new</strong> Double(value));
<a class="jxr_linenumber" name="L202" href="#L202">202</a>             }
<a class="jxr_linenumber" name="L203" href="#L203">203</a>         }
<a class="jxr_linenumber" name="L204" href="#L204">204</a> 
<a class="jxr_linenumber" name="L205" href="#L205">205</a>         <em class="jxr_comment">// Dump valuesList into repeatedValues array</em>
<a class="jxr_linenumber" name="L206" href="#L206">206</a>         <strong class="jxr_keyword">int</strong> sumWeights = valuesList.size();
<a class="jxr_linenumber" name="L207" href="#L207">207</a>         <strong class="jxr_keyword">double</strong>[] repeatedValues = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[sumWeights];
<a class="jxr_linenumber" name="L208" href="#L208">208</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; sumWeights; i++) {
<a class="jxr_linenumber" name="L209" href="#L209">209</a>             repeatedValues[i] = valuesList.get(i);
<a class="jxr_linenumber" name="L210" href="#L210">210</a>         }
<a class="jxr_linenumber" name="L211" href="#L211">211</a> 
<a class="jxr_linenumber" name="L212" href="#L212">212</a>         <em class="jxr_comment">// Compare result of weighted statistic computation with direct computation</em>
<a class="jxr_linenumber" name="L213" href="#L213">213</a>         <em class="jxr_comment">// on array of repeated values</em>
<a class="jxr_linenumber" name="L214" href="#L214">214</a>         WeightedEvaluation weightedStatistic = (WeightedEvaluation) statistic;
<a class="jxr_linenumber" name="L215" href="#L215">215</a>         TestUtils.assertRelativelyEquals(statistic.evaluate(repeatedValues),
<a class="jxr_linenumber" name="L216" href="#L216">216</a>                 weightedStatistic.evaluate(values, weights, 0, values.length),
<a class="jxr_linenumber" name="L217" href="#L217">217</a>                 10E-12);
<a class="jxr_linenumber" name="L218" href="#L218">218</a> 
<a class="jxr_linenumber" name="L219" href="#L219">219</a>         <em class="jxr_comment">// Check consistency of weighted evaluation methods</em>
<a class="jxr_linenumber" name="L220" href="#L220">220</a>         Assert.assertEquals(weightedStatistic.evaluate(values, weights, 0, values.length),
<a class="jxr_linenumber" name="L221" href="#L221">221</a>                 weightedStatistic.evaluate(values, weights), Double.MIN_VALUE);
<a class="jxr_linenumber" name="L222" href="#L222">222</a> 
<a class="jxr_linenumber" name="L223" href="#L223">223</a>     }
<a class="jxr_linenumber" name="L224" href="#L224">224</a> 
<a class="jxr_linenumber" name="L225" href="#L225">225</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2003&#x2013;2016 <a href="http://www.apache.org/">The Apache Software Foundation</a>. All rights reserved.</div>
</body>
</html>
