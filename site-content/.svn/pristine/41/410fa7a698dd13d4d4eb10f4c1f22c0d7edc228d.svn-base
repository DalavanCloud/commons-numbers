<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span>package org.apache.commons.math3.util;<a name="line.17"></a>
<span class="sourceLineNo">018</span><a name="line.18"></a>
<span class="sourceLineNo">019</span>import java.lang.reflect.InvocationTargetException;<a name="line.19"></a>
<span class="sourceLineNo">020</span>import java.lang.reflect.Method;<a name="line.20"></a>
<span class="sourceLineNo">021</span>import java.lang.reflect.Modifier;<a name="line.21"></a>
<span class="sourceLineNo">022</span>import java.lang.reflect.Type;<a name="line.22"></a>
<span class="sourceLineNo">023</span>import java.util.ArrayList;<a name="line.23"></a>
<span class="sourceLineNo">024</span>import java.util.Arrays;<a name="line.24"></a>
<span class="sourceLineNo">025</span>import java.util.List;<a name="line.25"></a>
<span class="sourceLineNo">026</span><a name="line.26"></a>
<span class="sourceLineNo">027</span>import org.apache.commons.math3.exception.MathArithmeticException;<a name="line.27"></a>
<span class="sourceLineNo">028</span>import org.junit.Assert;<a name="line.28"></a>
<span class="sourceLineNo">029</span>import org.junit.Test;<a name="line.29"></a>
<span class="sourceLineNo">030</span>import org.junit.runner.RunWith;<a name="line.30"></a>
<span class="sourceLineNo">031</span>import org.junit.runners.Parameterized;<a name="line.31"></a>
<span class="sourceLineNo">032</span>import org.junit.runners.Parameterized.Parameters;<a name="line.32"></a>
<span class="sourceLineNo">033</span><a name="line.33"></a>
<span class="sourceLineNo">034</span>/**<a name="line.34"></a>
<span class="sourceLineNo">035</span> * Test to compare FastMath results against StrictMath results for boundary values.<a name="line.35"></a>
<span class="sourceLineNo">036</span> * &lt;p&gt;<a name="line.36"></a>
<span class="sourceLineNo">037</span> * Running all tests independently: &lt;br/&gt;<a name="line.37"></a>
<span class="sourceLineNo">038</span> * {@code mvn test -Dtest=FastMathStrictComparisonTest}&lt;br/&gt;<a name="line.38"></a>
<span class="sourceLineNo">039</span> * or just run tests against a single method (e.g. scalb):&lt;br/&gt;<a name="line.39"></a>
<span class="sourceLineNo">040</span> * {@code mvn test -Dtest=FastMathStrictComparisonTest -DargLine="-DtestMethod=scalb"}<a name="line.40"></a>
<span class="sourceLineNo">041</span> */<a name="line.41"></a>
<span class="sourceLineNo">042</span>@SuppressWarnings("boxing")<a name="line.42"></a>
<span class="sourceLineNo">043</span>@RunWith(Parameterized.class)<a name="line.43"></a>
<span class="sourceLineNo">044</span>public class FastMathStrictComparisonTest {<a name="line.44"></a>
<span class="sourceLineNo">045</span><a name="line.45"></a>
<span class="sourceLineNo">046</span>    // Values which often need special handling<a name="line.46"></a>
<span class="sourceLineNo">047</span>    private static final Double[] DOUBLE_SPECIAL_VALUES = {<a name="line.47"></a>
<span class="sourceLineNo">048</span>        -0.0, +0.0,                                         // 1,2<a name="line.48"></a>
<span class="sourceLineNo">049</span>        Double.NaN,                                         // 3<a name="line.49"></a>
<span class="sourceLineNo">050</span>        Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, // 4,5<a name="line.50"></a>
<span class="sourceLineNo">051</span>        -Double.MAX_VALUE, Double.MAX_VALUE,                // 6,7<a name="line.51"></a>
<span class="sourceLineNo">052</span>        // decreasing order of absolute value to help catch first failure<a name="line.52"></a>
<span class="sourceLineNo">053</span>        -Precision.EPSILON, Precision.EPSILON,              // 8,9<a name="line.53"></a>
<span class="sourceLineNo">054</span>        -Precision.SAFE_MIN, Precision.SAFE_MIN,            // 10,11<a name="line.54"></a>
<span class="sourceLineNo">055</span>        -Double.MIN_VALUE, Double.MIN_VALUE,                // 12,13<a name="line.55"></a>
<span class="sourceLineNo">056</span>    };<a name="line.56"></a>
<span class="sourceLineNo">057</span><a name="line.57"></a>
<span class="sourceLineNo">058</span>    private static final Float [] FLOAT_SPECIAL_VALUES = {<a name="line.58"></a>
<span class="sourceLineNo">059</span>        -0.0f, +0.0f,                                       // 1,2<a name="line.59"></a>
<span class="sourceLineNo">060</span>        Float.NaN,                                          // 3<a name="line.60"></a>
<span class="sourceLineNo">061</span>        Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY,   // 4,5<a name="line.61"></a>
<span class="sourceLineNo">062</span>        Float.MIN_VALUE, Float.MAX_VALUE,                   // 6,7<a name="line.62"></a>
<span class="sourceLineNo">063</span>        -Float.MIN_VALUE, -Float.MAX_VALUE,                 // 8,9<a name="line.63"></a>
<span class="sourceLineNo">064</span>    };<a name="line.64"></a>
<span class="sourceLineNo">065</span><a name="line.65"></a>
<span class="sourceLineNo">066</span>    private static final Object [] LONG_SPECIAL_VALUES = {<a name="line.66"></a>
<span class="sourceLineNo">067</span>        -1,0,1,                                             // 1,2,3<a name="line.67"></a>
<span class="sourceLineNo">068</span>        Long.MIN_VALUE, Long.MAX_VALUE,                     // 4,5<a name="line.68"></a>
<span class="sourceLineNo">069</span>    };<a name="line.69"></a>
<span class="sourceLineNo">070</span><a name="line.70"></a>
<span class="sourceLineNo">071</span>    private static final Object[] INT_SPECIAL_VALUES = {<a name="line.71"></a>
<span class="sourceLineNo">072</span>        -1,0,1,                                             // 1,2,3<a name="line.72"></a>
<span class="sourceLineNo">073</span>        Integer.MIN_VALUE, Integer.MAX_VALUE,               // 4,5<a name="line.73"></a>
<span class="sourceLineNo">074</span>    };<a name="line.74"></a>
<span class="sourceLineNo">075</span><a name="line.75"></a>
<span class="sourceLineNo">076</span>    private final Method mathMethod;<a name="line.76"></a>
<span class="sourceLineNo">077</span>    private final Method fastMethod;<a name="line.77"></a>
<span class="sourceLineNo">078</span>    private final Type[] types;<a name="line.78"></a>
<span class="sourceLineNo">079</span>    private final Object[][] valueArrays;<a name="line.79"></a>
<span class="sourceLineNo">080</span><a name="line.80"></a>
<span class="sourceLineNo">081</span>    public FastMathStrictComparisonTest(Method m, Method f, Type[] types, Object[][] data) throws Exception{<a name="line.81"></a>
<span class="sourceLineNo">082</span>        this.mathMethod=m;<a name="line.82"></a>
<span class="sourceLineNo">083</span>        this.fastMethod=f;<a name="line.83"></a>
<span class="sourceLineNo">084</span>        this.types=types;<a name="line.84"></a>
<span class="sourceLineNo">085</span>        this.valueArrays=data;<a name="line.85"></a>
<span class="sourceLineNo">086</span>    }<a name="line.86"></a>
<span class="sourceLineNo">087</span><a name="line.87"></a>
<span class="sourceLineNo">088</span>    @Test<a name="line.88"></a>
<span class="sourceLineNo">089</span>    public void test1() throws Exception{<a name="line.89"></a>
<span class="sourceLineNo">090</span>        setupMethodCall(mathMethod, fastMethod, types, valueArrays);<a name="line.90"></a>
<span class="sourceLineNo">091</span>    }<a name="line.91"></a>
<span class="sourceLineNo">092</span>    private static boolean isNumber(Double d) {<a name="line.92"></a>
<span class="sourceLineNo">093</span>        return !(d.isInfinite() || d.isNaN());<a name="line.93"></a>
<span class="sourceLineNo">094</span>    }<a name="line.94"></a>
<span class="sourceLineNo">095</span><a name="line.95"></a>
<span class="sourceLineNo">096</span>    private static boolean isNumber(Float f) {<a name="line.96"></a>
<span class="sourceLineNo">097</span>        return !(f.isInfinite() || f.isNaN());<a name="line.97"></a>
<span class="sourceLineNo">098</span>    }<a name="line.98"></a>
<span class="sourceLineNo">099</span><a name="line.99"></a>
<span class="sourceLineNo">100</span>    private static void reportFailedResults(Method mathMethod, Object[] params, Object expected, Object actual, int[] entries){<a name="line.100"></a>
<span class="sourceLineNo">101</span>        final String methodName = mathMethod.getName();<a name="line.101"></a>
<span class="sourceLineNo">102</span>        String format = null;<a name="line.102"></a>
<span class="sourceLineNo">103</span>        long actL=0;<a name="line.103"></a>
<span class="sourceLineNo">104</span>        long expL=0;<a name="line.104"></a>
<span class="sourceLineNo">105</span>        if (expected instanceof Double) {<a name="line.105"></a>
<span class="sourceLineNo">106</span>            Double exp = (Double) expected;<a name="line.106"></a>
<span class="sourceLineNo">107</span>            Double act = (Double) actual;<a name="line.107"></a>
<span class="sourceLineNo">108</span>            if (isNumber(exp) &amp;&amp; isNumber(act) &amp;&amp; exp != 0) { // show difference as hex<a name="line.108"></a>
<span class="sourceLineNo">109</span>                actL = Double.doubleToLongBits(act);<a name="line.109"></a>
<span class="sourceLineNo">110</span>                expL = Double.doubleToLongBits(exp);<a name="line.110"></a>
<span class="sourceLineNo">111</span>                if (Math.abs(actL-expL)==1) {<a name="line.111"></a>
<span class="sourceLineNo">112</span>                    // Not 100% sure off-by-one errors are allowed everywhere, so only allow for these methods<a name="line.112"></a>
<span class="sourceLineNo">113</span>                    if (methodName.equals("toRadians") || methodName.equals("atan2")) {<a name="line.113"></a>
<span class="sourceLineNo">114</span>                        return;<a name="line.114"></a>
<span class="sourceLineNo">115</span>                    }<a name="line.115"></a>
<span class="sourceLineNo">116</span>                }<a name="line.116"></a>
<span class="sourceLineNo">117</span>                format = "%016x";<a name="line.117"></a>
<span class="sourceLineNo">118</span>            }<a name="line.118"></a>
<span class="sourceLineNo">119</span>        } else if (expected instanceof Float ){<a name="line.119"></a>
<span class="sourceLineNo">120</span>            Float exp = (Float) expected;<a name="line.120"></a>
<span class="sourceLineNo">121</span>            Float act = (Float) actual;<a name="line.121"></a>
<span class="sourceLineNo">122</span>            if (isNumber(exp) &amp;&amp; isNumber(act) &amp;&amp; exp != 0) { // show difference as hex<a name="line.122"></a>
<span class="sourceLineNo">123</span>                actL = Float.floatToIntBits(act);<a name="line.123"></a>
<span class="sourceLineNo">124</span>                expL = Float.floatToIntBits(exp);<a name="line.124"></a>
<span class="sourceLineNo">125</span>                format = "%08x";<a name="line.125"></a>
<span class="sourceLineNo">126</span>            }<a name="line.126"></a>
<span class="sourceLineNo">127</span>        }<a name="line.127"></a>
<span class="sourceLineNo">128</span>        StringBuilder sb = new StringBuilder();<a name="line.128"></a>
<span class="sourceLineNo">129</span>        sb.append(mathMethod.getReturnType().getSimpleName());<a name="line.129"></a>
<span class="sourceLineNo">130</span>        sb.append(" ");<a name="line.130"></a>
<span class="sourceLineNo">131</span>        sb.append(methodName);<a name="line.131"></a>
<span class="sourceLineNo">132</span>        sb.append("(");<a name="line.132"></a>
<span class="sourceLineNo">133</span>        String sep = "";<a name="line.133"></a>
<span class="sourceLineNo">134</span>        for(Object o : params){<a name="line.134"></a>
<span class="sourceLineNo">135</span>            sb.append(sep);<a name="line.135"></a>
<span class="sourceLineNo">136</span>            sb.append(o);<a name="line.136"></a>
<span class="sourceLineNo">137</span>            sep=", ";<a name="line.137"></a>
<span class="sourceLineNo">138</span>        }<a name="line.138"></a>
<span class="sourceLineNo">139</span>        sb.append(") expected ");<a name="line.139"></a>
<span class="sourceLineNo">140</span>        if (format != null){<a name="line.140"></a>
<span class="sourceLineNo">141</span>            sb.append(String.format(format, expL));<a name="line.141"></a>
<span class="sourceLineNo">142</span>        } else {<a name="line.142"></a>
<span class="sourceLineNo">143</span>            sb.append(expected);<a name="line.143"></a>
<span class="sourceLineNo">144</span>        }<a name="line.144"></a>
<span class="sourceLineNo">145</span>        sb.append(" actual ");<a name="line.145"></a>
<span class="sourceLineNo">146</span>        if (format != null){<a name="line.146"></a>
<span class="sourceLineNo">147</span>            sb.append(String.format(format, actL));<a name="line.147"></a>
<span class="sourceLineNo">148</span>        } else {<a name="line.148"></a>
<span class="sourceLineNo">149</span>            sb.append(actual);<a name="line.149"></a>
<span class="sourceLineNo">150</span>        }<a name="line.150"></a>
<span class="sourceLineNo">151</span>        sb.append(" entries ");<a name="line.151"></a>
<span class="sourceLineNo">152</span>        sb.append(Arrays.toString(entries));<a name="line.152"></a>
<span class="sourceLineNo">153</span>        String message = sb.toString();<a name="line.153"></a>
<span class="sourceLineNo">154</span>        final boolean fatal = true;<a name="line.154"></a>
<span class="sourceLineNo">155</span>        if (fatal) {<a name="line.155"></a>
<span class="sourceLineNo">156</span>            Assert.fail(message);<a name="line.156"></a>
<span class="sourceLineNo">157</span>        } else {<a name="line.157"></a>
<span class="sourceLineNo">158</span>            System.out.println(message);<a name="line.158"></a>
<span class="sourceLineNo">159</span>        }<a name="line.159"></a>
<span class="sourceLineNo">160</span>    }<a name="line.160"></a>
<span class="sourceLineNo">161</span><a name="line.161"></a>
<span class="sourceLineNo">162</span>    private static void callMethods(Method mathMethod, Method fastMethod,<a name="line.162"></a>
<span class="sourceLineNo">163</span>            Object[] params, int[] entries) throws IllegalAccessException {<a name="line.163"></a>
<span class="sourceLineNo">164</span>        try {<a name="line.164"></a>
<span class="sourceLineNo">165</span>            Object expected;<a name="line.165"></a>
<span class="sourceLineNo">166</span>            try {<a name="line.166"></a>
<span class="sourceLineNo">167</span>                expected = mathMethod.invoke(mathMethod, params);<a name="line.167"></a>
<span class="sourceLineNo">168</span>            } catch (InvocationTargetException ite) {<a name="line.168"></a>
<span class="sourceLineNo">169</span>                expected = ite.getCause();<a name="line.169"></a>
<span class="sourceLineNo">170</span>            }<a name="line.170"></a>
<span class="sourceLineNo">171</span>            Object actual;<a name="line.171"></a>
<span class="sourceLineNo">172</span>            try {<a name="line.172"></a>
<span class="sourceLineNo">173</span>                actual = fastMethod.invoke(mathMethod, params);<a name="line.173"></a>
<span class="sourceLineNo">174</span>            } catch (InvocationTargetException ite) {<a name="line.174"></a>
<span class="sourceLineNo">175</span>                actual = ite.getCause();<a name="line.175"></a>
<span class="sourceLineNo">176</span>            }<a name="line.176"></a>
<span class="sourceLineNo">177</span>            if (expected instanceof ArithmeticException) {<a name="line.177"></a>
<span class="sourceLineNo">178</span>                Assert.assertEquals(MathArithmeticException.class, actual.getClass());<a name="line.178"></a>
<span class="sourceLineNo">179</span>            } else  if (!expected.equals(actual)) {<a name="line.179"></a>
<span class="sourceLineNo">180</span>                reportFailedResults(mathMethod, params, expected, actual, entries);<a name="line.180"></a>
<span class="sourceLineNo">181</span>            }<a name="line.181"></a>
<span class="sourceLineNo">182</span>        } catch (IllegalArgumentException e) {<a name="line.182"></a>
<span class="sourceLineNo">183</span>            Assert.fail(mathMethod+" "+e);<a name="line.183"></a>
<span class="sourceLineNo">184</span>        }<a name="line.184"></a>
<span class="sourceLineNo">185</span>    }<a name="line.185"></a>
<span class="sourceLineNo">186</span><a name="line.186"></a>
<span class="sourceLineNo">187</span>    private static void setupMethodCall(Method mathMethod, Method fastMethod,<a name="line.187"></a>
<span class="sourceLineNo">188</span>            Type[] types, Object[][] valueArrays) throws Exception {<a name="line.188"></a>
<span class="sourceLineNo">189</span>        Object[] params = new Object[types.length];<a name="line.189"></a>
<span class="sourceLineNo">190</span>        int entry1 = 0;<a name="line.190"></a>
<span class="sourceLineNo">191</span>        int[] entries = new int[types.length];<a name="line.191"></a>
<span class="sourceLineNo">192</span>        for(Object d : valueArrays[0]) {<a name="line.192"></a>
<span class="sourceLineNo">193</span>            entry1++;<a name="line.193"></a>
<span class="sourceLineNo">194</span>            params[0] = d;<a name="line.194"></a>
<span class="sourceLineNo">195</span>            entries[0] = entry1;<a name="line.195"></a>
<span class="sourceLineNo">196</span>            if (params.length &gt; 1){<a name="line.196"></a>
<span class="sourceLineNo">197</span>                int entry2 = 0;<a name="line.197"></a>
<span class="sourceLineNo">198</span>                for(Object d1 : valueArrays[1]) {<a name="line.198"></a>
<span class="sourceLineNo">199</span>                    entry2++;<a name="line.199"></a>
<span class="sourceLineNo">200</span>                    params[1] = d1;<a name="line.200"></a>
<span class="sourceLineNo">201</span>                    entries[1] = entry2;<a name="line.201"></a>
<span class="sourceLineNo">202</span>                    callMethods(mathMethod, fastMethod, params, entries);<a name="line.202"></a>
<span class="sourceLineNo">203</span>                }<a name="line.203"></a>
<span class="sourceLineNo">204</span>            } else {<a name="line.204"></a>
<span class="sourceLineNo">205</span>                callMethods(mathMethod, fastMethod, params, entries);<a name="line.205"></a>
<span class="sourceLineNo">206</span>            }<a name="line.206"></a>
<span class="sourceLineNo">207</span>        }<a name="line.207"></a>
<span class="sourceLineNo">208</span>    }<a name="line.208"></a>
<span class="sourceLineNo">209</span><a name="line.209"></a>
<span class="sourceLineNo">210</span>    @Parameters<a name="line.210"></a>
<span class="sourceLineNo">211</span>    public static List&lt;Object[]&gt; data() throws Exception {<a name="line.211"></a>
<span class="sourceLineNo">212</span>        String singleMethod = System.getProperty("testMethod");<a name="line.212"></a>
<span class="sourceLineNo">213</span>        List&lt;Object[]&gt; list = new ArrayList&lt;Object[]&gt;();<a name="line.213"></a>
<span class="sourceLineNo">214</span>        for(Method mathMethod : StrictMath.class.getDeclaredMethods()) {<a name="line.214"></a>
<span class="sourceLineNo">215</span>            method:<a name="line.215"></a>
<span class="sourceLineNo">216</span>            if (Modifier.isPublic(mathMethod.getModifiers())){// Only test public methods<a name="line.216"></a>
<span class="sourceLineNo">217</span>                Type []types = mathMethod.getGenericParameterTypes();<a name="line.217"></a>
<span class="sourceLineNo">218</span>                if (types.length &gt;=1) { // Only check methods with at least one parameter<a name="line.218"></a>
<span class="sourceLineNo">219</span>                    try {<a name="line.219"></a>
<span class="sourceLineNo">220</span>                        // Get the corresponding FastMath method<a name="line.220"></a>
<span class="sourceLineNo">221</span>                        Method fastMethod = FastMath.class.getDeclaredMethod(mathMethod.getName(), (Class[]) types);<a name="line.221"></a>
<span class="sourceLineNo">222</span>                        if (Modifier.isPublic(fastMethod.getModifiers())) { // It must be public too<a name="line.222"></a>
<span class="sourceLineNo">223</span>                            if (singleMethod != null &amp;&amp; !fastMethod.getName().equals(singleMethod)) {<a name="line.223"></a>
<span class="sourceLineNo">224</span>                                break method;<a name="line.224"></a>
<span class="sourceLineNo">225</span>                            }<a name="line.225"></a>
<span class="sourceLineNo">226</span>                            Object [][] values = new Object[types.length][];<a name="line.226"></a>
<span class="sourceLineNo">227</span>                            int index = 0;<a name="line.227"></a>
<span class="sourceLineNo">228</span>                            for(Type t : types) {<a name="line.228"></a>
<span class="sourceLineNo">229</span>                                if (t.equals(double.class)){<a name="line.229"></a>
<span class="sourceLineNo">230</span>                                    values[index]=DOUBLE_SPECIAL_VALUES;<a name="line.230"></a>
<span class="sourceLineNo">231</span>                                } else if (t.equals(float.class)) {<a name="line.231"></a>
<span class="sourceLineNo">232</span>                                    values[index]=FLOAT_SPECIAL_VALUES;<a name="line.232"></a>
<span class="sourceLineNo">233</span>                                } else if (t.equals(long.class)) {<a name="line.233"></a>
<span class="sourceLineNo">234</span>                                    values[index]=LONG_SPECIAL_VALUES;<a name="line.234"></a>
<span class="sourceLineNo">235</span>                                } else if (t.equals(int.class)) {<a name="line.235"></a>
<span class="sourceLineNo">236</span>                                    values[index]=INT_SPECIAL_VALUES;<a name="line.236"></a>
<span class="sourceLineNo">237</span>                                } else {<a name="line.237"></a>
<span class="sourceLineNo">238</span>                                    System.out.println("Cannot handle class "+t+" for "+mathMethod);<a name="line.238"></a>
<span class="sourceLineNo">239</span>                                    break method;<a name="line.239"></a>
<span class="sourceLineNo">240</span>                                }<a name="line.240"></a>
<span class="sourceLineNo">241</span>                                index++;<a name="line.241"></a>
<span class="sourceLineNo">242</span>                            }<a name="line.242"></a>
<span class="sourceLineNo">243</span>//                            System.out.println(fastMethod);<a name="line.243"></a>
<span class="sourceLineNo">244</span>                            /*<a name="line.244"></a>
<span class="sourceLineNo">245</span>                             * The current implementation runs each method as a separate test.<a name="line.245"></a>
<span class="sourceLineNo">246</span>                             * Could be amended to run each value as a separate test<a name="line.246"></a>
<span class="sourceLineNo">247</span>                             */<a name="line.247"></a>
<span class="sourceLineNo">248</span>                            list.add(new Object[]{mathMethod, fastMethod, types, values});<a name="line.248"></a>
<span class="sourceLineNo">249</span>//                            setupMethodCall(mathMethod, fastMethod, params, data);<a name="line.249"></a>
<span class="sourceLineNo">250</span>                        } else {<a name="line.250"></a>
<span class="sourceLineNo">251</span>                            System.out.println("Cannot find public FastMath method corresponding to: "+mathMethod);<a name="line.251"></a>
<span class="sourceLineNo">252</span>                        }<a name="line.252"></a>
<span class="sourceLineNo">253</span>                    } catch (NoSuchMethodException e) {<a name="line.253"></a>
<span class="sourceLineNo">254</span>                        System.out.println("Cannot find FastMath method corresponding to: "+mathMethod);<a name="line.254"></a>
<span class="sourceLineNo">255</span>                    }<a name="line.255"></a>
<span class="sourceLineNo">256</span>                }<a name="line.256"></a>
<span class="sourceLineNo">257</span>            }<a name="line.257"></a>
<span class="sourceLineNo">258</span>        }<a name="line.258"></a>
<span class="sourceLineNo">259</span>        return list;<a name="line.259"></a>
<span class="sourceLineNo">260</span>    }<a name="line.260"></a>
<span class="sourceLineNo">261</span>}<a name="line.261"></a>




























































</pre>
</div>
</body>
</html>
