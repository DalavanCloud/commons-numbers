<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>GraggBulirschStoerStepInterpolator xref</title>
<link type="text/css" rel="stylesheet" href="../../../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../apidocs/org/apache/commons/math3/ode/nonstiff/GraggBulirschStoerStepInterpolator.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Licensed to the Apache Software Foundation (ASF) under one or more</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> * contributor license agreements.  See the NOTICE file distributed with</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * this work for additional information regarding copyright ownership.</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * The ASF licenses this file to You under the Apache License, Version 2.0</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * (the "License"); you may not use this file except in compliance with</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> * the License.  You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *      <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  <strong class="jxr_keyword">package</strong> org.apache.commons.math3.ode.nonstiff;
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> java.io.IOException;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> java.io.ObjectInput;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> java.io.ObjectOutput;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.ode.EquationsMapper;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.ode.sampling.StepInterpolator;
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.util.FastMath;
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <em class="jxr_javadoccomment"> * This class implements an interpolator for the Gragg-Bulirsch-Stoer</em>
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <em class="jxr_javadoccomment"> * integrator.</em>
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <em class="jxr_javadoccomment"> * &lt;p&gt;This interpolator compute dense output inside the last step</em>
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <em class="jxr_javadoccomment"> * produced by a Gragg-Bulirsch-Stoer integrator.&lt;/p&gt;</em>
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  <em class="jxr_javadoccomment"> * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  <em class="jxr_javadoccomment"> * This implementation is basically a reimplementation in Java of the</em>
<a class="jxr_linenumber" name="L38" href="#L38">38</a>  <em class="jxr_javadoccomment"> * &lt;a</em>
<a class="jxr_linenumber" name="L39" href="#L39">39</a>  <em class="jxr_javadoccomment"> * href="<a href="http://www.unige.ch/math/folks/hairer/prog/nonstiff/odex.f" target="alexandria_uri">http://www.unige.ch/math/folks/hairer/prog/nonstiff/odex.f</a>"&gt;odex&lt;/a&gt;</em>
<a class="jxr_linenumber" name="L40" href="#L40">40</a>  <em class="jxr_javadoccomment"> * fortran code by E. Hairer and G. Wanner. The redistribution policy</em>
<a class="jxr_linenumber" name="L41" href="#L41">41</a>  <em class="jxr_javadoccomment"> * for this code is available &lt;a</em>
<a class="jxr_linenumber" name="L42" href="#L42">42</a>  <em class="jxr_javadoccomment"> * href="<a href="http://www.unige.ch/~hairer/prog/licence.txt" target="alexandria_uri">http://www.unige.ch/~hairer/prog/licence.txt</a>"&gt;here&lt;/a&gt;, for</em>
<a class="jxr_linenumber" name="L43" href="#L43">43</a>  <em class="jxr_javadoccomment"> * convenience, it is reproduced below.&lt;/p&gt;</em>
<a class="jxr_linenumber" name="L44" href="#L44">44</a>  <em class="jxr_javadoccomment"> * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L45" href="#L45">45</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L46" href="#L46">46</a>  <em class="jxr_javadoccomment"> * &lt;table border="0" width="80%" cellpadding="10" align="center" bgcolor="#E0E0E0"&gt;</em>
<a class="jxr_linenumber" name="L47" href="#L47">47</a>  <em class="jxr_javadoccomment"> * &lt;tr&gt;&lt;td&gt;Copyright (c) 2004, Ernst Hairer&lt;/td&gt;&lt;/tr&gt;</em>
<a class="jxr_linenumber" name="L48" href="#L48">48</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L49" href="#L49">49</a>  <em class="jxr_javadoccomment"> * &lt;tr&gt;&lt;td&gt;Redistribution and use in source and binary forms, with or</em>
<a class="jxr_linenumber" name="L50" href="#L50">50</a>  <em class="jxr_javadoccomment"> * without modification, are permitted provided that the following</em>
<a class="jxr_linenumber" name="L51" href="#L51">51</a>  <em class="jxr_javadoccomment"> * conditions are met:</em>
<a class="jxr_linenumber" name="L52" href="#L52">52</a>  <em class="jxr_javadoccomment"> * &lt;ul&gt;</em>
<a class="jxr_linenumber" name="L53" href="#L53">53</a>  <em class="jxr_javadoccomment"> *  &lt;li&gt;Redistributions of source code must retain the above copyright</em>
<a class="jxr_linenumber" name="L54" href="#L54">54</a>  <em class="jxr_javadoccomment"> *      notice, this list of conditions and the following disclaimer.&lt;/li&gt;</em>
<a class="jxr_linenumber" name="L55" href="#L55">55</a>  <em class="jxr_javadoccomment"> *  &lt;li&gt;Redistributions in binary form must reproduce the above copyright</em>
<a class="jxr_linenumber" name="L56" href="#L56">56</a>  <em class="jxr_javadoccomment"> *      notice, this list of conditions and the following disclaimer in the</em>
<a class="jxr_linenumber" name="L57" href="#L57">57</a>  <em class="jxr_javadoccomment"> *      documentation and/or other materials provided with the distribution.&lt;/li&gt;</em>
<a class="jxr_linenumber" name="L58" href="#L58">58</a>  <em class="jxr_javadoccomment"> * &lt;/ul&gt;&lt;/td&gt;&lt;/tr&gt;</em>
<a class="jxr_linenumber" name="L59" href="#L59">59</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L60" href="#L60">60</a>  <em class="jxr_javadoccomment"> * &lt;tr&gt;&lt;td&gt;&lt;strong&gt;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND</em>
<a class="jxr_linenumber" name="L61" href="#L61">61</a>  <em class="jxr_javadoccomment"> * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,</em>
<a class="jxr_linenumber" name="L62" href="#L62">62</a>  <em class="jxr_javadoccomment"> * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS</em>
<a class="jxr_linenumber" name="L63" href="#L63">63</a>  <em class="jxr_javadoccomment"> * FOR A  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR</em>
<a class="jxr_linenumber" name="L64" href="#L64">64</a>  <em class="jxr_javadoccomment"> * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,</em>
<a class="jxr_linenumber" name="L65" href="#L65">65</a>  <em class="jxr_javadoccomment"> * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,</em>
<a class="jxr_linenumber" name="L66" href="#L66">66</a>  <em class="jxr_javadoccomment"> * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR</em>
<a class="jxr_linenumber" name="L67" href="#L67">67</a>  <em class="jxr_javadoccomment"> * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF</em>
<a class="jxr_linenumber" name="L68" href="#L68">68</a>  <em class="jxr_javadoccomment"> * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING</em>
<a class="jxr_linenumber" name="L69" href="#L69">69</a>  <em class="jxr_javadoccomment"> * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS</em>
<a class="jxr_linenumber" name="L70" href="#L70">70</a>  <em class="jxr_javadoccomment"> * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;</em>
<a class="jxr_linenumber" name="L71" href="#L71">71</a>  <em class="jxr_javadoccomment"> * &lt;/table&gt;</em>
<a class="jxr_linenumber" name="L72" href="#L72">72</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L73" href="#L73">73</a>  <em class="jxr_javadoccomment"> * @see GraggBulirschStoerIntegrator</em>
<a class="jxr_linenumber" name="L74" href="#L74">74</a>  <em class="jxr_javadoccomment"> * @since 1.2</em>
<a class="jxr_linenumber" name="L75" href="#L75">75</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L76" href="#L76">76</a>  
<a class="jxr_linenumber" name="L77" href="#L77">77</a>  <strong class="jxr_keyword">class</strong> <a href="../../../../../../org/apache/commons/math3/ode/nonstiff/GraggBulirschStoerStepInterpolator.html">GraggBulirschStoerStepInterpolator</a>
<a class="jxr_linenumber" name="L78" href="#L78">78</a>    <strong class="jxr_keyword">extends</strong> <a href="../../../../../../org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.html">AbstractStepInterpolator</a> {
<a class="jxr_linenumber" name="L79" href="#L79">79</a>  
<a class="jxr_linenumber" name="L80" href="#L80">80</a>      <em class="jxr_javadoccomment">/** Serializable version identifier. */</em>
<a class="jxr_linenumber" name="L81" href="#L81">81</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">long</strong> serialVersionUID = 20110928L;
<a class="jxr_linenumber" name="L82" href="#L82">82</a>  
<a class="jxr_linenumber" name="L83" href="#L83">83</a>      <em class="jxr_javadoccomment">/** Slope at the beginning of the step. */</em>
<a class="jxr_linenumber" name="L84" href="#L84">84</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">double</strong>[] y0Dot;
<a class="jxr_linenumber" name="L85" href="#L85">85</a>  
<a class="jxr_linenumber" name="L86" href="#L86">86</a>      <em class="jxr_javadoccomment">/** State at the end of the step. */</em>
<a class="jxr_linenumber" name="L87" href="#L87">87</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">double</strong>[] y1;
<a class="jxr_linenumber" name="L88" href="#L88">88</a>  
<a class="jxr_linenumber" name="L89" href="#L89">89</a>      <em class="jxr_javadoccomment">/** Slope at the end of the step. */</em>
<a class="jxr_linenumber" name="L90" href="#L90">90</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">double</strong>[] y1Dot;
<a class="jxr_linenumber" name="L91" href="#L91">91</a>  
<a class="jxr_linenumber" name="L92" href="#L92">92</a>      <em class="jxr_javadoccomment">/** Derivatives at the middle of the step.</em>
<a class="jxr_linenumber" name="L93" href="#L93">93</a>  <em class="jxr_javadoccomment">     * element 0 is state at midpoint, element 1 is first derivative ...</em>
<a class="jxr_linenumber" name="L94" href="#L94">94</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L95" href="#L95">95</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">double</strong>[][] yMidDots;
<a class="jxr_linenumber" name="L96" href="#L96">96</a>  
<a class="jxr_linenumber" name="L97" href="#L97">97</a>      <em class="jxr_javadoccomment">/** Interpolation polynomials. */</em>
<a class="jxr_linenumber" name="L98" href="#L98">98</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">double</strong>[][] polynomials;
<a class="jxr_linenumber" name="L99" href="#L99">99</a>  
<a class="jxr_linenumber" name="L100" href="#L100">100</a>     <em class="jxr_javadoccomment">/** Error coefficients for the interpolation. */</em>
<a class="jxr_linenumber" name="L101" href="#L101">101</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">double</strong>[] errfac;
<a class="jxr_linenumber" name="L102" href="#L102">102</a> 
<a class="jxr_linenumber" name="L103" href="#L103">103</a>     <em class="jxr_javadoccomment">/** Degree of the interpolation polynomials. */</em>
<a class="jxr_linenumber" name="L104" href="#L104">104</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">int</strong> currentDegree;
<a class="jxr_linenumber" name="L105" href="#L105">105</a> 
<a class="jxr_linenumber" name="L106" href="#L106">106</a>   <em class="jxr_javadoccomment">/** Simple constructor.</em>
<a class="jxr_linenumber" name="L107" href="#L107">107</a> <em class="jxr_javadoccomment">   * This constructor should not be used directly, it is only intended</em>
<a class="jxr_linenumber" name="L108" href="#L108">108</a> <em class="jxr_javadoccomment">   * for the serialization process.</em>
<a class="jxr_linenumber" name="L109" href="#L109">109</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L110" href="#L110">110</a>     <em class="jxr_comment">// CHECKSTYLE: stop RedundantModifier</em>
<a class="jxr_linenumber" name="L111" href="#L111">111</a>     <em class="jxr_comment">// the public modifier here is needed for serialization</em>
<a class="jxr_linenumber" name="L112" href="#L112">112</a>   <strong class="jxr_keyword">public</strong> <a href="../../../../../../org/apache/commons/math3/ode/nonstiff/GraggBulirschStoerStepInterpolator.html">GraggBulirschStoerStepInterpolator</a>() {
<a class="jxr_linenumber" name="L113" href="#L113">113</a>     y0Dot    = <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L114" href="#L114">114</a>     y1       = <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L115" href="#L115">115</a>     y1Dot    = <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L116" href="#L116">116</a>     yMidDots = <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L117" href="#L117">117</a>     resetTables(-1);
<a class="jxr_linenumber" name="L118" href="#L118">118</a>   }
<a class="jxr_linenumber" name="L119" href="#L119">119</a>   <em class="jxr_comment">// CHECKSTYLE: resume RedundantModifier</em>
<a class="jxr_linenumber" name="L120" href="#L120">120</a> 
<a class="jxr_linenumber" name="L121" href="#L121">121</a>   <em class="jxr_javadoccomment">/** Simple constructor.</em>
<a class="jxr_linenumber" name="L122" href="#L122">122</a> <em class="jxr_javadoccomment">   * @param y reference to the integrator array holding the current state</em>
<a class="jxr_linenumber" name="L123" href="#L123">123</a> <em class="jxr_javadoccomment">   * @param y0Dot reference to the integrator array holding the slope</em>
<a class="jxr_linenumber" name="L124" href="#L124">124</a> <em class="jxr_javadoccomment">   * at the beginning of the step</em>
<a class="jxr_linenumber" name="L125" href="#L125">125</a> <em class="jxr_javadoccomment">   * @param y1 reference to the integrator array holding the state at</em>
<a class="jxr_linenumber" name="L126" href="#L126">126</a> <em class="jxr_javadoccomment">   * the end of the step</em>
<a class="jxr_linenumber" name="L127" href="#L127">127</a> <em class="jxr_javadoccomment">   * @param y1Dot reference to the integrator array holding the slope</em>
<a class="jxr_linenumber" name="L128" href="#L128">128</a> <em class="jxr_javadoccomment">   * at the end of the step</em>
<a class="jxr_linenumber" name="L129" href="#L129">129</a> <em class="jxr_javadoccomment">   * @param yMidDots reference to the integrator array holding the</em>
<a class="jxr_linenumber" name="L130" href="#L130">130</a> <em class="jxr_javadoccomment">   * derivatives at the middle point of the step</em>
<a class="jxr_linenumber" name="L131" href="#L131">131</a> <em class="jxr_javadoccomment">   * @param forward integration direction indicator</em>
<a class="jxr_linenumber" name="L132" href="#L132">132</a> <em class="jxr_javadoccomment">   * @param primaryMapper equations mapper for the primary equations set</em>
<a class="jxr_linenumber" name="L133" href="#L133">133</a> <em class="jxr_javadoccomment">   * @param secondaryMappers equations mappers for the secondary equations sets</em>
<a class="jxr_linenumber" name="L134" href="#L134">134</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L135" href="#L135">135</a>   <a href="../../../../../../org/apache/commons/math3/ode/nonstiff/GraggBulirschStoerStepInterpolator.html">GraggBulirschStoerStepInterpolator</a>(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] y, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] y0Dot,
<a class="jxr_linenumber" name="L136" href="#L136">136</a>                                      <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] y1, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] y1Dot,
<a class="jxr_linenumber" name="L137" href="#L137">137</a>                                      <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[][] yMidDots,
<a class="jxr_linenumber" name="L138" href="#L138">138</a>                                      <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">boolean</strong> forward,
<a class="jxr_linenumber" name="L139" href="#L139">139</a>                                      <strong class="jxr_keyword">final</strong> <a href="../../../../../../org/apache/commons/math3/ode/EquationsMapper.html">EquationsMapper</a> primaryMapper,
<a class="jxr_linenumber" name="L140" href="#L140">140</a>                                      <strong class="jxr_keyword">final</strong> <a href="../../../../../../org/apache/commons/math3/ode/EquationsMapper.html">EquationsMapper</a>[] secondaryMappers) {
<a class="jxr_linenumber" name="L141" href="#L141">141</a> 
<a class="jxr_linenumber" name="L142" href="#L142">142</a>     <strong class="jxr_keyword">super</strong>(y, forward, primaryMapper, secondaryMappers);
<a class="jxr_linenumber" name="L143" href="#L143">143</a>     <strong class="jxr_keyword">this</strong>.y0Dot    = y0Dot;
<a class="jxr_linenumber" name="L144" href="#L144">144</a>     <strong class="jxr_keyword">this</strong>.y1       = y1;
<a class="jxr_linenumber" name="L145" href="#L145">145</a>     <strong class="jxr_keyword">this</strong>.y1Dot    = y1Dot;
<a class="jxr_linenumber" name="L146" href="#L146">146</a>     <strong class="jxr_keyword">this</strong>.yMidDots = yMidDots;
<a class="jxr_linenumber" name="L147" href="#L147">147</a> 
<a class="jxr_linenumber" name="L148" href="#L148">148</a>     resetTables(yMidDots.length + 4);
<a class="jxr_linenumber" name="L149" href="#L149">149</a> 
<a class="jxr_linenumber" name="L150" href="#L150">150</a>   }
<a class="jxr_linenumber" name="L151" href="#L151">151</a> 
<a class="jxr_linenumber" name="L152" href="#L152">152</a>   <em class="jxr_javadoccomment">/** Copy constructor.</em>
<a class="jxr_linenumber" name="L153" href="#L153">153</a> <em class="jxr_javadoccomment">   * @param interpolator interpolator to copy from. The copy is a deep</em>
<a class="jxr_linenumber" name="L154" href="#L154">154</a> <em class="jxr_javadoccomment">   * copy: its arrays are separated from the original arrays of the</em>
<a class="jxr_linenumber" name="L155" href="#L155">155</a> <em class="jxr_javadoccomment">   * instance</em>
<a class="jxr_linenumber" name="L156" href="#L156">156</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L157" href="#L157">157</a>   <a href="../../../../../../org/apache/commons/math3/ode/nonstiff/GraggBulirschStoerStepInterpolator.html">GraggBulirschStoerStepInterpolator</a>(<strong class="jxr_keyword">final</strong> <a href="../../../../../../org/apache/commons/math3/ode/nonstiff/GraggBulirschStoerStepInterpolator.html">GraggBulirschStoerStepInterpolator</a> interpolator) {
<a class="jxr_linenumber" name="L158" href="#L158">158</a> 
<a class="jxr_linenumber" name="L159" href="#L159">159</a>     <strong class="jxr_keyword">super</strong>(interpolator);
<a class="jxr_linenumber" name="L160" href="#L160">160</a> 
<a class="jxr_linenumber" name="L161" href="#L161">161</a>     <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> dimension = currentState.length;
<a class="jxr_linenumber" name="L162" href="#L162">162</a> 
<a class="jxr_linenumber" name="L163" href="#L163">163</a>     <em class="jxr_comment">// the interpolator has been finalized,</em>
<a class="jxr_linenumber" name="L164" href="#L164">164</a>     <em class="jxr_comment">// the following arrays are not needed anymore</em>
<a class="jxr_linenumber" name="L165" href="#L165">165</a>     y0Dot    = <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L166" href="#L166">166</a>     y1       = <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L167" href="#L167">167</a>     y1Dot    = <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L168" href="#L168">168</a>     yMidDots = <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L169" href="#L169">169</a> 
<a class="jxr_linenumber" name="L170" href="#L170">170</a>     <em class="jxr_comment">// copy the interpolation polynomials (up to the current degree only)</em>
<a class="jxr_linenumber" name="L171" href="#L171">171</a>     <strong class="jxr_keyword">if</strong> (interpolator.polynomials == <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L172" href="#L172">172</a>       polynomials = <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L173" href="#L173">173</a>       currentDegree = -1;
<a class="jxr_linenumber" name="L174" href="#L174">174</a>     } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L175" href="#L175">175</a>       resetTables(interpolator.currentDegree);
<a class="jxr_linenumber" name="L176" href="#L176">176</a>       <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; polynomials.length; ++i) {
<a class="jxr_linenumber" name="L177" href="#L177">177</a>         polynomials[i] = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[dimension];
<a class="jxr_linenumber" name="L178" href="#L178">178</a>         System.arraycopy(interpolator.polynomials[i], 0,
<a class="jxr_linenumber" name="L179" href="#L179">179</a>                          polynomials[i], 0, dimension);
<a class="jxr_linenumber" name="L180" href="#L180">180</a>       }
<a class="jxr_linenumber" name="L181" href="#L181">181</a>       currentDegree = interpolator.currentDegree;
<a class="jxr_linenumber" name="L182" href="#L182">182</a>     }
<a class="jxr_linenumber" name="L183" href="#L183">183</a> 
<a class="jxr_linenumber" name="L184" href="#L184">184</a>   }
<a class="jxr_linenumber" name="L185" href="#L185">185</a> 
<a class="jxr_linenumber" name="L186" href="#L186">186</a>   <em class="jxr_javadoccomment">/** Reallocate the internal tables.</em>
<a class="jxr_linenumber" name="L187" href="#L187">187</a> <em class="jxr_javadoccomment">   * Reallocate the internal tables in order to be able to handle</em>
<a class="jxr_linenumber" name="L188" href="#L188">188</a> <em class="jxr_javadoccomment">   * interpolation polynomials up to the given degree</em>
<a class="jxr_linenumber" name="L189" href="#L189">189</a> <em class="jxr_javadoccomment">   * @param maxDegree maximal degree to handle</em>
<a class="jxr_linenumber" name="L190" href="#L190">190</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L191" href="#L191">191</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">void</strong> resetTables(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> maxDegree) {
<a class="jxr_linenumber" name="L192" href="#L192">192</a> 
<a class="jxr_linenumber" name="L193" href="#L193">193</a>     <strong class="jxr_keyword">if</strong> (maxDegree &lt; 0) {
<a class="jxr_linenumber" name="L194" href="#L194">194</a>       polynomials   = <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L195" href="#L195">195</a>       errfac        = <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L196" href="#L196">196</a>       currentDegree = -1;
<a class="jxr_linenumber" name="L197" href="#L197">197</a>     } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L198" href="#L198">198</a> 
<a class="jxr_linenumber" name="L199" href="#L199">199</a>       <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[][] newPols = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[maxDegree + 1][];
<a class="jxr_linenumber" name="L200" href="#L200">200</a>       <strong class="jxr_keyword">if</strong> (polynomials != <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L201" href="#L201">201</a>         System.arraycopy(polynomials, 0, newPols, 0, polynomials.length);
<a class="jxr_linenumber" name="L202" href="#L202">202</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = polynomials.length; i &lt; newPols.length; ++i) {
<a class="jxr_linenumber" name="L203" href="#L203">203</a>           newPols[i] = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[currentState.length];
<a class="jxr_linenumber" name="L204" href="#L204">204</a>         }
<a class="jxr_linenumber" name="L205" href="#L205">205</a>       } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L206" href="#L206">206</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; newPols.length; ++i) {
<a class="jxr_linenumber" name="L207" href="#L207">207</a>           newPols[i] = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[currentState.length];
<a class="jxr_linenumber" name="L208" href="#L208">208</a>         }
<a class="jxr_linenumber" name="L209" href="#L209">209</a>       }
<a class="jxr_linenumber" name="L210" href="#L210">210</a>       polynomials = newPols;
<a class="jxr_linenumber" name="L211" href="#L211">211</a> 
<a class="jxr_linenumber" name="L212" href="#L212">212</a>       <em class="jxr_comment">// initialize the error factors array for interpolation</em>
<a class="jxr_linenumber" name="L213" href="#L213">213</a>       <strong class="jxr_keyword">if</strong> (maxDegree &lt;= 4) {
<a class="jxr_linenumber" name="L214" href="#L214">214</a>         errfac = <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L215" href="#L215">215</a>       } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L216" href="#L216">216</a>         errfac = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[maxDegree - 4];
<a class="jxr_linenumber" name="L217" href="#L217">217</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; errfac.length; ++i) {
<a class="jxr_linenumber" name="L218" href="#L218">218</a>           <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> ip5 = i + 5;
<a class="jxr_linenumber" name="L219" href="#L219">219</a>           errfac[i] = 1.0 / (ip5 * ip5);
<a class="jxr_linenumber" name="L220" href="#L220">220</a>           <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> e = 0.5 * FastMath.sqrt (((<strong class="jxr_keyword">double</strong>) (i + 1)) / ip5);
<a class="jxr_linenumber" name="L221" href="#L221">221</a>           <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = 0; j &lt;= i; ++j) {
<a class="jxr_linenumber" name="L222" href="#L222">222</a>             errfac[i] *= e / (j + 1);
<a class="jxr_linenumber" name="L223" href="#L223">223</a>           }
<a class="jxr_linenumber" name="L224" href="#L224">224</a>         }
<a class="jxr_linenumber" name="L225" href="#L225">225</a>       }
<a class="jxr_linenumber" name="L226" href="#L226">226</a> 
<a class="jxr_linenumber" name="L227" href="#L227">227</a>       currentDegree = 0;
<a class="jxr_linenumber" name="L228" href="#L228">228</a> 
<a class="jxr_linenumber" name="L229" href="#L229">229</a>     }
<a class="jxr_linenumber" name="L230" href="#L230">230</a> 
<a class="jxr_linenumber" name="L231" href="#L231">231</a>   }
<a class="jxr_linenumber" name="L232" href="#L232">232</a> 
<a class="jxr_linenumber" name="L233" href="#L233">233</a>   <em class="jxr_javadoccomment">/** {@inheritDoc} */</em>
<a class="jxr_linenumber" name="L234" href="#L234">234</a>   @Override
<a class="jxr_linenumber" name="L235" href="#L235">235</a>   <strong class="jxr_keyword">protected</strong> <a href="../../../../../../org/apache/commons/math3/ode/sampling/StepInterpolator.html">StepInterpolator</a> doCopy() {
<a class="jxr_linenumber" name="L236" href="#L236">236</a>     <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/ode/nonstiff/GraggBulirschStoerStepInterpolator.html">GraggBulirschStoerStepInterpolator</a>(<strong class="jxr_keyword">this</strong>);
<a class="jxr_linenumber" name="L237" href="#L237">237</a>   }
<a class="jxr_linenumber" name="L238" href="#L238">238</a> 
<a class="jxr_linenumber" name="L239" href="#L239">239</a> 
<a class="jxr_linenumber" name="L240" href="#L240">240</a>   <em class="jxr_javadoccomment">/** Compute the interpolation coefficients for dense output.</em>
<a class="jxr_linenumber" name="L241" href="#L241">241</a> <em class="jxr_javadoccomment">   * @param mu degree of the interpolation polynomial</em>
<a class="jxr_linenumber" name="L242" href="#L242">242</a> <em class="jxr_javadoccomment">   * @param h current step</em>
<a class="jxr_linenumber" name="L243" href="#L243">243</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L244" href="#L244">244</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> computeCoefficients(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> mu, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> h) {
<a class="jxr_linenumber" name="L245" href="#L245">245</a> 
<a class="jxr_linenumber" name="L246" href="#L246">246</a>     <strong class="jxr_keyword">if</strong> ((polynomials == <strong class="jxr_keyword">null</strong>) || (polynomials.length &lt;= (mu + 4))) {
<a class="jxr_linenumber" name="L247" href="#L247">247</a>       resetTables(mu + 4);
<a class="jxr_linenumber" name="L248" href="#L248">248</a>     }
<a class="jxr_linenumber" name="L249" href="#L249">249</a> 
<a class="jxr_linenumber" name="L250" href="#L250">250</a>     currentDegree = mu + 4;
<a class="jxr_linenumber" name="L251" href="#L251">251</a> 
<a class="jxr_linenumber" name="L252" href="#L252">252</a>     <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; currentState.length; ++i) {
<a class="jxr_linenumber" name="L253" href="#L253">253</a> 
<a class="jxr_linenumber" name="L254" href="#L254">254</a>       <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> yp0   = h * y0Dot[i];
<a class="jxr_linenumber" name="L255" href="#L255">255</a>       <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> yp1   = h * y1Dot[i];
<a class="jxr_linenumber" name="L256" href="#L256">256</a>       <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> ydiff = y1[i] - currentState[i];
<a class="jxr_linenumber" name="L257" href="#L257">257</a>       <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> aspl  = ydiff - yp1;
<a class="jxr_linenumber" name="L258" href="#L258">258</a>       <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> bspl  = yp0 - ydiff;
<a class="jxr_linenumber" name="L259" href="#L259">259</a> 
<a class="jxr_linenumber" name="L260" href="#L260">260</a>       polynomials[0][i] = currentState[i];
<a class="jxr_linenumber" name="L261" href="#L261">261</a>       polynomials[1][i] = ydiff;
<a class="jxr_linenumber" name="L262" href="#L262">262</a>       polynomials[2][i] = aspl;
<a class="jxr_linenumber" name="L263" href="#L263">263</a>       polynomials[3][i] = bspl;
<a class="jxr_linenumber" name="L264" href="#L264">264</a> 
<a class="jxr_linenumber" name="L265" href="#L265">265</a>       <strong class="jxr_keyword">if</strong> (mu &lt; 0) {
<a class="jxr_linenumber" name="L266" href="#L266">266</a>         <strong class="jxr_keyword">return</strong>;
<a class="jxr_linenumber" name="L267" href="#L267">267</a>       }
<a class="jxr_linenumber" name="L268" href="#L268">268</a> 
<a class="jxr_linenumber" name="L269" href="#L269">269</a>       <em class="jxr_comment">// compute the remaining coefficients</em>
<a class="jxr_linenumber" name="L270" href="#L270">270</a>       <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> ph0 = 0.5 * (currentState[i] + y1[i]) + 0.125 * (aspl + bspl);
<a class="jxr_linenumber" name="L271" href="#L271">271</a>       polynomials[4][i] = 16 * (yMidDots[0][i] - ph0);
<a class="jxr_linenumber" name="L272" href="#L272">272</a> 
<a class="jxr_linenumber" name="L273" href="#L273">273</a>       <strong class="jxr_keyword">if</strong> (mu &gt; 0) {
<a class="jxr_linenumber" name="L274" href="#L274">274</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> ph1 = ydiff + 0.25 * (aspl - bspl);
<a class="jxr_linenumber" name="L275" href="#L275">275</a>         polynomials[5][i] = 16 * (yMidDots[1][i] - ph1);
<a class="jxr_linenumber" name="L276" href="#L276">276</a> 
<a class="jxr_linenumber" name="L277" href="#L277">277</a>         <strong class="jxr_keyword">if</strong> (mu &gt; 1) {
<a class="jxr_linenumber" name="L278" href="#L278">278</a>           <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> ph2 = yp1 - yp0;
<a class="jxr_linenumber" name="L279" href="#L279">279</a>           polynomials[6][i] = 16 * (yMidDots[2][i] - ph2 + polynomials[4][i]);
<a class="jxr_linenumber" name="L280" href="#L280">280</a> 
<a class="jxr_linenumber" name="L281" href="#L281">281</a>           <strong class="jxr_keyword">if</strong> (mu &gt; 2) {
<a class="jxr_linenumber" name="L282" href="#L282">282</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> ph3 = 6 * (bspl - aspl);
<a class="jxr_linenumber" name="L283" href="#L283">283</a>             polynomials[7][i] = 16 * (yMidDots[3][i] - ph3 + 3 * polynomials[5][i]);
<a class="jxr_linenumber" name="L284" href="#L284">284</a> 
<a class="jxr_linenumber" name="L285" href="#L285">285</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = 4; j &lt;= mu; ++j) {
<a class="jxr_linenumber" name="L286" href="#L286">286</a>               <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> fac1 = 0.5 * j * (j - 1);
<a class="jxr_linenumber" name="L287" href="#L287">287</a>               <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> fac2 = 2 * fac1 * (j - 2) * (j - 3);
<a class="jxr_linenumber" name="L288" href="#L288">288</a>               polynomials[j+4][i] =
<a class="jxr_linenumber" name="L289" href="#L289">289</a>                   16 * (yMidDots[j][i] + fac1 * polynomials[j+2][i] - fac2 * polynomials[j][i]);
<a class="jxr_linenumber" name="L290" href="#L290">290</a>             }
<a class="jxr_linenumber" name="L291" href="#L291">291</a> 
<a class="jxr_linenumber" name="L292" href="#L292">292</a>           }
<a class="jxr_linenumber" name="L293" href="#L293">293</a>         }
<a class="jxr_linenumber" name="L294" href="#L294">294</a>       }
<a class="jxr_linenumber" name="L295" href="#L295">295</a>     }
<a class="jxr_linenumber" name="L296" href="#L296">296</a> 
<a class="jxr_linenumber" name="L297" href="#L297">297</a>   }
<a class="jxr_linenumber" name="L298" href="#L298">298</a> 
<a class="jxr_linenumber" name="L299" href="#L299">299</a>   <em class="jxr_javadoccomment">/** Estimate interpolation error.</em>
<a class="jxr_linenumber" name="L300" href="#L300">300</a> <em class="jxr_javadoccomment">   * @param scale scaling array</em>
<a class="jxr_linenumber" name="L301" href="#L301">301</a> <em class="jxr_javadoccomment">   * @return estimate of the interpolation error</em>
<a class="jxr_linenumber" name="L302" href="#L302">302</a> <em class="jxr_javadoccomment">   */</em>
<a class="jxr_linenumber" name="L303" href="#L303">303</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">double</strong> estimateError(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] scale) {
<a class="jxr_linenumber" name="L304" href="#L304">304</a>     <strong class="jxr_keyword">double</strong> error = 0;
<a class="jxr_linenumber" name="L305" href="#L305">305</a>     <strong class="jxr_keyword">if</strong> (currentDegree &gt;= 5) {
<a class="jxr_linenumber" name="L306" href="#L306">306</a>       <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; scale.length; ++i) {
<a class="jxr_linenumber" name="L307" href="#L307">307</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> e = polynomials[currentDegree][i] / scale[i];
<a class="jxr_linenumber" name="L308" href="#L308">308</a>         error += e * e;
<a class="jxr_linenumber" name="L309" href="#L309">309</a>       }
<a class="jxr_linenumber" name="L310" href="#L310">310</a>       error = FastMath.sqrt(error / scale.length) * errfac[currentDegree - 5];
<a class="jxr_linenumber" name="L311" href="#L311">311</a>     }
<a class="jxr_linenumber" name="L312" href="#L312">312</a>     <strong class="jxr_keyword">return</strong> error;
<a class="jxr_linenumber" name="L313" href="#L313">313</a>   }
<a class="jxr_linenumber" name="L314" href="#L314">314</a> 
<a class="jxr_linenumber" name="L315" href="#L315">315</a>   <em class="jxr_javadoccomment">/** {@inheritDoc} */</em>
<a class="jxr_linenumber" name="L316" href="#L316">316</a>   @Override
<a class="jxr_linenumber" name="L317" href="#L317">317</a>   <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">void</strong> computeInterpolatedStateAndDerivatives(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> theta,
<a class="jxr_linenumber" name="L318" href="#L318">318</a>                                                         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> oneMinusThetaH) {
<a class="jxr_linenumber" name="L319" href="#L319">319</a> 
<a class="jxr_linenumber" name="L320" href="#L320">320</a>     <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> dimension = currentState.length;
<a class="jxr_linenumber" name="L321" href="#L321">321</a> 
<a class="jxr_linenumber" name="L322" href="#L322">322</a>     <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> oneMinusTheta = 1.0 - theta;
<a class="jxr_linenumber" name="L323" href="#L323">323</a>     <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> theta05       = theta - 0.5;
<a class="jxr_linenumber" name="L324" href="#L324">324</a>     <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> tOmT          = theta * oneMinusTheta;
<a class="jxr_linenumber" name="L325" href="#L325">325</a>     <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> t4            = tOmT * tOmT;
<a class="jxr_linenumber" name="L326" href="#L326">326</a>     <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> t4Dot         = 2 * tOmT * (1 - 2 * theta);
<a class="jxr_linenumber" name="L327" href="#L327">327</a>     <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> dot1          = 1.0 / h;
<a class="jxr_linenumber" name="L328" href="#L328">328</a>     <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> dot2          = theta * (2 - 3 * theta) / h;
<a class="jxr_linenumber" name="L329" href="#L329">329</a>     <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> dot3          = ((3 * theta - 4) * theta + 1) / h;
<a class="jxr_linenumber" name="L330" href="#L330">330</a> 
<a class="jxr_linenumber" name="L331" href="#L331">331</a>     <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; dimension; ++i) {
<a class="jxr_linenumber" name="L332" href="#L332">332</a> 
<a class="jxr_linenumber" name="L333" href="#L333">333</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> p0 = polynomials[0][i];
<a class="jxr_linenumber" name="L334" href="#L334">334</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> p1 = polynomials[1][i];
<a class="jxr_linenumber" name="L335" href="#L335">335</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> p2 = polynomials[2][i];
<a class="jxr_linenumber" name="L336" href="#L336">336</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> p3 = polynomials[3][i];
<a class="jxr_linenumber" name="L337" href="#L337">337</a>         interpolatedState[i] = p0 + theta * (p1 + oneMinusTheta * (p2 * theta + p3 * oneMinusTheta));
<a class="jxr_linenumber" name="L338" href="#L338">338</a>         interpolatedDerivatives[i] = dot1 * p1 + dot2 * p2 + dot3 * p3;
<a class="jxr_linenumber" name="L339" href="#L339">339</a> 
<a class="jxr_linenumber" name="L340" href="#L340">340</a>         <strong class="jxr_keyword">if</strong> (currentDegree &gt; 3) {
<a class="jxr_linenumber" name="L341" href="#L341">341</a>             <strong class="jxr_keyword">double</strong> cDot = 0;
<a class="jxr_linenumber" name="L342" href="#L342">342</a>             <strong class="jxr_keyword">double</strong> c = polynomials[currentDegree][i];
<a class="jxr_linenumber" name="L343" href="#L343">343</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = currentDegree - 1; j &gt; 3; --j) {
<a class="jxr_linenumber" name="L344" href="#L344">344</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> d = 1.0 / (j - 3);
<a class="jxr_linenumber" name="L345" href="#L345">345</a>                 cDot = d * (theta05 * cDot + c);
<a class="jxr_linenumber" name="L346" href="#L346">346</a>                 c = polynomials[j][i] + c * d * theta05;
<a class="jxr_linenumber" name="L347" href="#L347">347</a>             }
<a class="jxr_linenumber" name="L348" href="#L348">348</a>             interpolatedState[i]       += t4 * c;
<a class="jxr_linenumber" name="L349" href="#L349">349</a>             interpolatedDerivatives[i] += (t4 * cDot + t4Dot * c) / h;
<a class="jxr_linenumber" name="L350" href="#L350">350</a>         }
<a class="jxr_linenumber" name="L351" href="#L351">351</a> 
<a class="jxr_linenumber" name="L352" href="#L352">352</a>     }
<a class="jxr_linenumber" name="L353" href="#L353">353</a> 
<a class="jxr_linenumber" name="L354" href="#L354">354</a>     <strong class="jxr_keyword">if</strong> (h == 0) {
<a class="jxr_linenumber" name="L355" href="#L355">355</a>         <em class="jxr_comment">// in this degenerated case, the previous computation leads to NaN for derivatives</em>
<a class="jxr_linenumber" name="L356" href="#L356">356</a>         <em class="jxr_comment">// we fix this by using the derivatives at midpoint</em>
<a class="jxr_linenumber" name="L357" href="#L357">357</a>         System.arraycopy(yMidDots[1], 0, interpolatedDerivatives, 0, dimension);
<a class="jxr_linenumber" name="L358" href="#L358">358</a>     }
<a class="jxr_linenumber" name="L359" href="#L359">359</a> 
<a class="jxr_linenumber" name="L360" href="#L360">360</a>   }
<a class="jxr_linenumber" name="L361" href="#L361">361</a> 
<a class="jxr_linenumber" name="L362" href="#L362">362</a>   <em class="jxr_javadoccomment">/** {@inheritDoc} */</em>
<a class="jxr_linenumber" name="L363" href="#L363">363</a>   @Override
<a class="jxr_linenumber" name="L364" href="#L364">364</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> writeExternal(<strong class="jxr_keyword">final</strong> ObjectOutput out)
<a class="jxr_linenumber" name="L365" href="#L365">365</a>     <strong class="jxr_keyword">throws</strong> IOException {
<a class="jxr_linenumber" name="L366" href="#L366">366</a> 
<a class="jxr_linenumber" name="L367" href="#L367">367</a>     <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> dimension = (currentState == <strong class="jxr_keyword">null</strong>) ? -1 : currentState.length;
<a class="jxr_linenumber" name="L368" href="#L368">368</a> 
<a class="jxr_linenumber" name="L369" href="#L369">369</a>     <em class="jxr_comment">// save the state of the base class</em>
<a class="jxr_linenumber" name="L370" href="#L370">370</a>     writeBaseExternal(out);
<a class="jxr_linenumber" name="L371" href="#L371">371</a> 
<a class="jxr_linenumber" name="L372" href="#L372">372</a>     <em class="jxr_comment">// save the local attributes (but not the temporary vectors)</em>
<a class="jxr_linenumber" name="L373" href="#L373">373</a>     out.writeInt(currentDegree);
<a class="jxr_linenumber" name="L374" href="#L374">374</a>     <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> k = 0; k &lt;= currentDegree; ++k) {
<a class="jxr_linenumber" name="L375" href="#L375">375</a>       <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> l = 0; l &lt; dimension; ++l) {
<a class="jxr_linenumber" name="L376" href="#L376">376</a>         out.writeDouble(polynomials[k][l]);
<a class="jxr_linenumber" name="L377" href="#L377">377</a>       }
<a class="jxr_linenumber" name="L378" href="#L378">378</a>     }
<a class="jxr_linenumber" name="L379" href="#L379">379</a> 
<a class="jxr_linenumber" name="L380" href="#L380">380</a>   }
<a class="jxr_linenumber" name="L381" href="#L381">381</a> 
<a class="jxr_linenumber" name="L382" href="#L382">382</a>   <em class="jxr_javadoccomment">/** {@inheritDoc} */</em>
<a class="jxr_linenumber" name="L383" href="#L383">383</a>   @Override
<a class="jxr_linenumber" name="L384" href="#L384">384</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> readExternal(<strong class="jxr_keyword">final</strong> ObjectInput in)
<a class="jxr_linenumber" name="L385" href="#L385">385</a>     <strong class="jxr_keyword">throws</strong> IOException, ClassNotFoundException {
<a class="jxr_linenumber" name="L386" href="#L386">386</a> 
<a class="jxr_linenumber" name="L387" href="#L387">387</a>     <em class="jxr_comment">// read the base class</em>
<a class="jxr_linenumber" name="L388" href="#L388">388</a>     <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> t = readBaseExternal(in);
<a class="jxr_linenumber" name="L389" href="#L389">389</a>     <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> dimension = (currentState == <strong class="jxr_keyword">null</strong>) ? -1 : currentState.length;
<a class="jxr_linenumber" name="L390" href="#L390">390</a> 
<a class="jxr_linenumber" name="L391" href="#L391">391</a>     <em class="jxr_comment">// read the local attributes</em>
<a class="jxr_linenumber" name="L392" href="#L392">392</a>     <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> degree = in.readInt();
<a class="jxr_linenumber" name="L393" href="#L393">393</a>     resetTables(degree);
<a class="jxr_linenumber" name="L394" href="#L394">394</a>     currentDegree = degree;
<a class="jxr_linenumber" name="L395" href="#L395">395</a> 
<a class="jxr_linenumber" name="L396" href="#L396">396</a>     <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> k = 0; k &lt;= currentDegree; ++k) {
<a class="jxr_linenumber" name="L397" href="#L397">397</a>       <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> l = 0; l &lt; dimension; ++l) {
<a class="jxr_linenumber" name="L398" href="#L398">398</a>         polynomials[k][l] = in.readDouble();
<a class="jxr_linenumber" name="L399" href="#L399">399</a>       }
<a class="jxr_linenumber" name="L400" href="#L400">400</a>     }
<a class="jxr_linenumber" name="L401" href="#L401">401</a> 
<a class="jxr_linenumber" name="L402" href="#L402">402</a>     <em class="jxr_comment">// we can now set the interpolated time and state</em>
<a class="jxr_linenumber" name="L403" href="#L403">403</a>     setInterpolatedTime(t);
<a class="jxr_linenumber" name="L404" href="#L404">404</a> 
<a class="jxr_linenumber" name="L405" href="#L405">405</a>   }
<a class="jxr_linenumber" name="L406" href="#L406">406</a> 
<a class="jxr_linenumber" name="L407" href="#L407">407</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2003&#x2013;2016 <a href="http://www.apache.org/">The Apache Software Foundation</a>. All rights reserved.</div>
</body>
</html>
