<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span>package org.apache.commons.math3.geometry.spherical.twod;<a name="line.17"></a>
<span class="sourceLineNo">018</span><a name="line.18"></a>
<span class="sourceLineNo">019</span>import org.apache.commons.math3.geometry.euclidean.threed.Rotation;<a name="line.19"></a>
<span class="sourceLineNo">020</span>import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;<a name="line.20"></a>
<span class="sourceLineNo">021</span>import org.apache.commons.math3.geometry.partitioning.Transform;<a name="line.21"></a>
<span class="sourceLineNo">022</span>import org.apache.commons.math3.geometry.spherical.oned.Arc;<a name="line.22"></a>
<span class="sourceLineNo">023</span>import org.apache.commons.math3.geometry.spherical.oned.LimitAngle;<a name="line.23"></a>
<span class="sourceLineNo">024</span>import org.apache.commons.math3.geometry.spherical.oned.S1Point;<a name="line.24"></a>
<span class="sourceLineNo">025</span>import org.apache.commons.math3.geometry.spherical.oned.Sphere1D;<a name="line.25"></a>
<span class="sourceLineNo">026</span>import org.apache.commons.math3.geometry.spherical.oned.SubLimitAngle;<a name="line.26"></a>
<span class="sourceLineNo">027</span>import org.apache.commons.math3.random.RandomGenerator;<a name="line.27"></a>
<span class="sourceLineNo">028</span>import org.apache.commons.math3.random.UnitSphereRandomVectorGenerator;<a name="line.28"></a>
<span class="sourceLineNo">029</span>import org.apache.commons.math3.random.Well1024a;<a name="line.29"></a>
<span class="sourceLineNo">030</span>import org.apache.commons.math3.util.FastMath;<a name="line.30"></a>
<span class="sourceLineNo">031</span>import org.apache.commons.math3.util.MathUtils;<a name="line.31"></a>
<span class="sourceLineNo">032</span>import org.junit.Assert;<a name="line.32"></a>
<span class="sourceLineNo">033</span>import org.junit.Test;<a name="line.33"></a>
<span class="sourceLineNo">034</span><a name="line.34"></a>
<span class="sourceLineNo">035</span>public class CircleTest {<a name="line.35"></a>
<span class="sourceLineNo">036</span><a name="line.36"></a>
<span class="sourceLineNo">037</span>    @Test<a name="line.37"></a>
<span class="sourceLineNo">038</span>    public void testEquator() {<a name="line.38"></a>
<span class="sourceLineNo">039</span>        Circle circle = new Circle(new Vector3D(0, 0, 1000), 1.0e-10).copySelf();<a name="line.39"></a>
<span class="sourceLineNo">040</span>        Assert.assertEquals(Vector3D.PLUS_K, circle.getPole());<a name="line.40"></a>
<span class="sourceLineNo">041</span>        Assert.assertEquals(1.0e-10, circle.getTolerance(), 1.0e-20);<a name="line.41"></a>
<span class="sourceLineNo">042</span>        circle.revertSelf();<a name="line.42"></a>
<span class="sourceLineNo">043</span>        Assert.assertEquals(Vector3D.MINUS_K, circle.getPole());<a name="line.43"></a>
<span class="sourceLineNo">044</span>        Assert.assertEquals(Vector3D.PLUS_K, circle.getReverse().getPole());<a name="line.44"></a>
<span class="sourceLineNo">045</span>        Assert.assertEquals(Vector3D.MINUS_K, circle.getPole());<a name="line.45"></a>
<span class="sourceLineNo">046</span>    }<a name="line.46"></a>
<span class="sourceLineNo">047</span><a name="line.47"></a>
<span class="sourceLineNo">048</span>    @Test<a name="line.48"></a>
<span class="sourceLineNo">049</span>    public void testXY() {<a name="line.49"></a>
<span class="sourceLineNo">050</span>        Circle circle = new Circle(new S2Point(1.2, 2.5), new S2Point(-4.3, 0), 1.0e-10);<a name="line.50"></a>
<span class="sourceLineNo">051</span>        Assert.assertEquals(0.0, circle.getPointAt(0).distance(circle.getXAxis()), 1.0e-10);<a name="line.51"></a>
<span class="sourceLineNo">052</span>        Assert.assertEquals(0.0, circle.getPointAt(0.5 * FastMath.PI).distance(circle.getYAxis()), 1.0e-10);<a name="line.52"></a>
<span class="sourceLineNo">053</span>        Assert.assertEquals(0.5 * FastMath.PI, Vector3D.angle(circle.getXAxis(), circle.getYAxis()), 1.0e-10);<a name="line.53"></a>
<span class="sourceLineNo">054</span>        Assert.assertEquals(0.5 * FastMath.PI, Vector3D.angle(circle.getXAxis(), circle.getPole()), 1.0e-10);<a name="line.54"></a>
<span class="sourceLineNo">055</span>        Assert.assertEquals(0.5 * FastMath.PI, Vector3D.angle(circle.getPole(), circle.getYAxis()), 1.0e-10);<a name="line.55"></a>
<span class="sourceLineNo">056</span>        Assert.assertEquals(0.0,<a name="line.56"></a>
<span class="sourceLineNo">057</span>                            circle.getPole().distance(Vector3D.crossProduct(circle.getXAxis(), circle.getYAxis())),<a name="line.57"></a>
<span class="sourceLineNo">058</span>                            1.0e-10);<a name="line.58"></a>
<span class="sourceLineNo">059</span>    }<a name="line.59"></a>
<span class="sourceLineNo">060</span><a name="line.60"></a>
<span class="sourceLineNo">061</span>    @Test<a name="line.61"></a>
<span class="sourceLineNo">062</span>    public void testReverse() {<a name="line.62"></a>
<span class="sourceLineNo">063</span>        Circle circle = new Circle(new S2Point(1.2, 2.5), new S2Point(-4.3, 0), 1.0e-10);<a name="line.63"></a>
<span class="sourceLineNo">064</span>        Circle reversed = circle.getReverse();<a name="line.64"></a>
<span class="sourceLineNo">065</span>        Assert.assertEquals(0.0, reversed.getPointAt(0).distance(reversed.getXAxis()), 1.0e-10);<a name="line.65"></a>
<span class="sourceLineNo">066</span>        Assert.assertEquals(0.0, reversed.getPointAt(0.5 * FastMath.PI).distance(reversed.getYAxis()), 1.0e-10);<a name="line.66"></a>
<span class="sourceLineNo">067</span>        Assert.assertEquals(0.5 * FastMath.PI, Vector3D.angle(reversed.getXAxis(), reversed.getYAxis()), 1.0e-10);<a name="line.67"></a>
<span class="sourceLineNo">068</span>        Assert.assertEquals(0.5 * FastMath.PI, Vector3D.angle(reversed.getXAxis(), reversed.getPole()), 1.0e-10);<a name="line.68"></a>
<span class="sourceLineNo">069</span>        Assert.assertEquals(0.5 * FastMath.PI, Vector3D.angle(reversed.getPole(), reversed.getYAxis()), 1.0e-10);<a name="line.69"></a>
<span class="sourceLineNo">070</span>        Assert.assertEquals(0.0,<a name="line.70"></a>
<span class="sourceLineNo">071</span>                            reversed.getPole().distance(Vector3D.crossProduct(reversed.getXAxis(), reversed.getYAxis())),<a name="line.71"></a>
<span class="sourceLineNo">072</span>                            1.0e-10);<a name="line.72"></a>
<span class="sourceLineNo">073</span><a name="line.73"></a>
<span class="sourceLineNo">074</span>        Assert.assertEquals(0, Vector3D.angle(circle.getXAxis(), reversed.getXAxis()), 1.0e-10);<a name="line.74"></a>
<span class="sourceLineNo">075</span>        Assert.assertEquals(FastMath.PI, Vector3D.angle(circle.getYAxis(), reversed.getYAxis()), 1.0e-10);<a name="line.75"></a>
<span class="sourceLineNo">076</span>        Assert.assertEquals(FastMath.PI, Vector3D.angle(circle.getPole(), reversed.getPole()), 1.0e-10);<a name="line.76"></a>
<span class="sourceLineNo">077</span><a name="line.77"></a>
<span class="sourceLineNo">078</span>        Assert.assertTrue(circle.sameOrientationAs(circle));<a name="line.78"></a>
<span class="sourceLineNo">079</span>        Assert.assertFalse(circle.sameOrientationAs(reversed));<a name="line.79"></a>
<span class="sourceLineNo">080</span><a name="line.80"></a>
<span class="sourceLineNo">081</span>    }<a name="line.81"></a>
<span class="sourceLineNo">082</span><a name="line.82"></a>
<span class="sourceLineNo">083</span>    @Test<a name="line.83"></a>
<span class="sourceLineNo">084</span>    public void testPhase() {<a name="line.84"></a>
<span class="sourceLineNo">085</span>        Circle circle = new Circle(new S2Point(1.2, 2.5), new S2Point(-4.3, 0), 1.0e-10);<a name="line.85"></a>
<span class="sourceLineNo">086</span>        Vector3D p = new Vector3D(1, 2, -4);<a name="line.86"></a>
<span class="sourceLineNo">087</span>        Vector3D samePhase = circle.getPointAt(circle.getPhase(p));<a name="line.87"></a>
<span class="sourceLineNo">088</span>        Assert.assertEquals(0.0,<a name="line.88"></a>
<span class="sourceLineNo">089</span>                            Vector3D.angle(Vector3D.crossProduct(circle.getPole(), p),<a name="line.89"></a>
<span class="sourceLineNo">090</span>                                           Vector3D.crossProduct(circle.getPole(), samePhase)),<a name="line.90"></a>
<span class="sourceLineNo">091</span>                            1.0e-10);<a name="line.91"></a>
<span class="sourceLineNo">092</span>        Assert.assertEquals(0.5 * FastMath.PI, Vector3D.angle(circle.getPole(), samePhase), 1.0e-10);<a name="line.92"></a>
<span class="sourceLineNo">093</span>        Assert.assertEquals(circle.getPhase(p), circle.getPhase(samePhase), 1.0e-10);<a name="line.93"></a>
<span class="sourceLineNo">094</span>        Assert.assertEquals(0.0, circle.getPhase(circle.getXAxis()), 1.0e-10);<a name="line.94"></a>
<span class="sourceLineNo">095</span>        Assert.assertEquals(0.5 * FastMath.PI, circle.getPhase(circle.getYAxis()), 1.0e-10);<a name="line.95"></a>
<span class="sourceLineNo">096</span>        <a name="line.96"></a>
<span class="sourceLineNo">097</span>    }<a name="line.97"></a>
<span class="sourceLineNo">098</span><a name="line.98"></a>
<span class="sourceLineNo">099</span>    @Test<a name="line.99"></a>
<span class="sourceLineNo">100</span>    public void testSubSpace() {<a name="line.100"></a>
<span class="sourceLineNo">101</span>        Circle circle = new Circle(new S2Point(1.2, 2.5), new S2Point(-4.3, 0), 1.0e-10);<a name="line.101"></a>
<span class="sourceLineNo">102</span>        Assert.assertEquals(0.0, circle.toSubSpace(new S2Point(circle.getXAxis())).getAlpha(), 1.0e-10);<a name="line.102"></a>
<span class="sourceLineNo">103</span>        Assert.assertEquals(0.5 * FastMath.PI, circle.toSubSpace(new S2Point(circle.getYAxis())).getAlpha(), 1.0e-10);<a name="line.103"></a>
<span class="sourceLineNo">104</span>        Vector3D p = new Vector3D(1, 2, -4);<a name="line.104"></a>
<span class="sourceLineNo">105</span>        Assert.assertEquals(circle.getPhase(p), circle.toSubSpace(new S2Point(p)).getAlpha(), 1.0e-10);<a name="line.105"></a>
<span class="sourceLineNo">106</span>    }<a name="line.106"></a>
<span class="sourceLineNo">107</span><a name="line.107"></a>
<span class="sourceLineNo">108</span>    @Test<a name="line.108"></a>
<span class="sourceLineNo">109</span>    public void testSpace() {<a name="line.109"></a>
<span class="sourceLineNo">110</span>        Circle circle = new Circle(new S2Point(1.2, 2.5), new S2Point(-4.3, 0), 1.0e-10);<a name="line.110"></a>
<span class="sourceLineNo">111</span>        for (double alpha = 0; alpha &lt; MathUtils.TWO_PI; alpha += 0.1) {<a name="line.111"></a>
<span class="sourceLineNo">112</span>            Vector3D p = new Vector3D(FastMath.cos(alpha), circle.getXAxis(),<a name="line.112"></a>
<span class="sourceLineNo">113</span>                                      FastMath.sin(alpha), circle.getYAxis());<a name="line.113"></a>
<span class="sourceLineNo">114</span>            Vector3D q = circle.toSpace(new S1Point(alpha)).getVector();<a name="line.114"></a>
<span class="sourceLineNo">115</span>            Assert.assertEquals(0.0, p.distance(q), 1.0e-10);<a name="line.115"></a>
<span class="sourceLineNo">116</span>            Assert.assertEquals(0.5 * FastMath.PI, Vector3D.angle(circle.getPole(), q), 1.0e-10);<a name="line.116"></a>
<span class="sourceLineNo">117</span>        }<a name="line.117"></a>
<span class="sourceLineNo">118</span>    }<a name="line.118"></a>
<span class="sourceLineNo">119</span><a name="line.119"></a>
<span class="sourceLineNo">120</span>    @Test<a name="line.120"></a>
<span class="sourceLineNo">121</span>    public void testOffset() {<a name="line.121"></a>
<span class="sourceLineNo">122</span>        Circle circle = new Circle(Vector3D.PLUS_K, 1.0e-10);<a name="line.122"></a>
<span class="sourceLineNo">123</span>        Assert.assertEquals(0.0,                circle.getOffset(new S2Point(Vector3D.PLUS_I)),  1.0e-10);<a name="line.123"></a>
<span class="sourceLineNo">124</span>        Assert.assertEquals(0.0,                circle.getOffset(new S2Point(Vector3D.MINUS_I)), 1.0e-10);<a name="line.124"></a>
<span class="sourceLineNo">125</span>        Assert.assertEquals(0.0,                circle.getOffset(new S2Point(Vector3D.PLUS_J)),  1.0e-10);<a name="line.125"></a>
<span class="sourceLineNo">126</span>        Assert.assertEquals(0.0,                circle.getOffset(new S2Point(Vector3D.MINUS_J)), 1.0e-10);<a name="line.126"></a>
<span class="sourceLineNo">127</span>        Assert.assertEquals(-0.5 * FastMath.PI, circle.getOffset(new S2Point(Vector3D.PLUS_K)),  1.0e-10);<a name="line.127"></a>
<span class="sourceLineNo">128</span>        Assert.assertEquals( 0.5 * FastMath.PI, circle.getOffset(new S2Point(Vector3D.MINUS_K)), 1.0e-10);<a name="line.128"></a>
<span class="sourceLineNo">129</span>        <a name="line.129"></a>
<span class="sourceLineNo">130</span>    }<a name="line.130"></a>
<span class="sourceLineNo">131</span><a name="line.131"></a>
<span class="sourceLineNo">132</span>    @Test<a name="line.132"></a>
<span class="sourceLineNo">133</span>    public void testInsideArc() {<a name="line.133"></a>
<span class="sourceLineNo">134</span>        RandomGenerator random = new Well1024a(0xbfd34e92231bbcfel);<a name="line.134"></a>
<span class="sourceLineNo">135</span>        UnitSphereRandomVectorGenerator sphRandom = new UnitSphereRandomVectorGenerator(3, random);<a name="line.135"></a>
<span class="sourceLineNo">136</span>        for (int i = 0; i &lt; 100; ++i) {<a name="line.136"></a>
<span class="sourceLineNo">137</span>            Circle c1 = new Circle(new Vector3D(sphRandom.nextVector()), 1.0e-10);<a name="line.137"></a>
<span class="sourceLineNo">138</span>            Circle c2 = new Circle(new Vector3D(sphRandom.nextVector()), 1.0e-10);<a name="line.138"></a>
<span class="sourceLineNo">139</span>            checkArcIsInside(c1, c2);<a name="line.139"></a>
<span class="sourceLineNo">140</span>            checkArcIsInside(c2, c1);<a name="line.140"></a>
<span class="sourceLineNo">141</span>        }<a name="line.141"></a>
<span class="sourceLineNo">142</span>    }<a name="line.142"></a>
<span class="sourceLineNo">143</span><a name="line.143"></a>
<span class="sourceLineNo">144</span>    private void checkArcIsInside(final Circle arcCircle, final Circle otherCircle) {<a name="line.144"></a>
<span class="sourceLineNo">145</span>        Arc arc = arcCircle.getInsideArc(otherCircle);<a name="line.145"></a>
<span class="sourceLineNo">146</span>        Assert.assertEquals(FastMath.PI, arc.getSize(), 1.0e-10);<a name="line.146"></a>
<span class="sourceLineNo">147</span>        for (double alpha = arc.getInf(); alpha &lt; arc.getSup(); alpha += 0.1) {<a name="line.147"></a>
<span class="sourceLineNo">148</span>            Assert.assertTrue(otherCircle.getOffset(arcCircle.getPointAt(alpha)) &lt;= 2.0e-15);<a name="line.148"></a>
<span class="sourceLineNo">149</span>        }<a name="line.149"></a>
<span class="sourceLineNo">150</span>        for (double alpha = arc.getSup(); alpha &lt; arc.getInf() + MathUtils.TWO_PI; alpha += 0.1) {<a name="line.150"></a>
<span class="sourceLineNo">151</span>            Assert.assertTrue(otherCircle.getOffset(arcCircle.getPointAt(alpha)) &gt;= -2.0e-15);<a name="line.151"></a>
<span class="sourceLineNo">152</span>        }<a name="line.152"></a>
<span class="sourceLineNo">153</span>    }<a name="line.153"></a>
<span class="sourceLineNo">154</span><a name="line.154"></a>
<span class="sourceLineNo">155</span>    @Test<a name="line.155"></a>
<span class="sourceLineNo">156</span>    public void testTransform() {<a name="line.156"></a>
<span class="sourceLineNo">157</span>        RandomGenerator random = new Well1024a(0x16992fc4294bf2f1l);<a name="line.157"></a>
<span class="sourceLineNo">158</span>        UnitSphereRandomVectorGenerator sphRandom = new UnitSphereRandomVectorGenerator(3, random);<a name="line.158"></a>
<span class="sourceLineNo">159</span>        for (int i = 0; i &lt; 100; ++i) {<a name="line.159"></a>
<span class="sourceLineNo">160</span><a name="line.160"></a>
<span class="sourceLineNo">161</span>            Rotation r = new Rotation(new Vector3D(sphRandom.nextVector()),<a name="line.161"></a>
<span class="sourceLineNo">162</span>                                      FastMath.PI * random.nextDouble());<a name="line.162"></a>
<span class="sourceLineNo">163</span>            Transform&lt;Sphere2D, Sphere1D&gt; t = Circle.getTransform(r);<a name="line.163"></a>
<span class="sourceLineNo">164</span><a name="line.164"></a>
<span class="sourceLineNo">165</span>            S2Point  p = new S2Point(new Vector3D(sphRandom.nextVector()));<a name="line.165"></a>
<span class="sourceLineNo">166</span>            S2Point tp = (S2Point) t.apply(p);<a name="line.166"></a>
<span class="sourceLineNo">167</span>            Assert.assertEquals(0.0, r.applyTo(p.getVector()).distance(tp.getVector()), 1.0e-10);<a name="line.167"></a>
<span class="sourceLineNo">168</span><a name="line.168"></a>
<span class="sourceLineNo">169</span>            Circle  c = new Circle(new Vector3D(sphRandom.nextVector()), 1.0e-10);<a name="line.169"></a>
<span class="sourceLineNo">170</span>            Circle tc = (Circle) t.apply(c);<a name="line.170"></a>
<span class="sourceLineNo">171</span>            Assert.assertEquals(0.0, r.applyTo(c.getPole()).distance(tc.getPole()),   1.0e-10);<a name="line.171"></a>
<span class="sourceLineNo">172</span>            Assert.assertEquals(0.0, r.applyTo(c.getXAxis()).distance(tc.getXAxis()), 1.0e-10);<a name="line.172"></a>
<span class="sourceLineNo">173</span>            Assert.assertEquals(0.0, r.applyTo(c.getYAxis()).distance(tc.getYAxis()), 1.0e-10);<a name="line.173"></a>
<span class="sourceLineNo">174</span>            Assert.assertEquals(c.getTolerance(), ((Circle) t.apply(c)).getTolerance(), 1.0e-10);<a name="line.174"></a>
<span class="sourceLineNo">175</span><a name="line.175"></a>
<span class="sourceLineNo">176</span>            SubLimitAngle  sub = new LimitAngle(new S1Point(MathUtils.TWO_PI * random.nextDouble()),<a name="line.176"></a>
<span class="sourceLineNo">177</span>                                                random.nextBoolean(), 1.0e-10).wholeHyperplane();<a name="line.177"></a>
<span class="sourceLineNo">178</span>            Vector3D psub = c.getPointAt(((LimitAngle) sub.getHyperplane()).getLocation().getAlpha());<a name="line.178"></a>
<span class="sourceLineNo">179</span>            SubLimitAngle tsub = (SubLimitAngle) t.apply(sub, c, tc);<a name="line.179"></a>
<span class="sourceLineNo">180</span>            Vector3D ptsub = tc.getPointAt(((LimitAngle) tsub.getHyperplane()).getLocation().getAlpha());<a name="line.180"></a>
<span class="sourceLineNo">181</span>            Assert.assertEquals(0.0, r.applyTo(psub).distance(ptsub), 1.0e-10);<a name="line.181"></a>
<span class="sourceLineNo">182</span><a name="line.182"></a>
<span class="sourceLineNo">183</span>        }<a name="line.183"></a>
<span class="sourceLineNo">184</span>    }<a name="line.184"></a>
<span class="sourceLineNo">185</span><a name="line.185"></a>
<span class="sourceLineNo">186</span>}<a name="line.186"></a>




























































</pre>
</div>
</body>
</html>
