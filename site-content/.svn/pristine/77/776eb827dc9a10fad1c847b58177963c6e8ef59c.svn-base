<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span>package org.apache.commons.math3.analysis.integration;<a name="line.17"></a>
<span class="sourceLineNo">018</span><a name="line.18"></a>
<span class="sourceLineNo">019</span>import java.util.Random;<a name="line.19"></a>
<span class="sourceLineNo">020</span><a name="line.20"></a>
<span class="sourceLineNo">021</span>import org.apache.commons.math3.analysis.QuinticFunction;<a name="line.21"></a>
<span class="sourceLineNo">022</span>import org.apache.commons.math3.analysis.UnivariateFunction;<a name="line.22"></a>
<span class="sourceLineNo">023</span>import org.apache.commons.math3.analysis.function.Sin;<a name="line.23"></a>
<span class="sourceLineNo">024</span>import org.apache.commons.math3.analysis.polynomials.PolynomialFunction;<a name="line.24"></a>
<span class="sourceLineNo">025</span>import org.apache.commons.math3.exception.TooManyEvaluationsException;<a name="line.25"></a>
<span class="sourceLineNo">026</span>import org.apache.commons.math3.util.FastMath;<a name="line.26"></a>
<span class="sourceLineNo">027</span>import org.junit.Assert;<a name="line.27"></a>
<span class="sourceLineNo">028</span>import org.junit.Test;<a name="line.28"></a>
<span class="sourceLineNo">029</span><a name="line.29"></a>
<span class="sourceLineNo">030</span><a name="line.30"></a>
<span class="sourceLineNo">031</span>@Deprecated<a name="line.31"></a>
<span class="sourceLineNo">032</span>public class LegendreGaussIntegratorTest {<a name="line.32"></a>
<span class="sourceLineNo">033</span><a name="line.33"></a>
<span class="sourceLineNo">034</span>    @Test<a name="line.34"></a>
<span class="sourceLineNo">035</span>    public void testSinFunction() {<a name="line.35"></a>
<span class="sourceLineNo">036</span>        UnivariateFunction f = new Sin();<a name="line.36"></a>
<span class="sourceLineNo">037</span>        BaseAbstractUnivariateIntegrator integrator = new LegendreGaussIntegrator(5, 1.0e-14, 1.0e-10, 2, 15);<a name="line.37"></a>
<span class="sourceLineNo">038</span>        double min, max, expected, result, tolerance;<a name="line.38"></a>
<span class="sourceLineNo">039</span><a name="line.39"></a>
<span class="sourceLineNo">040</span>        min = 0; max = FastMath.PI; expected = 2;<a name="line.40"></a>
<span class="sourceLineNo">041</span>        tolerance = FastMath.max(integrator.getAbsoluteAccuracy(),<a name="line.41"></a>
<span class="sourceLineNo">042</span>                             FastMath.abs(expected * integrator.getRelativeAccuracy()));<a name="line.42"></a>
<span class="sourceLineNo">043</span>        result = integrator.integrate(10000, f, min, max);<a name="line.43"></a>
<span class="sourceLineNo">044</span>        Assert.assertEquals(expected, result, tolerance);<a name="line.44"></a>
<span class="sourceLineNo">045</span><a name="line.45"></a>
<span class="sourceLineNo">046</span>        min = -FastMath.PI/3; max = 0; expected = -0.5;<a name="line.46"></a>
<span class="sourceLineNo">047</span>        tolerance = FastMath.max(integrator.getAbsoluteAccuracy(),<a name="line.47"></a>
<span class="sourceLineNo">048</span>                FastMath.abs(expected * integrator.getRelativeAccuracy()));<a name="line.48"></a>
<span class="sourceLineNo">049</span>        result = integrator.integrate(10000, f, min, max);<a name="line.49"></a>
<span class="sourceLineNo">050</span>        Assert.assertEquals(expected, result, tolerance);<a name="line.50"></a>
<span class="sourceLineNo">051</span>    }<a name="line.51"></a>
<span class="sourceLineNo">052</span><a name="line.52"></a>
<span class="sourceLineNo">053</span>    @Test<a name="line.53"></a>
<span class="sourceLineNo">054</span>    public void testQuinticFunction() {<a name="line.54"></a>
<span class="sourceLineNo">055</span>        UnivariateFunction f = new QuinticFunction();<a name="line.55"></a>
<span class="sourceLineNo">056</span>        UnivariateIntegrator integrator =<a name="line.56"></a>
<span class="sourceLineNo">057</span>                new LegendreGaussIntegrator(3,<a name="line.57"></a>
<span class="sourceLineNo">058</span>                                            BaseAbstractUnivariateIntegrator.DEFAULT_RELATIVE_ACCURACY,<a name="line.58"></a>
<span class="sourceLineNo">059</span>                                            BaseAbstractUnivariateIntegrator.DEFAULT_ABSOLUTE_ACCURACY,<a name="line.59"></a>
<span class="sourceLineNo">060</span>                                            BaseAbstractUnivariateIntegrator.DEFAULT_MIN_ITERATIONS_COUNT,<a name="line.60"></a>
<span class="sourceLineNo">061</span>                                            64);<a name="line.61"></a>
<span class="sourceLineNo">062</span>        double min, max, expected, result;<a name="line.62"></a>
<span class="sourceLineNo">063</span><a name="line.63"></a>
<span class="sourceLineNo">064</span>        min = 0; max = 1; expected = -1.0/48;<a name="line.64"></a>
<span class="sourceLineNo">065</span>        result = integrator.integrate(10000, f, min, max);<a name="line.65"></a>
<span class="sourceLineNo">066</span>        Assert.assertEquals(expected, result, 1.0e-16);<a name="line.66"></a>
<span class="sourceLineNo">067</span><a name="line.67"></a>
<span class="sourceLineNo">068</span>        min = 0; max = 0.5; expected = 11.0/768;<a name="line.68"></a>
<span class="sourceLineNo">069</span>        result = integrator.integrate(10000, f, min, max);<a name="line.69"></a>
<span class="sourceLineNo">070</span>        Assert.assertEquals(expected, result, 1.0e-16);<a name="line.70"></a>
<span class="sourceLineNo">071</span><a name="line.71"></a>
<span class="sourceLineNo">072</span>        min = -1; max = 4; expected = 2048/3.0 - 78 + 1.0/48;<a name="line.72"></a>
<span class="sourceLineNo">073</span>        result = integrator.integrate(10000, f, min, max);<a name="line.73"></a>
<span class="sourceLineNo">074</span>        Assert.assertEquals(expected, result, 1.0e-16);<a name="line.74"></a>
<span class="sourceLineNo">075</span>    }<a name="line.75"></a>
<span class="sourceLineNo">076</span><a name="line.76"></a>
<span class="sourceLineNo">077</span>    @Test<a name="line.77"></a>
<span class="sourceLineNo">078</span>    public void testExactIntegration() {<a name="line.78"></a>
<span class="sourceLineNo">079</span>        Random random = new Random(86343623467878363l);<a name="line.79"></a>
<span class="sourceLineNo">080</span>        for (int n = 2; n &lt; 6; ++n) {<a name="line.80"></a>
<span class="sourceLineNo">081</span>            LegendreGaussIntegrator integrator =<a name="line.81"></a>
<span class="sourceLineNo">082</span>                new LegendreGaussIntegrator(n,<a name="line.82"></a>
<span class="sourceLineNo">083</span>                                            BaseAbstractUnivariateIntegrator.DEFAULT_RELATIVE_ACCURACY,<a name="line.83"></a>
<span class="sourceLineNo">084</span>                                            BaseAbstractUnivariateIntegrator.DEFAULT_ABSOLUTE_ACCURACY,<a name="line.84"></a>
<span class="sourceLineNo">085</span>                                            BaseAbstractUnivariateIntegrator.DEFAULT_MIN_ITERATIONS_COUNT,<a name="line.85"></a>
<span class="sourceLineNo">086</span>                                            64);<a name="line.86"></a>
<span class="sourceLineNo">087</span><a name="line.87"></a>
<span class="sourceLineNo">088</span>            // an n points Gauss-Legendre integrator integrates 2n-1 degree polynoms exactly<a name="line.88"></a>
<span class="sourceLineNo">089</span>            for (int degree = 0; degree &lt;= 2 * n - 1; ++degree) {<a name="line.89"></a>
<span class="sourceLineNo">090</span>                for (int i = 0; i &lt; 10; ++i) {<a name="line.90"></a>
<span class="sourceLineNo">091</span>                    double[] coeff = new double[degree + 1];<a name="line.91"></a>
<span class="sourceLineNo">092</span>                    for (int k = 0; k &lt; coeff.length; ++k) {<a name="line.92"></a>
<span class="sourceLineNo">093</span>                        coeff[k] = 2 * random.nextDouble() - 1;<a name="line.93"></a>
<span class="sourceLineNo">094</span>                    }<a name="line.94"></a>
<span class="sourceLineNo">095</span>                    PolynomialFunction p = new PolynomialFunction(coeff);<a name="line.95"></a>
<span class="sourceLineNo">096</span>                    double result    = integrator.integrate(10000, p, -5.0, 15.0);<a name="line.96"></a>
<span class="sourceLineNo">097</span>                    double reference = exactIntegration(p, -5.0, 15.0);<a name="line.97"></a>
<span class="sourceLineNo">098</span>                    Assert.assertEquals(n + " " + degree + " " + i, reference, result, 1.0e-12 * (1.0 + FastMath.abs(reference)));<a name="line.98"></a>
<span class="sourceLineNo">099</span>                }<a name="line.99"></a>
<span class="sourceLineNo">100</span>            }<a name="line.100"></a>
<span class="sourceLineNo">101</span><a name="line.101"></a>
<span class="sourceLineNo">102</span>        }<a name="line.102"></a>
<span class="sourceLineNo">103</span>    }<a name="line.103"></a>
<span class="sourceLineNo">104</span><a name="line.104"></a>
<span class="sourceLineNo">105</span>    @Test<a name="line.105"></a>
<span class="sourceLineNo">106</span>    public void testIssue464() {<a name="line.106"></a>
<span class="sourceLineNo">107</span>        final double value = 0.2;<a name="line.107"></a>
<span class="sourceLineNo">108</span>        UnivariateFunction f = new UnivariateFunction() {<a name="line.108"></a>
<span class="sourceLineNo">109</span>            public double value(double x) {<a name="line.109"></a>
<span class="sourceLineNo">110</span>                return (x &gt;= 0 &amp;&amp; x &lt;= 5) ? value : 0.0;<a name="line.110"></a>
<span class="sourceLineNo">111</span>            }<a name="line.111"></a>
<span class="sourceLineNo">112</span>        };<a name="line.112"></a>
<span class="sourceLineNo">113</span>        LegendreGaussIntegrator gauss = new LegendreGaussIntegrator(5, 3, 100);<a name="line.113"></a>
<span class="sourceLineNo">114</span><a name="line.114"></a>
<span class="sourceLineNo">115</span>        // due to the discontinuity, integration implies *many* calls<a name="line.115"></a>
<span class="sourceLineNo">116</span>        double maxX = 0.32462367623786328;<a name="line.116"></a>
<span class="sourceLineNo">117</span>        Assert.assertEquals(maxX * value, gauss.integrate(Integer.MAX_VALUE, f, -10, maxX), 1.0e-7);<a name="line.117"></a>
<span class="sourceLineNo">118</span>        Assert.assertTrue(gauss.getEvaluations() &gt; 37000000);<a name="line.118"></a>
<span class="sourceLineNo">119</span>        Assert.assertTrue(gauss.getIterations() &lt; 30);<a name="line.119"></a>
<span class="sourceLineNo">120</span><a name="line.120"></a>
<span class="sourceLineNo">121</span>        // setting up limits prevents such large number of calls<a name="line.121"></a>
<span class="sourceLineNo">122</span>        try {<a name="line.122"></a>
<span class="sourceLineNo">123</span>            gauss.integrate(1000, f, -10, maxX);<a name="line.123"></a>
<span class="sourceLineNo">124</span>            Assert.fail("expected TooManyEvaluationsException");<a name="line.124"></a>
<span class="sourceLineNo">125</span>        } catch (TooManyEvaluationsException tmee) {<a name="line.125"></a>
<span class="sourceLineNo">126</span>            // expected<a name="line.126"></a>
<span class="sourceLineNo">127</span>            Assert.assertEquals(1000, tmee.getMax());<a name="line.127"></a>
<span class="sourceLineNo">128</span>        }<a name="line.128"></a>
<span class="sourceLineNo">129</span><a name="line.129"></a>
<span class="sourceLineNo">130</span>        // integrating on the two sides should be simpler<a name="line.130"></a>
<span class="sourceLineNo">131</span>        double sum1 = gauss.integrate(1000, f, -10, 0);<a name="line.131"></a>
<span class="sourceLineNo">132</span>        int eval1   = gauss.getEvaluations();<a name="line.132"></a>
<span class="sourceLineNo">133</span>        double sum2 = gauss.integrate(1000, f, 0, maxX);<a name="line.133"></a>
<span class="sourceLineNo">134</span>        int eval2   = gauss.getEvaluations();<a name="line.134"></a>
<span class="sourceLineNo">135</span>        Assert.assertEquals(maxX * value, sum1 + sum2, 1.0e-7);<a name="line.135"></a>
<span class="sourceLineNo">136</span>        Assert.assertTrue(eval1 + eval2 &lt; 200);<a name="line.136"></a>
<span class="sourceLineNo">137</span><a name="line.137"></a>
<span class="sourceLineNo">138</span>    }<a name="line.138"></a>
<span class="sourceLineNo">139</span><a name="line.139"></a>
<span class="sourceLineNo">140</span>    private double exactIntegration(PolynomialFunction p, double a, double b) {<a name="line.140"></a>
<span class="sourceLineNo">141</span>        final double[] coeffs = p.getCoefficients();<a name="line.141"></a>
<span class="sourceLineNo">142</span>        double yb = coeffs[coeffs.length - 1] / coeffs.length;<a name="line.142"></a>
<span class="sourceLineNo">143</span>        double ya = yb;<a name="line.143"></a>
<span class="sourceLineNo">144</span>        for (int i = coeffs.length - 2; i &gt;= 0; --i) {<a name="line.144"></a>
<span class="sourceLineNo">145</span>            yb = yb * b + coeffs[i] / (i + 1);<a name="line.145"></a>
<span class="sourceLineNo">146</span>            ya = ya * a + coeffs[i] / (i + 1);<a name="line.146"></a>
<span class="sourceLineNo">147</span>        }<a name="line.147"></a>
<span class="sourceLineNo">148</span>        return yb * b - ya * a;<a name="line.148"></a>
<span class="sourceLineNo">149</span>    }<a name="line.149"></a>
<span class="sourceLineNo">150</span><a name="line.150"></a>
<span class="sourceLineNo">151</span>}<a name="line.151"></a>




























































</pre>
</div>
</body>
</html>
