<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>HermiteInterpolatorTest xref</title>
<link type="text/css" rel="stylesheet" href="../../../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../testapidocs/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Licensed to the Apache Software Foundation (ASF) under one or more</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> * contributor license agreements.  See the NOTICE file distributed with</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * this work for additional information regarding copyright ownership.</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * The ASF licenses this file to You under the Apache License, Version 2.0</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * (the "License"); you may not use this file except in compliance with</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> * the License.  You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *      <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">package</strong> org.apache.commons.math3.analysis.interpolation;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <strong class="jxr_keyword">import</strong> java.util.Random;
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.analysis.polynomials.PolynomialFunction;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.NoDataException;
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.util.FastMath;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> org.junit.Assert;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <strong class="jxr_keyword">import</strong> org.junit.Test;
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../../org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.html">HermiteInterpolatorTest</a> {
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  
<a class="jxr_linenumber" name="L30" href="#L30">30</a>      @Test
<a class="jxr_linenumber" name="L31" href="#L31">31</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testZero() {
<a class="jxr_linenumber" name="L32" href="#L32">32</a>          HermiteInterpolator interpolator = <strong class="jxr_keyword">new</strong> HermiteInterpolator();
<a class="jxr_linenumber" name="L33" href="#L33">33</a>          interpolator.addSamplePoint(0.0, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0.0 });
<a class="jxr_linenumber" name="L34" href="#L34">34</a>          <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">double</strong> x = -10; x &lt; 10; x += 1.0) {
<a class="jxr_linenumber" name="L35" href="#L35">35</a>              DerivativeStructure y = interpolator.value(<strong class="jxr_keyword">new</strong> DerivativeStructure(1, 1, 0, x))[0];
<a class="jxr_linenumber" name="L36" href="#L36">36</a>              Assert.assertEquals(0.0, y.getValue(), 1.0e-15);
<a class="jxr_linenumber" name="L37" href="#L37">37</a>              Assert.assertEquals(0.0, y.getPartialDerivative(1), 1.0e-15);
<a class="jxr_linenumber" name="L38" href="#L38">38</a>          }
<a class="jxr_linenumber" name="L39" href="#L39">39</a>          checkPolynomial(<strong class="jxr_keyword">new</strong> PolynomialFunction(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0.0 }),
<a class="jxr_linenumber" name="L40" href="#L40">40</a>                          interpolator.getPolynomials()[0]);
<a class="jxr_linenumber" name="L41" href="#L41">41</a>      }
<a class="jxr_linenumber" name="L42" href="#L42">42</a>  
<a class="jxr_linenumber" name="L43" href="#L43">43</a>      @Test
<a class="jxr_linenumber" name="L44" href="#L44">44</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testQuadratic() {
<a class="jxr_linenumber" name="L45" href="#L45">45</a>          HermiteInterpolator interpolator = <strong class="jxr_keyword">new</strong> HermiteInterpolator();
<a class="jxr_linenumber" name="L46" href="#L46">46</a>          interpolator.addSamplePoint(0.0, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 2.0 });
<a class="jxr_linenumber" name="L47" href="#L47">47</a>          interpolator.addSamplePoint(1.0, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0.0 });
<a class="jxr_linenumber" name="L48" href="#L48">48</a>          interpolator.addSamplePoint(2.0, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0.0 });
<a class="jxr_linenumber" name="L49" href="#L49">49</a>          <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">double</strong> x = -10; x &lt; 10; x += 1.0) {
<a class="jxr_linenumber" name="L50" href="#L50">50</a>              DerivativeStructure y = interpolator.value(<strong class="jxr_keyword">new</strong> DerivativeStructure(1, 1, 0, x))[0];
<a class="jxr_linenumber" name="L51" href="#L51">51</a>              Assert.assertEquals((x - 1.0) * (x - 2.0), y.getValue(), 1.0e-15);
<a class="jxr_linenumber" name="L52" href="#L52">52</a>              Assert.assertEquals(2 * x - 3.0, y.getPartialDerivative(1), 1.0e-15);
<a class="jxr_linenumber" name="L53" href="#L53">53</a>          }
<a class="jxr_linenumber" name="L54" href="#L54">54</a>          checkPolynomial(<strong class="jxr_keyword">new</strong> PolynomialFunction(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 2.0, -3.0, 1.0 }),
<a class="jxr_linenumber" name="L55" href="#L55">55</a>                          interpolator.getPolynomials()[0]);
<a class="jxr_linenumber" name="L56" href="#L56">56</a>      }
<a class="jxr_linenumber" name="L57" href="#L57">57</a>  
<a class="jxr_linenumber" name="L58" href="#L58">58</a>      @Test
<a class="jxr_linenumber" name="L59" href="#L59">59</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testMixedDerivatives() {
<a class="jxr_linenumber" name="L60" href="#L60">60</a>          HermiteInterpolator interpolator = <strong class="jxr_keyword">new</strong> HermiteInterpolator();
<a class="jxr_linenumber" name="L61" href="#L61">61</a>          interpolator.addSamplePoint(0.0, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 1.0 }, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 2.0 });
<a class="jxr_linenumber" name="L62" href="#L62">62</a>          interpolator.addSamplePoint(1.0, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 4.0 });
<a class="jxr_linenumber" name="L63" href="#L63">63</a>          interpolator.addSamplePoint(2.0, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 5.0 }, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 2.0 });
<a class="jxr_linenumber" name="L64" href="#L64">64</a>          Assert.assertEquals(4, interpolator.getPolynomials()[0].degree());
<a class="jxr_linenumber" name="L65" href="#L65">65</a>          DerivativeStructure y0 = interpolator.value(<strong class="jxr_keyword">new</strong> DerivativeStructure(1, 1, 0, 0.0))[0];
<a class="jxr_linenumber" name="L66" href="#L66">66</a>          Assert.assertEquals(1.0, y0.getValue(), 1.0e-15);
<a class="jxr_linenumber" name="L67" href="#L67">67</a>          Assert.assertEquals(2.0, y0.getPartialDerivative(1), 1.0e-15);
<a class="jxr_linenumber" name="L68" href="#L68">68</a>          Assert.assertEquals(4.0, interpolator.value(1.0)[0], 1.0e-15);
<a class="jxr_linenumber" name="L69" href="#L69">69</a>          DerivativeStructure y2 = interpolator.value(<strong class="jxr_keyword">new</strong> DerivativeStructure(1, 1, 0, 2.0))[0];
<a class="jxr_linenumber" name="L70" href="#L70">70</a>          Assert.assertEquals(5.0, y2.getValue(), 1.0e-15);
<a class="jxr_linenumber" name="L71" href="#L71">71</a>          Assert.assertEquals(2.0, y2.getPartialDerivative(1), 1.0e-15);
<a class="jxr_linenumber" name="L72" href="#L72">72</a>          checkPolynomial(<strong class="jxr_keyword">new</strong> PolynomialFunction(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 1.0, 2.0, 4.0, -4.0, 1.0 }),
<a class="jxr_linenumber" name="L73" href="#L73">73</a>                          interpolator.getPolynomials()[0]);
<a class="jxr_linenumber" name="L74" href="#L74">74</a>      }
<a class="jxr_linenumber" name="L75" href="#L75">75</a>  
<a class="jxr_linenumber" name="L76" href="#L76">76</a>      @Test
<a class="jxr_linenumber" name="L77" href="#L77">77</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testRandomPolynomialsValuesOnly() {
<a class="jxr_linenumber" name="L78" href="#L78">78</a>  
<a class="jxr_linenumber" name="L79" href="#L79">79</a>          Random random = <strong class="jxr_keyword">new</strong> Random(0x42b1e7dbd361a932l);
<a class="jxr_linenumber" name="L80" href="#L80">80</a>  
<a class="jxr_linenumber" name="L81" href="#L81">81</a>          <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; 100; ++i) {
<a class="jxr_linenumber" name="L82" href="#L82">82</a>  
<a class="jxr_linenumber" name="L83" href="#L83">83</a>              <strong class="jxr_keyword">int</strong> maxDegree = 0;
<a class="jxr_linenumber" name="L84" href="#L84">84</a>              PolynomialFunction[] p = <strong class="jxr_keyword">new</strong> PolynomialFunction[5];
<a class="jxr_linenumber" name="L85" href="#L85">85</a>              <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> k = 0; k &lt; p.length; ++k) {
<a class="jxr_linenumber" name="L86" href="#L86">86</a>                  <strong class="jxr_keyword">int</strong> degree = random.nextInt(7);
<a class="jxr_linenumber" name="L87" href="#L87">87</a>                  p[k] = randomPolynomial(degree, random);
<a class="jxr_linenumber" name="L88" href="#L88">88</a>                  maxDegree = FastMath.max(maxDegree, degree);
<a class="jxr_linenumber" name="L89" href="#L89">89</a>              }
<a class="jxr_linenumber" name="L90" href="#L90">90</a>  
<a class="jxr_linenumber" name="L91" href="#L91">91</a>              HermiteInterpolator interpolator = <strong class="jxr_keyword">new</strong> HermiteInterpolator();
<a class="jxr_linenumber" name="L92" href="#L92">92</a>              <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = 0; j &lt; 1 + maxDegree; ++j) {
<a class="jxr_linenumber" name="L93" href="#L93">93</a>                  <strong class="jxr_keyword">double</strong> x = 0.1 * j;
<a class="jxr_linenumber" name="L94" href="#L94">94</a>                  <strong class="jxr_keyword">double</strong>[] values = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[p.length];
<a class="jxr_linenumber" name="L95" href="#L95">95</a>                  <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> k = 0; k &lt; p.length; ++k) {
<a class="jxr_linenumber" name="L96" href="#L96">96</a>                      values[k] = p[k].value(x);
<a class="jxr_linenumber" name="L97" href="#L97">97</a>                  }
<a class="jxr_linenumber" name="L98" href="#L98">98</a>                  interpolator.addSamplePoint(x, values);
<a class="jxr_linenumber" name="L99" href="#L99">99</a>              }
<a class="jxr_linenumber" name="L100" href="#L100">100</a> 
<a class="jxr_linenumber" name="L101" href="#L101">101</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">double</strong> x = 0; x &lt; 2; x += 0.1) {
<a class="jxr_linenumber" name="L102" href="#L102">102</a>                 <strong class="jxr_keyword">double</strong>[] values = interpolator.value(x);
<a class="jxr_linenumber" name="L103" href="#L103">103</a>                 Assert.assertEquals(p.length, values.length);
<a class="jxr_linenumber" name="L104" href="#L104">104</a>                 <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> k = 0; k &lt; p.length; ++k) {
<a class="jxr_linenumber" name="L105" href="#L105">105</a>                     Assert.assertEquals(p[k].value(x), values[k], 1.0e-8 * FastMath.abs(p[k].value(x)));
<a class="jxr_linenumber" name="L106" href="#L106">106</a>                 }
<a class="jxr_linenumber" name="L107" href="#L107">107</a>             }
<a class="jxr_linenumber" name="L108" href="#L108">108</a> 
<a class="jxr_linenumber" name="L109" href="#L109">109</a>             PolynomialFunction[] result = interpolator.getPolynomials();
<a class="jxr_linenumber" name="L110" href="#L110">110</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> k = 0; k &lt; p.length; ++k) {
<a class="jxr_linenumber" name="L111" href="#L111">111</a>                 checkPolynomial(p[k], result[k]);
<a class="jxr_linenumber" name="L112" href="#L112">112</a>             }
<a class="jxr_linenumber" name="L113" href="#L113">113</a> 
<a class="jxr_linenumber" name="L114" href="#L114">114</a>         }
<a class="jxr_linenumber" name="L115" href="#L115">115</a>     }
<a class="jxr_linenumber" name="L116" href="#L116">116</a> 
<a class="jxr_linenumber" name="L117" href="#L117">117</a>     @Test
<a class="jxr_linenumber" name="L118" href="#L118">118</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testRandomPolynomialsFirstDerivative() {
<a class="jxr_linenumber" name="L119" href="#L119">119</a> 
<a class="jxr_linenumber" name="L120" href="#L120">120</a>         Random random = <strong class="jxr_keyword">new</strong> Random(0x570803c982ca5d3bl);
<a class="jxr_linenumber" name="L121" href="#L121">121</a> 
<a class="jxr_linenumber" name="L122" href="#L122">122</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; 100; ++i) {
<a class="jxr_linenumber" name="L123" href="#L123">123</a> 
<a class="jxr_linenumber" name="L124" href="#L124">124</a>             <strong class="jxr_keyword">int</strong> maxDegree = 0;
<a class="jxr_linenumber" name="L125" href="#L125">125</a>             PolynomialFunction[] p      = <strong class="jxr_keyword">new</strong> PolynomialFunction[5];
<a class="jxr_linenumber" name="L126" href="#L126">126</a>             PolynomialFunction[] pPrime = <strong class="jxr_keyword">new</strong> PolynomialFunction[5];
<a class="jxr_linenumber" name="L127" href="#L127">127</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> k = 0; k &lt; p.length; ++k) {
<a class="jxr_linenumber" name="L128" href="#L128">128</a>                 <strong class="jxr_keyword">int</strong> degree = random.nextInt(7);
<a class="jxr_linenumber" name="L129" href="#L129">129</a>                 p[k]      = randomPolynomial(degree, random);
<a class="jxr_linenumber" name="L130" href="#L130">130</a>                 pPrime[k] = p[k].polynomialDerivative();
<a class="jxr_linenumber" name="L131" href="#L131">131</a>                 maxDegree = FastMath.max(maxDegree, degree);
<a class="jxr_linenumber" name="L132" href="#L132">132</a>             }
<a class="jxr_linenumber" name="L133" href="#L133">133</a> 
<a class="jxr_linenumber" name="L134" href="#L134">134</a>             HermiteInterpolator interpolator = <strong class="jxr_keyword">new</strong> HermiteInterpolator();
<a class="jxr_linenumber" name="L135" href="#L135">135</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = 0; j &lt; 1 + maxDegree / 2; ++j) {
<a class="jxr_linenumber" name="L136" href="#L136">136</a>                 <strong class="jxr_keyword">double</strong> x = 0.1 * j;
<a class="jxr_linenumber" name="L137" href="#L137">137</a>                 <strong class="jxr_keyword">double</strong>[] values      = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[p.length];
<a class="jxr_linenumber" name="L138" href="#L138">138</a>                 <strong class="jxr_keyword">double</strong>[] derivatives = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[p.length];
<a class="jxr_linenumber" name="L139" href="#L139">139</a>                 <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> k = 0; k &lt; p.length; ++k) {
<a class="jxr_linenumber" name="L140" href="#L140">140</a>                     values[k]      = p[k].value(x);
<a class="jxr_linenumber" name="L141" href="#L141">141</a>                     derivatives[k] = pPrime[k].value(x);
<a class="jxr_linenumber" name="L142" href="#L142">142</a>                 }
<a class="jxr_linenumber" name="L143" href="#L143">143</a>                 interpolator.addSamplePoint(x, values, derivatives);
<a class="jxr_linenumber" name="L144" href="#L144">144</a>             }
<a class="jxr_linenumber" name="L145" href="#L145">145</a> 
<a class="jxr_linenumber" name="L146" href="#L146">146</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">double</strong> x = 0; x &lt; 2; x += 0.1) {
<a class="jxr_linenumber" name="L147" href="#L147">147</a>                 DerivativeStructure[] y = interpolator.value(<strong class="jxr_keyword">new</strong> DerivativeStructure(1, 1, 0, x));
<a class="jxr_linenumber" name="L148" href="#L148">148</a>                 Assert.assertEquals(p.length, y.length);
<a class="jxr_linenumber" name="L149" href="#L149">149</a>                 <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> k = 0; k &lt; p.length; ++k) {
<a class="jxr_linenumber" name="L150" href="#L150">150</a>                     Assert.assertEquals(p[k].value(x), y[k].getValue(), 1.0e-8 * FastMath.abs(p[k].value(x)));
<a class="jxr_linenumber" name="L151" href="#L151">151</a>                     Assert.assertEquals(pPrime[k].value(x), y[k].getPartialDerivative(1), 4.0e-8 * FastMath.abs(p[k].value(x)));
<a class="jxr_linenumber" name="L152" href="#L152">152</a>                 }
<a class="jxr_linenumber" name="L153" href="#L153">153</a>             }
<a class="jxr_linenumber" name="L154" href="#L154">154</a> 
<a class="jxr_linenumber" name="L155" href="#L155">155</a>             PolynomialFunction[] result = interpolator.getPolynomials();
<a class="jxr_linenumber" name="L156" href="#L156">156</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> k = 0; k &lt; p.length; ++k) {
<a class="jxr_linenumber" name="L157" href="#L157">157</a>                 checkPolynomial(p[k], result[k]);
<a class="jxr_linenumber" name="L158" href="#L158">158</a>             }
<a class="jxr_linenumber" name="L159" href="#L159">159</a> 
<a class="jxr_linenumber" name="L160" href="#L160">160</a>         }
<a class="jxr_linenumber" name="L161" href="#L161">161</a>     }
<a class="jxr_linenumber" name="L162" href="#L162">162</a> 
<a class="jxr_linenumber" name="L163" href="#L163">163</a>     @Test
<a class="jxr_linenumber" name="L164" href="#L164">164</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testSine() {
<a class="jxr_linenumber" name="L165" href="#L165">165</a>         HermiteInterpolator interpolator = <strong class="jxr_keyword">new</strong> HermiteInterpolator();
<a class="jxr_linenumber" name="L166" href="#L166">166</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">double</strong> x = 0; x &lt; FastMath.PI; x += 0.5) {
<a class="jxr_linenumber" name="L167" href="#L167">167</a>             interpolator.addSamplePoint(x, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { FastMath.sin(x) });
<a class="jxr_linenumber" name="L168" href="#L168">168</a>         }
<a class="jxr_linenumber" name="L169" href="#L169">169</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">double</strong> x = 0.1; x &lt;= 2.9; x += 0.01) {
<a class="jxr_linenumber" name="L170" href="#L170">170</a>             DerivativeStructure y = interpolator.value(<strong class="jxr_keyword">new</strong> DerivativeStructure(1, 2, 0, x))[0];
<a class="jxr_linenumber" name="L171" href="#L171">171</a>             Assert.assertEquals( FastMath.sin(x), y.getValue(), 3.5e-5);
<a class="jxr_linenumber" name="L172" href="#L172">172</a>             Assert.assertEquals( FastMath.cos(x), y.getPartialDerivative(1), 1.3e-4);
<a class="jxr_linenumber" name="L173" href="#L173">173</a>             Assert.assertEquals(-FastMath.sin(x), y.getPartialDerivative(2), 2.9e-3);
<a class="jxr_linenumber" name="L174" href="#L174">174</a>         }
<a class="jxr_linenumber" name="L175" href="#L175">175</a>     }
<a class="jxr_linenumber" name="L176" href="#L176">176</a> 
<a class="jxr_linenumber" name="L177" href="#L177">177</a>     @Test
<a class="jxr_linenumber" name="L178" href="#L178">178</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testSquareRoot() {
<a class="jxr_linenumber" name="L179" href="#L179">179</a>         HermiteInterpolator interpolator = <strong class="jxr_keyword">new</strong> HermiteInterpolator();
<a class="jxr_linenumber" name="L180" href="#L180">180</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">double</strong> x = 1.0; x &lt; 3.6; x += 0.5) {
<a class="jxr_linenumber" name="L181" href="#L181">181</a>             interpolator.addSamplePoint(x, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { FastMath.sqrt(x) });
<a class="jxr_linenumber" name="L182" href="#L182">182</a>         }
<a class="jxr_linenumber" name="L183" href="#L183">183</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">double</strong> x = 1.1; x &lt; 3.5; x += 0.01) {
<a class="jxr_linenumber" name="L184" href="#L184">184</a>             DerivativeStructure y = interpolator.value(<strong class="jxr_keyword">new</strong> DerivativeStructure(1, 1, 0, x))[0];
<a class="jxr_linenumber" name="L185" href="#L185">185</a>             Assert.assertEquals(FastMath.sqrt(x), y.getValue(), 1.5e-4);
<a class="jxr_linenumber" name="L186" href="#L186">186</a>             Assert.assertEquals(0.5 / FastMath.sqrt(x), y.getPartialDerivative(1), 8.5e-4);
<a class="jxr_linenumber" name="L187" href="#L187">187</a>         }
<a class="jxr_linenumber" name="L188" href="#L188">188</a>     }
<a class="jxr_linenumber" name="L189" href="#L189">189</a> 
<a class="jxr_linenumber" name="L190" href="#L190">190</a>     @Test
<a class="jxr_linenumber" name="L191" href="#L191">191</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testWikipedia() {
<a class="jxr_linenumber" name="L192" href="#L192">192</a>         <em class="jxr_comment">// this test corresponds to the example from Wikipedia page:</em>
<a class="jxr_linenumber" name="L193" href="#L193">193</a>         <em class="jxr_comment">// http://en.wikipedia.org/wiki/Hermite_interpolation</em>
<a class="jxr_linenumber" name="L194" href="#L194">194</a>         HermiteInterpolator interpolator = <strong class="jxr_keyword">new</strong> HermiteInterpolator();
<a class="jxr_linenumber" name="L195" href="#L195">195</a>         interpolator.addSamplePoint(-1, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 2 }, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { -8 }, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 56 });
<a class="jxr_linenumber" name="L196" href="#L196">196</a>         interpolator.addSamplePoint( 0, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 1 }, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {  0 }, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {  0 });
<a class="jxr_linenumber" name="L197" href="#L197">197</a>         interpolator.addSamplePoint( 1, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 2 }, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {  8 }, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 56 });
<a class="jxr_linenumber" name="L198" href="#L198">198</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">double</strong> x = -1.0; x &lt;= 1.0; x += 0.125) {
<a class="jxr_linenumber" name="L199" href="#L199">199</a>             DerivativeStructure y = interpolator.value(<strong class="jxr_keyword">new</strong> DerivativeStructure(1, 1, 0, x))[0];
<a class="jxr_linenumber" name="L200" href="#L200">200</a>             <strong class="jxr_keyword">double</strong> x2 = x * x;
<a class="jxr_linenumber" name="L201" href="#L201">201</a>             <strong class="jxr_keyword">double</strong> x4 = x2 * x2;
<a class="jxr_linenumber" name="L202" href="#L202">202</a>             <strong class="jxr_keyword">double</strong> x8 = x4 * x4;
<a class="jxr_linenumber" name="L203" href="#L203">203</a>             Assert.assertEquals(x8 + 1, y.getValue(), 1.0e-15);
<a class="jxr_linenumber" name="L204" href="#L204">204</a>             Assert.assertEquals(8 * x4 * x2 * x, y.getPartialDerivative(1), 1.0e-15);
<a class="jxr_linenumber" name="L205" href="#L205">205</a>         }
<a class="jxr_linenumber" name="L206" href="#L206">206</a>         checkPolynomial(<strong class="jxr_keyword">new</strong> PolynomialFunction(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 1, 0, 0, 0, 0, 0, 0, 0, 1 }),
<a class="jxr_linenumber" name="L207" href="#L207">207</a>                         interpolator.getPolynomials()[0]);
<a class="jxr_linenumber" name="L208" href="#L208">208</a>     }
<a class="jxr_linenumber" name="L209" href="#L209">209</a> 
<a class="jxr_linenumber" name="L210" href="#L210">210</a>     @Test
<a class="jxr_linenumber" name="L211" href="#L211">211</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testOnePointParabola() {
<a class="jxr_linenumber" name="L212" href="#L212">212</a>         HermiteInterpolator interpolator = <strong class="jxr_keyword">new</strong> HermiteInterpolator();
<a class="jxr_linenumber" name="L213" href="#L213">213</a>         interpolator.addSamplePoint(0, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 1 }, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 1 }, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 2 });
<a class="jxr_linenumber" name="L214" href="#L214">214</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">double</strong> x = -1.0; x &lt;= 1.0; x += 0.125) {
<a class="jxr_linenumber" name="L215" href="#L215">215</a>             DerivativeStructure y = interpolator.value(<strong class="jxr_keyword">new</strong> DerivativeStructure(1, 1, 0, x))[0];
<a class="jxr_linenumber" name="L216" href="#L216">216</a>             Assert.assertEquals(1 + x * (1 + x), y.getValue(), 1.0e-15);
<a class="jxr_linenumber" name="L217" href="#L217">217</a>             Assert.assertEquals(1 + 2 * x, y.getPartialDerivative(1), 1.0e-15);
<a class="jxr_linenumber" name="L218" href="#L218">218</a>         }
<a class="jxr_linenumber" name="L219" href="#L219">219</a>         checkPolynomial(<strong class="jxr_keyword">new</strong> PolynomialFunction(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 1, 1, 1 }),
<a class="jxr_linenumber" name="L220" href="#L220">220</a>                         interpolator.getPolynomials()[0]);
<a class="jxr_linenumber" name="L221" href="#L221">221</a>     }
<a class="jxr_linenumber" name="L222" href="#L222">222</a> 
<a class="jxr_linenumber" name="L223" href="#L223">223</a>     <strong class="jxr_keyword">private</strong> PolynomialFunction randomPolynomial(<strong class="jxr_keyword">int</strong> degree, Random random) {
<a class="jxr_linenumber" name="L224" href="#L224">224</a>         <strong class="jxr_keyword">double</strong>[] coeff = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[ 1 + degree];
<a class="jxr_linenumber" name="L225" href="#L225">225</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = 0; j &lt; degree; ++j) {
<a class="jxr_linenumber" name="L226" href="#L226">226</a>             coeff[j] = random.nextDouble();
<a class="jxr_linenumber" name="L227" href="#L227">227</a>         }
<a class="jxr_linenumber" name="L228" href="#L228">228</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> PolynomialFunction(coeff);
<a class="jxr_linenumber" name="L229" href="#L229">229</a>     }
<a class="jxr_linenumber" name="L230" href="#L230">230</a> 
<a class="jxr_linenumber" name="L231" href="#L231">231</a>     @Test(expected=NoDataException.<strong class="jxr_keyword">class</strong>)
<a class="jxr_linenumber" name="L232" href="#L232">232</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testEmptySample() {
<a class="jxr_linenumber" name="L233" href="#L233">233</a>         <strong class="jxr_keyword">new</strong> HermiteInterpolator().value(0.0);
<a class="jxr_linenumber" name="L234" href="#L234">234</a>     }
<a class="jxr_linenumber" name="L235" href="#L235">235</a> 
<a class="jxr_linenumber" name="L236" href="#L236">236</a>     @Test(expected=IllegalArgumentException.<strong class="jxr_keyword">class</strong>)
<a class="jxr_linenumber" name="L237" href="#L237">237</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testDuplicatedAbscissa() {
<a class="jxr_linenumber" name="L238" href="#L238">238</a>         HermiteInterpolator interpolator = <strong class="jxr_keyword">new</strong> HermiteInterpolator();
<a class="jxr_linenumber" name="L239" href="#L239">239</a>         interpolator.addSamplePoint(1.0, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0.0 });
<a class="jxr_linenumber" name="L240" href="#L240">240</a>         interpolator.addSamplePoint(1.0, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 1.0 });
<a class="jxr_linenumber" name="L241" href="#L241">241</a>     }
<a class="jxr_linenumber" name="L242" href="#L242">242</a> 
<a class="jxr_linenumber" name="L243" href="#L243">243</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">void</strong> checkPolynomial(PolynomialFunction expected, PolynomialFunction result) {
<a class="jxr_linenumber" name="L244" href="#L244">244</a>         Assert.assertTrue(result.degree() &gt;= expected.degree());
<a class="jxr_linenumber" name="L245" href="#L245">245</a>         <strong class="jxr_keyword">double</strong>[] cE = expected.getCoefficients();
<a class="jxr_linenumber" name="L246" href="#L246">246</a>         <strong class="jxr_keyword">double</strong>[] cR = result.getCoefficients();
<a class="jxr_linenumber" name="L247" href="#L247">247</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; cE.length; ++i) {
<a class="jxr_linenumber" name="L248" href="#L248">248</a>             Assert.assertEquals(cE[i], cR[i], 1.0e-8 * FastMath.abs(cE[i]));
<a class="jxr_linenumber" name="L249" href="#L249">249</a>         }
<a class="jxr_linenumber" name="L250" href="#L250">250</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = cE.length; i &lt; cR.length; ++i) {
<a class="jxr_linenumber" name="L251" href="#L251">251</a>             Assert.assertEquals(0.0, cR[i], 1.0e-9);
<a class="jxr_linenumber" name="L252" href="#L252">252</a>         }
<a class="jxr_linenumber" name="L253" href="#L253">253</a>     }
<a class="jxr_linenumber" name="L254" href="#L254">254</a> 
<a class="jxr_linenumber" name="L255" href="#L255">255</a> }
<a class="jxr_linenumber" name="L256" href="#L256">256</a> 
</pre>
<hr/>
<div id="footer">Copyright &#169; 2003&#x2013;2016 <a href="http://www.apache.org/">The Apache Software Foundation</a>. All rights reserved.</div>
</body>
</html>
