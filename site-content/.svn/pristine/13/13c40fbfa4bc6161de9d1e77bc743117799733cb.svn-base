<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span>package org.apache.commons.math3.transform;<a name="line.17"></a>
<span class="sourceLineNo">018</span><a name="line.18"></a>
<span class="sourceLineNo">019</span>import java.util.Arrays;<a name="line.19"></a>
<span class="sourceLineNo">020</span>import java.util.Collection;<a name="line.20"></a>
<span class="sourceLineNo">021</span><a name="line.21"></a>
<span class="sourceLineNo">022</span>import org.apache.commons.math3.analysis.UnivariateFunction;<a name="line.22"></a>
<span class="sourceLineNo">023</span>import org.apache.commons.math3.analysis.function.Sin;<a name="line.23"></a>
<span class="sourceLineNo">024</span>import org.apache.commons.math3.analysis.function.Sinc;<a name="line.24"></a>
<span class="sourceLineNo">025</span>import org.apache.commons.math3.exception.MathIllegalArgumentException;<a name="line.25"></a>
<span class="sourceLineNo">026</span>import org.apache.commons.math3.exception.MathIllegalStateException;<a name="line.26"></a>
<span class="sourceLineNo">027</span>import org.apache.commons.math3.util.FastMath;<a name="line.27"></a>
<span class="sourceLineNo">028</span>import org.junit.Assert;<a name="line.28"></a>
<span class="sourceLineNo">029</span>import org.junit.Test;<a name="line.29"></a>
<span class="sourceLineNo">030</span>import org.junit.runner.RunWith;<a name="line.30"></a>
<span class="sourceLineNo">031</span>import org.junit.runners.Parameterized;<a name="line.31"></a>
<span class="sourceLineNo">032</span>import org.junit.runners.Parameterized.Parameters;<a name="line.32"></a>
<span class="sourceLineNo">033</span><a name="line.33"></a>
<span class="sourceLineNo">034</span>/**<a name="line.34"></a>
<span class="sourceLineNo">035</span> * Test case for fast sine transformer.<a name="line.35"></a>
<span class="sourceLineNo">036</span> * &lt;p&gt;<a name="line.36"></a>
<span class="sourceLineNo">037</span> * FST algorithm is exact, the small tolerance number is used only<a name="line.37"></a>
<span class="sourceLineNo">038</span> * to account for round-off errors.<a name="line.38"></a>
<span class="sourceLineNo">039</span> *<a name="line.39"></a>
<span class="sourceLineNo">040</span> */<a name="line.40"></a>
<span class="sourceLineNo">041</span>@RunWith(value = Parameterized.class)<a name="line.41"></a>
<span class="sourceLineNo">042</span>public final class FastSineTransformerTest extends RealTransformerAbstractTest {<a name="line.42"></a>
<span class="sourceLineNo">043</span><a name="line.43"></a>
<span class="sourceLineNo">044</span>    private final DstNormalization normalization;<a name="line.44"></a>
<span class="sourceLineNo">045</span><a name="line.45"></a>
<span class="sourceLineNo">046</span>    private final int[] invalidDataSize;<a name="line.46"></a>
<span class="sourceLineNo">047</span><a name="line.47"></a>
<span class="sourceLineNo">048</span>    private final double[] relativeTolerance;<a name="line.48"></a>
<span class="sourceLineNo">049</span><a name="line.49"></a>
<span class="sourceLineNo">050</span>    private final int[] validDataSize;<a name="line.50"></a>
<span class="sourceLineNo">051</span><a name="line.51"></a>
<span class="sourceLineNo">052</span>    public FastSineTransformerTest(final DstNormalization normalization) {<a name="line.52"></a>
<span class="sourceLineNo">053</span>        this.normalization = normalization;<a name="line.53"></a>
<span class="sourceLineNo">054</span>        this.validDataSize = new int[] {<a name="line.54"></a>
<span class="sourceLineNo">055</span>            1, 2, 4, 8, 16, 32, 64, 128<a name="line.55"></a>
<span class="sourceLineNo">056</span>        };<a name="line.56"></a>
<span class="sourceLineNo">057</span>        this.invalidDataSize = new int[] {<a name="line.57"></a>
<span class="sourceLineNo">058</span>            129<a name="line.58"></a>
<span class="sourceLineNo">059</span>        };<a name="line.59"></a>
<span class="sourceLineNo">060</span>        this.relativeTolerance = new double[] {<a name="line.60"></a>
<span class="sourceLineNo">061</span>            1E-15, 1E-15, 1E-14, 1E-14, 1E-13, 1E-12, 1E-11, 1E-11<a name="line.61"></a>
<span class="sourceLineNo">062</span>        };<a name="line.62"></a>
<span class="sourceLineNo">063</span>    }<a name="line.63"></a>
<span class="sourceLineNo">064</span><a name="line.64"></a>
<span class="sourceLineNo">065</span>    /**<a name="line.65"></a>
<span class="sourceLineNo">066</span>     * Returns an array containing {@code true, false} in order to check both<a name="line.66"></a>
<span class="sourceLineNo">067</span>     * standard and orthogonal DSTs.<a name="line.67"></a>
<span class="sourceLineNo">068</span>     *<a name="line.68"></a>
<span class="sourceLineNo">069</span>     * @return an array of parameters for this parameterized test<a name="line.69"></a>
<span class="sourceLineNo">070</span>     */<a name="line.70"></a>
<span class="sourceLineNo">071</span>    @Parameters<a name="line.71"></a>
<span class="sourceLineNo">072</span>    public static Collection&lt;Object[]&gt; data() {<a name="line.72"></a>
<span class="sourceLineNo">073</span>        final DstNormalization[] normalization = DstNormalization.values();<a name="line.73"></a>
<span class="sourceLineNo">074</span>        final Object[][] data = new DstNormalization[normalization.length][1];<a name="line.74"></a>
<span class="sourceLineNo">075</span>        for (int i = 0; i &lt; normalization.length; i++) {<a name="line.75"></a>
<span class="sourceLineNo">076</span>            data[i][0] = normalization[i];<a name="line.76"></a>
<span class="sourceLineNo">077</span>        }<a name="line.77"></a>
<span class="sourceLineNo">078</span>        return Arrays.asList(data);<a name="line.78"></a>
<span class="sourceLineNo">079</span>    }<a name="line.79"></a>
<span class="sourceLineNo">080</span><a name="line.80"></a>
<span class="sourceLineNo">081</span>    /**<a name="line.81"></a>
<span class="sourceLineNo">082</span>     * {@inheritDoc}<a name="line.82"></a>
<span class="sourceLineNo">083</span>     *<a name="line.83"></a>
<span class="sourceLineNo">084</span>     * Overriding the default implementation allows to ensure that the first<a name="line.84"></a>
<span class="sourceLineNo">085</span>     * element of the data set is zero.<a name="line.85"></a>
<span class="sourceLineNo">086</span>     */<a name="line.86"></a>
<span class="sourceLineNo">087</span>    @Override<a name="line.87"></a>
<span class="sourceLineNo">088</span>    double[] createRealData(final int n) {<a name="line.88"></a>
<span class="sourceLineNo">089</span>        final double[] data = super.createRealData(n);<a name="line.89"></a>
<span class="sourceLineNo">090</span>        data[0] = 0.0;<a name="line.90"></a>
<span class="sourceLineNo">091</span>        return data;<a name="line.91"></a>
<span class="sourceLineNo">092</span>    }<a name="line.92"></a>
<span class="sourceLineNo">093</span><a name="line.93"></a>
<span class="sourceLineNo">094</span>    @Override<a name="line.94"></a>
<span class="sourceLineNo">095</span>    RealTransformer createRealTransformer() {<a name="line.95"></a>
<span class="sourceLineNo">096</span>        return new FastSineTransformer(normalization);<a name="line.96"></a>
<span class="sourceLineNo">097</span>    }<a name="line.97"></a>
<span class="sourceLineNo">098</span><a name="line.98"></a>
<span class="sourceLineNo">099</span>    @Override<a name="line.99"></a>
<span class="sourceLineNo">100</span>    int getInvalidDataSize(final int i) {<a name="line.100"></a>
<span class="sourceLineNo">101</span>        return invalidDataSize[i];<a name="line.101"></a>
<span class="sourceLineNo">102</span>    }<a name="line.102"></a>
<span class="sourceLineNo">103</span><a name="line.103"></a>
<span class="sourceLineNo">104</span>    @Override<a name="line.104"></a>
<span class="sourceLineNo">105</span>    int getNumberOfInvalidDataSizes() {<a name="line.105"></a>
<span class="sourceLineNo">106</span>        return invalidDataSize.length;<a name="line.106"></a>
<span class="sourceLineNo">107</span>    }<a name="line.107"></a>
<span class="sourceLineNo">108</span><a name="line.108"></a>
<span class="sourceLineNo">109</span>    @Override<a name="line.109"></a>
<span class="sourceLineNo">110</span>    int getNumberOfValidDataSizes() {<a name="line.110"></a>
<span class="sourceLineNo">111</span>        return validDataSize.length;<a name="line.111"></a>
<span class="sourceLineNo">112</span>    }<a name="line.112"></a>
<span class="sourceLineNo">113</span><a name="line.113"></a>
<span class="sourceLineNo">114</span>    @Override<a name="line.114"></a>
<span class="sourceLineNo">115</span>    double getRelativeTolerance(final int i) {<a name="line.115"></a>
<span class="sourceLineNo">116</span>        return relativeTolerance[i];<a name="line.116"></a>
<span class="sourceLineNo">117</span>    }<a name="line.117"></a>
<span class="sourceLineNo">118</span><a name="line.118"></a>
<span class="sourceLineNo">119</span>    @Override<a name="line.119"></a>
<span class="sourceLineNo">120</span>    int getValidDataSize(final int i) {<a name="line.120"></a>
<span class="sourceLineNo">121</span>        return validDataSize[i];<a name="line.121"></a>
<span class="sourceLineNo">122</span>    }<a name="line.122"></a>
<span class="sourceLineNo">123</span><a name="line.123"></a>
<span class="sourceLineNo">124</span>    @Override<a name="line.124"></a>
<span class="sourceLineNo">125</span>    UnivariateFunction getValidFunction() {<a name="line.125"></a>
<span class="sourceLineNo">126</span>        return new Sinc();<a name="line.126"></a>
<span class="sourceLineNo">127</span>    }<a name="line.127"></a>
<span class="sourceLineNo">128</span><a name="line.128"></a>
<span class="sourceLineNo">129</span>    @Override<a name="line.129"></a>
<span class="sourceLineNo">130</span>    double getValidLowerBound() {<a name="line.130"></a>
<span class="sourceLineNo">131</span>        return 0.0;<a name="line.131"></a>
<span class="sourceLineNo">132</span>    }<a name="line.132"></a>
<span class="sourceLineNo">133</span><a name="line.133"></a>
<span class="sourceLineNo">134</span>    @Override<a name="line.134"></a>
<span class="sourceLineNo">135</span>    double getValidUpperBound() {<a name="line.135"></a>
<span class="sourceLineNo">136</span>        return FastMath.PI;<a name="line.136"></a>
<span class="sourceLineNo">137</span>    }<a name="line.137"></a>
<span class="sourceLineNo">138</span><a name="line.138"></a>
<span class="sourceLineNo">139</span>    @Override<a name="line.139"></a>
<span class="sourceLineNo">140</span>    double[] transform(final double[] x, final TransformType type) {<a name="line.140"></a>
<span class="sourceLineNo">141</span>        final int n = x.length;<a name="line.141"></a>
<span class="sourceLineNo">142</span>        final double[] y = new double[n];<a name="line.142"></a>
<span class="sourceLineNo">143</span>        final double[] sin = new double[2 * n];<a name="line.143"></a>
<span class="sourceLineNo">144</span>        for (int i = 0; i &lt; sin.length; i++) {<a name="line.144"></a>
<span class="sourceLineNo">145</span>            sin[i] = FastMath.sin(FastMath.PI * i / n);<a name="line.145"></a>
<span class="sourceLineNo">146</span>        }<a name="line.146"></a>
<span class="sourceLineNo">147</span>        for (int j = 0; j &lt; n; j++) {<a name="line.147"></a>
<span class="sourceLineNo">148</span>            double yj = 0.0;<a name="line.148"></a>
<span class="sourceLineNo">149</span>            for (int i = 0; i &lt; n; i++) {<a name="line.149"></a>
<span class="sourceLineNo">150</span>                yj += x[i] * sin[(i * j) % sin.length];<a name="line.150"></a>
<span class="sourceLineNo">151</span>            }<a name="line.151"></a>
<span class="sourceLineNo">152</span>            y[j] = yj;<a name="line.152"></a>
<span class="sourceLineNo">153</span>        }<a name="line.153"></a>
<span class="sourceLineNo">154</span>        final double s;<a name="line.154"></a>
<span class="sourceLineNo">155</span>        if (type == TransformType.FORWARD) {<a name="line.155"></a>
<span class="sourceLineNo">156</span>            if (normalization == DstNormalization.STANDARD_DST_I) {<a name="line.156"></a>
<span class="sourceLineNo">157</span>                s = 1.0;<a name="line.157"></a>
<span class="sourceLineNo">158</span>            } else if (normalization == DstNormalization.ORTHOGONAL_DST_I) {<a name="line.158"></a>
<span class="sourceLineNo">159</span>                s = FastMath.sqrt(2.0 / n);<a name="line.159"></a>
<span class="sourceLineNo">160</span>            } else {<a name="line.160"></a>
<span class="sourceLineNo">161</span>                throw new MathIllegalStateException();<a name="line.161"></a>
<span class="sourceLineNo">162</span>            }<a name="line.162"></a>
<span class="sourceLineNo">163</span>        } else if (type == TransformType.INVERSE) {<a name="line.163"></a>
<span class="sourceLineNo">164</span>            if (normalization == DstNormalization.STANDARD_DST_I) {<a name="line.164"></a>
<span class="sourceLineNo">165</span>                s = 2.0 / n;<a name="line.165"></a>
<span class="sourceLineNo">166</span>            } else if (normalization == DstNormalization.ORTHOGONAL_DST_I) {<a name="line.166"></a>
<span class="sourceLineNo">167</span>                s = FastMath.sqrt(2.0 / n);<a name="line.167"></a>
<span class="sourceLineNo">168</span>            } else {<a name="line.168"></a>
<span class="sourceLineNo">169</span>                throw new MathIllegalStateException();<a name="line.169"></a>
<span class="sourceLineNo">170</span>            }<a name="line.170"></a>
<span class="sourceLineNo">171</span>        } else {<a name="line.171"></a>
<span class="sourceLineNo">172</span>            /*<a name="line.172"></a>
<span class="sourceLineNo">173</span>             * Should never occur. This clause is a safeguard in case other<a name="line.173"></a>
<span class="sourceLineNo">174</span>             * types are used to TransformType (which should not be done).<a name="line.174"></a>
<span class="sourceLineNo">175</span>             */<a name="line.175"></a>
<span class="sourceLineNo">176</span>            throw new MathIllegalStateException();<a name="line.176"></a>
<span class="sourceLineNo">177</span>        }<a name="line.177"></a>
<span class="sourceLineNo">178</span>        TransformUtils.scaleArray(y, s);<a name="line.178"></a>
<span class="sourceLineNo">179</span>        return y;<a name="line.179"></a>
<span class="sourceLineNo">180</span>    }<a name="line.180"></a>
<span class="sourceLineNo">181</span><a name="line.181"></a>
<span class="sourceLineNo">182</span>    /*<a name="line.182"></a>
<span class="sourceLineNo">183</span>     * Additional tests.<a name="line.183"></a>
<span class="sourceLineNo">184</span>     */<a name="line.184"></a>
<span class="sourceLineNo">185</span>    @Test<a name="line.185"></a>
<span class="sourceLineNo">186</span>    public void testTransformRealFirstElementNotZero() {<a name="line.186"></a>
<span class="sourceLineNo">187</span>        final TransformType[] type = TransformType.values();<a name="line.187"></a>
<span class="sourceLineNo">188</span>        final double[] data = new double[] {<a name="line.188"></a>
<span class="sourceLineNo">189</span>            1.0, 1.0, 1.0, 1.0<a name="line.189"></a>
<span class="sourceLineNo">190</span>        };<a name="line.190"></a>
<span class="sourceLineNo">191</span>        final RealTransformer transformer = createRealTransformer();<a name="line.191"></a>
<span class="sourceLineNo">192</span>        for (int j = 0; j &lt; type.length; j++) {<a name="line.192"></a>
<span class="sourceLineNo">193</span>            try {<a name="line.193"></a>
<span class="sourceLineNo">194</span>                transformer.transform(data, type[j]);<a name="line.194"></a>
<span class="sourceLineNo">195</span>                Assert.fail(type[j].toString());<a name="line.195"></a>
<span class="sourceLineNo">196</span>            } catch (MathIllegalArgumentException e) {<a name="line.196"></a>
<span class="sourceLineNo">197</span>                // Expected: do nothing<a name="line.197"></a>
<span class="sourceLineNo">198</span>            }<a name="line.198"></a>
<span class="sourceLineNo">199</span>        }<a name="line.199"></a>
<span class="sourceLineNo">200</span>    }<a name="line.200"></a>
<span class="sourceLineNo">201</span><a name="line.201"></a>
<span class="sourceLineNo">202</span>    /*<a name="line.202"></a>
<span class="sourceLineNo">203</span>     * Additional (legacy) tests.<a name="line.203"></a>
<span class="sourceLineNo">204</span>     */<a name="line.204"></a>
<span class="sourceLineNo">205</span><a name="line.205"></a>
<span class="sourceLineNo">206</span>    /**<a name="line.206"></a>
<span class="sourceLineNo">207</span>     * Test of transformer for the ad hoc data.<a name="line.207"></a>
<span class="sourceLineNo">208</span>     */<a name="line.208"></a>
<span class="sourceLineNo">209</span>    @Test<a name="line.209"></a>
<span class="sourceLineNo">210</span>    public void testAdHocData() {<a name="line.210"></a>
<span class="sourceLineNo">211</span>        FastSineTransformer transformer;<a name="line.211"></a>
<span class="sourceLineNo">212</span>        transformer = new FastSineTransformer(DstNormalization.STANDARD_DST_I);<a name="line.212"></a>
<span class="sourceLineNo">213</span>        double result[], tolerance = 1E-12;<a name="line.213"></a>
<span class="sourceLineNo">214</span><a name="line.214"></a>
<span class="sourceLineNo">215</span>        double x[] = { 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0 };<a name="line.215"></a>
<span class="sourceLineNo">216</span>        double y[] = { 0.0, 20.1093579685034, -9.65685424949238,<a name="line.216"></a>
<span class="sourceLineNo">217</span>                       5.98642305066196, -4.0, 2.67271455167720,<a name="line.217"></a>
<span class="sourceLineNo">218</span>                      -1.65685424949238, 0.795649469518633 };<a name="line.218"></a>
<span class="sourceLineNo">219</span><a name="line.219"></a>
<span class="sourceLineNo">220</span>        result = transformer.transform(x, TransformType.FORWARD);<a name="line.220"></a>
<span class="sourceLineNo">221</span>        for (int i = 0; i &lt; result.length; i++) {<a name="line.221"></a>
<span class="sourceLineNo">222</span>            Assert.assertEquals(y[i], result[i], tolerance);<a name="line.222"></a>
<span class="sourceLineNo">223</span>        }<a name="line.223"></a>
<span class="sourceLineNo">224</span><a name="line.224"></a>
<span class="sourceLineNo">225</span>        result = transformer.transform(y, TransformType.INVERSE);<a name="line.225"></a>
<span class="sourceLineNo">226</span>        for (int i = 0; i &lt; result.length; i++) {<a name="line.226"></a>
<span class="sourceLineNo">227</span>            Assert.assertEquals(x[i], result[i], tolerance);<a name="line.227"></a>
<span class="sourceLineNo">228</span>        }<a name="line.228"></a>
<span class="sourceLineNo">229</span><a name="line.229"></a>
<span class="sourceLineNo">230</span>        TransformUtils.scaleArray(x, FastMath.sqrt(x.length / 2.0));<a name="line.230"></a>
<span class="sourceLineNo">231</span>        transformer = new FastSineTransformer(DstNormalization.ORTHOGONAL_DST_I);<a name="line.231"></a>
<span class="sourceLineNo">232</span><a name="line.232"></a>
<span class="sourceLineNo">233</span>        result = transformer.transform(y, TransformType.FORWARD);<a name="line.233"></a>
<span class="sourceLineNo">234</span>        for (int i = 0; i &lt; result.length; i++) {<a name="line.234"></a>
<span class="sourceLineNo">235</span>            Assert.assertEquals(x[i], result[i], tolerance);<a name="line.235"></a>
<span class="sourceLineNo">236</span>        }<a name="line.236"></a>
<span class="sourceLineNo">237</span><a name="line.237"></a>
<span class="sourceLineNo">238</span>        result = transformer.transform(x, TransformType.INVERSE);<a name="line.238"></a>
<span class="sourceLineNo">239</span>        for (int i = 0; i &lt; result.length; i++) {<a name="line.239"></a>
<span class="sourceLineNo">240</span>            Assert.assertEquals(y[i], result[i], tolerance);<a name="line.240"></a>
<span class="sourceLineNo">241</span>        }<a name="line.241"></a>
<span class="sourceLineNo">242</span>    }<a name="line.242"></a>
<span class="sourceLineNo">243</span><a name="line.243"></a>
<span class="sourceLineNo">244</span>    /**<a name="line.244"></a>
<span class="sourceLineNo">245</span>     * Test of transformer for the sine function.<a name="line.245"></a>
<span class="sourceLineNo">246</span>     */<a name="line.246"></a>
<span class="sourceLineNo">247</span>    @Test<a name="line.247"></a>
<span class="sourceLineNo">248</span>    public void testSinFunction() {<a name="line.248"></a>
<span class="sourceLineNo">249</span>        UnivariateFunction f = new Sin();<a name="line.249"></a>
<span class="sourceLineNo">250</span>        FastSineTransformer transformer;<a name="line.250"></a>
<span class="sourceLineNo">251</span>        transformer = new FastSineTransformer(DstNormalization.STANDARD_DST_I);<a name="line.251"></a>
<span class="sourceLineNo">252</span>        double min, max, result[], tolerance = 1E-12; int N = 1 &lt;&lt; 8;<a name="line.252"></a>
<span class="sourceLineNo">253</span><a name="line.253"></a>
<span class="sourceLineNo">254</span>        min = 0.0; max = 2.0 * FastMath.PI;<a name="line.254"></a>
<span class="sourceLineNo">255</span>        result = transformer.transform(f, min, max, N, TransformType.FORWARD);<a name="line.255"></a>
<span class="sourceLineNo">256</span>        Assert.assertEquals(N &gt;&gt; 1, result[2], tolerance);<a name="line.256"></a>
<span class="sourceLineNo">257</span>        for (int i = 0; i &lt; N; i += (i == 1 ? 2 : 1)) {<a name="line.257"></a>
<span class="sourceLineNo">258</span>            Assert.assertEquals(0.0, result[i], tolerance);<a name="line.258"></a>
<span class="sourceLineNo">259</span>        }<a name="line.259"></a>
<span class="sourceLineNo">260</span><a name="line.260"></a>
<span class="sourceLineNo">261</span>        min = -FastMath.PI; max = FastMath.PI;<a name="line.261"></a>
<span class="sourceLineNo">262</span>        result = transformer.transform(f, min, max, N, TransformType.FORWARD);<a name="line.262"></a>
<span class="sourceLineNo">263</span>        Assert.assertEquals(-(N &gt;&gt; 1), result[2], tolerance);<a name="line.263"></a>
<span class="sourceLineNo">264</span>        for (int i = 0; i &lt; N; i += (i == 1 ? 2 : 1)) {<a name="line.264"></a>
<span class="sourceLineNo">265</span>            Assert.assertEquals(0.0, result[i], tolerance);<a name="line.265"></a>
<span class="sourceLineNo">266</span>        }<a name="line.266"></a>
<span class="sourceLineNo">267</span>    }<a name="line.267"></a>
<span class="sourceLineNo">268</span><a name="line.268"></a>
<span class="sourceLineNo">269</span>    /**<a name="line.269"></a>
<span class="sourceLineNo">270</span>     * Test of parameters for the transformer.<a name="line.270"></a>
<span class="sourceLineNo">271</span>     */<a name="line.271"></a>
<span class="sourceLineNo">272</span>    @Test<a name="line.272"></a>
<span class="sourceLineNo">273</span>    public void testParameters() throws Exception {<a name="line.273"></a>
<span class="sourceLineNo">274</span>        UnivariateFunction f = new Sin();<a name="line.274"></a>
<span class="sourceLineNo">275</span>        FastSineTransformer transformer;<a name="line.275"></a>
<span class="sourceLineNo">276</span>        transformer = new FastSineTransformer(DstNormalization.STANDARD_DST_I);<a name="line.276"></a>
<span class="sourceLineNo">277</span><a name="line.277"></a>
<span class="sourceLineNo">278</span>        try {<a name="line.278"></a>
<span class="sourceLineNo">279</span>            // bad interval<a name="line.279"></a>
<span class="sourceLineNo">280</span>            transformer.transform(f, 1, -1, 64, TransformType.FORWARD);<a name="line.280"></a>
<span class="sourceLineNo">281</span>            Assert.fail("Expecting IllegalArgumentException - bad interval");<a name="line.281"></a>
<span class="sourceLineNo">282</span>        } catch (IllegalArgumentException ex) {<a name="line.282"></a>
<span class="sourceLineNo">283</span>            // expected<a name="line.283"></a>
<span class="sourceLineNo">284</span>        }<a name="line.284"></a>
<span class="sourceLineNo">285</span>        try {<a name="line.285"></a>
<span class="sourceLineNo">286</span>            // bad samples number<a name="line.286"></a>
<span class="sourceLineNo">287</span>            transformer.transform(f, -1, 1, 0, TransformType.FORWARD);<a name="line.287"></a>
<span class="sourceLineNo">288</span>            Assert.fail("Expecting IllegalArgumentException - bad samples number");<a name="line.288"></a>
<span class="sourceLineNo">289</span>        } catch (IllegalArgumentException ex) {<a name="line.289"></a>
<span class="sourceLineNo">290</span>            // expected<a name="line.290"></a>
<span class="sourceLineNo">291</span>        }<a name="line.291"></a>
<span class="sourceLineNo">292</span>        try {<a name="line.292"></a>
<span class="sourceLineNo">293</span>            // bad samples number<a name="line.293"></a>
<span class="sourceLineNo">294</span>            transformer.transform(f, -1, 1, 100, TransformType.FORWARD);<a name="line.294"></a>
<span class="sourceLineNo">295</span>            Assert.fail("Expecting IllegalArgumentException - bad samples number");<a name="line.295"></a>
<span class="sourceLineNo">296</span>        } catch (IllegalArgumentException ex) {<a name="line.296"></a>
<span class="sourceLineNo">297</span>            // expected<a name="line.297"></a>
<span class="sourceLineNo">298</span>        }<a name="line.298"></a>
<span class="sourceLineNo">299</span>    }<a name="line.299"></a>
<span class="sourceLineNo">300</span>}<a name="line.300"></a>




























































</pre>
</div>
</body>
</html>
