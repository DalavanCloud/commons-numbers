<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span>package org.apache.commons.math3.analysis.interpolation;<a name="line.17"></a>
<span class="sourceLineNo">018</span><a name="line.18"></a>
<span class="sourceLineNo">019</span>import java.util.Random;<a name="line.19"></a>
<span class="sourceLineNo">020</span><a name="line.20"></a>
<span class="sourceLineNo">021</span>import org.apache.commons.math3.analysis.polynomials.PolynomialFunction;<a name="line.21"></a>
<span class="sourceLineNo">022</span>import org.apache.commons.math3.dfp.Dfp;<a name="line.22"></a>
<span class="sourceLineNo">023</span>import org.apache.commons.math3.dfp.DfpField;<a name="line.23"></a>
<span class="sourceLineNo">024</span>import org.apache.commons.math3.exception.NoDataException;<a name="line.24"></a>
<span class="sourceLineNo">025</span>import org.apache.commons.math3.fraction.BigFraction;<a name="line.25"></a>
<span class="sourceLineNo">026</span>import org.apache.commons.math3.util.FastMath;<a name="line.26"></a>
<span class="sourceLineNo">027</span>import org.junit.Assert;<a name="line.27"></a>
<span class="sourceLineNo">028</span>import org.junit.Test;<a name="line.28"></a>
<span class="sourceLineNo">029</span><a name="line.29"></a>
<span class="sourceLineNo">030</span>public class FieldHermiteInterpolatorTest {<a name="line.30"></a>
<span class="sourceLineNo">031</span><a name="line.31"></a>
<span class="sourceLineNo">032</span>    @Test<a name="line.32"></a>
<span class="sourceLineNo">033</span>    public void testZero() {<a name="line.33"></a>
<span class="sourceLineNo">034</span>        FieldHermiteInterpolator&lt;BigFraction&gt; interpolator = new FieldHermiteInterpolator&lt;BigFraction&gt;();<a name="line.34"></a>
<span class="sourceLineNo">035</span>        interpolator.addSamplePoint(new BigFraction(0), new BigFraction[] { new BigFraction(0) });<a name="line.35"></a>
<span class="sourceLineNo">036</span>        for (int x = -10; x &lt; 10; x++) {<a name="line.36"></a>
<span class="sourceLineNo">037</span>            BigFraction y = interpolator.value(new BigFraction(x))[0];<a name="line.37"></a>
<span class="sourceLineNo">038</span>            Assert.assertEquals(BigFraction.ZERO, y);<a name="line.38"></a>
<span class="sourceLineNo">039</span>            BigFraction[][] derivatives = interpolator.derivatives(new BigFraction(x), 1);<a name="line.39"></a>
<span class="sourceLineNo">040</span>            Assert.assertEquals(BigFraction.ZERO, derivatives[0][0]);<a name="line.40"></a>
<span class="sourceLineNo">041</span>            Assert.assertEquals(BigFraction.ZERO, derivatives[1][0]);<a name="line.41"></a>
<span class="sourceLineNo">042</span>        }<a name="line.42"></a>
<span class="sourceLineNo">043</span>    }<a name="line.43"></a>
<span class="sourceLineNo">044</span><a name="line.44"></a>
<span class="sourceLineNo">045</span>    @Test<a name="line.45"></a>
<span class="sourceLineNo">046</span>    public void testQuadratic() {<a name="line.46"></a>
<span class="sourceLineNo">047</span>        FieldHermiteInterpolator&lt;BigFraction&gt; interpolator = new FieldHermiteInterpolator&lt;BigFraction&gt;();<a name="line.47"></a>
<span class="sourceLineNo">048</span>        interpolator.addSamplePoint(new BigFraction(0), new BigFraction[] { new BigFraction(2) });<a name="line.48"></a>
<span class="sourceLineNo">049</span>        interpolator.addSamplePoint(new BigFraction(1), new BigFraction[] { new BigFraction(0) });<a name="line.49"></a>
<span class="sourceLineNo">050</span>        interpolator.addSamplePoint(new BigFraction(2), new BigFraction[] { new BigFraction(0) });<a name="line.50"></a>
<span class="sourceLineNo">051</span>        for (double x = -10; x &lt; 10; x += 1.0) {<a name="line.51"></a>
<span class="sourceLineNo">052</span>            BigFraction y = interpolator.value(new BigFraction(x))[0];<a name="line.52"></a>
<span class="sourceLineNo">053</span>            Assert.assertEquals((x - 1) * (x - 2), y.doubleValue(), 1.0e-15);<a name="line.53"></a>
<span class="sourceLineNo">054</span>            BigFraction[][] derivatives = interpolator.derivatives(new BigFraction(x), 3);<a name="line.54"></a>
<span class="sourceLineNo">055</span>            Assert.assertEquals((x - 1) * (x - 2), derivatives[0][0].doubleValue(), 1.0e-15);<a name="line.55"></a>
<span class="sourceLineNo">056</span>            Assert.assertEquals(2 * x - 3, derivatives[1][0].doubleValue(), 1.0e-15);<a name="line.56"></a>
<span class="sourceLineNo">057</span>            Assert.assertEquals(2, derivatives[2][0].doubleValue(), 1.0e-15);<a name="line.57"></a>
<span class="sourceLineNo">058</span>            Assert.assertEquals(0, derivatives[3][0].doubleValue(), 1.0e-15);<a name="line.58"></a>
<span class="sourceLineNo">059</span>        }<a name="line.59"></a>
<span class="sourceLineNo">060</span>    }<a name="line.60"></a>
<span class="sourceLineNo">061</span><a name="line.61"></a>
<span class="sourceLineNo">062</span>    @Test<a name="line.62"></a>
<span class="sourceLineNo">063</span>    public void testMixedDerivatives() {<a name="line.63"></a>
<span class="sourceLineNo">064</span>        FieldHermiteInterpolator&lt;BigFraction&gt; interpolator = new FieldHermiteInterpolator&lt;BigFraction&gt;();<a name="line.64"></a>
<span class="sourceLineNo">065</span>        interpolator.addSamplePoint(new BigFraction(0), new BigFraction[] { new BigFraction(1) }, new BigFraction[] { new BigFraction(2) });<a name="line.65"></a>
<span class="sourceLineNo">066</span>        interpolator.addSamplePoint(new BigFraction(1), new BigFraction[] { new BigFraction(4) });<a name="line.66"></a>
<span class="sourceLineNo">067</span>        interpolator.addSamplePoint(new BigFraction(2), new BigFraction[] { new BigFraction(5) }, new BigFraction[] { new BigFraction(2) });<a name="line.67"></a>
<span class="sourceLineNo">068</span>        BigFraction[][] derivatives = interpolator.derivatives(new BigFraction(0), 5);<a name="line.68"></a>
<span class="sourceLineNo">069</span>        Assert.assertEquals(new BigFraction(  1), derivatives[0][0]);<a name="line.69"></a>
<span class="sourceLineNo">070</span>        Assert.assertEquals(new BigFraction(  2), derivatives[1][0]);<a name="line.70"></a>
<span class="sourceLineNo">071</span>        Assert.assertEquals(new BigFraction(  8), derivatives[2][0]);<a name="line.71"></a>
<span class="sourceLineNo">072</span>        Assert.assertEquals(new BigFraction(-24), derivatives[3][0]);<a name="line.72"></a>
<span class="sourceLineNo">073</span>        Assert.assertEquals(new BigFraction( 24), derivatives[4][0]);<a name="line.73"></a>
<span class="sourceLineNo">074</span>        Assert.assertEquals(new BigFraction(  0), derivatives[5][0]);<a name="line.74"></a>
<span class="sourceLineNo">075</span>        derivatives = interpolator.derivatives(new BigFraction(1), 5);<a name="line.75"></a>
<span class="sourceLineNo">076</span>        Assert.assertEquals(new BigFraction(  4), derivatives[0][0]);<a name="line.76"></a>
<span class="sourceLineNo">077</span>        Assert.assertEquals(new BigFraction(  2), derivatives[1][0]);<a name="line.77"></a>
<span class="sourceLineNo">078</span>        Assert.assertEquals(new BigFraction( -4), derivatives[2][0]);<a name="line.78"></a>
<span class="sourceLineNo">079</span>        Assert.assertEquals(new BigFraction(  0), derivatives[3][0]);<a name="line.79"></a>
<span class="sourceLineNo">080</span>        Assert.assertEquals(new BigFraction( 24), derivatives[4][0]);<a name="line.80"></a>
<span class="sourceLineNo">081</span>        Assert.assertEquals(new BigFraction(  0), derivatives[5][0]);<a name="line.81"></a>
<span class="sourceLineNo">082</span>        derivatives = interpolator.derivatives(new BigFraction(2), 5);<a name="line.82"></a>
<span class="sourceLineNo">083</span>        Assert.assertEquals(new BigFraction(  5), derivatives[0][0]);<a name="line.83"></a>
<span class="sourceLineNo">084</span>        Assert.assertEquals(new BigFraction(  2), derivatives[1][0]);<a name="line.84"></a>
<span class="sourceLineNo">085</span>        Assert.assertEquals(new BigFraction(  8), derivatives[2][0]);<a name="line.85"></a>
<span class="sourceLineNo">086</span>        Assert.assertEquals(new BigFraction( 24), derivatives[3][0]);<a name="line.86"></a>
<span class="sourceLineNo">087</span>        Assert.assertEquals(new BigFraction( 24), derivatives[4][0]);<a name="line.87"></a>
<span class="sourceLineNo">088</span>        Assert.assertEquals(new BigFraction(  0), derivatives[5][0]);<a name="line.88"></a>
<span class="sourceLineNo">089</span>    }<a name="line.89"></a>
<span class="sourceLineNo">090</span><a name="line.90"></a>
<span class="sourceLineNo">091</span>    @Test<a name="line.91"></a>
<span class="sourceLineNo">092</span>    public void testRandomPolynomialsValuesOnly() {<a name="line.92"></a>
<span class="sourceLineNo">093</span><a name="line.93"></a>
<span class="sourceLineNo">094</span>        Random random = new Random(0x42b1e7dbd361a932l);<a name="line.94"></a>
<span class="sourceLineNo">095</span><a name="line.95"></a>
<span class="sourceLineNo">096</span>        for (int i = 0; i &lt; 100; ++i) {<a name="line.96"></a>
<span class="sourceLineNo">097</span><a name="line.97"></a>
<span class="sourceLineNo">098</span>            int maxDegree = 0;<a name="line.98"></a>
<span class="sourceLineNo">099</span>            PolynomialFunction[] p = new PolynomialFunction[5];<a name="line.99"></a>
<span class="sourceLineNo">100</span>            for (int k = 0; k &lt; p.length; ++k) {<a name="line.100"></a>
<span class="sourceLineNo">101</span>                int degree = random.nextInt(7);<a name="line.101"></a>
<span class="sourceLineNo">102</span>                p[k] = randomPolynomial(degree, random);<a name="line.102"></a>
<span class="sourceLineNo">103</span>                maxDegree = FastMath.max(maxDegree, degree);<a name="line.103"></a>
<span class="sourceLineNo">104</span>            }<a name="line.104"></a>
<span class="sourceLineNo">105</span><a name="line.105"></a>
<span class="sourceLineNo">106</span>            DfpField field = new DfpField(30);<a name="line.106"></a>
<span class="sourceLineNo">107</span>            Dfp step = field.getOne().divide(field.newDfp(10));<a name="line.107"></a>
<span class="sourceLineNo">108</span>            FieldHermiteInterpolator&lt;Dfp&gt; interpolator = new FieldHermiteInterpolator&lt;Dfp&gt;();<a name="line.108"></a>
<span class="sourceLineNo">109</span>            for (int j = 0; j &lt; 1 + maxDegree; ++j) {<a name="line.109"></a>
<span class="sourceLineNo">110</span>                Dfp x = field.newDfp(j).multiply(step);<a name="line.110"></a>
<span class="sourceLineNo">111</span>                Dfp[] values = new Dfp[p.length];<a name="line.111"></a>
<span class="sourceLineNo">112</span>                for (int k = 0; k &lt; p.length; ++k) {<a name="line.112"></a>
<span class="sourceLineNo">113</span>                    values[k] = field.newDfp(p[k].value(x.getReal()));<a name="line.113"></a>
<span class="sourceLineNo">114</span>                }<a name="line.114"></a>
<span class="sourceLineNo">115</span>                interpolator.addSamplePoint(x, values);<a name="line.115"></a>
<span class="sourceLineNo">116</span>            }<a name="line.116"></a>
<span class="sourceLineNo">117</span><a name="line.117"></a>
<span class="sourceLineNo">118</span>            for (int j = 0; j &lt; 20; ++j) {<a name="line.118"></a>
<span class="sourceLineNo">119</span>                Dfp x = field.newDfp(j).multiply(step);<a name="line.119"></a>
<span class="sourceLineNo">120</span>                Dfp[] values = interpolator.value(x);<a name="line.120"></a>
<span class="sourceLineNo">121</span>                Assert.assertEquals(p.length, values.length);<a name="line.121"></a>
<span class="sourceLineNo">122</span>                for (int k = 0; k &lt; p.length; ++k) {<a name="line.122"></a>
<span class="sourceLineNo">123</span>                    Assert.assertEquals(p[k].value(x.getReal()),<a name="line.123"></a>
<span class="sourceLineNo">124</span>                                        values[k].getReal(),<a name="line.124"></a>
<span class="sourceLineNo">125</span>                                        1.0e-8 * FastMath.abs(p[k].value(x.getReal())));<a name="line.125"></a>
<span class="sourceLineNo">126</span>                }<a name="line.126"></a>
<span class="sourceLineNo">127</span>            }<a name="line.127"></a>
<span class="sourceLineNo">128</span><a name="line.128"></a>
<span class="sourceLineNo">129</span>        }<a name="line.129"></a>
<span class="sourceLineNo">130</span><a name="line.130"></a>
<span class="sourceLineNo">131</span>    }<a name="line.131"></a>
<span class="sourceLineNo">132</span><a name="line.132"></a>
<span class="sourceLineNo">133</span>    @Test<a name="line.133"></a>
<span class="sourceLineNo">134</span>    public void testRandomPolynomialsFirstDerivative() {<a name="line.134"></a>
<span class="sourceLineNo">135</span><a name="line.135"></a>
<span class="sourceLineNo">136</span>        Random random = new Random(0x570803c982ca5d3bl);<a name="line.136"></a>
<span class="sourceLineNo">137</span><a name="line.137"></a>
<span class="sourceLineNo">138</span>        for (int i = 0; i &lt; 100; ++i) {<a name="line.138"></a>
<span class="sourceLineNo">139</span><a name="line.139"></a>
<span class="sourceLineNo">140</span>            int maxDegree = 0;<a name="line.140"></a>
<span class="sourceLineNo">141</span>            PolynomialFunction[] p      = new PolynomialFunction[5];<a name="line.141"></a>
<span class="sourceLineNo">142</span>            PolynomialFunction[] pPrime = new PolynomialFunction[5];<a name="line.142"></a>
<span class="sourceLineNo">143</span>            for (int k = 0; k &lt; p.length; ++k) {<a name="line.143"></a>
<span class="sourceLineNo">144</span>                int degree = random.nextInt(7);<a name="line.144"></a>
<span class="sourceLineNo">145</span>                p[k]      = randomPolynomial(degree, random);<a name="line.145"></a>
<span class="sourceLineNo">146</span>                pPrime[k] = p[k].polynomialDerivative();<a name="line.146"></a>
<span class="sourceLineNo">147</span>                maxDegree = FastMath.max(maxDegree, degree);<a name="line.147"></a>
<span class="sourceLineNo">148</span>            }<a name="line.148"></a>
<span class="sourceLineNo">149</span><a name="line.149"></a>
<span class="sourceLineNo">150</span>            DfpField field = new DfpField(30);<a name="line.150"></a>
<span class="sourceLineNo">151</span>            Dfp step = field.getOne().divide(field.newDfp(10));<a name="line.151"></a>
<span class="sourceLineNo">152</span>            FieldHermiteInterpolator&lt;Dfp&gt; interpolator = new FieldHermiteInterpolator&lt;Dfp&gt;();<a name="line.152"></a>
<span class="sourceLineNo">153</span>            for (int j = 0; j &lt; 1 + maxDegree / 2; ++j) {<a name="line.153"></a>
<span class="sourceLineNo">154</span>                Dfp x = field.newDfp(j).multiply(step);<a name="line.154"></a>
<span class="sourceLineNo">155</span>                Dfp[] values      = new Dfp[p.length];<a name="line.155"></a>
<span class="sourceLineNo">156</span>                Dfp[] derivatives = new Dfp[p.length];<a name="line.156"></a>
<span class="sourceLineNo">157</span>                for (int k = 0; k &lt; p.length; ++k) {<a name="line.157"></a>
<span class="sourceLineNo">158</span>                    values[k]      = field.newDfp(p[k].value(x.getReal()));<a name="line.158"></a>
<span class="sourceLineNo">159</span>                    derivatives[k] = field.newDfp(pPrime[k].value(x.getReal()));<a name="line.159"></a>
<span class="sourceLineNo">160</span>                }<a name="line.160"></a>
<span class="sourceLineNo">161</span>                interpolator.addSamplePoint(x, values, derivatives);<a name="line.161"></a>
<span class="sourceLineNo">162</span>            }<a name="line.162"></a>
<span class="sourceLineNo">163</span><a name="line.163"></a>
<span class="sourceLineNo">164</span>            Dfp h = step.divide(field.newDfp(100000));<a name="line.164"></a>
<span class="sourceLineNo">165</span>            for (int j = 0; j &lt; 20; ++j) {<a name="line.165"></a>
<span class="sourceLineNo">166</span>                Dfp x = field.newDfp(j).multiply(step);<a name="line.166"></a>
<span class="sourceLineNo">167</span>                Dfp[] y  = interpolator.value(x);<a name="line.167"></a>
<span class="sourceLineNo">168</span>                Dfp[] yP = interpolator.value(x.add(h));<a name="line.168"></a>
<span class="sourceLineNo">169</span>                Dfp[] yM = interpolator.value(x.subtract(h));<a name="line.169"></a>
<span class="sourceLineNo">170</span>                Assert.assertEquals(p.length, y.length);<a name="line.170"></a>
<span class="sourceLineNo">171</span>                for (int k = 0; k &lt; p.length; ++k) {<a name="line.171"></a>
<span class="sourceLineNo">172</span>                    Assert.assertEquals(p[k].value(x.getReal()),<a name="line.172"></a>
<span class="sourceLineNo">173</span>                                        y[k].getReal(),<a name="line.173"></a>
<span class="sourceLineNo">174</span>                                        1.0e-8 * FastMath.abs(p[k].value(x.getReal())));<a name="line.174"></a>
<span class="sourceLineNo">175</span>                    Assert.assertEquals(pPrime[k].value(x.getReal()),<a name="line.175"></a>
<span class="sourceLineNo">176</span>                                        yP[k].subtract(yM[k]).divide(h.multiply(2)).getReal(),<a name="line.176"></a>
<span class="sourceLineNo">177</span>                                        4.0e-8 * FastMath.abs(p[k].value(x.getReal())));<a name="line.177"></a>
<span class="sourceLineNo">178</span>                }<a name="line.178"></a>
<span class="sourceLineNo">179</span>            }<a name="line.179"></a>
<span class="sourceLineNo">180</span><a name="line.180"></a>
<span class="sourceLineNo">181</span>        }<a name="line.181"></a>
<span class="sourceLineNo">182</span>    }<a name="line.182"></a>
<span class="sourceLineNo">183</span><a name="line.183"></a>
<span class="sourceLineNo">184</span>    @Test<a name="line.184"></a>
<span class="sourceLineNo">185</span>    public void testSine() {<a name="line.185"></a>
<span class="sourceLineNo">186</span>        DfpField field = new DfpField(30);<a name="line.186"></a>
<span class="sourceLineNo">187</span>        FieldHermiteInterpolator&lt;Dfp&gt; interpolator = new FieldHermiteInterpolator&lt;Dfp&gt;();<a name="line.187"></a>
<span class="sourceLineNo">188</span>        for (Dfp x = field.getZero(); x.getReal() &lt; FastMath.PI; x = x.add(0.5)) {<a name="line.188"></a>
<span class="sourceLineNo">189</span>            interpolator.addSamplePoint(x, new Dfp[] { x.sin() });<a name="line.189"></a>
<span class="sourceLineNo">190</span>        }<a name="line.190"></a>
<span class="sourceLineNo">191</span>        for (Dfp x = field.newDfp(0.1); x.getReal() &lt; 2.9; x = x.add(0.01)) {<a name="line.191"></a>
<span class="sourceLineNo">192</span>            Dfp y = interpolator.value(x)[0];<a name="line.192"></a>
<span class="sourceLineNo">193</span>            Assert.assertEquals( x.sin().getReal(), y.getReal(), 3.5e-5);<a name="line.193"></a>
<span class="sourceLineNo">194</span>        }<a name="line.194"></a>
<span class="sourceLineNo">195</span>    }<a name="line.195"></a>
<span class="sourceLineNo">196</span><a name="line.196"></a>
<span class="sourceLineNo">197</span>    @Test<a name="line.197"></a>
<span class="sourceLineNo">198</span>    public void testSquareRoot() {<a name="line.198"></a>
<span class="sourceLineNo">199</span>        DfpField field = new DfpField(30);<a name="line.199"></a>
<span class="sourceLineNo">200</span>        FieldHermiteInterpolator&lt;Dfp&gt; interpolator = new FieldHermiteInterpolator&lt;Dfp&gt;();<a name="line.200"></a>
<span class="sourceLineNo">201</span>        for (Dfp x = field.getOne(); x.getReal() &lt; 3.6; x = x.add(0.5)) {<a name="line.201"></a>
<span class="sourceLineNo">202</span>            interpolator.addSamplePoint(x, new Dfp[] { x.sqrt() });<a name="line.202"></a>
<span class="sourceLineNo">203</span>        }<a name="line.203"></a>
<span class="sourceLineNo">204</span>        for (Dfp x = field.newDfp(1.1); x.getReal() &lt; 3.5; x = x.add(0.01)) {<a name="line.204"></a>
<span class="sourceLineNo">205</span>            Dfp y = interpolator.value(x)[0];<a name="line.205"></a>
<span class="sourceLineNo">206</span>            Assert.assertEquals(x.sqrt().getReal(), y.getReal(), 1.5e-4);<a name="line.206"></a>
<span class="sourceLineNo">207</span>        }<a name="line.207"></a>
<span class="sourceLineNo">208</span>    }<a name="line.208"></a>
<span class="sourceLineNo">209</span><a name="line.209"></a>
<span class="sourceLineNo">210</span>    @Test<a name="line.210"></a>
<span class="sourceLineNo">211</span>    public void testWikipedia() {<a name="line.211"></a>
<span class="sourceLineNo">212</span>        // this test corresponds to the example from Wikipedia page:<a name="line.212"></a>
<span class="sourceLineNo">213</span>        // http://en.wikipedia.org/wiki/Hermite_interpolation<a name="line.213"></a>
<span class="sourceLineNo">214</span>        FieldHermiteInterpolator&lt;BigFraction&gt; interpolator = new FieldHermiteInterpolator&lt;BigFraction&gt;();<a name="line.214"></a>
<span class="sourceLineNo">215</span>        interpolator.addSamplePoint(new BigFraction(-1),<a name="line.215"></a>
<span class="sourceLineNo">216</span>                                    new BigFraction[] { new BigFraction( 2) },<a name="line.216"></a>
<span class="sourceLineNo">217</span>                                    new BigFraction[] { new BigFraction(-8) },<a name="line.217"></a>
<span class="sourceLineNo">218</span>                                    new BigFraction[] { new BigFraction(56) });<a name="line.218"></a>
<span class="sourceLineNo">219</span>        interpolator.addSamplePoint(new BigFraction( 0),<a name="line.219"></a>
<span class="sourceLineNo">220</span>                                    new BigFraction[] { new BigFraction( 1) },<a name="line.220"></a>
<span class="sourceLineNo">221</span>                                    new BigFraction[] { new BigFraction( 0) },<a name="line.221"></a>
<span class="sourceLineNo">222</span>                                    new BigFraction[] { new BigFraction( 0) });<a name="line.222"></a>
<span class="sourceLineNo">223</span>        interpolator.addSamplePoint(new BigFraction( 1),<a name="line.223"></a>
<span class="sourceLineNo">224</span>                                    new BigFraction[] { new BigFraction( 2) },<a name="line.224"></a>
<span class="sourceLineNo">225</span>                                    new BigFraction[] { new BigFraction( 8) },<a name="line.225"></a>
<span class="sourceLineNo">226</span>                                    new BigFraction[] { new BigFraction(56) });<a name="line.226"></a>
<span class="sourceLineNo">227</span>        for (BigFraction x = new BigFraction(-1); x.doubleValue() &lt;= 1.0; x = x.add(new BigFraction(1, 8))) {<a name="line.227"></a>
<span class="sourceLineNo">228</span>            BigFraction y = interpolator.value(x)[0];<a name="line.228"></a>
<span class="sourceLineNo">229</span>            BigFraction x2 = x.multiply(x);<a name="line.229"></a>
<span class="sourceLineNo">230</span>            BigFraction x4 = x2.multiply(x2);<a name="line.230"></a>
<span class="sourceLineNo">231</span>            BigFraction x8 = x4.multiply(x4);<a name="line.231"></a>
<span class="sourceLineNo">232</span>            Assert.assertEquals(x8.add(new BigFraction(1)), y);<a name="line.232"></a>
<span class="sourceLineNo">233</span>        }<a name="line.233"></a>
<span class="sourceLineNo">234</span>    }<a name="line.234"></a>
<span class="sourceLineNo">235</span><a name="line.235"></a>
<span class="sourceLineNo">236</span>    @Test<a name="line.236"></a>
<span class="sourceLineNo">237</span>    public void testOnePointParabola() {<a name="line.237"></a>
<span class="sourceLineNo">238</span>        FieldHermiteInterpolator&lt;BigFraction&gt; interpolator = new FieldHermiteInterpolator&lt;BigFraction&gt;();<a name="line.238"></a>
<span class="sourceLineNo">239</span>        interpolator.addSamplePoint(new BigFraction(0),<a name="line.239"></a>
<span class="sourceLineNo">240</span>                                    new BigFraction[] { new BigFraction(1) },<a name="line.240"></a>
<span class="sourceLineNo">241</span>                                    new BigFraction[] { new BigFraction(1) },<a name="line.241"></a>
<span class="sourceLineNo">242</span>                                    new BigFraction[] { new BigFraction(2) });<a name="line.242"></a>
<span class="sourceLineNo">243</span>        for (BigFraction x = new BigFraction(-1); x.doubleValue() &lt;= 1.0; x = x.add(new BigFraction(1, 8))) {<a name="line.243"></a>
<span class="sourceLineNo">244</span>            BigFraction y = interpolator.value(x)[0];<a name="line.244"></a>
<span class="sourceLineNo">245</span>            Assert.assertEquals(BigFraction.ONE.add(x.multiply(BigFraction.ONE.add(x))), y);<a name="line.245"></a>
<span class="sourceLineNo">246</span>        }<a name="line.246"></a>
<span class="sourceLineNo">247</span>    }<a name="line.247"></a>
<span class="sourceLineNo">248</span><a name="line.248"></a>
<span class="sourceLineNo">249</span>    private PolynomialFunction randomPolynomial(int degree, Random random) {<a name="line.249"></a>
<span class="sourceLineNo">250</span>        double[] coeff = new double[ 1 + degree];<a name="line.250"></a>
<span class="sourceLineNo">251</span>        for (int j = 0; j &lt; degree; ++j) {<a name="line.251"></a>
<span class="sourceLineNo">252</span>            coeff[j] = random.nextDouble();<a name="line.252"></a>
<span class="sourceLineNo">253</span>        }<a name="line.253"></a>
<span class="sourceLineNo">254</span>        return new PolynomialFunction(coeff);<a name="line.254"></a>
<span class="sourceLineNo">255</span>    }<a name="line.255"></a>
<span class="sourceLineNo">256</span><a name="line.256"></a>
<span class="sourceLineNo">257</span>    @Test(expected=NoDataException.class)<a name="line.257"></a>
<span class="sourceLineNo">258</span>    public void testEmptySampleValue() {<a name="line.258"></a>
<span class="sourceLineNo">259</span>        new FieldHermiteInterpolator&lt;BigFraction&gt;().value(BigFraction.ZERO);<a name="line.259"></a>
<span class="sourceLineNo">260</span>    }<a name="line.260"></a>
<span class="sourceLineNo">261</span><a name="line.261"></a>
<span class="sourceLineNo">262</span>    @Test(expected=NoDataException.class)<a name="line.262"></a>
<span class="sourceLineNo">263</span>    public void testEmptySampleDerivative() {<a name="line.263"></a>
<span class="sourceLineNo">264</span>        new FieldHermiteInterpolator&lt;BigFraction&gt;().derivatives(BigFraction.ZERO, 1);<a name="line.264"></a>
<span class="sourceLineNo">265</span>    }<a name="line.265"></a>
<span class="sourceLineNo">266</span><a name="line.266"></a>
<span class="sourceLineNo">267</span>    @Test(expected=IllegalArgumentException.class)<a name="line.267"></a>
<span class="sourceLineNo">268</span>    public void testDuplicatedAbscissa() {<a name="line.268"></a>
<span class="sourceLineNo">269</span>        FieldHermiteInterpolator&lt;BigFraction&gt; interpolator = new FieldHermiteInterpolator&lt;BigFraction&gt;();<a name="line.269"></a>
<span class="sourceLineNo">270</span>        interpolator.addSamplePoint(new BigFraction(1), new BigFraction[] { new BigFraction(0) });<a name="line.270"></a>
<span class="sourceLineNo">271</span>        interpolator.addSamplePoint(new BigFraction(1), new BigFraction[] { new BigFraction(1) });<a name="line.271"></a>
<span class="sourceLineNo">272</span>    }<a name="line.272"></a>
<span class="sourceLineNo">273</span><a name="line.273"></a>
<span class="sourceLineNo">274</span>}<a name="line.274"></a>
<span class="sourceLineNo">275</span><a name="line.275"></a>




























































</pre>
</div>
</body>
</html>
