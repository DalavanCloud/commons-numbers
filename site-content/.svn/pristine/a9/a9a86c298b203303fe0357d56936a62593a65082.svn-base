<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>UnifiedDistanceMatrix xref</title>
<link type="text/css" rel="stylesheet" href="../../../../../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../../../apidocs/org/apache/commons/math3/ml/neuralnet/twod/util/UnifiedDistanceMatrix.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Licensed to the Apache Software Foundation (ASF) under one or more</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> * contributor license agreements.  See the NOTICE file distributed with</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * this work for additional information regarding copyright ownership.</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * The ASF licenses this file to You under the Apache License, Version 2.0</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * (the "License"); you may not use this file except in compliance with</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> * the License.  You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *      <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  <strong class="jxr_keyword">package</strong> org.apache.commons.math3.ml.neuralnet.twod.util;
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> java.util.Collection;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.ml.neuralnet.Neuron;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.ml.neuralnet.Network;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D;
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.ml.distance.DistanceMeasure;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <em class="jxr_javadoccomment"> * &lt;a href="<a href="http://en.wikipedia.org/wiki/U-Matrix" target="alexandria_uri">http://en.wikipedia.org/wiki/U-Matrix</a>"&gt;U-Matrix&lt;/a&gt;</em>
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <em class="jxr_javadoccomment"> * visualization of high-dimensional data projection.</em>
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <em class="jxr_javadoccomment"> * @since 3.6</em>
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../../../../org/apache/commons/math3/ml/neuralnet/twod/util/UnifiedDistanceMatrix.html">UnifiedDistanceMatrix</a> <strong class="jxr_keyword">implements</strong> <a href="../../../../../../../../org/apache/commons/math3/ml/neuralnet/twod/util/MapVisualization.html">MapVisualization</a> {
<a class="jxr_linenumber" name="L32" href="#L32">32</a>      <em class="jxr_javadoccomment">/** Whether to show distance between each pair of neighbouring units. */</em>
<a class="jxr_linenumber" name="L33" href="#L33">33</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">boolean</strong> individualDistances;
<a class="jxr_linenumber" name="L34" href="#L34">34</a>      <em class="jxr_javadoccomment">/** Distance. */</em>
<a class="jxr_linenumber" name="L35" href="#L35">35</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> <a href="../../../../../../../../org/apache/commons/math3/ml/distance/DistanceMeasure.html">DistanceMeasure</a> distance;
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  
<a class="jxr_linenumber" name="L37" href="#L37">37</a>      <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L38" href="#L38">38</a>  <em class="jxr_javadoccomment">     * Simple constructor.</em>
<a class="jxr_linenumber" name="L39" href="#L39">39</a>  <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L40" href="#L40">40</a>  <em class="jxr_javadoccomment">     * @param individualDistances If {@code true}, the 8 individual</em>
<a class="jxr_linenumber" name="L41" href="#L41">41</a>  <em class="jxr_javadoccomment">     * inter-units distances will be {@link #computeImage(NeuronSquareMesh2D)</em>
<a class="jxr_linenumber" name="L42" href="#L42">42</a>  <em class="jxr_javadoccomment">     * computed}.  They will be stored in additional pixels around each of</em>
<a class="jxr_linenumber" name="L43" href="#L43">43</a>  <em class="jxr_javadoccomment">     * the original units of the 2D-map.  The additional pixels that lie</em>
<a class="jxr_linenumber" name="L44" href="#L44">44</a>  <em class="jxr_javadoccomment">     * along a "diagonal" are shared by &lt;em&gt;two&lt;/em&gt; pairs of units: their</em>
<a class="jxr_linenumber" name="L45" href="#L45">45</a>  <em class="jxr_javadoccomment">     * value will be set to the average distance between the units belonging</em>
<a class="jxr_linenumber" name="L46" href="#L46">46</a>  <em class="jxr_javadoccomment">     * to each of the pairs.  The value zero will be stored in the pixel</em>
<a class="jxr_linenumber" name="L47" href="#L47">47</a>  <em class="jxr_javadoccomment">     * corresponding to the location of a unit of the 2D-map.</em>
<a class="jxr_linenumber" name="L48" href="#L48">48</a>  <em class="jxr_javadoccomment">     * &lt;br&gt;</em>
<a class="jxr_linenumber" name="L49" href="#L49">49</a>  <em class="jxr_javadoccomment">     * If {@code false}, only the average distance between a unit and all its</em>
<a class="jxr_linenumber" name="L50" href="#L50">50</a>  <em class="jxr_javadoccomment">     * neighbours will be computed (and stored in the pixel corresponding to</em>
<a class="jxr_linenumber" name="L51" href="#L51">51</a>  <em class="jxr_javadoccomment">     * that unit of the 2D-map).  In that case, the number of neighbours taken</em>
<a class="jxr_linenumber" name="L52" href="#L52">52</a>  <em class="jxr_javadoccomment">     * into account depends on the network's</em>
<a class="jxr_linenumber" name="L53" href="#L53">53</a>  <em class="jxr_javadoccomment">     * {@link org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood</em>
<a class="jxr_linenumber" name="L54" href="#L54">54</a>  <em class="jxr_javadoccomment">     * neighbourhood type}.</em>
<a class="jxr_linenumber" name="L55" href="#L55">55</a>  <em class="jxr_javadoccomment">     * @param distance Distance.</em>
<a class="jxr_linenumber" name="L56" href="#L56">56</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L57" href="#L57">57</a>      <strong class="jxr_keyword">public</strong> <a href="../../../../../../../../org/apache/commons/math3/ml/neuralnet/twod/util/UnifiedDistanceMatrix.html">UnifiedDistanceMatrix</a>(<strong class="jxr_keyword">boolean</strong> individualDistances,
<a class="jxr_linenumber" name="L58" href="#L58">58</a>                                   <a href="../../../../../../../../org/apache/commons/math3/ml/distance/DistanceMeasure.html">DistanceMeasure</a> distance) {
<a class="jxr_linenumber" name="L59" href="#L59">59</a>          <strong class="jxr_keyword">this</strong>.individualDistances = individualDistances;
<a class="jxr_linenumber" name="L60" href="#L60">60</a>          <strong class="jxr_keyword">this</strong>.distance = distance;
<a class="jxr_linenumber" name="L61" href="#L61">61</a>      }
<a class="jxr_linenumber" name="L62" href="#L62">62</a>  
<a class="jxr_linenumber" name="L63" href="#L63">63</a>      <em class="jxr_javadoccomment">/** {@inheritDoc} */</em>
<a class="jxr_linenumber" name="L64" href="#L64">64</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">double</strong>[][] computeImage(<a href="../../../../../../../../org/apache/commons/math3/ml/neuralnet/twod/NeuronSquareMesh2D.html">NeuronSquareMesh2D</a> map) {
<a class="jxr_linenumber" name="L65" href="#L65">65</a>          <strong class="jxr_keyword">if</strong> (individualDistances) {
<a class="jxr_linenumber" name="L66" href="#L66">66</a>              <strong class="jxr_keyword">return</strong> individualDistances(map);
<a class="jxr_linenumber" name="L67" href="#L67">67</a>          } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L68" href="#L68">68</a>              <strong class="jxr_keyword">return</strong> averageDistances(map);
<a class="jxr_linenumber" name="L69" href="#L69">69</a>          }
<a class="jxr_linenumber" name="L70" href="#L70">70</a>      }
<a class="jxr_linenumber" name="L71" href="#L71">71</a>  
<a class="jxr_linenumber" name="L72" href="#L72">72</a>      <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L73" href="#L73">73</a>  <em class="jxr_javadoccomment">     * Computes the distances between a unit of the map and its</em>
<a class="jxr_linenumber" name="L74" href="#L74">74</a>  <em class="jxr_javadoccomment">     * neighbours.</em>
<a class="jxr_linenumber" name="L75" href="#L75">75</a>  <em class="jxr_javadoccomment">     * The image will contain more pixels than the number of neurons</em>
<a class="jxr_linenumber" name="L76" href="#L76">76</a>  <em class="jxr_javadoccomment">     * in the given {@code map} because each neuron has 8 neighbours.</em>
<a class="jxr_linenumber" name="L77" href="#L77">77</a>  <em class="jxr_javadoccomment">     * The value zero will be stored in the pixels corresponding to</em>
<a class="jxr_linenumber" name="L78" href="#L78">78</a>  <em class="jxr_javadoccomment">     * the location of a map unit.</em>
<a class="jxr_linenumber" name="L79" href="#L79">79</a>  <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L80" href="#L80">80</a>  <em class="jxr_javadoccomment">     * @param map Map.</em>
<a class="jxr_linenumber" name="L81" href="#L81">81</a>  <em class="jxr_javadoccomment">     * @return an image representing the individual distances.</em>
<a class="jxr_linenumber" name="L82" href="#L82">82</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L83" href="#L83">83</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">double</strong>[][] individualDistances(<a href="../../../../../../../../org/apache/commons/math3/ml/neuralnet/twod/NeuronSquareMesh2D.html">NeuronSquareMesh2D</a> map) {
<a class="jxr_linenumber" name="L84" href="#L84">84</a>          <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> numRows = map.getNumberOfRows();
<a class="jxr_linenumber" name="L85" href="#L85">85</a>          <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> numCols = map.getNumberOfColumns();
<a class="jxr_linenumber" name="L86" href="#L86">86</a>  
<a class="jxr_linenumber" name="L87" href="#L87">87</a>          <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[][] uMatrix = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[numRows * 2 + 1][numCols * 2 + 1];
<a class="jxr_linenumber" name="L88" href="#L88">88</a>  
<a class="jxr_linenumber" name="L89" href="#L89">89</a>          <em class="jxr_comment">// 1.</em>
<a class="jxr_linenumber" name="L90" href="#L90">90</a>          <em class="jxr_comment">// Fill right and bottom slots of each unit's location with the</em>
<a class="jxr_linenumber" name="L91" href="#L91">91</a>          <em class="jxr_comment">// distance between the current unit and each of the two neighbours,</em>
<a class="jxr_linenumber" name="L92" href="#L92">92</a>          <em class="jxr_comment">// respectively.</em>
<a class="jxr_linenumber" name="L93" href="#L93">93</a>          <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; numRows; i++) {
<a class="jxr_linenumber" name="L94" href="#L94">94</a>              <em class="jxr_comment">// Current unit's row index in result image.</em>
<a class="jxr_linenumber" name="L95" href="#L95">95</a>              <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> iR = 2 * i + 1;
<a class="jxr_linenumber" name="L96" href="#L96">96</a>  
<a class="jxr_linenumber" name="L97" href="#L97">97</a>              <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = 0; j &lt; numCols; j++) {
<a class="jxr_linenumber" name="L98" href="#L98">98</a>                  <em class="jxr_comment">// Current unit's column index in result image.</em>
<a class="jxr_linenumber" name="L99" href="#L99">99</a>                  <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> jR = 2 * j + 1;
<a class="jxr_linenumber" name="L100" href="#L100">100</a> 
<a class="jxr_linenumber" name="L101" href="#L101">101</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] current = map.getNeuron(i, j).getFeatures();
<a class="jxr_linenumber" name="L102" href="#L102">102</a>                 <a href="../../../../../../../../org/apache/commons/math3/ml/neuralnet/Neuron.html">Neuron</a> neighbour;
<a class="jxr_linenumber" name="L103" href="#L103">103</a> 
<a class="jxr_linenumber" name="L104" href="#L104">104</a>                 <em class="jxr_comment">// Right neighbour.</em>
<a class="jxr_linenumber" name="L105" href="#L105">105</a>                 neighbour = map.getNeuron(i, j,
<a class="jxr_linenumber" name="L106" href="#L106">106</a>                                           NeuronSquareMesh2D.HorizontalDirection.RIGHT,
<a class="jxr_linenumber" name="L107" href="#L107">107</a>                                           NeuronSquareMesh2D.VerticalDirection.CENTER);
<a class="jxr_linenumber" name="L108" href="#L108">108</a>                 <strong class="jxr_keyword">if</strong> (neighbour != <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L109" href="#L109">109</a>                     uMatrix[iR][jR + 1] = distance.compute(current,
<a class="jxr_linenumber" name="L110" href="#L110">110</a>                                                            neighbour.getFeatures());
<a class="jxr_linenumber" name="L111" href="#L111">111</a>                 }
<a class="jxr_linenumber" name="L112" href="#L112">112</a> 
<a class="jxr_linenumber" name="L113" href="#L113">113</a>                 <em class="jxr_comment">// Bottom-center neighbour.</em>
<a class="jxr_linenumber" name="L114" href="#L114">114</a>                 neighbour = map.getNeuron(i, j,
<a class="jxr_linenumber" name="L115" href="#L115">115</a>                                           NeuronSquareMesh2D.HorizontalDirection.CENTER,
<a class="jxr_linenumber" name="L116" href="#L116">116</a>                                           NeuronSquareMesh2D.VerticalDirection.DOWN);
<a class="jxr_linenumber" name="L117" href="#L117">117</a>                 <strong class="jxr_keyword">if</strong> (neighbour != <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L118" href="#L118">118</a>                     uMatrix[iR + 1][jR] = distance.compute(current,
<a class="jxr_linenumber" name="L119" href="#L119">119</a>                                                            neighbour.getFeatures());
<a class="jxr_linenumber" name="L120" href="#L120">120</a>                 }
<a class="jxr_linenumber" name="L121" href="#L121">121</a>             }
<a class="jxr_linenumber" name="L122" href="#L122">122</a>         }
<a class="jxr_linenumber" name="L123" href="#L123">123</a> 
<a class="jxr_linenumber" name="L124" href="#L124">124</a>         <em class="jxr_comment">// 2.</em>
<a class="jxr_linenumber" name="L125" href="#L125">125</a>         <em class="jxr_comment">// Fill the bottom-rigth slot of each unit's location with the average</em>
<a class="jxr_linenumber" name="L126" href="#L126">126</a>         <em class="jxr_comment">// of the distances between</em>
<a class="jxr_linenumber" name="L127" href="#L127">127</a>         <em class="jxr_comment">//  * the current unit and its bottom-right neighbour, and</em>
<a class="jxr_linenumber" name="L128" href="#L128">128</a>         <em class="jxr_comment">//  * the bottom-center neighbour and the right neighbour.</em>
<a class="jxr_linenumber" name="L129" href="#L129">129</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; numRows; i++) {
<a class="jxr_linenumber" name="L130" href="#L130">130</a>             <em class="jxr_comment">// Current unit's row index in result image.</em>
<a class="jxr_linenumber" name="L131" href="#L131">131</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> iR = 2 * i + 1;
<a class="jxr_linenumber" name="L132" href="#L132">132</a> 
<a class="jxr_linenumber" name="L133" href="#L133">133</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = 0; j &lt; numCols; j++) {
<a class="jxr_linenumber" name="L134" href="#L134">134</a>                 <em class="jxr_comment">// Current unit's column index in result image.</em>
<a class="jxr_linenumber" name="L135" href="#L135">135</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> jR = 2 * j + 1;
<a class="jxr_linenumber" name="L136" href="#L136">136</a> 
<a class="jxr_linenumber" name="L137" href="#L137">137</a>                 <strong class="jxr_keyword">final</strong> <a href="../../../../../../../../org/apache/commons/math3/ml/neuralnet/Neuron.html">Neuron</a> current = map.getNeuron(i, j);
<a class="jxr_linenumber" name="L138" href="#L138">138</a>                 <strong class="jxr_keyword">final</strong> <a href="../../../../../../../../org/apache/commons/math3/ml/neuralnet/Neuron.html">Neuron</a> right = map.getNeuron(i, j,
<a class="jxr_linenumber" name="L139" href="#L139">139</a>                                                    NeuronSquareMesh2D.HorizontalDirection.RIGHT,
<a class="jxr_linenumber" name="L140" href="#L140">140</a>                                                    NeuronSquareMesh2D.VerticalDirection.CENTER);
<a class="jxr_linenumber" name="L141" href="#L141">141</a>                 <strong class="jxr_keyword">final</strong> <a href="../../../../../../../../org/apache/commons/math3/ml/neuralnet/Neuron.html">Neuron</a> bottom = map.getNeuron(i, j,
<a class="jxr_linenumber" name="L142" href="#L142">142</a>                                                     NeuronSquareMesh2D.HorizontalDirection.CENTER,
<a class="jxr_linenumber" name="L143" href="#L143">143</a>                                                     NeuronSquareMesh2D.VerticalDirection.DOWN);
<a class="jxr_linenumber" name="L144" href="#L144">144</a>                 <strong class="jxr_keyword">final</strong> <a href="../../../../../../../../org/apache/commons/math3/ml/neuralnet/Neuron.html">Neuron</a> bottomRight = map.getNeuron(i, j,
<a class="jxr_linenumber" name="L145" href="#L145">145</a>                                                          NeuronSquareMesh2D.HorizontalDirection.RIGHT,
<a class="jxr_linenumber" name="L146" href="#L146">146</a>                                                          NeuronSquareMesh2D.VerticalDirection.DOWN);
<a class="jxr_linenumber" name="L147" href="#L147">147</a> 
<a class="jxr_linenumber" name="L148" href="#L148">148</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> current2BottomRight = bottomRight == <strong class="jxr_keyword">null</strong> ?
<a class="jxr_linenumber" name="L149" href="#L149">149</a>                     0 :
<a class="jxr_linenumber" name="L150" href="#L150">150</a>                     distance.compute(current.getFeatures(),
<a class="jxr_linenumber" name="L151" href="#L151">151</a>                                      bottomRight.getFeatures());
<a class="jxr_linenumber" name="L152" href="#L152">152</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> right2Bottom = (right == <strong class="jxr_keyword">null</strong> ||
<a class="jxr_linenumber" name="L153" href="#L153">153</a>                                              bottom == <strong class="jxr_keyword">null</strong>) ?
<a class="jxr_linenumber" name="L154" href="#L154">154</a>                     0 :
<a class="jxr_linenumber" name="L155" href="#L155">155</a>                     distance.compute(right.getFeatures(),
<a class="jxr_linenumber" name="L156" href="#L156">156</a>                                      bottom.getFeatures());
<a class="jxr_linenumber" name="L157" href="#L157">157</a> 
<a class="jxr_linenumber" name="L158" href="#L158">158</a>                 <em class="jxr_comment">// Bottom-right slot.</em>
<a class="jxr_linenumber" name="L159" href="#L159">159</a>                 uMatrix[iR + 1][jR + 1] = 0.5 * (current2BottomRight + right2Bottom);
<a class="jxr_linenumber" name="L160" href="#L160">160</a>             }
<a class="jxr_linenumber" name="L161" href="#L161">161</a>         }
<a class="jxr_linenumber" name="L162" href="#L162">162</a> 
<a class="jxr_linenumber" name="L163" href="#L163">163</a>         <em class="jxr_comment">// 3. Copy last row into first row.</em>
<a class="jxr_linenumber" name="L164" href="#L164">164</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> lastRow = uMatrix.length - 1;
<a class="jxr_linenumber" name="L165" href="#L165">165</a>         uMatrix[0] = uMatrix[lastRow];
<a class="jxr_linenumber" name="L166" href="#L166">166</a> 
<a class="jxr_linenumber" name="L167" href="#L167">167</a>         <em class="jxr_comment">// 4.</em>
<a class="jxr_linenumber" name="L168" href="#L168">168</a>         <em class="jxr_comment">// Copy last column into first column.</em>
<a class="jxr_linenumber" name="L169" href="#L169">169</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> lastCol = uMatrix[0].length - 1;
<a class="jxr_linenumber" name="L170" href="#L170">170</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> r = 0; r &lt; lastRow; r++) {
<a class="jxr_linenumber" name="L171" href="#L171">171</a>             uMatrix[r][0] = uMatrix[r][lastCol];
<a class="jxr_linenumber" name="L172" href="#L172">172</a>         }
<a class="jxr_linenumber" name="L173" href="#L173">173</a> 
<a class="jxr_linenumber" name="L174" href="#L174">174</a>         <strong class="jxr_keyword">return</strong> uMatrix;
<a class="jxr_linenumber" name="L175" href="#L175">175</a>     }
<a class="jxr_linenumber" name="L176" href="#L176">176</a> 
<a class="jxr_linenumber" name="L177" href="#L177">177</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L178" href="#L178">178</a> <em class="jxr_javadoccomment">     * Computes the distances between a unit of the map and its neighbours.</em>
<a class="jxr_linenumber" name="L179" href="#L179">179</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L180" href="#L180">180</a> <em class="jxr_javadoccomment">     * @param map Map.</em>
<a class="jxr_linenumber" name="L181" href="#L181">181</a> <em class="jxr_javadoccomment">     * @return an image representing the average distances.</em>
<a class="jxr_linenumber" name="L182" href="#L182">182</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L183" href="#L183">183</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">double</strong>[][] averageDistances(<a href="../../../../../../../../org/apache/commons/math3/ml/neuralnet/twod/NeuronSquareMesh2D.html">NeuronSquareMesh2D</a> map) {
<a class="jxr_linenumber" name="L184" href="#L184">184</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> numRows = map.getNumberOfRows();
<a class="jxr_linenumber" name="L185" href="#L185">185</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> numCols = map.getNumberOfColumns();
<a class="jxr_linenumber" name="L186" href="#L186">186</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[][] uMatrix = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[numRows][numCols];
<a class="jxr_linenumber" name="L187" href="#L187">187</a> 
<a class="jxr_linenumber" name="L188" href="#L188">188</a>         <strong class="jxr_keyword">final</strong> <a href="../../../../../../../../org/apache/commons/math3/ml/neuralnet/Network.html">Network</a> net = map.getNetwork();
<a class="jxr_linenumber" name="L189" href="#L189">189</a> 
<a class="jxr_linenumber" name="L190" href="#L190">190</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; numRows; i++) {
<a class="jxr_linenumber" name="L191" href="#L191">191</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = 0; j &lt; numCols; j++) {
<a class="jxr_linenumber" name="L192" href="#L192">192</a>                 <strong class="jxr_keyword">final</strong> <a href="../../../../../../../../org/apache/commons/math3/ml/neuralnet/Neuron.html">Neuron</a> neuron = map.getNeuron(i, j);
<a class="jxr_linenumber" name="L193" href="#L193">193</a>                 <strong class="jxr_keyword">final</strong> Collection&lt;Neuron&gt; neighbours = net.getNeighbours(neuron);
<a class="jxr_linenumber" name="L194" href="#L194">194</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] features = neuron.getFeatures();
<a class="jxr_linenumber" name="L195" href="#L195">195</a> 
<a class="jxr_linenumber" name="L196" href="#L196">196</a>                 <strong class="jxr_keyword">double</strong> d = 0;
<a class="jxr_linenumber" name="L197" href="#L197">197</a>                 <strong class="jxr_keyword">int</strong> count = 0;
<a class="jxr_linenumber" name="L198" href="#L198">198</a>                 <strong class="jxr_keyword">for</strong> (Neuron n : neighbours) {
<a class="jxr_linenumber" name="L199" href="#L199">199</a>                     ++count;
<a class="jxr_linenumber" name="L200" href="#L200">200</a>                     d += distance.compute(features, n.getFeatures());
<a class="jxr_linenumber" name="L201" href="#L201">201</a>                 }
<a class="jxr_linenumber" name="L202" href="#L202">202</a> 
<a class="jxr_linenumber" name="L203" href="#L203">203</a>                 uMatrix[i][j] = d / count;
<a class="jxr_linenumber" name="L204" href="#L204">204</a>             }
<a class="jxr_linenumber" name="L205" href="#L205">205</a>         }
<a class="jxr_linenumber" name="L206" href="#L206">206</a> 
<a class="jxr_linenumber" name="L207" href="#L207">207</a>         <strong class="jxr_keyword">return</strong> uMatrix;
<a class="jxr_linenumber" name="L208" href="#L208">208</a>     }
<a class="jxr_linenumber" name="L209" href="#L209">209</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2003&#x2013;2016 <a href="http://www.apache.org/">The Apache Software Foundation</a>. All rights reserved.</div>
</body>
</html>
