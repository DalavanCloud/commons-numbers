<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>CholeskyDecompositionTest xref</title>
<link type="text/css" rel="stylesheet" href="../../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../testapidocs/org/apache/commons/math3/linear/CholeskyDecompositionTest.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Licensed to the Apache Software Foundation (ASF) under one or more</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> * contributor license agreements.  See the NOTICE file distributed with</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * this work for additional information regarding copyright ownership.</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * The ASF licenses this file to You under the Apache License, Version 2.0</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * (the "License"); you may not use this file except in compliance with</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> * the License.  You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *      <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  <strong class="jxr_keyword">package</strong> org.apache.commons.math3.linear;
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> org.junit.Test;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> org.junit.Assert;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../org/apache/commons/math3/linear/CholeskyDecompositionTest.html">CholeskyDecompositionTest</a> {
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  
<a class="jxr_linenumber" name="L25" href="#L25">25</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">double</strong>[][] testData = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[][] {
<a class="jxr_linenumber" name="L26" href="#L26">26</a>              {  1,  2,   4,   7,  11 },
<a class="jxr_linenumber" name="L27" href="#L27">27</a>              {  2, 13,  23,  38,  58 },
<a class="jxr_linenumber" name="L28" href="#L28">28</a>              {  4, 23,  77, 122, 182 },
<a class="jxr_linenumber" name="L29" href="#L29">29</a>              {  7, 38, 122, 294, 430 },
<a class="jxr_linenumber" name="L30" href="#L30">30</a>              { 11, 58, 182, 430, 855 }
<a class="jxr_linenumber" name="L31" href="#L31">31</a>      };
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  
<a class="jxr_linenumber" name="L33" href="#L33">33</a>      <em class="jxr_javadoccomment">/** test dimensions */</em>
<a class="jxr_linenumber" name="L34" href="#L34">34</a>      @Test
<a class="jxr_linenumber" name="L35" href="#L35">35</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testDimensions() {
<a class="jxr_linenumber" name="L36" href="#L36">36</a>          CholeskyDecomposition llt =
<a class="jxr_linenumber" name="L37" href="#L37">37</a>              <strong class="jxr_keyword">new</strong> CholeskyDecomposition(MatrixUtils.createRealMatrix(testData));
<a class="jxr_linenumber" name="L38" href="#L38">38</a>          Assert.assertEquals(testData.length, llt.getL().getRowDimension());
<a class="jxr_linenumber" name="L39" href="#L39">39</a>          Assert.assertEquals(testData.length, llt.getL().getColumnDimension());
<a class="jxr_linenumber" name="L40" href="#L40">40</a>          Assert.assertEquals(testData.length, llt.getLT().getRowDimension());
<a class="jxr_linenumber" name="L41" href="#L41">41</a>          Assert.assertEquals(testData.length, llt.getLT().getColumnDimension());
<a class="jxr_linenumber" name="L42" href="#L42">42</a>      }
<a class="jxr_linenumber" name="L43" href="#L43">43</a>  
<a class="jxr_linenumber" name="L44" href="#L44">44</a>      <em class="jxr_javadoccomment">/** test non-square matrix */</em>
<a class="jxr_linenumber" name="L45" href="#L45">45</a>      @Test(expected = NonSquareMatrixException.<strong class="jxr_keyword">class</strong>)
<a class="jxr_linenumber" name="L46" href="#L46">46</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testNonSquare() {
<a class="jxr_linenumber" name="L47" href="#L47">47</a>          <strong class="jxr_keyword">new</strong> CholeskyDecomposition(MatrixUtils.createRealMatrix(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[3][2]));
<a class="jxr_linenumber" name="L48" href="#L48">48</a>      }
<a class="jxr_linenumber" name="L49" href="#L49">49</a>  
<a class="jxr_linenumber" name="L50" href="#L50">50</a>      <em class="jxr_javadoccomment">/** test non-symmetric matrix */</em>
<a class="jxr_linenumber" name="L51" href="#L51">51</a>      @Test(expected = NonSymmetricMatrixException.<strong class="jxr_keyword">class</strong>)
<a class="jxr_linenumber" name="L52" href="#L52">52</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testNotSymmetricMatrixException() {
<a class="jxr_linenumber" name="L53" href="#L53">53</a>          <strong class="jxr_keyword">double</strong>[][] changed = testData.clone();
<a class="jxr_linenumber" name="L54" href="#L54">54</a>          changed[0][changed[0].length - 1] += 1.0e-5;
<a class="jxr_linenumber" name="L55" href="#L55">55</a>          <strong class="jxr_keyword">new</strong> CholeskyDecomposition(MatrixUtils.createRealMatrix(changed));
<a class="jxr_linenumber" name="L56" href="#L56">56</a>      }
<a class="jxr_linenumber" name="L57" href="#L57">57</a>  
<a class="jxr_linenumber" name="L58" href="#L58">58</a>      <em class="jxr_javadoccomment">/** test non positive definite matrix */</em>
<a class="jxr_linenumber" name="L59" href="#L59">59</a>      @Test(expected = NonPositiveDefiniteMatrixException.<strong class="jxr_keyword">class</strong>)
<a class="jxr_linenumber" name="L60" href="#L60">60</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testNotPositiveDefinite() {
<a class="jxr_linenumber" name="L61" href="#L61">61</a>          <strong class="jxr_keyword">new</strong> CholeskyDecomposition(MatrixUtils.createRealMatrix(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[][] {
<a class="jxr_linenumber" name="L62" href="#L62">62</a>                  { 14, 11, 13, 15, 24 },
<a class="jxr_linenumber" name="L63" href="#L63">63</a>                  { 11, 34, 13, 8,  25 },
<a class="jxr_linenumber" name="L64" href="#L64">64</a>                  { 13, 13, 14, 15, 21 },
<a class="jxr_linenumber" name="L65" href="#L65">65</a>                  { 15, 8,  15, 18, 23 },
<a class="jxr_linenumber" name="L66" href="#L66">66</a>                  { 24, 25, 21, 23, 45 }
<a class="jxr_linenumber" name="L67" href="#L67">67</a>          }));
<a class="jxr_linenumber" name="L68" href="#L68">68</a>      }
<a class="jxr_linenumber" name="L69" href="#L69">69</a>  
<a class="jxr_linenumber" name="L70" href="#L70">70</a>      @Test(expected = NonPositiveDefiniteMatrixException.<strong class="jxr_keyword">class</strong>)
<a class="jxr_linenumber" name="L71" href="#L71">71</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testMath274() {
<a class="jxr_linenumber" name="L72" href="#L72">72</a>          <strong class="jxr_keyword">new</strong> CholeskyDecomposition(MatrixUtils.createRealMatrix(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[][] {
<a class="jxr_linenumber" name="L73" href="#L73">73</a>                  { 0.40434286, -0.09376327, 0.30328980, 0.04909388 },
<a class="jxr_linenumber" name="L74" href="#L74">74</a>                  {-0.09376327,  0.10400408, 0.07137959, 0.04762857 },
<a class="jxr_linenumber" name="L75" href="#L75">75</a>                  { 0.30328980,  0.07137959, 0.30458776, 0.04882449 },
<a class="jxr_linenumber" name="L76" href="#L76">76</a>                  { 0.04909388,  0.04762857, 0.04882449, 0.07543265 }
<a class="jxr_linenumber" name="L77" href="#L77">77</a>  
<a class="jxr_linenumber" name="L78" href="#L78">78</a>          }));
<a class="jxr_linenumber" name="L79" href="#L79">79</a>      }
<a class="jxr_linenumber" name="L80" href="#L80">80</a>  
<a class="jxr_linenumber" name="L81" href="#L81">81</a>      <em class="jxr_javadoccomment">/** test A = LLT */</em>
<a class="jxr_linenumber" name="L82" href="#L82">82</a>      @Test
<a class="jxr_linenumber" name="L83" href="#L83">83</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testAEqualLLT() {
<a class="jxr_linenumber" name="L84" href="#L84">84</a>          RealMatrix matrix = MatrixUtils.createRealMatrix(testData);
<a class="jxr_linenumber" name="L85" href="#L85">85</a>          CholeskyDecomposition llt = <strong class="jxr_keyword">new</strong> CholeskyDecomposition(matrix);
<a class="jxr_linenumber" name="L86" href="#L86">86</a>          RealMatrix l  = llt.getL();
<a class="jxr_linenumber" name="L87" href="#L87">87</a>          RealMatrix lt = llt.getLT();
<a class="jxr_linenumber" name="L88" href="#L88">88</a>          <strong class="jxr_keyword">double</strong> norm = l.multiply(lt).subtract(matrix).getNorm();
<a class="jxr_linenumber" name="L89" href="#L89">89</a>          Assert.assertEquals(0, norm, 1.0e-15);
<a class="jxr_linenumber" name="L90" href="#L90">90</a>      }
<a class="jxr_linenumber" name="L91" href="#L91">91</a>  
<a class="jxr_linenumber" name="L92" href="#L92">92</a>      <em class="jxr_javadoccomment">/** test that L is lower triangular */</em>
<a class="jxr_linenumber" name="L93" href="#L93">93</a>      @Test
<a class="jxr_linenumber" name="L94" href="#L94">94</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testLLowerTriangular() {
<a class="jxr_linenumber" name="L95" href="#L95">95</a>          RealMatrix matrix = MatrixUtils.createRealMatrix(testData);
<a class="jxr_linenumber" name="L96" href="#L96">96</a>          RealMatrix l = <strong class="jxr_keyword">new</strong> CholeskyDecomposition(matrix).getL();
<a class="jxr_linenumber" name="L97" href="#L97">97</a>          <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; l.getRowDimension(); i++) {
<a class="jxr_linenumber" name="L98" href="#L98">98</a>              <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = i + 1; j &lt; l.getColumnDimension(); j++) {
<a class="jxr_linenumber" name="L99" href="#L99">99</a>                  Assert.assertEquals(0.0, l.getEntry(i, j), 0.0);
<a class="jxr_linenumber" name="L100" href="#L100">100</a>             }
<a class="jxr_linenumber" name="L101" href="#L101">101</a>         }
<a class="jxr_linenumber" name="L102" href="#L102">102</a>     }
<a class="jxr_linenumber" name="L103" href="#L103">103</a> 
<a class="jxr_linenumber" name="L104" href="#L104">104</a>     <em class="jxr_javadoccomment">/** test that LT is transpose of L */</em>
<a class="jxr_linenumber" name="L105" href="#L105">105</a>     @Test
<a class="jxr_linenumber" name="L106" href="#L106">106</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testLTTransposed() {
<a class="jxr_linenumber" name="L107" href="#L107">107</a>         RealMatrix matrix = MatrixUtils.createRealMatrix(testData);
<a class="jxr_linenumber" name="L108" href="#L108">108</a>         CholeskyDecomposition llt = <strong class="jxr_keyword">new</strong> CholeskyDecomposition(matrix);
<a class="jxr_linenumber" name="L109" href="#L109">109</a>         RealMatrix l  = llt.getL();
<a class="jxr_linenumber" name="L110" href="#L110">110</a>         RealMatrix lt = llt.getLT();
<a class="jxr_linenumber" name="L111" href="#L111">111</a>         <strong class="jxr_keyword">double</strong> norm = l.subtract(lt.transpose()).getNorm();
<a class="jxr_linenumber" name="L112" href="#L112">112</a>         Assert.assertEquals(0, norm, 1.0e-15);
<a class="jxr_linenumber" name="L113" href="#L113">113</a>     }
<a class="jxr_linenumber" name="L114" href="#L114">114</a> 
<a class="jxr_linenumber" name="L115" href="#L115">115</a>     <em class="jxr_javadoccomment">/** test matrices values */</em>
<a class="jxr_linenumber" name="L116" href="#L116">116</a>     @Test
<a class="jxr_linenumber" name="L117" href="#L117">117</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testMatricesValues() {
<a class="jxr_linenumber" name="L118" href="#L118">118</a>         RealMatrix lRef = MatrixUtils.createRealMatrix(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[][] {
<a class="jxr_linenumber" name="L119" href="#L119">119</a>                 {  1,  0,  0,  0,  0 },
<a class="jxr_linenumber" name="L120" href="#L120">120</a>                 {  2,  3,  0,  0,  0 },
<a class="jxr_linenumber" name="L121" href="#L121">121</a>                 {  4,  5,  6,  0,  0 },
<a class="jxr_linenumber" name="L122" href="#L122">122</a>                 {  7,  8,  9, 10,  0 },
<a class="jxr_linenumber" name="L123" href="#L123">123</a>                 { 11, 12, 13, 14, 15 }
<a class="jxr_linenumber" name="L124" href="#L124">124</a>         });
<a class="jxr_linenumber" name="L125" href="#L125">125</a>        CholeskyDecomposition llt =
<a class="jxr_linenumber" name="L126" href="#L126">126</a>             <strong class="jxr_keyword">new</strong> CholeskyDecomposition(MatrixUtils.createRealMatrix(testData));
<a class="jxr_linenumber" name="L127" href="#L127">127</a> 
<a class="jxr_linenumber" name="L128" href="#L128">128</a>         <em class="jxr_comment">// check values against known references</em>
<a class="jxr_linenumber" name="L129" href="#L129">129</a>         RealMatrix l = llt.getL();
<a class="jxr_linenumber" name="L130" href="#L130">130</a>         Assert.assertEquals(0, l.subtract(lRef).getNorm(), 1.0e-13);
<a class="jxr_linenumber" name="L131" href="#L131">131</a>         RealMatrix lt = llt.getLT();
<a class="jxr_linenumber" name="L132" href="#L132">132</a>         Assert.assertEquals(0, lt.subtract(lRef.transpose()).getNorm(), 1.0e-13);
<a class="jxr_linenumber" name="L133" href="#L133">133</a> 
<a class="jxr_linenumber" name="L134" href="#L134">134</a>         <em class="jxr_comment">// check the same cached instance is returned the second time</em>
<a class="jxr_linenumber" name="L135" href="#L135">135</a>         Assert.assertTrue(l  == llt.getL());
<a class="jxr_linenumber" name="L136" href="#L136">136</a>         Assert.assertTrue(lt == llt.getLT());
<a class="jxr_linenumber" name="L137" href="#L137">137</a>     }
<a class="jxr_linenumber" name="L138" href="#L138">138</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2003&#x2013;2016 <a href="http://www.apache.org/">The Apache Software Foundation</a>. All rights reserved.</div>
</body>
</html>
