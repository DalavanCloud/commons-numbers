<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>PolygonsSetTest xref</title>
<link type="text/css" rel="stylesheet" href="../../../../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../../testapidocs/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Licensed to the Apache Software Foundation (ASF) under one or more</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> * contributor license agreements.  See the NOTICE file distributed with</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * this work for additional information regarding copyright ownership.</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * The ASF licenses this file to You under the Apache License, Version 2.0</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * (the "License"); you may not use this file except in compliance with</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> * the License.  You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *      <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">package</strong> org.apache.commons.math3.geometry.euclidean.twod;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <strong class="jxr_keyword">import</strong> java.util.ArrayList;
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> java.util.List;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.MathIllegalArgumentException;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.geometry.euclidean.oned.Interval;
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.geometry.partitioning.BSPTree;
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor;
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.geometry.partitioning.BoundaryProjection;
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.geometry.partitioning.Hyperplane;
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.geometry.partitioning.Region;
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.geometry.partitioning.Region.Location;
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.geometry.partitioning.RegionFactory;
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.geometry.partitioning.SubHyperplane;
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.util.FastMath;
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  <strong class="jxr_keyword">import</strong> org.junit.Assert;
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  <strong class="jxr_keyword">import</strong> org.junit.Test;
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  
<a class="jxr_linenumber" name="L38" href="#L38">38</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.html">PolygonsSetTest</a> {
<a class="jxr_linenumber" name="L39" href="#L39">39</a>  
<a class="jxr_linenumber" name="L40" href="#L40">40</a>      @Test
<a class="jxr_linenumber" name="L41" href="#L41">41</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testSimplyConnected() {
<a class="jxr_linenumber" name="L42" href="#L42">42</a>          Vector2D[][] vertices = <strong class="jxr_keyword">new</strong> Vector2D[][] {
<a class="jxr_linenumber" name="L43" href="#L43">43</a>              <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L44" href="#L44">44</a>                  <strong class="jxr_keyword">new</strong> Vector2D(36.0, 22.0),
<a class="jxr_linenumber" name="L45" href="#L45">45</a>                  <strong class="jxr_keyword">new</strong> Vector2D(39.0, 32.0),
<a class="jxr_linenumber" name="L46" href="#L46">46</a>                  <strong class="jxr_keyword">new</strong> Vector2D(19.0, 32.0),
<a class="jxr_linenumber" name="L47" href="#L47">47</a>                  <strong class="jxr_keyword">new</strong> Vector2D( 6.0, 16.0),
<a class="jxr_linenumber" name="L48" href="#L48">48</a>                  <strong class="jxr_keyword">new</strong> Vector2D(31.0, 10.0),
<a class="jxr_linenumber" name="L49" href="#L49">49</a>                  <strong class="jxr_keyword">new</strong> Vector2D(42.0, 16.0),
<a class="jxr_linenumber" name="L50" href="#L50">50</a>                  <strong class="jxr_keyword">new</strong> Vector2D(34.0, 20.0),
<a class="jxr_linenumber" name="L51" href="#L51">51</a>                  <strong class="jxr_keyword">new</strong> Vector2D(29.0, 19.0),
<a class="jxr_linenumber" name="L52" href="#L52">52</a>                  <strong class="jxr_keyword">new</strong> Vector2D(23.0, 22.0),
<a class="jxr_linenumber" name="L53" href="#L53">53</a>                  <strong class="jxr_keyword">new</strong> Vector2D(33.0, 25.0)
<a class="jxr_linenumber" name="L54" href="#L54">54</a>              }
<a class="jxr_linenumber" name="L55" href="#L55">55</a>          };
<a class="jxr_linenumber" name="L56" href="#L56">56</a>          PolygonsSet set = buildSet(vertices);
<a class="jxr_linenumber" name="L57" href="#L57">57</a>          Assert.assertEquals(Region.Location.OUTSIDE, set.checkPoint(<strong class="jxr_keyword">new</strong> Vector2D(50.0, 30.0)));
<a class="jxr_linenumber" name="L58" href="#L58">58</a>          checkPoints(Region.Location.INSIDE, set, <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L59" href="#L59">59</a>              <strong class="jxr_keyword">new</strong> Vector2D(30.0, 15.0),
<a class="jxr_linenumber" name="L60" href="#L60">60</a>              <strong class="jxr_keyword">new</strong> Vector2D(15.0, 20.0),
<a class="jxr_linenumber" name="L61" href="#L61">61</a>              <strong class="jxr_keyword">new</strong> Vector2D(24.0, 25.0),
<a class="jxr_linenumber" name="L62" href="#L62">62</a>              <strong class="jxr_keyword">new</strong> Vector2D(35.0, 30.0),
<a class="jxr_linenumber" name="L63" href="#L63">63</a>              <strong class="jxr_keyword">new</strong> Vector2D(19.0, 17.0)
<a class="jxr_linenumber" name="L64" href="#L64">64</a>          });
<a class="jxr_linenumber" name="L65" href="#L65">65</a>          checkPoints(Region.Location.OUTSIDE, set, <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L66" href="#L66">66</a>              <strong class="jxr_keyword">new</strong> Vector2D(50.0, 30.0),
<a class="jxr_linenumber" name="L67" href="#L67">67</a>              <strong class="jxr_keyword">new</strong> Vector2D(30.0, 35.0),
<a class="jxr_linenumber" name="L68" href="#L68">68</a>              <strong class="jxr_keyword">new</strong> Vector2D(10.0, 25.0),
<a class="jxr_linenumber" name="L69" href="#L69">69</a>              <strong class="jxr_keyword">new</strong> Vector2D(10.0, 10.0),
<a class="jxr_linenumber" name="L70" href="#L70">70</a>              <strong class="jxr_keyword">new</strong> Vector2D(40.0, 10.0),
<a class="jxr_linenumber" name="L71" href="#L71">71</a>              <strong class="jxr_keyword">new</strong> Vector2D(50.0, 15.0),
<a class="jxr_linenumber" name="L72" href="#L72">72</a>              <strong class="jxr_keyword">new</strong> Vector2D(30.0, 22.0)
<a class="jxr_linenumber" name="L73" href="#L73">73</a>          });
<a class="jxr_linenumber" name="L74" href="#L74">74</a>          checkPoints(Region.Location.BOUNDARY, set, <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L75" href="#L75">75</a>              <strong class="jxr_keyword">new</strong> Vector2D(30.0, 32.0),
<a class="jxr_linenumber" name="L76" href="#L76">76</a>              <strong class="jxr_keyword">new</strong> Vector2D(34.0, 20.0)
<a class="jxr_linenumber" name="L77" href="#L77">77</a>          });
<a class="jxr_linenumber" name="L78" href="#L78">78</a>          checkVertices(set.getVertices(), vertices);
<a class="jxr_linenumber" name="L79" href="#L79">79</a>      }
<a class="jxr_linenumber" name="L80" href="#L80">80</a>  
<a class="jxr_linenumber" name="L81" href="#L81">81</a>      @Test
<a class="jxr_linenumber" name="L82" href="#L82">82</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testBox() {
<a class="jxr_linenumber" name="L83" href="#L83">83</a>          PolygonsSet box = <strong class="jxr_keyword">new</strong> PolygonsSet(0, 2, -1, 1, 1.0e-10);
<a class="jxr_linenumber" name="L84" href="#L84">84</a>          Assert.assertEquals(4.0, box.getSize(), 1.0e-10);
<a class="jxr_linenumber" name="L85" href="#L85">85</a>          Assert.assertEquals(8.0, box.getBoundarySize(), 1.0e-10);
<a class="jxr_linenumber" name="L86" href="#L86">86</a>      }
<a class="jxr_linenumber" name="L87" href="#L87">87</a>  
<a class="jxr_linenumber" name="L88" href="#L88">88</a>      @Test
<a class="jxr_linenumber" name="L89" href="#L89">89</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testInfinite() {
<a class="jxr_linenumber" name="L90" href="#L90">90</a>          PolygonsSet box = <strong class="jxr_keyword">new</strong> PolygonsSet(<strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(Boolean.TRUE), 1.0e-10);
<a class="jxr_linenumber" name="L91" href="#L91">91</a>          Assert.assertTrue(Double.isInfinite(box.getSize()));
<a class="jxr_linenumber" name="L92" href="#L92">92</a>      }
<a class="jxr_linenumber" name="L93" href="#L93">93</a>  
<a class="jxr_linenumber" name="L94" href="#L94">94</a>      @Test
<a class="jxr_linenumber" name="L95" href="#L95">95</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testStair() {
<a class="jxr_linenumber" name="L96" href="#L96">96</a>          Vector2D[][] vertices = <strong class="jxr_keyword">new</strong> Vector2D[][] {
<a class="jxr_linenumber" name="L97" href="#L97">97</a>              <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L98" href="#L98">98</a>                  <strong class="jxr_keyword">new</strong> Vector2D( 0.0, 0.0),
<a class="jxr_linenumber" name="L99" href="#L99">99</a>                  <strong class="jxr_keyword">new</strong> Vector2D( 0.0, 2.0),
<a class="jxr_linenumber" name="L100" href="#L100">100</a>                 <strong class="jxr_keyword">new</strong> Vector2D(-0.1, 2.0),
<a class="jxr_linenumber" name="L101" href="#L101">101</a>                 <strong class="jxr_keyword">new</strong> Vector2D(-0.1, 1.0),
<a class="jxr_linenumber" name="L102" href="#L102">102</a>                 <strong class="jxr_keyword">new</strong> Vector2D(-0.3, 1.0),
<a class="jxr_linenumber" name="L103" href="#L103">103</a>                 <strong class="jxr_keyword">new</strong> Vector2D(-0.3, 1.5),
<a class="jxr_linenumber" name="L104" href="#L104">104</a>                 <strong class="jxr_keyword">new</strong> Vector2D(-1.3, 1.5),
<a class="jxr_linenumber" name="L105" href="#L105">105</a>                 <strong class="jxr_keyword">new</strong> Vector2D(-1.3, 2.0),
<a class="jxr_linenumber" name="L106" href="#L106">106</a>                 <strong class="jxr_keyword">new</strong> Vector2D(-1.8, 2.0),
<a class="jxr_linenumber" name="L107" href="#L107">107</a>                 <strong class="jxr_keyword">new</strong> Vector2D(-1.8 - 1.0 / FastMath.sqrt(2.0),
<a class="jxr_linenumber" name="L108" href="#L108">108</a>                             2.0 - 1.0 / FastMath.sqrt(2.0))
<a class="jxr_linenumber" name="L109" href="#L109">109</a>             }
<a class="jxr_linenumber" name="L110" href="#L110">110</a>         };
<a class="jxr_linenumber" name="L111" href="#L111">111</a> 
<a class="jxr_linenumber" name="L112" href="#L112">112</a>         PolygonsSet set = buildSet(vertices);
<a class="jxr_linenumber" name="L113" href="#L113">113</a>         checkVertices(set.getVertices(), vertices);
<a class="jxr_linenumber" name="L114" href="#L114">114</a> 
<a class="jxr_linenumber" name="L115" href="#L115">115</a>         Assert.assertEquals(1.1 + 0.95 * FastMath.sqrt(2.0), set.getSize(), 1.0e-10);
<a class="jxr_linenumber" name="L116" href="#L116">116</a> 
<a class="jxr_linenumber" name="L117" href="#L117">117</a>     }
<a class="jxr_linenumber" name="L118" href="#L118">118</a> 
<a class="jxr_linenumber" name="L119" href="#L119">119</a>     @Test
<a class="jxr_linenumber" name="L120" href="#L120">120</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testEmpty() {
<a class="jxr_linenumber" name="L121" href="#L121">121</a>         PolygonsSet empty = (PolygonsSet) <strong class="jxr_keyword">new</strong> RegionFactory&lt;Euclidean2D&gt;().getComplement(<strong class="jxr_keyword">new</strong> PolygonsSet(1.0e-10));
<a class="jxr_linenumber" name="L122" href="#L122">122</a>         Assert.assertTrue(empty.isEmpty());
<a class="jxr_linenumber" name="L123" href="#L123">123</a>         Assert.assertEquals(0, empty.getVertices().length);
<a class="jxr_linenumber" name="L124" href="#L124">124</a>         Assert.assertEquals(0.0, empty.getBoundarySize(), 1.0e-10);
<a class="jxr_linenumber" name="L125" href="#L125">125</a>         Assert.assertEquals(0.0, empty.getSize(), 1.0e-10);
<a class="jxr_linenumber" name="L126" href="#L126">126</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">double</strong> y = -1; y &lt; 1; y += 0.1) {
<a class="jxr_linenumber" name="L127" href="#L127">127</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">double</strong> x = -1; x &lt; 1; x += 0.1) {
<a class="jxr_linenumber" name="L128" href="#L128">128</a>                 Assert.assertEquals(Double.POSITIVE_INFINITY,
<a class="jxr_linenumber" name="L129" href="#L129">129</a>                                     empty.projectToBoundary(<strong class="jxr_keyword">new</strong> Vector2D(x, y)).getOffset(),
<a class="jxr_linenumber" name="L130" href="#L130">130</a>                                     1.0e-10);
<a class="jxr_linenumber" name="L131" href="#L131">131</a>             }
<a class="jxr_linenumber" name="L132" href="#L132">132</a>         }
<a class="jxr_linenumber" name="L133" href="#L133">133</a>     }
<a class="jxr_linenumber" name="L134" href="#L134">134</a> 
<a class="jxr_linenumber" name="L135" href="#L135">135</a>     @Test
<a class="jxr_linenumber" name="L136" href="#L136">136</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testFull() {
<a class="jxr_linenumber" name="L137" href="#L137">137</a>         PolygonsSet empty = <strong class="jxr_keyword">new</strong> PolygonsSet(1.0e-10);
<a class="jxr_linenumber" name="L138" href="#L138">138</a>         Assert.assertFalse(empty.isEmpty());
<a class="jxr_linenumber" name="L139" href="#L139">139</a>         Assert.assertEquals(0, empty.getVertices().length);
<a class="jxr_linenumber" name="L140" href="#L140">140</a>         Assert.assertEquals(0.0, empty.getBoundarySize(), 1.0e-10);
<a class="jxr_linenumber" name="L141" href="#L141">141</a>         Assert.assertEquals(Double.POSITIVE_INFINITY, empty.getSize(), 1.0e-10);
<a class="jxr_linenumber" name="L142" href="#L142">142</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">double</strong> y = -1; y &lt; 1; y += 0.1) {
<a class="jxr_linenumber" name="L143" href="#L143">143</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">double</strong> x = -1; x &lt; 1; x += 0.1) {
<a class="jxr_linenumber" name="L144" href="#L144">144</a>                 Assert.assertEquals(Double.NEGATIVE_INFINITY,
<a class="jxr_linenumber" name="L145" href="#L145">145</a>                                     empty.projectToBoundary(<strong class="jxr_keyword">new</strong> Vector2D(x, y)).getOffset(),
<a class="jxr_linenumber" name="L146" href="#L146">146</a>                                     1.0e-10);
<a class="jxr_linenumber" name="L147" href="#L147">147</a>             }
<a class="jxr_linenumber" name="L148" href="#L148">148</a>         }
<a class="jxr_linenumber" name="L149" href="#L149">149</a>     }
<a class="jxr_linenumber" name="L150" href="#L150">150</a> 
<a class="jxr_linenumber" name="L151" href="#L151">151</a>     @Test
<a class="jxr_linenumber" name="L152" href="#L152">152</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testHole() {
<a class="jxr_linenumber" name="L153" href="#L153">153</a>         Vector2D[][] vertices = <strong class="jxr_keyword">new</strong> Vector2D[][] {
<a class="jxr_linenumber" name="L154" href="#L154">154</a>             <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L155" href="#L155">155</a>                 <strong class="jxr_keyword">new</strong> Vector2D(0.0, 0.0),
<a class="jxr_linenumber" name="L156" href="#L156">156</a>                 <strong class="jxr_keyword">new</strong> Vector2D(3.0, 0.0),
<a class="jxr_linenumber" name="L157" href="#L157">157</a>                 <strong class="jxr_keyword">new</strong> Vector2D(3.0, 3.0),
<a class="jxr_linenumber" name="L158" href="#L158">158</a>                 <strong class="jxr_keyword">new</strong> Vector2D(0.0, 3.0)
<a class="jxr_linenumber" name="L159" href="#L159">159</a>             }, <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L160" href="#L160">160</a>                 <strong class="jxr_keyword">new</strong> Vector2D(1.0, 2.0),
<a class="jxr_linenumber" name="L161" href="#L161">161</a>                 <strong class="jxr_keyword">new</strong> Vector2D(2.0, 2.0),
<a class="jxr_linenumber" name="L162" href="#L162">162</a>                 <strong class="jxr_keyword">new</strong> Vector2D(2.0, 1.0),
<a class="jxr_linenumber" name="L163" href="#L163">163</a>                 <strong class="jxr_keyword">new</strong> Vector2D(1.0, 1.0)
<a class="jxr_linenumber" name="L164" href="#L164">164</a>             }
<a class="jxr_linenumber" name="L165" href="#L165">165</a>         };
<a class="jxr_linenumber" name="L166" href="#L166">166</a>         PolygonsSet set = buildSet(vertices);
<a class="jxr_linenumber" name="L167" href="#L167">167</a>         checkPoints(Region.Location.INSIDE, set, <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L168" href="#L168">168</a>             <strong class="jxr_keyword">new</strong> Vector2D(0.5, 0.5),
<a class="jxr_linenumber" name="L169" href="#L169">169</a>             <strong class="jxr_keyword">new</strong> Vector2D(1.5, 0.5),
<a class="jxr_linenumber" name="L170" href="#L170">170</a>             <strong class="jxr_keyword">new</strong> Vector2D(2.5, 0.5),
<a class="jxr_linenumber" name="L171" href="#L171">171</a>             <strong class="jxr_keyword">new</strong> Vector2D(0.5, 1.5),
<a class="jxr_linenumber" name="L172" href="#L172">172</a>             <strong class="jxr_keyword">new</strong> Vector2D(2.5, 1.5),
<a class="jxr_linenumber" name="L173" href="#L173">173</a>             <strong class="jxr_keyword">new</strong> Vector2D(0.5, 2.5),
<a class="jxr_linenumber" name="L174" href="#L174">174</a>             <strong class="jxr_keyword">new</strong> Vector2D(1.5, 2.5),
<a class="jxr_linenumber" name="L175" href="#L175">175</a>             <strong class="jxr_keyword">new</strong> Vector2D(2.5, 2.5),
<a class="jxr_linenumber" name="L176" href="#L176">176</a>             <strong class="jxr_keyword">new</strong> Vector2D(0.5, 1.0)
<a class="jxr_linenumber" name="L177" href="#L177">177</a>         });
<a class="jxr_linenumber" name="L178" href="#L178">178</a>         checkPoints(Region.Location.OUTSIDE, set, <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L179" href="#L179">179</a>             <strong class="jxr_keyword">new</strong> Vector2D(1.5, 1.5),
<a class="jxr_linenumber" name="L180" href="#L180">180</a>             <strong class="jxr_keyword">new</strong> Vector2D(3.5, 1.0),
<a class="jxr_linenumber" name="L181" href="#L181">181</a>             <strong class="jxr_keyword">new</strong> Vector2D(4.0, 1.5),
<a class="jxr_linenumber" name="L182" href="#L182">182</a>             <strong class="jxr_keyword">new</strong> Vector2D(6.0, 6.0)
<a class="jxr_linenumber" name="L183" href="#L183">183</a>         });
<a class="jxr_linenumber" name="L184" href="#L184">184</a>         checkPoints(Region.Location.BOUNDARY, set, <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L185" href="#L185">185</a>             <strong class="jxr_keyword">new</strong> Vector2D(1.0, 1.0),
<a class="jxr_linenumber" name="L186" href="#L186">186</a>             <strong class="jxr_keyword">new</strong> Vector2D(1.5, 0.0),
<a class="jxr_linenumber" name="L187" href="#L187">187</a>             <strong class="jxr_keyword">new</strong> Vector2D(1.5, 1.0),
<a class="jxr_linenumber" name="L188" href="#L188">188</a>             <strong class="jxr_keyword">new</strong> Vector2D(1.5, 2.0),
<a class="jxr_linenumber" name="L189" href="#L189">189</a>             <strong class="jxr_keyword">new</strong> Vector2D(1.5, 3.0),
<a class="jxr_linenumber" name="L190" href="#L190">190</a>             <strong class="jxr_keyword">new</strong> Vector2D(3.0, 3.0)
<a class="jxr_linenumber" name="L191" href="#L191">191</a>         });
<a class="jxr_linenumber" name="L192" href="#L192">192</a>         checkVertices(set.getVertices(), vertices);
<a class="jxr_linenumber" name="L193" href="#L193">193</a> 
<a class="jxr_linenumber" name="L194" href="#L194">194</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">double</strong> x = -0.999; x &lt; 3.999; x += 0.11) {
<a class="jxr_linenumber" name="L195" href="#L195">195</a>             Vector2D v = <strong class="jxr_keyword">new</strong> Vector2D(x, x + 0.5);
<a class="jxr_linenumber" name="L196" href="#L196">196</a>             BoundaryProjection&lt;Euclidean2D&gt; projection = set.projectToBoundary(v);
<a class="jxr_linenumber" name="L197" href="#L197">197</a>             Assert.assertTrue(projection.getOriginal() == v);
<a class="jxr_linenumber" name="L198" href="#L198">198</a>             Vector2D p = (Vector2D) projection.getProjected();
<a class="jxr_linenumber" name="L199" href="#L199">199</a>             <strong class="jxr_keyword">if</strong> (x &lt; -0.5) {
<a class="jxr_linenumber" name="L200" href="#L200">200</a>                 Assert.assertEquals(0.0,      p.getX(), 1.0e-10);
<a class="jxr_linenumber" name="L201" href="#L201">201</a>                 Assert.assertEquals(0.0,      p.getY(), 1.0e-10);
<a class="jxr_linenumber" name="L202" href="#L202">202</a>                 Assert.assertEquals(+v.distance(Vector2D.ZERO), projection.getOffset(), 1.0e-10);
<a class="jxr_linenumber" name="L203" href="#L203">203</a>             } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (x &lt; 0.5) {
<a class="jxr_linenumber" name="L204" href="#L204">204</a>                 Assert.assertEquals(0.0,      p.getX(), 1.0e-10);
<a class="jxr_linenumber" name="L205" href="#L205">205</a>                 Assert.assertEquals(v.getY(), p.getY(), 1.0e-10);
<a class="jxr_linenumber" name="L206" href="#L206">206</a>                 Assert.assertEquals(-v.getX(), projection.getOffset(), 1.0e-10);
<a class="jxr_linenumber" name="L207" href="#L207">207</a>             } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (x &lt; 1.25) {
<a class="jxr_linenumber" name="L208" href="#L208">208</a>                 Assert.assertEquals(1.0,      p.getX(), 1.0e-10);
<a class="jxr_linenumber" name="L209" href="#L209">209</a>                 Assert.assertEquals(v.getY(), p.getY(), 1.0e-10);
<a class="jxr_linenumber" name="L210" href="#L210">210</a>                 Assert.assertEquals(v.getX() - 1.0, projection.getOffset(), 1.0e-10);
<a class="jxr_linenumber" name="L211" href="#L211">211</a>             } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (x &lt; 2.0) {
<a class="jxr_linenumber" name="L212" href="#L212">212</a>                 Assert.assertEquals(v.getX(), p.getX(), 1.0e-10);
<a class="jxr_linenumber" name="L213" href="#L213">213</a>                 Assert.assertEquals(2.0,      p.getY(), 1.0e-10);
<a class="jxr_linenumber" name="L214" href="#L214">214</a>                 Assert.assertEquals(2.0 - v.getY(), projection.getOffset(), 1.0e-10);
<a class="jxr_linenumber" name="L215" href="#L215">215</a>             } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (x &lt; 3.0) {
<a class="jxr_linenumber" name="L216" href="#L216">216</a>                 Assert.assertEquals(v.getX(), p.getX(), 1.0e-10);
<a class="jxr_linenumber" name="L217" href="#L217">217</a>                 Assert.assertEquals(3.0,      p.getY(), 1.0e-10);
<a class="jxr_linenumber" name="L218" href="#L218">218</a>                 Assert.assertEquals(v.getY() - 3.0, projection.getOffset(), 1.0e-10);
<a class="jxr_linenumber" name="L219" href="#L219">219</a>             } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L220" href="#L220">220</a>                 Assert.assertEquals(3.0,      p.getX(), 1.0e-10);
<a class="jxr_linenumber" name="L221" href="#L221">221</a>                 Assert.assertEquals(3.0,      p.getY(), 1.0e-10);
<a class="jxr_linenumber" name="L222" href="#L222">222</a>                 Assert.assertEquals(+v.distance(<strong class="jxr_keyword">new</strong> Vector2D(3, 3)), projection.getOffset(), 1.0e-10);
<a class="jxr_linenumber" name="L223" href="#L223">223</a>             }
<a class="jxr_linenumber" name="L224" href="#L224">224</a> 
<a class="jxr_linenumber" name="L225" href="#L225">225</a>         }
<a class="jxr_linenumber" name="L226" href="#L226">226</a> 
<a class="jxr_linenumber" name="L227" href="#L227">227</a>     }
<a class="jxr_linenumber" name="L228" href="#L228">228</a> 
<a class="jxr_linenumber" name="L229" href="#L229">229</a>     @Test
<a class="jxr_linenumber" name="L230" href="#L230">230</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testDisjointPolygons() {
<a class="jxr_linenumber" name="L231" href="#L231">231</a>         Vector2D[][] vertices = <strong class="jxr_keyword">new</strong> Vector2D[][] {
<a class="jxr_linenumber" name="L232" href="#L232">232</a>             <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L233" href="#L233">233</a>                 <strong class="jxr_keyword">new</strong> Vector2D(0.0, 1.0),
<a class="jxr_linenumber" name="L234" href="#L234">234</a>                 <strong class="jxr_keyword">new</strong> Vector2D(2.0, 1.0),
<a class="jxr_linenumber" name="L235" href="#L235">235</a>                 <strong class="jxr_keyword">new</strong> Vector2D(1.0, 2.0)
<a class="jxr_linenumber" name="L236" href="#L236">236</a>             }, <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L237" href="#L237">237</a>                 <strong class="jxr_keyword">new</strong> Vector2D(4.0, 0.0),
<a class="jxr_linenumber" name="L238" href="#L238">238</a>                 <strong class="jxr_keyword">new</strong> Vector2D(5.0, 1.0),
<a class="jxr_linenumber" name="L239" href="#L239">239</a>                 <strong class="jxr_keyword">new</strong> Vector2D(3.0, 1.0)
<a class="jxr_linenumber" name="L240" href="#L240">240</a>             }
<a class="jxr_linenumber" name="L241" href="#L241">241</a>         };
<a class="jxr_linenumber" name="L242" href="#L242">242</a>         PolygonsSet set = buildSet(vertices);
<a class="jxr_linenumber" name="L243" href="#L243">243</a>         Assert.assertEquals(Region.Location.INSIDE, set.checkPoint(<strong class="jxr_keyword">new</strong> Vector2D(1.0, 1.5)));
<a class="jxr_linenumber" name="L244" href="#L244">244</a>         checkPoints(Region.Location.INSIDE, set, <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L245" href="#L245">245</a>             <strong class="jxr_keyword">new</strong> Vector2D(1.0, 1.5),
<a class="jxr_linenumber" name="L246" href="#L246">246</a>             <strong class="jxr_keyword">new</strong> Vector2D(4.5, 0.8)
<a class="jxr_linenumber" name="L247" href="#L247">247</a>         });
<a class="jxr_linenumber" name="L248" href="#L248">248</a>         checkPoints(Region.Location.OUTSIDE, set, <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L249" href="#L249">249</a>             <strong class="jxr_keyword">new</strong> Vector2D(1.0, 0.0),
<a class="jxr_linenumber" name="L250" href="#L250">250</a>             <strong class="jxr_keyword">new</strong> Vector2D(3.5, 1.2),
<a class="jxr_linenumber" name="L251" href="#L251">251</a>             <strong class="jxr_keyword">new</strong> Vector2D(2.5, 1.0),
<a class="jxr_linenumber" name="L252" href="#L252">252</a>             <strong class="jxr_keyword">new</strong> Vector2D(3.0, 4.0)
<a class="jxr_linenumber" name="L253" href="#L253">253</a>         });
<a class="jxr_linenumber" name="L254" href="#L254">254</a>         checkPoints(Region.Location.BOUNDARY, set, <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L255" href="#L255">255</a>             <strong class="jxr_keyword">new</strong> Vector2D(1.0, 1.0),
<a class="jxr_linenumber" name="L256" href="#L256">256</a>             <strong class="jxr_keyword">new</strong> Vector2D(3.5, 0.5),
<a class="jxr_linenumber" name="L257" href="#L257">257</a>             <strong class="jxr_keyword">new</strong> Vector2D(0.0, 1.0)
<a class="jxr_linenumber" name="L258" href="#L258">258</a>         });
<a class="jxr_linenumber" name="L259" href="#L259">259</a>         checkVertices(set.getVertices(), vertices);
<a class="jxr_linenumber" name="L260" href="#L260">260</a>     }
<a class="jxr_linenumber" name="L261" href="#L261">261</a> 
<a class="jxr_linenumber" name="L262" href="#L262">262</a>     @Test
<a class="jxr_linenumber" name="L263" href="#L263">263</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testOppositeHyperplanes() {
<a class="jxr_linenumber" name="L264" href="#L264">264</a>         Vector2D[][] vertices = <strong class="jxr_keyword">new</strong> Vector2D[][] {
<a class="jxr_linenumber" name="L265" href="#L265">265</a>             <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L266" href="#L266">266</a>                 <strong class="jxr_keyword">new</strong> Vector2D(1.0, 0.0),
<a class="jxr_linenumber" name="L267" href="#L267">267</a>                 <strong class="jxr_keyword">new</strong> Vector2D(2.0, 1.0),
<a class="jxr_linenumber" name="L268" href="#L268">268</a>                 <strong class="jxr_keyword">new</strong> Vector2D(3.0, 1.0),
<a class="jxr_linenumber" name="L269" href="#L269">269</a>                 <strong class="jxr_keyword">new</strong> Vector2D(2.0, 2.0),
<a class="jxr_linenumber" name="L270" href="#L270">270</a>                 <strong class="jxr_keyword">new</strong> Vector2D(1.0, 1.0),
<a class="jxr_linenumber" name="L271" href="#L271">271</a>                 <strong class="jxr_keyword">new</strong> Vector2D(0.0, 1.0)
<a class="jxr_linenumber" name="L272" href="#L272">272</a>             }
<a class="jxr_linenumber" name="L273" href="#L273">273</a>         };
<a class="jxr_linenumber" name="L274" href="#L274">274</a>         PolygonsSet set = buildSet(vertices);
<a class="jxr_linenumber" name="L275" href="#L275">275</a>         checkVertices(set.getVertices(), vertices);
<a class="jxr_linenumber" name="L276" href="#L276">276</a>     }
<a class="jxr_linenumber" name="L277" href="#L277">277</a> 
<a class="jxr_linenumber" name="L278" href="#L278">278</a>     @Test
<a class="jxr_linenumber" name="L279" href="#L279">279</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testSingularPoint() {
<a class="jxr_linenumber" name="L280" href="#L280">280</a>         Vector2D[][] vertices = <strong class="jxr_keyword">new</strong> Vector2D[][] {
<a class="jxr_linenumber" name="L281" href="#L281">281</a>             <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L282" href="#L282">282</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 0.0,  0.0),
<a class="jxr_linenumber" name="L283" href="#L283">283</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 1.0,  0.0),
<a class="jxr_linenumber" name="L284" href="#L284">284</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 1.0,  1.0),
<a class="jxr_linenumber" name="L285" href="#L285">285</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 0.0,  1.0),
<a class="jxr_linenumber" name="L286" href="#L286">286</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 0.0,  0.0),
<a class="jxr_linenumber" name="L287" href="#L287">287</a>                 <strong class="jxr_keyword">new</strong> Vector2D(-1.0,  0.0),
<a class="jxr_linenumber" name="L288" href="#L288">288</a>                 <strong class="jxr_keyword">new</strong> Vector2D(-1.0, -1.0),
<a class="jxr_linenumber" name="L289" href="#L289">289</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 0.0, -1.0)
<a class="jxr_linenumber" name="L290" href="#L290">290</a>             }
<a class="jxr_linenumber" name="L291" href="#L291">291</a>         };
<a class="jxr_linenumber" name="L292" href="#L292">292</a>         PolygonsSet set = buildSet(vertices);
<a class="jxr_linenumber" name="L293" href="#L293">293</a>         checkVertices(set.getVertices(), vertices);
<a class="jxr_linenumber" name="L294" href="#L294">294</a>     }
<a class="jxr_linenumber" name="L295" href="#L295">295</a> 
<a class="jxr_linenumber" name="L296" href="#L296">296</a>     @Test
<a class="jxr_linenumber" name="L297" href="#L297">297</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testLineIntersection() {
<a class="jxr_linenumber" name="L298" href="#L298">298</a>         Vector2D[][] vertices = <strong class="jxr_keyword">new</strong> Vector2D[][] {
<a class="jxr_linenumber" name="L299" href="#L299">299</a>             <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L300" href="#L300">300</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 0.0,  0.0),
<a class="jxr_linenumber" name="L301" href="#L301">301</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 2.0,  0.0),
<a class="jxr_linenumber" name="L302" href="#L302">302</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 2.0,  1.0),
<a class="jxr_linenumber" name="L303" href="#L303">303</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 3.0,  1.0),
<a class="jxr_linenumber" name="L304" href="#L304">304</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 3.0,  3.0),
<a class="jxr_linenumber" name="L305" href="#L305">305</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 1.0,  3.0),
<a class="jxr_linenumber" name="L306" href="#L306">306</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 1.0,  2.0),
<a class="jxr_linenumber" name="L307" href="#L307">307</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 0.0,  2.0)
<a class="jxr_linenumber" name="L308" href="#L308">308</a>             }
<a class="jxr_linenumber" name="L309" href="#L309">309</a>         };
<a class="jxr_linenumber" name="L310" href="#L310">310</a>         PolygonsSet set = buildSet(vertices);
<a class="jxr_linenumber" name="L311" href="#L311">311</a> 
<a class="jxr_linenumber" name="L312" href="#L312">312</a>         Line l1 = <strong class="jxr_keyword">new</strong> Line(<strong class="jxr_keyword">new</strong> Vector2D(-1.5, 0.0), FastMath.PI / 4, 1.0e-10);
<a class="jxr_linenumber" name="L313" href="#L313">313</a>         SubLine s1 = (SubLine) set.intersection(l1.wholeHyperplane());
<a class="jxr_linenumber" name="L314" href="#L314">314</a>         List&lt;Interval&gt; i1 = ((IntervalsSet) s1.getRemainingRegion()).asList();
<a class="jxr_linenumber" name="L315" href="#L315">315</a>         Assert.assertEquals(2, i1.size());
<a class="jxr_linenumber" name="L316" href="#L316">316</a>         Interval v10 = i1.get(0);
<a class="jxr_linenumber" name="L317" href="#L317">317</a>         Vector2D p10Lower = l1.toSpace(<strong class="jxr_keyword">new</strong> Vector1D(v10.getInf()));
<a class="jxr_linenumber" name="L318" href="#L318">318</a>         Assert.assertEquals(0.0, p10Lower.getX(), 1.0e-10);
<a class="jxr_linenumber" name="L319" href="#L319">319</a>         Assert.assertEquals(1.5, p10Lower.getY(), 1.0e-10);
<a class="jxr_linenumber" name="L320" href="#L320">320</a>         Vector2D p10Upper = l1.toSpace(<strong class="jxr_keyword">new</strong> Vector1D(v10.getSup()));
<a class="jxr_linenumber" name="L321" href="#L321">321</a>         Assert.assertEquals(0.5, p10Upper.getX(), 1.0e-10);
<a class="jxr_linenumber" name="L322" href="#L322">322</a>         Assert.assertEquals(2.0, p10Upper.getY(), 1.0e-10);
<a class="jxr_linenumber" name="L323" href="#L323">323</a>         Interval v11 = i1.get(1);
<a class="jxr_linenumber" name="L324" href="#L324">324</a>         Vector2D p11Lower = l1.toSpace(<strong class="jxr_keyword">new</strong> Vector1D(v11.getInf()));
<a class="jxr_linenumber" name="L325" href="#L325">325</a>         Assert.assertEquals(1.0, p11Lower.getX(), 1.0e-10);
<a class="jxr_linenumber" name="L326" href="#L326">326</a>         Assert.assertEquals(2.5, p11Lower.getY(), 1.0e-10);
<a class="jxr_linenumber" name="L327" href="#L327">327</a>         Vector2D p11Upper = l1.toSpace(<strong class="jxr_keyword">new</strong> Vector1D(v11.getSup()));
<a class="jxr_linenumber" name="L328" href="#L328">328</a>         Assert.assertEquals(1.5, p11Upper.getX(), 1.0e-10);
<a class="jxr_linenumber" name="L329" href="#L329">329</a>         Assert.assertEquals(3.0, p11Upper.getY(), 1.0e-10);
<a class="jxr_linenumber" name="L330" href="#L330">330</a> 
<a class="jxr_linenumber" name="L331" href="#L331">331</a>         Line l2 = <strong class="jxr_keyword">new</strong> Line(<strong class="jxr_keyword">new</strong> Vector2D(-1.0, 2.0), 0, 1.0e-10);
<a class="jxr_linenumber" name="L332" href="#L332">332</a>         SubLine s2 = (SubLine) set.intersection(l2.wholeHyperplane());
<a class="jxr_linenumber" name="L333" href="#L333">333</a>         List&lt;Interval&gt; i2 = ((IntervalsSet) s2.getRemainingRegion()).asList();
<a class="jxr_linenumber" name="L334" href="#L334">334</a>         Assert.assertEquals(1, i2.size());
<a class="jxr_linenumber" name="L335" href="#L335">335</a>         Interval v20 = i2.get(0);
<a class="jxr_linenumber" name="L336" href="#L336">336</a>         Vector2D p20Lower = l2.toSpace(<strong class="jxr_keyword">new</strong> Vector1D(v20.getInf()));
<a class="jxr_linenumber" name="L337" href="#L337">337</a>         Assert.assertEquals(1.0, p20Lower.getX(), 1.0e-10);
<a class="jxr_linenumber" name="L338" href="#L338">338</a>         Assert.assertEquals(2.0, p20Lower.getY(), 1.0e-10);
<a class="jxr_linenumber" name="L339" href="#L339">339</a>         Vector2D p20Upper = l2.toSpace(<strong class="jxr_keyword">new</strong> Vector1D(v20.getSup()));
<a class="jxr_linenumber" name="L340" href="#L340">340</a>         Assert.assertEquals(3.0, p20Upper.getX(), 1.0e-10);
<a class="jxr_linenumber" name="L341" href="#L341">341</a>         Assert.assertEquals(2.0, p20Upper.getY(), 1.0e-10);
<a class="jxr_linenumber" name="L342" href="#L342">342</a> 
<a class="jxr_linenumber" name="L343" href="#L343">343</a>     }
<a class="jxr_linenumber" name="L344" href="#L344">344</a> 
<a class="jxr_linenumber" name="L345" href="#L345">345</a>     @Test
<a class="jxr_linenumber" name="L346" href="#L346">346</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testUnlimitedSubHyperplane() {
<a class="jxr_linenumber" name="L347" href="#L347">347</a>         Vector2D[][] vertices1 = <strong class="jxr_keyword">new</strong> Vector2D[][] {
<a class="jxr_linenumber" name="L348" href="#L348">348</a>             <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L349" href="#L349">349</a>                 <strong class="jxr_keyword">new</strong> Vector2D(0.0, 0.0),
<a class="jxr_linenumber" name="L350" href="#L350">350</a>                 <strong class="jxr_keyword">new</strong> Vector2D(4.0, 0.0),
<a class="jxr_linenumber" name="L351" href="#L351">351</a>                 <strong class="jxr_keyword">new</strong> Vector2D(1.4, 1.5),
<a class="jxr_linenumber" name="L352" href="#L352">352</a>                 <strong class="jxr_keyword">new</strong> Vector2D(0.0, 3.5)
<a class="jxr_linenumber" name="L353" href="#L353">353</a>             }
<a class="jxr_linenumber" name="L354" href="#L354">354</a>         };
<a class="jxr_linenumber" name="L355" href="#L355">355</a>         PolygonsSet set1 = buildSet(vertices1);
<a class="jxr_linenumber" name="L356" href="#L356">356</a>         Vector2D[][] vertices2 = <strong class="jxr_keyword">new</strong> Vector2D[][] {
<a class="jxr_linenumber" name="L357" href="#L357">357</a>             <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L358" href="#L358">358</a>                 <strong class="jxr_keyword">new</strong> Vector2D(1.4,  0.2),
<a class="jxr_linenumber" name="L359" href="#L359">359</a>                 <strong class="jxr_keyword">new</strong> Vector2D(2.8, -1.2),
<a class="jxr_linenumber" name="L360" href="#L360">360</a>                 <strong class="jxr_keyword">new</strong> Vector2D(2.5,  0.6)
<a class="jxr_linenumber" name="L361" href="#L361">361</a>             }
<a class="jxr_linenumber" name="L362" href="#L362">362</a>         };
<a class="jxr_linenumber" name="L363" href="#L363">363</a>         PolygonsSet set2 = buildSet(vertices2);
<a class="jxr_linenumber" name="L364" href="#L364">364</a> 
<a class="jxr_linenumber" name="L365" href="#L365">365</a>         PolygonsSet set =
<a class="jxr_linenumber" name="L366" href="#L366">366</a>             (PolygonsSet) <strong class="jxr_keyword">new</strong> RegionFactory&lt;Euclidean2D&gt;().union(set1.copySelf(),
<a class="jxr_linenumber" name="L367" href="#L367">367</a>                                                                  set2.copySelf());
<a class="jxr_linenumber" name="L368" href="#L368">368</a>         checkVertices(set1.getVertices(), vertices1);
<a class="jxr_linenumber" name="L369" href="#L369">369</a>         checkVertices(set2.getVertices(), vertices2);
<a class="jxr_linenumber" name="L370" href="#L370">370</a>         checkVertices(set.getVertices(), <strong class="jxr_keyword">new</strong> Vector2D[][] {
<a class="jxr_linenumber" name="L371" href="#L371">371</a>             <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L372" href="#L372">372</a>                 <strong class="jxr_keyword">new</strong> Vector2D(0.0,  0.0),
<a class="jxr_linenumber" name="L373" href="#L373">373</a>                 <strong class="jxr_keyword">new</strong> Vector2D(1.6,  0.0),
<a class="jxr_linenumber" name="L374" href="#L374">374</a>                 <strong class="jxr_keyword">new</strong> Vector2D(2.8, -1.2),
<a class="jxr_linenumber" name="L375" href="#L375">375</a>                 <strong class="jxr_keyword">new</strong> Vector2D(2.6,  0.0),
<a class="jxr_linenumber" name="L376" href="#L376">376</a>                 <strong class="jxr_keyword">new</strong> Vector2D(4.0,  0.0),
<a class="jxr_linenumber" name="L377" href="#L377">377</a>                 <strong class="jxr_keyword">new</strong> Vector2D(1.4,  1.5),
<a class="jxr_linenumber" name="L378" href="#L378">378</a>                 <strong class="jxr_keyword">new</strong> Vector2D(0.0,  3.5)
<a class="jxr_linenumber" name="L379" href="#L379">379</a>             }
<a class="jxr_linenumber" name="L380" href="#L380">380</a>         });
<a class="jxr_linenumber" name="L381" href="#L381">381</a> 
<a class="jxr_linenumber" name="L382" href="#L382">382</a>     }
<a class="jxr_linenumber" name="L383" href="#L383">383</a> 
<a class="jxr_linenumber" name="L384" href="#L384">384</a>     @Test
<a class="jxr_linenumber" name="L385" href="#L385">385</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testUnion() {
<a class="jxr_linenumber" name="L386" href="#L386">386</a>         Vector2D[][] vertices1 = <strong class="jxr_keyword">new</strong> Vector2D[][] {
<a class="jxr_linenumber" name="L387" href="#L387">387</a>             <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L388" href="#L388">388</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 0.0,  0.0),
<a class="jxr_linenumber" name="L389" href="#L389">389</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 2.0,  0.0),
<a class="jxr_linenumber" name="L390" href="#L390">390</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 2.0,  2.0),
<a class="jxr_linenumber" name="L391" href="#L391">391</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 0.0,  2.0)
<a class="jxr_linenumber" name="L392" href="#L392">392</a>             }
<a class="jxr_linenumber" name="L393" href="#L393">393</a>         };
<a class="jxr_linenumber" name="L394" href="#L394">394</a>         PolygonsSet set1 = buildSet(vertices1);
<a class="jxr_linenumber" name="L395" href="#L395">395</a>         Vector2D[][] vertices2 = <strong class="jxr_keyword">new</strong> Vector2D[][] {
<a class="jxr_linenumber" name="L396" href="#L396">396</a>             <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L397" href="#L397">397</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 1.0,  1.0),
<a class="jxr_linenumber" name="L398" href="#L398">398</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 3.0,  1.0),
<a class="jxr_linenumber" name="L399" href="#L399">399</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 3.0,  3.0),
<a class="jxr_linenumber" name="L400" href="#L400">400</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 1.0,  3.0)
<a class="jxr_linenumber" name="L401" href="#L401">401</a>             }
<a class="jxr_linenumber" name="L402" href="#L402">402</a>         };
<a class="jxr_linenumber" name="L403" href="#L403">403</a>         PolygonsSet set2 = buildSet(vertices2);
<a class="jxr_linenumber" name="L404" href="#L404">404</a>         PolygonsSet set  = (PolygonsSet) <strong class="jxr_keyword">new</strong> RegionFactory&lt;Euclidean2D&gt;().union(set1.copySelf(),
<a class="jxr_linenumber" name="L405" href="#L405">405</a>                                                                                 set2.copySelf());
<a class="jxr_linenumber" name="L406" href="#L406">406</a>         checkVertices(set1.getVertices(), vertices1);
<a class="jxr_linenumber" name="L407" href="#L407">407</a>         checkVertices(set2.getVertices(), vertices2);
<a class="jxr_linenumber" name="L408" href="#L408">408</a>         checkVertices(set.getVertices(), <strong class="jxr_keyword">new</strong> Vector2D[][] {
<a class="jxr_linenumber" name="L409" href="#L409">409</a>             <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L410" href="#L410">410</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 0.0,  0.0),
<a class="jxr_linenumber" name="L411" href="#L411">411</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 2.0,  0.0),
<a class="jxr_linenumber" name="L412" href="#L412">412</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 2.0,  1.0),
<a class="jxr_linenumber" name="L413" href="#L413">413</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 3.0,  1.0),
<a class="jxr_linenumber" name="L414" href="#L414">414</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 3.0,  3.0),
<a class="jxr_linenumber" name="L415" href="#L415">415</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 1.0,  3.0),
<a class="jxr_linenumber" name="L416" href="#L416">416</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 1.0,  2.0),
<a class="jxr_linenumber" name="L417" href="#L417">417</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 0.0,  2.0)
<a class="jxr_linenumber" name="L418" href="#L418">418</a>             }
<a class="jxr_linenumber" name="L419" href="#L419">419</a>         });
<a class="jxr_linenumber" name="L420" href="#L420">420</a>         checkPoints(Region.Location.INSIDE, set, <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L421" href="#L421">421</a>             <strong class="jxr_keyword">new</strong> Vector2D(1.0, 1.0),
<a class="jxr_linenumber" name="L422" href="#L422">422</a>             <strong class="jxr_keyword">new</strong> Vector2D(0.5, 0.5),
<a class="jxr_linenumber" name="L423" href="#L423">423</a>             <strong class="jxr_keyword">new</strong> Vector2D(2.0, 2.0),
<a class="jxr_linenumber" name="L424" href="#L424">424</a>             <strong class="jxr_keyword">new</strong> Vector2D(2.5, 2.5),
<a class="jxr_linenumber" name="L425" href="#L425">425</a>             <strong class="jxr_keyword">new</strong> Vector2D(0.5, 1.5),
<a class="jxr_linenumber" name="L426" href="#L426">426</a>             <strong class="jxr_keyword">new</strong> Vector2D(1.5, 1.5),
<a class="jxr_linenumber" name="L427" href="#L427">427</a>             <strong class="jxr_keyword">new</strong> Vector2D(1.5, 0.5),
<a class="jxr_linenumber" name="L428" href="#L428">428</a>             <strong class="jxr_keyword">new</strong> Vector2D(1.5, 2.5),
<a class="jxr_linenumber" name="L429" href="#L429">429</a>             <strong class="jxr_keyword">new</strong> Vector2D(2.5, 1.5),
<a class="jxr_linenumber" name="L430" href="#L430">430</a>             <strong class="jxr_keyword">new</strong> Vector2D(2.5, 2.5)
<a class="jxr_linenumber" name="L431" href="#L431">431</a>         });
<a class="jxr_linenumber" name="L432" href="#L432">432</a>         checkPoints(Region.Location.OUTSIDE, set, <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L433" href="#L433">433</a>             <strong class="jxr_keyword">new</strong> Vector2D(-0.5, 0.5),
<a class="jxr_linenumber" name="L434" href="#L434">434</a>             <strong class="jxr_keyword">new</strong> Vector2D( 0.5, 2.5),
<a class="jxr_linenumber" name="L435" href="#L435">435</a>             <strong class="jxr_keyword">new</strong> Vector2D( 2.5, 0.5),
<a class="jxr_linenumber" name="L436" href="#L436">436</a>             <strong class="jxr_keyword">new</strong> Vector2D( 3.5, 2.5)
<a class="jxr_linenumber" name="L437" href="#L437">437</a>         });
<a class="jxr_linenumber" name="L438" href="#L438">438</a>         checkPoints(Region.Location.BOUNDARY, set, <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L439" href="#L439">439</a>             <strong class="jxr_keyword">new</strong> Vector2D(0.0, 0.0),
<a class="jxr_linenumber" name="L440" href="#L440">440</a>             <strong class="jxr_keyword">new</strong> Vector2D(0.5, 2.0),
<a class="jxr_linenumber" name="L441" href="#L441">441</a>             <strong class="jxr_keyword">new</strong> Vector2D(2.0, 0.5),
<a class="jxr_linenumber" name="L442" href="#L442">442</a>             <strong class="jxr_keyword">new</strong> Vector2D(2.5, 1.0),
<a class="jxr_linenumber" name="L443" href="#L443">443</a>             <strong class="jxr_keyword">new</strong> Vector2D(3.0, 2.5)
<a class="jxr_linenumber" name="L444" href="#L444">444</a>         });
<a class="jxr_linenumber" name="L445" href="#L445">445</a> 
<a class="jxr_linenumber" name="L446" href="#L446">446</a>     }
<a class="jxr_linenumber" name="L447" href="#L447">447</a> 
<a class="jxr_linenumber" name="L448" href="#L448">448</a>     @Test
<a class="jxr_linenumber" name="L449" href="#L449">449</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testIntersection() {
<a class="jxr_linenumber" name="L450" href="#L450">450</a>         Vector2D[][] vertices1 = <strong class="jxr_keyword">new</strong> Vector2D[][] {
<a class="jxr_linenumber" name="L451" href="#L451">451</a>             <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L452" href="#L452">452</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 0.0,  0.0),
<a class="jxr_linenumber" name="L453" href="#L453">453</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 2.0,  0.0),
<a class="jxr_linenumber" name="L454" href="#L454">454</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 2.0,  2.0),
<a class="jxr_linenumber" name="L455" href="#L455">455</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 0.0,  2.0)
<a class="jxr_linenumber" name="L456" href="#L456">456</a>             }
<a class="jxr_linenumber" name="L457" href="#L457">457</a>         };
<a class="jxr_linenumber" name="L458" href="#L458">458</a>         PolygonsSet set1 = buildSet(vertices1);
<a class="jxr_linenumber" name="L459" href="#L459">459</a>         Vector2D[][] vertices2 = <strong class="jxr_keyword">new</strong> Vector2D[][] {
<a class="jxr_linenumber" name="L460" href="#L460">460</a>             <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L461" href="#L461">461</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 1.0,  1.0),
<a class="jxr_linenumber" name="L462" href="#L462">462</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 3.0,  1.0),
<a class="jxr_linenumber" name="L463" href="#L463">463</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 3.0,  3.0),
<a class="jxr_linenumber" name="L464" href="#L464">464</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 1.0,  3.0)
<a class="jxr_linenumber" name="L465" href="#L465">465</a>             }
<a class="jxr_linenumber" name="L466" href="#L466">466</a>         };
<a class="jxr_linenumber" name="L467" href="#L467">467</a>         PolygonsSet set2 = buildSet(vertices2);
<a class="jxr_linenumber" name="L468" href="#L468">468</a>         PolygonsSet set  = (PolygonsSet) <strong class="jxr_keyword">new</strong> RegionFactory&lt;Euclidean2D&gt;().intersection(set1.copySelf(),
<a class="jxr_linenumber" name="L469" href="#L469">469</a>                                                                                        set2.copySelf());
<a class="jxr_linenumber" name="L470" href="#L470">470</a>         checkVertices(set1.getVertices(), vertices1);
<a class="jxr_linenumber" name="L471" href="#L471">471</a>         checkVertices(set2.getVertices(), vertices2);
<a class="jxr_linenumber" name="L472" href="#L472">472</a>         checkVertices(set.getVertices(), <strong class="jxr_keyword">new</strong> Vector2D[][] {
<a class="jxr_linenumber" name="L473" href="#L473">473</a>             <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L474" href="#L474">474</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 1.0,  1.0),
<a class="jxr_linenumber" name="L475" href="#L475">475</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 2.0,  1.0),
<a class="jxr_linenumber" name="L476" href="#L476">476</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 2.0,  2.0),
<a class="jxr_linenumber" name="L477" href="#L477">477</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 1.0,  2.0)
<a class="jxr_linenumber" name="L478" href="#L478">478</a>             }
<a class="jxr_linenumber" name="L479" href="#L479">479</a>         });
<a class="jxr_linenumber" name="L480" href="#L480">480</a>         checkPoints(Region.Location.INSIDE, set, <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L481" href="#L481">481</a>             <strong class="jxr_keyword">new</strong> Vector2D(1.5, 1.5)
<a class="jxr_linenumber" name="L482" href="#L482">482</a>         });
<a class="jxr_linenumber" name="L483" href="#L483">483</a>         checkPoints(Region.Location.OUTSIDE, set, <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L484" href="#L484">484</a>             <strong class="jxr_keyword">new</strong> Vector2D(0.5, 1.5),
<a class="jxr_linenumber" name="L485" href="#L485">485</a>             <strong class="jxr_keyword">new</strong> Vector2D(2.5, 1.5),
<a class="jxr_linenumber" name="L486" href="#L486">486</a>             <strong class="jxr_keyword">new</strong> Vector2D(1.5, 0.5),
<a class="jxr_linenumber" name="L487" href="#L487">487</a>             <strong class="jxr_keyword">new</strong> Vector2D(0.5, 0.5)
<a class="jxr_linenumber" name="L488" href="#L488">488</a>         });
<a class="jxr_linenumber" name="L489" href="#L489">489</a>         checkPoints(Region.Location.BOUNDARY, set, <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L490" href="#L490">490</a>             <strong class="jxr_keyword">new</strong> Vector2D(1.0, 1.0),
<a class="jxr_linenumber" name="L491" href="#L491">491</a>             <strong class="jxr_keyword">new</strong> Vector2D(2.0, 2.0),
<a class="jxr_linenumber" name="L492" href="#L492">492</a>             <strong class="jxr_keyword">new</strong> Vector2D(1.0, 1.5),
<a class="jxr_linenumber" name="L493" href="#L493">493</a>             <strong class="jxr_keyword">new</strong> Vector2D(1.5, 2.0)
<a class="jxr_linenumber" name="L494" href="#L494">494</a>         });
<a class="jxr_linenumber" name="L495" href="#L495">495</a>     }
<a class="jxr_linenumber" name="L496" href="#L496">496</a> 
<a class="jxr_linenumber" name="L497" href="#L497">497</a>     @Test
<a class="jxr_linenumber" name="L498" href="#L498">498</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testXor() {
<a class="jxr_linenumber" name="L499" href="#L499">499</a>         Vector2D[][] vertices1 = <strong class="jxr_keyword">new</strong> Vector2D[][] {
<a class="jxr_linenumber" name="L500" href="#L500">500</a>             <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L501" href="#L501">501</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 0.0,  0.0),
<a class="jxr_linenumber" name="L502" href="#L502">502</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 2.0,  0.0),
<a class="jxr_linenumber" name="L503" href="#L503">503</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 2.0,  2.0),
<a class="jxr_linenumber" name="L504" href="#L504">504</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 0.0,  2.0)
<a class="jxr_linenumber" name="L505" href="#L505">505</a>             }
<a class="jxr_linenumber" name="L506" href="#L506">506</a>         };
<a class="jxr_linenumber" name="L507" href="#L507">507</a>         PolygonsSet set1 = buildSet(vertices1);
<a class="jxr_linenumber" name="L508" href="#L508">508</a>         Vector2D[][] vertices2 = <strong class="jxr_keyword">new</strong> Vector2D[][] {
<a class="jxr_linenumber" name="L509" href="#L509">509</a>             <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L510" href="#L510">510</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 1.0,  1.0),
<a class="jxr_linenumber" name="L511" href="#L511">511</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 3.0,  1.0),
<a class="jxr_linenumber" name="L512" href="#L512">512</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 3.0,  3.0),
<a class="jxr_linenumber" name="L513" href="#L513">513</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 1.0,  3.0)
<a class="jxr_linenumber" name="L514" href="#L514">514</a>             }
<a class="jxr_linenumber" name="L515" href="#L515">515</a>         };
<a class="jxr_linenumber" name="L516" href="#L516">516</a>         PolygonsSet set2 = buildSet(vertices2);
<a class="jxr_linenumber" name="L517" href="#L517">517</a>         PolygonsSet set  = (PolygonsSet) <strong class="jxr_keyword">new</strong> RegionFactory&lt;Euclidean2D&gt;().xor(set1.copySelf(),
<a class="jxr_linenumber" name="L518" href="#L518">518</a>                                                                               set2.copySelf());
<a class="jxr_linenumber" name="L519" href="#L519">519</a>         checkVertices(set1.getVertices(), vertices1);
<a class="jxr_linenumber" name="L520" href="#L520">520</a>         checkVertices(set2.getVertices(), vertices2);
<a class="jxr_linenumber" name="L521" href="#L521">521</a>         checkVertices(set.getVertices(), <strong class="jxr_keyword">new</strong> Vector2D[][] {
<a class="jxr_linenumber" name="L522" href="#L522">522</a>             <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L523" href="#L523">523</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 0.0,  0.0),
<a class="jxr_linenumber" name="L524" href="#L524">524</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 2.0,  0.0),
<a class="jxr_linenumber" name="L525" href="#L525">525</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 2.0,  1.0),
<a class="jxr_linenumber" name="L526" href="#L526">526</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 3.0,  1.0),
<a class="jxr_linenumber" name="L527" href="#L527">527</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 3.0,  3.0),
<a class="jxr_linenumber" name="L528" href="#L528">528</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 1.0,  3.0),
<a class="jxr_linenumber" name="L529" href="#L529">529</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 1.0,  2.0),
<a class="jxr_linenumber" name="L530" href="#L530">530</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 0.0,  2.0)
<a class="jxr_linenumber" name="L531" href="#L531">531</a>             },
<a class="jxr_linenumber" name="L532" href="#L532">532</a>             <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L533" href="#L533">533</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 1.0,  1.0),
<a class="jxr_linenumber" name="L534" href="#L534">534</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 1.0,  2.0),
<a class="jxr_linenumber" name="L535" href="#L535">535</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 2.0,  2.0),
<a class="jxr_linenumber" name="L536" href="#L536">536</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 2.0,  1.0)
<a class="jxr_linenumber" name="L537" href="#L537">537</a>             }
<a class="jxr_linenumber" name="L538" href="#L538">538</a>         });
<a class="jxr_linenumber" name="L539" href="#L539">539</a>         checkPoints(Region.Location.INSIDE, set, <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L540" href="#L540">540</a>             <strong class="jxr_keyword">new</strong> Vector2D(0.5, 0.5),
<a class="jxr_linenumber" name="L541" href="#L541">541</a>             <strong class="jxr_keyword">new</strong> Vector2D(2.5, 2.5),
<a class="jxr_linenumber" name="L542" href="#L542">542</a>             <strong class="jxr_keyword">new</strong> Vector2D(0.5, 1.5),
<a class="jxr_linenumber" name="L543" href="#L543">543</a>             <strong class="jxr_keyword">new</strong> Vector2D(1.5, 0.5),
<a class="jxr_linenumber" name="L544" href="#L544">544</a>             <strong class="jxr_keyword">new</strong> Vector2D(1.5, 2.5),
<a class="jxr_linenumber" name="L545" href="#L545">545</a>             <strong class="jxr_keyword">new</strong> Vector2D(2.5, 1.5),
<a class="jxr_linenumber" name="L546" href="#L546">546</a>             <strong class="jxr_keyword">new</strong> Vector2D(2.5, 2.5)
<a class="jxr_linenumber" name="L547" href="#L547">547</a>         });
<a class="jxr_linenumber" name="L548" href="#L548">548</a>         checkPoints(Region.Location.OUTSIDE, set, <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L549" href="#L549">549</a>             <strong class="jxr_keyword">new</strong> Vector2D(-0.5, 0.5),
<a class="jxr_linenumber" name="L550" href="#L550">550</a>             <strong class="jxr_keyword">new</strong> Vector2D( 0.5, 2.5),
<a class="jxr_linenumber" name="L551" href="#L551">551</a>             <strong class="jxr_keyword">new</strong> Vector2D( 2.5, 0.5),
<a class="jxr_linenumber" name="L552" href="#L552">552</a>             <strong class="jxr_keyword">new</strong> Vector2D( 1.5, 1.5),
<a class="jxr_linenumber" name="L553" href="#L553">553</a>             <strong class="jxr_keyword">new</strong> Vector2D( 3.5, 2.5)
<a class="jxr_linenumber" name="L554" href="#L554">554</a>         });
<a class="jxr_linenumber" name="L555" href="#L555">555</a>         checkPoints(Region.Location.BOUNDARY, set, <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L556" href="#L556">556</a>             <strong class="jxr_keyword">new</strong> Vector2D(1.0, 1.0),
<a class="jxr_linenumber" name="L557" href="#L557">557</a>             <strong class="jxr_keyword">new</strong> Vector2D(2.0, 2.0),
<a class="jxr_linenumber" name="L558" href="#L558">558</a>             <strong class="jxr_keyword">new</strong> Vector2D(1.5, 1.0),
<a class="jxr_linenumber" name="L559" href="#L559">559</a>             <strong class="jxr_keyword">new</strong> Vector2D(2.0, 1.5),
<a class="jxr_linenumber" name="L560" href="#L560">560</a>             <strong class="jxr_keyword">new</strong> Vector2D(0.0, 0.0),
<a class="jxr_linenumber" name="L561" href="#L561">561</a>             <strong class="jxr_keyword">new</strong> Vector2D(0.5, 2.0),
<a class="jxr_linenumber" name="L562" href="#L562">562</a>             <strong class="jxr_keyword">new</strong> Vector2D(2.0, 0.5),
<a class="jxr_linenumber" name="L563" href="#L563">563</a>             <strong class="jxr_keyword">new</strong> Vector2D(2.5, 1.0),
<a class="jxr_linenumber" name="L564" href="#L564">564</a>             <strong class="jxr_keyword">new</strong> Vector2D(3.0, 2.5)
<a class="jxr_linenumber" name="L565" href="#L565">565</a>         });
<a class="jxr_linenumber" name="L566" href="#L566">566</a>     }
<a class="jxr_linenumber" name="L567" href="#L567">567</a> 
<a class="jxr_linenumber" name="L568" href="#L568">568</a>     @Test
<a class="jxr_linenumber" name="L569" href="#L569">569</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testDifference() {
<a class="jxr_linenumber" name="L570" href="#L570">570</a>         Vector2D[][] vertices1 = <strong class="jxr_keyword">new</strong> Vector2D[][] {
<a class="jxr_linenumber" name="L571" href="#L571">571</a>             <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L572" href="#L572">572</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 0.0,  0.0),
<a class="jxr_linenumber" name="L573" href="#L573">573</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 2.0,  0.0),
<a class="jxr_linenumber" name="L574" href="#L574">574</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 2.0,  2.0),
<a class="jxr_linenumber" name="L575" href="#L575">575</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 0.0,  2.0)
<a class="jxr_linenumber" name="L576" href="#L576">576</a>             }
<a class="jxr_linenumber" name="L577" href="#L577">577</a>         };
<a class="jxr_linenumber" name="L578" href="#L578">578</a>         PolygonsSet set1 = buildSet(vertices1);
<a class="jxr_linenumber" name="L579" href="#L579">579</a>         Vector2D[][] vertices2 = <strong class="jxr_keyword">new</strong> Vector2D[][] {
<a class="jxr_linenumber" name="L580" href="#L580">580</a>             <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L581" href="#L581">581</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 1.0,  1.0),
<a class="jxr_linenumber" name="L582" href="#L582">582</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 3.0,  1.0),
<a class="jxr_linenumber" name="L583" href="#L583">583</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 3.0,  3.0),
<a class="jxr_linenumber" name="L584" href="#L584">584</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 1.0,  3.0)
<a class="jxr_linenumber" name="L585" href="#L585">585</a>             }
<a class="jxr_linenumber" name="L586" href="#L586">586</a>         };
<a class="jxr_linenumber" name="L587" href="#L587">587</a>         PolygonsSet set2 = buildSet(vertices2);
<a class="jxr_linenumber" name="L588" href="#L588">588</a>         PolygonsSet set  = (PolygonsSet) <strong class="jxr_keyword">new</strong> RegionFactory&lt;Euclidean2D&gt;().difference(set1.copySelf(),
<a class="jxr_linenumber" name="L589" href="#L589">589</a>                                                                                      set2.copySelf());
<a class="jxr_linenumber" name="L590" href="#L590">590</a>         checkVertices(set1.getVertices(), vertices1);
<a class="jxr_linenumber" name="L591" href="#L591">591</a>         checkVertices(set2.getVertices(), vertices2);
<a class="jxr_linenumber" name="L592" href="#L592">592</a>         checkVertices(set.getVertices(), <strong class="jxr_keyword">new</strong> Vector2D[][] {
<a class="jxr_linenumber" name="L593" href="#L593">593</a>             <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L594" href="#L594">594</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 0.0,  0.0),
<a class="jxr_linenumber" name="L595" href="#L595">595</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 2.0,  0.0),
<a class="jxr_linenumber" name="L596" href="#L596">596</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 2.0,  1.0),
<a class="jxr_linenumber" name="L597" href="#L597">597</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 1.0,  1.0),
<a class="jxr_linenumber" name="L598" href="#L598">598</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 1.0,  2.0),
<a class="jxr_linenumber" name="L599" href="#L599">599</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 0.0,  2.0)
<a class="jxr_linenumber" name="L600" href="#L600">600</a>             }
<a class="jxr_linenumber" name="L601" href="#L601">601</a>         });
<a class="jxr_linenumber" name="L602" href="#L602">602</a>         checkPoints(Region.Location.INSIDE, set, <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L603" href="#L603">603</a>             <strong class="jxr_keyword">new</strong> Vector2D(0.5, 0.5),
<a class="jxr_linenumber" name="L604" href="#L604">604</a>             <strong class="jxr_keyword">new</strong> Vector2D(0.5, 1.5),
<a class="jxr_linenumber" name="L605" href="#L605">605</a>             <strong class="jxr_keyword">new</strong> Vector2D(1.5, 0.5)
<a class="jxr_linenumber" name="L606" href="#L606">606</a>         });
<a class="jxr_linenumber" name="L607" href="#L607">607</a>         checkPoints(Region.Location.OUTSIDE, set, <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L608" href="#L608">608</a>             <strong class="jxr_keyword">new</strong> Vector2D( 2.5, 2.5),
<a class="jxr_linenumber" name="L609" href="#L609">609</a>             <strong class="jxr_keyword">new</strong> Vector2D(-0.5, 0.5),
<a class="jxr_linenumber" name="L610" href="#L610">610</a>             <strong class="jxr_keyword">new</strong> Vector2D( 0.5, 2.5),
<a class="jxr_linenumber" name="L611" href="#L611">611</a>             <strong class="jxr_keyword">new</strong> Vector2D( 2.5, 0.5),
<a class="jxr_linenumber" name="L612" href="#L612">612</a>             <strong class="jxr_keyword">new</strong> Vector2D( 1.5, 1.5),
<a class="jxr_linenumber" name="L613" href="#L613">613</a>             <strong class="jxr_keyword">new</strong> Vector2D( 3.5, 2.5),
<a class="jxr_linenumber" name="L614" href="#L614">614</a>             <strong class="jxr_keyword">new</strong> Vector2D( 1.5, 2.5),
<a class="jxr_linenumber" name="L615" href="#L615">615</a>             <strong class="jxr_keyword">new</strong> Vector2D( 2.5, 1.5),
<a class="jxr_linenumber" name="L616" href="#L616">616</a>             <strong class="jxr_keyword">new</strong> Vector2D( 2.0, 1.5),
<a class="jxr_linenumber" name="L617" href="#L617">617</a>             <strong class="jxr_keyword">new</strong> Vector2D( 2.0, 2.0),
<a class="jxr_linenumber" name="L618" href="#L618">618</a>             <strong class="jxr_keyword">new</strong> Vector2D( 2.5, 1.0),
<a class="jxr_linenumber" name="L619" href="#L619">619</a>             <strong class="jxr_keyword">new</strong> Vector2D( 2.5, 2.5),
<a class="jxr_linenumber" name="L620" href="#L620">620</a>             <strong class="jxr_keyword">new</strong> Vector2D( 3.0, 2.5)
<a class="jxr_linenumber" name="L621" href="#L621">621</a>         });
<a class="jxr_linenumber" name="L622" href="#L622">622</a>         checkPoints(Region.Location.BOUNDARY, set, <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L623" href="#L623">623</a>             <strong class="jxr_keyword">new</strong> Vector2D(1.0, 1.0),
<a class="jxr_linenumber" name="L624" href="#L624">624</a>             <strong class="jxr_keyword">new</strong> Vector2D(1.5, 1.0),
<a class="jxr_linenumber" name="L625" href="#L625">625</a>             <strong class="jxr_keyword">new</strong> Vector2D(0.0, 0.0),
<a class="jxr_linenumber" name="L626" href="#L626">626</a>             <strong class="jxr_keyword">new</strong> Vector2D(0.5, 2.0),
<a class="jxr_linenumber" name="L627" href="#L627">627</a>             <strong class="jxr_keyword">new</strong> Vector2D(2.0, 0.5)
<a class="jxr_linenumber" name="L628" href="#L628">628</a>         });
<a class="jxr_linenumber" name="L629" href="#L629">629</a>     }
<a class="jxr_linenumber" name="L630" href="#L630">630</a> 
<a class="jxr_linenumber" name="L631" href="#L631">631</a>     @Test
<a class="jxr_linenumber" name="L632" href="#L632">632</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testEmptyDifference() {
<a class="jxr_linenumber" name="L633" href="#L633">633</a>         Vector2D[][] vertices1 = <strong class="jxr_keyword">new</strong> Vector2D[][] {
<a class="jxr_linenumber" name="L634" href="#L634">634</a>             <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L635" href="#L635">635</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 0.5, 3.5),
<a class="jxr_linenumber" name="L636" href="#L636">636</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 0.5, 4.5),
<a class="jxr_linenumber" name="L637" href="#L637">637</a>                 <strong class="jxr_keyword">new</strong> Vector2D(-0.5, 4.5),
<a class="jxr_linenumber" name="L638" href="#L638">638</a>                 <strong class="jxr_keyword">new</strong> Vector2D(-0.5, 3.5)
<a class="jxr_linenumber" name="L639" href="#L639">639</a>             }
<a class="jxr_linenumber" name="L640" href="#L640">640</a>         };
<a class="jxr_linenumber" name="L641" href="#L641">641</a>         PolygonsSet set1 = buildSet(vertices1);
<a class="jxr_linenumber" name="L642" href="#L642">642</a>         Vector2D[][] vertices2 = <strong class="jxr_keyword">new</strong> Vector2D[][] {
<a class="jxr_linenumber" name="L643" href="#L643">643</a>             <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L644" href="#L644">644</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 1.0, 2.0),
<a class="jxr_linenumber" name="L645" href="#L645">645</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 1.0, 8.0),
<a class="jxr_linenumber" name="L646" href="#L646">646</a>                 <strong class="jxr_keyword">new</strong> Vector2D(-1.0, 8.0),
<a class="jxr_linenumber" name="L647" href="#L647">647</a>                 <strong class="jxr_keyword">new</strong> Vector2D(-1.0, 2.0)
<a class="jxr_linenumber" name="L648" href="#L648">648</a>             }
<a class="jxr_linenumber" name="L649" href="#L649">649</a>         };
<a class="jxr_linenumber" name="L650" href="#L650">650</a>         PolygonsSet set2 = buildSet(vertices2);
<a class="jxr_linenumber" name="L651" href="#L651">651</a>         Assert.assertTrue(<strong class="jxr_keyword">new</strong> RegionFactory&lt;Euclidean2D&gt;().difference(set1.copySelf(), set2.copySelf()).isEmpty());
<a class="jxr_linenumber" name="L652" href="#L652">652</a>     }
<a class="jxr_linenumber" name="L653" href="#L653">653</a> 
<a class="jxr_linenumber" name="L654" href="#L654">654</a>     @Test
<a class="jxr_linenumber" name="L655" href="#L655">655</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testChoppedHexagon() {
<a class="jxr_linenumber" name="L656" href="#L656">656</a>         <strong class="jxr_keyword">double</strong> pi6   = FastMath.PI / 6.0;
<a class="jxr_linenumber" name="L657" href="#L657">657</a>         <strong class="jxr_keyword">double</strong> sqrt3 = FastMath.sqrt(3.0);
<a class="jxr_linenumber" name="L658" href="#L658">658</a>         SubLine[] hyp = {
<a class="jxr_linenumber" name="L659" href="#L659">659</a>             <strong class="jxr_keyword">new</strong> Line(<strong class="jxr_keyword">new</strong> Vector2D(   0.0, 1.0),  5 * pi6, 1.0e-10).wholeHyperplane(),
<a class="jxr_linenumber" name="L660" href="#L660">660</a>             <strong class="jxr_keyword">new</strong> Line(<strong class="jxr_keyword">new</strong> Vector2D(-sqrt3, 1.0),  7 * pi6, 1.0e-10).wholeHyperplane(),
<a class="jxr_linenumber" name="L661" href="#L661">661</a>             <strong class="jxr_keyword">new</strong> Line(<strong class="jxr_keyword">new</strong> Vector2D(-sqrt3, 1.0),  9 * pi6, 1.0e-10).wholeHyperplane(),
<a class="jxr_linenumber" name="L662" href="#L662">662</a>             <strong class="jxr_keyword">new</strong> Line(<strong class="jxr_keyword">new</strong> Vector2D(-sqrt3, 0.0), 11 * pi6, 1.0e-10).wholeHyperplane(),
<a class="jxr_linenumber" name="L663" href="#L663">663</a>             <strong class="jxr_keyword">new</strong> Line(<strong class="jxr_keyword">new</strong> Vector2D(   0.0, 0.0), 13 * pi6, 1.0e-10).wholeHyperplane(),
<a class="jxr_linenumber" name="L664" href="#L664">664</a>             <strong class="jxr_keyword">new</strong> Line(<strong class="jxr_keyword">new</strong> Vector2D(   0.0, 1.0),  3 * pi6, 1.0e-10).wholeHyperplane(),
<a class="jxr_linenumber" name="L665" href="#L665">665</a>             <strong class="jxr_keyword">new</strong> Line(<strong class="jxr_keyword">new</strong> Vector2D(-5.0 * sqrt3 / 6.0, 0.0), 9 * pi6, 1.0e-10).wholeHyperplane()
<a class="jxr_linenumber" name="L666" href="#L666">666</a>         };
<a class="jxr_linenumber" name="L667" href="#L667">667</a>         hyp[1] = (SubLine) hyp[1].split(hyp[0].getHyperplane()).getMinus();
<a class="jxr_linenumber" name="L668" href="#L668">668</a>         hyp[2] = (SubLine) hyp[2].split(hyp[1].getHyperplane()).getMinus();
<a class="jxr_linenumber" name="L669" href="#L669">669</a>         hyp[3] = (SubLine) hyp[3].split(hyp[2].getHyperplane()).getMinus();
<a class="jxr_linenumber" name="L670" href="#L670">670</a>         hyp[4] = (SubLine) hyp[4].split(hyp[3].getHyperplane()).getMinus().split(hyp[0].getHyperplane()).getMinus();
<a class="jxr_linenumber" name="L671" href="#L671">671</a>         hyp[5] = (SubLine) hyp[5].split(hyp[4].getHyperplane()).getMinus().split(hyp[0].getHyperplane()).getMinus();
<a class="jxr_linenumber" name="L672" href="#L672">672</a>         hyp[6] = (SubLine) hyp[6].split(hyp[3].getHyperplane()).getMinus().split(hyp[1].getHyperplane()).getMinus();
<a class="jxr_linenumber" name="L673" href="#L673">673</a>         BSPTree&lt;Euclidean2D&gt; tree = <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(Boolean.TRUE);
<a class="jxr_linenumber" name="L674" href="#L674">674</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = hyp.length - 1; i &gt;= 0; --i) {
<a class="jxr_linenumber" name="L675" href="#L675">675</a>             tree = <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(hyp[i], <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(Boolean.FALSE), tree, <strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L676" href="#L676">676</a>         }
<a class="jxr_linenumber" name="L677" href="#L677">677</a>         PolygonsSet set = <strong class="jxr_keyword">new</strong> PolygonsSet(tree, 1.0e-10);
<a class="jxr_linenumber" name="L678" href="#L678">678</a>         SubLine splitter =
<a class="jxr_linenumber" name="L679" href="#L679">679</a>             <strong class="jxr_keyword">new</strong> Line(<strong class="jxr_keyword">new</strong> Vector2D(-2.0 * sqrt3 / 3.0, 0.0), 9 * pi6, 1.0e-10).wholeHyperplane();
<a class="jxr_linenumber" name="L680" href="#L680">680</a>         PolygonsSet slice =
<a class="jxr_linenumber" name="L681" href="#L681">681</a>             <strong class="jxr_keyword">new</strong> PolygonsSet(<strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(splitter,
<a class="jxr_linenumber" name="L682" href="#L682">682</a>                                                      set.getTree(false).split(splitter).getPlus(),
<a class="jxr_linenumber" name="L683" href="#L683">683</a>                                                      <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(Boolean.FALSE), <strong class="jxr_keyword">null</strong>),
<a class="jxr_linenumber" name="L684" href="#L684">684</a>                             1.0e-10);
<a class="jxr_linenumber" name="L685" href="#L685">685</a>         Assert.assertEquals(Region.Location.OUTSIDE,
<a class="jxr_linenumber" name="L686" href="#L686">686</a>                             slice.checkPoint(<strong class="jxr_keyword">new</strong> Vector2D(0.1, 0.5)));
<a class="jxr_linenumber" name="L687" href="#L687">687</a>         Assert.assertEquals(11.0 / 3.0, slice.getBoundarySize(), 1.0e-10);
<a class="jxr_linenumber" name="L688" href="#L688">688</a> 
<a class="jxr_linenumber" name="L689" href="#L689">689</a>     }
<a class="jxr_linenumber" name="L690" href="#L690">690</a> 
<a class="jxr_linenumber" name="L691" href="#L691">691</a>     @Test
<a class="jxr_linenumber" name="L692" href="#L692">692</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testConcentric() {
<a class="jxr_linenumber" name="L693" href="#L693">693</a>         <strong class="jxr_keyword">double</strong> h = FastMath.sqrt(3.0) / 2.0;
<a class="jxr_linenumber" name="L694" href="#L694">694</a>         Vector2D[][] vertices1 = <strong class="jxr_keyword">new</strong> Vector2D[][] {
<a class="jxr_linenumber" name="L695" href="#L695">695</a>             <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L696" href="#L696">696</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 0.00, 0.1 * h),
<a class="jxr_linenumber" name="L697" href="#L697">697</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 0.05, 0.1 * h),
<a class="jxr_linenumber" name="L698" href="#L698">698</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 0.10, 0.2 * h),
<a class="jxr_linenumber" name="L699" href="#L699">699</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 0.05, 0.3 * h),
<a class="jxr_linenumber" name="L700" href="#L700">700</a>                 <strong class="jxr_keyword">new</strong> Vector2D(-0.05, 0.3 * h),
<a class="jxr_linenumber" name="L701" href="#L701">701</a>                 <strong class="jxr_keyword">new</strong> Vector2D(-0.10, 0.2 * h),
<a class="jxr_linenumber" name="L702" href="#L702">702</a>                 <strong class="jxr_keyword">new</strong> Vector2D(-0.05, 0.1 * h)
<a class="jxr_linenumber" name="L703" href="#L703">703</a>             }
<a class="jxr_linenumber" name="L704" href="#L704">704</a>         };
<a class="jxr_linenumber" name="L705" href="#L705">705</a>         PolygonsSet set1 = buildSet(vertices1);
<a class="jxr_linenumber" name="L706" href="#L706">706</a>         Vector2D[][] vertices2 = <strong class="jxr_keyword">new</strong> Vector2D[][] {
<a class="jxr_linenumber" name="L707" href="#L707">707</a>             <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L708" href="#L708">708</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 0.00, 0.0 * h),
<a class="jxr_linenumber" name="L709" href="#L709">709</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 0.10, 0.0 * h),
<a class="jxr_linenumber" name="L710" href="#L710">710</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 0.20, 0.2 * h),
<a class="jxr_linenumber" name="L711" href="#L711">711</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 0.10, 0.4 * h),
<a class="jxr_linenumber" name="L712" href="#L712">712</a>                 <strong class="jxr_keyword">new</strong> Vector2D(-0.10, 0.4 * h),
<a class="jxr_linenumber" name="L713" href="#L713">713</a>                 <strong class="jxr_keyword">new</strong> Vector2D(-0.20, 0.2 * h),
<a class="jxr_linenumber" name="L714" href="#L714">714</a>                 <strong class="jxr_keyword">new</strong> Vector2D(-0.10, 0.0 * h)
<a class="jxr_linenumber" name="L715" href="#L715">715</a>             }
<a class="jxr_linenumber" name="L716" href="#L716">716</a>         };
<a class="jxr_linenumber" name="L717" href="#L717">717</a>         PolygonsSet set2 = buildSet(vertices2);
<a class="jxr_linenumber" name="L718" href="#L718">718</a>         Assert.assertTrue(set2.contains(set1));
<a class="jxr_linenumber" name="L719" href="#L719">719</a>     }
<a class="jxr_linenumber" name="L720" href="#L720">720</a> 
<a class="jxr_linenumber" name="L721" href="#L721">721</a>     @Test
<a class="jxr_linenumber" name="L722" href="#L722">722</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testBug20040520() {
<a class="jxr_linenumber" name="L723" href="#L723">723</a>         BSPTree&lt;Euclidean2D&gt; a0 =
<a class="jxr_linenumber" name="L724" href="#L724">724</a>             <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(buildSegment(<strong class="jxr_keyword">new</strong> Vector2D(0.85, -0.05),
<a class="jxr_linenumber" name="L725" href="#L725">725</a>                                                   <strong class="jxr_keyword">new</strong> Vector2D(0.90, -0.10)),
<a class="jxr_linenumber" name="L726" href="#L726">726</a>                                                   <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(Boolean.FALSE),
<a class="jxr_linenumber" name="L727" href="#L727">727</a>                                                   <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(Boolean.TRUE),
<a class="jxr_linenumber" name="L728" href="#L728">728</a>                                                   <strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L729" href="#L729">729</a>         BSPTree&lt;Euclidean2D&gt; a1 =
<a class="jxr_linenumber" name="L730" href="#L730">730</a>             <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(buildSegment(<strong class="jxr_keyword">new</strong> Vector2D(0.85, -0.10),
<a class="jxr_linenumber" name="L731" href="#L731">731</a>                                                   <strong class="jxr_keyword">new</strong> Vector2D(0.90, -0.10)),
<a class="jxr_linenumber" name="L732" href="#L732">732</a>                                                   <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(Boolean.FALSE), a0, <strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L733" href="#L733">733</a>         BSPTree&lt;Euclidean2D&gt; a2 =
<a class="jxr_linenumber" name="L734" href="#L734">734</a>             <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(buildSegment(<strong class="jxr_keyword">new</strong> Vector2D(0.90, -0.05),
<a class="jxr_linenumber" name="L735" href="#L735">735</a>                                                   <strong class="jxr_keyword">new</strong> Vector2D(0.85, -0.05)),
<a class="jxr_linenumber" name="L736" href="#L736">736</a>                                                   <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(Boolean.FALSE), a1, <strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L737" href="#L737">737</a>         BSPTree&lt;Euclidean2D&gt; a3 =
<a class="jxr_linenumber" name="L738" href="#L738">738</a>             <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(buildSegment(<strong class="jxr_keyword">new</strong> Vector2D(0.82, -0.05),
<a class="jxr_linenumber" name="L739" href="#L739">739</a>                                                   <strong class="jxr_keyword">new</strong> Vector2D(0.82, -0.08)),
<a class="jxr_linenumber" name="L740" href="#L740">740</a>                                                   <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(Boolean.FALSE),
<a class="jxr_linenumber" name="L741" href="#L741">741</a>                                                   <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(Boolean.TRUE),
<a class="jxr_linenumber" name="L742" href="#L742">742</a>                                                   <strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L743" href="#L743">743</a>         BSPTree&lt;Euclidean2D&gt; a4 =
<a class="jxr_linenumber" name="L744" href="#L744">744</a>             <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(buildHalfLine(<strong class="jxr_keyword">new</strong> Vector2D(0.85, -0.05),
<a class="jxr_linenumber" name="L745" href="#L745">745</a>                                                    <strong class="jxr_keyword">new</strong> Vector2D(0.80, -0.05),
<a class="jxr_linenumber" name="L746" href="#L746">746</a>                                                    false),
<a class="jxr_linenumber" name="L747" href="#L747">747</a>                                                    <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(Boolean.FALSE), a3, <strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L748" href="#L748">748</a>         BSPTree&lt;Euclidean2D&gt; a5 =
<a class="jxr_linenumber" name="L749" href="#L749">749</a>             <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(buildSegment(<strong class="jxr_keyword">new</strong> Vector2D(0.82, -0.08),
<a class="jxr_linenumber" name="L750" href="#L750">750</a>                                                   <strong class="jxr_keyword">new</strong> Vector2D(0.82, -0.18)),
<a class="jxr_linenumber" name="L751" href="#L751">751</a>                                                   <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(Boolean.FALSE),
<a class="jxr_linenumber" name="L752" href="#L752">752</a>                                                   <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(Boolean.TRUE),
<a class="jxr_linenumber" name="L753" href="#L753">753</a>                                                   <strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L754" href="#L754">754</a>         BSPTree&lt;Euclidean2D&gt; a6 =
<a class="jxr_linenumber" name="L755" href="#L755">755</a>             <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(buildHalfLine(<strong class="jxr_keyword">new</strong> Vector2D(0.82, -0.18),
<a class="jxr_linenumber" name="L756" href="#L756">756</a>                                                    <strong class="jxr_keyword">new</strong> Vector2D(0.85, -0.15),
<a class="jxr_linenumber" name="L757" href="#L757">757</a>                                                    <strong class="jxr_keyword">true</strong>),
<a class="jxr_linenumber" name="L758" href="#L758">758</a>                                                    <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(Boolean.FALSE), a5, <strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L759" href="#L759">759</a>         BSPTree&lt;Euclidean2D&gt; a7 =
<a class="jxr_linenumber" name="L760" href="#L760">760</a>             <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(buildHalfLine(<strong class="jxr_keyword">new</strong> Vector2D(0.85, -0.05),
<a class="jxr_linenumber" name="L761" href="#L761">761</a>                                                    <strong class="jxr_keyword">new</strong> Vector2D(0.82, -0.08),
<a class="jxr_linenumber" name="L762" href="#L762">762</a>                                                    false),
<a class="jxr_linenumber" name="L763" href="#L763">763</a>                                                    a4, a6, <strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L764" href="#L764">764</a>         BSPTree&lt;Euclidean2D&gt; a8 =
<a class="jxr_linenumber" name="L765" href="#L765">765</a>             <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(buildLine(<strong class="jxr_keyword">new</strong> Vector2D(0.85, -0.25),
<a class="jxr_linenumber" name="L766" href="#L766">766</a>                                                <strong class="jxr_keyword">new</strong> Vector2D(0.85,  0.05)),
<a class="jxr_linenumber" name="L767" href="#L767">767</a>                                                a2, a7, <strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L768" href="#L768">768</a>         BSPTree&lt;Euclidean2D&gt; a9 =
<a class="jxr_linenumber" name="L769" href="#L769">769</a>             <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(buildLine(<strong class="jxr_keyword">new</strong> Vector2D(0.90,  0.05),
<a class="jxr_linenumber" name="L770" href="#L770">770</a>                                                <strong class="jxr_keyword">new</strong> Vector2D(0.90, -0.50)),
<a class="jxr_linenumber" name="L771" href="#L771">771</a>                                                a8, <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(Boolean.FALSE), <strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L772" href="#L772">772</a> 
<a class="jxr_linenumber" name="L773" href="#L773">773</a>         BSPTree&lt;Euclidean2D&gt; b0 =
<a class="jxr_linenumber" name="L774" href="#L774">774</a>             <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(buildSegment(<strong class="jxr_keyword">new</strong> Vector2D(0.92, -0.12),
<a class="jxr_linenumber" name="L775" href="#L775">775</a>                                                   <strong class="jxr_keyword">new</strong> Vector2D(0.92, -0.08)),
<a class="jxr_linenumber" name="L776" href="#L776">776</a>                                                   <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(Boolean.FALSE), <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(Boolean.TRUE),
<a class="jxr_linenumber" name="L777" href="#L777">777</a>                                                   <strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L778" href="#L778">778</a>         BSPTree&lt;Euclidean2D&gt; b1 =
<a class="jxr_linenumber" name="L779" href="#L779">779</a>             <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(buildHalfLine(<strong class="jxr_keyword">new</strong> Vector2D(0.92, -0.08),
<a class="jxr_linenumber" name="L780" href="#L780">780</a>                                                    <strong class="jxr_keyword">new</strong> Vector2D(0.90, -0.10),
<a class="jxr_linenumber" name="L781" href="#L781">781</a>                                                    <strong class="jxr_keyword">true</strong>),
<a class="jxr_linenumber" name="L782" href="#L782">782</a>                                                    <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(Boolean.FALSE), b0, <strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L783" href="#L783">783</a>         BSPTree&lt;Euclidean2D&gt; b2 =
<a class="jxr_linenumber" name="L784" href="#L784">784</a>             <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(buildSegment(<strong class="jxr_keyword">new</strong> Vector2D(0.92, -0.18),
<a class="jxr_linenumber" name="L785" href="#L785">785</a>                                                   <strong class="jxr_keyword">new</strong> Vector2D(0.92, -0.12)),
<a class="jxr_linenumber" name="L786" href="#L786">786</a>                                                   <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(Boolean.FALSE), <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(Boolean.TRUE),
<a class="jxr_linenumber" name="L787" href="#L787">787</a>                                                   <strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L788" href="#L788">788</a>         BSPTree&lt;Euclidean2D&gt; b3 =
<a class="jxr_linenumber" name="L789" href="#L789">789</a>             <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(buildSegment(<strong class="jxr_keyword">new</strong> Vector2D(0.85, -0.15),
<a class="jxr_linenumber" name="L790" href="#L790">790</a>                                                   <strong class="jxr_keyword">new</strong> Vector2D(0.90, -0.20)),
<a class="jxr_linenumber" name="L791" href="#L791">791</a>                                                   <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(Boolean.FALSE), b2, <strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L792" href="#L792">792</a>         BSPTree&lt;Euclidean2D&gt; b4 =
<a class="jxr_linenumber" name="L793" href="#L793">793</a>             <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(buildSegment(<strong class="jxr_keyword">new</strong> Vector2D(0.95, -0.15),
<a class="jxr_linenumber" name="L794" href="#L794">794</a>                                                   <strong class="jxr_keyword">new</strong> Vector2D(0.85, -0.05)),
<a class="jxr_linenumber" name="L795" href="#L795">795</a>                                                   b1, b3, <strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L796" href="#L796">796</a>         BSPTree&lt;Euclidean2D&gt; b5 =
<a class="jxr_linenumber" name="L797" href="#L797">797</a>             <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(buildHalfLine(<strong class="jxr_keyword">new</strong> Vector2D(0.85, -0.05),
<a class="jxr_linenumber" name="L798" href="#L798">798</a>                                                    <strong class="jxr_keyword">new</strong> Vector2D(0.85, -0.25),
<a class="jxr_linenumber" name="L799" href="#L799">799</a>                                                    <strong class="jxr_keyword">true</strong>),
<a class="jxr_linenumber" name="L800" href="#L800">800</a>                                                    <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(Boolean.FALSE), b4, <strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L801" href="#L801">801</a>         BSPTree&lt;Euclidean2D&gt; b6 =
<a class="jxr_linenumber" name="L802" href="#L802">802</a>             <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(buildLine(<strong class="jxr_keyword">new</strong> Vector2D(0.0, -1.10),
<a class="jxr_linenumber" name="L803" href="#L803">803</a>                                                <strong class="jxr_keyword">new</strong> Vector2D(1.0, -0.10)),
<a class="jxr_linenumber" name="L804" href="#L804">804</a>                                                <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(Boolean.FALSE), b5, <strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L805" href="#L805">805</a> 
<a class="jxr_linenumber" name="L806" href="#L806">806</a>         PolygonsSet c =
<a class="jxr_linenumber" name="L807" href="#L807">807</a>             (PolygonsSet) <strong class="jxr_keyword">new</strong> RegionFactory&lt;Euclidean2D&gt;().union(<strong class="jxr_keyword">new</strong> PolygonsSet(a9, 1.0e-10),
<a class="jxr_linenumber" name="L808" href="#L808">808</a>                                                                  <strong class="jxr_keyword">new</strong> PolygonsSet(b6, 1.0e-10));
<a class="jxr_linenumber" name="L809" href="#L809">809</a> 
<a class="jxr_linenumber" name="L810" href="#L810">810</a>         checkPoints(Region.Location.INSIDE, c, <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L811" href="#L811">811</a>             <strong class="jxr_keyword">new</strong> Vector2D(0.83, -0.06),
<a class="jxr_linenumber" name="L812" href="#L812">812</a>             <strong class="jxr_keyword">new</strong> Vector2D(0.83, -0.15),
<a class="jxr_linenumber" name="L813" href="#L813">813</a>             <strong class="jxr_keyword">new</strong> Vector2D(0.88, -0.15),
<a class="jxr_linenumber" name="L814" href="#L814">814</a>             <strong class="jxr_keyword">new</strong> Vector2D(0.88, -0.09),
<a class="jxr_linenumber" name="L815" href="#L815">815</a>             <strong class="jxr_keyword">new</strong> Vector2D(0.88, -0.07),
<a class="jxr_linenumber" name="L816" href="#L816">816</a>             <strong class="jxr_keyword">new</strong> Vector2D(0.91, -0.18),
<a class="jxr_linenumber" name="L817" href="#L817">817</a>             <strong class="jxr_keyword">new</strong> Vector2D(0.91, -0.10)
<a class="jxr_linenumber" name="L818" href="#L818">818</a>         });
<a class="jxr_linenumber" name="L819" href="#L819">819</a> 
<a class="jxr_linenumber" name="L820" href="#L820">820</a>         checkPoints(Region.Location.OUTSIDE, c, <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L821" href="#L821">821</a>             <strong class="jxr_keyword">new</strong> Vector2D(0.80, -0.10),
<a class="jxr_linenumber" name="L822" href="#L822">822</a>             <strong class="jxr_keyword">new</strong> Vector2D(0.83, -0.50),
<a class="jxr_linenumber" name="L823" href="#L823">823</a>             <strong class="jxr_keyword">new</strong> Vector2D(0.83, -0.20),
<a class="jxr_linenumber" name="L824" href="#L824">824</a>             <strong class="jxr_keyword">new</strong> Vector2D(0.83, -0.02),
<a class="jxr_linenumber" name="L825" href="#L825">825</a>             <strong class="jxr_keyword">new</strong> Vector2D(0.87, -0.50),
<a class="jxr_linenumber" name="L826" href="#L826">826</a>             <strong class="jxr_keyword">new</strong> Vector2D(0.87, -0.20),
<a class="jxr_linenumber" name="L827" href="#L827">827</a>             <strong class="jxr_keyword">new</strong> Vector2D(0.87, -0.02),
<a class="jxr_linenumber" name="L828" href="#L828">828</a>             <strong class="jxr_keyword">new</strong> Vector2D(0.91, -0.20),
<a class="jxr_linenumber" name="L829" href="#L829">829</a>             <strong class="jxr_keyword">new</strong> Vector2D(0.91, -0.08),
<a class="jxr_linenumber" name="L830" href="#L830">830</a>             <strong class="jxr_keyword">new</strong> Vector2D(0.93, -0.15)
<a class="jxr_linenumber" name="L831" href="#L831">831</a>         });
<a class="jxr_linenumber" name="L832" href="#L832">832</a> 
<a class="jxr_linenumber" name="L833" href="#L833">833</a>         checkVertices(c.getVertices(),
<a class="jxr_linenumber" name="L834" href="#L834">834</a>                       <strong class="jxr_keyword">new</strong> Vector2D[][] {
<a class="jxr_linenumber" name="L835" href="#L835">835</a>             <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L836" href="#L836">836</a>                 <strong class="jxr_keyword">new</strong> Vector2D(0.85, -0.15),
<a class="jxr_linenumber" name="L837" href="#L837">837</a>                 <strong class="jxr_keyword">new</strong> Vector2D(0.90, -0.20),
<a class="jxr_linenumber" name="L838" href="#L838">838</a>                 <strong class="jxr_keyword">new</strong> Vector2D(0.92, -0.18),
<a class="jxr_linenumber" name="L839" href="#L839">839</a>                 <strong class="jxr_keyword">new</strong> Vector2D(0.92, -0.08),
<a class="jxr_linenumber" name="L840" href="#L840">840</a>                 <strong class="jxr_keyword">new</strong> Vector2D(0.90, -0.10),
<a class="jxr_linenumber" name="L841" href="#L841">841</a>                 <strong class="jxr_keyword">new</strong> Vector2D(0.90, -0.05),
<a class="jxr_linenumber" name="L842" href="#L842">842</a>                 <strong class="jxr_keyword">new</strong> Vector2D(0.82, -0.05),
<a class="jxr_linenumber" name="L843" href="#L843">843</a>                 <strong class="jxr_keyword">new</strong> Vector2D(0.82, -0.18),
<a class="jxr_linenumber" name="L844" href="#L844">844</a>             }
<a class="jxr_linenumber" name="L845" href="#L845">845</a>         });
<a class="jxr_linenumber" name="L846" href="#L846">846</a> 
<a class="jxr_linenumber" name="L847" href="#L847">847</a>     }
<a class="jxr_linenumber" name="L848" href="#L848">848</a> 
<a class="jxr_linenumber" name="L849" href="#L849">849</a>     @Test
<a class="jxr_linenumber" name="L850" href="#L850">850</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testBug20041003() {
<a class="jxr_linenumber" name="L851" href="#L851">851</a> 
<a class="jxr_linenumber" name="L852" href="#L852">852</a>         Line[] l = {
<a class="jxr_linenumber" name="L853" href="#L853">853</a>             <strong class="jxr_keyword">new</strong> Line(<strong class="jxr_keyword">new</strong> Vector2D(0.0, 0.625000007541172),
<a class="jxr_linenumber" name="L854" href="#L854">854</a>                      <strong class="jxr_keyword">new</strong> Vector2D(1.0, 0.625000007541172), 1.0e-10),
<a class="jxr_linenumber" name="L855" href="#L855">855</a>             <strong class="jxr_keyword">new</strong> Line(<strong class="jxr_keyword">new</strong> Vector2D(-0.19204433621902645, 0.0),
<a class="jxr_linenumber" name="L856" href="#L856">856</a>                      <strong class="jxr_keyword">new</strong> Vector2D(-0.19204433621902645, 1.0), 1.0e-10),
<a class="jxr_linenumber" name="L857" href="#L857">857</a>             <strong class="jxr_keyword">new</strong> Line(<strong class="jxr_keyword">new</strong> Vector2D(-0.40303524786887,  0.4248364535319128),
<a class="jxr_linenumber" name="L858" href="#L858">858</a>                      <strong class="jxr_keyword">new</strong> Vector2D(-1.12851149797877, -0.2634107480798909), 1.0e-10),
<a class="jxr_linenumber" name="L859" href="#L859">859</a>             <strong class="jxr_keyword">new</strong> Line(<strong class="jxr_keyword">new</strong> Vector2D(0.0, 2.0),
<a class="jxr_linenumber" name="L860" href="#L860">860</a>                      <strong class="jxr_keyword">new</strong> Vector2D(1.0, 2.0), 1.0e-10)
<a class="jxr_linenumber" name="L861" href="#L861">861</a>         };
<a class="jxr_linenumber" name="L862" href="#L862">862</a> 
<a class="jxr_linenumber" name="L863" href="#L863">863</a>         BSPTree&lt;Euclidean2D&gt; node1 =
<a class="jxr_linenumber" name="L864" href="#L864">864</a>             <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(<strong class="jxr_keyword">new</strong> SubLine(l[0],
<a class="jxr_linenumber" name="L865" href="#L865">865</a>                                                  <strong class="jxr_keyword">new</strong> IntervalsSet(intersectionAbscissa(l[0], l[1]),
<a class="jxr_linenumber" name="L866" href="#L866">866</a>                                                                   intersectionAbscissa(l[0], l[2]),
<a class="jxr_linenumber" name="L867" href="#L867">867</a>                                                                   1.0e-10)),
<a class="jxr_linenumber" name="L868" href="#L868">868</a>                                      <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(Boolean.TRUE),
<a class="jxr_linenumber" name="L869" href="#L869">869</a>                                      <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(Boolean.FALSE),
<a class="jxr_linenumber" name="L870" href="#L870">870</a>                                      <strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L871" href="#L871">871</a>         BSPTree&lt;Euclidean2D&gt; node2 =
<a class="jxr_linenumber" name="L872" href="#L872">872</a>             <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(<strong class="jxr_keyword">new</strong> SubLine(l[1],
<a class="jxr_linenumber" name="L873" href="#L873">873</a>                                                  <strong class="jxr_keyword">new</strong> IntervalsSet(intersectionAbscissa(l[1], l[2]),
<a class="jxr_linenumber" name="L874" href="#L874">874</a>                                                                   intersectionAbscissa(l[1], l[3]),
<a class="jxr_linenumber" name="L875" href="#L875">875</a>                                                                   1.0e-10)),
<a class="jxr_linenumber" name="L876" href="#L876">876</a>                                      node1,
<a class="jxr_linenumber" name="L877" href="#L877">877</a>                                      <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(Boolean.FALSE),
<a class="jxr_linenumber" name="L878" href="#L878">878</a>                                      <strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L879" href="#L879">879</a>         BSPTree&lt;Euclidean2D&gt; node3 =
<a class="jxr_linenumber" name="L880" href="#L880">880</a>             <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(<strong class="jxr_keyword">new</strong> SubLine(l[2],
<a class="jxr_linenumber" name="L881" href="#L881">881</a>                                                  <strong class="jxr_keyword">new</strong> IntervalsSet(intersectionAbscissa(l[2], l[3]),
<a class="jxr_linenumber" name="L882" href="#L882">882</a>                                                  Double.POSITIVE_INFINITY, 1.0e-10)),
<a class="jxr_linenumber" name="L883" href="#L883">883</a>                                      node2,
<a class="jxr_linenumber" name="L884" href="#L884">884</a>                                      <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(Boolean.FALSE),
<a class="jxr_linenumber" name="L885" href="#L885">885</a>                                      <strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L886" href="#L886">886</a>         BSPTree&lt;Euclidean2D&gt; node4 =
<a class="jxr_linenumber" name="L887" href="#L887">887</a>             <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(l[3].wholeHyperplane(),
<a class="jxr_linenumber" name="L888" href="#L888">888</a>                                      node3,
<a class="jxr_linenumber" name="L889" href="#L889">889</a>                                      <strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(Boolean.FALSE),
<a class="jxr_linenumber" name="L890" href="#L890">890</a>                                      <strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L891" href="#L891">891</a> 
<a class="jxr_linenumber" name="L892" href="#L892">892</a>         PolygonsSet set = <strong class="jxr_keyword">new</strong> PolygonsSet(node4, 1.0e-10);
<a class="jxr_linenumber" name="L893" href="#L893">893</a>         Assert.assertEquals(0, set.getVertices().length);
<a class="jxr_linenumber" name="L894" href="#L894">894</a> 
<a class="jxr_linenumber" name="L895" href="#L895">895</a>     }
<a class="jxr_linenumber" name="L896" href="#L896">896</a> 
<a class="jxr_linenumber" name="L897" href="#L897">897</a>     @Test
<a class="jxr_linenumber" name="L898" href="#L898">898</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testSqueezedHexa() {
<a class="jxr_linenumber" name="L899" href="#L899">899</a>         PolygonsSet set = <strong class="jxr_keyword">new</strong> PolygonsSet(1.0e-10,
<a class="jxr_linenumber" name="L900" href="#L900">900</a>                                           <strong class="jxr_keyword">new</strong> Vector2D(-6, -4), <strong class="jxr_keyword">new</strong> Vector2D(-8, -8), <strong class="jxr_keyword">new</strong> Vector2D(  8, -8),
<a class="jxr_linenumber" name="L901" href="#L901">901</a>                                           <strong class="jxr_keyword">new</strong> Vector2D( 6, -4), <strong class="jxr_keyword">new</strong> Vector2D(10,  4), <strong class="jxr_keyword">new</strong> Vector2D(-10,  4));
<a class="jxr_linenumber" name="L902" href="#L902">902</a>         Assert.assertEquals(Location.OUTSIDE, set.checkPoint(<strong class="jxr_keyword">new</strong> Vector2D(0, 6)));
<a class="jxr_linenumber" name="L903" href="#L903">903</a>     }
<a class="jxr_linenumber" name="L904" href="#L904">904</a> 
<a class="jxr_linenumber" name="L905" href="#L905">905</a>     @Test
<a class="jxr_linenumber" name="L906" href="#L906">906</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testIssue880Simplified() {
<a class="jxr_linenumber" name="L907" href="#L907">907</a> 
<a class="jxr_linenumber" name="L908" href="#L908">908</a>         Vector2D[] vertices1 = <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L909" href="#L909">909</a>             <strong class="jxr_keyword">new</strong> Vector2D( 90.13595870833188,  38.33604606376991),
<a class="jxr_linenumber" name="L910" href="#L910">910</a>             <strong class="jxr_keyword">new</strong> Vector2D( 90.14047850603913,  38.34600084496253),
<a class="jxr_linenumber" name="L911" href="#L911">911</a>             <strong class="jxr_keyword">new</strong> Vector2D( 90.11045289492762,  38.36801537312368),
<a class="jxr_linenumber" name="L912" href="#L912">912</a>             <strong class="jxr_keyword">new</strong> Vector2D( 90.10871471476526,  38.36878044144294),
<a class="jxr_linenumber" name="L913" href="#L913">913</a>             <strong class="jxr_keyword">new</strong> Vector2D( 90.10424901707671,  38.374300101757),
<a class="jxr_linenumber" name="L914" href="#L914">914</a>             <strong class="jxr_keyword">new</strong> Vector2D( 90.0979455456843,   38.373578376172475),
<a class="jxr_linenumber" name="L915" href="#L915">915</a>             <strong class="jxr_keyword">new</strong> Vector2D( 90.09081227075944,  38.37526295920463),
<a class="jxr_linenumber" name="L916" href="#L916">916</a>             <strong class="jxr_keyword">new</strong> Vector2D( 90.09081378927135,  38.375193883266434)
<a class="jxr_linenumber" name="L917" href="#L917">917</a>         };
<a class="jxr_linenumber" name="L918" href="#L918">918</a>         PolygonsSet set1 = <strong class="jxr_keyword">new</strong> PolygonsSet(1.0e-10, vertices1);
<a class="jxr_linenumber" name="L919" href="#L919">919</a>         Assert.assertEquals(Location.OUTSIDE, set1.checkPoint(<strong class="jxr_keyword">new</strong> Vector2D(90.12,  38.32)));
<a class="jxr_linenumber" name="L920" href="#L920">920</a>         Assert.assertEquals(Location.OUTSIDE, set1.checkPoint(<strong class="jxr_keyword">new</strong> Vector2D(90.135, 38.355)));
<a class="jxr_linenumber" name="L921" href="#L921">921</a> 
<a class="jxr_linenumber" name="L922" href="#L922">922</a>     }
<a class="jxr_linenumber" name="L923" href="#L923">923</a> 
<a class="jxr_linenumber" name="L924" href="#L924">924</a>     @Test
<a class="jxr_linenumber" name="L925" href="#L925">925</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testIssue880Complete() {
<a class="jxr_linenumber" name="L926" href="#L926">926</a>         Vector2D[] vertices1 = <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L927" href="#L927">927</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.08714908223715,  38.370299337260235),
<a class="jxr_linenumber" name="L928" href="#L928">928</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.08709517675004,  38.3702895991413),
<a class="jxr_linenumber" name="L929" href="#L929">929</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.08401538704919,  38.368849330127944),
<a class="jxr_linenumber" name="L930" href="#L930">930</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.08258210430711,  38.367634558585564),
<a class="jxr_linenumber" name="L931" href="#L931">931</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.08251455106665,  38.36763409247078),
<a class="jxr_linenumber" name="L932" href="#L932">932</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.08106599752608,  38.36761621664249),
<a class="jxr_linenumber" name="L933" href="#L933">933</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.08249585300035,  38.36753627557965),
<a class="jxr_linenumber" name="L934" href="#L934">934</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.09075743352184,  38.35914647644972),
<a class="jxr_linenumber" name="L935" href="#L935">935</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.09099945896571,  38.35896264724079),
<a class="jxr_linenumber" name="L936" href="#L936">936</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.09269383800086,  38.34595756121246),
<a class="jxr_linenumber" name="L937" href="#L937">937</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.09638631543191,  38.3457988093121),
<a class="jxr_linenumber" name="L938" href="#L938">938</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.09666417351019,  38.34523360999418),
<a class="jxr_linenumber" name="L939" href="#L939">939</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.1297082145872,  38.337670454923625),
<a class="jxr_linenumber" name="L940" href="#L940">940</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.12971687748956,  38.337669827794684),
<a class="jxr_linenumber" name="L941" href="#L941">941</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.1240820219179,  38.34328502001131),
<a class="jxr_linenumber" name="L942" href="#L942">942</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.13084259656404,  38.34017811765017),
<a class="jxr_linenumber" name="L943" href="#L943">943</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.13378567942857,  38.33860579180606),
<a class="jxr_linenumber" name="L944" href="#L944">944</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.13519557833206,  38.33621054663689),
<a class="jxr_linenumber" name="L945" href="#L945">945</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.13545616732307,  38.33614965452864),
<a class="jxr_linenumber" name="L946" href="#L946">946</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.13553111202748,  38.33613962818305),
<a class="jxr_linenumber" name="L947" href="#L947">947</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.1356903436448,  38.33610227127048),
<a class="jxr_linenumber" name="L948" href="#L948">948</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.13576283227428,  38.33609255422783),
<a class="jxr_linenumber" name="L949" href="#L949">949</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.13595870833188,  38.33604606376991),
<a class="jxr_linenumber" name="L950" href="#L950">950</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.1361556630693,  38.3360024198866),
<a class="jxr_linenumber" name="L951" href="#L951">951</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.13622408795709,  38.335987048115726),
<a class="jxr_linenumber" name="L952" href="#L952">952</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.13696189099994,  38.33581914328681),
<a class="jxr_linenumber" name="L953" href="#L953">953</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.13746655304897,  38.33616706665265),
<a class="jxr_linenumber" name="L954" href="#L954">954</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.13845973716064,  38.33650776167099),
<a class="jxr_linenumber" name="L955" href="#L955">955</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.13950901827667,  38.3368469456463),
<a class="jxr_linenumber" name="L956" href="#L956">956</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.14393814424852,  38.337591835857495),
<a class="jxr_linenumber" name="L957" href="#L957">957</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.14483839716831,  38.337076122362475),
<a class="jxr_linenumber" name="L958" href="#L958">958</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.14565474433601,  38.33769000964429),
<a class="jxr_linenumber" name="L959" href="#L959">959</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.14569421179482,  38.3377117256905),
<a class="jxr_linenumber" name="L960" href="#L960">960</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.14577067124333,  38.33770883625908),
<a class="jxr_linenumber" name="L961" href="#L961">961</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.14600350631684,  38.337714326520995),
<a class="jxr_linenumber" name="L962" href="#L962">962</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.14600355139731,  38.33771435193319),
<a class="jxr_linenumber" name="L963" href="#L963">963</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.14600369112401,  38.33771443882085),
<a class="jxr_linenumber" name="L964" href="#L964">964</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.14600382486884,  38.33771453466096),
<a class="jxr_linenumber" name="L965" href="#L965">965</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.14600395205912,  38.33771463904344),
<a class="jxr_linenumber" name="L966" href="#L966">966</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.14600407214999,  38.337714751520764),
<a class="jxr_linenumber" name="L967" href="#L967">967</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.14600418462749,  38.337714871611695),
<a class="jxr_linenumber" name="L968" href="#L968">968</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.14600422249327,  38.337714915811034),
<a class="jxr_linenumber" name="L969" href="#L969">969</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.14867838361471,  38.34113888210675),
<a class="jxr_linenumber" name="L970" href="#L970">970</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.14923750157374,  38.341582537502575),
<a class="jxr_linenumber" name="L971" href="#L971">971</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.14877083250991,  38.34160685841391),
<a class="jxr_linenumber" name="L972" href="#L972">972</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.14816667319519,  38.34244232585684),
<a class="jxr_linenumber" name="L973" href="#L973">973</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.14797696744586,  38.34248455284745),
<a class="jxr_linenumber" name="L974" href="#L974">974</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.14484318014337,  38.34385573215269),
<a class="jxr_linenumber" name="L975" href="#L975">975</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.14477919958296,  38.3453797747614),
<a class="jxr_linenumber" name="L976" href="#L976">976</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.14202393306448,  38.34464324839456),
<a class="jxr_linenumber" name="L977" href="#L977">977</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.14198920640195,  38.344651155237216),
<a class="jxr_linenumber" name="L978" href="#L978">978</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.14155207025175,  38.34486424263724),
<a class="jxr_linenumber" name="L979" href="#L979">979</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.1415196143314,  38.344871730519),
<a class="jxr_linenumber" name="L980" href="#L980">980</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.14128611910814,  38.34500196593859),
<a class="jxr_linenumber" name="L981" href="#L981">981</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.14047850603913,  38.34600084496253),
<a class="jxr_linenumber" name="L982" href="#L982">982</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.14045907000337,  38.34601860032171),
<a class="jxr_linenumber" name="L983" href="#L983">983</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.14039496493928,  38.346223030432384),
<a class="jxr_linenumber" name="L984" href="#L984">984</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.14037626063737,  38.346240203360026),
<a class="jxr_linenumber" name="L985" href="#L985">985</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.14030005823724,  38.34646920000705),
<a class="jxr_linenumber" name="L986" href="#L986">986</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.13799164754806,  38.34903093011013),
<a class="jxr_linenumber" name="L987" href="#L987">987</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.11045289492762,  38.36801537312368),
<a class="jxr_linenumber" name="L988" href="#L988">988</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.10871471476526,  38.36878044144294),
<a class="jxr_linenumber" name="L989" href="#L989">989</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.10424901707671,  38.374300101757),
<a class="jxr_linenumber" name="L990" href="#L990">990</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.10263482039932,  38.37310041316073),
<a class="jxr_linenumber" name="L991" href="#L991">991</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.09834601753448,  38.373615053823414),
<a class="jxr_linenumber" name="L992" href="#L992">992</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.0979455456843,  38.373578376172475),
<a class="jxr_linenumber" name="L993" href="#L993">993</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.09086514328669,  38.37527884194668),
<a class="jxr_linenumber" name="L994" href="#L994">994</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.09084931407364,  38.37590801712463),
<a class="jxr_linenumber" name="L995" href="#L995">995</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.09081227075944,  38.37526295920463),
<a class="jxr_linenumber" name="L996" href="#L996">996</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.09081378927135,  38.375193883266434)
<a class="jxr_linenumber" name="L997" href="#L997">997</a>         };
<a class="jxr_linenumber" name="L998" href="#L998">998</a>         PolygonsSet set1 = <strong class="jxr_keyword">new</strong> PolygonsSet(1.0e-8, vertices1);
<a class="jxr_linenumber" name="L999" href="#L999">999</a>         Assert.assertEquals(Location.OUTSIDE, set1.checkPoint(<strong class="jxr_keyword">new</strong> Vector2D(90.0905,  38.3755)));
<a class="jxr_linenumber" name="L1000" href="#L1000">1000</a>         Assert.assertEquals(Location.INSIDE,  set1.checkPoint(<strong class="jxr_keyword">new</strong> Vector2D(90.09084, 38.3755)));
<a class="jxr_linenumber" name="L1001" href="#L1001">1001</a>         Assert.assertEquals(Location.OUTSIDE, set1.checkPoint(<strong class="jxr_keyword">new</strong> Vector2D(90.0913,  38.3755)));
<a class="jxr_linenumber" name="L1002" href="#L1002">1002</a>         Assert.assertEquals(Location.INSIDE,  set1.checkPoint(<strong class="jxr_keyword">new</strong> Vector2D(90.1042,  38.3739)));
<a class="jxr_linenumber" name="L1003" href="#L1003">1003</a>         Assert.assertEquals(Location.INSIDE,  set1.checkPoint(<strong class="jxr_keyword">new</strong> Vector2D(90.1111,  38.3673)));
<a class="jxr_linenumber" name="L1004" href="#L1004">1004</a>         Assert.assertEquals(Location.OUTSIDE, set1.checkPoint(<strong class="jxr_keyword">new</strong> Vector2D(90.0959,  38.3457)));
<a class="jxr_linenumber" name="L1005" href="#L1005">1005</a> 
<a class="jxr_linenumber" name="L1006" href="#L1006">1006</a>         Vector2D[] vertices2 = <strong class="jxr_keyword">new</strong> Vector2D[] {
<a class="jxr_linenumber" name="L1007" href="#L1007">1007</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.13067558880044,  38.36977255037573),
<a class="jxr_linenumber" name="L1008" href="#L1008">1008</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.12907570488,  38.36817308242706),
<a class="jxr_linenumber" name="L1009" href="#L1009">1009</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.1342774136516,  38.356886880294724),
<a class="jxr_linenumber" name="L1010" href="#L1010">1010</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.13090330629757,  38.34664392676211),
<a class="jxr_linenumber" name="L1011" href="#L1011">1011</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.13078571364593,  38.344904617518466),
<a class="jxr_linenumber" name="L1012" href="#L1012">1012</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.1315602208914,  38.3447185040846),
<a class="jxr_linenumber" name="L1013" href="#L1013">1013</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.1316336226821,  38.34470643148342),
<a class="jxr_linenumber" name="L1014" href="#L1014">1014</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.134020944832,  38.340936644972885),
<a class="jxr_linenumber" name="L1015" href="#L1015">1015</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.13912536387306,  38.335497255122334),
<a class="jxr_linenumber" name="L1016" href="#L1016">1016</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.1396178806582,  38.334878075552126),
<a class="jxr_linenumber" name="L1017" href="#L1017">1017</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.14083049696671,  38.33316530644106),
<a class="jxr_linenumber" name="L1018" href="#L1018">1018</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.14145252901329,  38.33152722916191),
<a class="jxr_linenumber" name="L1019" href="#L1019">1019</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.1404779335565,  38.32863516047786),
<a class="jxr_linenumber" name="L1020" href="#L1020">1020</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.14282712131586,  38.327504432532066),
<a class="jxr_linenumber" name="L1021" href="#L1021">1021</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.14616669875488,  38.3237354115015),
<a class="jxr_linenumber" name="L1022" href="#L1022">1022</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.14860976050608,  38.315714862457924),
<a class="jxr_linenumber" name="L1023" href="#L1023">1023</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.14999277782437,  38.3164932507504),
<a class="jxr_linenumber" name="L1024" href="#L1024">1024</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.15005207194997,  38.316534677663356),
<a class="jxr_linenumber" name="L1025" href="#L1025">1025</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.15508513859612,  38.31878731691609),
<a class="jxr_linenumber" name="L1026" href="#L1026">1026</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.15919938519221,  38.31852743183782),
<a class="jxr_linenumber" name="L1027" href="#L1027">1027</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.16093758658837,  38.31880662005153),
<a class="jxr_linenumber" name="L1028" href="#L1028">1028</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.16099420184912,  38.318825953291594),
<a class="jxr_linenumber" name="L1029" href="#L1029">1029</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.1665411125756,  38.31859497874757),
<a class="jxr_linenumber" name="L1030" href="#L1030">1030</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.16999653861313,  38.32505772048029),
<a class="jxr_linenumber" name="L1031" href="#L1031">1031</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.17475243391698,  38.32594398441148),
<a class="jxr_linenumber" name="L1032" href="#L1032">1032</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.17940844844992,  38.327427213761325),
<a class="jxr_linenumber" name="L1033" href="#L1033">1033</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.20951909541378,  38.330616833491774),
<a class="jxr_linenumber" name="L1034" href="#L1034">1034</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.2155400467941,  38.331746223670336),
<a class="jxr_linenumber" name="L1035" href="#L1035">1035</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.21559881391778,  38.33175551425302),
<a class="jxr_linenumber" name="L1036" href="#L1036">1036</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.21916646426041,  38.332584299620805),
<a class="jxr_linenumber" name="L1037" href="#L1037">1037</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.23863749852285,  38.34778978875795),
<a class="jxr_linenumber" name="L1038" href="#L1038">1038</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.25459855175802,  38.357790570608984),
<a class="jxr_linenumber" name="L1039" href="#L1039">1039</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.25964298227257,  38.356918010203174),
<a class="jxr_linenumber" name="L1040" href="#L1040">1040</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.26024593994703,  38.361692743151366),
<a class="jxr_linenumber" name="L1041" href="#L1041">1041</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.26146187570015,  38.36311080550837),
<a class="jxr_linenumber" name="L1042" href="#L1042">1042</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.26614159359622,  38.36510808579902),
<a class="jxr_linenumber" name="L1043" href="#L1043">1043</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.26621342936448,  38.36507942500333),
<a class="jxr_linenumber" name="L1044" href="#L1044">1044</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.26652190211962,  38.36494042196722),
<a class="jxr_linenumber" name="L1045" href="#L1045">1045</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.26621240678867,  38.365113172030874),
<a class="jxr_linenumber" name="L1046" href="#L1046">1046</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.26614057102057,  38.365141832826794),
<a class="jxr_linenumber" name="L1047" href="#L1047">1047</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.26380080055299,  38.3660381760273),
<a class="jxr_linenumber" name="L1048" href="#L1048">1048</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.26315345241,  38.36670658276421),
<a class="jxr_linenumber" name="L1049" href="#L1049">1049</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.26251574942881,  38.367490323488084),
<a class="jxr_linenumber" name="L1050" href="#L1050">1050</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.26247873448426,  38.36755266444749),
<a class="jxr_linenumber" name="L1051" href="#L1051">1051</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.26234628016698,  38.36787989125406),
<a class="jxr_linenumber" name="L1052" href="#L1052">1052</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.26214559424784,  38.36945909356126),
<a class="jxr_linenumber" name="L1053" href="#L1053">1053</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.25861728442555,  38.37200753430875),
<a class="jxr_linenumber" name="L1054" href="#L1054">1054</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.23905557537864,  38.375405314295904),
<a class="jxr_linenumber" name="L1055" href="#L1055">1055</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.22517251874075,  38.38984691662256),
<a class="jxr_linenumber" name="L1056" href="#L1056">1056</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.22549955153215,  38.3911564273979),
<a class="jxr_linenumber" name="L1057" href="#L1057">1057</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.22434386063355,  38.391476432092134),
<a class="jxr_linenumber" name="L1058" href="#L1058">1058</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.22147729457276,  38.39134652252034),
<a class="jxr_linenumber" name="L1059" href="#L1059">1059</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.22142070120117,  38.391349167741964),
<a class="jxr_linenumber" name="L1060" href="#L1060">1060</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.20665060751588,  38.39475580900313),
<a class="jxr_linenumber" name="L1061" href="#L1061">1061</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.20042268367109,  38.39842558622888),
<a class="jxr_linenumber" name="L1062" href="#L1062">1062</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.17423771242085,  38.402727751805344),
<a class="jxr_linenumber" name="L1063" href="#L1063">1063</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.16756796257476,  38.40913898597597),
<a class="jxr_linenumber" name="L1064" href="#L1064">1064</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.16728283954308,  38.411255399912875),
<a class="jxr_linenumber" name="L1065" href="#L1065">1065</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.16703538220418,  38.41136059866693),
<a class="jxr_linenumber" name="L1066" href="#L1066">1066</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.16725865657685,  38.41013618805954),
<a class="jxr_linenumber" name="L1067" href="#L1067">1067</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.16746107640665,  38.40902614307544),
<a class="jxr_linenumber" name="L1068" href="#L1068">1068</a>                 <strong class="jxr_keyword">new</strong> Vector2D( 90.16122795307462,  38.39773101873203)
<a class="jxr_linenumber" name="L1069" href="#L1069">1069</a>         };
<a class="jxr_linenumber" name="L1070" href="#L1070">1070</a>         PolygonsSet set2 = <strong class="jxr_keyword">new</strong> PolygonsSet(1.0e-8, vertices2);
<a class="jxr_linenumber" name="L1071" href="#L1071">1071</a>         PolygonsSet set  = (PolygonsSet) <strong class="jxr_keyword">new</strong>
<a class="jxr_linenumber" name="L1072" href="#L1072">1072</a>                 RegionFactory&lt;Euclidean2D&gt;().difference(set1.copySelf(),
<a class="jxr_linenumber" name="L1073" href="#L1073">1073</a>                                                         set2.copySelf());
<a class="jxr_linenumber" name="L1074" href="#L1074">1074</a> 
<a class="jxr_linenumber" name="L1075" href="#L1075">1075</a>         Vector2D[][] vertices = set.getVertices();
<a class="jxr_linenumber" name="L1076" href="#L1076">1076</a>         Assert.assertTrue(vertices[0][0] != <strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L1077" href="#L1077">1077</a>         Assert.assertEquals(1, vertices.length);
<a class="jxr_linenumber" name="L1078" href="#L1078">1078</a>     }
<a class="jxr_linenumber" name="L1079" href="#L1079">1079</a> 
<a class="jxr_linenumber" name="L1080" href="#L1080">1080</a>     @Test
<a class="jxr_linenumber" name="L1081" href="#L1081">1081</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testTooThinBox() {
<a class="jxr_linenumber" name="L1082" href="#L1082">1082</a>         Assert.assertEquals(0.0,
<a class="jxr_linenumber" name="L1083" href="#L1083">1083</a>                             <strong class="jxr_keyword">new</strong> PolygonsSet(0.0, 0.0, 0.0, 10.3206397147574, 1.0e-10).getSize(),
<a class="jxr_linenumber" name="L1084" href="#L1084">1084</a>                             1.0e-10);
<a class="jxr_linenumber" name="L1085" href="#L1085">1085</a>     }
<a class="jxr_linenumber" name="L1086" href="#L1086">1086</a> 
<a class="jxr_linenumber" name="L1087" href="#L1087">1087</a>     @Test
<a class="jxr_linenumber" name="L1088" href="#L1088">1088</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testWrongUsage() {
<a class="jxr_linenumber" name="L1089" href="#L1089">1089</a>         <em class="jxr_comment">// the following is a wrong usage of the constructor.</em>
<a class="jxr_linenumber" name="L1090" href="#L1090">1090</a>         <em class="jxr_comment">// as explained in the javadoc, the failure is NOT detected at construction</em>
<a class="jxr_linenumber" name="L1091" href="#L1091">1091</a>         <em class="jxr_comment">// time but occurs later on</em>
<a class="jxr_linenumber" name="L1092" href="#L1092">1092</a>         PolygonsSet ps = <strong class="jxr_keyword">new</strong> PolygonsSet(<strong class="jxr_keyword">new</strong> BSPTree&lt;Euclidean2D&gt;(), 1.0e-10);
<a class="jxr_linenumber" name="L1093" href="#L1093">1093</a>         Assert.assertNotNull(ps);
<a class="jxr_linenumber" name="L1094" href="#L1094">1094</a>         <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L1095" href="#L1095">1095</a>             ps.getSize();
<a class="jxr_linenumber" name="L1096" href="#L1096">1096</a>             Assert.fail(<span class="jxr_string">"an exception should have been thrown"</span>);
<a class="jxr_linenumber" name="L1097" href="#L1097">1097</a>         } <strong class="jxr_keyword">catch</strong> (NullPointerException npe) {
<a class="jxr_linenumber" name="L1098" href="#L1098">1098</a>             <em class="jxr_comment">// this is expected</em>
<a class="jxr_linenumber" name="L1099" href="#L1099">1099</a>         }
<a class="jxr_linenumber" name="L1100" href="#L1100">1100</a>     }
<a class="jxr_linenumber" name="L1101" href="#L1101">1101</a> 
<a class="jxr_linenumber" name="L1102" href="#L1102">1102</a>     @Test
<a class="jxr_linenumber" name="L1103" href="#L1103">1103</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testIssue1162() {
<a class="jxr_linenumber" name="L1104" href="#L1104">1104</a>         PolygonsSet p = <strong class="jxr_keyword">new</strong> PolygonsSet(1.0e-10,
<a class="jxr_linenumber" name="L1105" href="#L1105">1105</a>                                                 <strong class="jxr_keyword">new</strong> Vector2D(4.267199999996532, -11.928637756014894),
<a class="jxr_linenumber" name="L1106" href="#L1106">1106</a>                                                 <strong class="jxr_keyword">new</strong> Vector2D(4.267200000026445, -14.12360595809307),
<a class="jxr_linenumber" name="L1107" href="#L1107">1107</a>                                                 <strong class="jxr_keyword">new</strong> Vector2D(9.144000000273694, -14.12360595809307),
<a class="jxr_linenumber" name="L1108" href="#L1108">1108</a>                                                 <strong class="jxr_keyword">new</strong> Vector2D(9.144000000233383, -11.928637756020067));
<a class="jxr_linenumber" name="L1109" href="#L1109">1109</a> 
<a class="jxr_linenumber" name="L1110" href="#L1110">1110</a>         PolygonsSet w = <strong class="jxr_keyword">new</strong> PolygonsSet(1.0e-10,
<a class="jxr_linenumber" name="L1111" href="#L1111">1111</a>                                                 <strong class="jxr_keyword">new</strong> Vector2D(2.56735636510452512E-9, -11.933116461089332),
<a class="jxr_linenumber" name="L1112" href="#L1112">1112</a>                                                 <strong class="jxr_keyword">new</strong> Vector2D(2.56735636510452512E-9, -12.393225665247766),
<a class="jxr_linenumber" name="L1113" href="#L1113">1113</a>                                                 <strong class="jxr_keyword">new</strong> Vector2D(2.56735636510452512E-9, -27.785625665247778),
<a class="jxr_linenumber" name="L1114" href="#L1114">1114</a>                                                 <strong class="jxr_keyword">new</strong> Vector2D(4.267200000030211,      -27.785625665247778),
<a class="jxr_linenumber" name="L1115" href="#L1115">1115</a>                                                 <strong class="jxr_keyword">new</strong> Vector2D(4.267200000030211,      -11.933116461089332));
<a class="jxr_linenumber" name="L1116" href="#L1116">1116</a> 
<a class="jxr_linenumber" name="L1117" href="#L1117">1117</a>         Assert.assertFalse(p.contains(w));
<a class="jxr_linenumber" name="L1118" href="#L1118">1118</a> 
<a class="jxr_linenumber" name="L1119" href="#L1119">1119</a>     }
<a class="jxr_linenumber" name="L1120" href="#L1120">1120</a> 
<a class="jxr_linenumber" name="L1121" href="#L1121">1121</a>     @Test
<a class="jxr_linenumber" name="L1122" href="#L1122">1122</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testThinRectangle() {
<a class="jxr_linenumber" name="L1123" href="#L1123">1123</a> 
<a class="jxr_linenumber" name="L1124" href="#L1124">1124</a>         RegionFactory&lt;Euclidean2D&gt; factory = <strong class="jxr_keyword">new</strong> RegionFactory&lt;Euclidean2D&gt;();
<a class="jxr_linenumber" name="L1125" href="#L1125">1125</a>         Vector2D pA = <strong class="jxr_keyword">new</strong> Vector2D(0.0,        1.0);
<a class="jxr_linenumber" name="L1126" href="#L1126">1126</a>         Vector2D pB = <strong class="jxr_keyword">new</strong> Vector2D(0.0,        0.0);
<a class="jxr_linenumber" name="L1127" href="#L1127">1127</a>         Vector2D pC = <strong class="jxr_keyword">new</strong> Vector2D(1.0 / 64.0, 0.0);
<a class="jxr_linenumber" name="L1128" href="#L1128">1128</a>         Vector2D pD = <strong class="jxr_keyword">new</strong> Vector2D(1.0 / 64.0, 1.0);
<a class="jxr_linenumber" name="L1129" href="#L1129">1129</a> 
<a class="jxr_linenumber" name="L1130" href="#L1130">1130</a>         <em class="jxr_comment">// if tolerance is smaller than rectangle width, the rectangle is computed accurately</em>
<a class="jxr_linenumber" name="L1131" href="#L1131">1131</a>         Hyperplane&lt;Euclidean2D&gt;[] h1 = <strong class="jxr_keyword">new</strong> Line[] {
<a class="jxr_linenumber" name="L1132" href="#L1132">1132</a>             <strong class="jxr_keyword">new</strong> Line(pA, pB, 1.0 / 256),
<a class="jxr_linenumber" name="L1133" href="#L1133">1133</a>             <strong class="jxr_keyword">new</strong> Line(pB, pC, 1.0 / 256),
<a class="jxr_linenumber" name="L1134" href="#L1134">1134</a>             <strong class="jxr_keyword">new</strong> Line(pC, pD, 1.0 / 256),
<a class="jxr_linenumber" name="L1135" href="#L1135">1135</a>             <strong class="jxr_keyword">new</strong> Line(pD, pA, 1.0 / 256)
<a class="jxr_linenumber" name="L1136" href="#L1136">1136</a>         };
<a class="jxr_linenumber" name="L1137" href="#L1137">1137</a>         Region&lt;Euclidean2D&gt; accuratePolygon = factory.buildConvex(h1);
<a class="jxr_linenumber" name="L1138" href="#L1138">1138</a>         Assert.assertEquals(1.0 / 64.0, accuratePolygon.getSize(), 1.0e-10);
<a class="jxr_linenumber" name="L1139" href="#L1139">1139</a>         Assert.assertTrue(Double.isInfinite(<strong class="jxr_keyword">new</strong> RegionFactory&lt;Euclidean2D&gt;().getComplement(accuratePolygon).getSize()));
<a class="jxr_linenumber" name="L1140" href="#L1140">1140</a>         Assert.assertEquals(2 * (1.0 + 1.0 / 64.0), accuratePolygon.getBoundarySize(), 1.0e-10);
<a class="jxr_linenumber" name="L1141" href="#L1141">1141</a> 
<a class="jxr_linenumber" name="L1142" href="#L1142">1142</a>         <em class="jxr_comment">// if tolerance is larger than rectangle width, the rectangle degenerates</em>
<a class="jxr_linenumber" name="L1143" href="#L1143">1143</a>         <em class="jxr_comment">// as of 3.3, its two long edges cannot be distinguished anymore and this part of the test did fail</em>
<a class="jxr_linenumber" name="L1144" href="#L1144">1144</a>         <em class="jxr_comment">// this has been fixed in 3.4 (issue MATH-1174)</em>
<a class="jxr_linenumber" name="L1145" href="#L1145">1145</a>         Hyperplane&lt;Euclidean2D&gt;[] h2 = <strong class="jxr_keyword">new</strong> Line[] {
<a class="jxr_linenumber" name="L1146" href="#L1146">1146</a>             <strong class="jxr_keyword">new</strong> Line(pA, pB, 1.0 / 16),
<a class="jxr_linenumber" name="L1147" href="#L1147">1147</a>             <strong class="jxr_keyword">new</strong> Line(pB, pC, 1.0 / 16),
<a class="jxr_linenumber" name="L1148" href="#L1148">1148</a>             <strong class="jxr_keyword">new</strong> Line(pC, pD, 1.0 / 16),
<a class="jxr_linenumber" name="L1149" href="#L1149">1149</a>             <strong class="jxr_keyword">new</strong> Line(pD, pA, 1.0 / 16)
<a class="jxr_linenumber" name="L1150" href="#L1150">1150</a>         };
<a class="jxr_linenumber" name="L1151" href="#L1151">1151</a>         Region&lt;Euclidean2D&gt; degeneratedPolygon = factory.buildConvex(h2);
<a class="jxr_linenumber" name="L1152" href="#L1152">1152</a>         Assert.assertEquals(0.0, degeneratedPolygon.getSize(), 1.0e-10);
<a class="jxr_linenumber" name="L1153" href="#L1153">1153</a>         Assert.assertTrue(degeneratedPolygon.isEmpty());
<a class="jxr_linenumber" name="L1154" href="#L1154">1154</a> 
<a class="jxr_linenumber" name="L1155" href="#L1155">1155</a>     }
<a class="jxr_linenumber" name="L1156" href="#L1156">1156</a> 
<a class="jxr_linenumber" name="L1157" href="#L1157">1157</a>     @SuppressWarnings(<span class="jxr_string">"unchecked"</span>)
<a class="jxr_linenumber" name="L1158" href="#L1158">1158</a>     @Test(expected=MathIllegalArgumentException.<strong class="jxr_keyword">class</strong>)
<a class="jxr_linenumber" name="L1159" href="#L1159">1159</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testInconsistentHyperplanes() {
<a class="jxr_linenumber" name="L1160" href="#L1160">1160</a>         <strong class="jxr_keyword">double</strong> tolerance = 1.0e-10;
<a class="jxr_linenumber" name="L1161" href="#L1161">1161</a>         <strong class="jxr_keyword">new</strong> RegionFactory&lt;Euclidean2D&gt;().buildConvex(<strong class="jxr_keyword">new</strong> Line(<strong class="jxr_keyword">new</strong> Vector2D(0, 0), <strong class="jxr_keyword">new</strong> Vector2D(0, 1), tolerance),
<a class="jxr_linenumber" name="L1162" href="#L1162">1162</a>                                                      <strong class="jxr_keyword">new</strong> Line(<strong class="jxr_keyword">new</strong> Vector2D(1, 1), <strong class="jxr_keyword">new</strong> Vector2D(1, 0), tolerance));
<a class="jxr_linenumber" name="L1163" href="#L1163">1163</a>     }
<a class="jxr_linenumber" name="L1164" href="#L1164">1164</a> 
<a class="jxr_linenumber" name="L1165" href="#L1165">1165</a>     @Test
<a class="jxr_linenumber" name="L1166" href="#L1166">1166</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testBoundarySimplification() {
<a class="jxr_linenumber" name="L1167" href="#L1167">1167</a> 
<a class="jxr_linenumber" name="L1168" href="#L1168">1168</a>         <em class="jxr_comment">// a simple square will result in a 4 cuts and 5 leafs tree</em>
<a class="jxr_linenumber" name="L1169" href="#L1169">1169</a>         PolygonsSet square = <strong class="jxr_keyword">new</strong> PolygonsSet(1.0e-10,
<a class="jxr_linenumber" name="L1170" href="#L1170">1170</a>                                              <strong class="jxr_keyword">new</strong> Vector2D(0, 0),
<a class="jxr_linenumber" name="L1171" href="#L1171">1171</a>                                              <strong class="jxr_keyword">new</strong> Vector2D(1, 0),
<a class="jxr_linenumber" name="L1172" href="#L1172">1172</a>                                              <strong class="jxr_keyword">new</strong> Vector2D(1, 1),
<a class="jxr_linenumber" name="L1173" href="#L1173">1173</a>                                              <strong class="jxr_keyword">new</strong> Vector2D(0, 1));
<a class="jxr_linenumber" name="L1174" href="#L1174">1174</a>         Vector2D[][] squareBoundary = square.getVertices();
<a class="jxr_linenumber" name="L1175" href="#L1175">1175</a>         Assert.assertEquals(1, squareBoundary.length);
<a class="jxr_linenumber" name="L1176" href="#L1176">1176</a>         Assert.assertEquals(4, squareBoundary[0].length);
<a class="jxr_linenumber" name="L1177" href="#L1177">1177</a>         <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.html">Counter</a> squareCount = <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.html">Counter</a>();
<a class="jxr_linenumber" name="L1178" href="#L1178">1178</a>         squareCount.count(square);
<a class="jxr_linenumber" name="L1179" href="#L1179">1179</a>         Assert.assertEquals(4, squareCount.getInternalNodes());
<a class="jxr_linenumber" name="L1180" href="#L1180">1180</a>         Assert.assertEquals(5, squareCount.getLeafNodes());
<a class="jxr_linenumber" name="L1181" href="#L1181">1181</a> 
<a class="jxr_linenumber" name="L1182" href="#L1182">1182</a>         <em class="jxr_comment">// splitting the square in two halves increases the BSP tree</em>
<a class="jxr_linenumber" name="L1183" href="#L1183">1183</a>         <em class="jxr_comment">// with 3 more cuts and 3 more leaf nodes</em>
<a class="jxr_linenumber" name="L1184" href="#L1184">1184</a>         SubLine cut = <strong class="jxr_keyword">new</strong> Line(<strong class="jxr_keyword">new</strong> Vector2D(0.5, 0.5), 0.0, square.getTolerance()).wholeHyperplane();
<a class="jxr_linenumber" name="L1185" href="#L1185">1185</a>         PolygonsSet splitSquare = <strong class="jxr_keyword">new</strong> PolygonsSet(square.getTree(false).split(cut),
<a class="jxr_linenumber" name="L1186" href="#L1186">1186</a>                                                   square.getTolerance());
<a class="jxr_linenumber" name="L1187" href="#L1187">1187</a>         <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.html">Counter</a> splitSquareCount = <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.html">Counter</a>();
<a class="jxr_linenumber" name="L1188" href="#L1188">1188</a>         splitSquareCount.count(splitSquare);
<a class="jxr_linenumber" name="L1189" href="#L1189">1189</a>         Assert.assertEquals(squareCount.getInternalNodes() + 3, splitSquareCount.getInternalNodes());
<a class="jxr_linenumber" name="L1190" href="#L1190">1190</a>         Assert.assertEquals(squareCount.getLeafNodes()     + 3, splitSquareCount.getLeafNodes());
<a class="jxr_linenumber" name="L1191" href="#L1191">1191</a> 
<a class="jxr_linenumber" name="L1192" href="#L1192">1192</a>         <em class="jxr_comment">// the number of vertices should not change, as the intermediate vertices</em>
<a class="jxr_linenumber" name="L1193" href="#L1193">1193</a>         <em class="jxr_comment">// at (0.0, 0.5) and (1.0, 0.5) induced by the top level horizontal split</em>
<a class="jxr_linenumber" name="L1194" href="#L1194">1194</a>         <em class="jxr_comment">// should be removed during the boundary extraction process</em>
<a class="jxr_linenumber" name="L1195" href="#L1195">1195</a>         Vector2D[][] splitBoundary = splitSquare.getVertices();
<a class="jxr_linenumber" name="L1196" href="#L1196">1196</a>         Assert.assertEquals(1, splitBoundary.length);
<a class="jxr_linenumber" name="L1197" href="#L1197">1197</a>         Assert.assertEquals(4, splitBoundary[0].length);
<a class="jxr_linenumber" name="L1198" href="#L1198">1198</a> 
<a class="jxr_linenumber" name="L1199" href="#L1199">1199</a>     }
<a class="jxr_linenumber" name="L1200" href="#L1200">1200</a> 
<a class="jxr_linenumber" name="L1201" href="#L1201">1201</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.html">Counter</a> {
<a class="jxr_linenumber" name="L1202" href="#L1202">1202</a> 
<a class="jxr_linenumber" name="L1203" href="#L1203">1203</a>         <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">int</strong> internalNodes;
<a class="jxr_linenumber" name="L1204" href="#L1204">1204</a>         <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">int</strong> leafNodes;
<a class="jxr_linenumber" name="L1205" href="#L1205">1205</a> 
<a class="jxr_linenumber" name="L1206" href="#L1206">1206</a>         <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> count(PolygonsSet polygonsSet) {
<a class="jxr_linenumber" name="L1207" href="#L1207">1207</a>             leafNodes     = 0;
<a class="jxr_linenumber" name="L1208" href="#L1208">1208</a>             internalNodes = 0;
<a class="jxr_linenumber" name="L1209" href="#L1209">1209</a>             polygonsSet.getTree(false).visit(<strong class="jxr_keyword">new</strong> BSPTreeVisitor&lt;Euclidean2D&gt;() {
<a class="jxr_linenumber" name="L1210" href="#L1210">1210</a>                 <strong class="jxr_keyword">public</strong> Order visitOrder(BSPTree&lt;Euclidean2D&gt; node) {
<a class="jxr_linenumber" name="L1211" href="#L1211">1211</a>                     <strong class="jxr_keyword">return</strong> Order.SUB_PLUS_MINUS;
<a class="jxr_linenumber" name="L1212" href="#L1212">1212</a>                 }
<a class="jxr_linenumber" name="L1213" href="#L1213">1213</a>                 <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> visitInternalNode(BSPTree&lt;Euclidean2D&gt; node) {
<a class="jxr_linenumber" name="L1214" href="#L1214">1214</a>                     ++internalNodes;
<a class="jxr_linenumber" name="L1215" href="#L1215">1215</a>                 }
<a class="jxr_linenumber" name="L1216" href="#L1216">1216</a>                 <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> visitLeafNode(BSPTree&lt;Euclidean2D&gt; node) {
<a class="jxr_linenumber" name="L1217" href="#L1217">1217</a>                     ++leafNodes;
<a class="jxr_linenumber" name="L1218" href="#L1218">1218</a>                 }
<a class="jxr_linenumber" name="L1219" href="#L1219">1219</a> 
<a class="jxr_linenumber" name="L1220" href="#L1220">1220</a>             });
<a class="jxr_linenumber" name="L1221" href="#L1221">1221</a>         }
<a class="jxr_linenumber" name="L1222" href="#L1222">1222</a> 
<a class="jxr_linenumber" name="L1223" href="#L1223">1223</a>         <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">int</strong> getInternalNodes() {
<a class="jxr_linenumber" name="L1224" href="#L1224">1224</a>             <strong class="jxr_keyword">return</strong> internalNodes;
<a class="jxr_linenumber" name="L1225" href="#L1225">1225</a>         }
<a class="jxr_linenumber" name="L1226" href="#L1226">1226</a> 
<a class="jxr_linenumber" name="L1227" href="#L1227">1227</a>         <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">int</strong> getLeafNodes() {
<a class="jxr_linenumber" name="L1228" href="#L1228">1228</a>             <strong class="jxr_keyword">return</strong> leafNodes;
<a class="jxr_linenumber" name="L1229" href="#L1229">1229</a>         }
<a class="jxr_linenumber" name="L1230" href="#L1230">1230</a> 
<a class="jxr_linenumber" name="L1231" href="#L1231">1231</a>     }
<a class="jxr_linenumber" name="L1232" href="#L1232">1232</a> 
<a class="jxr_linenumber" name="L1233" href="#L1233">1233</a>     <strong class="jxr_keyword">private</strong> PolygonsSet buildSet(Vector2D[][] vertices) {
<a class="jxr_linenumber" name="L1234" href="#L1234">1234</a>         ArrayList&lt;SubHyperplane&lt;Euclidean2D&gt;&gt; edges = <strong class="jxr_keyword">new</strong> ArrayList&lt;SubHyperplane&lt;Euclidean2D&gt;&gt;();
<a class="jxr_linenumber" name="L1235" href="#L1235">1235</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; vertices.length; ++i) {
<a class="jxr_linenumber" name="L1236" href="#L1236">1236</a>             <strong class="jxr_keyword">int</strong> l = vertices[i].length;
<a class="jxr_linenumber" name="L1237" href="#L1237">1237</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = 0; j &lt; l; ++j) {
<a class="jxr_linenumber" name="L1238" href="#L1238">1238</a>                 edges.add(buildSegment(vertices[i][j], vertices[i][(j + 1) % l]));
<a class="jxr_linenumber" name="L1239" href="#L1239">1239</a>             }
<a class="jxr_linenumber" name="L1240" href="#L1240">1240</a>         }
<a class="jxr_linenumber" name="L1241" href="#L1241">1241</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> PolygonsSet(edges, 1.0e-10);
<a class="jxr_linenumber" name="L1242" href="#L1242">1242</a>     }
<a class="jxr_linenumber" name="L1243" href="#L1243">1243</a> 
<a class="jxr_linenumber" name="L1244" href="#L1244">1244</a>     <strong class="jxr_keyword">private</strong> SubHyperplane&lt;Euclidean2D&gt; buildLine(Vector2D start, Vector2D end) {
<a class="jxr_linenumber" name="L1245" href="#L1245">1245</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> Line(start, end, 1.0e-10).wholeHyperplane();
<a class="jxr_linenumber" name="L1246" href="#L1246">1246</a>     }
<a class="jxr_linenumber" name="L1247" href="#L1247">1247</a> 
<a class="jxr_linenumber" name="L1248" href="#L1248">1248</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">double</strong> intersectionAbscissa(Line l0, Line l1) {
<a class="jxr_linenumber" name="L1249" href="#L1249">1249</a>         Vector2D p = l0.intersection(l1);
<a class="jxr_linenumber" name="L1250" href="#L1250">1250</a>         <strong class="jxr_keyword">return</strong> (l0.toSubSpace(p)).getX();
<a class="jxr_linenumber" name="L1251" href="#L1251">1251</a>     }
<a class="jxr_linenumber" name="L1252" href="#L1252">1252</a> 
<a class="jxr_linenumber" name="L1253" href="#L1253">1253</a>     <strong class="jxr_keyword">private</strong> SubHyperplane&lt;Euclidean2D&gt; buildHalfLine(Vector2D start, Vector2D end,
<a class="jxr_linenumber" name="L1254" href="#L1254">1254</a>                                                      <strong class="jxr_keyword">boolean</strong> startIsVirtual) {
<a class="jxr_linenumber" name="L1255" href="#L1255">1255</a>         Line   line  = <strong class="jxr_keyword">new</strong> Line(start, end, 1.0e-10);
<a class="jxr_linenumber" name="L1256" href="#L1256">1256</a>         <strong class="jxr_keyword">double</strong> lower = startIsVirtual ? Double.NEGATIVE_INFINITY : (line.toSubSpace(start)).getX();
<a class="jxr_linenumber" name="L1257" href="#L1257">1257</a>         <strong class="jxr_keyword">double</strong> upper = startIsVirtual ? (line.toSubSpace(end)).getX() : Double.POSITIVE_INFINITY;
<a class="jxr_linenumber" name="L1258" href="#L1258">1258</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> SubLine(line, <strong class="jxr_keyword">new</strong> IntervalsSet(lower, upper, 1.0e-10));
<a class="jxr_linenumber" name="L1259" href="#L1259">1259</a>     }
<a class="jxr_linenumber" name="L1260" href="#L1260">1260</a> 
<a class="jxr_linenumber" name="L1261" href="#L1261">1261</a>     <strong class="jxr_keyword">private</strong> SubHyperplane&lt;Euclidean2D&gt; buildSegment(Vector2D start, Vector2D end) {
<a class="jxr_linenumber" name="L1262" href="#L1262">1262</a>         Line   line  = <strong class="jxr_keyword">new</strong> Line(start, end, 1.0e-10);
<a class="jxr_linenumber" name="L1263" href="#L1263">1263</a>         <strong class="jxr_keyword">double</strong> lower = (line.toSubSpace(start)).getX();
<a class="jxr_linenumber" name="L1264" href="#L1264">1264</a>         <strong class="jxr_keyword">double</strong> upper = (line.toSubSpace(end)).getX();
<a class="jxr_linenumber" name="L1265" href="#L1265">1265</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> SubLine(line, <strong class="jxr_keyword">new</strong> IntervalsSet(lower, upper, 1.0e-10));
<a class="jxr_linenumber" name="L1266" href="#L1266">1266</a>     }
<a class="jxr_linenumber" name="L1267" href="#L1267">1267</a> 
<a class="jxr_linenumber" name="L1268" href="#L1268">1268</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">void</strong> checkPoints(Region.Location expected, PolygonsSet set,
<a class="jxr_linenumber" name="L1269" href="#L1269">1269</a>                              Vector2D[] points) {
<a class="jxr_linenumber" name="L1270" href="#L1270">1270</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; points.length; ++i) {
<a class="jxr_linenumber" name="L1271" href="#L1271">1271</a>             Assert.assertEquals(expected, set.checkPoint(points[i]));
<a class="jxr_linenumber" name="L1272" href="#L1272">1272</a>         }
<a class="jxr_linenumber" name="L1273" href="#L1273">1273</a>     }
<a class="jxr_linenumber" name="L1274" href="#L1274">1274</a> 
<a class="jxr_linenumber" name="L1275" href="#L1275">1275</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">boolean</strong> checkInSegment(Vector2D p,
<a class="jxr_linenumber" name="L1276" href="#L1276">1276</a>                                    Vector2D p1, Vector2D p2,
<a class="jxr_linenumber" name="L1277" href="#L1277">1277</a>                                    <strong class="jxr_keyword">double</strong> tolerance) {
<a class="jxr_linenumber" name="L1278" href="#L1278">1278</a>         Line line = <strong class="jxr_keyword">new</strong> Line(p1, p2, 1.0e-10);
<a class="jxr_linenumber" name="L1279" href="#L1279">1279</a>         <strong class="jxr_keyword">if</strong> (line.getOffset(p) &lt; tolerance) {
<a class="jxr_linenumber" name="L1280" href="#L1280">1280</a>             <strong class="jxr_keyword">double</strong> x  = (line.toSubSpace(p)).getX();
<a class="jxr_linenumber" name="L1281" href="#L1281">1281</a>             <strong class="jxr_keyword">double</strong> x1 = (line.toSubSpace(p1)).getX();
<a class="jxr_linenumber" name="L1282" href="#L1282">1282</a>             <strong class="jxr_keyword">double</strong> x2 = (line.toSubSpace(p2)).getX();
<a class="jxr_linenumber" name="L1283" href="#L1283">1283</a>             <strong class="jxr_keyword">return</strong> (((x - x1) * (x - x2) &lt;= 0.0)
<a class="jxr_linenumber" name="L1284" href="#L1284">1284</a>                     || (p1.distance(p) &lt; tolerance)
<a class="jxr_linenumber" name="L1285" href="#L1285">1285</a>                     || (p2.distance(p) &lt; tolerance));
<a class="jxr_linenumber" name="L1286" href="#L1286">1286</a>         } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L1287" href="#L1287">1287</a>             <strong class="jxr_keyword">return</strong> false;
<a class="jxr_linenumber" name="L1288" href="#L1288">1288</a>         }
<a class="jxr_linenumber" name="L1289" href="#L1289">1289</a>     }
<a class="jxr_linenumber" name="L1290" href="#L1290">1290</a> 
<a class="jxr_linenumber" name="L1291" href="#L1291">1291</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">void</strong> checkVertices(Vector2D[][] rebuiltVertices,
<a class="jxr_linenumber" name="L1292" href="#L1292">1292</a>                                Vector2D[][] vertices) {
<a class="jxr_linenumber" name="L1293" href="#L1293">1293</a> 
<a class="jxr_linenumber" name="L1294" href="#L1294">1294</a>         <em class="jxr_comment">// each rebuilt vertex should be in a segment joining two original vertices</em>
<a class="jxr_linenumber" name="L1295" href="#L1295">1295</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; rebuiltVertices.length; ++i) {
<a class="jxr_linenumber" name="L1296" href="#L1296">1296</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = 0; j &lt; rebuiltVertices[i].length; ++j) {
<a class="jxr_linenumber" name="L1297" href="#L1297">1297</a>                 <strong class="jxr_keyword">boolean</strong> inSegment = false;
<a class="jxr_linenumber" name="L1298" href="#L1298">1298</a>                 Vector2D p = rebuiltVertices[i][j];
<a class="jxr_linenumber" name="L1299" href="#L1299">1299</a>                 <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> k = 0; k &lt; vertices.length; ++k) {
<a class="jxr_linenumber" name="L1300" href="#L1300">1300</a>                     Vector2D[] loop = vertices[k];
<a class="jxr_linenumber" name="L1301" href="#L1301">1301</a>                     <strong class="jxr_keyword">int</strong> length = loop.length;
<a class="jxr_linenumber" name="L1302" href="#L1302">1302</a>                     <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> l = 0; (! inSegment) &amp;&amp; (l &lt; length); ++l) {
<a class="jxr_linenumber" name="L1303" href="#L1303">1303</a>                         inSegment = checkInSegment(p, loop[l], loop[(l + 1) % length], 1.0e-10);
<a class="jxr_linenumber" name="L1304" href="#L1304">1304</a>                     }
<a class="jxr_linenumber" name="L1305" href="#L1305">1305</a>                 }
<a class="jxr_linenumber" name="L1306" href="#L1306">1306</a>                 Assert.assertTrue(inSegment);
<a class="jxr_linenumber" name="L1307" href="#L1307">1307</a>             }
<a class="jxr_linenumber" name="L1308" href="#L1308">1308</a>         }
<a class="jxr_linenumber" name="L1309" href="#L1309">1309</a> 
<a class="jxr_linenumber" name="L1310" href="#L1310">1310</a>         <em class="jxr_comment">// each original vertex should have a corresponding rebuilt vertex</em>
<a class="jxr_linenumber" name="L1311" href="#L1311">1311</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> k = 0; k &lt; vertices.length; ++k) {
<a class="jxr_linenumber" name="L1312" href="#L1312">1312</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> l = 0; l &lt; vertices[k].length; ++l) {
<a class="jxr_linenumber" name="L1313" href="#L1313">1313</a>                 <strong class="jxr_keyword">double</strong> min = Double.POSITIVE_INFINITY;
<a class="jxr_linenumber" name="L1314" href="#L1314">1314</a>                 <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; rebuiltVertices.length; ++i) {
<a class="jxr_linenumber" name="L1315" href="#L1315">1315</a>                     <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = 0; j &lt; rebuiltVertices[i].length; ++j) {
<a class="jxr_linenumber" name="L1316" href="#L1316">1316</a>                         min = FastMath.min(vertices[k][l].distance(rebuiltVertices[i][j]),
<a class="jxr_linenumber" name="L1317" href="#L1317">1317</a>                                        min);
<a class="jxr_linenumber" name="L1318" href="#L1318">1318</a>                     }
<a class="jxr_linenumber" name="L1319" href="#L1319">1319</a>                 }
<a class="jxr_linenumber" name="L1320" href="#L1320">1320</a>                 Assert.assertEquals(0.0, min, 1.0e-10);
<a class="jxr_linenumber" name="L1321" href="#L1321">1321</a>             }
<a class="jxr_linenumber" name="L1322" href="#L1322">1322</a>         }
<a class="jxr_linenumber" name="L1323" href="#L1323">1323</a> 
<a class="jxr_linenumber" name="L1324" href="#L1324">1324</a>     }
<a class="jxr_linenumber" name="L1325" href="#L1325">1325</a> 
<a class="jxr_linenumber" name="L1326" href="#L1326">1326</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2003&#x2013;2016 <a href="http://www.apache.org/">The Apache Software Foundation</a>. All rights reserved.</div>
</body>
</html>
