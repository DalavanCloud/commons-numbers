<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span>package org.apache.commons.math3.complex;<a name="line.17"></a>
<span class="sourceLineNo">018</span><a name="line.18"></a>
<span class="sourceLineNo">019</span>import java.util.Random;<a name="line.19"></a>
<span class="sourceLineNo">020</span>import org.apache.commons.math3.complex.Quaternion;<a name="line.20"></a>
<span class="sourceLineNo">021</span>import org.apache.commons.math3.exception.DimensionMismatchException;<a name="line.21"></a>
<span class="sourceLineNo">022</span>import org.apache.commons.math3.exception.ZeroException;<a name="line.22"></a>
<span class="sourceLineNo">023</span>import org.apache.commons.math3.geometry.euclidean.threed.Rotation;<a name="line.23"></a>
<span class="sourceLineNo">024</span>import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;<a name="line.24"></a>
<span class="sourceLineNo">025</span>import org.apache.commons.math3.util.FastMath;<a name="line.25"></a>
<span class="sourceLineNo">026</span>import org.junit.Test;<a name="line.26"></a>
<span class="sourceLineNo">027</span>import org.junit.Assert;<a name="line.27"></a>
<span class="sourceLineNo">028</span><a name="line.28"></a>
<span class="sourceLineNo">029</span>public class QuaternionTest {<a name="line.29"></a>
<span class="sourceLineNo">030</span>    /** Epsilon for double comparison. */<a name="line.30"></a>
<span class="sourceLineNo">031</span>    private static final double EPS = Math.ulp(1d);<a name="line.31"></a>
<span class="sourceLineNo">032</span>    /** Epsilon for double comparison. */<a name="line.32"></a>
<span class="sourceLineNo">033</span>    private static final double COMPARISON_EPS = 1e-14;<a name="line.33"></a>
<span class="sourceLineNo">034</span><a name="line.34"></a>
<span class="sourceLineNo">035</span>    @Test<a name="line.35"></a>
<span class="sourceLineNo">036</span>    public final void testAccessors1() {<a name="line.36"></a>
<span class="sourceLineNo">037</span>        final double q0 = 2;<a name="line.37"></a>
<span class="sourceLineNo">038</span>        final double q1 = 5.4;<a name="line.38"></a>
<span class="sourceLineNo">039</span>        final double q2 = 17;<a name="line.39"></a>
<span class="sourceLineNo">040</span>        final double q3 = 0.0005;<a name="line.40"></a>
<span class="sourceLineNo">041</span>        final Quaternion q = new Quaternion(q0, q1, q2, q3);<a name="line.41"></a>
<span class="sourceLineNo">042</span><a name="line.42"></a>
<span class="sourceLineNo">043</span>        Assert.assertEquals(q0, q.getQ0(), 0);<a name="line.43"></a>
<span class="sourceLineNo">044</span>        Assert.assertEquals(q1, q.getQ1(), 0);<a name="line.44"></a>
<span class="sourceLineNo">045</span>        Assert.assertEquals(q2, q.getQ2(), 0);<a name="line.45"></a>
<span class="sourceLineNo">046</span>        Assert.assertEquals(q3, q.getQ3(), 0);<a name="line.46"></a>
<span class="sourceLineNo">047</span>    }<a name="line.47"></a>
<span class="sourceLineNo">048</span><a name="line.48"></a>
<span class="sourceLineNo">049</span>    @Test<a name="line.49"></a>
<span class="sourceLineNo">050</span>    public final void testAccessors2() {<a name="line.50"></a>
<span class="sourceLineNo">051</span>        final double q0 = 2;<a name="line.51"></a>
<span class="sourceLineNo">052</span>        final double q1 = 5.4;<a name="line.52"></a>
<span class="sourceLineNo">053</span>        final double q2 = 17;<a name="line.53"></a>
<span class="sourceLineNo">054</span>        final double q3 = 0.0005;<a name="line.54"></a>
<span class="sourceLineNo">055</span>        final Quaternion q = new Quaternion(q0, q1, q2, q3);<a name="line.55"></a>
<span class="sourceLineNo">056</span><a name="line.56"></a>
<span class="sourceLineNo">057</span>        final double sP = q.getScalarPart();<a name="line.57"></a>
<span class="sourceLineNo">058</span>        final double[] vP = q.getVectorPart();<a name="line.58"></a>
<span class="sourceLineNo">059</span><a name="line.59"></a>
<span class="sourceLineNo">060</span>        Assert.assertEquals(q0, sP, 0);<a name="line.60"></a>
<span class="sourceLineNo">061</span>        Assert.assertEquals(q1, vP[0], 0);<a name="line.61"></a>
<span class="sourceLineNo">062</span>        Assert.assertEquals(q2, vP[1], 0);<a name="line.62"></a>
<span class="sourceLineNo">063</span>        Assert.assertEquals(q3, vP[2], 0);<a name="line.63"></a>
<span class="sourceLineNo">064</span>    }<a name="line.64"></a>
<span class="sourceLineNo">065</span><a name="line.65"></a>
<span class="sourceLineNo">066</span>    @Test<a name="line.66"></a>
<span class="sourceLineNo">067</span>    public final void testAccessors3() {<a name="line.67"></a>
<span class="sourceLineNo">068</span>        final double q0 = 2;<a name="line.68"></a>
<span class="sourceLineNo">069</span>        final double q1 = 5.4;<a name="line.69"></a>
<span class="sourceLineNo">070</span>        final double q2 = 17;<a name="line.70"></a>
<span class="sourceLineNo">071</span>        final double q3 = 0.0005;<a name="line.71"></a>
<span class="sourceLineNo">072</span>        final Quaternion q = new Quaternion(q0, new double[] { q1, q2, q3 });<a name="line.72"></a>
<span class="sourceLineNo">073</span><a name="line.73"></a>
<span class="sourceLineNo">074</span>        final double sP = q.getScalarPart();<a name="line.74"></a>
<span class="sourceLineNo">075</span>        final double[] vP = q.getVectorPart();<a name="line.75"></a>
<span class="sourceLineNo">076</span><a name="line.76"></a>
<span class="sourceLineNo">077</span>        Assert.assertEquals(q0, sP, 0);<a name="line.77"></a>
<span class="sourceLineNo">078</span>        Assert.assertEquals(q1, vP[0], 0);<a name="line.78"></a>
<span class="sourceLineNo">079</span>        Assert.assertEquals(q2, vP[1], 0);<a name="line.79"></a>
<span class="sourceLineNo">080</span>        Assert.assertEquals(q3, vP[2], 0);<a name="line.80"></a>
<span class="sourceLineNo">081</span>    }<a name="line.81"></a>
<span class="sourceLineNo">082</span><a name="line.82"></a>
<span class="sourceLineNo">083</span>    @Test(expected=DimensionMismatchException.class)<a name="line.83"></a>
<span class="sourceLineNo">084</span>    public void testWrongDimension() {<a name="line.84"></a>
<span class="sourceLineNo">085</span>        new Quaternion(new double[] { 1, 2 });<a name="line.85"></a>
<span class="sourceLineNo">086</span>    }<a name="line.86"></a>
<span class="sourceLineNo">087</span>    <a name="line.87"></a>
<span class="sourceLineNo">088</span>    @Test<a name="line.88"></a>
<span class="sourceLineNo">089</span>    public final void testConjugate() {<a name="line.89"></a>
<span class="sourceLineNo">090</span>        final double q0 = 2;<a name="line.90"></a>
<span class="sourceLineNo">091</span>        final double q1 = 5.4;<a name="line.91"></a>
<span class="sourceLineNo">092</span>        final double q2 = 17;<a name="line.92"></a>
<span class="sourceLineNo">093</span>        final double q3 = 0.0005;<a name="line.93"></a>
<span class="sourceLineNo">094</span>        final Quaternion q = new Quaternion(q0, q1, q2, q3);<a name="line.94"></a>
<span class="sourceLineNo">095</span><a name="line.95"></a>
<span class="sourceLineNo">096</span>        final Quaternion qConjugate = q.getConjugate();<a name="line.96"></a>
<span class="sourceLineNo">097</span><a name="line.97"></a>
<span class="sourceLineNo">098</span>        Assert.assertEquals(q0, qConjugate.getQ0(), 0);<a name="line.98"></a>
<span class="sourceLineNo">099</span>        Assert.assertEquals(-q1, qConjugate.getQ1(), 0);<a name="line.99"></a>
<span class="sourceLineNo">100</span>        Assert.assertEquals(-q2, qConjugate.getQ2(), 0);<a name="line.100"></a>
<span class="sourceLineNo">101</span>        Assert.assertEquals(-q3, qConjugate.getQ3(), 0);<a name="line.101"></a>
<span class="sourceLineNo">102</span>    }<a name="line.102"></a>
<span class="sourceLineNo">103</span><a name="line.103"></a>
<span class="sourceLineNo">104</span>    @Test<a name="line.104"></a>
<span class="sourceLineNo">105</span>    public final void testProductQuaternionQuaternion() {<a name="line.105"></a>
<span class="sourceLineNo">106</span><a name="line.106"></a>
<span class="sourceLineNo">107</span>        // Case : analytic test case<a name="line.107"></a>
<span class="sourceLineNo">108</span><a name="line.108"></a>
<span class="sourceLineNo">109</span>        final Quaternion qA = new Quaternion(1, 0.5, -3, 4);<a name="line.109"></a>
<span class="sourceLineNo">110</span>        final Quaternion qB = new Quaternion(6, 2, 1, -9);<a name="line.110"></a>
<span class="sourceLineNo">111</span>        final Quaternion qResult = Quaternion.multiply(qA, qB);<a name="line.111"></a>
<span class="sourceLineNo">112</span><a name="line.112"></a>
<span class="sourceLineNo">113</span>        Assert.assertEquals(44, qResult.getQ0(), EPS);<a name="line.113"></a>
<span class="sourceLineNo">114</span>        Assert.assertEquals(28, qResult.getQ1(), EPS);<a name="line.114"></a>
<span class="sourceLineNo">115</span>        Assert.assertEquals(-4.5, qResult.getQ2(), EPS);<a name="line.115"></a>
<span class="sourceLineNo">116</span>        Assert.assertEquals(21.5, qResult.getQ3(), EPS);<a name="line.116"></a>
<span class="sourceLineNo">117</span><a name="line.117"></a>
<span class="sourceLineNo">118</span>        // comparison with the result given by the formula :<a name="line.118"></a>
<span class="sourceLineNo">119</span>        // qResult = (scalarA * scalarB - vectorA . vectorB) + (scalarA * vectorB + scalarB * vectorA + vectorA ^<a name="line.119"></a>
<span class="sourceLineNo">120</span>        // vectorB)<a name="line.120"></a>
<span class="sourceLineNo">121</span><a name="line.121"></a>
<span class="sourceLineNo">122</span>        final Vector3D vectorA = new Vector3D(qA.getVectorPart());<a name="line.122"></a>
<span class="sourceLineNo">123</span>        final Vector3D vectorB = new Vector3D(qB.getVectorPart());<a name="line.123"></a>
<span class="sourceLineNo">124</span>        final Vector3D vectorResult = new Vector3D(qResult.getVectorPart());<a name="line.124"></a>
<span class="sourceLineNo">125</span><a name="line.125"></a>
<span class="sourceLineNo">126</span>        final double scalarPartRef = qA.getScalarPart() * qB.getScalarPart() - Vector3D.dotProduct(vectorA, vectorB);<a name="line.126"></a>
<span class="sourceLineNo">127</span><a name="line.127"></a>
<span class="sourceLineNo">128</span>        Assert.assertEquals(scalarPartRef, qResult.getScalarPart(), EPS);<a name="line.128"></a>
<span class="sourceLineNo">129</span><a name="line.129"></a>
<span class="sourceLineNo">130</span>        final Vector3D vectorPartRef = ((vectorA.scalarMultiply(qB.getScalarPart())).add(vectorB.scalarMultiply(qA<a name="line.130"></a>
<span class="sourceLineNo">131</span>                .getScalarPart()))).add(Vector3D.crossProduct(vectorA, vectorB));<a name="line.131"></a>
<span class="sourceLineNo">132</span>        final double norm = (vectorResult.subtract(vectorPartRef)).getNorm();<a name="line.132"></a>
<span class="sourceLineNo">133</span><a name="line.133"></a>
<span class="sourceLineNo">134</span>        Assert.assertEquals(0, norm, EPS);<a name="line.134"></a>
<span class="sourceLineNo">135</span><a name="line.135"></a>
<span class="sourceLineNo">136</span>        // Conjugate of the product of two quaternions and product of their conjugates :<a name="line.136"></a>
<span class="sourceLineNo">137</span>        // Conj(qA * qB) = Conj(qB) * Conj(qA)<a name="line.137"></a>
<span class="sourceLineNo">138</span><a name="line.138"></a>
<span class="sourceLineNo">139</span>        final Quaternion conjugateOfProduct = qB.getConjugate().multiply(qA.getConjugate());<a name="line.139"></a>
<span class="sourceLineNo">140</span>        final Quaternion productOfConjugate = (qA.multiply(qB)).getConjugate();<a name="line.140"></a>
<span class="sourceLineNo">141</span><a name="line.141"></a>
<span class="sourceLineNo">142</span>        Assert.assertEquals(conjugateOfProduct.getQ0(), productOfConjugate.getQ0(), EPS);<a name="line.142"></a>
<span class="sourceLineNo">143</span>        Assert.assertEquals(conjugateOfProduct.getQ1(), productOfConjugate.getQ1(), EPS);<a name="line.143"></a>
<span class="sourceLineNo">144</span>        Assert.assertEquals(conjugateOfProduct.getQ2(), productOfConjugate.getQ2(), EPS);<a name="line.144"></a>
<span class="sourceLineNo">145</span>        Assert.assertEquals(conjugateOfProduct.getQ3(), productOfConjugate.getQ3(), EPS);<a name="line.145"></a>
<span class="sourceLineNo">146</span>    }<a name="line.146"></a>
<span class="sourceLineNo">147</span><a name="line.147"></a>
<span class="sourceLineNo">148</span>    @Test<a name="line.148"></a>
<span class="sourceLineNo">149</span>    public final void testProductQuaternionVector() {<a name="line.149"></a>
<span class="sourceLineNo">150</span><a name="line.150"></a>
<span class="sourceLineNo">151</span>        // Case : Product between a vector and a quaternion : QxV<a name="line.151"></a>
<span class="sourceLineNo">152</span><a name="line.152"></a>
<span class="sourceLineNo">153</span>        final Quaternion quaternion = new Quaternion(4, 7, -1, 2);<a name="line.153"></a>
<span class="sourceLineNo">154</span>        final double[] vector = {2.0, 1.0, 3.0};<a name="line.154"></a>
<span class="sourceLineNo">155</span>        final Quaternion qResultQxV = Quaternion.multiply(quaternion, new Quaternion(vector));<a name="line.155"></a>
<span class="sourceLineNo">156</span><a name="line.156"></a>
<span class="sourceLineNo">157</span>        Assert.assertEquals(-19, qResultQxV.getQ0(), EPS);<a name="line.157"></a>
<span class="sourceLineNo">158</span>        Assert.assertEquals(3, qResultQxV.getQ1(), EPS);<a name="line.158"></a>
<span class="sourceLineNo">159</span>        Assert.assertEquals(-13, qResultQxV.getQ2(), EPS);<a name="line.159"></a>
<span class="sourceLineNo">160</span>        Assert.assertEquals(21, qResultQxV.getQ3(), EPS);<a name="line.160"></a>
<span class="sourceLineNo">161</span><a name="line.161"></a>
<span class="sourceLineNo">162</span>        // comparison with the result given by the formula :<a name="line.162"></a>
<span class="sourceLineNo">163</span>        // qResult = (- vectorQ . vector) + (scalarQ * vector + vectorQ ^ vector)<a name="line.163"></a>
<span class="sourceLineNo">164</span><a name="line.164"></a>
<span class="sourceLineNo">165</span>        final double[] vectorQ = quaternion.getVectorPart();<a name="line.165"></a>
<span class="sourceLineNo">166</span>        final double[] vectorResultQxV = qResultQxV.getVectorPart();<a name="line.166"></a>
<span class="sourceLineNo">167</span><a name="line.167"></a>
<span class="sourceLineNo">168</span>        final double scalarPartRefQxV = -Vector3D.dotProduct(new Vector3D(vectorQ), new Vector3D(vector));<a name="line.168"></a>
<span class="sourceLineNo">169</span>        Assert.assertEquals(scalarPartRefQxV, qResultQxV.getScalarPart(), EPS);<a name="line.169"></a>
<span class="sourceLineNo">170</span><a name="line.170"></a>
<span class="sourceLineNo">171</span>        final Vector3D vectorPartRefQxV = (new Vector3D(vector).scalarMultiply(quaternion.getScalarPart())).add(Vector3D<a name="line.171"></a>
<span class="sourceLineNo">172</span>                .crossProduct(new Vector3D(vectorQ), new Vector3D(vector)));<a name="line.172"></a>
<span class="sourceLineNo">173</span>        final double normQxV = (new Vector3D(vectorResultQxV).subtract(vectorPartRefQxV)).getNorm();<a name="line.173"></a>
<span class="sourceLineNo">174</span>        Assert.assertEquals(0, normQxV, EPS);<a name="line.174"></a>
<span class="sourceLineNo">175</span><a name="line.175"></a>
<span class="sourceLineNo">176</span>        // Case : Product between a vector and a quaternion : VxQ<a name="line.176"></a>
<span class="sourceLineNo">177</span><a name="line.177"></a>
<span class="sourceLineNo">178</span>        final Quaternion qResultVxQ = Quaternion.multiply(new Quaternion(vector), quaternion);<a name="line.178"></a>
<span class="sourceLineNo">179</span><a name="line.179"></a>
<span class="sourceLineNo">180</span>        Assert.assertEquals(-19, qResultVxQ.getQ0(), EPS);<a name="line.180"></a>
<span class="sourceLineNo">181</span>        Assert.assertEquals(13, qResultVxQ.getQ1(), EPS);<a name="line.181"></a>
<span class="sourceLineNo">182</span>        Assert.assertEquals(21, qResultVxQ.getQ2(), EPS);<a name="line.182"></a>
<span class="sourceLineNo">183</span>        Assert.assertEquals(3, qResultVxQ.getQ3(), EPS);<a name="line.183"></a>
<span class="sourceLineNo">184</span><a name="line.184"></a>
<span class="sourceLineNo">185</span>        final double[] vectorResultVxQ = qResultVxQ.getVectorPart();<a name="line.185"></a>
<span class="sourceLineNo">186</span><a name="line.186"></a>
<span class="sourceLineNo">187</span>        // comparison with the result given by the formula :<a name="line.187"></a>
<span class="sourceLineNo">188</span>        // qResult = (- vector . vectorQ) + (scalarQ * vector + vector ^ vectorQ)<a name="line.188"></a>
<span class="sourceLineNo">189</span><a name="line.189"></a>
<span class="sourceLineNo">190</span>        final double scalarPartRefVxQ = -Vector3D.dotProduct(new Vector3D(vectorQ), new Vector3D(vector));<a name="line.190"></a>
<span class="sourceLineNo">191</span>        Assert.assertEquals(scalarPartRefVxQ, qResultVxQ.getScalarPart(), EPS);<a name="line.191"></a>
<span class="sourceLineNo">192</span><a name="line.192"></a>
<span class="sourceLineNo">193</span>        final Vector3D vectorPartRefVxQ = (new Vector3D(vector).scalarMultiply(quaternion.getScalarPart())).add(Vector3D<a name="line.193"></a>
<span class="sourceLineNo">194</span>                .crossProduct(new Vector3D(vector), new Vector3D(vectorQ)));<a name="line.194"></a>
<span class="sourceLineNo">195</span>        final double normVxQ = (new Vector3D(vectorResultVxQ).subtract(vectorPartRefVxQ)).getNorm();<a name="line.195"></a>
<span class="sourceLineNo">196</span>        Assert.assertEquals(0, normVxQ, EPS);<a name="line.196"></a>
<span class="sourceLineNo">197</span>    }<a name="line.197"></a>
<span class="sourceLineNo">198</span><a name="line.198"></a>
<span class="sourceLineNo">199</span>    @Test<a name="line.199"></a>
<span class="sourceLineNo">200</span>    public final void testDotProductQuaternionQuaternion() {<a name="line.200"></a>
<span class="sourceLineNo">201</span>        // expected output<a name="line.201"></a>
<span class="sourceLineNo">202</span>        final double expected = -6.;<a name="line.202"></a>
<span class="sourceLineNo">203</span>        // inputs<a name="line.203"></a>
<span class="sourceLineNo">204</span>        final Quaternion q1 = new Quaternion(1, 2, 2, 1);<a name="line.204"></a>
<span class="sourceLineNo">205</span>        final Quaternion q2 = new Quaternion(3, -2, -1, -3);<a name="line.205"></a>
<span class="sourceLineNo">206</span><a name="line.206"></a>
<span class="sourceLineNo">207</span>        final double actual1 = Quaternion.dotProduct(q1, q2);<a name="line.207"></a>
<span class="sourceLineNo">208</span>        final double actual2 = q1.dotProduct(q2);<a name="line.208"></a>
<span class="sourceLineNo">209</span><a name="line.209"></a>
<span class="sourceLineNo">210</span>        Assert.assertEquals(expected, actual1, EPS);<a name="line.210"></a>
<span class="sourceLineNo">211</span>        Assert.assertEquals(expected, actual2, EPS);<a name="line.211"></a>
<span class="sourceLineNo">212</span>    }<a name="line.212"></a>
<span class="sourceLineNo">213</span><a name="line.213"></a>
<span class="sourceLineNo">214</span>    @Test<a name="line.214"></a>
<span class="sourceLineNo">215</span>    public final void testScalarMultiplyDouble() {<a name="line.215"></a>
<span class="sourceLineNo">216</span>        // expected outputs<a name="line.216"></a>
<span class="sourceLineNo">217</span>        final double w = 1.6;<a name="line.217"></a>
<span class="sourceLineNo">218</span>        final double x = -4.8;<a name="line.218"></a>
<span class="sourceLineNo">219</span>        final double y = 11.20;<a name="line.219"></a>
<span class="sourceLineNo">220</span>        final double z = 2.56;<a name="line.220"></a>
<span class="sourceLineNo">221</span>        // inputs<a name="line.221"></a>
<span class="sourceLineNo">222</span>        final Quaternion q1 = new Quaternion(0.5, -1.5, 3.5, 0.8);<a name="line.222"></a>
<span class="sourceLineNo">223</span>        final double a = 3.2;<a name="line.223"></a>
<span class="sourceLineNo">224</span><a name="line.224"></a>
<span class="sourceLineNo">225</span>        final Quaternion q = q1.multiply(a);<a name="line.225"></a>
<span class="sourceLineNo">226</span><a name="line.226"></a>
<span class="sourceLineNo">227</span>        Assert.assertEquals(w, q.getQ0(), COMPARISON_EPS);<a name="line.227"></a>
<span class="sourceLineNo">228</span>        Assert.assertEquals(x, q.getQ1(), COMPARISON_EPS);<a name="line.228"></a>
<span class="sourceLineNo">229</span>        Assert.assertEquals(y, q.getQ2(), COMPARISON_EPS);<a name="line.229"></a>
<span class="sourceLineNo">230</span>        Assert.assertEquals(z, q.getQ3(), COMPARISON_EPS);<a name="line.230"></a>
<span class="sourceLineNo">231</span>    }<a name="line.231"></a>
<span class="sourceLineNo">232</span><a name="line.232"></a>
<span class="sourceLineNo">233</span>    @Test<a name="line.233"></a>
<span class="sourceLineNo">234</span>    public final void testAddQuaternionQuaternion() {<a name="line.234"></a>
<span class="sourceLineNo">235</span>        // expected outputs<a name="line.235"></a>
<span class="sourceLineNo">236</span>        final double w = 4;<a name="line.236"></a>
<span class="sourceLineNo">237</span>        final double x = -1;<a name="line.237"></a>
<span class="sourceLineNo">238</span>        final double y = 2;<a name="line.238"></a>
<span class="sourceLineNo">239</span>        final double z = -4;<a name="line.239"></a>
<span class="sourceLineNo">240</span>        // inputs<a name="line.240"></a>
<span class="sourceLineNo">241</span>        final Quaternion q1 = new Quaternion(1., 2., -2., -1.);<a name="line.241"></a>
<span class="sourceLineNo">242</span>        final Quaternion q2 = new Quaternion(3., -3., 4., -3.);<a name="line.242"></a>
<span class="sourceLineNo">243</span><a name="line.243"></a>
<span class="sourceLineNo">244</span>        final Quaternion qa = Quaternion.add(q1, q2);<a name="line.244"></a>
<span class="sourceLineNo">245</span>        final Quaternion qb = q1.add(q2);<a name="line.245"></a>
<span class="sourceLineNo">246</span><a name="line.246"></a>
<span class="sourceLineNo">247</span>        Assert.assertEquals(w, qa.getQ0(), EPS);<a name="line.247"></a>
<span class="sourceLineNo">248</span>        Assert.assertEquals(x, qa.getQ1(), EPS);<a name="line.248"></a>
<span class="sourceLineNo">249</span>        Assert.assertEquals(y, qa.getQ2(), EPS);<a name="line.249"></a>
<span class="sourceLineNo">250</span>        Assert.assertEquals(z, qa.getQ3(), EPS);<a name="line.250"></a>
<span class="sourceLineNo">251</span><a name="line.251"></a>
<span class="sourceLineNo">252</span>        Assert.assertEquals(w, qb.getQ0(), EPS);<a name="line.252"></a>
<span class="sourceLineNo">253</span>        Assert.assertEquals(x, qb.getQ1(), EPS);<a name="line.253"></a>
<span class="sourceLineNo">254</span>        Assert.assertEquals(y, qb.getQ2(), EPS);<a name="line.254"></a>
<span class="sourceLineNo">255</span>        Assert.assertEquals(z, qb.getQ3(), EPS);<a name="line.255"></a>
<span class="sourceLineNo">256</span>    }<a name="line.256"></a>
<span class="sourceLineNo">257</span><a name="line.257"></a>
<span class="sourceLineNo">258</span>    @Test<a name="line.258"></a>
<span class="sourceLineNo">259</span>    public final void testSubtractQuaternionQuaternion() {<a name="line.259"></a>
<span class="sourceLineNo">260</span>        // expected outputs<a name="line.260"></a>
<span class="sourceLineNo">261</span>        final double w = -2.;<a name="line.261"></a>
<span class="sourceLineNo">262</span>        final double x = 5.;<a name="line.262"></a>
<span class="sourceLineNo">263</span>        final double y = -6.;<a name="line.263"></a>
<span class="sourceLineNo">264</span>        final double z = 2.;<a name="line.264"></a>
<span class="sourceLineNo">265</span>        // inputs<a name="line.265"></a>
<span class="sourceLineNo">266</span>        final Quaternion q1 = new Quaternion(1., 2., -2., -1.);<a name="line.266"></a>
<span class="sourceLineNo">267</span>        final Quaternion q2 = new Quaternion(3., -3., 4., -3.);<a name="line.267"></a>
<span class="sourceLineNo">268</span><a name="line.268"></a>
<span class="sourceLineNo">269</span>        final Quaternion qa = Quaternion.subtract(q1, q2);<a name="line.269"></a>
<span class="sourceLineNo">270</span>        final Quaternion qb = q1.subtract(q2);<a name="line.270"></a>
<span class="sourceLineNo">271</span><a name="line.271"></a>
<span class="sourceLineNo">272</span>        Assert.assertEquals(w, qa.getQ0(), EPS);<a name="line.272"></a>
<span class="sourceLineNo">273</span>        Assert.assertEquals(x, qa.getQ1(), EPS);<a name="line.273"></a>
<span class="sourceLineNo">274</span>        Assert.assertEquals(y, qa.getQ2(), EPS);<a name="line.274"></a>
<span class="sourceLineNo">275</span>        Assert.assertEquals(z, qa.getQ3(), EPS);<a name="line.275"></a>
<span class="sourceLineNo">276</span><a name="line.276"></a>
<span class="sourceLineNo">277</span>        Assert.assertEquals(w, qb.getQ0(), EPS);<a name="line.277"></a>
<span class="sourceLineNo">278</span>        Assert.assertEquals(x, qb.getQ1(), EPS);<a name="line.278"></a>
<span class="sourceLineNo">279</span>        Assert.assertEquals(y, qb.getQ2(), EPS);<a name="line.279"></a>
<span class="sourceLineNo">280</span>        Assert.assertEquals(z, qb.getQ3(), EPS);<a name="line.280"></a>
<span class="sourceLineNo">281</span>}<a name="line.281"></a>
<span class="sourceLineNo">282</span><a name="line.282"></a>
<span class="sourceLineNo">283</span>    @Test<a name="line.283"></a>
<span class="sourceLineNo">284</span>    public final void testNorm() {<a name="line.284"></a>
<span class="sourceLineNo">285</span><a name="line.285"></a>
<span class="sourceLineNo">286</span>        final double q0 = 2;<a name="line.286"></a>
<span class="sourceLineNo">287</span>        final double q1 = 1;<a name="line.287"></a>
<span class="sourceLineNo">288</span>        final double q2 = -4;<a name="line.288"></a>
<span class="sourceLineNo">289</span>        final double q3 = 3;<a name="line.289"></a>
<span class="sourceLineNo">290</span>        final Quaternion q = new Quaternion(q0, q1, q2, q3);<a name="line.290"></a>
<span class="sourceLineNo">291</span><a name="line.291"></a>
<span class="sourceLineNo">292</span>        final double norm = q.getNorm();<a name="line.292"></a>
<span class="sourceLineNo">293</span><a name="line.293"></a>
<span class="sourceLineNo">294</span>        Assert.assertEquals(FastMath.sqrt(30), norm, 0);<a name="line.294"></a>
<span class="sourceLineNo">295</span><a name="line.295"></a>
<span class="sourceLineNo">296</span>        final double normSquareRef = Quaternion.multiply(q, q.getConjugate()).getScalarPart();<a name="line.296"></a>
<span class="sourceLineNo">297</span>        Assert.assertEquals(FastMath.sqrt(normSquareRef), norm, 0);<a name="line.297"></a>
<span class="sourceLineNo">298</span>    }<a name="line.298"></a>
<span class="sourceLineNo">299</span><a name="line.299"></a>
<span class="sourceLineNo">300</span>    @Test<a name="line.300"></a>
<span class="sourceLineNo">301</span>    public final void testNormalize() {<a name="line.301"></a>
<span class="sourceLineNo">302</span><a name="line.302"></a>
<span class="sourceLineNo">303</span>        final Quaternion q = new Quaternion(2, 1, -4, -2);<a name="line.303"></a>
<span class="sourceLineNo">304</span><a name="line.304"></a>
<span class="sourceLineNo">305</span>        final Quaternion versor = q.normalize();<a name="line.305"></a>
<span class="sourceLineNo">306</span><a name="line.306"></a>
<span class="sourceLineNo">307</span>        Assert.assertEquals(2.0 / 5.0, versor.getQ0(), 0);<a name="line.307"></a>
<span class="sourceLineNo">308</span>        Assert.assertEquals(1.0 / 5.0, versor.getQ1(), 0);<a name="line.308"></a>
<span class="sourceLineNo">309</span>        Assert.assertEquals(-4.0 / 5.0, versor.getQ2(), 0);<a name="line.309"></a>
<span class="sourceLineNo">310</span>        Assert.assertEquals(-2.0 / 5.0, versor.getQ3(), 0);<a name="line.310"></a>
<span class="sourceLineNo">311</span><a name="line.311"></a>
<span class="sourceLineNo">312</span>        Assert.assertEquals(1, versor.getNorm(), 0);<a name="line.312"></a>
<span class="sourceLineNo">313</span>    }<a name="line.313"></a>
<span class="sourceLineNo">314</span><a name="line.314"></a>
<span class="sourceLineNo">315</span>    @Test(expected=ZeroException.class)<a name="line.315"></a>
<span class="sourceLineNo">316</span>    public final void testNormalizeFail() {<a name="line.316"></a>
<span class="sourceLineNo">317</span>        final Quaternion zeroQ = new Quaternion(0, 0, 0, 0);<a name="line.317"></a>
<span class="sourceLineNo">318</span>        zeroQ.normalize();<a name="line.318"></a>
<span class="sourceLineNo">319</span>    }<a name="line.319"></a>
<span class="sourceLineNo">320</span><a name="line.320"></a>
<span class="sourceLineNo">321</span>    @Test<a name="line.321"></a>
<span class="sourceLineNo">322</span>    public final void testObjectEquals() {<a name="line.322"></a>
<span class="sourceLineNo">323</span>        final double one = 1;<a name="line.323"></a>
<span class="sourceLineNo">324</span>        final Quaternion q1 = new Quaternion(one, one, one, one);<a name="line.324"></a>
<span class="sourceLineNo">325</span>        Assert.assertTrue(q1.equals(q1));<a name="line.325"></a>
<span class="sourceLineNo">326</span><a name="line.326"></a>
<span class="sourceLineNo">327</span>        final Quaternion q2 = new Quaternion(one, one, one, one);<a name="line.327"></a>
<span class="sourceLineNo">328</span>        Assert.assertTrue(q2.equals(q1));<a name="line.328"></a>
<span class="sourceLineNo">329</span><a name="line.329"></a>
<span class="sourceLineNo">330</span>        final Quaternion q3 = new Quaternion(one, FastMath.nextUp(one), one, one);<a name="line.330"></a>
<span class="sourceLineNo">331</span>        Assert.assertFalse(q3.equals(q1));<a name="line.331"></a>
<span class="sourceLineNo">332</span>    }<a name="line.332"></a>
<span class="sourceLineNo">333</span><a name="line.333"></a>
<span class="sourceLineNo">334</span>    @Test<a name="line.334"></a>
<span class="sourceLineNo">335</span>    public final void testQuaternionEquals() {<a name="line.335"></a>
<span class="sourceLineNo">336</span>        final double inc = 1e-5;<a name="line.336"></a>
<span class="sourceLineNo">337</span>        final Quaternion q1 = new Quaternion(2, 1, -4, -2);<a name="line.337"></a>
<span class="sourceLineNo">338</span>        final Quaternion q2 = new Quaternion(q1.getQ0() + inc, q1.getQ1(), q1.getQ2(), q1.getQ3());<a name="line.338"></a>
<span class="sourceLineNo">339</span>        final Quaternion q3 = new Quaternion(q1.getQ0(), q1.getQ1() + inc, q1.getQ2(), q1.getQ3());<a name="line.339"></a>
<span class="sourceLineNo">340</span>        final Quaternion q4 = new Quaternion(q1.getQ0(), q1.getQ1(), q1.getQ2() + inc, q1.getQ3());<a name="line.340"></a>
<span class="sourceLineNo">341</span>        final Quaternion q5 = new Quaternion(q1.getQ0(), q1.getQ1(), q1.getQ2(), q1.getQ3() + inc);<a name="line.341"></a>
<span class="sourceLineNo">342</span><a name="line.342"></a>
<span class="sourceLineNo">343</span>        Assert.assertFalse(q1.equals(q2, 0.9 * inc));<a name="line.343"></a>
<span class="sourceLineNo">344</span>        Assert.assertFalse(q1.equals(q3, 0.9 * inc));<a name="line.344"></a>
<span class="sourceLineNo">345</span>        Assert.assertFalse(q1.equals(q4, 0.9 * inc));<a name="line.345"></a>
<span class="sourceLineNo">346</span>        Assert.assertFalse(q1.equals(q5, 0.9 * inc));<a name="line.346"></a>
<span class="sourceLineNo">347</span><a name="line.347"></a>
<span class="sourceLineNo">348</span>        Assert.assertTrue(q1.equals(q2, 1.1 * inc));<a name="line.348"></a>
<span class="sourceLineNo">349</span>        Assert.assertTrue(q1.equals(q3, 1.1 * inc));<a name="line.349"></a>
<span class="sourceLineNo">350</span>        Assert.assertTrue(q1.equals(q4, 1.1 * inc));<a name="line.350"></a>
<span class="sourceLineNo">351</span>        Assert.assertTrue(q1.equals(q5, 1.1 * inc));<a name="line.351"></a>
<span class="sourceLineNo">352</span>    }<a name="line.352"></a>
<span class="sourceLineNo">353</span><a name="line.353"></a>
<span class="sourceLineNo">354</span>    @Test<a name="line.354"></a>
<span class="sourceLineNo">355</span>    public final void testQuaternionEquals2() {<a name="line.355"></a>
<span class="sourceLineNo">356</span>        final Quaternion q1 = new Quaternion(1, 4, 2, 3);<a name="line.356"></a>
<span class="sourceLineNo">357</span>        final double gap = 1e-5;<a name="line.357"></a>
<span class="sourceLineNo">358</span>        final Quaternion q2 = new Quaternion(1 + gap, 4 + gap, 2 + gap, 3 + gap);<a name="line.358"></a>
<span class="sourceLineNo">359</span><a name="line.359"></a>
<span class="sourceLineNo">360</span>        Assert.assertTrue(q1.equals(q2, 10 * gap));<a name="line.360"></a>
<span class="sourceLineNo">361</span>        Assert.assertFalse(q1.equals(q2, gap));<a name="line.361"></a>
<span class="sourceLineNo">362</span>        Assert.assertFalse(q1.equals(q2, gap / 10));<a name="line.362"></a>
<span class="sourceLineNo">363</span>    }<a name="line.363"></a>
<span class="sourceLineNo">364</span><a name="line.364"></a>
<span class="sourceLineNo">365</span>    @Test<a name="line.365"></a>
<span class="sourceLineNo">366</span>    public final void testIsUnitQuaternion() {<a name="line.366"></a>
<span class="sourceLineNo">367</span>        final Random r = new Random(48);<a name="line.367"></a>
<span class="sourceLineNo">368</span>        final int numberOfTrials = 1000;<a name="line.368"></a>
<span class="sourceLineNo">369</span>        for (int i = 0; i &lt; numberOfTrials; i++) {<a name="line.369"></a>
<span class="sourceLineNo">370</span>            final Quaternion q1 = new Quaternion(r.nextDouble(), r.nextDouble(), r.nextDouble(), r.nextDouble());<a name="line.370"></a>
<span class="sourceLineNo">371</span>            final Quaternion q2 = q1.normalize();<a name="line.371"></a>
<span class="sourceLineNo">372</span>            Assert.assertTrue(q2.isUnitQuaternion(COMPARISON_EPS));<a name="line.372"></a>
<span class="sourceLineNo">373</span>        }<a name="line.373"></a>
<span class="sourceLineNo">374</span><a name="line.374"></a>
<span class="sourceLineNo">375</span>        final Quaternion q = new Quaternion(1, 1, 1, 1);<a name="line.375"></a>
<span class="sourceLineNo">376</span>        Assert.assertFalse(q.isUnitQuaternion(COMPARISON_EPS));<a name="line.376"></a>
<span class="sourceLineNo">377</span>    }<a name="line.377"></a>
<span class="sourceLineNo">378</span><a name="line.378"></a>
<span class="sourceLineNo">379</span>    @Test<a name="line.379"></a>
<span class="sourceLineNo">380</span>    public final void testIsPureQuaternion() {<a name="line.380"></a>
<span class="sourceLineNo">381</span>        final Quaternion q1 = new Quaternion(0, 5, 4, 8);<a name="line.381"></a>
<span class="sourceLineNo">382</span>        Assert.assertTrue(q1.isPureQuaternion(EPS));<a name="line.382"></a>
<span class="sourceLineNo">383</span><a name="line.383"></a>
<span class="sourceLineNo">384</span>        final Quaternion q2 = new Quaternion(0 - EPS, 5, 4, 8);<a name="line.384"></a>
<span class="sourceLineNo">385</span>        Assert.assertTrue(q2.isPureQuaternion(EPS));<a name="line.385"></a>
<span class="sourceLineNo">386</span><a name="line.386"></a>
<span class="sourceLineNo">387</span>        final Quaternion q3 = new Quaternion(0 - 1.1 * EPS, 5, 4, 8);<a name="line.387"></a>
<span class="sourceLineNo">388</span>        Assert.assertFalse(q3.isPureQuaternion(EPS));<a name="line.388"></a>
<span class="sourceLineNo">389</span><a name="line.389"></a>
<span class="sourceLineNo">390</span>        final Random r = new Random(48);<a name="line.390"></a>
<span class="sourceLineNo">391</span>        final double[] v = {r.nextDouble(), r.nextDouble(), r.nextDouble()};<a name="line.391"></a>
<span class="sourceLineNo">392</span>        final Quaternion q4 = new Quaternion(v);<a name="line.392"></a>
<span class="sourceLineNo">393</span>        Assert.assertTrue(q4.isPureQuaternion(0));<a name="line.393"></a>
<span class="sourceLineNo">394</span><a name="line.394"></a>
<span class="sourceLineNo">395</span>        final Quaternion q5 = new Quaternion(0, v);<a name="line.395"></a>
<span class="sourceLineNo">396</span>        Assert.assertTrue(q5.isPureQuaternion(0));<a name="line.396"></a>
<span class="sourceLineNo">397</span>    }<a name="line.397"></a>
<span class="sourceLineNo">398</span><a name="line.398"></a>
<span class="sourceLineNo">399</span>    @Test<a name="line.399"></a>
<span class="sourceLineNo">400</span>    public final void testPolarForm() {<a name="line.400"></a>
<span class="sourceLineNo">401</span>        final Random r = new Random(48);<a name="line.401"></a>
<span class="sourceLineNo">402</span>        final int numberOfTrials = 1000;<a name="line.402"></a>
<span class="sourceLineNo">403</span>        for (int i = 0; i &lt; numberOfTrials; i++) {<a name="line.403"></a>
<span class="sourceLineNo">404</span>            final Quaternion q = new Quaternion(2 * (r.nextDouble() - 0.5), 2 * (r.nextDouble() - 0.5),<a name="line.404"></a>
<span class="sourceLineNo">405</span>                                                2 * (r.nextDouble() - 0.5), 2 * (r.nextDouble() - 0.5));<a name="line.405"></a>
<span class="sourceLineNo">406</span>            final Quaternion qP = q.getPositivePolarForm();<a name="line.406"></a>
<span class="sourceLineNo">407</span><a name="line.407"></a>
<span class="sourceLineNo">408</span>            Assert.assertTrue(qP.isUnitQuaternion(COMPARISON_EPS));<a name="line.408"></a>
<span class="sourceLineNo">409</span>            Assert.assertTrue(qP.getQ0() &gt;= 0);<a name="line.409"></a>
<span class="sourceLineNo">410</span><a name="line.410"></a>
<span class="sourceLineNo">411</span>            final Rotation rot = new Rotation(q.getQ0(), q.getQ1(), q.getQ2(), q.getQ3(), true);<a name="line.411"></a>
<span class="sourceLineNo">412</span>            final Rotation rotP = new Rotation(qP.getQ0(), qP.getQ1(), qP.getQ2(), qP.getQ3(), true);<a name="line.412"></a>
<span class="sourceLineNo">413</span><a name="line.413"></a>
<span class="sourceLineNo">414</span>            Assert.assertEquals(rot.getAngle(), rotP.getAngle(), COMPARISON_EPS);<a name="line.414"></a>
<span class="sourceLineNo">415</span>            Assert.assertEquals(rot.getAxis().getX(), rot.getAxis().getX(), COMPARISON_EPS);<a name="line.415"></a>
<span class="sourceLineNo">416</span>            Assert.assertEquals(rot.getAxis().getY(), rot.getAxis().getY(), COMPARISON_EPS);<a name="line.416"></a>
<span class="sourceLineNo">417</span>            Assert.assertEquals(rot.getAxis().getZ(), rot.getAxis().getZ(), COMPARISON_EPS);<a name="line.417"></a>
<span class="sourceLineNo">418</span>        }<a name="line.418"></a>
<span class="sourceLineNo">419</span>    }<a name="line.419"></a>
<span class="sourceLineNo">420</span><a name="line.420"></a>
<span class="sourceLineNo">421</span>    @Test<a name="line.421"></a>
<span class="sourceLineNo">422</span>    public final void testGetInverse() {<a name="line.422"></a>
<span class="sourceLineNo">423</span>        final Quaternion q = new Quaternion(1.5, 4, 2, -2.5);<a name="line.423"></a>
<span class="sourceLineNo">424</span><a name="line.424"></a>
<span class="sourceLineNo">425</span>        final Quaternion inverseQ = q.getInverse();<a name="line.425"></a>
<span class="sourceLineNo">426</span>        Assert.assertEquals(1.5 / 28.5, inverseQ.getQ0(), 0);<a name="line.426"></a>
<span class="sourceLineNo">427</span>        Assert.assertEquals(-4.0 / 28.5, inverseQ.getQ1(), 0);<a name="line.427"></a>
<span class="sourceLineNo">428</span>        Assert.assertEquals(-2.0 / 28.5, inverseQ.getQ2(), 0);<a name="line.428"></a>
<span class="sourceLineNo">429</span>        Assert.assertEquals(2.5 / 28.5, inverseQ.getQ3(), 0);<a name="line.429"></a>
<span class="sourceLineNo">430</span><a name="line.430"></a>
<span class="sourceLineNo">431</span>        final Quaternion product = Quaternion.multiply(inverseQ, q);<a name="line.431"></a>
<span class="sourceLineNo">432</span>        Assert.assertEquals(1, product.getQ0(), EPS);<a name="line.432"></a>
<span class="sourceLineNo">433</span>        Assert.assertEquals(0, product.getQ1(), EPS);<a name="line.433"></a>
<span class="sourceLineNo">434</span>        Assert.assertEquals(0, product.getQ2(), EPS);<a name="line.434"></a>
<span class="sourceLineNo">435</span>        Assert.assertEquals(0, product.getQ3(), EPS);<a name="line.435"></a>
<span class="sourceLineNo">436</span><a name="line.436"></a>
<span class="sourceLineNo">437</span>        final Quaternion qNul = new Quaternion(0, 0, 0, 0);<a name="line.437"></a>
<span class="sourceLineNo">438</span>        try {<a name="line.438"></a>
<span class="sourceLineNo">439</span>            final Quaternion inverseQNul = qNul.getInverse();<a name="line.439"></a>
<span class="sourceLineNo">440</span>            Assert.fail("expecting ZeroException but got : " + inverseQNul);<a name="line.440"></a>
<span class="sourceLineNo">441</span>        } catch (ZeroException ex) {<a name="line.441"></a>
<span class="sourceLineNo">442</span>            // expected<a name="line.442"></a>
<span class="sourceLineNo">443</span>        }<a name="line.443"></a>
<span class="sourceLineNo">444</span>    }<a name="line.444"></a>
<span class="sourceLineNo">445</span><a name="line.445"></a>
<span class="sourceLineNo">446</span>    @Test<a name="line.446"></a>
<span class="sourceLineNo">447</span>    public final void testToString() {<a name="line.447"></a>
<span class="sourceLineNo">448</span>        final Quaternion q = new Quaternion(1, 2, 3, 4);<a name="line.448"></a>
<span class="sourceLineNo">449</span>        Assert.assertTrue(q.toString().equals("[1.0 2.0 3.0 4.0]"));<a name="line.449"></a>
<span class="sourceLineNo">450</span>    }<a name="line.450"></a>
<span class="sourceLineNo">451</span>}<a name="line.451"></a>




























































</pre>
</div>
</body>
</html>
