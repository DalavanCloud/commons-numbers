<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span><a name="line.17"></a>
<span class="sourceLineNo">018</span>package org.apache.commons.math3.linear;<a name="line.18"></a>
<span class="sourceLineNo">019</span><a name="line.19"></a>
<span class="sourceLineNo">020</span>import org.junit.Test;<a name="line.20"></a>
<span class="sourceLineNo">021</span>import org.junit.Assert;<a name="line.21"></a>
<span class="sourceLineNo">022</span><a name="line.22"></a>
<span class="sourceLineNo">023</span>public class CholeskyDecompositionTest {<a name="line.23"></a>
<span class="sourceLineNo">024</span><a name="line.24"></a>
<span class="sourceLineNo">025</span>    private double[][] testData = new double[][] {<a name="line.25"></a>
<span class="sourceLineNo">026</span>            {  1,  2,   4,   7,  11 },<a name="line.26"></a>
<span class="sourceLineNo">027</span>            {  2, 13,  23,  38,  58 },<a name="line.27"></a>
<span class="sourceLineNo">028</span>            {  4, 23,  77, 122, 182 },<a name="line.28"></a>
<span class="sourceLineNo">029</span>            {  7, 38, 122, 294, 430 },<a name="line.29"></a>
<span class="sourceLineNo">030</span>            { 11, 58, 182, 430, 855 }<a name="line.30"></a>
<span class="sourceLineNo">031</span>    };<a name="line.31"></a>
<span class="sourceLineNo">032</span><a name="line.32"></a>
<span class="sourceLineNo">033</span>    /** test dimensions */<a name="line.33"></a>
<span class="sourceLineNo">034</span>    @Test<a name="line.34"></a>
<span class="sourceLineNo">035</span>    public void testDimensions() {<a name="line.35"></a>
<span class="sourceLineNo">036</span>        CholeskyDecomposition llt =<a name="line.36"></a>
<span class="sourceLineNo">037</span>            new CholeskyDecomposition(MatrixUtils.createRealMatrix(testData));<a name="line.37"></a>
<span class="sourceLineNo">038</span>        Assert.assertEquals(testData.length, llt.getL().getRowDimension());<a name="line.38"></a>
<span class="sourceLineNo">039</span>        Assert.assertEquals(testData.length, llt.getL().getColumnDimension());<a name="line.39"></a>
<span class="sourceLineNo">040</span>        Assert.assertEquals(testData.length, llt.getLT().getRowDimension());<a name="line.40"></a>
<span class="sourceLineNo">041</span>        Assert.assertEquals(testData.length, llt.getLT().getColumnDimension());<a name="line.41"></a>
<span class="sourceLineNo">042</span>    }<a name="line.42"></a>
<span class="sourceLineNo">043</span><a name="line.43"></a>
<span class="sourceLineNo">044</span>    /** test non-square matrix */<a name="line.44"></a>
<span class="sourceLineNo">045</span>    @Test(expected = NonSquareMatrixException.class)<a name="line.45"></a>
<span class="sourceLineNo">046</span>    public void testNonSquare() {<a name="line.46"></a>
<span class="sourceLineNo">047</span>        new CholeskyDecomposition(MatrixUtils.createRealMatrix(new double[3][2]));<a name="line.47"></a>
<span class="sourceLineNo">048</span>    }<a name="line.48"></a>
<span class="sourceLineNo">049</span><a name="line.49"></a>
<span class="sourceLineNo">050</span>    /** test non-symmetric matrix */<a name="line.50"></a>
<span class="sourceLineNo">051</span>    @Test(expected = NonSymmetricMatrixException.class)<a name="line.51"></a>
<span class="sourceLineNo">052</span>    public void testNotSymmetricMatrixException() {<a name="line.52"></a>
<span class="sourceLineNo">053</span>        double[][] changed = testData.clone();<a name="line.53"></a>
<span class="sourceLineNo">054</span>        changed[0][changed[0].length - 1] += 1.0e-5;<a name="line.54"></a>
<span class="sourceLineNo">055</span>        new CholeskyDecomposition(MatrixUtils.createRealMatrix(changed));<a name="line.55"></a>
<span class="sourceLineNo">056</span>    }<a name="line.56"></a>
<span class="sourceLineNo">057</span><a name="line.57"></a>
<span class="sourceLineNo">058</span>    /** test non positive definite matrix */<a name="line.58"></a>
<span class="sourceLineNo">059</span>    @Test(expected = NonPositiveDefiniteMatrixException.class)<a name="line.59"></a>
<span class="sourceLineNo">060</span>    public void testNotPositiveDefinite() {<a name="line.60"></a>
<span class="sourceLineNo">061</span>        new CholeskyDecomposition(MatrixUtils.createRealMatrix(new double[][] {<a name="line.61"></a>
<span class="sourceLineNo">062</span>                { 14, 11, 13, 15, 24 },<a name="line.62"></a>
<span class="sourceLineNo">063</span>                { 11, 34, 13, 8,  25 },<a name="line.63"></a>
<span class="sourceLineNo">064</span>                { 13, 13, 14, 15, 21 },<a name="line.64"></a>
<span class="sourceLineNo">065</span>                { 15, 8,  15, 18, 23 },<a name="line.65"></a>
<span class="sourceLineNo">066</span>                { 24, 25, 21, 23, 45 }<a name="line.66"></a>
<span class="sourceLineNo">067</span>        }));<a name="line.67"></a>
<span class="sourceLineNo">068</span>    }<a name="line.68"></a>
<span class="sourceLineNo">069</span><a name="line.69"></a>
<span class="sourceLineNo">070</span>    @Test(expected = NonPositiveDefiniteMatrixException.class)<a name="line.70"></a>
<span class="sourceLineNo">071</span>    public void testMath274() {<a name="line.71"></a>
<span class="sourceLineNo">072</span>        new CholeskyDecomposition(MatrixUtils.createRealMatrix(new double[][] {<a name="line.72"></a>
<span class="sourceLineNo">073</span>                { 0.40434286, -0.09376327, 0.30328980, 0.04909388 },<a name="line.73"></a>
<span class="sourceLineNo">074</span>                {-0.09376327,  0.10400408, 0.07137959, 0.04762857 },<a name="line.74"></a>
<span class="sourceLineNo">075</span>                { 0.30328980,  0.07137959, 0.30458776, 0.04882449 },<a name="line.75"></a>
<span class="sourceLineNo">076</span>                { 0.04909388,  0.04762857, 0.04882449, 0.07543265 }<a name="line.76"></a>
<span class="sourceLineNo">077</span><a name="line.77"></a>
<span class="sourceLineNo">078</span>        }));<a name="line.78"></a>
<span class="sourceLineNo">079</span>    }<a name="line.79"></a>
<span class="sourceLineNo">080</span><a name="line.80"></a>
<span class="sourceLineNo">081</span>    /** test A = LLT */<a name="line.81"></a>
<span class="sourceLineNo">082</span>    @Test<a name="line.82"></a>
<span class="sourceLineNo">083</span>    public void testAEqualLLT() {<a name="line.83"></a>
<span class="sourceLineNo">084</span>        RealMatrix matrix = MatrixUtils.createRealMatrix(testData);<a name="line.84"></a>
<span class="sourceLineNo">085</span>        CholeskyDecomposition llt = new CholeskyDecomposition(matrix);<a name="line.85"></a>
<span class="sourceLineNo">086</span>        RealMatrix l  = llt.getL();<a name="line.86"></a>
<span class="sourceLineNo">087</span>        RealMatrix lt = llt.getLT();<a name="line.87"></a>
<span class="sourceLineNo">088</span>        double norm = l.multiply(lt).subtract(matrix).getNorm();<a name="line.88"></a>
<span class="sourceLineNo">089</span>        Assert.assertEquals(0, norm, 1.0e-15);<a name="line.89"></a>
<span class="sourceLineNo">090</span>    }<a name="line.90"></a>
<span class="sourceLineNo">091</span><a name="line.91"></a>
<span class="sourceLineNo">092</span>    /** test that L is lower triangular */<a name="line.92"></a>
<span class="sourceLineNo">093</span>    @Test<a name="line.93"></a>
<span class="sourceLineNo">094</span>    public void testLLowerTriangular() {<a name="line.94"></a>
<span class="sourceLineNo">095</span>        RealMatrix matrix = MatrixUtils.createRealMatrix(testData);<a name="line.95"></a>
<span class="sourceLineNo">096</span>        RealMatrix l = new CholeskyDecomposition(matrix).getL();<a name="line.96"></a>
<span class="sourceLineNo">097</span>        for (int i = 0; i &lt; l.getRowDimension(); i++) {<a name="line.97"></a>
<span class="sourceLineNo">098</span>            for (int j = i + 1; j &lt; l.getColumnDimension(); j++) {<a name="line.98"></a>
<span class="sourceLineNo">099</span>                Assert.assertEquals(0.0, l.getEntry(i, j), 0.0);<a name="line.99"></a>
<span class="sourceLineNo">100</span>            }<a name="line.100"></a>
<span class="sourceLineNo">101</span>        }<a name="line.101"></a>
<span class="sourceLineNo">102</span>    }<a name="line.102"></a>
<span class="sourceLineNo">103</span><a name="line.103"></a>
<span class="sourceLineNo">104</span>    /** test that LT is transpose of L */<a name="line.104"></a>
<span class="sourceLineNo">105</span>    @Test<a name="line.105"></a>
<span class="sourceLineNo">106</span>    public void testLTTransposed() {<a name="line.106"></a>
<span class="sourceLineNo">107</span>        RealMatrix matrix = MatrixUtils.createRealMatrix(testData);<a name="line.107"></a>
<span class="sourceLineNo">108</span>        CholeskyDecomposition llt = new CholeskyDecomposition(matrix);<a name="line.108"></a>
<span class="sourceLineNo">109</span>        RealMatrix l  = llt.getL();<a name="line.109"></a>
<span class="sourceLineNo">110</span>        RealMatrix lt = llt.getLT();<a name="line.110"></a>
<span class="sourceLineNo">111</span>        double norm = l.subtract(lt.transpose()).getNorm();<a name="line.111"></a>
<span class="sourceLineNo">112</span>        Assert.assertEquals(0, norm, 1.0e-15);<a name="line.112"></a>
<span class="sourceLineNo">113</span>    }<a name="line.113"></a>
<span class="sourceLineNo">114</span><a name="line.114"></a>
<span class="sourceLineNo">115</span>    /** test matrices values */<a name="line.115"></a>
<span class="sourceLineNo">116</span>    @Test<a name="line.116"></a>
<span class="sourceLineNo">117</span>    public void testMatricesValues() {<a name="line.117"></a>
<span class="sourceLineNo">118</span>        RealMatrix lRef = MatrixUtils.createRealMatrix(new double[][] {<a name="line.118"></a>
<span class="sourceLineNo">119</span>                {  1,  0,  0,  0,  0 },<a name="line.119"></a>
<span class="sourceLineNo">120</span>                {  2,  3,  0,  0,  0 },<a name="line.120"></a>
<span class="sourceLineNo">121</span>                {  4,  5,  6,  0,  0 },<a name="line.121"></a>
<span class="sourceLineNo">122</span>                {  7,  8,  9, 10,  0 },<a name="line.122"></a>
<span class="sourceLineNo">123</span>                { 11, 12, 13, 14, 15 }<a name="line.123"></a>
<span class="sourceLineNo">124</span>        });<a name="line.124"></a>
<span class="sourceLineNo">125</span>       CholeskyDecomposition llt =<a name="line.125"></a>
<span class="sourceLineNo">126</span>            new CholeskyDecomposition(MatrixUtils.createRealMatrix(testData));<a name="line.126"></a>
<span class="sourceLineNo">127</span><a name="line.127"></a>
<span class="sourceLineNo">128</span>        // check values against known references<a name="line.128"></a>
<span class="sourceLineNo">129</span>        RealMatrix l = llt.getL();<a name="line.129"></a>
<span class="sourceLineNo">130</span>        Assert.assertEquals(0, l.subtract(lRef).getNorm(), 1.0e-13);<a name="line.130"></a>
<span class="sourceLineNo">131</span>        RealMatrix lt = llt.getLT();<a name="line.131"></a>
<span class="sourceLineNo">132</span>        Assert.assertEquals(0, lt.subtract(lRef.transpose()).getNorm(), 1.0e-13);<a name="line.132"></a>
<span class="sourceLineNo">133</span><a name="line.133"></a>
<span class="sourceLineNo">134</span>        // check the same cached instance is returned the second time<a name="line.134"></a>
<span class="sourceLineNo">135</span>        Assert.assertTrue(l  == llt.getL());<a name="line.135"></a>
<span class="sourceLineNo">136</span>        Assert.assertTrue(lt == llt.getLT());<a name="line.136"></a>
<span class="sourceLineNo">137</span>    }<a name="line.137"></a>
<span class="sourceLineNo">138</span>}<a name="line.138"></a>




























































</pre>
</div>
</body>
</html>
