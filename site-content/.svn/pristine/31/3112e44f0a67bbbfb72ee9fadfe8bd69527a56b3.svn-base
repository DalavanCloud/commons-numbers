<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span><a name="line.17"></a>
<span class="sourceLineNo">018</span>package org.apache.commons.math3.stat.descriptive.moment;<a name="line.18"></a>
<span class="sourceLineNo">019</span><a name="line.19"></a>
<span class="sourceLineNo">020</span>import org.apache.commons.math3.TestUtils;<a name="line.20"></a>
<span class="sourceLineNo">021</span>import org.apache.commons.math3.stat.StatUtils;<a name="line.21"></a>
<span class="sourceLineNo">022</span>import org.apache.commons.math3.exception.MathIllegalArgumentException;<a name="line.22"></a>
<span class="sourceLineNo">023</span>import org.junit.Assert;<a name="line.23"></a>
<span class="sourceLineNo">024</span>import org.junit.Test;<a name="line.24"></a>
<span class="sourceLineNo">025</span><a name="line.25"></a>
<span class="sourceLineNo">026</span><a name="line.26"></a>
<span class="sourceLineNo">027</span>public class SemiVarianceTest {<a name="line.27"></a>
<span class="sourceLineNo">028</span><a name="line.28"></a>
<span class="sourceLineNo">029</span>    @Test<a name="line.29"></a>
<span class="sourceLineNo">030</span>    public void testInsufficientData() {<a name="line.30"></a>
<span class="sourceLineNo">031</span>        double[] nothing = null;<a name="line.31"></a>
<span class="sourceLineNo">032</span>        SemiVariance sv = new SemiVariance();<a name="line.32"></a>
<span class="sourceLineNo">033</span>        try {<a name="line.33"></a>
<span class="sourceLineNo">034</span>            sv.evaluate(nothing);<a name="line.34"></a>
<span class="sourceLineNo">035</span>            Assert.fail("null is not a valid data array.");<a name="line.35"></a>
<span class="sourceLineNo">036</span>        } catch (MathIllegalArgumentException iae) {<a name="line.36"></a>
<span class="sourceLineNo">037</span>        }<a name="line.37"></a>
<span class="sourceLineNo">038</span><a name="line.38"></a>
<span class="sourceLineNo">039</span>        try {<a name="line.39"></a>
<span class="sourceLineNo">040</span>            sv.setVarianceDirection(SemiVariance.UPSIDE_VARIANCE);<a name="line.40"></a>
<span class="sourceLineNo">041</span>            sv.evaluate(nothing);<a name="line.41"></a>
<span class="sourceLineNo">042</span>            Assert.fail("null is not a valid data array.");<a name="line.42"></a>
<span class="sourceLineNo">043</span>        } catch (MathIllegalArgumentException iae) {<a name="line.43"></a>
<span class="sourceLineNo">044</span>        }<a name="line.44"></a>
<span class="sourceLineNo">045</span>        nothing = new double[] {};<a name="line.45"></a>
<span class="sourceLineNo">046</span>        Assert.assertTrue(Double.isNaN(sv.evaluate(nothing)));<a name="line.46"></a>
<span class="sourceLineNo">047</span>    }<a name="line.47"></a>
<span class="sourceLineNo">048</span><a name="line.48"></a>
<span class="sourceLineNo">049</span>    @Test<a name="line.49"></a>
<span class="sourceLineNo">050</span>    public void testSingleDown() {<a name="line.50"></a>
<span class="sourceLineNo">051</span>        SemiVariance sv = new SemiVariance();<a name="line.51"></a>
<span class="sourceLineNo">052</span>        double[] values = { 50.0d };<a name="line.52"></a>
<span class="sourceLineNo">053</span>        double singletest = sv.evaluate(values);<a name="line.53"></a>
<span class="sourceLineNo">054</span>        Assert.assertEquals(0.0d, singletest, 0);<a name="line.54"></a>
<span class="sourceLineNo">055</span>    }<a name="line.55"></a>
<span class="sourceLineNo">056</span><a name="line.56"></a>
<span class="sourceLineNo">057</span>    @Test<a name="line.57"></a>
<span class="sourceLineNo">058</span>    public void testSingleUp() {<a name="line.58"></a>
<span class="sourceLineNo">059</span>        SemiVariance sv = new SemiVariance(SemiVariance.UPSIDE_VARIANCE);<a name="line.59"></a>
<span class="sourceLineNo">060</span>        double[] values = { 50.0d };<a name="line.60"></a>
<span class="sourceLineNo">061</span>        double singletest = sv.evaluate(values);<a name="line.61"></a>
<span class="sourceLineNo">062</span>        Assert.assertEquals(0.0d, singletest, 0);<a name="line.62"></a>
<span class="sourceLineNo">063</span>    }<a name="line.63"></a>
<span class="sourceLineNo">064</span><a name="line.64"></a>
<span class="sourceLineNo">065</span>    @Test<a name="line.65"></a>
<span class="sourceLineNo">066</span>    public void testSample() {<a name="line.66"></a>
<span class="sourceLineNo">067</span>        final double[] values = { -2.0d, 2.0d, 4.0d, -2.0d, 22.0d, 11.0d, 3.0d, 14.0d, 5.0d };<a name="line.67"></a>
<span class="sourceLineNo">068</span>        final int length = values.length;<a name="line.68"></a>
<span class="sourceLineNo">069</span>        final double mean = StatUtils.mean(values); // 6.333...<a name="line.69"></a>
<span class="sourceLineNo">070</span>        final SemiVariance sv = new SemiVariance();  // Default bias correction is true<a name="line.70"></a>
<span class="sourceLineNo">071</span>        final double downsideSemiVariance = sv.evaluate(values); // Downside is the default<a name="line.71"></a>
<span class="sourceLineNo">072</span>        Assert.assertEquals(TestUtils.sumSquareDev(new double[] {-2d, 2d, 4d, -2d, 3d, 5d}, mean) / (length - 1),<a name="line.72"></a>
<span class="sourceLineNo">073</span>                downsideSemiVariance, 1E-14);<a name="line.73"></a>
<span class="sourceLineNo">074</span><a name="line.74"></a>
<span class="sourceLineNo">075</span>        sv.setVarianceDirection(SemiVariance.UPSIDE_VARIANCE);<a name="line.75"></a>
<span class="sourceLineNo">076</span>        final double upsideSemiVariance = sv.evaluate(values);<a name="line.76"></a>
<span class="sourceLineNo">077</span>        Assert.assertEquals(TestUtils.sumSquareDev(new double[] {22d, 11d, 14d}, mean) / (length - 1),<a name="line.77"></a>
<span class="sourceLineNo">078</span>                upsideSemiVariance, 1E-14);<a name="line.78"></a>
<span class="sourceLineNo">079</span><a name="line.79"></a>
<span class="sourceLineNo">080</span>        // Verify that upper + lower semivariance against the mean sum to variance<a name="line.80"></a>
<span class="sourceLineNo">081</span>        Assert.assertEquals(StatUtils.variance(values), downsideSemiVariance + upsideSemiVariance, 10e-12);<a name="line.81"></a>
<span class="sourceLineNo">082</span>    }<a name="line.82"></a>
<span class="sourceLineNo">083</span><a name="line.83"></a>
<span class="sourceLineNo">084</span>    @Test<a name="line.84"></a>
<span class="sourceLineNo">085</span>    public void testPopulation() {<a name="line.85"></a>
<span class="sourceLineNo">086</span>        double[] values = { -2.0d, 2.0d, 4.0d, -2.0d, 22.0d, 11.0d, 3.0d, 14.0d, 5.0d };<a name="line.86"></a>
<span class="sourceLineNo">087</span>        SemiVariance sv = new SemiVariance(false);<a name="line.87"></a>
<span class="sourceLineNo">088</span><a name="line.88"></a>
<span class="sourceLineNo">089</span>        double singletest = sv.evaluate(values);<a name="line.89"></a>
<span class="sourceLineNo">090</span>        Assert.assertEquals(19.556d, singletest, 0.01d);<a name="line.90"></a>
<span class="sourceLineNo">091</span><a name="line.91"></a>
<span class="sourceLineNo">092</span>        sv.setVarianceDirection(SemiVariance.UPSIDE_VARIANCE);<a name="line.92"></a>
<span class="sourceLineNo">093</span>        singletest = sv.evaluate(values);<a name="line.93"></a>
<span class="sourceLineNo">094</span>        Assert.assertEquals(36.222d, singletest, 0.01d);<a name="line.94"></a>
<span class="sourceLineNo">095</span>    }<a name="line.95"></a>
<span class="sourceLineNo">096</span><a name="line.96"></a>
<span class="sourceLineNo">097</span>    @Test<a name="line.97"></a>
<span class="sourceLineNo">098</span>    public void testNonMeanCutoffs() {<a name="line.98"></a>
<span class="sourceLineNo">099</span>        double[] values = { -2.0d, 2.0d, 4.0d, -2.0d, 22.0d, 11.0d, 3.0d, 14.0d, 5.0d };<a name="line.99"></a>
<span class="sourceLineNo">100</span>        SemiVariance sv = new SemiVariance(false); // Turn off bias correction - use df = length<a name="line.100"></a>
<span class="sourceLineNo">101</span><a name="line.101"></a>
<span class="sourceLineNo">102</span>        double singletest = sv.evaluate(values, 1.0d, SemiVariance.DOWNSIDE_VARIANCE, false, 0, values.length);<a name="line.102"></a>
<span class="sourceLineNo">103</span>        Assert.assertEquals(TestUtils.sumSquareDev(new double[] { -2d, -2d }, 1.0d) / values.length,<a name="line.103"></a>
<span class="sourceLineNo">104</span>                singletest, 0.01d);<a name="line.104"></a>
<span class="sourceLineNo">105</span><a name="line.105"></a>
<span class="sourceLineNo">106</span>        singletest = sv.evaluate(values, 3.0d, SemiVariance.UPSIDE_VARIANCE, false, 0, values.length);<a name="line.106"></a>
<span class="sourceLineNo">107</span>        Assert.assertEquals(TestUtils.sumSquareDev(new double[] { 4d, 22d, 11d, 14d, 5d }, 3.0d) / values.length, singletest,<a name="line.107"></a>
<span class="sourceLineNo">108</span>                0.01d);<a name="line.108"></a>
<span class="sourceLineNo">109</span>    }<a name="line.109"></a>
<span class="sourceLineNo">110</span><a name="line.110"></a>
<span class="sourceLineNo">111</span>    /**<a name="line.111"></a>
<span class="sourceLineNo">112</span>     * Check that the lower + upper semivariance against the mean sum to the<a name="line.112"></a>
<span class="sourceLineNo">113</span>     * variance.<a name="line.113"></a>
<span class="sourceLineNo">114</span>     */<a name="line.114"></a>
<span class="sourceLineNo">115</span>    @Test<a name="line.115"></a>
<span class="sourceLineNo">116</span>    public void testVarianceDecompMeanCutoff() {<a name="line.116"></a>
<span class="sourceLineNo">117</span>        double[] values = { -2.0d, 2.0d, 4.0d, -2.0d, 22.0d, 11.0d, 3.0d, 14.0d, 5.0d };<a name="line.117"></a>
<span class="sourceLineNo">118</span>        double variance = StatUtils.variance(values);<a name="line.118"></a>
<span class="sourceLineNo">119</span>        SemiVariance sv = new SemiVariance(true); // Bias corrected<a name="line.119"></a>
<span class="sourceLineNo">120</span>        sv.setVarianceDirection(SemiVariance.DOWNSIDE_VARIANCE);<a name="line.120"></a>
<span class="sourceLineNo">121</span>        final double lower = sv.evaluate(values);<a name="line.121"></a>
<span class="sourceLineNo">122</span>        sv.setVarianceDirection(SemiVariance.UPSIDE_VARIANCE);<a name="line.122"></a>
<span class="sourceLineNo">123</span>        final double upper = sv.evaluate(values);<a name="line.123"></a>
<span class="sourceLineNo">124</span>        Assert.assertEquals(variance, lower + upper, 10e-12);<a name="line.124"></a>
<span class="sourceLineNo">125</span>    }<a name="line.125"></a>
<span class="sourceLineNo">126</span><a name="line.126"></a>
<span class="sourceLineNo">127</span>    /**<a name="line.127"></a>
<span class="sourceLineNo">128</span>     * Check that upper and lower semivariances against a cutoff sum to the sum<a name="line.128"></a>
<span class="sourceLineNo">129</span>     * of squared deviations of the full set of values against the cutoff<a name="line.129"></a>
<span class="sourceLineNo">130</span>     * divided by df = length - 1 (assuming bias-corrected).<a name="line.130"></a>
<span class="sourceLineNo">131</span>     */<a name="line.131"></a>
<span class="sourceLineNo">132</span>    @Test<a name="line.132"></a>
<span class="sourceLineNo">133</span>    public void testVarianceDecompNonMeanCutoff() {<a name="line.133"></a>
<span class="sourceLineNo">134</span>        double[] values = { -2.0d, 2.0d, 4.0d, -2.0d, 22.0d, 11.0d, 3.0d, 14.0d, 5.0d };<a name="line.134"></a>
<span class="sourceLineNo">135</span>        double target = 0;<a name="line.135"></a>
<span class="sourceLineNo">136</span>        double totalSumOfSquares = TestUtils.sumSquareDev(values, target);<a name="line.136"></a>
<span class="sourceLineNo">137</span>        SemiVariance sv = new SemiVariance(true); // Bias corrected<a name="line.137"></a>
<span class="sourceLineNo">138</span>        sv.setVarianceDirection(SemiVariance.DOWNSIDE_VARIANCE);<a name="line.138"></a>
<span class="sourceLineNo">139</span>        double lower = sv.evaluate(values, target);<a name="line.139"></a>
<span class="sourceLineNo">140</span>        sv.setVarianceDirection(SemiVariance.UPSIDE_VARIANCE);<a name="line.140"></a>
<span class="sourceLineNo">141</span>        double upper = sv.evaluate(values, target);<a name="line.141"></a>
<span class="sourceLineNo">142</span>        Assert.assertEquals(totalSumOfSquares / (values.length - 1), lower + upper, 10e-12);<a name="line.142"></a>
<span class="sourceLineNo">143</span>    }<a name="line.143"></a>
<span class="sourceLineNo">144</span><a name="line.144"></a>
<span class="sourceLineNo">145</span>    @Test<a name="line.145"></a>
<span class="sourceLineNo">146</span>    public void testNoVariance() {<a name="line.146"></a>
<span class="sourceLineNo">147</span>        final double[] values = {100d, 100d, 100d, 100d};<a name="line.147"></a>
<span class="sourceLineNo">148</span>        SemiVariance sv = new SemiVariance();<a name="line.148"></a>
<span class="sourceLineNo">149</span>        Assert.assertEquals(0, sv.evaluate(values), 10E-12);<a name="line.149"></a>
<span class="sourceLineNo">150</span>        Assert.assertEquals(0, sv.evaluate(values, 100d), 10E-12);<a name="line.150"></a>
<span class="sourceLineNo">151</span>        Assert.assertEquals(0, sv.evaluate(values, 100d, SemiVariance.UPSIDE_VARIANCE, false, 0, values.length), 10E-12);<a name="line.151"></a>
<span class="sourceLineNo">152</span>    }<a name="line.152"></a>
<span class="sourceLineNo">153</span>}<a name="line.153"></a>




























































</pre>
</div>
</body>
</html>
