<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span><a name="line.17"></a>
<span class="sourceLineNo">018</span>package org.apache.commons.math3.linear;<a name="line.18"></a>
<span class="sourceLineNo">019</span><a name="line.19"></a>
<span class="sourceLineNo">020</span>import org.junit.Test;<a name="line.20"></a>
<span class="sourceLineNo">021</span>import org.junit.Assert;<a name="line.21"></a>
<span class="sourceLineNo">022</span><a name="line.22"></a>
<span class="sourceLineNo">023</span>public class RectangularCholeskyDecompositionTest {<a name="line.23"></a>
<span class="sourceLineNo">024</span><a name="line.24"></a>
<span class="sourceLineNo">025</span>    @Test<a name="line.25"></a>
<span class="sourceLineNo">026</span>    public void testDecomposition3x3() {<a name="line.26"></a>
<span class="sourceLineNo">027</span><a name="line.27"></a>
<span class="sourceLineNo">028</span>        RealMatrix m = MatrixUtils.createRealMatrix(new double[][] {<a name="line.28"></a>
<span class="sourceLineNo">029</span>            { 1,   9,   9 },<a name="line.29"></a>
<span class="sourceLineNo">030</span>            { 9, 225, 225 },<a name="line.30"></a>
<span class="sourceLineNo">031</span>            { 9, 225, 625 }<a name="line.31"></a>
<span class="sourceLineNo">032</span>        });<a name="line.32"></a>
<span class="sourceLineNo">033</span><a name="line.33"></a>
<span class="sourceLineNo">034</span>        RectangularCholeskyDecomposition d =<a name="line.34"></a>
<span class="sourceLineNo">035</span>                new RectangularCholeskyDecomposition(m, 1.0e-6);<a name="line.35"></a>
<span class="sourceLineNo">036</span><a name="line.36"></a>
<span class="sourceLineNo">037</span>        // as this decomposition permutes lines and columns, the root is NOT triangular<a name="line.37"></a>
<span class="sourceLineNo">038</span>        // (in fact here it is the lower right part of the matrix which is zero and<a name="line.38"></a>
<span class="sourceLineNo">039</span>        //  the upper left non-zero)<a name="line.39"></a>
<span class="sourceLineNo">040</span>        Assert.assertEquals(0.8,  d.getRootMatrix().getEntry(0, 2), 1.0e-15);<a name="line.40"></a>
<span class="sourceLineNo">041</span>        Assert.assertEquals(25.0, d.getRootMatrix().getEntry(2, 0), 1.0e-15);<a name="line.41"></a>
<span class="sourceLineNo">042</span>        Assert.assertEquals(0.0,  d.getRootMatrix().getEntry(2, 2), 1.0e-15);<a name="line.42"></a>
<span class="sourceLineNo">043</span><a name="line.43"></a>
<span class="sourceLineNo">044</span>        RealMatrix root = d.getRootMatrix();<a name="line.44"></a>
<span class="sourceLineNo">045</span>        RealMatrix rebuiltM = root.multiply(root.transpose());<a name="line.45"></a>
<span class="sourceLineNo">046</span>        Assert.assertEquals(0.0, m.subtract(rebuiltM).getNorm(), 1.0e-15);<a name="line.46"></a>
<span class="sourceLineNo">047</span><a name="line.47"></a>
<span class="sourceLineNo">048</span>    }<a name="line.48"></a>
<span class="sourceLineNo">049</span><a name="line.49"></a>
<span class="sourceLineNo">050</span>    @Test<a name="line.50"></a>
<span class="sourceLineNo">051</span>    public void testFullRank() {<a name="line.51"></a>
<span class="sourceLineNo">052</span><a name="line.52"></a>
<span class="sourceLineNo">053</span>        RealMatrix base = MatrixUtils.createRealMatrix(new double[][] {<a name="line.53"></a>
<span class="sourceLineNo">054</span>            { 0.1159548705,      0.,           0.,           0.      },<a name="line.54"></a>
<span class="sourceLineNo">055</span>            { 0.0896442724, 0.1223540781,      0.,           0.      },<a name="line.55"></a>
<span class="sourceLineNo">056</span>            { 0.0852155322, 4.558668e-3,  0.1083577299,      0.      },<a name="line.56"></a>
<span class="sourceLineNo">057</span>            { 0.0905486674, 0.0213768077, 0.0128878333, 0.1014155693 }<a name="line.57"></a>
<span class="sourceLineNo">058</span>        });<a name="line.58"></a>
<span class="sourceLineNo">059</span><a name="line.59"></a>
<span class="sourceLineNo">060</span>        RealMatrix m = base.multiply(base.transpose());<a name="line.60"></a>
<span class="sourceLineNo">061</span><a name="line.61"></a>
<span class="sourceLineNo">062</span>        RectangularCholeskyDecomposition d =<a name="line.62"></a>
<span class="sourceLineNo">063</span>                new RectangularCholeskyDecomposition(m, 1.0e-10);<a name="line.63"></a>
<span class="sourceLineNo">064</span><a name="line.64"></a>
<span class="sourceLineNo">065</span>        RealMatrix root = d.getRootMatrix();<a name="line.65"></a>
<span class="sourceLineNo">066</span>        RealMatrix rebuiltM = root.multiply(root.transpose());<a name="line.66"></a>
<span class="sourceLineNo">067</span>        Assert.assertEquals(0.0, m.subtract(rebuiltM).getNorm(), 1.0e-15);<a name="line.67"></a>
<span class="sourceLineNo">068</span><a name="line.68"></a>
<span class="sourceLineNo">069</span>        // the pivoted Cholesky decomposition is *not* unique. Here, the root is<a name="line.69"></a>
<span class="sourceLineNo">070</span>        // not equal to the original trianbular base matrix<a name="line.70"></a>
<span class="sourceLineNo">071</span>        Assert.assertTrue(root.subtract(base).getNorm() &gt; 0.3);<a name="line.71"></a>
<span class="sourceLineNo">072</span><a name="line.72"></a>
<span class="sourceLineNo">073</span>    }<a name="line.73"></a>
<span class="sourceLineNo">074</span><a name="line.74"></a>
<span class="sourceLineNo">075</span>    @Test<a name="line.75"></a>
<span class="sourceLineNo">076</span>    public void testMath789() {<a name="line.76"></a>
<span class="sourceLineNo">077</span><a name="line.77"></a>
<span class="sourceLineNo">078</span>        final RealMatrix m1 = MatrixUtils.createRealMatrix(new double[][]{<a name="line.78"></a>
<span class="sourceLineNo">079</span>            {0.013445532, 0.010394690, 0.009881156, 0.010499559},<a name="line.79"></a>
<span class="sourceLineNo">080</span>            {0.010394690, 0.023006616, 0.008196856, 0.010732709},<a name="line.80"></a>
<span class="sourceLineNo">081</span>            {0.009881156, 0.008196856, 0.019023866, 0.009210099},<a name="line.81"></a>
<span class="sourceLineNo">082</span>            {0.010499559, 0.010732709, 0.009210099, 0.019107243}<a name="line.82"></a>
<span class="sourceLineNo">083</span>        });<a name="line.83"></a>
<span class="sourceLineNo">084</span>        composeAndTest(m1, 4);<a name="line.84"></a>
<span class="sourceLineNo">085</span><a name="line.85"></a>
<span class="sourceLineNo">086</span>        final RealMatrix m2 = MatrixUtils.createRealMatrix(new double[][]{<a name="line.86"></a>
<span class="sourceLineNo">087</span>            {0.0, 0.0, 0.0, 0.0, 0.0},<a name="line.87"></a>
<span class="sourceLineNo">088</span>            {0.0, 0.013445532, 0.010394690, 0.009881156, 0.010499559},<a name="line.88"></a>
<span class="sourceLineNo">089</span>            {0.0, 0.010394690, 0.023006616, 0.008196856, 0.010732709},<a name="line.89"></a>
<span class="sourceLineNo">090</span>            {0.0, 0.009881156, 0.008196856, 0.019023866, 0.009210099},<a name="line.90"></a>
<span class="sourceLineNo">091</span>            {0.0, 0.010499559, 0.010732709, 0.009210099, 0.019107243}<a name="line.91"></a>
<span class="sourceLineNo">092</span>        });<a name="line.92"></a>
<span class="sourceLineNo">093</span>        composeAndTest(m2, 4);<a name="line.93"></a>
<span class="sourceLineNo">094</span><a name="line.94"></a>
<span class="sourceLineNo">095</span>        final RealMatrix m3 = MatrixUtils.createRealMatrix(new double[][]{<a name="line.95"></a>
<span class="sourceLineNo">096</span>            {0.013445532, 0.010394690, 0.0, 0.009881156, 0.010499559},<a name="line.96"></a>
<span class="sourceLineNo">097</span>            {0.010394690, 0.023006616, 0.0, 0.008196856, 0.010732709},<a name="line.97"></a>
<span class="sourceLineNo">098</span>            {0.0, 0.0, 0.0, 0.0, 0.0},<a name="line.98"></a>
<span class="sourceLineNo">099</span>            {0.009881156, 0.008196856, 0.0, 0.019023866, 0.009210099},<a name="line.99"></a>
<span class="sourceLineNo">100</span>            {0.010499559, 0.010732709, 0.0, 0.009210099, 0.019107243}<a name="line.100"></a>
<span class="sourceLineNo">101</span>        });<a name="line.101"></a>
<span class="sourceLineNo">102</span>        composeAndTest(m3, 4);<a name="line.102"></a>
<span class="sourceLineNo">103</span><a name="line.103"></a>
<span class="sourceLineNo">104</span>    }<a name="line.104"></a>
<span class="sourceLineNo">105</span>    <a name="line.105"></a>
<span class="sourceLineNo">106</span>    private void composeAndTest(RealMatrix m, int expectedRank) {<a name="line.106"></a>
<span class="sourceLineNo">107</span>        RectangularCholeskyDecomposition r = new RectangularCholeskyDecomposition(m);<a name="line.107"></a>
<span class="sourceLineNo">108</span>        Assert.assertEquals(expectedRank, r.getRank());<a name="line.108"></a>
<span class="sourceLineNo">109</span>        RealMatrix root = r.getRootMatrix();<a name="line.109"></a>
<span class="sourceLineNo">110</span>        RealMatrix rebuiltMatrix = root.multiply(root.transpose());<a name="line.110"></a>
<span class="sourceLineNo">111</span>        Assert.assertEquals(0.0, m.subtract(rebuiltMatrix).getNorm(), 1.0e-16);<a name="line.111"></a>
<span class="sourceLineNo">112</span>    }<a name="line.112"></a>
<span class="sourceLineNo">113</span><a name="line.113"></a>
<span class="sourceLineNo">114</span>}<a name="line.114"></a>




























































</pre>
</div>
</body>
</html>
