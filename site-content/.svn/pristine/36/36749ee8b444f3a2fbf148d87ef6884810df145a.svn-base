<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>UnivariateSolverUtils xref</title>
<link type="text/css" rel="stylesheet" href="../../../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../apidocs/org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Licensed to the Apache Software Foundation (ASF) under one or more</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> * contributor license agreements.  See the NOTICE file distributed with</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * this work for additional information regarding copyright ownership.</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * The ASF licenses this file to You under the Apache License, Version 2.0</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * (the "License"); you may not use this file except in compliance with</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> * the License.  You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *      <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">package</strong> org.apache.commons.math3.analysis.solvers;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.analysis.UnivariateFunction;
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.NoBracketingException;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.NotStrictlyPositiveException;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.NullArgumentException;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.NumberIsTooLargeException;
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.util.LocalizedFormats;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.util.FastMath;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <em class="jxr_javadoccomment"> * Utility routines for {@link UnivariateSolver} objects.</em>
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../../org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils.html">UnivariateSolverUtils</a> {
<a class="jxr_linenumber" name="L32" href="#L32">32</a>      <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <em class="jxr_javadoccomment">     * Class contains only static methods.</em>
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L35" href="#L35">35</a>      <strong class="jxr_keyword">private</strong> <a href="../../../../../../org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils.html">UnivariateSolverUtils</a>() {}
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  
<a class="jxr_linenumber" name="L37" href="#L37">37</a>      <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L38" href="#L38">38</a>  <em class="jxr_javadoccomment">     * Convenience method to find a zero of a univariate real function.  A default</em>
<a class="jxr_linenumber" name="L39" href="#L39">39</a>  <em class="jxr_javadoccomment">     * solver is used.</em>
<a class="jxr_linenumber" name="L40" href="#L40">40</a>  <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L41" href="#L41">41</a>  <em class="jxr_javadoccomment">     * @param function Function.</em>
<a class="jxr_linenumber" name="L42" href="#L42">42</a>  <em class="jxr_javadoccomment">     * @param x0 Lower bound for the interval.</em>
<a class="jxr_linenumber" name="L43" href="#L43">43</a>  <em class="jxr_javadoccomment">     * @param x1 Upper bound for the interval.</em>
<a class="jxr_linenumber" name="L44" href="#L44">44</a>  <em class="jxr_javadoccomment">     * @return a value where the function is zero.</em>
<a class="jxr_linenumber" name="L45" href="#L45">45</a>  <em class="jxr_javadoccomment">     * @throws NoBracketingException if the function has the same sign at the</em>
<a class="jxr_linenumber" name="L46" href="#L46">46</a>  <em class="jxr_javadoccomment">     * endpoints.</em>
<a class="jxr_linenumber" name="L47" href="#L47">47</a>  <em class="jxr_javadoccomment">     * @throws NullArgumentException if {@code function} is {@code null}.</em>
<a class="jxr_linenumber" name="L48" href="#L48">48</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L49" href="#L49">49</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">double</strong> solve(<a href="../../../../../../org/apache/commons/math3/analysis/UnivariateFunction.html">UnivariateFunction</a> function, <strong class="jxr_keyword">double</strong> x0, <strong class="jxr_keyword">double</strong> x1)
<a class="jxr_linenumber" name="L50" href="#L50">50</a>          <strong class="jxr_keyword">throws</strong> NullArgumentException,
<a class="jxr_linenumber" name="L51" href="#L51">51</a>                 <a href="../../../../../../org/apache/commons/math3/exception/NoBracketingException.html">NoBracketingException</a> {
<a class="jxr_linenumber" name="L52" href="#L52">52</a>          <strong class="jxr_keyword">if</strong> (function == <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L53" href="#L53">53</a>              <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/exception/NullArgumentException.html">NullArgumentException</a>(LocalizedFormats.FUNCTION);
<a class="jxr_linenumber" name="L54" href="#L54">54</a>          }
<a class="jxr_linenumber" name="L55" href="#L55">55</a>          <strong class="jxr_keyword">final</strong> <a href="../../../../../../org/apache/commons/math3/analysis/solvers/UnivariateSolver.html">UnivariateSolver</a> solver = <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/analysis/solvers/BrentSolver.html">BrentSolver</a>();
<a class="jxr_linenumber" name="L56" href="#L56">56</a>          <strong class="jxr_keyword">return</strong> solver.solve(Integer.MAX_VALUE, function, x0, x1);
<a class="jxr_linenumber" name="L57" href="#L57">57</a>      }
<a class="jxr_linenumber" name="L58" href="#L58">58</a>  
<a class="jxr_linenumber" name="L59" href="#L59">59</a>      <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L60" href="#L60">60</a>  <em class="jxr_javadoccomment">     * Convenience method to find a zero of a univariate real function.  A default</em>
<a class="jxr_linenumber" name="L61" href="#L61">61</a>  <em class="jxr_javadoccomment">     * solver is used.</em>
<a class="jxr_linenumber" name="L62" href="#L62">62</a>  <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L63" href="#L63">63</a>  <em class="jxr_javadoccomment">     * @param function Function.</em>
<a class="jxr_linenumber" name="L64" href="#L64">64</a>  <em class="jxr_javadoccomment">     * @param x0 Lower bound for the interval.</em>
<a class="jxr_linenumber" name="L65" href="#L65">65</a>  <em class="jxr_javadoccomment">     * @param x1 Upper bound for the interval.</em>
<a class="jxr_linenumber" name="L66" href="#L66">66</a>  <em class="jxr_javadoccomment">     * @param absoluteAccuracy Accuracy to be used by the solver.</em>
<a class="jxr_linenumber" name="L67" href="#L67">67</a>  <em class="jxr_javadoccomment">     * @return a value where the function is zero.</em>
<a class="jxr_linenumber" name="L68" href="#L68">68</a>  <em class="jxr_javadoccomment">     * @throws NoBracketingException if the function has the same sign at the</em>
<a class="jxr_linenumber" name="L69" href="#L69">69</a>  <em class="jxr_javadoccomment">     * endpoints.</em>
<a class="jxr_linenumber" name="L70" href="#L70">70</a>  <em class="jxr_javadoccomment">     * @throws NullArgumentException if {@code function} is {@code null}.</em>
<a class="jxr_linenumber" name="L71" href="#L71">71</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L72" href="#L72">72</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">double</strong> solve(<a href="../../../../../../org/apache/commons/math3/analysis/UnivariateFunction.html">UnivariateFunction</a> function,
<a class="jxr_linenumber" name="L73" href="#L73">73</a>                                 <strong class="jxr_keyword">double</strong> x0, <strong class="jxr_keyword">double</strong> x1,
<a class="jxr_linenumber" name="L74" href="#L74">74</a>                                 <strong class="jxr_keyword">double</strong> absoluteAccuracy)
<a class="jxr_linenumber" name="L75" href="#L75">75</a>          <strong class="jxr_keyword">throws</strong> NullArgumentException,
<a class="jxr_linenumber" name="L76" href="#L76">76</a>                 <a href="../../../../../../org/apache/commons/math3/exception/NoBracketingException.html">NoBracketingException</a> {
<a class="jxr_linenumber" name="L77" href="#L77">77</a>          <strong class="jxr_keyword">if</strong> (function == <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L78" href="#L78">78</a>              <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/exception/NullArgumentException.html">NullArgumentException</a>(LocalizedFormats.FUNCTION);
<a class="jxr_linenumber" name="L79" href="#L79">79</a>          }
<a class="jxr_linenumber" name="L80" href="#L80">80</a>          <strong class="jxr_keyword">final</strong> <a href="../../../../../../org/apache/commons/math3/analysis/solvers/UnivariateSolver.html">UnivariateSolver</a> solver = <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/analysis/solvers/BrentSolver.html">BrentSolver</a>(absoluteAccuracy);
<a class="jxr_linenumber" name="L81" href="#L81">81</a>          <strong class="jxr_keyword">return</strong> solver.solve(Integer.MAX_VALUE, function, x0, x1);
<a class="jxr_linenumber" name="L82" href="#L82">82</a>      }
<a class="jxr_linenumber" name="L83" href="#L83">83</a>  
<a class="jxr_linenumber" name="L84" href="#L84">84</a>      <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L85" href="#L85">85</a>  <em class="jxr_javadoccomment">     * Force a root found by a non-bracketing solver to lie on a specified side,</em>
<a class="jxr_linenumber" name="L86" href="#L86">86</a>  <em class="jxr_javadoccomment">     * as if the solver were a bracketing one.</em>
<a class="jxr_linenumber" name="L87" href="#L87">87</a>  <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L88" href="#L88">88</a>  <em class="jxr_javadoccomment">     * @param maxEval maximal number of new evaluations of the function</em>
<a class="jxr_linenumber" name="L89" href="#L89">89</a>  <em class="jxr_javadoccomment">     * (evaluations already done for finding the root should have already been subtracted</em>
<a class="jxr_linenumber" name="L90" href="#L90">90</a>  <em class="jxr_javadoccomment">     * from this number)</em>
<a class="jxr_linenumber" name="L91" href="#L91">91</a>  <em class="jxr_javadoccomment">     * @param f function to solve</em>
<a class="jxr_linenumber" name="L92" href="#L92">92</a>  <em class="jxr_javadoccomment">     * @param bracketing bracketing solver to use for shifting the root</em>
<a class="jxr_linenumber" name="L93" href="#L93">93</a>  <em class="jxr_javadoccomment">     * @param baseRoot original root found by a previous non-bracketing solver</em>
<a class="jxr_linenumber" name="L94" href="#L94">94</a>  <em class="jxr_javadoccomment">     * @param min minimal bound of the search interval</em>
<a class="jxr_linenumber" name="L95" href="#L95">95</a>  <em class="jxr_javadoccomment">     * @param max maximal bound of the search interval</em>
<a class="jxr_linenumber" name="L96" href="#L96">96</a>  <em class="jxr_javadoccomment">     * @param allowedSolution the kind of solutions that the root-finding algorithm may</em>
<a class="jxr_linenumber" name="L97" href="#L97">97</a>  <em class="jxr_javadoccomment">     * accept as solutions.</em>
<a class="jxr_linenumber" name="L98" href="#L98">98</a>  <em class="jxr_javadoccomment">     * @return a root approximation, on the specified side of the exact root</em>
<a class="jxr_linenumber" name="L99" href="#L99">99</a>  <em class="jxr_javadoccomment">     * @throws NoBracketingException if the function has the same sign at the</em>
<a class="jxr_linenumber" name="L100" href="#L100">100</a> <em class="jxr_javadoccomment">     * endpoints.</em>
<a class="jxr_linenumber" name="L101" href="#L101">101</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L102" href="#L102">102</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">double</strong> forceSide(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> maxEval, <strong class="jxr_keyword">final</strong> <a href="../../../../../../org/apache/commons/math3/analysis/UnivariateFunction.html">UnivariateFunction</a> f,
<a class="jxr_linenumber" name="L103" href="#L103">103</a>                                    <strong class="jxr_keyword">final</strong> BracketedUnivariateSolver&lt;UnivariateFunction&gt; bracketing,
<a class="jxr_linenumber" name="L104" href="#L104">104</a>                                    <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> baseRoot, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> min, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> max,
<a class="jxr_linenumber" name="L105" href="#L105">105</a>                                    <strong class="jxr_keyword">final</strong> <a href="../../../../../../org/apache/commons/math3/analysis/solvers/AllowedSolution.html">AllowedSolution</a> allowedSolution)
<a class="jxr_linenumber" name="L106" href="#L106">106</a>         <strong class="jxr_keyword">throws</strong> <a href="../../../../../../org/apache/commons/math3/exception/NoBracketingException.html">NoBracketingException</a> {
<a class="jxr_linenumber" name="L107" href="#L107">107</a> 
<a class="jxr_linenumber" name="L108" href="#L108">108</a>         <strong class="jxr_keyword">if</strong> (allowedSolution == AllowedSolution.ANY_SIDE) {
<a class="jxr_linenumber" name="L109" href="#L109">109</a>             <em class="jxr_comment">// no further bracketing required</em>
<a class="jxr_linenumber" name="L110" href="#L110">110</a>             <strong class="jxr_keyword">return</strong> baseRoot;
<a class="jxr_linenumber" name="L111" href="#L111">111</a>         }
<a class="jxr_linenumber" name="L112" href="#L112">112</a> 
<a class="jxr_linenumber" name="L113" href="#L113">113</a>         <em class="jxr_comment">// find a very small interval bracketing the root</em>
<a class="jxr_linenumber" name="L114" href="#L114">114</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> step = FastMath.max(bracketing.getAbsoluteAccuracy(),
<a class="jxr_linenumber" name="L115" href="#L115">115</a>                                          FastMath.abs(baseRoot * bracketing.getRelativeAccuracy()));
<a class="jxr_linenumber" name="L116" href="#L116">116</a>         <strong class="jxr_keyword">double</strong> xLo        = FastMath.max(min, baseRoot - step);
<a class="jxr_linenumber" name="L117" href="#L117">117</a>         <strong class="jxr_keyword">double</strong> fLo        = f.value(xLo);
<a class="jxr_linenumber" name="L118" href="#L118">118</a>         <strong class="jxr_keyword">double</strong> xHi        = FastMath.min(max, baseRoot + step);
<a class="jxr_linenumber" name="L119" href="#L119">119</a>         <strong class="jxr_keyword">double</strong> fHi        = f.value(xHi);
<a class="jxr_linenumber" name="L120" href="#L120">120</a>         <strong class="jxr_keyword">int</strong> remainingEval = maxEval - 2;
<a class="jxr_linenumber" name="L121" href="#L121">121</a>         <strong class="jxr_keyword">while</strong> (remainingEval &gt; 0) {
<a class="jxr_linenumber" name="L122" href="#L122">122</a> 
<a class="jxr_linenumber" name="L123" href="#L123">123</a>             <strong class="jxr_keyword">if</strong> ((fLo &gt;= 0 &amp;&amp; fHi &lt;= 0) || (fLo &lt;= 0 &amp;&amp; fHi &gt;= 0)) {
<a class="jxr_linenumber" name="L124" href="#L124">124</a>                 <em class="jxr_comment">// compute the root on the selected side</em>
<a class="jxr_linenumber" name="L125" href="#L125">125</a>                 <strong class="jxr_keyword">return</strong> bracketing.solve(remainingEval, f, xLo, xHi, baseRoot, allowedSolution);
<a class="jxr_linenumber" name="L126" href="#L126">126</a>             }
<a class="jxr_linenumber" name="L127" href="#L127">127</a> 
<a class="jxr_linenumber" name="L128" href="#L128">128</a>             <em class="jxr_comment">// try increasing the interval</em>
<a class="jxr_linenumber" name="L129" href="#L129">129</a>             <strong class="jxr_keyword">boolean</strong> changeLo = false;
<a class="jxr_linenumber" name="L130" href="#L130">130</a>             <strong class="jxr_keyword">boolean</strong> changeHi = false;
<a class="jxr_linenumber" name="L131" href="#L131">131</a>             <strong class="jxr_keyword">if</strong> (fLo &lt; fHi) {
<a class="jxr_linenumber" name="L132" href="#L132">132</a>                 <em class="jxr_comment">// increasing function</em>
<a class="jxr_linenumber" name="L133" href="#L133">133</a>                 <strong class="jxr_keyword">if</strong> (fLo &gt;= 0) {
<a class="jxr_linenumber" name="L134" href="#L134">134</a>                     changeLo = <strong class="jxr_keyword">true</strong>;
<a class="jxr_linenumber" name="L135" href="#L135">135</a>                 } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L136" href="#L136">136</a>                     changeHi = <strong class="jxr_keyword">true</strong>;
<a class="jxr_linenumber" name="L137" href="#L137">137</a>                 }
<a class="jxr_linenumber" name="L138" href="#L138">138</a>             } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (fLo &gt; fHi) {
<a class="jxr_linenumber" name="L139" href="#L139">139</a>                 <em class="jxr_comment">// decreasing function</em>
<a class="jxr_linenumber" name="L140" href="#L140">140</a>                 <strong class="jxr_keyword">if</strong> (fLo &lt;= 0) {
<a class="jxr_linenumber" name="L141" href="#L141">141</a>                     changeLo = <strong class="jxr_keyword">true</strong>;
<a class="jxr_linenumber" name="L142" href="#L142">142</a>                 } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L143" href="#L143">143</a>                     changeHi = <strong class="jxr_keyword">true</strong>;
<a class="jxr_linenumber" name="L144" href="#L144">144</a>                 }
<a class="jxr_linenumber" name="L145" href="#L145">145</a>             } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L146" href="#L146">146</a>                 <em class="jxr_comment">// unknown variation</em>
<a class="jxr_linenumber" name="L147" href="#L147">147</a>                 changeLo = <strong class="jxr_keyword">true</strong>;
<a class="jxr_linenumber" name="L148" href="#L148">148</a>                 changeHi = <strong class="jxr_keyword">true</strong>;
<a class="jxr_linenumber" name="L149" href="#L149">149</a>             }
<a class="jxr_linenumber" name="L150" href="#L150">150</a> 
<a class="jxr_linenumber" name="L151" href="#L151">151</a>             <em class="jxr_comment">// update the lower bound</em>
<a class="jxr_linenumber" name="L152" href="#L152">152</a>             <strong class="jxr_keyword">if</strong> (changeLo) {
<a class="jxr_linenumber" name="L153" href="#L153">153</a>                 xLo = FastMath.max(min, xLo - step);
<a class="jxr_linenumber" name="L154" href="#L154">154</a>                 fLo  = f.value(xLo);
<a class="jxr_linenumber" name="L155" href="#L155">155</a>                 remainingEval--;
<a class="jxr_linenumber" name="L156" href="#L156">156</a>             }
<a class="jxr_linenumber" name="L157" href="#L157">157</a> 
<a class="jxr_linenumber" name="L158" href="#L158">158</a>             <em class="jxr_comment">// update the higher bound</em>
<a class="jxr_linenumber" name="L159" href="#L159">159</a>             <strong class="jxr_keyword">if</strong> (changeHi) {
<a class="jxr_linenumber" name="L160" href="#L160">160</a>                 xHi = FastMath.min(max, xHi + step);
<a class="jxr_linenumber" name="L161" href="#L161">161</a>                 fHi  = f.value(xHi);
<a class="jxr_linenumber" name="L162" href="#L162">162</a>                 remainingEval--;
<a class="jxr_linenumber" name="L163" href="#L163">163</a>             }
<a class="jxr_linenumber" name="L164" href="#L164">164</a> 
<a class="jxr_linenumber" name="L165" href="#L165">165</a>         }
<a class="jxr_linenumber" name="L166" href="#L166">166</a> 
<a class="jxr_linenumber" name="L167" href="#L167">167</a>         <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/exception/NoBracketingException.html">NoBracketingException</a>(LocalizedFormats.FAILED_BRACKETING,
<a class="jxr_linenumber" name="L168" href="#L168">168</a>                                         xLo, xHi, fLo, fHi,
<a class="jxr_linenumber" name="L169" href="#L169">169</a>                                         maxEval - remainingEval, maxEval, baseRoot,
<a class="jxr_linenumber" name="L170" href="#L170">170</a>                                         min, max);
<a class="jxr_linenumber" name="L171" href="#L171">171</a> 
<a class="jxr_linenumber" name="L172" href="#L172">172</a>     }
<a class="jxr_linenumber" name="L173" href="#L173">173</a> 
<a class="jxr_linenumber" name="L174" href="#L174">174</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L175" href="#L175">175</a> <em class="jxr_javadoccomment">     * This method simply calls {@link #bracket(UnivariateFunction, double, double, double,</em>
<a class="jxr_linenumber" name="L176" href="#L176">176</a> <em class="jxr_javadoccomment">     * double, double, int) bracket(function, initial, lowerBound, upperBound, q, r, maximumIterations)}</em>
<a class="jxr_linenumber" name="L177" href="#L177">177</a> <em class="jxr_javadoccomment">     * with {@code q} and {@code r} set to 1.0 and {@code maximumIterations} set to {@code Integer.MAX_VALUE}.</em>
<a class="jxr_linenumber" name="L178" href="#L178">178</a> <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L179" href="#L179">179</a> <em class="jxr_javadoccomment">     * &lt;strong&gt;Note: &lt;/strong&gt; this method can take {@code Integer.MAX_VALUE}</em>
<a class="jxr_linenumber" name="L180" href="#L180">180</a> <em class="jxr_javadoccomment">     * iterations to throw a {@code ConvergenceException.}  Unless you are</em>
<a class="jxr_linenumber" name="L181" href="#L181">181</a> <em class="jxr_javadoccomment">     * confident that there is a root between {@code lowerBound} and</em>
<a class="jxr_linenumber" name="L182" href="#L182">182</a> <em class="jxr_javadoccomment">     * {@code upperBound} near {@code initial}, it is better to use</em>
<a class="jxr_linenumber" name="L183" href="#L183">183</a> <em class="jxr_javadoccomment">     * {@link #bracket(UnivariateFunction, double, double, double, double,double, int)</em>
<a class="jxr_linenumber" name="L184" href="#L184">184</a> <em class="jxr_javadoccomment">     * bracket(function, initial, lowerBound, upperBound, q, r, maximumIterations)},</em>
<a class="jxr_linenumber" name="L185" href="#L185">185</a> <em class="jxr_javadoccomment">     * explicitly specifying the maximum number of iterations.&lt;/p&gt;</em>
<a class="jxr_linenumber" name="L186" href="#L186">186</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L187" href="#L187">187</a> <em class="jxr_javadoccomment">     * @param function Function.</em>
<a class="jxr_linenumber" name="L188" href="#L188">188</a> <em class="jxr_javadoccomment">     * @param initial Initial midpoint of interval being expanded to</em>
<a class="jxr_linenumber" name="L189" href="#L189">189</a> <em class="jxr_javadoccomment">     * bracket a root.</em>
<a class="jxr_linenumber" name="L190" href="#L190">190</a> <em class="jxr_javadoccomment">     * @param lowerBound Lower bound (a is never lower than this value)</em>
<a class="jxr_linenumber" name="L191" href="#L191">191</a> <em class="jxr_javadoccomment">     * @param upperBound Upper bound (b never is greater than this</em>
<a class="jxr_linenumber" name="L192" href="#L192">192</a> <em class="jxr_javadoccomment">     * value).</em>
<a class="jxr_linenumber" name="L193" href="#L193">193</a> <em class="jxr_javadoccomment">     * @return a two-element array holding a and b.</em>
<a class="jxr_linenumber" name="L194" href="#L194">194</a> <em class="jxr_javadoccomment">     * @throws NoBracketingException if a root cannot be bracketted.</em>
<a class="jxr_linenumber" name="L195" href="#L195">195</a> <em class="jxr_javadoccomment">     * @throws NotStrictlyPositiveException if {@code maximumIterations &lt;= 0}.</em>
<a class="jxr_linenumber" name="L196" href="#L196">196</a> <em class="jxr_javadoccomment">     * @throws NullArgumentException if {@code function} is {@code null}.</em>
<a class="jxr_linenumber" name="L197" href="#L197">197</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L198" href="#L198">198</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">double</strong>[] bracket(<a href="../../../../../../org/apache/commons/math3/analysis/UnivariateFunction.html">UnivariateFunction</a> function,
<a class="jxr_linenumber" name="L199" href="#L199">199</a>                                    <strong class="jxr_keyword">double</strong> initial,
<a class="jxr_linenumber" name="L200" href="#L200">200</a>                                    <strong class="jxr_keyword">double</strong> lowerBound, <strong class="jxr_keyword">double</strong> upperBound)
<a class="jxr_linenumber" name="L201" href="#L201">201</a>         <strong class="jxr_keyword">throws</strong> NullArgumentException,
<a class="jxr_linenumber" name="L202" href="#L202">202</a>                NotStrictlyPositiveException,
<a class="jxr_linenumber" name="L203" href="#L203">203</a>                <a href="../../../../../../org/apache/commons/math3/exception/NoBracketingException.html">NoBracketingException</a> {
<a class="jxr_linenumber" name="L204" href="#L204">204</a>         <strong class="jxr_keyword">return</strong> bracket(function, initial, lowerBound, upperBound, 1.0, 1.0, Integer.MAX_VALUE);
<a class="jxr_linenumber" name="L205" href="#L205">205</a>     }
<a class="jxr_linenumber" name="L206" href="#L206">206</a> 
<a class="jxr_linenumber" name="L207" href="#L207">207</a>      <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L208" href="#L208">208</a> <em class="jxr_javadoccomment">     * This method simply calls {@link #bracket(UnivariateFunction, double, double, double,</em>
<a class="jxr_linenumber" name="L209" href="#L209">209</a> <em class="jxr_javadoccomment">     * double, double, int) bracket(function, initial, lowerBound, upperBound, q, r, maximumIterations)}</em>
<a class="jxr_linenumber" name="L210" href="#L210">210</a> <em class="jxr_javadoccomment">     * with {@code q} and {@code r} set to 1.0.</em>
<a class="jxr_linenumber" name="L211" href="#L211">211</a> <em class="jxr_javadoccomment">     * @param function Function.</em>
<a class="jxr_linenumber" name="L212" href="#L212">212</a> <em class="jxr_javadoccomment">     * @param initial Initial midpoint of interval being expanded to</em>
<a class="jxr_linenumber" name="L213" href="#L213">213</a> <em class="jxr_javadoccomment">     * bracket a root.</em>
<a class="jxr_linenumber" name="L214" href="#L214">214</a> <em class="jxr_javadoccomment">     * @param lowerBound Lower bound (a is never lower than this value).</em>
<a class="jxr_linenumber" name="L215" href="#L215">215</a> <em class="jxr_javadoccomment">     * @param upperBound Upper bound (b never is greater than this</em>
<a class="jxr_linenumber" name="L216" href="#L216">216</a> <em class="jxr_javadoccomment">     * value).</em>
<a class="jxr_linenumber" name="L217" href="#L217">217</a> <em class="jxr_javadoccomment">     * @param maximumIterations Maximum number of iterations to perform</em>
<a class="jxr_linenumber" name="L218" href="#L218">218</a> <em class="jxr_javadoccomment">     * @return a two element array holding a and b.</em>
<a class="jxr_linenumber" name="L219" href="#L219">219</a> <em class="jxr_javadoccomment">     * @throws NoBracketingException if the algorithm fails to find a and b</em>
<a class="jxr_linenumber" name="L220" href="#L220">220</a> <em class="jxr_javadoccomment">     * satisfying the desired conditions.</em>
<a class="jxr_linenumber" name="L221" href="#L221">221</a> <em class="jxr_javadoccomment">     * @throws NotStrictlyPositiveException if {@code maximumIterations &lt;= 0}.</em>
<a class="jxr_linenumber" name="L222" href="#L222">222</a> <em class="jxr_javadoccomment">     * @throws NullArgumentException if {@code function} is {@code null}.</em>
<a class="jxr_linenumber" name="L223" href="#L223">223</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L224" href="#L224">224</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">double</strong>[] bracket(<a href="../../../../../../org/apache/commons/math3/analysis/UnivariateFunction.html">UnivariateFunction</a> function,
<a class="jxr_linenumber" name="L225" href="#L225">225</a>                                    <strong class="jxr_keyword">double</strong> initial,
<a class="jxr_linenumber" name="L226" href="#L226">226</a>                                    <strong class="jxr_keyword">double</strong> lowerBound, <strong class="jxr_keyword">double</strong> upperBound,
<a class="jxr_linenumber" name="L227" href="#L227">227</a>                                    <strong class="jxr_keyword">int</strong> maximumIterations)
<a class="jxr_linenumber" name="L228" href="#L228">228</a>         <strong class="jxr_keyword">throws</strong> NullArgumentException,
<a class="jxr_linenumber" name="L229" href="#L229">229</a>                NotStrictlyPositiveException,
<a class="jxr_linenumber" name="L230" href="#L230">230</a>                <a href="../../../../../../org/apache/commons/math3/exception/NoBracketingException.html">NoBracketingException</a> {
<a class="jxr_linenumber" name="L231" href="#L231">231</a>         <strong class="jxr_keyword">return</strong> bracket(function, initial, lowerBound, upperBound, 1.0, 1.0, maximumIterations);
<a class="jxr_linenumber" name="L232" href="#L232">232</a>     }
<a class="jxr_linenumber" name="L233" href="#L233">233</a> 
<a class="jxr_linenumber" name="L234" href="#L234">234</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L235" href="#L235">235</a> <em class="jxr_javadoccomment">     * This method attempts to find two values a and b satisfying &lt;ul&gt;</em>
<a class="jxr_linenumber" name="L236" href="#L236">236</a> <em class="jxr_javadoccomment">     * &lt;li&gt; {@code lowerBound &lt;= a &lt; initial &lt; b &lt;= upperBound} &lt;/li&gt;</em>
<a class="jxr_linenumber" name="L237" href="#L237">237</a> <em class="jxr_javadoccomment">     * &lt;li&gt; {@code f(a) * f(b) &lt;= 0} &lt;/li&gt;</em>
<a class="jxr_linenumber" name="L238" href="#L238">238</a> <em class="jxr_javadoccomment">     * &lt;/ul&gt;</em>
<a class="jxr_linenumber" name="L239" href="#L239">239</a> <em class="jxr_javadoccomment">     * If {@code f} is continuous on {@code [a,b]}, this means that {@code a}</em>
<a class="jxr_linenumber" name="L240" href="#L240">240</a> <em class="jxr_javadoccomment">     * and {@code b} bracket a root of {@code f}.</em>
<a class="jxr_linenumber" name="L241" href="#L241">241</a> <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L242" href="#L242">242</a> <em class="jxr_javadoccomment">     * The algorithm checks the sign of \( f(l_k) \) and \( f(u_k) \) for increasing</em>
<a class="jxr_linenumber" name="L243" href="#L243">243</a> <em class="jxr_javadoccomment">     * values of k, where \( l_k = max(lower, initial - \delta_k) \),</em>
<a class="jxr_linenumber" name="L244" href="#L244">244</a> <em class="jxr_javadoccomment">     * \( u_k = min(upper, initial + \delta_k) \), using recurrence</em>
<a class="jxr_linenumber" name="L245" href="#L245">245</a> <em class="jxr_javadoccomment">     * \( \delta_{k+1} = r \delta_k + q, \delta_0 = 0\) and starting search with \( k=1 \).</em>
<a class="jxr_linenumber" name="L246" href="#L246">246</a> <em class="jxr_javadoccomment">     * The algorithm stops when one of the following happens: &lt;ul&gt;</em>
<a class="jxr_linenumber" name="L247" href="#L247">247</a> <em class="jxr_javadoccomment">     * &lt;li&gt; at least one positive and one negative value have been found --  success!&lt;/li&gt;</em>
<a class="jxr_linenumber" name="L248" href="#L248">248</a> <em class="jxr_javadoccomment">     * &lt;li&gt; both endpoints have reached their respective limits -- NoBracketingException &lt;/li&gt;</em>
<a class="jxr_linenumber" name="L249" href="#L249">249</a> <em class="jxr_javadoccomment">     * &lt;li&gt; {@code maximumIterations} iterations elapse -- NoBracketingException &lt;/li&gt;&lt;/ul&gt;</em>
<a class="jxr_linenumber" name="L250" href="#L250">250</a> <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L251" href="#L251">251</a> <em class="jxr_javadoccomment">     * If different signs are found at first iteration ({@code k=1}), then the returned</em>
<a class="jxr_linenumber" name="L252" href="#L252">252</a> <em class="jxr_javadoccomment">     * interval will be \( [a, b] = [l_1, u_1] \). If different signs are found at a later</em>
<a class="jxr_linenumber" name="L253" href="#L253">253</a> <em class="jxr_javadoccomment">     * iteration {@code k&gt;1}, then the returned interval will be either</em>
<a class="jxr_linenumber" name="L254" href="#L254">254</a> <em class="jxr_javadoccomment">     * \( [a, b] = [l_{k+1}, l_{k}] \) or \( [a, b] = [u_{k}, u_{k+1}] \). A root solver called</em>
<a class="jxr_linenumber" name="L255" href="#L255">255</a> <em class="jxr_javadoccomment">     * with these parameters will therefore start with the smallest bracketing interval known</em>
<a class="jxr_linenumber" name="L256" href="#L256">256</a> <em class="jxr_javadoccomment">     * at this step.</em>
<a class="jxr_linenumber" name="L257" href="#L257">257</a> <em class="jxr_javadoccomment">     * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L258" href="#L258">258</a> <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L259" href="#L259">259</a> <em class="jxr_javadoccomment">     * Interval expansion rate is tuned by changing the recurrence parameters {@code r} and</em>
<a class="jxr_linenumber" name="L260" href="#L260">260</a> <em class="jxr_javadoccomment">     * {@code q}. When the multiplicative factor {@code r} is set to 1, the sequence is a</em>
<a class="jxr_linenumber" name="L261" href="#L261">261</a> <em class="jxr_javadoccomment">     * simple arithmetic sequence with linear increase. When the multiplicative factor {@code r}</em>
<a class="jxr_linenumber" name="L262" href="#L262">262</a> <em class="jxr_javadoccomment">     * is larger than 1, the sequence has an asymptotically exponential rate. Note than the</em>
<a class="jxr_linenumber" name="L263" href="#L263">263</a> <em class="jxr_javadoccomment">     * additive parameter {@code q} should never be set to zero, otherwise the interval would</em>
<a class="jxr_linenumber" name="L264" href="#L264">264</a> <em class="jxr_javadoccomment">     * degenerate to the single initial point for all values of {@code k}.</em>
<a class="jxr_linenumber" name="L265" href="#L265">265</a> <em class="jxr_javadoccomment">     * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L266" href="#L266">266</a> <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L267" href="#L267">267</a> <em class="jxr_javadoccomment">     * As a rule of thumb, when the location of the root is expected to be approximately known</em>
<a class="jxr_linenumber" name="L268" href="#L268">268</a> <em class="jxr_javadoccomment">     * within some error margin, {@code r} should be set to 1 and {@code q} should be set to the</em>
<a class="jxr_linenumber" name="L269" href="#L269">269</a> <em class="jxr_javadoccomment">     * order of magnitude of the error margin. When the location of the root is really a wild guess,</em>
<a class="jxr_linenumber" name="L270" href="#L270">270</a> <em class="jxr_javadoccomment">     * then {@code r} should be set to a value larger than 1 (typically 2 to double the interval</em>
<a class="jxr_linenumber" name="L271" href="#L271">271</a> <em class="jxr_javadoccomment">     * length at each iteration) and {@code q} should be set according to half the initial</em>
<a class="jxr_linenumber" name="L272" href="#L272">272</a> <em class="jxr_javadoccomment">     * search interval length.</em>
<a class="jxr_linenumber" name="L273" href="#L273">273</a> <em class="jxr_javadoccomment">     * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L274" href="#L274">274</a> <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L275" href="#L275">275</a> <em class="jxr_javadoccomment">     * As an example, if we consider the trivial function {@code f(x) = 1 - x} and use</em>
<a class="jxr_linenumber" name="L276" href="#L276">276</a> <em class="jxr_javadoccomment">     * {@code initial = 4}, {@code r = 1}, {@code q = 2}, the algorithm will compute</em>
<a class="jxr_linenumber" name="L277" href="#L277">277</a> <em class="jxr_javadoccomment">     * {@code f(4-2) = f(2) = -1} and {@code f(4+2) = f(6) = -5} for {@code k = 1}, then</em>
<a class="jxr_linenumber" name="L278" href="#L278">278</a> <em class="jxr_javadoccomment">     * {@code f(4-4) = f(0) = +1} and {@code f(4+4) = f(8) = -7} for {@code k = 2}. Then it will</em>
<a class="jxr_linenumber" name="L279" href="#L279">279</a> <em class="jxr_javadoccomment">     * return the interval {@code [0, 2]} as the smallest one known to be bracketing the root.</em>
<a class="jxr_linenumber" name="L280" href="#L280">280</a> <em class="jxr_javadoccomment">     * As shown by this example, the initial value (here {@code 4}) may lie outside of the returned</em>
<a class="jxr_linenumber" name="L281" href="#L281">281</a> <em class="jxr_javadoccomment">     * bracketing interval.</em>
<a class="jxr_linenumber" name="L282" href="#L282">282</a> <em class="jxr_javadoccomment">     * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L283" href="#L283">283</a> <em class="jxr_javadoccomment">     * @param function function to check</em>
<a class="jxr_linenumber" name="L284" href="#L284">284</a> <em class="jxr_javadoccomment">     * @param initial Initial midpoint of interval being expanded to</em>
<a class="jxr_linenumber" name="L285" href="#L285">285</a> <em class="jxr_javadoccomment">     * bracket a root.</em>
<a class="jxr_linenumber" name="L286" href="#L286">286</a> <em class="jxr_javadoccomment">     * @param lowerBound Lower bound (a is never lower than this value).</em>
<a class="jxr_linenumber" name="L287" href="#L287">287</a> <em class="jxr_javadoccomment">     * @param upperBound Upper bound (b never is greater than this</em>
<a class="jxr_linenumber" name="L288" href="#L288">288</a> <em class="jxr_javadoccomment">     * value).</em>
<a class="jxr_linenumber" name="L289" href="#L289">289</a> <em class="jxr_javadoccomment">     * @param q additive offset used to compute bounds sequence (must be strictly positive)</em>
<a class="jxr_linenumber" name="L290" href="#L290">290</a> <em class="jxr_javadoccomment">     * @param r multiplicative factor used to compute bounds sequence</em>
<a class="jxr_linenumber" name="L291" href="#L291">291</a> <em class="jxr_javadoccomment">     * @param maximumIterations Maximum number of iterations to perform</em>
<a class="jxr_linenumber" name="L292" href="#L292">292</a> <em class="jxr_javadoccomment">     * @return a two element array holding the bracketing values.</em>
<a class="jxr_linenumber" name="L293" href="#L293">293</a> <em class="jxr_javadoccomment">     * @exception NoBracketingException if function cannot be bracketed in the search interval</em>
<a class="jxr_linenumber" name="L294" href="#L294">294</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L295" href="#L295">295</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">double</strong>[] bracket(<strong class="jxr_keyword">final</strong> <a href="../../../../../../org/apache/commons/math3/analysis/UnivariateFunction.html">UnivariateFunction</a> function, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> initial,
<a class="jxr_linenumber" name="L296" href="#L296">296</a>                                    <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> lowerBound, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> upperBound,
<a class="jxr_linenumber" name="L297" href="#L297">297</a>                                    <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> q, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> r, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> maximumIterations)
<a class="jxr_linenumber" name="L298" href="#L298">298</a>         <strong class="jxr_keyword">throws</strong> <a href="../../../../../../org/apache/commons/math3/exception/NoBracketingException.html">NoBracketingException</a> {
<a class="jxr_linenumber" name="L299" href="#L299">299</a> 
<a class="jxr_linenumber" name="L300" href="#L300">300</a>         <strong class="jxr_keyword">if</strong> (function == <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L301" href="#L301">301</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/exception/NullArgumentException.html">NullArgumentException</a>(LocalizedFormats.FUNCTION);
<a class="jxr_linenumber" name="L302" href="#L302">302</a>         }
<a class="jxr_linenumber" name="L303" href="#L303">303</a>         <strong class="jxr_keyword">if</strong> (q &lt;= 0)  {
<a class="jxr_linenumber" name="L304" href="#L304">304</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/exception/NotStrictlyPositiveException.html">NotStrictlyPositiveException</a>(q);
<a class="jxr_linenumber" name="L305" href="#L305">305</a>         }
<a class="jxr_linenumber" name="L306" href="#L306">306</a>         <strong class="jxr_keyword">if</strong> (maximumIterations &lt;= 0)  {
<a class="jxr_linenumber" name="L307" href="#L307">307</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/exception/NotStrictlyPositiveException.html">NotStrictlyPositiveException</a>(LocalizedFormats.INVALID_MAX_ITERATIONS, maximumIterations);
<a class="jxr_linenumber" name="L308" href="#L308">308</a>         }
<a class="jxr_linenumber" name="L309" href="#L309">309</a>         verifySequence(lowerBound, initial, upperBound);
<a class="jxr_linenumber" name="L310" href="#L310">310</a> 
<a class="jxr_linenumber" name="L311" href="#L311">311</a>         <em class="jxr_comment">// initialize the recurrence</em>
<a class="jxr_linenumber" name="L312" href="#L312">312</a>         <strong class="jxr_keyword">double</strong> a     = initial;
<a class="jxr_linenumber" name="L313" href="#L313">313</a>         <strong class="jxr_keyword">double</strong> b     = initial;
<a class="jxr_linenumber" name="L314" href="#L314">314</a>         <strong class="jxr_keyword">double</strong> fa    = Double.NaN;
<a class="jxr_linenumber" name="L315" href="#L315">315</a>         <strong class="jxr_keyword">double</strong> fb    = Double.NaN;
<a class="jxr_linenumber" name="L316" href="#L316">316</a>         <strong class="jxr_keyword">double</strong> delta = 0;
<a class="jxr_linenumber" name="L317" href="#L317">317</a> 
<a class="jxr_linenumber" name="L318" href="#L318">318</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> numIterations = 0;
<a class="jxr_linenumber" name="L319" href="#L319">319</a>              (numIterations &lt; maximumIterations) &amp;&amp; (a &gt; lowerBound || b &lt; upperBound);
<a class="jxr_linenumber" name="L320" href="#L320">320</a>              ++numIterations) {
<a class="jxr_linenumber" name="L321" href="#L321">321</a> 
<a class="jxr_linenumber" name="L322" href="#L322">322</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> previousA  = a;
<a class="jxr_linenumber" name="L323" href="#L323">323</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> previousFa = fa;
<a class="jxr_linenumber" name="L324" href="#L324">324</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> previousB  = b;
<a class="jxr_linenumber" name="L325" href="#L325">325</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> previousFb = fb;
<a class="jxr_linenumber" name="L326" href="#L326">326</a> 
<a class="jxr_linenumber" name="L327" href="#L327">327</a>             delta = r * delta + q;
<a class="jxr_linenumber" name="L328" href="#L328">328</a>             a     = FastMath.max(initial - delta, lowerBound);
<a class="jxr_linenumber" name="L329" href="#L329">329</a>             b     = FastMath.min(initial + delta, upperBound);
<a class="jxr_linenumber" name="L330" href="#L330">330</a>             fa    = function.value(a);
<a class="jxr_linenumber" name="L331" href="#L331">331</a>             fb    = function.value(b);
<a class="jxr_linenumber" name="L332" href="#L332">332</a> 
<a class="jxr_linenumber" name="L333" href="#L333">333</a>             <strong class="jxr_keyword">if</strong> (numIterations == 0) {
<a class="jxr_linenumber" name="L334" href="#L334">334</a>                 <em class="jxr_comment">// at first iteration, we don't have a previous interval</em>
<a class="jxr_linenumber" name="L335" href="#L335">335</a>                 <em class="jxr_comment">// we simply compare both sides of the initial interval</em>
<a class="jxr_linenumber" name="L336" href="#L336">336</a>                 <strong class="jxr_keyword">if</strong> (fa * fb &lt;= 0) {
<a class="jxr_linenumber" name="L337" href="#L337">337</a>                     <em class="jxr_comment">// the first interval already brackets a root</em>
<a class="jxr_linenumber" name="L338" href="#L338">338</a>                     <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { a, b };
<a class="jxr_linenumber" name="L339" href="#L339">339</a>                 }
<a class="jxr_linenumber" name="L340" href="#L340">340</a>             } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L341" href="#L341">341</a>                 <em class="jxr_comment">// we have a previous interval with constant sign and expand it,</em>
<a class="jxr_linenumber" name="L342" href="#L342">342</a>                 <em class="jxr_comment">// we expect sign changes to occur at boundaries</em>
<a class="jxr_linenumber" name="L343" href="#L343">343</a>                 <strong class="jxr_keyword">if</strong> (fa * previousFa &lt;= 0) {
<a class="jxr_linenumber" name="L344" href="#L344">344</a>                     <em class="jxr_comment">// sign change detected at near lower bound</em>
<a class="jxr_linenumber" name="L345" href="#L345">345</a>                     <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { a, previousA };
<a class="jxr_linenumber" name="L346" href="#L346">346</a>                 } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (fb * previousFb &lt;= 0) {
<a class="jxr_linenumber" name="L347" href="#L347">347</a>                     <em class="jxr_comment">// sign change detected at near upper bound</em>
<a class="jxr_linenumber" name="L348" href="#L348">348</a>                     <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { previousB, b };
<a class="jxr_linenumber" name="L349" href="#L349">349</a>                 }
<a class="jxr_linenumber" name="L350" href="#L350">350</a>             }
<a class="jxr_linenumber" name="L351" href="#L351">351</a> 
<a class="jxr_linenumber" name="L352" href="#L352">352</a>         }
<a class="jxr_linenumber" name="L353" href="#L353">353</a> 
<a class="jxr_linenumber" name="L354" href="#L354">354</a>         <em class="jxr_comment">// no bracketing found</em>
<a class="jxr_linenumber" name="L355" href="#L355">355</a>         <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/exception/NoBracketingException.html">NoBracketingException</a>(a, b, fa, fb);
<a class="jxr_linenumber" name="L356" href="#L356">356</a> 
<a class="jxr_linenumber" name="L357" href="#L357">357</a>     }
<a class="jxr_linenumber" name="L358" href="#L358">358</a> 
<a class="jxr_linenumber" name="L359" href="#L359">359</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L360" href="#L360">360</a> <em class="jxr_javadoccomment">     * Compute the midpoint of two values.</em>
<a class="jxr_linenumber" name="L361" href="#L361">361</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L362" href="#L362">362</a> <em class="jxr_javadoccomment">     * @param a first value.</em>
<a class="jxr_linenumber" name="L363" href="#L363">363</a> <em class="jxr_javadoccomment">     * @param b second value.</em>
<a class="jxr_linenumber" name="L364" href="#L364">364</a> <em class="jxr_javadoccomment">     * @return the midpoint.</em>
<a class="jxr_linenumber" name="L365" href="#L365">365</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L366" href="#L366">366</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">double</strong> midpoint(<strong class="jxr_keyword">double</strong> a, <strong class="jxr_keyword">double</strong> b) {
<a class="jxr_linenumber" name="L367" href="#L367">367</a>         <strong class="jxr_keyword">return</strong> (a + b) * 0.5;
<a class="jxr_linenumber" name="L368" href="#L368">368</a>     }
<a class="jxr_linenumber" name="L369" href="#L369">369</a> 
<a class="jxr_linenumber" name="L370" href="#L370">370</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L371" href="#L371">371</a> <em class="jxr_javadoccomment">     * Check whether the interval bounds bracket a root. That is, if the</em>
<a class="jxr_linenumber" name="L372" href="#L372">372</a> <em class="jxr_javadoccomment">     * values at the endpoints are not equal to zero, then the function takes</em>
<a class="jxr_linenumber" name="L373" href="#L373">373</a> <em class="jxr_javadoccomment">     * opposite signs at the endpoints.</em>
<a class="jxr_linenumber" name="L374" href="#L374">374</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L375" href="#L375">375</a> <em class="jxr_javadoccomment">     * @param function Function.</em>
<a class="jxr_linenumber" name="L376" href="#L376">376</a> <em class="jxr_javadoccomment">     * @param lower Lower endpoint.</em>
<a class="jxr_linenumber" name="L377" href="#L377">377</a> <em class="jxr_javadoccomment">     * @param upper Upper endpoint.</em>
<a class="jxr_linenumber" name="L378" href="#L378">378</a> <em class="jxr_javadoccomment">     * @return {@code true} if the function values have opposite signs at the</em>
<a class="jxr_linenumber" name="L379" href="#L379">379</a> <em class="jxr_javadoccomment">     * given points.</em>
<a class="jxr_linenumber" name="L380" href="#L380">380</a> <em class="jxr_javadoccomment">     * @throws NullArgumentException if {@code function} is {@code null}.</em>
<a class="jxr_linenumber" name="L381" href="#L381">381</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L382" href="#L382">382</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">boolean</strong> isBracketing(<a href="../../../../../../org/apache/commons/math3/analysis/UnivariateFunction.html">UnivariateFunction</a> function,
<a class="jxr_linenumber" name="L383" href="#L383">383</a>                                        <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> lower,
<a class="jxr_linenumber" name="L384" href="#L384">384</a>                                        <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> upper)
<a class="jxr_linenumber" name="L385" href="#L385">385</a>         <strong class="jxr_keyword">throws</strong> <a href="../../../../../../org/apache/commons/math3/exception/NullArgumentException.html">NullArgumentException</a> {
<a class="jxr_linenumber" name="L386" href="#L386">386</a>         <strong class="jxr_keyword">if</strong> (function == <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L387" href="#L387">387</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/exception/NullArgumentException.html">NullArgumentException</a>(LocalizedFormats.FUNCTION);
<a class="jxr_linenumber" name="L388" href="#L388">388</a>         }
<a class="jxr_linenumber" name="L389" href="#L389">389</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> fLo = function.value(lower);
<a class="jxr_linenumber" name="L390" href="#L390">390</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> fHi = function.value(upper);
<a class="jxr_linenumber" name="L391" href="#L391">391</a>         <strong class="jxr_keyword">return</strong> (fLo &gt;= 0 &amp;&amp; fHi &lt;= 0) || (fLo &lt;= 0 &amp;&amp; fHi &gt;= 0);
<a class="jxr_linenumber" name="L392" href="#L392">392</a>     }
<a class="jxr_linenumber" name="L393" href="#L393">393</a> 
<a class="jxr_linenumber" name="L394" href="#L394">394</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L395" href="#L395">395</a> <em class="jxr_javadoccomment">     * Check whether the arguments form a (strictly) increasing sequence.</em>
<a class="jxr_linenumber" name="L396" href="#L396">396</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L397" href="#L397">397</a> <em class="jxr_javadoccomment">     * @param start First number.</em>
<a class="jxr_linenumber" name="L398" href="#L398">398</a> <em class="jxr_javadoccomment">     * @param mid Second number.</em>
<a class="jxr_linenumber" name="L399" href="#L399">399</a> <em class="jxr_javadoccomment">     * @param end Third number.</em>
<a class="jxr_linenumber" name="L400" href="#L400">400</a> <em class="jxr_javadoccomment">     * @return {@code true} if the arguments form an increasing sequence.</em>
<a class="jxr_linenumber" name="L401" href="#L401">401</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L402" href="#L402">402</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">boolean</strong> isSequence(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> start,
<a class="jxr_linenumber" name="L403" href="#L403">403</a>                                      <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> mid,
<a class="jxr_linenumber" name="L404" href="#L404">404</a>                                      <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> end) {
<a class="jxr_linenumber" name="L405" href="#L405">405</a>         <strong class="jxr_keyword">return</strong> (start &lt; mid) &amp;&amp; (mid &lt; end);
<a class="jxr_linenumber" name="L406" href="#L406">406</a>     }
<a class="jxr_linenumber" name="L407" href="#L407">407</a> 
<a class="jxr_linenumber" name="L408" href="#L408">408</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L409" href="#L409">409</a> <em class="jxr_javadoccomment">     * Check that the endpoints specify an interval.</em>
<a class="jxr_linenumber" name="L410" href="#L410">410</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L411" href="#L411">411</a> <em class="jxr_javadoccomment">     * @param lower Lower endpoint.</em>
<a class="jxr_linenumber" name="L412" href="#L412">412</a> <em class="jxr_javadoccomment">     * @param upper Upper endpoint.</em>
<a class="jxr_linenumber" name="L413" href="#L413">413</a> <em class="jxr_javadoccomment">     * @throws NumberIsTooLargeException if {@code lower &gt;= upper}.</em>
<a class="jxr_linenumber" name="L414" href="#L414">414</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L415" href="#L415">415</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">void</strong> verifyInterval(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> lower,
<a class="jxr_linenumber" name="L416" href="#L416">416</a>                                       <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> upper)
<a class="jxr_linenumber" name="L417" href="#L417">417</a>         <strong class="jxr_keyword">throws</strong> <a href="../../../../../../org/apache/commons/math3/exception/NumberIsTooLargeException.html">NumberIsTooLargeException</a> {
<a class="jxr_linenumber" name="L418" href="#L418">418</a>         <strong class="jxr_keyword">if</strong> (lower &gt;= upper) {
<a class="jxr_linenumber" name="L419" href="#L419">419</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/exception/NumberIsTooLargeException.html">NumberIsTooLargeException</a>(LocalizedFormats.ENDPOINTS_NOT_AN_INTERVAL,
<a class="jxr_linenumber" name="L420" href="#L420">420</a>                                                 lower, upper, false);
<a class="jxr_linenumber" name="L421" href="#L421">421</a>         }
<a class="jxr_linenumber" name="L422" href="#L422">422</a>     }
<a class="jxr_linenumber" name="L423" href="#L423">423</a> 
<a class="jxr_linenumber" name="L424" href="#L424">424</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L425" href="#L425">425</a> <em class="jxr_javadoccomment">     * Check that {@code lower &lt; initial &lt; upper}.</em>
<a class="jxr_linenumber" name="L426" href="#L426">426</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L427" href="#L427">427</a> <em class="jxr_javadoccomment">     * @param lower Lower endpoint.</em>
<a class="jxr_linenumber" name="L428" href="#L428">428</a> <em class="jxr_javadoccomment">     * @param initial Initial value.</em>
<a class="jxr_linenumber" name="L429" href="#L429">429</a> <em class="jxr_javadoccomment">     * @param upper Upper endpoint.</em>
<a class="jxr_linenumber" name="L430" href="#L430">430</a> <em class="jxr_javadoccomment">     * @throws NumberIsTooLargeException if {@code lower &gt;= initial} or</em>
<a class="jxr_linenumber" name="L431" href="#L431">431</a> <em class="jxr_javadoccomment">     * {@code initial &gt;= upper}.</em>
<a class="jxr_linenumber" name="L432" href="#L432">432</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L433" href="#L433">433</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">void</strong> verifySequence(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> lower,
<a class="jxr_linenumber" name="L434" href="#L434">434</a>                                       <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> initial,
<a class="jxr_linenumber" name="L435" href="#L435">435</a>                                       <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> upper)
<a class="jxr_linenumber" name="L436" href="#L436">436</a>         <strong class="jxr_keyword">throws</strong> <a href="../../../../../../org/apache/commons/math3/exception/NumberIsTooLargeException.html">NumberIsTooLargeException</a> {
<a class="jxr_linenumber" name="L437" href="#L437">437</a>         verifyInterval(lower, initial);
<a class="jxr_linenumber" name="L438" href="#L438">438</a>         verifyInterval(initial, upper);
<a class="jxr_linenumber" name="L439" href="#L439">439</a>     }
<a class="jxr_linenumber" name="L440" href="#L440">440</a> 
<a class="jxr_linenumber" name="L441" href="#L441">441</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L442" href="#L442">442</a> <em class="jxr_javadoccomment">     * Check that the endpoints specify an interval and the end points</em>
<a class="jxr_linenumber" name="L443" href="#L443">443</a> <em class="jxr_javadoccomment">     * bracket a root.</em>
<a class="jxr_linenumber" name="L444" href="#L444">444</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L445" href="#L445">445</a> <em class="jxr_javadoccomment">     * @param function Function.</em>
<a class="jxr_linenumber" name="L446" href="#L446">446</a> <em class="jxr_javadoccomment">     * @param lower Lower endpoint.</em>
<a class="jxr_linenumber" name="L447" href="#L447">447</a> <em class="jxr_javadoccomment">     * @param upper Upper endpoint.</em>
<a class="jxr_linenumber" name="L448" href="#L448">448</a> <em class="jxr_javadoccomment">     * @throws NoBracketingException if the function has the same sign at the</em>
<a class="jxr_linenumber" name="L449" href="#L449">449</a> <em class="jxr_javadoccomment">     * endpoints.</em>
<a class="jxr_linenumber" name="L450" href="#L450">450</a> <em class="jxr_javadoccomment">     * @throws NullArgumentException if {@code function} is {@code null}.</em>
<a class="jxr_linenumber" name="L451" href="#L451">451</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L452" href="#L452">452</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">void</strong> verifyBracketing(<a href="../../../../../../org/apache/commons/math3/analysis/UnivariateFunction.html">UnivariateFunction</a> function,
<a class="jxr_linenumber" name="L453" href="#L453">453</a>                                         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> lower,
<a class="jxr_linenumber" name="L454" href="#L454">454</a>                                         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> upper)
<a class="jxr_linenumber" name="L455" href="#L455">455</a>         <strong class="jxr_keyword">throws</strong> NullArgumentException,
<a class="jxr_linenumber" name="L456" href="#L456">456</a>                <a href="../../../../../../org/apache/commons/math3/exception/NoBracketingException.html">NoBracketingException</a> {
<a class="jxr_linenumber" name="L457" href="#L457">457</a>         <strong class="jxr_keyword">if</strong> (function == <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L458" href="#L458">458</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/exception/NullArgumentException.html">NullArgumentException</a>(LocalizedFormats.FUNCTION);
<a class="jxr_linenumber" name="L459" href="#L459">459</a>         }
<a class="jxr_linenumber" name="L460" href="#L460">460</a>         verifyInterval(lower, upper);
<a class="jxr_linenumber" name="L461" href="#L461">461</a>         <strong class="jxr_keyword">if</strong> (!isBracketing(function, lower, upper)) {
<a class="jxr_linenumber" name="L462" href="#L462">462</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/exception/NoBracketingException.html">NoBracketingException</a>(lower, upper,
<a class="jxr_linenumber" name="L463" href="#L463">463</a>                                             function.value(lower),
<a class="jxr_linenumber" name="L464" href="#L464">464</a>                                             function.value(upper));
<a class="jxr_linenumber" name="L465" href="#L465">465</a>         }
<a class="jxr_linenumber" name="L466" href="#L466">466</a>     }
<a class="jxr_linenumber" name="L467" href="#L467">467</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2003&#x2013;2016 <a href="http://www.apache.org/">The Apache Software Foundation</a>. All rights reserved.</div>
</body>
</html>
