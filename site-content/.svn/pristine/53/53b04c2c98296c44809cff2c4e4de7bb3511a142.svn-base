<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span>package org.apache.commons.math3.geometry.enclosing;<a name="line.17"></a>
<span class="sourceLineNo">018</span><a name="line.18"></a>
<span class="sourceLineNo">019</span>import java.util.ArrayList;<a name="line.19"></a>
<span class="sourceLineNo">020</span>import java.util.Arrays;<a name="line.20"></a>
<span class="sourceLineNo">021</span>import java.util.List;<a name="line.21"></a>
<span class="sourceLineNo">022</span><a name="line.22"></a>
<span class="sourceLineNo">023</span>import org.apache.commons.math3.geometry.euclidean.twod.DiskGenerator;<a name="line.23"></a>
<span class="sourceLineNo">024</span>import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;<a name="line.24"></a>
<span class="sourceLineNo">025</span>import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;<a name="line.25"></a>
<span class="sourceLineNo">026</span>import org.apache.commons.math3.random.RandomGenerator;<a name="line.26"></a>
<span class="sourceLineNo">027</span>import org.apache.commons.math3.random.Well1024a;<a name="line.27"></a>
<span class="sourceLineNo">028</span>import org.junit.Assert;<a name="line.28"></a>
<span class="sourceLineNo">029</span>import org.junit.Test;<a name="line.29"></a>
<span class="sourceLineNo">030</span><a name="line.30"></a>
<span class="sourceLineNo">031</span><a name="line.31"></a>
<span class="sourceLineNo">032</span>public class WelzlEncloser2DTest {<a name="line.32"></a>
<span class="sourceLineNo">033</span><a name="line.33"></a>
<span class="sourceLineNo">034</span>    @Test<a name="line.34"></a>
<span class="sourceLineNo">035</span>    public void testNullList() {<a name="line.35"></a>
<span class="sourceLineNo">036</span>        DiskGenerator generator = new DiskGenerator();<a name="line.36"></a>
<span class="sourceLineNo">037</span>        WelzlEncloser&lt;Euclidean2D, Vector2D&gt; encloser =<a name="line.37"></a>
<span class="sourceLineNo">038</span>                new WelzlEncloser&lt;Euclidean2D, Vector2D&gt;(1.0e-10, generator);<a name="line.38"></a>
<span class="sourceLineNo">039</span>        EnclosingBall&lt;Euclidean2D, Vector2D&gt; ball = encloser.enclose(null);<a name="line.39"></a>
<span class="sourceLineNo">040</span>        Assert.assertTrue(ball.getRadius() &lt; 0);<a name="line.40"></a>
<span class="sourceLineNo">041</span>    }<a name="line.41"></a>
<span class="sourceLineNo">042</span><a name="line.42"></a>
<span class="sourceLineNo">043</span>    @Test<a name="line.43"></a>
<span class="sourceLineNo">044</span>    public void testNoPoints() {<a name="line.44"></a>
<span class="sourceLineNo">045</span>        DiskGenerator generator = new DiskGenerator();<a name="line.45"></a>
<span class="sourceLineNo">046</span>        WelzlEncloser&lt;Euclidean2D, Vector2D&gt; encloser =<a name="line.46"></a>
<span class="sourceLineNo">047</span>                new WelzlEncloser&lt;Euclidean2D, Vector2D&gt;(1.0e-10, generator);<a name="line.47"></a>
<span class="sourceLineNo">048</span>        EnclosingBall&lt;Euclidean2D, Vector2D&gt; ball = encloser.enclose(new ArrayList&lt;Vector2D&gt;());<a name="line.48"></a>
<span class="sourceLineNo">049</span>        Assert.assertTrue(ball.getRadius() &lt; 0);<a name="line.49"></a>
<span class="sourceLineNo">050</span>    }<a name="line.50"></a>
<span class="sourceLineNo">051</span><a name="line.51"></a>
<span class="sourceLineNo">052</span>    @Test<a name="line.52"></a>
<span class="sourceLineNo">053</span>    public void testRegularPoints() {<a name="line.53"></a>
<span class="sourceLineNo">054</span>        List&lt;Vector2D&gt; list = buildList(22, 26, 30, 38, 64, 28,  8, 54, 11, 15);<a name="line.54"></a>
<span class="sourceLineNo">055</span>        checkDisk(list, Arrays.asList(list.get(2), list.get(3), list.get(4)));<a name="line.55"></a>
<span class="sourceLineNo">056</span>    }<a name="line.56"></a>
<span class="sourceLineNo">057</span><a name="line.57"></a>
<span class="sourceLineNo">058</span>    @Test<a name="line.58"></a>
<span class="sourceLineNo">059</span>    public void testSolutionOnDiameter() {<a name="line.59"></a>
<span class="sourceLineNo">060</span>        List&lt;Vector2D&gt; list = buildList(22, 26, 30, 38, 64, 28,  8, 54);<a name="line.60"></a>
<span class="sourceLineNo">061</span>        checkDisk(list, Arrays.asList(list.get(2), list.get(3)));<a name="line.61"></a>
<span class="sourceLineNo">062</span>    }<a name="line.62"></a>
<span class="sourceLineNo">063</span><a name="line.63"></a>
<span class="sourceLineNo">064</span>    @Test<a name="line.64"></a>
<span class="sourceLineNo">065</span>    public void testReducingBall1() {<a name="line.65"></a>
<span class="sourceLineNo">066</span>        List&lt;Vector2D&gt; list = buildList(0.05380958511396061, 0.57332359658700000,<a name="line.66"></a>
<span class="sourceLineNo">067</span>                                        0.99348810731127870, 0.02056421361521466,<a name="line.67"></a>
<span class="sourceLineNo">068</span>                                        0.01203950647796437, 0.99779675042261860,<a name="line.68"></a>
<span class="sourceLineNo">069</span>                                        0.00810189987706078, 0.00589246003827815,<a name="line.69"></a>
<span class="sourceLineNo">070</span>                                        0.00465180821202149, 0.99219972923046940);<a name="line.70"></a>
<span class="sourceLineNo">071</span>        checkDisk(list, Arrays.asList(list.get(1), list.get(3), list.get(4)));<a name="line.71"></a>
<span class="sourceLineNo">072</span>    }<a name="line.72"></a>
<span class="sourceLineNo">073</span><a name="line.73"></a>
<span class="sourceLineNo">074</span>    @Test<a name="line.74"></a>
<span class="sourceLineNo">075</span>    public void testReducingBall2() {<a name="line.75"></a>
<span class="sourceLineNo">076</span>        List&lt;Vector2D&gt; list = buildList(0.016930586154703, 0.333955448537779,<a name="line.76"></a>
<span class="sourceLineNo">077</span>                                        0.987189104892331, 0.969778855274507,<a name="line.77"></a>
<span class="sourceLineNo">078</span>                                        0.983696889599935, 0.012904580013266,<a name="line.78"></a>
<span class="sourceLineNo">079</span>                                        0.013114499572905, 0.034740156356895);<a name="line.79"></a>
<span class="sourceLineNo">080</span>        checkDisk(list, Arrays.asList(list.get(1), list.get(2), list.get(3)));<a name="line.80"></a>
<span class="sourceLineNo">081</span>    }<a name="line.81"></a>
<span class="sourceLineNo">082</span><a name="line.82"></a>
<span class="sourceLineNo">083</span>    @Test<a name="line.83"></a>
<span class="sourceLineNo">084</span>    public void testLargeSamples() {<a name="line.84"></a>
<span class="sourceLineNo">085</span>        RandomGenerator random = new Well1024a(0xa2a63cad12c01fb2l);<a name="line.85"></a>
<span class="sourceLineNo">086</span>        for (int k = 0; k &lt; 100; ++k) {<a name="line.86"></a>
<span class="sourceLineNo">087</span>            int nbPoints = random.nextInt(10000);<a name="line.87"></a>
<span class="sourceLineNo">088</span>            List&lt;Vector2D&gt; points = new ArrayList&lt;Vector2D&gt;();<a name="line.88"></a>
<span class="sourceLineNo">089</span>            for (int i = 0; i &lt; nbPoints; ++i) {<a name="line.89"></a>
<span class="sourceLineNo">090</span>                double x = random.nextDouble();<a name="line.90"></a>
<span class="sourceLineNo">091</span>                double y = random.nextDouble();<a name="line.91"></a>
<span class="sourceLineNo">092</span>                points.add(new Vector2D(x, y));<a name="line.92"></a>
<span class="sourceLineNo">093</span>            }<a name="line.93"></a>
<span class="sourceLineNo">094</span>            checkDisk(points);<a name="line.94"></a>
<span class="sourceLineNo">095</span>        }<a name="line.95"></a>
<span class="sourceLineNo">096</span>    }<a name="line.96"></a>
<span class="sourceLineNo">097</span><a name="line.97"></a>
<span class="sourceLineNo">098</span>    private List&lt;Vector2D&gt; buildList(final double ... coordinates) {<a name="line.98"></a>
<span class="sourceLineNo">099</span>        List&lt;Vector2D&gt; list = new ArrayList&lt;Vector2D&gt;(coordinates.length / 2);<a name="line.99"></a>
<span class="sourceLineNo">100</span>        for (int i = 0; i &lt; coordinates.length; i += 2) {<a name="line.100"></a>
<span class="sourceLineNo">101</span>            list.add(new Vector2D(coordinates[i], coordinates[i + 1]));<a name="line.101"></a>
<span class="sourceLineNo">102</span>        }<a name="line.102"></a>
<span class="sourceLineNo">103</span>        return list;<a name="line.103"></a>
<span class="sourceLineNo">104</span>    }<a name="line.104"></a>
<span class="sourceLineNo">105</span><a name="line.105"></a>
<span class="sourceLineNo">106</span>    private void checkDisk(List&lt;Vector2D&gt; points, List&lt;Vector2D&gt; refSupport) {<a name="line.106"></a>
<span class="sourceLineNo">107</span><a name="line.107"></a>
<span class="sourceLineNo">108</span>        EnclosingBall&lt;Euclidean2D, Vector2D&gt; disk = checkDisk(points);<a name="line.108"></a>
<span class="sourceLineNo">109</span><a name="line.109"></a>
<span class="sourceLineNo">110</span>        // compare computed disk with expected disk<a name="line.110"></a>
<span class="sourceLineNo">111</span>        DiskGenerator generator = new DiskGenerator();<a name="line.111"></a>
<span class="sourceLineNo">112</span>        EnclosingBall&lt;Euclidean2D, Vector2D&gt; expected = generator.ballOnSupport(refSupport);<a name="line.112"></a>
<span class="sourceLineNo">113</span>        Assert.assertEquals(refSupport.size(), disk.getSupportSize());<a name="line.113"></a>
<span class="sourceLineNo">114</span>        Assert.assertEquals(expected.getRadius(),        disk.getRadius(),        1.0e-10);<a name="line.114"></a>
<span class="sourceLineNo">115</span>        Assert.assertEquals(expected.getCenter().getX(), disk.getCenter().getX(), 1.0e-10);<a name="line.115"></a>
<span class="sourceLineNo">116</span>        Assert.assertEquals(expected.getCenter().getY(), disk.getCenter().getY(), 1.0e-10);<a name="line.116"></a>
<span class="sourceLineNo">117</span><a name="line.117"></a>
<span class="sourceLineNo">118</span>        for (Vector2D s : disk.getSupport()) {<a name="line.118"></a>
<span class="sourceLineNo">119</span>            boolean found = false;<a name="line.119"></a>
<span class="sourceLineNo">120</span>            for (Vector2D rs : refSupport) {<a name="line.120"></a>
<span class="sourceLineNo">121</span>                if (s == rs) {<a name="line.121"></a>
<span class="sourceLineNo">122</span>                    found = true;<a name="line.122"></a>
<span class="sourceLineNo">123</span>                }<a name="line.123"></a>
<span class="sourceLineNo">124</span>            }<a name="line.124"></a>
<span class="sourceLineNo">125</span>            Assert.assertTrue(found);<a name="line.125"></a>
<span class="sourceLineNo">126</span>        }<a name="line.126"></a>
<span class="sourceLineNo">127</span><a name="line.127"></a>
<span class="sourceLineNo">128</span>        // check removing any point of the support disk fails to enclose the point<a name="line.128"></a>
<span class="sourceLineNo">129</span>        for (int i = 0; i &lt; disk.getSupportSize(); ++i) {<a name="line.129"></a>
<span class="sourceLineNo">130</span>            List&lt;Vector2D&gt; reducedSupport = new ArrayList&lt;Vector2D&gt;();<a name="line.130"></a>
<span class="sourceLineNo">131</span>            int count = 0;<a name="line.131"></a>
<span class="sourceLineNo">132</span>            for (Vector2D s : disk.getSupport()) {<a name="line.132"></a>
<span class="sourceLineNo">133</span>                if (count++ != i) {<a name="line.133"></a>
<span class="sourceLineNo">134</span>                    reducedSupport.add(s);<a name="line.134"></a>
<span class="sourceLineNo">135</span>                }<a name="line.135"></a>
<span class="sourceLineNo">136</span>            }<a name="line.136"></a>
<span class="sourceLineNo">137</span>            EnclosingBall&lt;Euclidean2D, Vector2D&gt; reducedDisk = generator.ballOnSupport(reducedSupport);<a name="line.137"></a>
<span class="sourceLineNo">138</span>            boolean foundOutside = false;<a name="line.138"></a>
<span class="sourceLineNo">139</span>            for (int j = 0; j &lt; points.size() &amp;&amp; !foundOutside; ++j) {<a name="line.139"></a>
<span class="sourceLineNo">140</span>                if (!reducedDisk.contains(points.get(j), 1.0e-10)) {<a name="line.140"></a>
<span class="sourceLineNo">141</span>                    foundOutside = true;<a name="line.141"></a>
<span class="sourceLineNo">142</span>                }<a name="line.142"></a>
<span class="sourceLineNo">143</span>            }<a name="line.143"></a>
<span class="sourceLineNo">144</span>            Assert.assertTrue(foundOutside);<a name="line.144"></a>
<span class="sourceLineNo">145</span>        }<a name="line.145"></a>
<span class="sourceLineNo">146</span><a name="line.146"></a>
<span class="sourceLineNo">147</span>    }<a name="line.147"></a>
<span class="sourceLineNo">148</span><a name="line.148"></a>
<span class="sourceLineNo">149</span>    private EnclosingBall&lt;Euclidean2D, Vector2D&gt; checkDisk(List&lt;Vector2D&gt; points) {<a name="line.149"></a>
<span class="sourceLineNo">150</span><a name="line.150"></a>
<span class="sourceLineNo">151</span>        WelzlEncloser&lt;Euclidean2D, Vector2D&gt; encloser =<a name="line.151"></a>
<span class="sourceLineNo">152</span>                new WelzlEncloser&lt;Euclidean2D, Vector2D&gt;(1.0e-10, new DiskGenerator());<a name="line.152"></a>
<span class="sourceLineNo">153</span>        EnclosingBall&lt;Euclidean2D, Vector2D&gt; disk = encloser.enclose(points);<a name="line.153"></a>
<span class="sourceLineNo">154</span><a name="line.154"></a>
<span class="sourceLineNo">155</span>        // all points are enclosed<a name="line.155"></a>
<span class="sourceLineNo">156</span>        for (Vector2D v : points) {<a name="line.156"></a>
<span class="sourceLineNo">157</span>            Assert.assertTrue(disk.contains(v, 1.0e-10));<a name="line.157"></a>
<span class="sourceLineNo">158</span>        }<a name="line.158"></a>
<span class="sourceLineNo">159</span><a name="line.159"></a>
<span class="sourceLineNo">160</span>        for (Vector2D v : points) {<a name="line.160"></a>
<span class="sourceLineNo">161</span>            boolean inSupport = false;<a name="line.161"></a>
<span class="sourceLineNo">162</span>            for (Vector2D s : disk.getSupport()) {<a name="line.162"></a>
<span class="sourceLineNo">163</span>                if (v == s) {<a name="line.163"></a>
<span class="sourceLineNo">164</span>                    inSupport = true;<a name="line.164"></a>
<span class="sourceLineNo">165</span>                }<a name="line.165"></a>
<span class="sourceLineNo">166</span>            }<a name="line.166"></a>
<span class="sourceLineNo">167</span>            if (inSupport) {<a name="line.167"></a>
<span class="sourceLineNo">168</span>                // points on the support should be outside of reduced ball<a name="line.168"></a>
<span class="sourceLineNo">169</span>                Assert.assertFalse(disk.contains(v, -0.001));<a name="line.169"></a>
<span class="sourceLineNo">170</span>            }<a name="line.170"></a>
<span class="sourceLineNo">171</span>        }<a name="line.171"></a>
<span class="sourceLineNo">172</span><a name="line.172"></a>
<span class="sourceLineNo">173</span>        return disk;<a name="line.173"></a>
<span class="sourceLineNo">174</span><a name="line.174"></a>
<span class="sourceLineNo">175</span>    }<a name="line.175"></a>
<span class="sourceLineNo">176</span><a name="line.176"></a>
<span class="sourceLineNo">177</span>}<a name="line.177"></a>




























































</pre>
</div>
</body>
</html>
