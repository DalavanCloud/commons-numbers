<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span><a name="line.17"></a>
<span class="sourceLineNo">018</span>package org.apache.commons.math3.optim.nonlinear.scalar.noderiv;<a name="line.18"></a>
<span class="sourceLineNo">019</span><a name="line.19"></a>
<span class="sourceLineNo">020</span><a name="line.20"></a>
<span class="sourceLineNo">021</span>import org.apache.commons.math3.exception.TooManyEvaluationsException;<a name="line.21"></a>
<span class="sourceLineNo">022</span>import org.apache.commons.math3.exception.MathUnsupportedOperationException;<a name="line.22"></a>
<span class="sourceLineNo">023</span>import org.apache.commons.math3.analysis.MultivariateFunction;<a name="line.23"></a>
<span class="sourceLineNo">024</span>import org.apache.commons.math3.analysis.MultivariateVectorFunction;<a name="line.24"></a>
<span class="sourceLineNo">025</span>import org.apache.commons.math3.linear.Array2DRowRealMatrix;<a name="line.25"></a>
<span class="sourceLineNo">026</span>import org.apache.commons.math3.linear.RealMatrix;<a name="line.26"></a>
<span class="sourceLineNo">027</span>import org.apache.commons.math3.optim.InitialGuess;<a name="line.27"></a>
<span class="sourceLineNo">028</span>import org.apache.commons.math3.optim.MaxEval;<a name="line.28"></a>
<span class="sourceLineNo">029</span>import org.apache.commons.math3.optim.SimpleBounds;<a name="line.29"></a>
<span class="sourceLineNo">030</span>import org.apache.commons.math3.optim.PointValuePair;<a name="line.30"></a>
<span class="sourceLineNo">031</span>import org.apache.commons.math3.optim.nonlinear.scalar.GoalType;<a name="line.31"></a>
<span class="sourceLineNo">032</span>import org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction;<a name="line.32"></a>
<span class="sourceLineNo">033</span>import org.apache.commons.math3.optim.nonlinear.scalar.LeastSquaresConverter;<a name="line.33"></a>
<span class="sourceLineNo">034</span>import org.apache.commons.math3.util.FastMath;<a name="line.34"></a>
<span class="sourceLineNo">035</span>import org.junit.Assert;<a name="line.35"></a>
<span class="sourceLineNo">036</span>import org.junit.Test;<a name="line.36"></a>
<span class="sourceLineNo">037</span><a name="line.37"></a>
<span class="sourceLineNo">038</span>public class SimplexOptimizerNelderMeadTest {<a name="line.38"></a>
<span class="sourceLineNo">039</span>    @Test(expected=MathUnsupportedOperationException.class)<a name="line.39"></a>
<span class="sourceLineNo">040</span>    public void testBoundsUnsupported() {<a name="line.40"></a>
<span class="sourceLineNo">041</span>        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);<a name="line.41"></a>
<span class="sourceLineNo">042</span>        final FourExtrema fourExtrema = new FourExtrema();<a name="line.42"></a>
<span class="sourceLineNo">043</span><a name="line.43"></a>
<span class="sourceLineNo">044</span>        optimizer.optimize(new MaxEval(100),<a name="line.44"></a>
<span class="sourceLineNo">045</span>                           new ObjectiveFunction(fourExtrema),<a name="line.45"></a>
<span class="sourceLineNo">046</span>                           GoalType.MINIMIZE,<a name="line.46"></a>
<span class="sourceLineNo">047</span>                           new InitialGuess(new double[] { -3, 0 }),<a name="line.47"></a>
<span class="sourceLineNo">048</span>                           new NelderMeadSimplex(new double[] { 0.2, 0.2 }),<a name="line.48"></a>
<span class="sourceLineNo">049</span>                           new SimpleBounds(new double[] { -5, -1 },<a name="line.49"></a>
<span class="sourceLineNo">050</span>                                            new double[] { 5, 1 }));<a name="line.50"></a>
<span class="sourceLineNo">051</span>    }<a name="line.51"></a>
<span class="sourceLineNo">052</span><a name="line.52"></a>
<span class="sourceLineNo">053</span>    @Test<a name="line.53"></a>
<span class="sourceLineNo">054</span>    public void testMinimize1() {<a name="line.54"></a>
<span class="sourceLineNo">055</span>        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);<a name="line.55"></a>
<span class="sourceLineNo">056</span>        final FourExtrema fourExtrema = new FourExtrema();<a name="line.56"></a>
<span class="sourceLineNo">057</span><a name="line.57"></a>
<span class="sourceLineNo">058</span>        final PointValuePair optimum<a name="line.58"></a>
<span class="sourceLineNo">059</span>            = optimizer.optimize(new MaxEval(100),<a name="line.59"></a>
<span class="sourceLineNo">060</span>                                 new ObjectiveFunction(fourExtrema),<a name="line.60"></a>
<span class="sourceLineNo">061</span>                                 GoalType.MINIMIZE,<a name="line.61"></a>
<span class="sourceLineNo">062</span>                                 new InitialGuess(new double[] { -3, 0 }),<a name="line.62"></a>
<span class="sourceLineNo">063</span>                                 new NelderMeadSimplex(new double[] { 0.2, 0.2 }));<a name="line.63"></a>
<span class="sourceLineNo">064</span>        Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 2e-7);<a name="line.64"></a>
<span class="sourceLineNo">065</span>        Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 2e-5);<a name="line.65"></a>
<span class="sourceLineNo">066</span>        Assert.assertEquals(fourExtrema.valueXmYp, optimum.getValue(), 6e-12);<a name="line.66"></a>
<span class="sourceLineNo">067</span>        Assert.assertTrue(optimizer.getEvaluations() &gt; 60);<a name="line.67"></a>
<span class="sourceLineNo">068</span>        Assert.assertTrue(optimizer.getEvaluations() &lt; 90);<a name="line.68"></a>
<span class="sourceLineNo">069</span><a name="line.69"></a>
<span class="sourceLineNo">070</span>        // Check that the number of iterations is updated (MATH-949).<a name="line.70"></a>
<span class="sourceLineNo">071</span>        Assert.assertTrue(optimizer.getIterations() &gt; 0);<a name="line.71"></a>
<span class="sourceLineNo">072</span>    }<a name="line.72"></a>
<span class="sourceLineNo">073</span><a name="line.73"></a>
<span class="sourceLineNo">074</span>    @Test<a name="line.74"></a>
<span class="sourceLineNo">075</span>    public void testMinimize2() {<a name="line.75"></a>
<span class="sourceLineNo">076</span>        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);<a name="line.76"></a>
<span class="sourceLineNo">077</span>        final FourExtrema fourExtrema = new FourExtrema();<a name="line.77"></a>
<span class="sourceLineNo">078</span><a name="line.78"></a>
<span class="sourceLineNo">079</span>        final PointValuePair optimum<a name="line.79"></a>
<span class="sourceLineNo">080</span>            = optimizer.optimize(new MaxEval(100),<a name="line.80"></a>
<span class="sourceLineNo">081</span>                                 new ObjectiveFunction(fourExtrema),<a name="line.81"></a>
<span class="sourceLineNo">082</span>                                 GoalType.MINIMIZE,<a name="line.82"></a>
<span class="sourceLineNo">083</span>                                 new InitialGuess(new double[] { 1, 0 }),<a name="line.83"></a>
<span class="sourceLineNo">084</span>                                 new NelderMeadSimplex(new double[] { 0.2, 0.2 }));<a name="line.84"></a>
<span class="sourceLineNo">085</span>        Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 5e-6);<a name="line.85"></a>
<span class="sourceLineNo">086</span>        Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 6e-6);<a name="line.86"></a>
<span class="sourceLineNo">087</span>        Assert.assertEquals(fourExtrema.valueXpYm, optimum.getValue(), 1e-11);<a name="line.87"></a>
<span class="sourceLineNo">088</span>        Assert.assertTrue(optimizer.getEvaluations() &gt; 60);<a name="line.88"></a>
<span class="sourceLineNo">089</span>        Assert.assertTrue(optimizer.getEvaluations() &lt; 90);<a name="line.89"></a>
<span class="sourceLineNo">090</span><a name="line.90"></a>
<span class="sourceLineNo">091</span>        // Check that the number of iterations is updated (MATH-949).<a name="line.91"></a>
<span class="sourceLineNo">092</span>        Assert.assertTrue(optimizer.getIterations() &gt; 0);<a name="line.92"></a>
<span class="sourceLineNo">093</span>    }<a name="line.93"></a>
<span class="sourceLineNo">094</span><a name="line.94"></a>
<span class="sourceLineNo">095</span>    @Test<a name="line.95"></a>
<span class="sourceLineNo">096</span>    public void testMaximize1() {<a name="line.96"></a>
<span class="sourceLineNo">097</span>        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);<a name="line.97"></a>
<span class="sourceLineNo">098</span>        final FourExtrema fourExtrema = new FourExtrema();<a name="line.98"></a>
<span class="sourceLineNo">099</span><a name="line.99"></a>
<span class="sourceLineNo">100</span>        final PointValuePair optimum<a name="line.100"></a>
<span class="sourceLineNo">101</span>            = optimizer.optimize(new MaxEval(100),<a name="line.101"></a>
<span class="sourceLineNo">102</span>                                 new ObjectiveFunction(fourExtrema),<a name="line.102"></a>
<span class="sourceLineNo">103</span>                                 GoalType.MAXIMIZE,<a name="line.103"></a>
<span class="sourceLineNo">104</span>                                 new InitialGuess(new double[] { -3, 0 }),<a name="line.104"></a>
<span class="sourceLineNo">105</span>                                 new NelderMeadSimplex(new double[] { 0.2, 0.2 }));<a name="line.105"></a>
<span class="sourceLineNo">106</span>        Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 1e-5);<a name="line.106"></a>
<span class="sourceLineNo">107</span>        Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-6);<a name="line.107"></a>
<span class="sourceLineNo">108</span>        Assert.assertEquals(fourExtrema.valueXmYm, optimum.getValue(), 3e-12);<a name="line.108"></a>
<span class="sourceLineNo">109</span>        Assert.assertTrue(optimizer.getEvaluations() &gt; 60);<a name="line.109"></a>
<span class="sourceLineNo">110</span>        Assert.assertTrue(optimizer.getEvaluations() &lt; 90);<a name="line.110"></a>
<span class="sourceLineNo">111</span><a name="line.111"></a>
<span class="sourceLineNo">112</span>        // Check that the number of iterations is updated (MATH-949).<a name="line.112"></a>
<span class="sourceLineNo">113</span>        Assert.assertTrue(optimizer.getIterations() &gt; 0);<a name="line.113"></a>
<span class="sourceLineNo">114</span>    }<a name="line.114"></a>
<span class="sourceLineNo">115</span><a name="line.115"></a>
<span class="sourceLineNo">116</span>    @Test<a name="line.116"></a>
<span class="sourceLineNo">117</span>    public void testMaximize2() {<a name="line.117"></a>
<span class="sourceLineNo">118</span>        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);<a name="line.118"></a>
<span class="sourceLineNo">119</span>        final FourExtrema fourExtrema = new FourExtrema();<a name="line.119"></a>
<span class="sourceLineNo">120</span><a name="line.120"></a>
<span class="sourceLineNo">121</span>        final PointValuePair optimum<a name="line.121"></a>
<span class="sourceLineNo">122</span>            = optimizer.optimize(new MaxEval(100),<a name="line.122"></a>
<span class="sourceLineNo">123</span>                                 new ObjectiveFunction(fourExtrema),<a name="line.123"></a>
<span class="sourceLineNo">124</span>                                 GoalType.MAXIMIZE,<a name="line.124"></a>
<span class="sourceLineNo">125</span>                                 new InitialGuess(new double[] { 1, 0 }),<a name="line.125"></a>
<span class="sourceLineNo">126</span>                                 new NelderMeadSimplex(new double[] { 0.2, 0.2 }));<a name="line.126"></a>
<span class="sourceLineNo">127</span>        Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 4e-6);<a name="line.127"></a>
<span class="sourceLineNo">128</span>        Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 5e-6);<a name="line.128"></a>
<span class="sourceLineNo">129</span>        Assert.assertEquals(fourExtrema.valueXpYp, optimum.getValue(), 7e-12);<a name="line.129"></a>
<span class="sourceLineNo">130</span>        Assert.assertTrue(optimizer.getEvaluations() &gt; 60);<a name="line.130"></a>
<span class="sourceLineNo">131</span>        Assert.assertTrue(optimizer.getEvaluations() &lt; 90);<a name="line.131"></a>
<span class="sourceLineNo">132</span><a name="line.132"></a>
<span class="sourceLineNo">133</span>        // Check that the number of iterations is updated (MATH-949).<a name="line.133"></a>
<span class="sourceLineNo">134</span>        Assert.assertTrue(optimizer.getIterations() &gt; 0);<a name="line.134"></a>
<span class="sourceLineNo">135</span>    }<a name="line.135"></a>
<span class="sourceLineNo">136</span><a name="line.136"></a>
<span class="sourceLineNo">137</span>    @Test<a name="line.137"></a>
<span class="sourceLineNo">138</span>    public void testRosenbrock() {<a name="line.138"></a>
<span class="sourceLineNo">139</span><a name="line.139"></a>
<span class="sourceLineNo">140</span>        Rosenbrock rosenbrock = new Rosenbrock();<a name="line.140"></a>
<span class="sourceLineNo">141</span>        SimplexOptimizer optimizer = new SimplexOptimizer(-1, 1e-3);<a name="line.141"></a>
<span class="sourceLineNo">142</span>        PointValuePair optimum<a name="line.142"></a>
<span class="sourceLineNo">143</span>        = optimizer.optimize(new MaxEval(100),<a name="line.143"></a>
<span class="sourceLineNo">144</span>                             new ObjectiveFunction(rosenbrock),<a name="line.144"></a>
<span class="sourceLineNo">145</span>                             GoalType.MINIMIZE,<a name="line.145"></a>
<span class="sourceLineNo">146</span>                             new InitialGuess(new double[] { -1.2, 1 }),<a name="line.146"></a>
<span class="sourceLineNo">147</span>                                new NelderMeadSimplex(new double[][] {<a name="line.147"></a>
<span class="sourceLineNo">148</span>                                        { -1.2,  1 },<a name="line.148"></a>
<span class="sourceLineNo">149</span>                                        { 0.9, 1.2 },<a name="line.149"></a>
<span class="sourceLineNo">150</span>                                        {  3.5, -2.3 } }));<a name="line.150"></a>
<span class="sourceLineNo">151</span><a name="line.151"></a>
<span class="sourceLineNo">152</span>        Assert.assertEquals(rosenbrock.getCount(), optimizer.getEvaluations());<a name="line.152"></a>
<span class="sourceLineNo">153</span>        Assert.assertTrue(optimizer.getEvaluations() &gt; 40);<a name="line.153"></a>
<span class="sourceLineNo">154</span>        Assert.assertTrue(optimizer.getEvaluations() &lt; 50);<a name="line.154"></a>
<span class="sourceLineNo">155</span>        Assert.assertTrue(optimum.getValue() &lt; 8e-4);<a name="line.155"></a>
<span class="sourceLineNo">156</span>    }<a name="line.156"></a>
<span class="sourceLineNo">157</span><a name="line.157"></a>
<span class="sourceLineNo">158</span>    @Test<a name="line.158"></a>
<span class="sourceLineNo">159</span>    public void testPowell() {<a name="line.159"></a>
<span class="sourceLineNo">160</span>        Powell powell = new Powell();<a name="line.160"></a>
<span class="sourceLineNo">161</span>        SimplexOptimizer optimizer = new SimplexOptimizer(-1, 1e-3);<a name="line.161"></a>
<span class="sourceLineNo">162</span>        PointValuePair optimum =<a name="line.162"></a>
<span class="sourceLineNo">163</span>            optimizer.optimize(new MaxEval(200),<a name="line.163"></a>
<span class="sourceLineNo">164</span>                               new ObjectiveFunction(powell),<a name="line.164"></a>
<span class="sourceLineNo">165</span>                               GoalType.MINIMIZE,<a name="line.165"></a>
<span class="sourceLineNo">166</span>                               new InitialGuess(new double[] { 3, -1, 0, 1 }),<a name="line.166"></a>
<span class="sourceLineNo">167</span>                               new NelderMeadSimplex(4));<a name="line.167"></a>
<span class="sourceLineNo">168</span>        Assert.assertEquals(powell.getCount(), optimizer.getEvaluations());<a name="line.168"></a>
<span class="sourceLineNo">169</span>        Assert.assertTrue(optimizer.getEvaluations() &gt; 110);<a name="line.169"></a>
<span class="sourceLineNo">170</span>        Assert.assertTrue(optimizer.getEvaluations() &lt; 130);<a name="line.170"></a>
<span class="sourceLineNo">171</span>        Assert.assertTrue(optimum.getValue() &lt; 2e-3);<a name="line.171"></a>
<span class="sourceLineNo">172</span>    }<a name="line.172"></a>
<span class="sourceLineNo">173</span><a name="line.173"></a>
<span class="sourceLineNo">174</span>    @Test<a name="line.174"></a>
<span class="sourceLineNo">175</span>    public void testLeastSquares1() {<a name="line.175"></a>
<span class="sourceLineNo">176</span>        final RealMatrix factors<a name="line.176"></a>
<span class="sourceLineNo">177</span>            = new Array2DRowRealMatrix(new double[][] {<a name="line.177"></a>
<span class="sourceLineNo">178</span>                    { 1, 0 },<a name="line.178"></a>
<span class="sourceLineNo">179</span>                    { 0, 1 }<a name="line.179"></a>
<span class="sourceLineNo">180</span>                }, false);<a name="line.180"></a>
<span class="sourceLineNo">181</span>        LeastSquaresConverter ls = new LeastSquaresConverter(new MultivariateVectorFunction() {<a name="line.181"></a>
<span class="sourceLineNo">182</span>                public double[] value(double[] variables) {<a name="line.182"></a>
<span class="sourceLineNo">183</span>                    return factors.operate(variables);<a name="line.183"></a>
<span class="sourceLineNo">184</span>                }<a name="line.184"></a>
<span class="sourceLineNo">185</span>            }, new double[] { 2.0, -3.0 });<a name="line.185"></a>
<span class="sourceLineNo">186</span>        SimplexOptimizer optimizer = new SimplexOptimizer(-1, 1e-6);<a name="line.186"></a>
<span class="sourceLineNo">187</span>        PointValuePair optimum =<a name="line.187"></a>
<span class="sourceLineNo">188</span>            optimizer.optimize(new MaxEval(200),<a name="line.188"></a>
<span class="sourceLineNo">189</span>                               new ObjectiveFunction(ls),<a name="line.189"></a>
<span class="sourceLineNo">190</span>                               GoalType.MINIMIZE,<a name="line.190"></a>
<span class="sourceLineNo">191</span>                               new InitialGuess(new double[] { 10, 10 }),<a name="line.191"></a>
<span class="sourceLineNo">192</span>                               new NelderMeadSimplex(2));<a name="line.192"></a>
<span class="sourceLineNo">193</span>        Assert.assertEquals( 2, optimum.getPointRef()[0], 3e-5);<a name="line.193"></a>
<span class="sourceLineNo">194</span>        Assert.assertEquals(-3, optimum.getPointRef()[1], 4e-4);<a name="line.194"></a>
<span class="sourceLineNo">195</span>        Assert.assertTrue(optimizer.getEvaluations() &gt; 60);<a name="line.195"></a>
<span class="sourceLineNo">196</span>        Assert.assertTrue(optimizer.getEvaluations() &lt; 80);<a name="line.196"></a>
<span class="sourceLineNo">197</span>        Assert.assertTrue(optimum.getValue() &lt; 1.0e-6);<a name="line.197"></a>
<span class="sourceLineNo">198</span>    }<a name="line.198"></a>
<span class="sourceLineNo">199</span><a name="line.199"></a>
<span class="sourceLineNo">200</span>    @Test<a name="line.200"></a>
<span class="sourceLineNo">201</span>    public void testLeastSquares2() {<a name="line.201"></a>
<span class="sourceLineNo">202</span>        final RealMatrix factors<a name="line.202"></a>
<span class="sourceLineNo">203</span>            = new Array2DRowRealMatrix(new double[][] {<a name="line.203"></a>
<span class="sourceLineNo">204</span>                    { 1, 0 },<a name="line.204"></a>
<span class="sourceLineNo">205</span>                    { 0, 1 }<a name="line.205"></a>
<span class="sourceLineNo">206</span>                }, false);<a name="line.206"></a>
<span class="sourceLineNo">207</span>        LeastSquaresConverter ls = new LeastSquaresConverter(new MultivariateVectorFunction() {<a name="line.207"></a>
<span class="sourceLineNo">208</span>                public double[] value(double[] variables) {<a name="line.208"></a>
<span class="sourceLineNo">209</span>                    return factors.operate(variables);<a name="line.209"></a>
<span class="sourceLineNo">210</span>                }<a name="line.210"></a>
<span class="sourceLineNo">211</span>            }, new double[] { 2, -3 }, new double[] { 10, 0.1 });<a name="line.211"></a>
<span class="sourceLineNo">212</span>        SimplexOptimizer optimizer = new SimplexOptimizer(-1, 1e-6);<a name="line.212"></a>
<span class="sourceLineNo">213</span>        PointValuePair optimum =<a name="line.213"></a>
<span class="sourceLineNo">214</span>            optimizer.optimize(new MaxEval(200),<a name="line.214"></a>
<span class="sourceLineNo">215</span>                               new ObjectiveFunction(ls),<a name="line.215"></a>
<span class="sourceLineNo">216</span>                               GoalType.MINIMIZE,<a name="line.216"></a>
<span class="sourceLineNo">217</span>                               new InitialGuess(new double[] { 10, 10 }),<a name="line.217"></a>
<span class="sourceLineNo">218</span>                               new NelderMeadSimplex(2));<a name="line.218"></a>
<span class="sourceLineNo">219</span>        Assert.assertEquals( 2, optimum.getPointRef()[0], 5e-5);<a name="line.219"></a>
<span class="sourceLineNo">220</span>        Assert.assertEquals(-3, optimum.getPointRef()[1], 8e-4);<a name="line.220"></a>
<span class="sourceLineNo">221</span>        Assert.assertTrue(optimizer.getEvaluations() &gt; 60);<a name="line.221"></a>
<span class="sourceLineNo">222</span>        Assert.assertTrue(optimizer.getEvaluations() &lt; 80);<a name="line.222"></a>
<span class="sourceLineNo">223</span>        Assert.assertTrue(optimum.getValue() &lt; 1e-6);<a name="line.223"></a>
<span class="sourceLineNo">224</span>    }<a name="line.224"></a>
<span class="sourceLineNo">225</span><a name="line.225"></a>
<span class="sourceLineNo">226</span>    @Test<a name="line.226"></a>
<span class="sourceLineNo">227</span>    public void testLeastSquares3() {<a name="line.227"></a>
<span class="sourceLineNo">228</span>        final RealMatrix factors =<a name="line.228"></a>
<span class="sourceLineNo">229</span>            new Array2DRowRealMatrix(new double[][] {<a name="line.229"></a>
<span class="sourceLineNo">230</span>                    { 1, 0 },<a name="line.230"></a>
<span class="sourceLineNo">231</span>                    { 0, 1 }<a name="line.231"></a>
<span class="sourceLineNo">232</span>                }, false);<a name="line.232"></a>
<span class="sourceLineNo">233</span>        LeastSquaresConverter ls = new LeastSquaresConverter(new MultivariateVectorFunction() {<a name="line.233"></a>
<span class="sourceLineNo">234</span>                public double[] value(double[] variables) {<a name="line.234"></a>
<span class="sourceLineNo">235</span>                    return factors.operate(variables);<a name="line.235"></a>
<span class="sourceLineNo">236</span>                }<a name="line.236"></a>
<span class="sourceLineNo">237</span>            }, new double[] { 2, -3 }, new Array2DRowRealMatrix(new double [][] {<a name="line.237"></a>
<span class="sourceLineNo">238</span>                    { 1, 1.2 }, { 1.2, 2 }<a name="line.238"></a>
<span class="sourceLineNo">239</span>                }));<a name="line.239"></a>
<span class="sourceLineNo">240</span>        SimplexOptimizer optimizer = new SimplexOptimizer(-1, 1e-6);<a name="line.240"></a>
<span class="sourceLineNo">241</span>        PointValuePair optimum<a name="line.241"></a>
<span class="sourceLineNo">242</span>            = optimizer.optimize(new MaxEval(200),<a name="line.242"></a>
<span class="sourceLineNo">243</span>                                 new ObjectiveFunction(ls),<a name="line.243"></a>
<span class="sourceLineNo">244</span>                                 GoalType.MINIMIZE,<a name="line.244"></a>
<span class="sourceLineNo">245</span>                                 new InitialGuess(new double[] { 10, 10 }),<a name="line.245"></a>
<span class="sourceLineNo">246</span>                                 new NelderMeadSimplex(2));<a name="line.246"></a>
<span class="sourceLineNo">247</span>        Assert.assertEquals( 2, optimum.getPointRef()[0], 2e-3);<a name="line.247"></a>
<span class="sourceLineNo">248</span>        Assert.assertEquals(-3, optimum.getPointRef()[1], 8e-4);<a name="line.248"></a>
<span class="sourceLineNo">249</span>        Assert.assertTrue(optimizer.getEvaluations() &gt; 60);<a name="line.249"></a>
<span class="sourceLineNo">250</span>        Assert.assertTrue(optimizer.getEvaluations() &lt; 80);<a name="line.250"></a>
<span class="sourceLineNo">251</span>        Assert.assertTrue(optimum.getValue() &lt; 1e-6);<a name="line.251"></a>
<span class="sourceLineNo">252</span>    }<a name="line.252"></a>
<span class="sourceLineNo">253</span><a name="line.253"></a>
<span class="sourceLineNo">254</span>    @Test(expected=TooManyEvaluationsException.class)<a name="line.254"></a>
<span class="sourceLineNo">255</span>    public void testMaxIterations() {<a name="line.255"></a>
<span class="sourceLineNo">256</span>        Powell powell = new Powell();<a name="line.256"></a>
<span class="sourceLineNo">257</span>        SimplexOptimizer optimizer = new SimplexOptimizer(-1, 1e-3);<a name="line.257"></a>
<span class="sourceLineNo">258</span>        optimizer.optimize(new MaxEval(20),<a name="line.258"></a>
<span class="sourceLineNo">259</span>                           new ObjectiveFunction(powell),<a name="line.259"></a>
<span class="sourceLineNo">260</span>                           GoalType.MINIMIZE,<a name="line.260"></a>
<span class="sourceLineNo">261</span>                           new InitialGuess(new double[] { 3, -1, 0, 1 }),<a name="line.261"></a>
<span class="sourceLineNo">262</span>                           new NelderMeadSimplex(4));<a name="line.262"></a>
<span class="sourceLineNo">263</span>    }<a name="line.263"></a>
<span class="sourceLineNo">264</span><a name="line.264"></a>
<span class="sourceLineNo">265</span>    private static class FourExtrema implements MultivariateFunction {<a name="line.265"></a>
<span class="sourceLineNo">266</span>        // The following function has 4 local extrema.<a name="line.266"></a>
<span class="sourceLineNo">267</span>        final double xM = -3.841947088256863675365;<a name="line.267"></a>
<span class="sourceLineNo">268</span>        final double yM = -1.391745200270734924416;<a name="line.268"></a>
<span class="sourceLineNo">269</span>        final double xP =  0.2286682237349059125691;<a name="line.269"></a>
<span class="sourceLineNo">270</span>        final double yP = -yM;<a name="line.270"></a>
<span class="sourceLineNo">271</span>        final double valueXmYm = 0.2373295333134216789769; // Local maximum.<a name="line.271"></a>
<span class="sourceLineNo">272</span>        final double valueXmYp = -valueXmYm; // Local minimum.<a name="line.272"></a>
<span class="sourceLineNo">273</span>        final double valueXpYm = -0.7290400707055187115322; // Global minimum.<a name="line.273"></a>
<span class="sourceLineNo">274</span>        final double valueXpYp = -valueXpYm; // Global maximum.<a name="line.274"></a>
<span class="sourceLineNo">275</span><a name="line.275"></a>
<span class="sourceLineNo">276</span>        public double value(double[] variables) {<a name="line.276"></a>
<span class="sourceLineNo">277</span>            final double x = variables[0];<a name="line.277"></a>
<span class="sourceLineNo">278</span>            final double y = variables[1];<a name="line.278"></a>
<span class="sourceLineNo">279</span>            return (x == 0 || y == 0) ? 0 :<a name="line.279"></a>
<span class="sourceLineNo">280</span>                FastMath.atan(x) * FastMath.atan(x + 2) * FastMath.atan(y) * FastMath.atan(y) / (x * y);<a name="line.280"></a>
<span class="sourceLineNo">281</span>        }<a name="line.281"></a>
<span class="sourceLineNo">282</span>    }<a name="line.282"></a>
<span class="sourceLineNo">283</span><a name="line.283"></a>
<span class="sourceLineNo">284</span>    private static class Rosenbrock implements MultivariateFunction {<a name="line.284"></a>
<span class="sourceLineNo">285</span>        private int count;<a name="line.285"></a>
<span class="sourceLineNo">286</span><a name="line.286"></a>
<span class="sourceLineNo">287</span>        public Rosenbrock() {<a name="line.287"></a>
<span class="sourceLineNo">288</span>            count = 0;<a name="line.288"></a>
<span class="sourceLineNo">289</span>        }<a name="line.289"></a>
<span class="sourceLineNo">290</span><a name="line.290"></a>
<span class="sourceLineNo">291</span>        public double value(double[] x) {<a name="line.291"></a>
<span class="sourceLineNo">292</span>            ++count;<a name="line.292"></a>
<span class="sourceLineNo">293</span>            double a = x[1] - x[0] * x[0];<a name="line.293"></a>
<span class="sourceLineNo">294</span>            double b = 1.0 - x[0];<a name="line.294"></a>
<span class="sourceLineNo">295</span>            return 100 * a * a + b * b;<a name="line.295"></a>
<span class="sourceLineNo">296</span>        }<a name="line.296"></a>
<span class="sourceLineNo">297</span><a name="line.297"></a>
<span class="sourceLineNo">298</span>        public int getCount() {<a name="line.298"></a>
<span class="sourceLineNo">299</span>            return count;<a name="line.299"></a>
<span class="sourceLineNo">300</span>        }<a name="line.300"></a>
<span class="sourceLineNo">301</span>    }<a name="line.301"></a>
<span class="sourceLineNo">302</span><a name="line.302"></a>
<span class="sourceLineNo">303</span>    private static class Powell implements MultivariateFunction {<a name="line.303"></a>
<span class="sourceLineNo">304</span>        private int count;<a name="line.304"></a>
<span class="sourceLineNo">305</span><a name="line.305"></a>
<span class="sourceLineNo">306</span>        public Powell() {<a name="line.306"></a>
<span class="sourceLineNo">307</span>            count = 0;<a name="line.307"></a>
<span class="sourceLineNo">308</span>        }<a name="line.308"></a>
<span class="sourceLineNo">309</span><a name="line.309"></a>
<span class="sourceLineNo">310</span>        public double value(double[] x) {<a name="line.310"></a>
<span class="sourceLineNo">311</span>            ++count;<a name="line.311"></a>
<span class="sourceLineNo">312</span>            double a = x[0] + 10 * x[1];<a name="line.312"></a>
<span class="sourceLineNo">313</span>            double b = x[2] - x[3];<a name="line.313"></a>
<span class="sourceLineNo">314</span>            double c = x[1] - 2 * x[2];<a name="line.314"></a>
<span class="sourceLineNo">315</span>            double d = x[0] - x[3];<a name="line.315"></a>
<span class="sourceLineNo">316</span>            return a * a + 5 * b * b + c * c * c * c + 10 * d * d * d * d;<a name="line.316"></a>
<span class="sourceLineNo">317</span>        }<a name="line.317"></a>
<span class="sourceLineNo">318</span><a name="line.318"></a>
<span class="sourceLineNo">319</span>        public int getCount() {<a name="line.319"></a>
<span class="sourceLineNo">320</span>            return count;<a name="line.320"></a>
<span class="sourceLineNo">321</span>        }<a name="line.321"></a>
<span class="sourceLineNo">322</span>    }<a name="line.322"></a>
<span class="sourceLineNo">323</span>}<a name="line.323"></a>




























































</pre>
</div>
</body>
</html>
