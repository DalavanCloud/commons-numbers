<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span>package org.apache.commons.math3.distribution;<a name="line.17"></a>
<span class="sourceLineNo">018</span><a name="line.18"></a>
<span class="sourceLineNo">019</span>import java.util.List;<a name="line.19"></a>
<span class="sourceLineNo">020</span>import java.util.ArrayList;<a name="line.20"></a>
<span class="sourceLineNo">021</span>import org.apache.commons.math3.exception.NotPositiveException;<a name="line.21"></a>
<span class="sourceLineNo">022</span>import org.apache.commons.math3.exception.MathArithmeticException;<a name="line.22"></a>
<span class="sourceLineNo">023</span>import org.apache.commons.math3.util.Pair;<a name="line.23"></a>
<span class="sourceLineNo">024</span>import org.junit.Assert;<a name="line.24"></a>
<span class="sourceLineNo">025</span>import org.junit.Test;<a name="line.25"></a>
<span class="sourceLineNo">026</span><a name="line.26"></a>
<span class="sourceLineNo">027</span>/**<a name="line.27"></a>
<span class="sourceLineNo">028</span> * Test that demonstrates the use of {@link MixtureMultivariateRealDistribution}<a name="line.28"></a>
<span class="sourceLineNo">029</span> * in order to create a mixture model composed of {@link MultivariateNormalDistribution<a name="line.29"></a>
<span class="sourceLineNo">030</span> * normal distributions}.<a name="line.30"></a>
<span class="sourceLineNo">031</span> */<a name="line.31"></a>
<span class="sourceLineNo">032</span>public class MultivariateNormalMixtureModelDistributionTest {<a name="line.32"></a>
<span class="sourceLineNo">033</span><a name="line.33"></a>
<span class="sourceLineNo">034</span>    @Test<a name="line.34"></a>
<span class="sourceLineNo">035</span>    public void testNonUnitWeightSum() {<a name="line.35"></a>
<span class="sourceLineNo">036</span>        final double[] weights = { 1, 2 };<a name="line.36"></a>
<span class="sourceLineNo">037</span>        final double[][] means = { { -1.5, 2.0 },<a name="line.37"></a>
<span class="sourceLineNo">038</span>                                   { 4.0, 8.2 } };<a name="line.38"></a>
<span class="sourceLineNo">039</span>        final double[][][] covariances = { { { 2.0, -1.1 },<a name="line.39"></a>
<span class="sourceLineNo">040</span>                                             { -1.1, 2.0 } },<a name="line.40"></a>
<span class="sourceLineNo">041</span>                                           { { 3.5, 1.5 },<a name="line.41"></a>
<span class="sourceLineNo">042</span>                                             { 1.5, 3.5 } } };<a name="line.42"></a>
<span class="sourceLineNo">043</span>        final MultivariateNormalMixtureModelDistribution d<a name="line.43"></a>
<span class="sourceLineNo">044</span>            = create(weights, means, covariances);<a name="line.44"></a>
<span class="sourceLineNo">045</span><a name="line.45"></a>
<span class="sourceLineNo">046</span>        final List&lt;Pair&lt;Double, MultivariateNormalDistribution&gt;&gt; comp = d.getComponents();<a name="line.46"></a>
<span class="sourceLineNo">047</span><a name="line.47"></a>
<span class="sourceLineNo">048</span>        Assert.assertEquals(1d / 3, comp.get(0).getFirst().doubleValue(), Math.ulp(1d));<a name="line.48"></a>
<span class="sourceLineNo">049</span>        Assert.assertEquals(2d / 3, comp.get(1).getFirst().doubleValue(), Math.ulp(1d));<a name="line.49"></a>
<span class="sourceLineNo">050</span>    }<a name="line.50"></a>
<span class="sourceLineNo">051</span><a name="line.51"></a>
<span class="sourceLineNo">052</span>    @Test(expected=MathArithmeticException.class)<a name="line.52"></a>
<span class="sourceLineNo">053</span>    public void testWeightSumOverFlow() {<a name="line.53"></a>
<span class="sourceLineNo">054</span>        final double[] weights = { 0.5 * Double.MAX_VALUE, 0.51 * Double.MAX_VALUE };<a name="line.54"></a>
<span class="sourceLineNo">055</span>        final double[][] means = { { -1.5, 2.0 },<a name="line.55"></a>
<span class="sourceLineNo">056</span>                                   { 4.0, 8.2 } };<a name="line.56"></a>
<span class="sourceLineNo">057</span>        final double[][][] covariances = { { { 2.0, -1.1 },<a name="line.57"></a>
<span class="sourceLineNo">058</span>                                             { -1.1, 2.0 } },<a name="line.58"></a>
<span class="sourceLineNo">059</span>                                           { { 3.5, 1.5 },<a name="line.59"></a>
<span class="sourceLineNo">060</span>                                             { 1.5, 3.5 } } };<a name="line.60"></a>
<span class="sourceLineNo">061</span>        create(weights, means, covariances);<a name="line.61"></a>
<span class="sourceLineNo">062</span>    }<a name="line.62"></a>
<span class="sourceLineNo">063</span><a name="line.63"></a>
<span class="sourceLineNo">064</span>    @Test(expected=NotPositiveException.class)<a name="line.64"></a>
<span class="sourceLineNo">065</span>    public void testPreconditionPositiveWeights() {<a name="line.65"></a>
<span class="sourceLineNo">066</span>        final double[] negativeWeights = { -0.5, 1.5 };<a name="line.66"></a>
<span class="sourceLineNo">067</span>        final double[][] means = { { -1.5, 2.0 },<a name="line.67"></a>
<span class="sourceLineNo">068</span>                                   { 4.0, 8.2 } };<a name="line.68"></a>
<span class="sourceLineNo">069</span>        final double[][][] covariances = { { { 2.0, -1.1 },<a name="line.69"></a>
<span class="sourceLineNo">070</span>                                             { -1.1, 2.0 } },<a name="line.70"></a>
<span class="sourceLineNo">071</span>                                           { { 3.5, 1.5 },<a name="line.71"></a>
<span class="sourceLineNo">072</span>                                             { 1.5, 3.5 } } };<a name="line.72"></a>
<span class="sourceLineNo">073</span>        create(negativeWeights, means, covariances);<a name="line.73"></a>
<span class="sourceLineNo">074</span>    }<a name="line.74"></a>
<span class="sourceLineNo">075</span><a name="line.75"></a>
<span class="sourceLineNo">076</span>    /**<a name="line.76"></a>
<span class="sourceLineNo">077</span>     * Test the accuracy of the density calculation.<a name="line.77"></a>
<span class="sourceLineNo">078</span>     */<a name="line.78"></a>
<span class="sourceLineNo">079</span>    @Test<a name="line.79"></a>
<span class="sourceLineNo">080</span>    public void testDensities() {<a name="line.80"></a>
<span class="sourceLineNo">081</span>        final double[] weights = { 0.3, 0.7 };<a name="line.81"></a>
<span class="sourceLineNo">082</span>        final double[][] means = { { -1.5, 2.0 },<a name="line.82"></a>
<span class="sourceLineNo">083</span>                                   { 4.0, 8.2 } };<a name="line.83"></a>
<span class="sourceLineNo">084</span>        final double[][][] covariances = { { { 2.0, -1.1 },<a name="line.84"></a>
<span class="sourceLineNo">085</span>                                             { -1.1, 2.0 } },<a name="line.85"></a>
<span class="sourceLineNo">086</span>                                           { { 3.5, 1.5 },<a name="line.86"></a>
<span class="sourceLineNo">087</span>                                             { 1.5, 3.5 } } };<a name="line.87"></a>
<span class="sourceLineNo">088</span>        final MultivariateNormalMixtureModelDistribution d<a name="line.88"></a>
<span class="sourceLineNo">089</span>            = create(weights, means, covariances);<a name="line.89"></a>
<span class="sourceLineNo">090</span><a name="line.90"></a>
<span class="sourceLineNo">091</span>        // Test vectors<a name="line.91"></a>
<span class="sourceLineNo">092</span>        final double[][] testValues = { { -1.5, 2 },<a name="line.92"></a>
<span class="sourceLineNo">093</span>                                        { 4, 8.2 },<a name="line.93"></a>
<span class="sourceLineNo">094</span>                                        { 1.5, -2 },<a name="line.94"></a>
<span class="sourceLineNo">095</span>                                        { 0, 0 } };<a name="line.95"></a>
<span class="sourceLineNo">096</span><a name="line.96"></a>
<span class="sourceLineNo">097</span>        // Densities that we should get back.<a name="line.97"></a>
<span class="sourceLineNo">098</span>        // Calculated by assigning weights to multivariate normal distribution<a name="line.98"></a>
<span class="sourceLineNo">099</span>        // and summing<a name="line.99"></a>
<span class="sourceLineNo">100</span>        // values from dmvnorm function in R 2.15 CRAN package Mixtools v0.4.<a name="line.100"></a>
<span class="sourceLineNo">101</span>        // Like: .3*dmvnorm(val,mu1,sigma1)+.7*dmvnorm(val,mu2,sigma2)<a name="line.101"></a>
<span class="sourceLineNo">102</span>        final double[] correctDensities = { 0.02862037278930575,<a name="line.102"></a>
<span class="sourceLineNo">103</span>                                            0.03523044847314091,<a name="line.103"></a>
<span class="sourceLineNo">104</span>                                            0.000416241365629767,<a name="line.104"></a>
<span class="sourceLineNo">105</span>                                            0.009932042831700297 };<a name="line.105"></a>
<span class="sourceLineNo">106</span><a name="line.106"></a>
<span class="sourceLineNo">107</span>        for (int i = 0; i &lt; testValues.length; i++) {<a name="line.107"></a>
<span class="sourceLineNo">108</span>            Assert.assertEquals(correctDensities[i], d.density(testValues[i]), Math.ulp(1d));<a name="line.108"></a>
<span class="sourceLineNo">109</span>        }<a name="line.109"></a>
<span class="sourceLineNo">110</span>    }<a name="line.110"></a>
<span class="sourceLineNo">111</span><a name="line.111"></a>
<span class="sourceLineNo">112</span>    /**<a name="line.112"></a>
<span class="sourceLineNo">113</span>     * Test the accuracy of sampling from the distribution.<a name="line.113"></a>
<span class="sourceLineNo">114</span>     */<a name="line.114"></a>
<span class="sourceLineNo">115</span>    @Test<a name="line.115"></a>
<span class="sourceLineNo">116</span>    public void testSampling() {<a name="line.116"></a>
<span class="sourceLineNo">117</span>        final double[] weights = { 0.3, 0.7 };<a name="line.117"></a>
<span class="sourceLineNo">118</span>        final double[][] means = { { -1.5, 2.0 },<a name="line.118"></a>
<span class="sourceLineNo">119</span>                                   { 4.0, 8.2 } };<a name="line.119"></a>
<span class="sourceLineNo">120</span>        final double[][][] covariances = { { { 2.0, -1.1 },<a name="line.120"></a>
<span class="sourceLineNo">121</span>                                             { -1.1, 2.0 } },<a name="line.121"></a>
<span class="sourceLineNo">122</span>                                           { { 3.5, 1.5 },<a name="line.122"></a>
<span class="sourceLineNo">123</span>                                             { 1.5, 3.5 } } };<a name="line.123"></a>
<span class="sourceLineNo">124</span>        final MultivariateNormalMixtureModelDistribution d<a name="line.124"></a>
<span class="sourceLineNo">125</span>            = create(weights, means, covariances);<a name="line.125"></a>
<span class="sourceLineNo">126</span>        d.reseedRandomGenerator(50);<a name="line.126"></a>
<span class="sourceLineNo">127</span><a name="line.127"></a>
<span class="sourceLineNo">128</span>        final double[][] correctSamples = getCorrectSamples();<a name="line.128"></a>
<span class="sourceLineNo">129</span>        final int n = correctSamples.length;<a name="line.129"></a>
<span class="sourceLineNo">130</span>        final double[][] samples = d.sample(n);<a name="line.130"></a>
<span class="sourceLineNo">131</span><a name="line.131"></a>
<span class="sourceLineNo">132</span>        for (int i = 0; i &lt; n; i++) {<a name="line.132"></a>
<span class="sourceLineNo">133</span>            for (int j = 0; j &lt; samples[i].length; j++) {<a name="line.133"></a>
<span class="sourceLineNo">134</span>                Assert.assertEquals(correctSamples[i][j], samples[i][j], 1e-16);<a name="line.134"></a>
<span class="sourceLineNo">135</span>            }<a name="line.135"></a>
<span class="sourceLineNo">136</span>        }<a name="line.136"></a>
<span class="sourceLineNo">137</span>    }<a name="line.137"></a>
<span class="sourceLineNo">138</span><a name="line.138"></a>
<span class="sourceLineNo">139</span>    /**<a name="line.139"></a>
<span class="sourceLineNo">140</span>     * Creates a mixture of Gaussian distributions.<a name="line.140"></a>
<span class="sourceLineNo">141</span>     *<a name="line.141"></a>
<span class="sourceLineNo">142</span>     * @param weights Weights.<a name="line.142"></a>
<span class="sourceLineNo">143</span>     * @param means Means.<a name="line.143"></a>
<span class="sourceLineNo">144</span>     * @param covariances Covariances.<a name="line.144"></a>
<span class="sourceLineNo">145</span>     * @return the mixture distribution.<a name="line.145"></a>
<span class="sourceLineNo">146</span>     */<a name="line.146"></a>
<span class="sourceLineNo">147</span>    private MultivariateNormalMixtureModelDistribution create(double[] weights,<a name="line.147"></a>
<span class="sourceLineNo">148</span>                                                              double[][] means,<a name="line.148"></a>
<span class="sourceLineNo">149</span>                                                              double[][][] covariances) {<a name="line.149"></a>
<span class="sourceLineNo">150</span>        final List&lt;Pair&lt;Double, MultivariateNormalDistribution&gt;&gt; mvns<a name="line.150"></a>
<span class="sourceLineNo">151</span>            = new ArrayList&lt;Pair&lt;Double, MultivariateNormalDistribution&gt;&gt;();<a name="line.151"></a>
<span class="sourceLineNo">152</span><a name="line.152"></a>
<span class="sourceLineNo">153</span>        for (int i = 0; i &lt; weights.length; i++) {<a name="line.153"></a>
<span class="sourceLineNo">154</span>            final MultivariateNormalDistribution dist<a name="line.154"></a>
<span class="sourceLineNo">155</span>                = new MultivariateNormalDistribution(means[i], covariances[i]);<a name="line.155"></a>
<span class="sourceLineNo">156</span>            mvns.add(new Pair&lt;Double, MultivariateNormalDistribution&gt;(weights[i], dist));<a name="line.156"></a>
<span class="sourceLineNo">157</span>        }<a name="line.157"></a>
<span class="sourceLineNo">158</span><a name="line.158"></a>
<span class="sourceLineNo">159</span>        return new MultivariateNormalMixtureModelDistribution(mvns);<a name="line.159"></a>
<span class="sourceLineNo">160</span>    }<a name="line.160"></a>
<span class="sourceLineNo">161</span><a name="line.161"></a>
<span class="sourceLineNo">162</span>    /**<a name="line.162"></a>
<span class="sourceLineNo">163</span>     * Values used in {@link #testSampling()}.<a name="line.163"></a>
<span class="sourceLineNo">164</span>     */<a name="line.164"></a>
<span class="sourceLineNo">165</span>    private double[][] getCorrectSamples() {<a name="line.165"></a>
<span class="sourceLineNo">166</span>        // These were sampled from the MultivariateNormalMixtureModelDistribution class<a name="line.166"></a>
<span class="sourceLineNo">167</span>        // with seed 50.<a name="line.167"></a>
<span class="sourceLineNo">168</span>        //<a name="line.168"></a>
<span class="sourceLineNo">169</span>        // They were then fit to a MVN mixture model in R using mixtools.<a name="line.169"></a>
<span class="sourceLineNo">170</span>        //<a name="line.170"></a>
<span class="sourceLineNo">171</span>        // The optimal parameters were:<a name="line.171"></a>
<span class="sourceLineNo">172</span>        // - component weights: {0.3595186, 0.6404814}<a name="line.172"></a>
<span class="sourceLineNo">173</span>        // - mean vectors: {-1.645879, 1.989797}, {3.474328, 7.782232}<a name="line.173"></a>
<span class="sourceLineNo">174</span>        // - covariance matrices:<a name="line.174"></a>
<span class="sourceLineNo">175</span>        //     { 1.397738 -1.167732<a name="line.175"></a>
<span class="sourceLineNo">176</span>        //       -1.167732 1.801782 }<a name="line.176"></a>
<span class="sourceLineNo">177</span>        //   and<a name="line.177"></a>
<span class="sourceLineNo">178</span>        //     { 3.934593 2.354787<a name="line.178"></a>
<span class="sourceLineNo">179</span>        //       2.354787 4.428024 }<a name="line.179"></a>
<span class="sourceLineNo">180</span>        //<a name="line.180"></a>
<span class="sourceLineNo">181</span>        // It is considered fairly close to the actual test parameters,<a name="line.181"></a>
<span class="sourceLineNo">182</span>        // considering that the sample size is only 100.<a name="line.182"></a>
<span class="sourceLineNo">183</span>        return new double[][] {<a name="line.183"></a>
<span class="sourceLineNo">184</span>            { 6.259990922080121, 11.972954175355897 },<a name="line.184"></a>
<span class="sourceLineNo">185</span>            { -2.5296544304801847, 1.0031292519854365 },<a name="line.185"></a>
<span class="sourceLineNo">186</span>            { 0.49037886081440396, 0.9758251727325711 },<a name="line.186"></a>
<span class="sourceLineNo">187</span>            { 5.022970993312015, 9.289348879616787 },<a name="line.187"></a>
<span class="sourceLineNo">188</span>            { -1.686183146603914, 2.007244382745706 },<a name="line.188"></a>
<span class="sourceLineNo">189</span>            { -1.4729253946002685, 2.762166644212484 },<a name="line.189"></a>
<span class="sourceLineNo">190</span>            { 4.329788143963888, 11.514016497132253 },<a name="line.190"></a>
<span class="sourceLineNo">191</span>            { 3.008674596114442, 4.960246550446107 },<a name="line.191"></a>
<span class="sourceLineNo">192</span>            { 3.342379304090846, 5.937630105198625 },<a name="line.192"></a>
<span class="sourceLineNo">193</span>            { 2.6993068328674754, 7.42190871572571 },<a name="line.193"></a>
<span class="sourceLineNo">194</span>            { -2.446569340219571, 1.9687117791378763 },<a name="line.194"></a>
<span class="sourceLineNo">195</span>            { 1.922417883170056, 4.917616702617099 },<a name="line.195"></a>
<span class="sourceLineNo">196</span>            { -1.1969741543898518, 2.4576126277884387 },<a name="line.196"></a>
<span class="sourceLineNo">197</span>            { 2.4216948702967196, 8.227710158117134 },<a name="line.197"></a>
<span class="sourceLineNo">198</span>            { 6.701424725804463, 9.098666475042428 },<a name="line.198"></a>
<span class="sourceLineNo">199</span>            { 2.9890253545698964, 9.643807939324331 },<a name="line.199"></a>
<span class="sourceLineNo">200</span>            { 0.7162632354907799, 8.978811120287553 },<a name="line.200"></a>
<span class="sourceLineNo">201</span>            { -2.7548699149775877, 4.1354812280794215 },<a name="line.201"></a>
<span class="sourceLineNo">202</span>            { 8.304528180745018, 11.602319388898287 },<a name="line.202"></a>
<span class="sourceLineNo">203</span>            { -2.7633253389165926, 2.786173883989795 },<a name="line.203"></a>
<span class="sourceLineNo">204</span>            { 1.3322228389460813, 5.447481218602913 },<a name="line.204"></a>
<span class="sourceLineNo">205</span>            { -1.8120096092851508, 1.605624499560037 },<a name="line.205"></a>
<span class="sourceLineNo">206</span>            { 3.6546253437206504, 8.195304526564376 },<a name="line.206"></a>
<span class="sourceLineNo">207</span>            { -2.312349539658588, 1.868941220444169 },<a name="line.207"></a>
<span class="sourceLineNo">208</span>            { -1.882322136356522, 2.033795570464242 },<a name="line.208"></a>
<span class="sourceLineNo">209</span>            { 4.562770714939441, 7.414967958885031 },<a name="line.209"></a>
<span class="sourceLineNo">210</span>            { 4.731882017875329, 8.890676665580747 },<a name="line.210"></a>
<span class="sourceLineNo">211</span>            { 3.492186010427425, 8.9005225241848 },<a name="line.211"></a>
<span class="sourceLineNo">212</span>            { -1.619700190174894, 3.314060142479045 },<a name="line.212"></a>
<span class="sourceLineNo">213</span>            { 3.5466090064003315, 7.75182101001913 },<a name="line.213"></a>
<span class="sourceLineNo">214</span>            { 5.455682472787392, 8.143119287755635 },<a name="line.214"></a>
<span class="sourceLineNo">215</span>            { -2.3859602945473197, 1.8826732217294837 },<a name="line.215"></a>
<span class="sourceLineNo">216</span>            { 3.9095306088680015, 9.258129209626317 },<a name="line.216"></a>
<span class="sourceLineNo">217</span>            { 7.443020189508173, 7.837840713329312 },<a name="line.217"></a>
<span class="sourceLineNo">218</span>            { 2.136004873917428, 6.917636475958297 },<a name="line.218"></a>
<span class="sourceLineNo">219</span>            { -1.7203379410395119, 2.3212878757611524 },<a name="line.219"></a>
<span class="sourceLineNo">220</span>            { 4.618991257611526, 12.095065976419436 },<a name="line.220"></a>
<span class="sourceLineNo">221</span>            { -0.4837044029854387, 0.8255970441255125 },<a name="line.221"></a>
<span class="sourceLineNo">222</span>            { -4.438938966557163, 4.948666297280241 },<a name="line.222"></a>
<span class="sourceLineNo">223</span>            { -0.4539625134045906, 4.700922454655341 },<a name="line.223"></a>
<span class="sourceLineNo">224</span>            { 2.1285488271265356, 8.457941480487563 },<a name="line.224"></a>
<span class="sourceLineNo">225</span>            { 3.4873561871454393, 11.99809827845933 },<a name="line.225"></a>
<span class="sourceLineNo">226</span>            { 4.723049431412658, 7.813095742563365 },<a name="line.226"></a>
<span class="sourceLineNo">227</span>            { 1.1245583037967455, 5.20587873556688 },<a name="line.227"></a>
<span class="sourceLineNo">228</span>            { 1.3411933634409197, 6.069796875785409 },<a name="line.228"></a>
<span class="sourceLineNo">229</span>            { 4.585119332463686, 7.967669543767418 },<a name="line.229"></a>
<span class="sourceLineNo">230</span>            { 1.3076522817963823, -0.647431033653445 },<a name="line.230"></a>
<span class="sourceLineNo">231</span>            { -1.4449446442803178, 1.9400424267464862 },<a name="line.231"></a>
<span class="sourceLineNo">232</span>            { -2.069794456383682, 3.5824162107496544 },<a name="line.232"></a>
<span class="sourceLineNo">233</span>            { -0.15959481421417276, 1.5466782303315405 },<a name="line.233"></a>
<span class="sourceLineNo">234</span>            { -2.0823081278810136, 3.0914366458581437 },<a name="line.234"></a>
<span class="sourceLineNo">235</span>            { 3.521944615248141, 10.276112932926408 },<a name="line.235"></a>
<span class="sourceLineNo">236</span>            { 1.0164326704884257, 4.342329556442856 },<a name="line.236"></a>
<span class="sourceLineNo">237</span>            { 5.3718868590295275, 8.374761158360922 },<a name="line.237"></a>
<span class="sourceLineNo">238</span>            { 0.3673656866959396, 8.75168581694866 },<a name="line.238"></a>
<span class="sourceLineNo">239</span>            { -2.250268955954753, 1.4610850300996527 },<a name="line.239"></a>
<span class="sourceLineNo">240</span>            { -2.312739727403522, 1.5921126297576362 },<a name="line.240"></a>
<span class="sourceLineNo">241</span>            { 3.138993360831055, 6.7338392374947365 },<a name="line.241"></a>
<span class="sourceLineNo">242</span>            { 2.6978650950790115, 7.941857288979095 },<a name="line.242"></a>
<span class="sourceLineNo">243</span>            { 4.387985088655384, 8.253499976968 },<a name="line.243"></a>
<span class="sourceLineNo">244</span>            { -1.8928961721456705, 0.23631082388724223 },<a name="line.244"></a>
<span class="sourceLineNo">245</span>            { 4.43509029544109, 8.565290285488782 },<a name="line.245"></a>
<span class="sourceLineNo">246</span>            { 4.904728034106502, 5.79936660133754 },<a name="line.246"></a>
<span class="sourceLineNo">247</span>            { -1.7640371853739507, 2.7343727594167433 },<a name="line.247"></a>
<span class="sourceLineNo">248</span>            { 2.4553674733053463, 7.875871017408807 },<a name="line.248"></a>
<span class="sourceLineNo">249</span>            { -2.6478965122565006, 4.465127753193949 },<a name="line.249"></a>
<span class="sourceLineNo">250</span>            { 3.493873671142299, 10.443093773532448 },<a name="line.250"></a>
<span class="sourceLineNo">251</span>            { 1.1321916197409103, 7.127108479263268 },<a name="line.251"></a>
<span class="sourceLineNo">252</span>            { -1.7335075535240392, 2.550629648463023 },<a name="line.252"></a>
<span class="sourceLineNo">253</span>            { -0.9772679734368084, 4.377196298969238 },<a name="line.253"></a>
<span class="sourceLineNo">254</span>            { 3.6388366973980357, 6.947299283206256 },<a name="line.254"></a>
<span class="sourceLineNo">255</span>            { 0.27043799318823325, 6.587978599614367 },<a name="line.255"></a>
<span class="sourceLineNo">256</span>            { 5.356782352010253, 7.388957912116327 },<a name="line.256"></a>
<span class="sourceLineNo">257</span>            { -0.09187745751354681, 0.23612399246659743 },<a name="line.257"></a>
<span class="sourceLineNo">258</span>            { 2.903203580353435, 3.8076727621794415 },<a name="line.258"></a>
<span class="sourceLineNo">259</span>            { 5.297014824937293, 8.650985262326508 },<a name="line.259"></a>
<span class="sourceLineNo">260</span>            { 4.934508602170976, 9.164571423190052 },<a name="line.260"></a>
<span class="sourceLineNo">261</span>            { -1.0004911869654256, 4.797064194444461 },<a name="line.261"></a>
<span class="sourceLineNo">262</span>            { 6.782491700298046, 11.852373338280497 },<a name="line.262"></a>
<span class="sourceLineNo">263</span>            { 2.8983678524536014, 8.303837362117521 },<a name="line.263"></a>
<span class="sourceLineNo">264</span>            { 4.805003269830865, 6.790462904325329 },<a name="line.264"></a>
<span class="sourceLineNo">265</span>            { -0.8815799740744226, 1.3015810062131394 },<a name="line.265"></a>
<span class="sourceLineNo">266</span>            { 5.115138859802104, 6.376895810201089 },<a name="line.266"></a>
<span class="sourceLineNo">267</span>            { 4.301239328205988, 8.60546337560793 },<a name="line.267"></a>
<span class="sourceLineNo">268</span>            { 3.276423626317666, 9.889429652591947 },<a name="line.268"></a>
<span class="sourceLineNo">269</span>            { -4.001924973153122, 4.3353864592328515 },<a name="line.269"></a>
<span class="sourceLineNo">270</span>            { 3.9571892554119517, 4.500569057308562 },<a name="line.270"></a>
<span class="sourceLineNo">271</span>            { 4.783067027436208, 7.451125480601317 },<a name="line.271"></a>
<span class="sourceLineNo">272</span>            { 4.79065438272821, 9.614122776979698 },<a name="line.272"></a>
<span class="sourceLineNo">273</span>            { 2.677655270279617, 6.8875223698210135 },<a name="line.273"></a>
<span class="sourceLineNo">274</span>            { -1.3714746289327362, 2.3992153193382437 },<a name="line.274"></a>
<span class="sourceLineNo">275</span>            { 3.240136859745249, 7.748339397522042 },<a name="line.275"></a>
<span class="sourceLineNo">276</span>            { 5.107885374416291, 8.508324480583724 },<a name="line.276"></a>
<span class="sourceLineNo">277</span>            { -1.5830830226666048, 0.9139127045208315 },<a name="line.277"></a>
<span class="sourceLineNo">278</span>            { -1.1596156791652918, -0.04502759384531929 },<a name="line.278"></a>
<span class="sourceLineNo">279</span>            { -0.4670021307952068, 3.6193633227841624 },<a name="line.279"></a>
<span class="sourceLineNo">280</span>            { -0.7026065228267798, 0.4811423031997131 },<a name="line.280"></a>
<span class="sourceLineNo">281</span>            { -2.719979836732917, 2.5165041618080104 },<a name="line.281"></a>
<span class="sourceLineNo">282</span>            { 1.0336754331123372, -0.34966029029320644 },<a name="line.282"></a>
<span class="sourceLineNo">283</span>            { 4.743217291882213, 5.750060115251131 }<a name="line.283"></a>
<span class="sourceLineNo">284</span>        };<a name="line.284"></a>
<span class="sourceLineNo">285</span>    }<a name="line.285"></a>
<span class="sourceLineNo">286</span>}<a name="line.286"></a>
<span class="sourceLineNo">287</span><a name="line.287"></a>
<span class="sourceLineNo">288</span>/**<a name="line.288"></a>
<span class="sourceLineNo">289</span> * Class that implements a mixture of Gaussian ditributions.<a name="line.289"></a>
<span class="sourceLineNo">290</span> */<a name="line.290"></a>
<span class="sourceLineNo">291</span>class MultivariateNormalMixtureModelDistribution<a name="line.291"></a>
<span class="sourceLineNo">292</span>    extends MixtureMultivariateRealDistribution&lt;MultivariateNormalDistribution&gt; {<a name="line.292"></a>
<span class="sourceLineNo">293</span><a name="line.293"></a>
<span class="sourceLineNo">294</span>    public MultivariateNormalMixtureModelDistribution(List&lt;Pair&lt;Double, MultivariateNormalDistribution&gt;&gt; components) {<a name="line.294"></a>
<span class="sourceLineNo">295</span>        super(components);<a name="line.295"></a>
<span class="sourceLineNo">296</span>    }<a name="line.296"></a>
<span class="sourceLineNo">297</span>}<a name="line.297"></a>




























































</pre>
</div>
</body>
</html>
