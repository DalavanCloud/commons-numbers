<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span><a name="line.17"></a>
<span class="sourceLineNo">018</span>package org.apache.commons.math3.distribution;<a name="line.18"></a>
<span class="sourceLineNo">019</span><a name="line.19"></a>
<span class="sourceLineNo">020</span>import org.apache.commons.math3.exception.NotStrictlyPositiveException;<a name="line.20"></a>
<span class="sourceLineNo">021</span><a name="line.21"></a>
<span class="sourceLineNo">022</span>import org.apache.commons.math3.util.FastMath;<a name="line.22"></a>
<span class="sourceLineNo">023</span>import org.junit.Assert;<a name="line.23"></a>
<span class="sourceLineNo">024</span>import org.junit.Test;<a name="line.24"></a>
<span class="sourceLineNo">025</span><a name="line.25"></a>
<span class="sourceLineNo">026</span>/**<a name="line.26"></a>
<span class="sourceLineNo">027</span> * Test cases for {@link ZipfDistribution}.<a name="line.27"></a>
<span class="sourceLineNo">028</span> * Extends IntegerDistributionAbstractTest.  See class javadoc for<a name="line.28"></a>
<span class="sourceLineNo">029</span> * IntegerDistributionAbstractTest for details.<a name="line.29"></a>
<span class="sourceLineNo">030</span> *<a name="line.30"></a>
<span class="sourceLineNo">031</span> */<a name="line.31"></a>
<span class="sourceLineNo">032</span>public class ZipfDistributionTest extends IntegerDistributionAbstractTest {<a name="line.32"></a>
<span class="sourceLineNo">033</span><a name="line.33"></a>
<span class="sourceLineNo">034</span>    /**<a name="line.34"></a>
<span class="sourceLineNo">035</span>     * Constructor to override default tolerance.<a name="line.35"></a>
<span class="sourceLineNo">036</span>     */<a name="line.36"></a>
<span class="sourceLineNo">037</span>    public ZipfDistributionTest() {<a name="line.37"></a>
<span class="sourceLineNo">038</span>        setTolerance(1e-12);<a name="line.38"></a>
<span class="sourceLineNo">039</span>    }<a name="line.39"></a>
<span class="sourceLineNo">040</span>    <a name="line.40"></a>
<span class="sourceLineNo">041</span>    @Test(expected=NotStrictlyPositiveException.class)<a name="line.41"></a>
<span class="sourceLineNo">042</span>    public void testPreconditions1() {<a name="line.42"></a>
<span class="sourceLineNo">043</span>        new ZipfDistribution(0, 1);<a name="line.43"></a>
<span class="sourceLineNo">044</span>    }<a name="line.44"></a>
<span class="sourceLineNo">045</span><a name="line.45"></a>
<span class="sourceLineNo">046</span>    @Test(expected=NotStrictlyPositiveException.class)<a name="line.46"></a>
<span class="sourceLineNo">047</span>    public void testPreconditions2() {<a name="line.47"></a>
<span class="sourceLineNo">048</span>        new ZipfDistribution(1, 0);<a name="line.48"></a>
<span class="sourceLineNo">049</span>    }<a name="line.49"></a>
<span class="sourceLineNo">050</span><a name="line.50"></a>
<span class="sourceLineNo">051</span>    //-------------- Implementations for abstract methods -----------------------<a name="line.51"></a>
<span class="sourceLineNo">052</span><a name="line.52"></a>
<span class="sourceLineNo">053</span>    /** Creates the default discrete distribution instance to use in tests. */<a name="line.53"></a>
<span class="sourceLineNo">054</span>    @Override<a name="line.54"></a>
<span class="sourceLineNo">055</span>    public IntegerDistribution makeDistribution() {<a name="line.55"></a>
<span class="sourceLineNo">056</span>        return new ZipfDistribution(10, 1);<a name="line.56"></a>
<span class="sourceLineNo">057</span>    }<a name="line.57"></a>
<span class="sourceLineNo">058</span><a name="line.58"></a>
<span class="sourceLineNo">059</span>    /** Creates the default probability density test input values */<a name="line.59"></a>
<span class="sourceLineNo">060</span>    @Override<a name="line.60"></a>
<span class="sourceLineNo">061</span>    public int[] makeDensityTestPoints() {<a name="line.61"></a>
<span class="sourceLineNo">062</span>        return new int[] {-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};<a name="line.62"></a>
<span class="sourceLineNo">063</span>    }<a name="line.63"></a>
<span class="sourceLineNo">064</span><a name="line.64"></a>
<span class="sourceLineNo">065</span>    /** <a name="line.65"></a>
<span class="sourceLineNo">066</span>     * Creates the default probability density test expected values.<a name="line.66"></a>
<span class="sourceLineNo">067</span>     *  Reference values are from R, version 2.15.3 (VGAM package 0.9-0).<a name="line.67"></a>
<span class="sourceLineNo">068</span>     */<a name="line.68"></a>
<span class="sourceLineNo">069</span>    @Override<a name="line.69"></a>
<span class="sourceLineNo">070</span>    public double[] makeDensityTestValues() {<a name="line.70"></a>
<span class="sourceLineNo">071</span>        return new double[] {0d, 0d, 0.341417152147, 0.170708576074, 0.113805717382, 0.0853542880369, 0.0682834304295,<a name="line.71"></a>
<span class="sourceLineNo">072</span>            0.0569028586912, 0.0487738788782, 0.0426771440184, 0.0379352391275, 0.0341417152147, 0};<a name="line.72"></a>
<span class="sourceLineNo">073</span>    }<a name="line.73"></a>
<span class="sourceLineNo">074</span><a name="line.74"></a>
<span class="sourceLineNo">075</span>    /** <a name="line.75"></a>
<span class="sourceLineNo">076</span>     * Creates the default logarithmic probability density test expected values.<a name="line.76"></a>
<span class="sourceLineNo">077</span>     * Reference values are from R, version 2.14.1.<a name="line.77"></a>
<span class="sourceLineNo">078</span>     */<a name="line.78"></a>
<span class="sourceLineNo">079</span>    @Override<a name="line.79"></a>
<span class="sourceLineNo">080</span>    public double[] makeLogDensityTestValues() {<a name="line.80"></a>
<span class="sourceLineNo">081</span>        return new double[] {Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY,<a name="line.81"></a>
<span class="sourceLineNo">082</span>            -1.07465022926458, -1.76779740982453, -2.17326251793269, -2.46094459038447,<a name="line.82"></a>
<span class="sourceLineNo">083</span>            -2.68408814169868, -2.86640969849264, -3.0205603783199, -3.15409177094442,<a name="line.83"></a>
<span class="sourceLineNo">084</span>            -3.2718748066008, -3.37723532225863, Double.NEGATIVE_INFINITY};<a name="line.84"></a>
<span class="sourceLineNo">085</span>    }<a name="line.85"></a>
<span class="sourceLineNo">086</span><a name="line.86"></a>
<span class="sourceLineNo">087</span>    /** Creates the default cumulative probability density test input values */<a name="line.87"></a>
<span class="sourceLineNo">088</span>    @Override<a name="line.88"></a>
<span class="sourceLineNo">089</span>    public int[] makeCumulativeTestPoints() {<a name="line.89"></a>
<span class="sourceLineNo">090</span>        return makeDensityTestPoints();<a name="line.90"></a>
<span class="sourceLineNo">091</span>    }<a name="line.91"></a>
<span class="sourceLineNo">092</span><a name="line.92"></a>
<span class="sourceLineNo">093</span>    /** Creates the default cumulative probability density test expected values */<a name="line.93"></a>
<span class="sourceLineNo">094</span>    @Override<a name="line.94"></a>
<span class="sourceLineNo">095</span>    public double[] makeCumulativeTestValues() {<a name="line.95"></a>
<span class="sourceLineNo">096</span>        return new double[] {0, 0, 0.341417152147, 0.512125728221, 0.625931445604, 0.71128573364,<a name="line.96"></a>
<span class="sourceLineNo">097</span>            0.77956916407, 0.836472022761, 0.885245901639, 0.927923045658, 0.965858284785, 1d, 1d};<a name="line.97"></a>
<span class="sourceLineNo">098</span>        }<a name="line.98"></a>
<span class="sourceLineNo">099</span><a name="line.99"></a>
<span class="sourceLineNo">100</span>    /** Creates the default inverse cumulative probability test input values */<a name="line.100"></a>
<span class="sourceLineNo">101</span>    @Override<a name="line.101"></a>
<span class="sourceLineNo">102</span>    public double[] makeInverseCumulativeTestPoints() {<a name="line.102"></a>
<span class="sourceLineNo">103</span>        return new double[] {0d, 0.001d, 0.010d, 0.025d, 0.050d, 0.3413d, 0.3415d, 0.999d,<a name="line.103"></a>
<span class="sourceLineNo">104</span>                0.990d, 0.975d, 0.950d, 0.900d, 1d};<a name="line.104"></a>
<span class="sourceLineNo">105</span>        }<a name="line.105"></a>
<span class="sourceLineNo">106</span><a name="line.106"></a>
<span class="sourceLineNo">107</span>    /** Creates the default inverse cumulative probability density test expected values */<a name="line.107"></a>
<span class="sourceLineNo">108</span>    @Override<a name="line.108"></a>
<span class="sourceLineNo">109</span>    public int[] makeInverseCumulativeTestValues() {<a name="line.109"></a>
<span class="sourceLineNo">110</span>        return new int[] {1, 1, 1, 1, 1, 1, 2, 10, 10, 10, 9, 8, 10};<a name="line.110"></a>
<span class="sourceLineNo">111</span>    }<a name="line.111"></a>
<span class="sourceLineNo">112</span><a name="line.112"></a>
<span class="sourceLineNo">113</span>    @Test<a name="line.113"></a>
<span class="sourceLineNo">114</span>    public void testMoments() {<a name="line.114"></a>
<span class="sourceLineNo">115</span>        final double tol = 1e-9;<a name="line.115"></a>
<span class="sourceLineNo">116</span>        ZipfDistribution dist;<a name="line.116"></a>
<span class="sourceLineNo">117</span><a name="line.117"></a>
<span class="sourceLineNo">118</span>        dist = new ZipfDistribution(2, 0.5);<a name="line.118"></a>
<span class="sourceLineNo">119</span>        Assert.assertEquals(dist.getNumericalMean(), FastMath.sqrt(2), tol);<a name="line.119"></a>
<span class="sourceLineNo">120</span>        Assert.assertEquals(dist.getNumericalVariance(), 0.24264068711928521, tol);<a name="line.120"></a>
<span class="sourceLineNo">121</span>    }<a name="line.121"></a>
<span class="sourceLineNo">122</span>}<a name="line.122"></a>




























































</pre>
</div>
</body>
</html>
