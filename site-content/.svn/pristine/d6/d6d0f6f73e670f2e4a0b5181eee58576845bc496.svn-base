<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span>package org.apache.commons.math3.analysis.interpolation;<a name="line.17"></a>
<span class="sourceLineNo">018</span><a name="line.18"></a>
<span class="sourceLineNo">019</span>import java.util.Random;<a name="line.19"></a>
<span class="sourceLineNo">020</span><a name="line.20"></a>
<span class="sourceLineNo">021</span>import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;<a name="line.21"></a>
<span class="sourceLineNo">022</span>import org.apache.commons.math3.analysis.polynomials.PolynomialFunction;<a name="line.22"></a>
<span class="sourceLineNo">023</span>import org.apache.commons.math3.exception.NoDataException;<a name="line.23"></a>
<span class="sourceLineNo">024</span>import org.apache.commons.math3.util.FastMath;<a name="line.24"></a>
<span class="sourceLineNo">025</span>import org.junit.Assert;<a name="line.25"></a>
<span class="sourceLineNo">026</span>import org.junit.Test;<a name="line.26"></a>
<span class="sourceLineNo">027</span><a name="line.27"></a>
<span class="sourceLineNo">028</span>public class HermiteInterpolatorTest {<a name="line.28"></a>
<span class="sourceLineNo">029</span><a name="line.29"></a>
<span class="sourceLineNo">030</span>    @Test<a name="line.30"></a>
<span class="sourceLineNo">031</span>    public void testZero() {<a name="line.31"></a>
<span class="sourceLineNo">032</span>        HermiteInterpolator interpolator = new HermiteInterpolator();<a name="line.32"></a>
<span class="sourceLineNo">033</span>        interpolator.addSamplePoint(0.0, new double[] { 0.0 });<a name="line.33"></a>
<span class="sourceLineNo">034</span>        for (double x = -10; x &lt; 10; x += 1.0) {<a name="line.34"></a>
<span class="sourceLineNo">035</span>            DerivativeStructure y = interpolator.value(new DerivativeStructure(1, 1, 0, x))[0];<a name="line.35"></a>
<span class="sourceLineNo">036</span>            Assert.assertEquals(0.0, y.getValue(), 1.0e-15);<a name="line.36"></a>
<span class="sourceLineNo">037</span>            Assert.assertEquals(0.0, y.getPartialDerivative(1), 1.0e-15);<a name="line.37"></a>
<span class="sourceLineNo">038</span>        }<a name="line.38"></a>
<span class="sourceLineNo">039</span>        checkPolynomial(new PolynomialFunction(new double[] { 0.0 }),<a name="line.39"></a>
<span class="sourceLineNo">040</span>                        interpolator.getPolynomials()[0]);<a name="line.40"></a>
<span class="sourceLineNo">041</span>    }<a name="line.41"></a>
<span class="sourceLineNo">042</span><a name="line.42"></a>
<span class="sourceLineNo">043</span>    @Test<a name="line.43"></a>
<span class="sourceLineNo">044</span>    public void testQuadratic() {<a name="line.44"></a>
<span class="sourceLineNo">045</span>        HermiteInterpolator interpolator = new HermiteInterpolator();<a name="line.45"></a>
<span class="sourceLineNo">046</span>        interpolator.addSamplePoint(0.0, new double[] { 2.0 });<a name="line.46"></a>
<span class="sourceLineNo">047</span>        interpolator.addSamplePoint(1.0, new double[] { 0.0 });<a name="line.47"></a>
<span class="sourceLineNo">048</span>        interpolator.addSamplePoint(2.0, new double[] { 0.0 });<a name="line.48"></a>
<span class="sourceLineNo">049</span>        for (double x = -10; x &lt; 10; x += 1.0) {<a name="line.49"></a>
<span class="sourceLineNo">050</span>            DerivativeStructure y = interpolator.value(new DerivativeStructure(1, 1, 0, x))[0];<a name="line.50"></a>
<span class="sourceLineNo">051</span>            Assert.assertEquals((x - 1.0) * (x - 2.0), y.getValue(), 1.0e-15);<a name="line.51"></a>
<span class="sourceLineNo">052</span>            Assert.assertEquals(2 * x - 3.0, y.getPartialDerivative(1), 1.0e-15);<a name="line.52"></a>
<span class="sourceLineNo">053</span>        }<a name="line.53"></a>
<span class="sourceLineNo">054</span>        checkPolynomial(new PolynomialFunction(new double[] { 2.0, -3.0, 1.0 }),<a name="line.54"></a>
<span class="sourceLineNo">055</span>                        interpolator.getPolynomials()[0]);<a name="line.55"></a>
<span class="sourceLineNo">056</span>    }<a name="line.56"></a>
<span class="sourceLineNo">057</span><a name="line.57"></a>
<span class="sourceLineNo">058</span>    @Test<a name="line.58"></a>
<span class="sourceLineNo">059</span>    public void testMixedDerivatives() {<a name="line.59"></a>
<span class="sourceLineNo">060</span>        HermiteInterpolator interpolator = new HermiteInterpolator();<a name="line.60"></a>
<span class="sourceLineNo">061</span>        interpolator.addSamplePoint(0.0, new double[] { 1.0 }, new double[] { 2.0 });<a name="line.61"></a>
<span class="sourceLineNo">062</span>        interpolator.addSamplePoint(1.0, new double[] { 4.0 });<a name="line.62"></a>
<span class="sourceLineNo">063</span>        interpolator.addSamplePoint(2.0, new double[] { 5.0 }, new double[] { 2.0 });<a name="line.63"></a>
<span class="sourceLineNo">064</span>        Assert.assertEquals(4, interpolator.getPolynomials()[0].degree());<a name="line.64"></a>
<span class="sourceLineNo">065</span>        DerivativeStructure y0 = interpolator.value(new DerivativeStructure(1, 1, 0, 0.0))[0];<a name="line.65"></a>
<span class="sourceLineNo">066</span>        Assert.assertEquals(1.0, y0.getValue(), 1.0e-15);<a name="line.66"></a>
<span class="sourceLineNo">067</span>        Assert.assertEquals(2.0, y0.getPartialDerivative(1), 1.0e-15);<a name="line.67"></a>
<span class="sourceLineNo">068</span>        Assert.assertEquals(4.0, interpolator.value(1.0)[0], 1.0e-15);<a name="line.68"></a>
<span class="sourceLineNo">069</span>        DerivativeStructure y2 = interpolator.value(new DerivativeStructure(1, 1, 0, 2.0))[0];<a name="line.69"></a>
<span class="sourceLineNo">070</span>        Assert.assertEquals(5.0, y2.getValue(), 1.0e-15);<a name="line.70"></a>
<span class="sourceLineNo">071</span>        Assert.assertEquals(2.0, y2.getPartialDerivative(1), 1.0e-15);<a name="line.71"></a>
<span class="sourceLineNo">072</span>        checkPolynomial(new PolynomialFunction(new double[] { 1.0, 2.0, 4.0, -4.0, 1.0 }),<a name="line.72"></a>
<span class="sourceLineNo">073</span>                        interpolator.getPolynomials()[0]);<a name="line.73"></a>
<span class="sourceLineNo">074</span>    }<a name="line.74"></a>
<span class="sourceLineNo">075</span><a name="line.75"></a>
<span class="sourceLineNo">076</span>    @Test<a name="line.76"></a>
<span class="sourceLineNo">077</span>    public void testRandomPolynomialsValuesOnly() {<a name="line.77"></a>
<span class="sourceLineNo">078</span><a name="line.78"></a>
<span class="sourceLineNo">079</span>        Random random = new Random(0x42b1e7dbd361a932l);<a name="line.79"></a>
<span class="sourceLineNo">080</span><a name="line.80"></a>
<span class="sourceLineNo">081</span>        for (int i = 0; i &lt; 100; ++i) {<a name="line.81"></a>
<span class="sourceLineNo">082</span><a name="line.82"></a>
<span class="sourceLineNo">083</span>            int maxDegree = 0;<a name="line.83"></a>
<span class="sourceLineNo">084</span>            PolynomialFunction[] p = new PolynomialFunction[5];<a name="line.84"></a>
<span class="sourceLineNo">085</span>            for (int k = 0; k &lt; p.length; ++k) {<a name="line.85"></a>
<span class="sourceLineNo">086</span>                int degree = random.nextInt(7);<a name="line.86"></a>
<span class="sourceLineNo">087</span>                p[k] = randomPolynomial(degree, random);<a name="line.87"></a>
<span class="sourceLineNo">088</span>                maxDegree = FastMath.max(maxDegree, degree);<a name="line.88"></a>
<span class="sourceLineNo">089</span>            }<a name="line.89"></a>
<span class="sourceLineNo">090</span><a name="line.90"></a>
<span class="sourceLineNo">091</span>            HermiteInterpolator interpolator = new HermiteInterpolator();<a name="line.91"></a>
<span class="sourceLineNo">092</span>            for (int j = 0; j &lt; 1 + maxDegree; ++j) {<a name="line.92"></a>
<span class="sourceLineNo">093</span>                double x = 0.1 * j;<a name="line.93"></a>
<span class="sourceLineNo">094</span>                double[] values = new double[p.length];<a name="line.94"></a>
<span class="sourceLineNo">095</span>                for (int k = 0; k &lt; p.length; ++k) {<a name="line.95"></a>
<span class="sourceLineNo">096</span>                    values[k] = p[k].value(x);<a name="line.96"></a>
<span class="sourceLineNo">097</span>                }<a name="line.97"></a>
<span class="sourceLineNo">098</span>                interpolator.addSamplePoint(x, values);<a name="line.98"></a>
<span class="sourceLineNo">099</span>            }<a name="line.99"></a>
<span class="sourceLineNo">100</span><a name="line.100"></a>
<span class="sourceLineNo">101</span>            for (double x = 0; x &lt; 2; x += 0.1) {<a name="line.101"></a>
<span class="sourceLineNo">102</span>                double[] values = interpolator.value(x);<a name="line.102"></a>
<span class="sourceLineNo">103</span>                Assert.assertEquals(p.length, values.length);<a name="line.103"></a>
<span class="sourceLineNo">104</span>                for (int k = 0; k &lt; p.length; ++k) {<a name="line.104"></a>
<span class="sourceLineNo">105</span>                    Assert.assertEquals(p[k].value(x), values[k], 1.0e-8 * FastMath.abs(p[k].value(x)));<a name="line.105"></a>
<span class="sourceLineNo">106</span>                }<a name="line.106"></a>
<span class="sourceLineNo">107</span>            }<a name="line.107"></a>
<span class="sourceLineNo">108</span><a name="line.108"></a>
<span class="sourceLineNo">109</span>            PolynomialFunction[] result = interpolator.getPolynomials();<a name="line.109"></a>
<span class="sourceLineNo">110</span>            for (int k = 0; k &lt; p.length; ++k) {<a name="line.110"></a>
<span class="sourceLineNo">111</span>                checkPolynomial(p[k], result[k]);<a name="line.111"></a>
<span class="sourceLineNo">112</span>            }<a name="line.112"></a>
<span class="sourceLineNo">113</span><a name="line.113"></a>
<span class="sourceLineNo">114</span>        }<a name="line.114"></a>
<span class="sourceLineNo">115</span>    }<a name="line.115"></a>
<span class="sourceLineNo">116</span><a name="line.116"></a>
<span class="sourceLineNo">117</span>    @Test<a name="line.117"></a>
<span class="sourceLineNo">118</span>    public void testRandomPolynomialsFirstDerivative() {<a name="line.118"></a>
<span class="sourceLineNo">119</span><a name="line.119"></a>
<span class="sourceLineNo">120</span>        Random random = new Random(0x570803c982ca5d3bl);<a name="line.120"></a>
<span class="sourceLineNo">121</span><a name="line.121"></a>
<span class="sourceLineNo">122</span>        for (int i = 0; i &lt; 100; ++i) {<a name="line.122"></a>
<span class="sourceLineNo">123</span><a name="line.123"></a>
<span class="sourceLineNo">124</span>            int maxDegree = 0;<a name="line.124"></a>
<span class="sourceLineNo">125</span>            PolynomialFunction[] p      = new PolynomialFunction[5];<a name="line.125"></a>
<span class="sourceLineNo">126</span>            PolynomialFunction[] pPrime = new PolynomialFunction[5];<a name="line.126"></a>
<span class="sourceLineNo">127</span>            for (int k = 0; k &lt; p.length; ++k) {<a name="line.127"></a>
<span class="sourceLineNo">128</span>                int degree = random.nextInt(7);<a name="line.128"></a>
<span class="sourceLineNo">129</span>                p[k]      = randomPolynomial(degree, random);<a name="line.129"></a>
<span class="sourceLineNo">130</span>                pPrime[k] = p[k].polynomialDerivative();<a name="line.130"></a>
<span class="sourceLineNo">131</span>                maxDegree = FastMath.max(maxDegree, degree);<a name="line.131"></a>
<span class="sourceLineNo">132</span>            }<a name="line.132"></a>
<span class="sourceLineNo">133</span><a name="line.133"></a>
<span class="sourceLineNo">134</span>            HermiteInterpolator interpolator = new HermiteInterpolator();<a name="line.134"></a>
<span class="sourceLineNo">135</span>            for (int j = 0; j &lt; 1 + maxDegree / 2; ++j) {<a name="line.135"></a>
<span class="sourceLineNo">136</span>                double x = 0.1 * j;<a name="line.136"></a>
<span class="sourceLineNo">137</span>                double[] values      = new double[p.length];<a name="line.137"></a>
<span class="sourceLineNo">138</span>                double[] derivatives = new double[p.length];<a name="line.138"></a>
<span class="sourceLineNo">139</span>                for (int k = 0; k &lt; p.length; ++k) {<a name="line.139"></a>
<span class="sourceLineNo">140</span>                    values[k]      = p[k].value(x);<a name="line.140"></a>
<span class="sourceLineNo">141</span>                    derivatives[k] = pPrime[k].value(x);<a name="line.141"></a>
<span class="sourceLineNo">142</span>                }<a name="line.142"></a>
<span class="sourceLineNo">143</span>                interpolator.addSamplePoint(x, values, derivatives);<a name="line.143"></a>
<span class="sourceLineNo">144</span>            }<a name="line.144"></a>
<span class="sourceLineNo">145</span><a name="line.145"></a>
<span class="sourceLineNo">146</span>            for (double x = 0; x &lt; 2; x += 0.1) {<a name="line.146"></a>
<span class="sourceLineNo">147</span>                DerivativeStructure[] y = interpolator.value(new DerivativeStructure(1, 1, 0, x));<a name="line.147"></a>
<span class="sourceLineNo">148</span>                Assert.assertEquals(p.length, y.length);<a name="line.148"></a>
<span class="sourceLineNo">149</span>                for (int k = 0; k &lt; p.length; ++k) {<a name="line.149"></a>
<span class="sourceLineNo">150</span>                    Assert.assertEquals(p[k].value(x), y[k].getValue(), 1.0e-8 * FastMath.abs(p[k].value(x)));<a name="line.150"></a>
<span class="sourceLineNo">151</span>                    Assert.assertEquals(pPrime[k].value(x), y[k].getPartialDerivative(1), 4.0e-8 * FastMath.abs(p[k].value(x)));<a name="line.151"></a>
<span class="sourceLineNo">152</span>                }<a name="line.152"></a>
<span class="sourceLineNo">153</span>            }<a name="line.153"></a>
<span class="sourceLineNo">154</span><a name="line.154"></a>
<span class="sourceLineNo">155</span>            PolynomialFunction[] result = interpolator.getPolynomials();<a name="line.155"></a>
<span class="sourceLineNo">156</span>            for (int k = 0; k &lt; p.length; ++k) {<a name="line.156"></a>
<span class="sourceLineNo">157</span>                checkPolynomial(p[k], result[k]);<a name="line.157"></a>
<span class="sourceLineNo">158</span>            }<a name="line.158"></a>
<span class="sourceLineNo">159</span><a name="line.159"></a>
<span class="sourceLineNo">160</span>        }<a name="line.160"></a>
<span class="sourceLineNo">161</span>    }<a name="line.161"></a>
<span class="sourceLineNo">162</span><a name="line.162"></a>
<span class="sourceLineNo">163</span>    @Test<a name="line.163"></a>
<span class="sourceLineNo">164</span>    public void testSine() {<a name="line.164"></a>
<span class="sourceLineNo">165</span>        HermiteInterpolator interpolator = new HermiteInterpolator();<a name="line.165"></a>
<span class="sourceLineNo">166</span>        for (double x = 0; x &lt; FastMath.PI; x += 0.5) {<a name="line.166"></a>
<span class="sourceLineNo">167</span>            interpolator.addSamplePoint(x, new double[] { FastMath.sin(x) });<a name="line.167"></a>
<span class="sourceLineNo">168</span>        }<a name="line.168"></a>
<span class="sourceLineNo">169</span>        for (double x = 0.1; x &lt;= 2.9; x += 0.01) {<a name="line.169"></a>
<span class="sourceLineNo">170</span>            DerivativeStructure y = interpolator.value(new DerivativeStructure(1, 2, 0, x))[0];<a name="line.170"></a>
<span class="sourceLineNo">171</span>            Assert.assertEquals( FastMath.sin(x), y.getValue(), 3.5e-5);<a name="line.171"></a>
<span class="sourceLineNo">172</span>            Assert.assertEquals( FastMath.cos(x), y.getPartialDerivative(1), 1.3e-4);<a name="line.172"></a>
<span class="sourceLineNo">173</span>            Assert.assertEquals(-FastMath.sin(x), y.getPartialDerivative(2), 2.9e-3);<a name="line.173"></a>
<span class="sourceLineNo">174</span>        }<a name="line.174"></a>
<span class="sourceLineNo">175</span>    }<a name="line.175"></a>
<span class="sourceLineNo">176</span><a name="line.176"></a>
<span class="sourceLineNo">177</span>    @Test<a name="line.177"></a>
<span class="sourceLineNo">178</span>    public void testSquareRoot() {<a name="line.178"></a>
<span class="sourceLineNo">179</span>        HermiteInterpolator interpolator = new HermiteInterpolator();<a name="line.179"></a>
<span class="sourceLineNo">180</span>        for (double x = 1.0; x &lt; 3.6; x += 0.5) {<a name="line.180"></a>
<span class="sourceLineNo">181</span>            interpolator.addSamplePoint(x, new double[] { FastMath.sqrt(x) });<a name="line.181"></a>
<span class="sourceLineNo">182</span>        }<a name="line.182"></a>
<span class="sourceLineNo">183</span>        for (double x = 1.1; x &lt; 3.5; x += 0.01) {<a name="line.183"></a>
<span class="sourceLineNo">184</span>            DerivativeStructure y = interpolator.value(new DerivativeStructure(1, 1, 0, x))[0];<a name="line.184"></a>
<span class="sourceLineNo">185</span>            Assert.assertEquals(FastMath.sqrt(x), y.getValue(), 1.5e-4);<a name="line.185"></a>
<span class="sourceLineNo">186</span>            Assert.assertEquals(0.5 / FastMath.sqrt(x), y.getPartialDerivative(1), 8.5e-4);<a name="line.186"></a>
<span class="sourceLineNo">187</span>        }<a name="line.187"></a>
<span class="sourceLineNo">188</span>    }<a name="line.188"></a>
<span class="sourceLineNo">189</span><a name="line.189"></a>
<span class="sourceLineNo">190</span>    @Test<a name="line.190"></a>
<span class="sourceLineNo">191</span>    public void testWikipedia() {<a name="line.191"></a>
<span class="sourceLineNo">192</span>        // this test corresponds to the example from Wikipedia page:<a name="line.192"></a>
<span class="sourceLineNo">193</span>        // http://en.wikipedia.org/wiki/Hermite_interpolation<a name="line.193"></a>
<span class="sourceLineNo">194</span>        HermiteInterpolator interpolator = new HermiteInterpolator();<a name="line.194"></a>
<span class="sourceLineNo">195</span>        interpolator.addSamplePoint(-1, new double[] { 2 }, new double[] { -8 }, new double[] { 56 });<a name="line.195"></a>
<span class="sourceLineNo">196</span>        interpolator.addSamplePoint( 0, new double[] { 1 }, new double[] {  0 }, new double[] {  0 });<a name="line.196"></a>
<span class="sourceLineNo">197</span>        interpolator.addSamplePoint( 1, new double[] { 2 }, new double[] {  8 }, new double[] { 56 });<a name="line.197"></a>
<span class="sourceLineNo">198</span>        for (double x = -1.0; x &lt;= 1.0; x += 0.125) {<a name="line.198"></a>
<span class="sourceLineNo">199</span>            DerivativeStructure y = interpolator.value(new DerivativeStructure(1, 1, 0, x))[0];<a name="line.199"></a>
<span class="sourceLineNo">200</span>            double x2 = x * x;<a name="line.200"></a>
<span class="sourceLineNo">201</span>            double x4 = x2 * x2;<a name="line.201"></a>
<span class="sourceLineNo">202</span>            double x8 = x4 * x4;<a name="line.202"></a>
<span class="sourceLineNo">203</span>            Assert.assertEquals(x8 + 1, y.getValue(), 1.0e-15);<a name="line.203"></a>
<span class="sourceLineNo">204</span>            Assert.assertEquals(8 * x4 * x2 * x, y.getPartialDerivative(1), 1.0e-15);<a name="line.204"></a>
<span class="sourceLineNo">205</span>        }<a name="line.205"></a>
<span class="sourceLineNo">206</span>        checkPolynomial(new PolynomialFunction(new double[] { 1, 0, 0, 0, 0, 0, 0, 0, 1 }),<a name="line.206"></a>
<span class="sourceLineNo">207</span>                        interpolator.getPolynomials()[0]);<a name="line.207"></a>
<span class="sourceLineNo">208</span>    }<a name="line.208"></a>
<span class="sourceLineNo">209</span><a name="line.209"></a>
<span class="sourceLineNo">210</span>    @Test<a name="line.210"></a>
<span class="sourceLineNo">211</span>    public void testOnePointParabola() {<a name="line.211"></a>
<span class="sourceLineNo">212</span>        HermiteInterpolator interpolator = new HermiteInterpolator();<a name="line.212"></a>
<span class="sourceLineNo">213</span>        interpolator.addSamplePoint(0, new double[] { 1 }, new double[] { 1 }, new double[] { 2 });<a name="line.213"></a>
<span class="sourceLineNo">214</span>        for (double x = -1.0; x &lt;= 1.0; x += 0.125) {<a name="line.214"></a>
<span class="sourceLineNo">215</span>            DerivativeStructure y = interpolator.value(new DerivativeStructure(1, 1, 0, x))[0];<a name="line.215"></a>
<span class="sourceLineNo">216</span>            Assert.assertEquals(1 + x * (1 + x), y.getValue(), 1.0e-15);<a name="line.216"></a>
<span class="sourceLineNo">217</span>            Assert.assertEquals(1 + 2 * x, y.getPartialDerivative(1), 1.0e-15);<a name="line.217"></a>
<span class="sourceLineNo">218</span>        }<a name="line.218"></a>
<span class="sourceLineNo">219</span>        checkPolynomial(new PolynomialFunction(new double[] { 1, 1, 1 }),<a name="line.219"></a>
<span class="sourceLineNo">220</span>                        interpolator.getPolynomials()[0]);<a name="line.220"></a>
<span class="sourceLineNo">221</span>    }<a name="line.221"></a>
<span class="sourceLineNo">222</span><a name="line.222"></a>
<span class="sourceLineNo">223</span>    private PolynomialFunction randomPolynomial(int degree, Random random) {<a name="line.223"></a>
<span class="sourceLineNo">224</span>        double[] coeff = new double[ 1 + degree];<a name="line.224"></a>
<span class="sourceLineNo">225</span>        for (int j = 0; j &lt; degree; ++j) {<a name="line.225"></a>
<span class="sourceLineNo">226</span>            coeff[j] = random.nextDouble();<a name="line.226"></a>
<span class="sourceLineNo">227</span>        }<a name="line.227"></a>
<span class="sourceLineNo">228</span>        return new PolynomialFunction(coeff);<a name="line.228"></a>
<span class="sourceLineNo">229</span>    }<a name="line.229"></a>
<span class="sourceLineNo">230</span><a name="line.230"></a>
<span class="sourceLineNo">231</span>    @Test(expected=NoDataException.class)<a name="line.231"></a>
<span class="sourceLineNo">232</span>    public void testEmptySample() {<a name="line.232"></a>
<span class="sourceLineNo">233</span>        new HermiteInterpolator().value(0.0);<a name="line.233"></a>
<span class="sourceLineNo">234</span>    }<a name="line.234"></a>
<span class="sourceLineNo">235</span><a name="line.235"></a>
<span class="sourceLineNo">236</span>    @Test(expected=IllegalArgumentException.class)<a name="line.236"></a>
<span class="sourceLineNo">237</span>    public void testDuplicatedAbscissa() {<a name="line.237"></a>
<span class="sourceLineNo">238</span>        HermiteInterpolator interpolator = new HermiteInterpolator();<a name="line.238"></a>
<span class="sourceLineNo">239</span>        interpolator.addSamplePoint(1.0, new double[] { 0.0 });<a name="line.239"></a>
<span class="sourceLineNo">240</span>        interpolator.addSamplePoint(1.0, new double[] { 1.0 });<a name="line.240"></a>
<span class="sourceLineNo">241</span>    }<a name="line.241"></a>
<span class="sourceLineNo">242</span><a name="line.242"></a>
<span class="sourceLineNo">243</span>    private void checkPolynomial(PolynomialFunction expected, PolynomialFunction result) {<a name="line.243"></a>
<span class="sourceLineNo">244</span>        Assert.assertTrue(result.degree() &gt;= expected.degree());<a name="line.244"></a>
<span class="sourceLineNo">245</span>        double[] cE = expected.getCoefficients();<a name="line.245"></a>
<span class="sourceLineNo">246</span>        double[] cR = result.getCoefficients();<a name="line.246"></a>
<span class="sourceLineNo">247</span>        for (int i = 0; i &lt; cE.length; ++i) {<a name="line.247"></a>
<span class="sourceLineNo">248</span>            Assert.assertEquals(cE[i], cR[i], 1.0e-8 * FastMath.abs(cE[i]));<a name="line.248"></a>
<span class="sourceLineNo">249</span>        }<a name="line.249"></a>
<span class="sourceLineNo">250</span>        for (int i = cE.length; i &lt; cR.length; ++i) {<a name="line.250"></a>
<span class="sourceLineNo">251</span>            Assert.assertEquals(0.0, cR[i], 1.0e-9);<a name="line.251"></a>
<span class="sourceLineNo">252</span>        }<a name="line.252"></a>
<span class="sourceLineNo">253</span>    }<a name="line.253"></a>
<span class="sourceLineNo">254</span><a name="line.254"></a>
<span class="sourceLineNo">255</span>}<a name="line.255"></a>
<span class="sourceLineNo">256</span><a name="line.256"></a>




























































</pre>
</div>
</body>
</html>
