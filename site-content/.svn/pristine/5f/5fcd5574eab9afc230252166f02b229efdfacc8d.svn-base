<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span>package org.apache.commons.math3.optimization.direct;<a name="line.17"></a>
<span class="sourceLineNo">018</span><a name="line.18"></a>
<span class="sourceLineNo">019</span>import org.apache.commons.math3.analysis.MultivariateFunction;<a name="line.19"></a>
<span class="sourceLineNo">020</span>import org.apache.commons.math3.analysis.SumSincFunction;<a name="line.20"></a>
<span class="sourceLineNo">021</span>import org.apache.commons.math3.optimization.GoalType;<a name="line.21"></a>
<span class="sourceLineNo">022</span>import org.apache.commons.math3.optimization.MultivariateOptimizer;<a name="line.22"></a>
<span class="sourceLineNo">023</span>import org.apache.commons.math3.optimization.PointValuePair;<a name="line.23"></a>
<span class="sourceLineNo">024</span>import org.apache.commons.math3.util.FastMath;<a name="line.24"></a>
<span class="sourceLineNo">025</span>import org.junit.Assert;<a name="line.25"></a>
<span class="sourceLineNo">026</span>import org.junit.Test;<a name="line.26"></a>
<span class="sourceLineNo">027</span><a name="line.27"></a>
<span class="sourceLineNo">028</span>/**<a name="line.28"></a>
<span class="sourceLineNo">029</span> * Test for {@link PowellOptimizer}.<a name="line.29"></a>
<span class="sourceLineNo">030</span> */<a name="line.30"></a>
<span class="sourceLineNo">031</span>@Deprecated<a name="line.31"></a>
<span class="sourceLineNo">032</span>public class PowellOptimizerTest {<a name="line.32"></a>
<span class="sourceLineNo">033</span><a name="line.33"></a>
<span class="sourceLineNo">034</span>    @Test<a name="line.34"></a>
<span class="sourceLineNo">035</span>    public void testSumSinc() {<a name="line.35"></a>
<span class="sourceLineNo">036</span>        final MultivariateFunction func = new SumSincFunction(-1);<a name="line.36"></a>
<span class="sourceLineNo">037</span><a name="line.37"></a>
<span class="sourceLineNo">038</span>        int dim = 2;<a name="line.38"></a>
<span class="sourceLineNo">039</span>        final double[] minPoint = new double[dim];<a name="line.39"></a>
<span class="sourceLineNo">040</span>        for (int i = 0; i &lt; dim; i++) {<a name="line.40"></a>
<span class="sourceLineNo">041</span>            minPoint[i] = 0;<a name="line.41"></a>
<span class="sourceLineNo">042</span>        }<a name="line.42"></a>
<span class="sourceLineNo">043</span><a name="line.43"></a>
<span class="sourceLineNo">044</span>        double[] init = new double[dim];<a name="line.44"></a>
<span class="sourceLineNo">045</span><a name="line.45"></a>
<span class="sourceLineNo">046</span>        // Initial is minimum.<a name="line.46"></a>
<span class="sourceLineNo">047</span>        for (int i = 0; i &lt; dim; i++) {<a name="line.47"></a>
<span class="sourceLineNo">048</span>            init[i] = minPoint[i];<a name="line.48"></a>
<span class="sourceLineNo">049</span>        }<a name="line.49"></a>
<span class="sourceLineNo">050</span>        doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-9);<a name="line.50"></a>
<span class="sourceLineNo">051</span><a name="line.51"></a>
<span class="sourceLineNo">052</span>        // Initial is far from minimum.<a name="line.52"></a>
<span class="sourceLineNo">053</span>        for (int i = 0; i &lt; dim; i++) {<a name="line.53"></a>
<span class="sourceLineNo">054</span>            init[i] = minPoint[i] + 3;<a name="line.54"></a>
<span class="sourceLineNo">055</span>        }<a name="line.55"></a>
<span class="sourceLineNo">056</span>        doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-5);<a name="line.56"></a>
<span class="sourceLineNo">057</span>        // More stringent line search tolerance enhances the precision<a name="line.57"></a>
<span class="sourceLineNo">058</span>        // of the result.<a name="line.58"></a>
<span class="sourceLineNo">059</span>        doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-9, 1e-7);<a name="line.59"></a>
<span class="sourceLineNo">060</span>    }<a name="line.60"></a>
<span class="sourceLineNo">061</span><a name="line.61"></a>
<span class="sourceLineNo">062</span>    @Test<a name="line.62"></a>
<span class="sourceLineNo">063</span>    public void testQuadratic() {<a name="line.63"></a>
<span class="sourceLineNo">064</span>        final MultivariateFunction func = new MultivariateFunction() {<a name="line.64"></a>
<span class="sourceLineNo">065</span>                public double value(double[] x) {<a name="line.65"></a>
<span class="sourceLineNo">066</span>                    final double a = x[0] - 1;<a name="line.66"></a>
<span class="sourceLineNo">067</span>                    final double b = x[1] - 1;<a name="line.67"></a>
<span class="sourceLineNo">068</span>                    return a * a + b * b + 1;<a name="line.68"></a>
<span class="sourceLineNo">069</span>                }<a name="line.69"></a>
<span class="sourceLineNo">070</span>            };<a name="line.70"></a>
<span class="sourceLineNo">071</span><a name="line.71"></a>
<span class="sourceLineNo">072</span>        int dim = 2;<a name="line.72"></a>
<span class="sourceLineNo">073</span>        final double[] minPoint = new double[dim];<a name="line.73"></a>
<span class="sourceLineNo">074</span>        for (int i = 0; i &lt; dim; i++) {<a name="line.74"></a>
<span class="sourceLineNo">075</span>            minPoint[i] = 1;<a name="line.75"></a>
<span class="sourceLineNo">076</span>        }<a name="line.76"></a>
<span class="sourceLineNo">077</span><a name="line.77"></a>
<span class="sourceLineNo">078</span>        double[] init = new double[dim];<a name="line.78"></a>
<span class="sourceLineNo">079</span><a name="line.79"></a>
<span class="sourceLineNo">080</span>        // Initial is minimum.<a name="line.80"></a>
<span class="sourceLineNo">081</span>        for (int i = 0; i &lt; dim; i++) {<a name="line.81"></a>
<span class="sourceLineNo">082</span>            init[i] = minPoint[i];<a name="line.82"></a>
<span class="sourceLineNo">083</span>        }<a name="line.83"></a>
<span class="sourceLineNo">084</span>        doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-8);<a name="line.84"></a>
<span class="sourceLineNo">085</span><a name="line.85"></a>
<span class="sourceLineNo">086</span>        // Initial is far from minimum.<a name="line.86"></a>
<span class="sourceLineNo">087</span>        for (int i = 0; i &lt; dim; i++) {<a name="line.87"></a>
<span class="sourceLineNo">088</span>            init[i] = minPoint[i] - 20;<a name="line.88"></a>
<span class="sourceLineNo">089</span>        }<a name="line.89"></a>
<span class="sourceLineNo">090</span>        doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-8);<a name="line.90"></a>
<span class="sourceLineNo">091</span>    }<a name="line.91"></a>
<span class="sourceLineNo">092</span><a name="line.92"></a>
<span class="sourceLineNo">093</span>    @Test<a name="line.93"></a>
<span class="sourceLineNo">094</span>    public void testMaximizeQuadratic() {<a name="line.94"></a>
<span class="sourceLineNo">095</span>        final MultivariateFunction func = new MultivariateFunction() {<a name="line.95"></a>
<span class="sourceLineNo">096</span>                public double value(double[] x) {<a name="line.96"></a>
<span class="sourceLineNo">097</span>                    final double a = x[0] - 1;<a name="line.97"></a>
<span class="sourceLineNo">098</span>                    final double b = x[1] - 1;<a name="line.98"></a>
<span class="sourceLineNo">099</span>                    return -a * a - b * b + 1;<a name="line.99"></a>
<span class="sourceLineNo">100</span>                }<a name="line.100"></a>
<span class="sourceLineNo">101</span>            };<a name="line.101"></a>
<span class="sourceLineNo">102</span><a name="line.102"></a>
<span class="sourceLineNo">103</span>        int dim = 2;<a name="line.103"></a>
<span class="sourceLineNo">104</span>        final double[] maxPoint = new double[dim];<a name="line.104"></a>
<span class="sourceLineNo">105</span>        for (int i = 0; i &lt; dim; i++) {<a name="line.105"></a>
<span class="sourceLineNo">106</span>            maxPoint[i] = 1;<a name="line.106"></a>
<span class="sourceLineNo">107</span>        }<a name="line.107"></a>
<span class="sourceLineNo">108</span><a name="line.108"></a>
<span class="sourceLineNo">109</span>        double[] init = new double[dim];<a name="line.109"></a>
<span class="sourceLineNo">110</span><a name="line.110"></a>
<span class="sourceLineNo">111</span>        // Initial is minimum.<a name="line.111"></a>
<span class="sourceLineNo">112</span>        for (int i = 0; i &lt; dim; i++) {<a name="line.112"></a>
<span class="sourceLineNo">113</span>            init[i] = maxPoint[i];<a name="line.113"></a>
<span class="sourceLineNo">114</span>        }<a name="line.114"></a>
<span class="sourceLineNo">115</span>        doTest(func, maxPoint, init,  GoalType.MAXIMIZE, 1e-9, 1e-8);<a name="line.115"></a>
<span class="sourceLineNo">116</span><a name="line.116"></a>
<span class="sourceLineNo">117</span>        // Initial is far from minimum.<a name="line.117"></a>
<span class="sourceLineNo">118</span>        for (int i = 0; i &lt; dim; i++) {<a name="line.118"></a>
<span class="sourceLineNo">119</span>            init[i] = maxPoint[i] - 20;<a name="line.119"></a>
<span class="sourceLineNo">120</span>        }<a name="line.120"></a>
<span class="sourceLineNo">121</span>        doTest(func, maxPoint, init, GoalType.MAXIMIZE, 1e-9, 1e-8);<a name="line.121"></a>
<span class="sourceLineNo">122</span>    }<a name="line.122"></a>
<span class="sourceLineNo">123</span><a name="line.123"></a>
<span class="sourceLineNo">124</span>    /**<a name="line.124"></a>
<span class="sourceLineNo">125</span>     * Ensure that we do not increase the number of function evaluations when<a name="line.125"></a>
<span class="sourceLineNo">126</span>     * the function values are scaled up.<a name="line.126"></a>
<span class="sourceLineNo">127</span>     * Note that the tolerances parameters passed to the constructor must<a name="line.127"></a>
<span class="sourceLineNo">128</span>     * still hold sensible values because they are used to set the line search<a name="line.128"></a>
<span class="sourceLineNo">129</span>     * tolerances.<a name="line.129"></a>
<span class="sourceLineNo">130</span>     */<a name="line.130"></a>
<span class="sourceLineNo">131</span>    @Test<a name="line.131"></a>
<span class="sourceLineNo">132</span>    public void testRelativeToleranceOnScaledValues() {<a name="line.132"></a>
<span class="sourceLineNo">133</span>        final MultivariateFunction func = new MultivariateFunction() {<a name="line.133"></a>
<span class="sourceLineNo">134</span>                public double value(double[] x) {<a name="line.134"></a>
<span class="sourceLineNo">135</span>                    final double a = x[0] - 1;<a name="line.135"></a>
<span class="sourceLineNo">136</span>                    final double b = x[1] - 1;<a name="line.136"></a>
<span class="sourceLineNo">137</span>                    return a * a * FastMath.sqrt(FastMath.abs(a)) + b * b + 1;<a name="line.137"></a>
<span class="sourceLineNo">138</span>                }<a name="line.138"></a>
<span class="sourceLineNo">139</span>            };<a name="line.139"></a>
<span class="sourceLineNo">140</span><a name="line.140"></a>
<span class="sourceLineNo">141</span>        int dim = 2;<a name="line.141"></a>
<span class="sourceLineNo">142</span>        final double[] minPoint = new double[dim];<a name="line.142"></a>
<span class="sourceLineNo">143</span>        for (int i = 0; i &lt; dim; i++) {<a name="line.143"></a>
<span class="sourceLineNo">144</span>            minPoint[i] = 1;<a name="line.144"></a>
<span class="sourceLineNo">145</span>        }<a name="line.145"></a>
<span class="sourceLineNo">146</span><a name="line.146"></a>
<span class="sourceLineNo">147</span>        double[] init = new double[dim];<a name="line.147"></a>
<span class="sourceLineNo">148</span>        // Initial is far from minimum.<a name="line.148"></a>
<span class="sourceLineNo">149</span>        for (int i = 0; i &lt; dim; i++) {<a name="line.149"></a>
<span class="sourceLineNo">150</span>            init[i] = minPoint[i] - 20;<a name="line.150"></a>
<span class="sourceLineNo">151</span>        }<a name="line.151"></a>
<span class="sourceLineNo">152</span><a name="line.152"></a>
<span class="sourceLineNo">153</span>        final double relTol = 1e-10;<a name="line.153"></a>
<span class="sourceLineNo">154</span><a name="line.154"></a>
<span class="sourceLineNo">155</span>        final int maxEval = 1000;<a name="line.155"></a>
<span class="sourceLineNo">156</span>        // Very small absolute tolerance to rely solely on the relative<a name="line.156"></a>
<span class="sourceLineNo">157</span>        // tolerance as a stopping criterion<a name="line.157"></a>
<span class="sourceLineNo">158</span>        final MultivariateOptimizer optim = new PowellOptimizer(relTol, 1e-100);<a name="line.158"></a>
<span class="sourceLineNo">159</span><a name="line.159"></a>
<span class="sourceLineNo">160</span>        final PointValuePair funcResult = optim.optimize(maxEval, func, GoalType.MINIMIZE, init);<a name="line.160"></a>
<span class="sourceLineNo">161</span>        final double funcValue = func.value(funcResult.getPoint());<a name="line.161"></a>
<span class="sourceLineNo">162</span>        final int funcEvaluations = optim.getEvaluations();<a name="line.162"></a>
<span class="sourceLineNo">163</span><a name="line.163"></a>
<span class="sourceLineNo">164</span>        final double scale = 1e10;<a name="line.164"></a>
<span class="sourceLineNo">165</span>        final MultivariateFunction funcScaled = new MultivariateFunction() {<a name="line.165"></a>
<span class="sourceLineNo">166</span>                public double value(double[] x) {<a name="line.166"></a>
<span class="sourceLineNo">167</span>                    return scale * func.value(x);<a name="line.167"></a>
<span class="sourceLineNo">168</span>                }<a name="line.168"></a>
<span class="sourceLineNo">169</span>            };<a name="line.169"></a>
<span class="sourceLineNo">170</span><a name="line.170"></a>
<span class="sourceLineNo">171</span>        final PointValuePair funcScaledResult = optim.optimize(maxEval, funcScaled, GoalType.MINIMIZE, init);<a name="line.171"></a>
<span class="sourceLineNo">172</span>        final double funcScaledValue = funcScaled.value(funcScaledResult.getPoint());<a name="line.172"></a>
<span class="sourceLineNo">173</span>        final int funcScaledEvaluations = optim.getEvaluations();<a name="line.173"></a>
<span class="sourceLineNo">174</span><a name="line.174"></a>
<span class="sourceLineNo">175</span>        // Check that both minima provide the same objective funciton values,<a name="line.175"></a>
<span class="sourceLineNo">176</span>        // within the relative function tolerance.<a name="line.176"></a>
<span class="sourceLineNo">177</span>        Assert.assertEquals(1, funcScaledValue / (scale * funcValue), relTol);<a name="line.177"></a>
<span class="sourceLineNo">178</span><a name="line.178"></a>
<span class="sourceLineNo">179</span>        // Check that the numbers of evaluations are the same.<a name="line.179"></a>
<span class="sourceLineNo">180</span>        Assert.assertEquals(funcEvaluations, funcScaledEvaluations);<a name="line.180"></a>
<span class="sourceLineNo">181</span>    }<a name="line.181"></a>
<span class="sourceLineNo">182</span><a name="line.182"></a>
<span class="sourceLineNo">183</span>    /**<a name="line.183"></a>
<span class="sourceLineNo">184</span>     * @param func Function to optimize.<a name="line.184"></a>
<span class="sourceLineNo">185</span>     * @param optimum Expected optimum.<a name="line.185"></a>
<span class="sourceLineNo">186</span>     * @param init Starting point.<a name="line.186"></a>
<span class="sourceLineNo">187</span>     * @param goal Minimization or maximization.<a name="line.187"></a>
<span class="sourceLineNo">188</span>     * @param fTol Tolerance (relative error on the objective function) for<a name="line.188"></a>
<span class="sourceLineNo">189</span>     * "Powell" algorithm.<a name="line.189"></a>
<span class="sourceLineNo">190</span>     * @param pointTol Tolerance for checking that the optimum is correct.<a name="line.190"></a>
<span class="sourceLineNo">191</span>     */<a name="line.191"></a>
<span class="sourceLineNo">192</span>    private void doTest(MultivariateFunction func,<a name="line.192"></a>
<span class="sourceLineNo">193</span>                        double[] optimum,<a name="line.193"></a>
<span class="sourceLineNo">194</span>                        double[] init,<a name="line.194"></a>
<span class="sourceLineNo">195</span>                        GoalType goal,<a name="line.195"></a>
<span class="sourceLineNo">196</span>                        double fTol,<a name="line.196"></a>
<span class="sourceLineNo">197</span>                        double pointTol) {<a name="line.197"></a>
<span class="sourceLineNo">198</span>        final MultivariateOptimizer optim = new PowellOptimizer(fTol, Math.ulp(1d));<a name="line.198"></a>
<span class="sourceLineNo">199</span><a name="line.199"></a>
<span class="sourceLineNo">200</span>        final PointValuePair result = optim.optimize(1000, func, goal, init);<a name="line.200"></a>
<span class="sourceLineNo">201</span>        final double[] point = result.getPoint();<a name="line.201"></a>
<span class="sourceLineNo">202</span><a name="line.202"></a>
<span class="sourceLineNo">203</span>        for (int i = 0, dim = optimum.length; i &lt; dim; i++) {<a name="line.203"></a>
<span class="sourceLineNo">204</span>            Assert.assertEquals("found[" + i + "]=" + point[i] + " value=" + result.getValue(),<a name="line.204"></a>
<span class="sourceLineNo">205</span>                                optimum[i], point[i], pointTol);<a name="line.205"></a>
<span class="sourceLineNo">206</span>        }<a name="line.206"></a>
<span class="sourceLineNo">207</span>    }<a name="line.207"></a>
<span class="sourceLineNo">208</span><a name="line.208"></a>
<span class="sourceLineNo">209</span>    /**<a name="line.209"></a>
<span class="sourceLineNo">210</span>     * @param func Function to optimize.<a name="line.210"></a>
<span class="sourceLineNo">211</span>     * @param optimum Expected optimum.<a name="line.211"></a>
<span class="sourceLineNo">212</span>     * @param init Starting point.<a name="line.212"></a>
<span class="sourceLineNo">213</span>     * @param goal Minimization or maximization.<a name="line.213"></a>
<span class="sourceLineNo">214</span>     * @param fTol Tolerance (relative error on the objective function) for<a name="line.214"></a>
<span class="sourceLineNo">215</span>     * "Powell" algorithm.<a name="line.215"></a>
<span class="sourceLineNo">216</span>     * @param fLineTol Tolerance (relative error on the objective function)<a name="line.216"></a>
<span class="sourceLineNo">217</span>     * for the internal line search algorithm.<a name="line.217"></a>
<span class="sourceLineNo">218</span>     * @param pointTol Tolerance for checking that the optimum is correct.<a name="line.218"></a>
<span class="sourceLineNo">219</span>     */<a name="line.219"></a>
<span class="sourceLineNo">220</span>    private void doTest(MultivariateFunction func,<a name="line.220"></a>
<span class="sourceLineNo">221</span>                        double[] optimum,<a name="line.221"></a>
<span class="sourceLineNo">222</span>                        double[] init,<a name="line.222"></a>
<span class="sourceLineNo">223</span>                        GoalType goal,<a name="line.223"></a>
<span class="sourceLineNo">224</span>                        double fTol,<a name="line.224"></a>
<span class="sourceLineNo">225</span>                        double fLineTol,<a name="line.225"></a>
<span class="sourceLineNo">226</span>                        double pointTol) {<a name="line.226"></a>
<span class="sourceLineNo">227</span>        final MultivariateOptimizer optim = new PowellOptimizer(fTol, Math.ulp(1d),<a name="line.227"></a>
<span class="sourceLineNo">228</span>                                                                fLineTol, Math.ulp(1d));<a name="line.228"></a>
<span class="sourceLineNo">229</span><a name="line.229"></a>
<span class="sourceLineNo">230</span>        final PointValuePair result = optim.optimize(1000, func, goal, init);<a name="line.230"></a>
<span class="sourceLineNo">231</span>        final double[] point = result.getPoint();<a name="line.231"></a>
<span class="sourceLineNo">232</span><a name="line.232"></a>
<span class="sourceLineNo">233</span>        for (int i = 0, dim = optimum.length; i &lt; dim; i++) {<a name="line.233"></a>
<span class="sourceLineNo">234</span>            Assert.assertEquals("found[" + i + "]=" + point[i] + " value=" + result.getValue(),<a name="line.234"></a>
<span class="sourceLineNo">235</span>                                optimum[i], point[i], pointTol);<a name="line.235"></a>
<span class="sourceLineNo">236</span>        }<a name="line.236"></a>
<span class="sourceLineNo">237</span>    }<a name="line.237"></a>
<span class="sourceLineNo">238</span>}<a name="line.238"></a>




























































</pre>
</div>
</body>
</html>
