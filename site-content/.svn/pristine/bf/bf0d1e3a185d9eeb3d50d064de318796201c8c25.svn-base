<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span>package org.apache.commons.math3.primes;<a name="line.17"></a>
<span class="sourceLineNo">018</span><a name="line.18"></a>
<span class="sourceLineNo">019</span><a name="line.19"></a>
<span class="sourceLineNo">020</span>import java.util.HashSet;<a name="line.20"></a>
<span class="sourceLineNo">021</span>import java.util.List;<a name="line.21"></a>
<span class="sourceLineNo">022</span><a name="line.22"></a>
<span class="sourceLineNo">023</span>import org.apache.commons.math3.exception.MathIllegalArgumentException;<a name="line.23"></a>
<span class="sourceLineNo">024</span>import org.apache.commons.math3.exception.util.LocalizedFormats;<a name="line.24"></a>
<span class="sourceLineNo">025</span>import org.junit.Assert;<a name="line.25"></a>
<span class="sourceLineNo">026</span>import org.junit.Test;<a name="line.26"></a>
<span class="sourceLineNo">027</span><a name="line.27"></a>
<span class="sourceLineNo">028</span>public class PrimesTest {<a name="line.28"></a>
<span class="sourceLineNo">029</span><a name="line.29"></a>
<span class="sourceLineNo">030</span>    public static final int[] PRIMES = {//primes here have been verified one by one using Dario Alejandro Alpern's tool, see http://www.alpertron.com.ar/ECM.HTM<a name="line.30"></a>
<span class="sourceLineNo">031</span>            2,3,5,7,11,13,17,19,23,29,31,43,47,53,71,73,79,89,97,<a name="line.31"></a>
<span class="sourceLineNo">032</span>            107,137,151,157,271,293,331,409,607,617,683,829,<a name="line.32"></a>
<span class="sourceLineNo">033</span>            1049,1103,1229,1657,<a name="line.33"></a>
<span class="sourceLineNo">034</span>            2039,2053,//around first boundary in miller-rabin<a name="line.34"></a>
<span class="sourceLineNo">035</span>            2251,2389,2473,2699,3271,3389,3449,5653,6449,6869,9067,9091,<a name="line.35"></a>
<span class="sourceLineNo">036</span>            11251,12433,12959,22961,41047,46337,65413,80803,91577,92693,<a name="line.36"></a>
<span class="sourceLineNo">037</span>            118423,656519,795659,<a name="line.37"></a>
<span class="sourceLineNo">038</span>            1373639,1373677,//around second boundary in miller-rabin<a name="line.38"></a>
<span class="sourceLineNo">039</span>            588977,952381,<a name="line.39"></a>
<span class="sourceLineNo">040</span>            1013041,1205999,2814001,<a name="line.40"></a>
<span class="sourceLineNo">041</span>            22605091,<a name="line.41"></a>
<span class="sourceLineNo">042</span>            25325981,25326023,//around third boundary in miller-rabin<a name="line.42"></a>
<span class="sourceLineNo">043</span>            100000007,715827881,<a name="line.43"></a>
<span class="sourceLineNo">044</span>            2147483647//Integer.MAX_VALUE<a name="line.44"></a>
<span class="sourceLineNo">045</span>            };<a name="line.45"></a>
<span class="sourceLineNo">046</span><a name="line.46"></a>
<span class="sourceLineNo">047</span>    public static final int[] NOT_PRIMES = {//composite chosen at random + particular values used in algorithms such as boundaries for millerRabin<a name="line.47"></a>
<span class="sourceLineNo">048</span>            4,6,8,9,10,12,14,15,16,18,20,21,22,24,25,<a name="line.48"></a>
<span class="sourceLineNo">049</span>            275,<a name="line.49"></a>
<span class="sourceLineNo">050</span>            2037,2041,2045,2046,2047,2048,2049,2051,2055,//around first boundary in miller-rabin<a name="line.50"></a>
<span class="sourceLineNo">051</span>            9095,<a name="line.51"></a>
<span class="sourceLineNo">052</span>            463465,<a name="line.52"></a>
<span class="sourceLineNo">053</span>            1373637,1373641,1373651,1373652,1373653,1373654,1373655,1373673,1373675,1373679,//around second boundary in miller-rabin<a name="line.53"></a>
<span class="sourceLineNo">054</span>            25325979,25325983,25325993,25325997,25325999,25326001,25326003,25326007,25326009,25326011,25326021,25326025,//around third boundary in miller-rabin<a name="line.54"></a>
<span class="sourceLineNo">055</span>            100000005,<a name="line.55"></a>
<span class="sourceLineNo">056</span>            1073741341,1073741823,2147473649,2147483641,2147483643,2147483645,2147483646};<a name="line.56"></a>
<span class="sourceLineNo">057</span><a name="line.57"></a>
<span class="sourceLineNo">058</span>    public static final int[] BELOW_2 = {<a name="line.58"></a>
<span class="sourceLineNo">059</span>            Integer.MIN_VALUE,-1,0,1};<a name="line.59"></a>
<span class="sourceLineNo">060</span><a name="line.60"></a>
<span class="sourceLineNo">061</span>    void assertPrimeFactorsException(int n, Throwable expected) {<a name="line.61"></a>
<span class="sourceLineNo">062</span>        try {<a name="line.62"></a>
<span class="sourceLineNo">063</span>            Primes.primeFactors(n);<a name="line.63"></a>
<span class="sourceLineNo">064</span>            Assert.fail("Exception not thrown");<a name="line.64"></a>
<span class="sourceLineNo">065</span>        } catch (Throwable e) {<a name="line.65"></a>
<span class="sourceLineNo">066</span>            Assert.assertEquals(expected.getClass(), e.getClass());<a name="line.66"></a>
<span class="sourceLineNo">067</span>            if (expected.getMessage() != null) {<a name="line.67"></a>
<span class="sourceLineNo">068</span>                Assert.assertEquals(expected.getMessage(), e.getMessage());<a name="line.68"></a>
<span class="sourceLineNo">069</span>            }<a name="line.69"></a>
<span class="sourceLineNo">070</span>        }<a name="line.70"></a>
<span class="sourceLineNo">071</span>    }<a name="line.71"></a>
<span class="sourceLineNo">072</span>    void assertNextPrimeException(int n, Throwable expected){<a name="line.72"></a>
<span class="sourceLineNo">073</span>        try {<a name="line.73"></a>
<span class="sourceLineNo">074</span>            Primes.nextPrime(n);<a name="line.74"></a>
<span class="sourceLineNo">075</span>            Assert.fail("Exception not thrown");<a name="line.75"></a>
<span class="sourceLineNo">076</span>        } catch(Throwable e) {<a name="line.76"></a>
<span class="sourceLineNo">077</span>            Assert.assertEquals(expected.getClass(), e.getClass());<a name="line.77"></a>
<span class="sourceLineNo">078</span>            if (expected.getMessage() != null) {<a name="line.78"></a>
<span class="sourceLineNo">079</span>                Assert.assertEquals(expected.getMessage(), e.getMessage());<a name="line.79"></a>
<span class="sourceLineNo">080</span>            }<a name="line.80"></a>
<span class="sourceLineNo">081</span>        }<a name="line.81"></a>
<span class="sourceLineNo">082</span>    }<a name="line.82"></a>
<span class="sourceLineNo">083</span><a name="line.83"></a>
<span class="sourceLineNo">084</span>    @Test<a name="line.84"></a>
<span class="sourceLineNo">085</span>    public void testNextPrime() {<a name="line.85"></a>
<span class="sourceLineNo">086</span><a name="line.86"></a>
<span class="sourceLineNo">087</span>        Assert.assertEquals(2, Primes.nextPrime(0));<a name="line.87"></a>
<span class="sourceLineNo">088</span>        Assert.assertEquals(2, Primes.nextPrime(1));<a name="line.88"></a>
<span class="sourceLineNo">089</span>        Assert.assertEquals(2, Primes.nextPrime(2));<a name="line.89"></a>
<span class="sourceLineNo">090</span>        Assert.assertEquals(3, Primes.nextPrime(3));<a name="line.90"></a>
<span class="sourceLineNo">091</span>        Assert.assertEquals(5, Primes.nextPrime(4));<a name="line.91"></a>
<span class="sourceLineNo">092</span>        Assert.assertEquals(5, Primes.nextPrime(5));<a name="line.92"></a>
<span class="sourceLineNo">093</span><a name="line.93"></a>
<span class="sourceLineNo">094</span>        for (int i = 0; i &lt; SmallPrimes.PRIMES.length - 1; i++) {<a name="line.94"></a>
<span class="sourceLineNo">095</span>            for (int j = SmallPrimes.PRIMES[i] + 1; j &lt;= SmallPrimes.PRIMES[i + 1]; j++) {<a name="line.95"></a>
<span class="sourceLineNo">096</span>                Assert.assertEquals(SmallPrimes.PRIMES[i+1], Primes.nextPrime(j));<a name="line.96"></a>
<span class="sourceLineNo">097</span>            }<a name="line.97"></a>
<span class="sourceLineNo">098</span>        }<a name="line.98"></a>
<span class="sourceLineNo">099</span><a name="line.99"></a>
<span class="sourceLineNo">100</span>        Assert.assertEquals(25325981, Primes.nextPrime(25325981));<a name="line.100"></a>
<span class="sourceLineNo">101</span>        for (int i = 25325981 + 1; i &lt;= 25326023; i++) {<a name="line.101"></a>
<span class="sourceLineNo">102</span>            Assert.assertEquals(25326023, Primes.nextPrime(i));<a name="line.102"></a>
<span class="sourceLineNo">103</span>        }<a name="line.103"></a>
<span class="sourceLineNo">104</span><a name="line.104"></a>
<span class="sourceLineNo">105</span>        Assert.assertEquals(Integer.MAX_VALUE, Primes.nextPrime(Integer.MAX_VALUE - 10));<a name="line.105"></a>
<span class="sourceLineNo">106</span>        Assert.assertEquals(Integer.MAX_VALUE, Primes.nextPrime(Integer.MAX_VALUE - 1));<a name="line.106"></a>
<span class="sourceLineNo">107</span>        Assert.assertEquals(Integer.MAX_VALUE, Primes.nextPrime(Integer.MAX_VALUE));<a name="line.107"></a>
<span class="sourceLineNo">108</span><a name="line.108"></a>
<span class="sourceLineNo">109</span>        assertNextPrimeException(Integer.MIN_VALUE, new MathIllegalArgumentException(LocalizedFormats.NUMBER_TOO_SMALL,Integer.MIN_VALUE,0));<a name="line.109"></a>
<span class="sourceLineNo">110</span>        assertNextPrimeException(-1, new MathIllegalArgumentException(LocalizedFormats.NUMBER_TOO_SMALL,-1,0));<a name="line.110"></a>
<span class="sourceLineNo">111</span>        assertNextPrimeException(-13, new MathIllegalArgumentException(LocalizedFormats.NUMBER_TOO_SMALL,-13,0));<a name="line.111"></a>
<span class="sourceLineNo">112</span>    }<a name="line.112"></a>
<span class="sourceLineNo">113</span><a name="line.113"></a>
<span class="sourceLineNo">114</span>    @Test<a name="line.114"></a>
<span class="sourceLineNo">115</span>    public void testIsPrime() throws Exception {<a name="line.115"></a>
<span class="sourceLineNo">116</span>        for (int i : BELOW_2) {<a name="line.116"></a>
<span class="sourceLineNo">117</span>            Assert.assertFalse(Primes.isPrime(i));<a name="line.117"></a>
<span class="sourceLineNo">118</span>        }<a name="line.118"></a>
<span class="sourceLineNo">119</span>        for (int i:NOT_PRIMES) {<a name="line.119"></a>
<span class="sourceLineNo">120</span>            Assert.assertFalse(Primes.isPrime(i));<a name="line.120"></a>
<span class="sourceLineNo">121</span>        }<a name="line.121"></a>
<span class="sourceLineNo">122</span>        for (int i:PRIMES) {<a name="line.122"></a>
<span class="sourceLineNo">123</span>            Assert.assertTrue(Primes.isPrime(i));<a name="line.123"></a>
<span class="sourceLineNo">124</span>        }<a name="line.124"></a>
<span class="sourceLineNo">125</span>    }<a name="line.125"></a>
<span class="sourceLineNo">126</span><a name="line.126"></a>
<span class="sourceLineNo">127</span>    static int sum(List&lt;Integer&gt; numbers){<a name="line.127"></a>
<span class="sourceLineNo">128</span>        int out = 0;<a name="line.128"></a>
<span class="sourceLineNo">129</span>        for (int i:numbers) {<a name="line.129"></a>
<span class="sourceLineNo">130</span>            out += i;<a name="line.130"></a>
<span class="sourceLineNo">131</span>        }<a name="line.131"></a>
<span class="sourceLineNo">132</span>        return out;<a name="line.132"></a>
<span class="sourceLineNo">133</span>    }<a name="line.133"></a>
<span class="sourceLineNo">134</span>    static int product(List&lt;Integer&gt; numbers) {<a name="line.134"></a>
<span class="sourceLineNo">135</span>        int out = 1;<a name="line.135"></a>
<span class="sourceLineNo">136</span>        for (int i : numbers) {<a name="line.136"></a>
<span class="sourceLineNo">137</span>            out *= i;<a name="line.137"></a>
<span class="sourceLineNo">138</span>        }<a name="line.138"></a>
<span class="sourceLineNo">139</span>        return out;<a name="line.139"></a>
<span class="sourceLineNo">140</span>    }<a name="line.140"></a>
<span class="sourceLineNo">141</span>    static final HashSet&lt;Integer&gt; PRIMES_SET = new HashSet&lt;Integer&gt;();<a name="line.141"></a>
<span class="sourceLineNo">142</span>    static {<a name="line.142"></a>
<span class="sourceLineNo">143</span>        for (int p : PRIMES) {<a name="line.143"></a>
<span class="sourceLineNo">144</span>            PRIMES_SET.add(p);<a name="line.144"></a>
<span class="sourceLineNo">145</span>        }<a name="line.145"></a>
<span class="sourceLineNo">146</span>    }<a name="line.146"></a>
<span class="sourceLineNo">147</span>    static void checkPrimeFactors(List&lt;Integer&gt; factors){<a name="line.147"></a>
<span class="sourceLineNo">148</span>        for (int p : factors) {<a name="line.148"></a>
<span class="sourceLineNo">149</span>            if (!PRIMES_SET.contains(p)) {<a name="line.149"></a>
<span class="sourceLineNo">150</span>                Assert.fail("Not found in primes list: " + p);<a name="line.150"></a>
<span class="sourceLineNo">151</span>            }<a name="line.151"></a>
<span class="sourceLineNo">152</span>        }<a name="line.152"></a>
<span class="sourceLineNo">153</span>    }<a name="line.153"></a>
<span class="sourceLineNo">154</span><a name="line.154"></a>
<span class="sourceLineNo">155</span>    @Test<a name="line.155"></a>
<span class="sourceLineNo">156</span>    public void testPrimeFactors() throws Exception {<a name="line.156"></a>
<span class="sourceLineNo">157</span>        for (int i : BELOW_2) {<a name="line.157"></a>
<span class="sourceLineNo">158</span>            assertPrimeFactorsException(i, new MathIllegalArgumentException(LocalizedFormats.NUMBER_TOO_SMALL,i,2));<a name="line.158"></a>
<span class="sourceLineNo">159</span>        }<a name="line.159"></a>
<span class="sourceLineNo">160</span>        for (int i : NOT_PRIMES) {<a name="line.160"></a>
<span class="sourceLineNo">161</span>            List&lt;Integer&gt; factors = Primes.primeFactors(i);<a name="line.161"></a>
<span class="sourceLineNo">162</span>            checkPrimeFactors(factors);<a name="line.162"></a>
<span class="sourceLineNo">163</span>            int prod = product(factors);<a name="line.163"></a>
<span class="sourceLineNo">164</span>            Assert.assertEquals(i, prod);<a name="line.164"></a>
<span class="sourceLineNo">165</span>        }<a name="line.165"></a>
<span class="sourceLineNo">166</span>        for (int i : PRIMES) {<a name="line.166"></a>
<span class="sourceLineNo">167</span>            List&lt;Integer&gt; factors = Primes.primeFactors(i);<a name="line.167"></a>
<span class="sourceLineNo">168</span>            Assert.assertEquals(i, (int)factors.get(0));<a name="line.168"></a>
<span class="sourceLineNo">169</span>            Assert.assertEquals(1, factors.size());<a name="line.169"></a>
<span class="sourceLineNo">170</span>        }<a name="line.170"></a>
<span class="sourceLineNo">171</span>    }<a name="line.171"></a>
<span class="sourceLineNo">172</span>}<a name="line.172"></a>




























































</pre>
</div>
</body>
</html>
