<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>PolynomialFitterTest xref</title>
<link type="text/css" rel="stylesheet" href="../../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../testapidocs/org/apache/commons/math3/fitting/PolynomialFitterTest.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Licensed to the Apache Software Foundation (ASF) under one or more</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> * contributor license agreements.  See the NOTICE file distributed with</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * this work for additional information regarding copyright ownership.</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * The ASF licenses this file to You under the Apache License, Version 2.0</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * (the "License"); you may not use this file except in compliance with</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> * the License.  You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *      <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">package</strong> org.apache.commons.math3.fitting;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <strong class="jxr_keyword">import</strong> java.util.Random;
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.analysis.polynomials.PolynomialFunction;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.analysis.polynomials.PolynomialFunction.Parametric;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.ConvergenceException;
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.TooManyEvaluationsException;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer;
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer;
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.optim.SimpleVectorValueChecker;
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.util.FastMath;
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.distribution.RealDistribution;
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.distribution.UniformRealDistribution;
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.TestUtils;
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <strong class="jxr_keyword">import</strong> org.junit.Test;
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <strong class="jxr_keyword">import</strong> org.junit.Assert;
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  <em class="jxr_javadoccomment"> * Test for class {@link CurveFitter} where the function to fit is a</em>
<a class="jxr_linenumber" name="L38" href="#L38">38</a>  <em class="jxr_javadoccomment"> * polynomial.</em>
<a class="jxr_linenumber" name="L39" href="#L39">39</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L40" href="#L40">40</a>  @Deprecated
<a class="jxr_linenumber" name="L41" href="#L41">41</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../org/apache/commons/math3/fitting/PolynomialFitterTest.html">PolynomialFitterTest</a> {
<a class="jxr_linenumber" name="L42" href="#L42">42</a>      @Test
<a class="jxr_linenumber" name="L43" href="#L43">43</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testFit() {
<a class="jxr_linenumber" name="L44" href="#L44">44</a>          <strong class="jxr_keyword">final</strong> RealDistribution rng = <strong class="jxr_keyword">new</strong> UniformRealDistribution(-100, 100);
<a class="jxr_linenumber" name="L45" href="#L45">45</a>          rng.reseedRandomGenerator(64925784252L);
<a class="jxr_linenumber" name="L46" href="#L46">46</a>  
<a class="jxr_linenumber" name="L47" href="#L47">47</a>          <strong class="jxr_keyword">final</strong> LevenbergMarquardtOptimizer optim = <strong class="jxr_keyword">new</strong> LevenbergMarquardtOptimizer();
<a class="jxr_linenumber" name="L48" href="#L48">48</a>          <strong class="jxr_keyword">final</strong> PolynomialFitter fitter = <strong class="jxr_keyword">new</strong> PolynomialFitter(optim);
<a class="jxr_linenumber" name="L49" href="#L49">49</a>          <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] coeff = { 12.9, -3.4, 2.1 }; <em class="jxr_comment">// 12.9 - 3.4 x + 2.1 x^2</em>
<a class="jxr_linenumber" name="L50" href="#L50">50</a>          <strong class="jxr_keyword">final</strong> PolynomialFunction f = <strong class="jxr_keyword">new</strong> PolynomialFunction(coeff);
<a class="jxr_linenumber" name="L51" href="#L51">51</a>  
<a class="jxr_linenumber" name="L52" href="#L52">52</a>          <em class="jxr_comment">// Collect data from a known polynomial.</em>
<a class="jxr_linenumber" name="L53" href="#L53">53</a>          <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; 100; i++) {
<a class="jxr_linenumber" name="L54" href="#L54">54</a>              <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> x = rng.sample();
<a class="jxr_linenumber" name="L55" href="#L55">55</a>              fitter.addObservedPoint(x, f.value(x));
<a class="jxr_linenumber" name="L56" href="#L56">56</a>          }
<a class="jxr_linenumber" name="L57" href="#L57">57</a>  
<a class="jxr_linenumber" name="L58" href="#L58">58</a>          <em class="jxr_comment">// Start fit from initial guesses that are far from the optimal values.</em>
<a class="jxr_linenumber" name="L59" href="#L59">59</a>          <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] best = fitter.fit(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { -1e-20, 3e15, -5e25 });
<a class="jxr_linenumber" name="L60" href="#L60">60</a>  
<a class="jxr_linenumber" name="L61" href="#L61">61</a>          TestUtils.assertEquals(<span class="jxr_string">"best != coeff"</span>, coeff, best, 1e-12);
<a class="jxr_linenumber" name="L62" href="#L62">62</a>      }
<a class="jxr_linenumber" name="L63" href="#L63">63</a>  
<a class="jxr_linenumber" name="L64" href="#L64">64</a>      @Test
<a class="jxr_linenumber" name="L65" href="#L65">65</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testNoError() {
<a class="jxr_linenumber" name="L66" href="#L66">66</a>          Random randomizer = <strong class="jxr_keyword">new</strong> Random(64925784252l);
<a class="jxr_linenumber" name="L67" href="#L67">67</a>          <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> degree = 1; degree &lt; 10; ++degree) {
<a class="jxr_linenumber" name="L68" href="#L68">68</a>              PolynomialFunction p = buildRandomPolynomial(degree, randomizer);
<a class="jxr_linenumber" name="L69" href="#L69">69</a>  
<a class="jxr_linenumber" name="L70" href="#L70">70</a>              PolynomialFitter fitter = <strong class="jxr_keyword">new</strong> PolynomialFitter(<strong class="jxr_keyword">new</strong> LevenbergMarquardtOptimizer());
<a class="jxr_linenumber" name="L71" href="#L71">71</a>              <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt;= degree; ++i) {
<a class="jxr_linenumber" name="L72" href="#L72">72</a>                  fitter.addObservedPoint(1.0, i, p.value(i));
<a class="jxr_linenumber" name="L73" href="#L73">73</a>              }
<a class="jxr_linenumber" name="L74" href="#L74">74</a>  
<a class="jxr_linenumber" name="L75" href="#L75">75</a>              <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] init = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[degree + 1];
<a class="jxr_linenumber" name="L76" href="#L76">76</a>              PolynomialFunction fitted = <strong class="jxr_keyword">new</strong> PolynomialFunction(fitter.fit(init));
<a class="jxr_linenumber" name="L77" href="#L77">77</a>  
<a class="jxr_linenumber" name="L78" href="#L78">78</a>              <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">double</strong> x = -1.0; x &lt; 1.0; x += 0.01) {
<a class="jxr_linenumber" name="L79" href="#L79">79</a>                  <strong class="jxr_keyword">double</strong> error = FastMath.abs(p.value(x) - fitted.value(x)) /
<a class="jxr_linenumber" name="L80" href="#L80">80</a>                                 (1.0 + FastMath.abs(p.value(x)));
<a class="jxr_linenumber" name="L81" href="#L81">81</a>                  Assert.assertEquals(0.0, error, 1.0e-6);
<a class="jxr_linenumber" name="L82" href="#L82">82</a>              }
<a class="jxr_linenumber" name="L83" href="#L83">83</a>          }
<a class="jxr_linenumber" name="L84" href="#L84">84</a>      }
<a class="jxr_linenumber" name="L85" href="#L85">85</a>  
<a class="jxr_linenumber" name="L86" href="#L86">86</a>      @Test
<a class="jxr_linenumber" name="L87" href="#L87">87</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testSmallError() {
<a class="jxr_linenumber" name="L88" href="#L88">88</a>          Random randomizer = <strong class="jxr_keyword">new</strong> Random(53882150042l);
<a class="jxr_linenumber" name="L89" href="#L89">89</a>          <strong class="jxr_keyword">double</strong> maxError = 0;
<a class="jxr_linenumber" name="L90" href="#L90">90</a>          <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> degree = 0; degree &lt; 10; ++degree) {
<a class="jxr_linenumber" name="L91" href="#L91">91</a>              PolynomialFunction p = buildRandomPolynomial(degree, randomizer);
<a class="jxr_linenumber" name="L92" href="#L92">92</a>  
<a class="jxr_linenumber" name="L93" href="#L93">93</a>              PolynomialFitter fitter = <strong class="jxr_keyword">new</strong> PolynomialFitter(<strong class="jxr_keyword">new</strong> LevenbergMarquardtOptimizer());
<a class="jxr_linenumber" name="L94" href="#L94">94</a>              <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">double</strong> x = -1.0; x &lt; 1.0; x += 0.01) {
<a class="jxr_linenumber" name="L95" href="#L95">95</a>                  fitter.addObservedPoint(1.0, x,
<a class="jxr_linenumber" name="L96" href="#L96">96</a>                                          p.value(x) + 0.1 * randomizer.nextGaussian());
<a class="jxr_linenumber" name="L97" href="#L97">97</a>              }
<a class="jxr_linenumber" name="L98" href="#L98">98</a>  
<a class="jxr_linenumber" name="L99" href="#L99">99</a>              <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] init = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[degree + 1];
<a class="jxr_linenumber" name="L100" href="#L100">100</a>             PolynomialFunction fitted = <strong class="jxr_keyword">new</strong> PolynomialFunction(fitter.fit(init));
<a class="jxr_linenumber" name="L101" href="#L101">101</a> 
<a class="jxr_linenumber" name="L102" href="#L102">102</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">double</strong> x = -1.0; x &lt; 1.0; x += 0.01) {
<a class="jxr_linenumber" name="L103" href="#L103">103</a>                 <strong class="jxr_keyword">double</strong> error = FastMath.abs(p.value(x) - fitted.value(x)) /
<a class="jxr_linenumber" name="L104" href="#L104">104</a>                               (1.0 + FastMath.abs(p.value(x)));
<a class="jxr_linenumber" name="L105" href="#L105">105</a>                 maxError = FastMath.max(maxError, error);
<a class="jxr_linenumber" name="L106" href="#L106">106</a>                 Assert.assertTrue(FastMath.abs(error) &lt; 0.1);
<a class="jxr_linenumber" name="L107" href="#L107">107</a>             }
<a class="jxr_linenumber" name="L108" href="#L108">108</a>         }
<a class="jxr_linenumber" name="L109" href="#L109">109</a>         Assert.assertTrue(maxError &gt; 0.01);
<a class="jxr_linenumber" name="L110" href="#L110">110</a>     }
<a class="jxr_linenumber" name="L111" href="#L111">111</a> 
<a class="jxr_linenumber" name="L112" href="#L112">112</a>     @Test
<a class="jxr_linenumber" name="L113" href="#L113">113</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testMath798() {
<a class="jxr_linenumber" name="L114" href="#L114">114</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> tol = 1e-14;
<a class="jxr_linenumber" name="L115" href="#L115">115</a>         <strong class="jxr_keyword">final</strong> SimpleVectorValueChecker checker = <strong class="jxr_keyword">new</strong> SimpleVectorValueChecker(tol, tol);
<a class="jxr_linenumber" name="L116" href="#L116">116</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] init = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0, 0 };
<a class="jxr_linenumber" name="L117" href="#L117">117</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> maxEval = 3;
<a class="jxr_linenumber" name="L118" href="#L118">118</a> 
<a class="jxr_linenumber" name="L119" href="#L119">119</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] lm = doMath798(<strong class="jxr_keyword">new</strong> LevenbergMarquardtOptimizer(checker), maxEval, init);
<a class="jxr_linenumber" name="L120" href="#L120">120</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] gn = doMath798(<strong class="jxr_keyword">new</strong> GaussNewtonOptimizer(checker), maxEval, init);
<a class="jxr_linenumber" name="L121" href="#L121">121</a> 
<a class="jxr_linenumber" name="L122" href="#L122">122</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt;= 1; i++) {
<a class="jxr_linenumber" name="L123" href="#L123">123</a>             Assert.assertEquals(lm[i], gn[i], tol);
<a class="jxr_linenumber" name="L124" href="#L124">124</a>         }
<a class="jxr_linenumber" name="L125" href="#L125">125</a>     }
<a class="jxr_linenumber" name="L126" href="#L126">126</a> 
<a class="jxr_linenumber" name="L127" href="#L127">127</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L128" href="#L128">128</a> <em class="jxr_javadoccomment">     * This test shows that the user can set the maximum number of iterations</em>
<a class="jxr_linenumber" name="L129" href="#L129">129</a> <em class="jxr_javadoccomment">     * to avoid running for too long.</em>
<a class="jxr_linenumber" name="L130" href="#L130">130</a> <em class="jxr_javadoccomment">     * But in the test case, the real problem is that the tolerance is way too</em>
<a class="jxr_linenumber" name="L131" href="#L131">131</a> <em class="jxr_javadoccomment">     * stringent.</em>
<a class="jxr_linenumber" name="L132" href="#L132">132</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L133" href="#L133">133</a>     @Test(expected=TooManyEvaluationsException.<strong class="jxr_keyword">class</strong>)
<a class="jxr_linenumber" name="L134" href="#L134">134</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testMath798WithToleranceTooLow() {
<a class="jxr_linenumber" name="L135" href="#L135">135</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> tol = 1e-100;
<a class="jxr_linenumber" name="L136" href="#L136">136</a>         <strong class="jxr_keyword">final</strong> SimpleVectorValueChecker checker = <strong class="jxr_keyword">new</strong> SimpleVectorValueChecker(tol, tol);
<a class="jxr_linenumber" name="L137" href="#L137">137</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] init = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0, 0 };
<a class="jxr_linenumber" name="L138" href="#L138">138</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> maxEval = 10000; <em class="jxr_comment">// Trying hard to fit.</em>
<a class="jxr_linenumber" name="L139" href="#L139">139</a> 
<a class="jxr_linenumber" name="L140" href="#L140">140</a>         @SuppressWarnings(<span class="jxr_string">"unused"</span>)
<a class="jxr_linenumber" name="L141" href="#L141">141</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] gn = doMath798(<strong class="jxr_keyword">new</strong> GaussNewtonOptimizer(checker), maxEval, init);
<a class="jxr_linenumber" name="L142" href="#L142">142</a>     }
<a class="jxr_linenumber" name="L143" href="#L143">143</a> 
<a class="jxr_linenumber" name="L144" href="#L144">144</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L145" href="#L145">145</a> <em class="jxr_javadoccomment">     * This test shows that the user can set the maximum number of iterations</em>
<a class="jxr_linenumber" name="L146" href="#L146">146</a> <em class="jxr_javadoccomment">     * to avoid running for too long.</em>
<a class="jxr_linenumber" name="L147" href="#L147">147</a> <em class="jxr_javadoccomment">     * Even if the real problem is that the tolerance is way too stringent, it</em>
<a class="jxr_linenumber" name="L148" href="#L148">148</a> <em class="jxr_javadoccomment">     * is possible to get the best solution so far, i.e. a checker will return</em>
<a class="jxr_linenumber" name="L149" href="#L149">149</a> <em class="jxr_javadoccomment">     * the point when the maximum iteration count has been reached.</em>
<a class="jxr_linenumber" name="L150" href="#L150">150</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L151" href="#L151">151</a>     @Test
<a class="jxr_linenumber" name="L152" href="#L152">152</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testMath798WithToleranceTooLowButNoException() {
<a class="jxr_linenumber" name="L153" href="#L153">153</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> tol = 1e-100;
<a class="jxr_linenumber" name="L154" href="#L154">154</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] init = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0, 0 };
<a class="jxr_linenumber" name="L155" href="#L155">155</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> maxEval = 10000; <em class="jxr_comment">// Trying hard to fit.</em>
<a class="jxr_linenumber" name="L156" href="#L156">156</a>         <strong class="jxr_keyword">final</strong> SimpleVectorValueChecker checker = <strong class="jxr_keyword">new</strong> SimpleVectorValueChecker(tol, tol, maxEval);
<a class="jxr_linenumber" name="L157" href="#L157">157</a> 
<a class="jxr_linenumber" name="L158" href="#L158">158</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] lm = doMath798(<strong class="jxr_keyword">new</strong> LevenbergMarquardtOptimizer(checker), maxEval, init);
<a class="jxr_linenumber" name="L159" href="#L159">159</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] gn = doMath798(<strong class="jxr_keyword">new</strong> GaussNewtonOptimizer(checker), maxEval, init);
<a class="jxr_linenumber" name="L160" href="#L160">160</a> 
<a class="jxr_linenumber" name="L161" href="#L161">161</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt;= 1; i++) {
<a class="jxr_linenumber" name="L162" href="#L162">162</a>             Assert.assertEquals(lm[i], gn[i], 1e-15);
<a class="jxr_linenumber" name="L163" href="#L163">163</a>         }
<a class="jxr_linenumber" name="L164" href="#L164">164</a>     }
<a class="jxr_linenumber" name="L165" href="#L165">165</a> 
<a class="jxr_linenumber" name="L166" href="#L166">166</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L167" href="#L167">167</a> <em class="jxr_javadoccomment">     * @param optimizer Optimizer.</em>
<a class="jxr_linenumber" name="L168" href="#L168">168</a> <em class="jxr_javadoccomment">     * @param maxEval Maximum number of function evaluations.</em>
<a class="jxr_linenumber" name="L169" href="#L169">169</a> <em class="jxr_javadoccomment">     * @param init First guess.</em>
<a class="jxr_linenumber" name="L170" href="#L170">170</a> <em class="jxr_javadoccomment">     * @return the solution found by the given optimizer.</em>
<a class="jxr_linenumber" name="L171" href="#L171">171</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L172" href="#L172">172</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">double</strong>[] doMath798(MultivariateVectorOptimizer optimizer,
<a class="jxr_linenumber" name="L173" href="#L173">173</a>                                <strong class="jxr_keyword">int</strong> maxEval,
<a class="jxr_linenumber" name="L174" href="#L174">174</a>                                <strong class="jxr_keyword">double</strong>[] init) {
<a class="jxr_linenumber" name="L175" href="#L175">175</a>         <strong class="jxr_keyword">final</strong> CurveFitter&lt;Parametric&gt; fitter = <strong class="jxr_keyword">new</strong> CurveFitter&lt;Parametric&gt;(optimizer);
<a class="jxr_linenumber" name="L176" href="#L176">176</a> 
<a class="jxr_linenumber" name="L177" href="#L177">177</a>         fitter.addObservedPoint(-0.2, -7.12442E-13);
<a class="jxr_linenumber" name="L178" href="#L178">178</a>         fitter.addObservedPoint(-0.199, -4.33397E-13);
<a class="jxr_linenumber" name="L179" href="#L179">179</a>         fitter.addObservedPoint(-0.198, -2.823E-13);
<a class="jxr_linenumber" name="L180" href="#L180">180</a>         fitter.addObservedPoint(-0.197, -1.40405E-13);
<a class="jxr_linenumber" name="L181" href="#L181">181</a>         fitter.addObservedPoint(-0.196, -7.80821E-15);
<a class="jxr_linenumber" name="L182" href="#L182">182</a>         fitter.addObservedPoint(-0.195, 6.20484E-14);
<a class="jxr_linenumber" name="L183" href="#L183">183</a>         fitter.addObservedPoint(-0.194, 7.24673E-14);
<a class="jxr_linenumber" name="L184" href="#L184">184</a>         fitter.addObservedPoint(-0.193, 1.47152E-13);
<a class="jxr_linenumber" name="L185" href="#L185">185</a>         fitter.addObservedPoint(-0.192, 1.9629E-13);
<a class="jxr_linenumber" name="L186" href="#L186">186</a>         fitter.addObservedPoint(-0.191, 2.12038E-13);
<a class="jxr_linenumber" name="L187" href="#L187">187</a>         fitter.addObservedPoint(-0.19, 2.46906E-13);
<a class="jxr_linenumber" name="L188" href="#L188">188</a>         fitter.addObservedPoint(-0.189, 2.77495E-13);
<a class="jxr_linenumber" name="L189" href="#L189">189</a>         fitter.addObservedPoint(-0.188, 2.51281E-13);
<a class="jxr_linenumber" name="L190" href="#L190">190</a>         fitter.addObservedPoint(-0.187, 2.64001E-13);
<a class="jxr_linenumber" name="L191" href="#L191">191</a>         fitter.addObservedPoint(-0.186, 2.8882E-13);
<a class="jxr_linenumber" name="L192" href="#L192">192</a>         fitter.addObservedPoint(-0.185, 3.13604E-13);
<a class="jxr_linenumber" name="L193" href="#L193">193</a>         fitter.addObservedPoint(-0.184, 3.14248E-13);
<a class="jxr_linenumber" name="L194" href="#L194">194</a>         fitter.addObservedPoint(-0.183, 3.1172E-13);
<a class="jxr_linenumber" name="L195" href="#L195">195</a>         fitter.addObservedPoint(-0.182, 3.12912E-13);
<a class="jxr_linenumber" name="L196" href="#L196">196</a>         fitter.addObservedPoint(-0.181, 3.06761E-13);
<a class="jxr_linenumber" name="L197" href="#L197">197</a>         fitter.addObservedPoint(-0.18, 2.8559E-13);
<a class="jxr_linenumber" name="L198" href="#L198">198</a>         fitter.addObservedPoint(-0.179, 2.86806E-13);
<a class="jxr_linenumber" name="L199" href="#L199">199</a>         fitter.addObservedPoint(-0.178, 2.985E-13);
<a class="jxr_linenumber" name="L200" href="#L200">200</a>         fitter.addObservedPoint(-0.177, 2.67148E-13);
<a class="jxr_linenumber" name="L201" href="#L201">201</a>         fitter.addObservedPoint(-0.176, 2.94173E-13);
<a class="jxr_linenumber" name="L202" href="#L202">202</a>         fitter.addObservedPoint(-0.175, 3.27528E-13);
<a class="jxr_linenumber" name="L203" href="#L203">203</a>         fitter.addObservedPoint(-0.174, 3.33858E-13);
<a class="jxr_linenumber" name="L204" href="#L204">204</a>         fitter.addObservedPoint(-0.173, 2.97511E-13);
<a class="jxr_linenumber" name="L205" href="#L205">205</a>         fitter.addObservedPoint(-0.172, 2.8615E-13);
<a class="jxr_linenumber" name="L206" href="#L206">206</a>         fitter.addObservedPoint(-0.171, 2.84624E-13);
<a class="jxr_linenumber" name="L207" href="#L207">207</a> 
<a class="jxr_linenumber" name="L208" href="#L208">208</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] coeff = fitter.fit(maxEval,
<a class="jxr_linenumber" name="L209" href="#L209">209</a>                                           <strong class="jxr_keyword">new</strong> PolynomialFunction.Parametric(),
<a class="jxr_linenumber" name="L210" href="#L210">210</a>                                           init);
<a class="jxr_linenumber" name="L211" href="#L211">211</a>         <strong class="jxr_keyword">return</strong> coeff;
<a class="jxr_linenumber" name="L212" href="#L212">212</a>     }
<a class="jxr_linenumber" name="L213" href="#L213">213</a> 
<a class="jxr_linenumber" name="L214" href="#L214">214</a>     @Test
<a class="jxr_linenumber" name="L215" href="#L215">215</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testRedundantSolvable() {
<a class="jxr_linenumber" name="L216" href="#L216">216</a>         <em class="jxr_comment">// Levenberg-Marquardt should handle redundant information gracefully</em>
<a class="jxr_linenumber" name="L217" href="#L217">217</a>         checkUnsolvableProblem(<strong class="jxr_keyword">new</strong> LevenbergMarquardtOptimizer(), <strong class="jxr_keyword">true</strong>);
<a class="jxr_linenumber" name="L218" href="#L218">218</a>     }
<a class="jxr_linenumber" name="L219" href="#L219">219</a> 
<a class="jxr_linenumber" name="L220" href="#L220">220</a>     @Test
<a class="jxr_linenumber" name="L221" href="#L221">221</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testRedundantUnsolvable() {
<a class="jxr_linenumber" name="L222" href="#L222">222</a>         <em class="jxr_comment">// Gauss-Newton should not be able to solve redundant information</em>
<a class="jxr_linenumber" name="L223" href="#L223">223</a>         checkUnsolvableProblem(<strong class="jxr_keyword">new</strong> GaussNewtonOptimizer(<strong class="jxr_keyword">true</strong>, <strong class="jxr_keyword">new</strong> SimpleVectorValueChecker(1e-15, 1e-15)), false);
<a class="jxr_linenumber" name="L224" href="#L224">224</a>     }
<a class="jxr_linenumber" name="L225" href="#L225">225</a> 
<a class="jxr_linenumber" name="L226" href="#L226">226</a>     @Test
<a class="jxr_linenumber" name="L227" href="#L227">227</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testLargeSample() {
<a class="jxr_linenumber" name="L228" href="#L228">228</a>         Random randomizer = <strong class="jxr_keyword">new</strong> Random(0x5551480dca5b369bl);
<a class="jxr_linenumber" name="L229" href="#L229">229</a>         <strong class="jxr_keyword">double</strong> maxError = 0;
<a class="jxr_linenumber" name="L230" href="#L230">230</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> degree = 0; degree &lt; 10; ++degree) {
<a class="jxr_linenumber" name="L231" href="#L231">231</a>             PolynomialFunction p = buildRandomPolynomial(degree, randomizer);
<a class="jxr_linenumber" name="L232" href="#L232">232</a> 
<a class="jxr_linenumber" name="L233" href="#L233">233</a>             PolynomialFitter fitter = <strong class="jxr_keyword">new</strong> PolynomialFitter(<strong class="jxr_keyword">new</strong> LevenbergMarquardtOptimizer());
<a class="jxr_linenumber" name="L234" href="#L234">234</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; 40000; ++i) {
<a class="jxr_linenumber" name="L235" href="#L235">235</a>                 <strong class="jxr_keyword">double</strong> x = -1.0 + i / 20000.0;
<a class="jxr_linenumber" name="L236" href="#L236">236</a>                 fitter.addObservedPoint(1.0, x,
<a class="jxr_linenumber" name="L237" href="#L237">237</a>                                         p.value(x) + 0.1 * randomizer.nextGaussian());
<a class="jxr_linenumber" name="L238" href="#L238">238</a>             }
<a class="jxr_linenumber" name="L239" href="#L239">239</a> 
<a class="jxr_linenumber" name="L240" href="#L240">240</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] init = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[degree + 1];
<a class="jxr_linenumber" name="L241" href="#L241">241</a>             PolynomialFunction fitted = <strong class="jxr_keyword">new</strong> PolynomialFunction(fitter.fit(init));
<a class="jxr_linenumber" name="L242" href="#L242">242</a> 
<a class="jxr_linenumber" name="L243" href="#L243">243</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">double</strong> x = -1.0; x &lt; 1.0; x += 0.01) {
<a class="jxr_linenumber" name="L244" href="#L244">244</a>                 <strong class="jxr_keyword">double</strong> error = FastMath.abs(p.value(x) - fitted.value(x)) /
<a class="jxr_linenumber" name="L245" href="#L245">245</a>                               (1.0 + FastMath.abs(p.value(x)));
<a class="jxr_linenumber" name="L246" href="#L246">246</a>                 maxError = FastMath.max(maxError, error);
<a class="jxr_linenumber" name="L247" href="#L247">247</a>                 Assert.assertTrue(FastMath.abs(error) &lt; 0.01);
<a class="jxr_linenumber" name="L248" href="#L248">248</a>             }
<a class="jxr_linenumber" name="L249" href="#L249">249</a>         }
<a class="jxr_linenumber" name="L250" href="#L250">250</a>         Assert.assertTrue(maxError &gt; 0.001);
<a class="jxr_linenumber" name="L251" href="#L251">251</a>     }
<a class="jxr_linenumber" name="L252" href="#L252">252</a> 
<a class="jxr_linenumber" name="L253" href="#L253">253</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">void</strong> checkUnsolvableProblem(MultivariateVectorOptimizer optimizer,
<a class="jxr_linenumber" name="L254" href="#L254">254</a>                                         <strong class="jxr_keyword">boolean</strong> solvable) {
<a class="jxr_linenumber" name="L255" href="#L255">255</a>         Random randomizer = <strong class="jxr_keyword">new</strong> Random(1248788532l);
<a class="jxr_linenumber" name="L256" href="#L256">256</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> degree = 0; degree &lt; 10; ++degree) {
<a class="jxr_linenumber" name="L257" href="#L257">257</a>             PolynomialFunction p = buildRandomPolynomial(degree, randomizer);
<a class="jxr_linenumber" name="L258" href="#L258">258</a> 
<a class="jxr_linenumber" name="L259" href="#L259">259</a>             PolynomialFitter fitter = <strong class="jxr_keyword">new</strong> PolynomialFitter(optimizer);
<a class="jxr_linenumber" name="L260" href="#L260">260</a> 
<a class="jxr_linenumber" name="L261" href="#L261">261</a>             <em class="jxr_comment">// reusing the same point over and over again does not bring</em>
<a class="jxr_linenumber" name="L262" href="#L262">262</a>             <em class="jxr_comment">// information, the problem cannot be solved in this case for</em>
<a class="jxr_linenumber" name="L263" href="#L263">263</a>             <em class="jxr_comment">// degrees greater than 1 (but one point is sufficient for</em>
<a class="jxr_linenumber" name="L264" href="#L264">264</a>             <em class="jxr_comment">// degree 0)</em>
<a class="jxr_linenumber" name="L265" href="#L265">265</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">double</strong> x = -1.0; x &lt; 1.0; x += 0.01) {
<a class="jxr_linenumber" name="L266" href="#L266">266</a>                 fitter.addObservedPoint(1.0, 0.0, p.value(0.0));
<a class="jxr_linenumber" name="L267" href="#L267">267</a>             }
<a class="jxr_linenumber" name="L268" href="#L268">268</a> 
<a class="jxr_linenumber" name="L269" href="#L269">269</a>             <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L270" href="#L270">270</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] init = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[degree + 1];
<a class="jxr_linenumber" name="L271" href="#L271">271</a>                 fitter.fit(init);
<a class="jxr_linenumber" name="L272" href="#L272">272</a>                 Assert.assertTrue(solvable || (degree == 0));
<a class="jxr_linenumber" name="L273" href="#L273">273</a>             } <strong class="jxr_keyword">catch</strong>(ConvergenceException e) {
<a class="jxr_linenumber" name="L274" href="#L274">274</a>                 Assert.assertTrue((! solvable) &amp;&amp; (degree &gt; 0));
<a class="jxr_linenumber" name="L275" href="#L275">275</a>             }
<a class="jxr_linenumber" name="L276" href="#L276">276</a>         }
<a class="jxr_linenumber" name="L277" href="#L277">277</a>     }
<a class="jxr_linenumber" name="L278" href="#L278">278</a> 
<a class="jxr_linenumber" name="L279" href="#L279">279</a>     <strong class="jxr_keyword">private</strong> PolynomialFunction buildRandomPolynomial(<strong class="jxr_keyword">int</strong> degree, Random randomizer) {
<a class="jxr_linenumber" name="L280" href="#L280">280</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] coefficients = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[degree + 1];
<a class="jxr_linenumber" name="L281" href="#L281">281</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt;= degree; ++i) {
<a class="jxr_linenumber" name="L282" href="#L282">282</a>             coefficients[i] = randomizer.nextGaussian();
<a class="jxr_linenumber" name="L283" href="#L283">283</a>         }
<a class="jxr_linenumber" name="L284" href="#L284">284</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> PolynomialFunction(coefficients);
<a class="jxr_linenumber" name="L285" href="#L285">285</a>     }
<a class="jxr_linenumber" name="L286" href="#L286">286</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2003&#x2013;2016 <a href="http://www.apache.org/">The Apache Software Foundation</a>. All rights reserved.</div>
</body>
</html>
