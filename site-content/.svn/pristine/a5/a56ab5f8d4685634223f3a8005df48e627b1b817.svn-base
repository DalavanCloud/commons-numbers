<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>RungeKuttaFieldStepInterpolatorAbstractTest xref</title>
<link type="text/css" rel="stylesheet" href="../../../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../testapidocs/org/apache/commons/math3/ode/nonstiff/RungeKuttaFieldStepInterpolatorAbstractTest.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Licensed to the Apache Software Foundation (ASF) under one or more</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> * contributor license agreements.  See the NOTICE file distributed with</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * this work for additional information regarding copyright ownership.</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * The ASF licenses this file to You under the Apache License, Version 2.0</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * (the "License"); you may not use this file except in compliance with</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> * the License.  You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *      <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  <strong class="jxr_keyword">package</strong> org.apache.commons.math3.ode.nonstiff;
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.Field;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.RealFieldElement;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.ode.AbstractIntegrator;
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.ode.EquationsMapper;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.ode.ExpandableStatefulODE;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.ode.FieldEquationsMapper;
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.ode.FieldExpandableODE;
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.ode.FirstOrderFieldDifferentialEquations;
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.ode.FieldODEStateAndDerivative;
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.ode.sampling.AbstractFieldStepInterpolator;
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.util.FastMath;
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.util.MathArrays;
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <strong class="jxr_keyword">import</strong> org.junit.Assert;
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <strong class="jxr_keyword">import</strong> org.junit.Test;
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">abstract</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../../org/apache/commons/math3/ode/nonstiff/RungeKuttaFieldStepInterpolatorAbstractTest.html">RungeKuttaFieldStepInterpolatorAbstractTest</a> {
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  
<a class="jxr_linenumber" name="L38" href="#L38">38</a>      <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">abstract</strong> &lt;T <strong class="jxr_keyword">extends</strong> RealFieldElement&lt;T&gt;&gt; RungeKuttaFieldStepInterpolator&lt;T&gt;
<a class="jxr_linenumber" name="L39" href="#L39">39</a>          createInterpolator(Field&lt;T&gt; field, <strong class="jxr_keyword">boolean</strong> forward, T[][] yDotK,
<a class="jxr_linenumber" name="L40" href="#L40">40</a>                             FieldODEStateAndDerivative&lt;T&gt; globalPreviousState,
<a class="jxr_linenumber" name="L41" href="#L41">41</a>                             FieldODEStateAndDerivative&lt;T&gt; globalCurrentState,
<a class="jxr_linenumber" name="L42" href="#L42">42</a>                             FieldODEStateAndDerivative&lt;T&gt; softPreviousState,
<a class="jxr_linenumber" name="L43" href="#L43">43</a>                             FieldODEStateAndDerivative&lt;T&gt; softCurrentState,
<a class="jxr_linenumber" name="L44" href="#L44">44</a>                             FieldEquationsMapper&lt;T&gt; mapper);
<a class="jxr_linenumber" name="L45" href="#L45">45</a>  
<a class="jxr_linenumber" name="L46" href="#L46">46</a>      <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">abstract</strong> &lt;T <strong class="jxr_keyword">extends</strong> RealFieldElement&lt;T&gt;&gt; FieldButcherArrayProvider&lt;T&gt;
<a class="jxr_linenumber" name="L47" href="#L47">47</a>          createButcherArrayProvider(<strong class="jxr_keyword">final</strong> Field&lt;T&gt; field);
<a class="jxr_linenumber" name="L48" href="#L48">48</a>  
<a class="jxr_linenumber" name="L49" href="#L49">49</a>      @Test
<a class="jxr_linenumber" name="L50" href="#L50">50</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">abstract</strong> <strong class="jxr_keyword">void</strong> interpolationAtBounds();
<a class="jxr_linenumber" name="L51" href="#L51">51</a>  
<a class="jxr_linenumber" name="L52" href="#L52">52</a>      <strong class="jxr_keyword">protected</strong> &lt;T <strong class="jxr_keyword">extends</strong> RealFieldElement&lt;T&gt;&gt; <strong class="jxr_keyword">void</strong> doInterpolationAtBounds(<strong class="jxr_keyword">final</strong> Field&lt;T&gt; field, <strong class="jxr_keyword">double</strong> epsilon) {
<a class="jxr_linenumber" name="L53" href="#L53">53</a>  
<a class="jxr_linenumber" name="L54" href="#L54">54</a>          RungeKuttaFieldStepInterpolator&lt;T&gt; interpolator = setUpInterpolator(field,
<a class="jxr_linenumber" name="L55" href="#L55">55</a>                                                                              <strong class="jxr_keyword">new</strong> SinCos&lt;T&gt;(field),
<a class="jxr_linenumber" name="L56" href="#L56">56</a>                                                                              0.0, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0.0, 1.0 }, 0.125);
<a class="jxr_linenumber" name="L57" href="#L57">57</a>  
<a class="jxr_linenumber" name="L58" href="#L58">58</a>          Assert.assertEquals(0.0, interpolator.getPreviousState().getTime().getReal(), 1.0e-15);
<a class="jxr_linenumber" name="L59" href="#L59">59</a>          <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; 2; ++i) {
<a class="jxr_linenumber" name="L60" href="#L60">60</a>              Assert.assertEquals(interpolator.getPreviousState().getState()[i].getReal(),
<a class="jxr_linenumber" name="L61" href="#L61">61</a>                                  interpolator.getInterpolatedState(interpolator.getPreviousState().getTime()).getState()[i].getReal(),
<a class="jxr_linenumber" name="L62" href="#L62">62</a>                                  epsilon);
<a class="jxr_linenumber" name="L63" href="#L63">63</a>          }
<a class="jxr_linenumber" name="L64" href="#L64">64</a>          Assert.assertEquals(0.125, interpolator.getCurrentState().getTime().getReal(), 1.0e-15);
<a class="jxr_linenumber" name="L65" href="#L65">65</a>          <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; 2; ++i) {
<a class="jxr_linenumber" name="L66" href="#L66">66</a>              Assert.assertEquals(interpolator.getCurrentState().getState()[i].getReal(),
<a class="jxr_linenumber" name="L67" href="#L67">67</a>                                  interpolator.getInterpolatedState(interpolator.getCurrentState().getTime()).getState()[i].getReal(),
<a class="jxr_linenumber" name="L68" href="#L68">68</a>                                  epsilon);
<a class="jxr_linenumber" name="L69" href="#L69">69</a>          }
<a class="jxr_linenumber" name="L70" href="#L70">70</a>  
<a class="jxr_linenumber" name="L71" href="#L71">71</a>      }
<a class="jxr_linenumber" name="L72" href="#L72">72</a>  
<a class="jxr_linenumber" name="L73" href="#L73">73</a>      @Test
<a class="jxr_linenumber" name="L74" href="#L74">74</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">abstract</strong> <strong class="jxr_keyword">void</strong> interpolationInside();
<a class="jxr_linenumber" name="L75" href="#L75">75</a>  
<a class="jxr_linenumber" name="L76" href="#L76">76</a>      <strong class="jxr_keyword">protected</strong> &lt;T <strong class="jxr_keyword">extends</strong> RealFieldElement&lt;T&gt;&gt; <strong class="jxr_keyword">void</strong> doInterpolationInside(<strong class="jxr_keyword">final</strong> Field&lt;T&gt; field,
<a class="jxr_linenumber" name="L77" href="#L77">77</a>                                                                           <strong class="jxr_keyword">double</strong> epsilonSin, <strong class="jxr_keyword">double</strong> epsilonCos) {
<a class="jxr_linenumber" name="L78" href="#L78">78</a>  
<a class="jxr_linenumber" name="L79" href="#L79">79</a>          RungeKuttaFieldStepInterpolator&lt;T&gt; interpolator = setUpInterpolator(field,
<a class="jxr_linenumber" name="L80" href="#L80">80</a>                                                                              <strong class="jxr_keyword">new</strong> SinCos&lt;T&gt;(field),
<a class="jxr_linenumber" name="L81" href="#L81">81</a>                                                                              0.0, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0.0, 1.0 }, 0.0125);
<a class="jxr_linenumber" name="L82" href="#L82">82</a>  
<a class="jxr_linenumber" name="L83" href="#L83">83</a>          <strong class="jxr_keyword">int</strong> n = 100;
<a class="jxr_linenumber" name="L84" href="#L84">84</a>          <strong class="jxr_keyword">double</strong> maxErrorSin = 0;
<a class="jxr_linenumber" name="L85" href="#L85">85</a>          <strong class="jxr_keyword">double</strong> maxErrorCos = 0;
<a class="jxr_linenumber" name="L86" href="#L86">86</a>          <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt;= n; ++i) {
<a class="jxr_linenumber" name="L87" href="#L87">87</a>              T t =     interpolator.getPreviousState().getTime().multiply(n - i).
<a class="jxr_linenumber" name="L88" href="#L88">88</a>                    add(interpolator.getCurrentState().getTime().multiply(i)).
<a class="jxr_linenumber" name="L89" href="#L89">89</a>                    divide(n);
<a class="jxr_linenumber" name="L90" href="#L90">90</a>              FieldODEStateAndDerivative&lt;T&gt; state = interpolator.getInterpolatedState(t);
<a class="jxr_linenumber" name="L91" href="#L91">91</a>              maxErrorSin = FastMath.max(maxErrorSin, state.getState()[0].subtract(t.sin()).abs().getReal());
<a class="jxr_linenumber" name="L92" href="#L92">92</a>              maxErrorCos = FastMath.max(maxErrorCos, state.getState()[1].subtract(t.cos()).abs().getReal());
<a class="jxr_linenumber" name="L93" href="#L93">93</a>          }
<a class="jxr_linenumber" name="L94" href="#L94">94</a>          Assert.assertEquals(0.0, maxErrorSin, epsilonSin);
<a class="jxr_linenumber" name="L95" href="#L95">95</a>          Assert.assertEquals(0.0, maxErrorCos, epsilonCos);
<a class="jxr_linenumber" name="L96" href="#L96">96</a>  
<a class="jxr_linenumber" name="L97" href="#L97">97</a>      }
<a class="jxr_linenumber" name="L98" href="#L98">98</a>  
<a class="jxr_linenumber" name="L99" href="#L99">99</a>      @Test
<a class="jxr_linenumber" name="L100" href="#L100">100</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">abstract</strong> <strong class="jxr_keyword">void</strong> nonFieldInterpolatorConsistency();
<a class="jxr_linenumber" name="L101" href="#L101">101</a> 
<a class="jxr_linenumber" name="L102" href="#L102">102</a>     <strong class="jxr_keyword">protected</strong> &lt;T <strong class="jxr_keyword">extends</strong> RealFieldElement&lt;T&gt;&gt; <strong class="jxr_keyword">void</strong> doNonFieldInterpolatorConsistency(<strong class="jxr_keyword">final</strong> Field&lt;T&gt; field,
<a class="jxr_linenumber" name="L103" href="#L103">103</a>                                                                                      <strong class="jxr_keyword">double</strong> epsilonSin, <strong class="jxr_keyword">double</strong> epsilonCos,
<a class="jxr_linenumber" name="L104" href="#L104">104</a>                                                                                      <strong class="jxr_keyword">double</strong> epsilonSinDot, <strong class="jxr_keyword">double</strong> epsilonCosDot) {
<a class="jxr_linenumber" name="L105" href="#L105">105</a> 
<a class="jxr_linenumber" name="L106" href="#L106">106</a>         FirstOrderFieldDifferentialEquations&lt;T&gt; eqn = <strong class="jxr_keyword">new</strong> SinCos&lt;T&gt;(field);
<a class="jxr_linenumber" name="L107" href="#L107">107</a>         RungeKuttaFieldStepInterpolator&lt;T&gt; fieldInterpolator =
<a class="jxr_linenumber" name="L108" href="#L108">108</a>                         setUpInterpolator(field, eqn, 0.0, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0.0, 1.0 }, 0.125);
<a class="jxr_linenumber" name="L109" href="#L109">109</a>         RungeKuttaStepInterpolator regularInterpolator = convertInterpolator(fieldInterpolator, eqn);
<a class="jxr_linenumber" name="L110" href="#L110">110</a> 
<a class="jxr_linenumber" name="L111" href="#L111">111</a>         <strong class="jxr_keyword">int</strong> n = 100;
<a class="jxr_linenumber" name="L112" href="#L112">112</a>         <strong class="jxr_keyword">double</strong> maxErrorSin    = 0;
<a class="jxr_linenumber" name="L113" href="#L113">113</a>         <strong class="jxr_keyword">double</strong> maxErrorCos    = 0;
<a class="jxr_linenumber" name="L114" href="#L114">114</a>         <strong class="jxr_keyword">double</strong> maxErrorSinDot = 0;
<a class="jxr_linenumber" name="L115" href="#L115">115</a>         <strong class="jxr_keyword">double</strong> maxErrorCosDot = 0;
<a class="jxr_linenumber" name="L116" href="#L116">116</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt;= n; ++i) {
<a class="jxr_linenumber" name="L117" href="#L117">117</a> 
<a class="jxr_linenumber" name="L118" href="#L118">118</a>             T t =     fieldInterpolator.getPreviousState().getTime().multiply(n - i).
<a class="jxr_linenumber" name="L119" href="#L119">119</a>                   add(fieldInterpolator.getCurrentState().getTime().multiply(i)).
<a class="jxr_linenumber" name="L120" href="#L120">120</a>                   divide(n);
<a class="jxr_linenumber" name="L121" href="#L121">121</a> 
<a class="jxr_linenumber" name="L122" href="#L122">122</a>             FieldODEStateAndDerivative&lt;T&gt; state = fieldInterpolator.getInterpolatedState(t);
<a class="jxr_linenumber" name="L123" href="#L123">123</a>             T[] fieldY    = state.getState();
<a class="jxr_linenumber" name="L124" href="#L124">124</a>             T[] fieldYDot = state.getDerivative();
<a class="jxr_linenumber" name="L125" href="#L125">125</a> 
<a class="jxr_linenumber" name="L126" href="#L126">126</a>             regularInterpolator.setInterpolatedTime(t.getReal());
<a class="jxr_linenumber" name="L127" href="#L127">127</a>             <strong class="jxr_keyword">double</strong>[] regularY     = regularInterpolator.getInterpolatedState();
<a class="jxr_linenumber" name="L128" href="#L128">128</a>             <strong class="jxr_keyword">double</strong>[] regularYDot  = regularInterpolator.getInterpolatedDerivatives();
<a class="jxr_linenumber" name="L129" href="#L129">129</a> 
<a class="jxr_linenumber" name="L130" href="#L130">130</a>             maxErrorSin    = FastMath.max(maxErrorSin,    fieldY[0].subtract(regularY[0]).abs().getReal());
<a class="jxr_linenumber" name="L131" href="#L131">131</a>             maxErrorCos    = FastMath.max(maxErrorCos,    fieldY[1].subtract(regularY[1]).abs().getReal());
<a class="jxr_linenumber" name="L132" href="#L132">132</a>             maxErrorSinDot = FastMath.max(maxErrorSinDot, fieldYDot[0].subtract(regularYDot[0]).abs().getReal());
<a class="jxr_linenumber" name="L133" href="#L133">133</a>             maxErrorCosDot = FastMath.max(maxErrorCosDot, fieldYDot[1].subtract(regularYDot[1]).abs().getReal());
<a class="jxr_linenumber" name="L134" href="#L134">134</a> 
<a class="jxr_linenumber" name="L135" href="#L135">135</a>         }
<a class="jxr_linenumber" name="L136" href="#L136">136</a>         Assert.assertEquals(0.0, maxErrorSin,    epsilonSin);
<a class="jxr_linenumber" name="L137" href="#L137">137</a>         Assert.assertEquals(0.0, maxErrorCos,    epsilonCos);
<a class="jxr_linenumber" name="L138" href="#L138">138</a>         Assert.assertEquals(0.0, maxErrorSinDot, epsilonSinDot);
<a class="jxr_linenumber" name="L139" href="#L139">139</a>         Assert.assertEquals(0.0, maxErrorCosDot, epsilonCosDot);
<a class="jxr_linenumber" name="L140" href="#L140">140</a> 
<a class="jxr_linenumber" name="L141" href="#L141">141</a>     }
<a class="jxr_linenumber" name="L142" href="#L142">142</a> 
<a class="jxr_linenumber" name="L143" href="#L143">143</a>     <strong class="jxr_keyword">private</strong> &lt;T <strong class="jxr_keyword">extends</strong> RealFieldElement&lt;T&gt;&gt;
<a class="jxr_linenumber" name="L144" href="#L144">144</a>     RungeKuttaFieldStepInterpolator&lt;T&gt; setUpInterpolator(<strong class="jxr_keyword">final</strong> Field&lt;T&gt; field,
<a class="jxr_linenumber" name="L145" href="#L145">145</a>                                                          <strong class="jxr_keyword">final</strong> FirstOrderFieldDifferentialEquations&lt;T&gt; eqn,
<a class="jxr_linenumber" name="L146" href="#L146">146</a>                                                          <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> t0, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] y0,
<a class="jxr_linenumber" name="L147" href="#L147">147</a>                                                          <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> t1) {
<a class="jxr_linenumber" name="L148" href="#L148">148</a> 
<a class="jxr_linenumber" name="L149" href="#L149">149</a>         <em class="jxr_comment">// get the Butcher arrays from the field integrator</em>
<a class="jxr_linenumber" name="L150" href="#L150">150</a>         FieldButcherArrayProvider&lt;T&gt; provider = createButcherArrayProvider(field);
<a class="jxr_linenumber" name="L151" href="#L151">151</a>         T[][] a = provider.getA();
<a class="jxr_linenumber" name="L152" href="#L152">152</a>         T[]   b = provider.getB();
<a class="jxr_linenumber" name="L153" href="#L153">153</a>         T[]   c = provider.getC();
<a class="jxr_linenumber" name="L154" href="#L154">154</a> 
<a class="jxr_linenumber" name="L155" href="#L155">155</a>         <em class="jxr_comment">// store initial state</em>
<a class="jxr_linenumber" name="L156" href="#L156">156</a>         T     t          = field.getZero().add(t0);
<a class="jxr_linenumber" name="L157" href="#L157">157</a>         T[]   fieldY     = MathArrays.buildArray(field, eqn.getDimension());
<a class="jxr_linenumber" name="L158" href="#L158">158</a>         T[][] fieldYDotK = MathArrays.buildArray(field, b.length, -1);
<a class="jxr_linenumber" name="L159" href="#L159">159</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; y0.length; ++i) {
<a class="jxr_linenumber" name="L160" href="#L160">160</a>             fieldY[i] = field.getZero().add(y0[i]);
<a class="jxr_linenumber" name="L161" href="#L161">161</a>         }
<a class="jxr_linenumber" name="L162" href="#L162">162</a>         fieldYDotK[0] = eqn.computeDerivatives(t, fieldY);
<a class="jxr_linenumber" name="L163" href="#L163">163</a>         FieldODEStateAndDerivative&lt;T&gt; s0 = <strong class="jxr_keyword">new</strong> FieldODEStateAndDerivative&lt;T&gt;(t, fieldY, fieldYDotK[0]);
<a class="jxr_linenumber" name="L164" href="#L164">164</a> 
<a class="jxr_linenumber" name="L165" href="#L165">165</a>         <em class="jxr_comment">// perform one integration step, in order to get consistent derivatives</em>
<a class="jxr_linenumber" name="L166" href="#L166">166</a>         T h = field.getZero().add(t1 - t0);
<a class="jxr_linenumber" name="L167" href="#L167">167</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> k = 0; k &lt; a.length; ++k) {
<a class="jxr_linenumber" name="L168" href="#L168">168</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; y0.length; ++i) {
<a class="jxr_linenumber" name="L169" href="#L169">169</a>                 fieldY[i] = field.getZero().add(y0[i]);
<a class="jxr_linenumber" name="L170" href="#L170">170</a>                 <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> s = 0; s &lt;= k; ++s) {
<a class="jxr_linenumber" name="L171" href="#L171">171</a>                     fieldY[i] = fieldY[i].add(h.multiply(a[k][s].multiply(fieldYDotK[s][i])));
<a class="jxr_linenumber" name="L172" href="#L172">172</a>                 }
<a class="jxr_linenumber" name="L173" href="#L173">173</a>             }
<a class="jxr_linenumber" name="L174" href="#L174">174</a>             fieldYDotK[k + 1] = eqn.computeDerivatives(h.multiply(c[k]).add(t0), fieldY);
<a class="jxr_linenumber" name="L175" href="#L175">175</a>         }
<a class="jxr_linenumber" name="L176" href="#L176">176</a> 
<a class="jxr_linenumber" name="L177" href="#L177">177</a>         <em class="jxr_comment">// store state at step end</em>
<a class="jxr_linenumber" name="L178" href="#L178">178</a>         t = field.getZero().add(t1);
<a class="jxr_linenumber" name="L179" href="#L179">179</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; y0.length; ++i) {
<a class="jxr_linenumber" name="L180" href="#L180">180</a>             fieldY[i] = field.getZero().add(y0[i]);
<a class="jxr_linenumber" name="L181" href="#L181">181</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> s = 0; s &lt; b.length; ++s) {
<a class="jxr_linenumber" name="L182" href="#L182">182</a>                 fieldY[i] = fieldY[i].add(h.multiply(b[s].multiply(fieldYDotK[s][i])));
<a class="jxr_linenumber" name="L183" href="#L183">183</a>             }
<a class="jxr_linenumber" name="L184" href="#L184">184</a>         }
<a class="jxr_linenumber" name="L185" href="#L185">185</a>         FieldODEStateAndDerivative&lt;T&gt; s1 = <strong class="jxr_keyword">new</strong> FieldODEStateAndDerivative&lt;T&gt;(t, fieldY,
<a class="jxr_linenumber" name="L186" href="#L186">186</a>                                                                              eqn.computeDerivatives(t, fieldY));
<a class="jxr_linenumber" name="L187" href="#L187">187</a> 
<a class="jxr_linenumber" name="L188" href="#L188">188</a>         <strong class="jxr_keyword">return</strong> createInterpolator(field, t1 &gt; t0, fieldYDotK, s0, s1, s0, s1,
<a class="jxr_linenumber" name="L189" href="#L189">189</a>                                   <strong class="jxr_keyword">new</strong> FieldExpandableODE&lt;T&gt;(eqn).getMapper());
<a class="jxr_linenumber" name="L190" href="#L190">190</a> 
<a class="jxr_linenumber" name="L191" href="#L191">191</a>     }
<a class="jxr_linenumber" name="L192" href="#L192">192</a> 
<a class="jxr_linenumber" name="L193" href="#L193">193</a>     <strong class="jxr_keyword">private</strong> &lt;T <strong class="jxr_keyword">extends</strong> RealFieldElement&lt;T&gt;&gt;
<a class="jxr_linenumber" name="L194" href="#L194">194</a>     RungeKuttaStepInterpolator convertInterpolator(<strong class="jxr_keyword">final</strong> RungeKuttaFieldStepInterpolator&lt;T&gt; fieldInterpolator,
<a class="jxr_linenumber" name="L195" href="#L195">195</a>                                                    <strong class="jxr_keyword">final</strong> FirstOrderFieldDifferentialEquations&lt;T&gt; eqn) {
<a class="jxr_linenumber" name="L196" href="#L196">196</a> 
<a class="jxr_linenumber" name="L197" href="#L197">197</a>         RungeKuttaStepInterpolator regularInterpolator = <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L198" href="#L198">198</a>         <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L199" href="#L199">199</a> 
<a class="jxr_linenumber" name="L200" href="#L200">200</a>             String interpolatorName = fieldInterpolator.getClass().getName();
<a class="jxr_linenumber" name="L201" href="#L201">201</a>             String integratorName = interpolatorName.replaceAll(<span class="jxr_string">"Field"</span>, <span class="jxr_string">""</span>);
<a class="jxr_linenumber" name="L202" href="#L202">202</a>             @SuppressWarnings(<span class="jxr_string">"unchecked"</span>)
<a class="jxr_linenumber" name="L203" href="#L203">203</a>             Class&lt;RungeKuttaStepInterpolator&gt; clz = (Class&lt;RungeKuttaStepInterpolator&gt;) Class.forName(integratorName);
<a class="jxr_linenumber" name="L204" href="#L204">204</a>             regularInterpolator = clz.newInstance();
<a class="jxr_linenumber" name="L205" href="#L205">205</a> 
<a class="jxr_linenumber" name="L206" href="#L206">206</a>             <strong class="jxr_keyword">double</strong>[][] yDotArray = <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L207" href="#L207">207</a>             java.lang.reflect.Field fYD = RungeKuttaFieldStepInterpolator.<strong class="jxr_keyword">class</strong>.getDeclaredField(<span class="jxr_string">"yDotK"</span>);
<a class="jxr_linenumber" name="L208" href="#L208">208</a>             fYD.setAccessible(<strong class="jxr_keyword">true</strong>);
<a class="jxr_linenumber" name="L209" href="#L209">209</a>             @SuppressWarnings(<span class="jxr_string">"unchecked"</span>)
<a class="jxr_linenumber" name="L210" href="#L210">210</a>             T[][] fieldYDotk = (T[][]) fYD.get(fieldInterpolator);
<a class="jxr_linenumber" name="L211" href="#L211">211</a>             yDotArray = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[fieldYDotk.length][];
<a class="jxr_linenumber" name="L212" href="#L212">212</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; yDotArray.length; ++i) {
<a class="jxr_linenumber" name="L213" href="#L213">213</a>                 yDotArray[i] = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[fieldYDotk[i].length];
<a class="jxr_linenumber" name="L214" href="#L214">214</a>                 <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = 0; j &lt; yDotArray[i].length; ++j) {
<a class="jxr_linenumber" name="L215" href="#L215">215</a>                     yDotArray[i][j] = fieldYDotk[i][j].getReal();
<a class="jxr_linenumber" name="L216" href="#L216">216</a>                 }
<a class="jxr_linenumber" name="L217" href="#L217">217</a>             }
<a class="jxr_linenumber" name="L218" href="#L218">218</a>             <strong class="jxr_keyword">double</strong>[] y = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[yDotArray[0].length];
<a class="jxr_linenumber" name="L219" href="#L219">219</a> 
<a class="jxr_linenumber" name="L220" href="#L220">220</a>             EquationsMapper primaryMapper = <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L221" href="#L221">221</a>             EquationsMapper[] secondaryMappers = <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L222" href="#L222">222</a>             java.lang.reflect.Field fMapper = AbstractFieldStepInterpolator.<strong class="jxr_keyword">class</strong>.getDeclaredField(<span class="jxr_string">"mapper"</span>);
<a class="jxr_linenumber" name="L223" href="#L223">223</a>             fMapper.setAccessible(<strong class="jxr_keyword">true</strong>);
<a class="jxr_linenumber" name="L224" href="#L224">224</a>             @SuppressWarnings(<span class="jxr_string">"unchecked"</span>)
<a class="jxr_linenumber" name="L225" href="#L225">225</a>             FieldEquationsMapper&lt;T&gt; mapper = (FieldEquationsMapper&lt;T&gt;) fMapper.get(fieldInterpolator);
<a class="jxr_linenumber" name="L226" href="#L226">226</a>             java.lang.reflect.Field fStart = FieldEquationsMapper.<strong class="jxr_keyword">class</strong>.getDeclaredField(<span class="jxr_string">"start"</span>);
<a class="jxr_linenumber" name="L227" href="#L227">227</a>             fStart.setAccessible(<strong class="jxr_keyword">true</strong>);
<a class="jxr_linenumber" name="L228" href="#L228">228</a>             <strong class="jxr_keyword">int</strong>[] start = (<strong class="jxr_keyword">int</strong>[]) fStart.get(mapper);
<a class="jxr_linenumber" name="L229" href="#L229">229</a>             primaryMapper = <strong class="jxr_keyword">new</strong> EquationsMapper(start[0], start[1]);
<a class="jxr_linenumber" name="L230" href="#L230">230</a>             secondaryMappers = <strong class="jxr_keyword">new</strong> EquationsMapper[mapper.getNumberOfEquations() - 1];
<a class="jxr_linenumber" name="L231" href="#L231">231</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; secondaryMappers.length; ++i) {
<a class="jxr_linenumber" name="L232" href="#L232">232</a>                 secondaryMappers[i] = <strong class="jxr_keyword">new</strong> EquationsMapper(start[i + 1], start[i + 2]);
<a class="jxr_linenumber" name="L233" href="#L233">233</a>             }
<a class="jxr_linenumber" name="L234" href="#L234">234</a> 
<a class="jxr_linenumber" name="L235" href="#L235">235</a>             AbstractIntegrator dummyIntegrator = <strong class="jxr_keyword">new</strong> AbstractIntegrator(<span class="jxr_string">"dummy"</span>) {
<a class="jxr_linenumber" name="L236" href="#L236">236</a>                 @Override
<a class="jxr_linenumber" name="L237" href="#L237">237</a>                 <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> integrate(ExpandableStatefulODE equations, <strong class="jxr_keyword">double</strong> t) {
<a class="jxr_linenumber" name="L238" href="#L238">238</a>                     Assert.fail(<span class="jxr_string">"this method should not be called"</span>);
<a class="jxr_linenumber" name="L239" href="#L239">239</a>                 }
<a class="jxr_linenumber" name="L240" href="#L240">240</a>                 @Override
<a class="jxr_linenumber" name="L241" href="#L241">241</a>                 <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> computeDerivatives(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> t, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] y, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] yDot) {
<a class="jxr_linenumber" name="L242" href="#L242">242</a>                     T fieldT = fieldInterpolator.getCurrentState().getTime().getField().getZero().add(t);
<a class="jxr_linenumber" name="L243" href="#L243">243</a>                     T[] fieldY = MathArrays.buildArray(fieldInterpolator.getCurrentState().getTime().getField(), y.length);
<a class="jxr_linenumber" name="L244" href="#L244">244</a>                     <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; y.length; ++i) {
<a class="jxr_linenumber" name="L245" href="#L245">245</a>                         fieldY[i] = fieldInterpolator.getCurrentState().getTime().getField().getZero().add(y[i]);
<a class="jxr_linenumber" name="L246" href="#L246">246</a>                     }
<a class="jxr_linenumber" name="L247" href="#L247">247</a>                     T[] fieldYDot = eqn.computeDerivatives(fieldT, fieldY);
<a class="jxr_linenumber" name="L248" href="#L248">248</a>                     <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; yDot.length; ++i) {
<a class="jxr_linenumber" name="L249" href="#L249">249</a>                         yDot[i] = fieldYDot[i].getReal();
<a class="jxr_linenumber" name="L250" href="#L250">250</a>                     }
<a class="jxr_linenumber" name="L251" href="#L251">251</a>                 }
<a class="jxr_linenumber" name="L252" href="#L252">252</a>             };
<a class="jxr_linenumber" name="L253" href="#L253">253</a>             regularInterpolator.reinitialize(dummyIntegrator, y, yDotArray,
<a class="jxr_linenumber" name="L254" href="#L254">254</a>                                              fieldInterpolator.isForward(),
<a class="jxr_linenumber" name="L255" href="#L255">255</a>                                              primaryMapper, secondaryMappers);
<a class="jxr_linenumber" name="L256" href="#L256">256</a> 
<a class="jxr_linenumber" name="L257" href="#L257">257</a>             T[] fieldPreviousY = fieldInterpolator.getPreviousState().getState();
<a class="jxr_linenumber" name="L258" href="#L258">258</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; y.length; ++i) {
<a class="jxr_linenumber" name="L259" href="#L259">259</a>                 y[i] = fieldPreviousY[i].getReal();
<a class="jxr_linenumber" name="L260" href="#L260">260</a>             }
<a class="jxr_linenumber" name="L261" href="#L261">261</a>             regularInterpolator.storeTime(fieldInterpolator.getPreviousState().getTime().getReal());
<a class="jxr_linenumber" name="L262" href="#L262">262</a> 
<a class="jxr_linenumber" name="L263" href="#L263">263</a>             regularInterpolator.shift();
<a class="jxr_linenumber" name="L264" href="#L264">264</a> 
<a class="jxr_linenumber" name="L265" href="#L265">265</a>             T[] fieldCurrentY = fieldInterpolator.getCurrentState().getState();
<a class="jxr_linenumber" name="L266" href="#L266">266</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; y.length; ++i) {
<a class="jxr_linenumber" name="L267" href="#L267">267</a>                 y[i] = fieldCurrentY[i].getReal();
<a class="jxr_linenumber" name="L268" href="#L268">268</a>             }
<a class="jxr_linenumber" name="L269" href="#L269">269</a>             regularInterpolator.storeTime(fieldInterpolator.getCurrentState().getTime().getReal());
<a class="jxr_linenumber" name="L270" href="#L270">270</a> 
<a class="jxr_linenumber" name="L271" href="#L271">271</a>         } <strong class="jxr_keyword">catch</strong> (ClassNotFoundException cnfe) {
<a class="jxr_linenumber" name="L272" href="#L272">272</a>             Assert.fail(cnfe.getLocalizedMessage());
<a class="jxr_linenumber" name="L273" href="#L273">273</a>         } <strong class="jxr_keyword">catch</strong> (InstantiationException ie) {
<a class="jxr_linenumber" name="L274" href="#L274">274</a>             Assert.fail(ie.getLocalizedMessage());
<a class="jxr_linenumber" name="L275" href="#L275">275</a>         } <strong class="jxr_keyword">catch</strong> (IllegalAccessException iae) {
<a class="jxr_linenumber" name="L276" href="#L276">276</a>             Assert.fail(iae.getLocalizedMessage());
<a class="jxr_linenumber" name="L277" href="#L277">277</a>         } <strong class="jxr_keyword">catch</strong> (NoSuchFieldException nsfe) {
<a class="jxr_linenumber" name="L278" href="#L278">278</a>             Assert.fail(nsfe.getLocalizedMessage());
<a class="jxr_linenumber" name="L279" href="#L279">279</a>         } <strong class="jxr_keyword">catch</strong> (IllegalArgumentException iae) {
<a class="jxr_linenumber" name="L280" href="#L280">280</a>             Assert.fail(iae.getLocalizedMessage());
<a class="jxr_linenumber" name="L281" href="#L281">281</a>         }
<a class="jxr_linenumber" name="L282" href="#L282">282</a> 
<a class="jxr_linenumber" name="L283" href="#L283">283</a>         <strong class="jxr_keyword">return</strong> regularInterpolator;
<a class="jxr_linenumber" name="L284" href="#L284">284</a> 
<a class="jxr_linenumber" name="L285" href="#L285">285</a>     }
<a class="jxr_linenumber" name="L286" href="#L286">286</a> 
<a class="jxr_linenumber" name="L287" href="#L287">287</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">class</strong> SinCos&lt;T <strong class="jxr_keyword">extends</strong> RealFieldElement&lt;T&gt;&gt; <strong class="jxr_keyword">implements</strong> FirstOrderFieldDifferentialEquations&lt;T&gt; {
<a class="jxr_linenumber" name="L288" href="#L288">288</a>         <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> Field&lt;T&gt; field;
<a class="jxr_linenumber" name="L289" href="#L289">289</a>         <strong class="jxr_keyword">protected</strong> <a href="../../../../../../org/apache/commons/math3/ode/nonstiff/RungeKuttaFieldStepInterpolatorAbstractTest.html">SinCos</a>(<strong class="jxr_keyword">final</strong> Field&lt;T&gt; field) {
<a class="jxr_linenumber" name="L290" href="#L290">290</a>             <strong class="jxr_keyword">this</strong>.field = field;
<a class="jxr_linenumber" name="L291" href="#L291">291</a>         }
<a class="jxr_linenumber" name="L292" href="#L292">292</a>         <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">int</strong> getDimension() {
<a class="jxr_linenumber" name="L293" href="#L293">293</a>             <strong class="jxr_keyword">return</strong> 2;
<a class="jxr_linenumber" name="L294" href="#L294">294</a>         }
<a class="jxr_linenumber" name="L295" href="#L295">295</a>         <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> init(<strong class="jxr_keyword">final</strong> T t0, <strong class="jxr_keyword">final</strong> T[] y0, <strong class="jxr_keyword">final</strong> T finalTime) {
<a class="jxr_linenumber" name="L296" href="#L296">296</a>         }
<a class="jxr_linenumber" name="L297" href="#L297">297</a>         <strong class="jxr_keyword">public</strong> T[] computeDerivatives(<strong class="jxr_keyword">final</strong> T t, <strong class="jxr_keyword">final</strong> T[] y) {
<a class="jxr_linenumber" name="L298" href="#L298">298</a>             T[] yDot = MathArrays.buildArray(field, 2);
<a class="jxr_linenumber" name="L299" href="#L299">299</a>             yDot[0] = y[1];
<a class="jxr_linenumber" name="L300" href="#L300">300</a>             yDot[1] = y[0].negate();
<a class="jxr_linenumber" name="L301" href="#L301">301</a>             <strong class="jxr_keyword">return</strong> yDot;
<a class="jxr_linenumber" name="L302" href="#L302">302</a>         }
<a class="jxr_linenumber" name="L303" href="#L303">303</a>     }
<a class="jxr_linenumber" name="L304" href="#L304">304</a> 
<a class="jxr_linenumber" name="L305" href="#L305">305</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2003&#x2013;2016 <a href="http://www.apache.org/">The Apache Software Foundation</a>. All rights reserved.</div>
</body>
</html>
