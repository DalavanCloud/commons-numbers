<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span>package org.apache.commons.math3.distribution;<a name="line.17"></a>
<span class="sourceLineNo">018</span><a name="line.18"></a>
<span class="sourceLineNo">019</span>import org.apache.commons.math3.util.FastMath;<a name="line.19"></a>
<span class="sourceLineNo">020</span>import org.apache.commons.math3.util.Precision;<a name="line.20"></a>
<span class="sourceLineNo">021</span>import org.apache.commons.math3.exception.NotStrictlyPositiveException;<a name="line.21"></a>
<span class="sourceLineNo">022</span>import org.junit.Assert;<a name="line.22"></a>
<span class="sourceLineNo">023</span>import org.junit.Test;<a name="line.23"></a>
<span class="sourceLineNo">024</span><a name="line.24"></a>
<span class="sourceLineNo">025</span>/**<a name="line.25"></a>
<span class="sourceLineNo">026</span> * Test cases for ExponentialDistribution.<a name="line.26"></a>
<span class="sourceLineNo">027</span> * Extends ContinuousDistributionAbstractTest.  See class javadoc for<a name="line.27"></a>
<span class="sourceLineNo">028</span> * ContinuousDistributionAbstractTest for details.<a name="line.28"></a>
<span class="sourceLineNo">029</span> *<a name="line.29"></a>
<span class="sourceLineNo">030</span> */<a name="line.30"></a>
<span class="sourceLineNo">031</span>public class ExponentialDistributionTest extends RealDistributionAbstractTest {<a name="line.31"></a>
<span class="sourceLineNo">032</span><a name="line.32"></a>
<span class="sourceLineNo">033</span>    // --------------------- Override tolerance  --------------<a name="line.33"></a>
<span class="sourceLineNo">034</span>    @Override<a name="line.34"></a>
<span class="sourceLineNo">035</span>    public void setUp() {<a name="line.35"></a>
<span class="sourceLineNo">036</span>        super.setUp();<a name="line.36"></a>
<span class="sourceLineNo">037</span>        setTolerance(1E-9);<a name="line.37"></a>
<span class="sourceLineNo">038</span>    }<a name="line.38"></a>
<span class="sourceLineNo">039</span><a name="line.39"></a>
<span class="sourceLineNo">040</span>    //-------------- Implementations for abstract methods -----------------------<a name="line.40"></a>
<span class="sourceLineNo">041</span><a name="line.41"></a>
<span class="sourceLineNo">042</span>    /** Creates the default continuous distribution instance to use in tests. */<a name="line.42"></a>
<span class="sourceLineNo">043</span>    @Override<a name="line.43"></a>
<span class="sourceLineNo">044</span>    public ExponentialDistribution makeDistribution() {<a name="line.44"></a>
<span class="sourceLineNo">045</span>        return new ExponentialDistribution(5.0);<a name="line.45"></a>
<span class="sourceLineNo">046</span>    }<a name="line.46"></a>
<span class="sourceLineNo">047</span><a name="line.47"></a>
<span class="sourceLineNo">048</span>    /** Creates the default cumulative probability distribution test input values */<a name="line.48"></a>
<span class="sourceLineNo">049</span>    @Override<a name="line.49"></a>
<span class="sourceLineNo">050</span>    public double[] makeCumulativeTestPoints() {<a name="line.50"></a>
<span class="sourceLineNo">051</span>        // quantiles computed using R version 2.9.2<a name="line.51"></a>
<span class="sourceLineNo">052</span>        return new double[] {0.00500250166792, 0.0502516792675, 0.126589039921, 0.256466471938,<a name="line.52"></a>
<span class="sourceLineNo">053</span>                0.526802578289, 34.5387763949, 23.0258509299, 18.4443972706, 14.9786613678, 11.5129254650};<a name="line.53"></a>
<span class="sourceLineNo">054</span>    }<a name="line.54"></a>
<span class="sourceLineNo">055</span><a name="line.55"></a>
<span class="sourceLineNo">056</span>    /** Creates the default cumulative probability density test expected values */<a name="line.56"></a>
<span class="sourceLineNo">057</span>    @Override<a name="line.57"></a>
<span class="sourceLineNo">058</span>    public double[] makeCumulativeTestValues() {<a name="line.58"></a>
<span class="sourceLineNo">059</span>        return new double[] {0.001, 0.01, 0.025, 0.05, 0.1, 0.999,<a name="line.59"></a>
<span class="sourceLineNo">060</span>                0.990, 0.975, 0.950, 0.900};<a name="line.60"></a>
<span class="sourceLineNo">061</span>    }<a name="line.61"></a>
<span class="sourceLineNo">062</span><a name="line.62"></a>
<span class="sourceLineNo">063</span>    /** Creates the default probability density test expected values */<a name="line.63"></a>
<span class="sourceLineNo">064</span>    @Override<a name="line.64"></a>
<span class="sourceLineNo">065</span>    public double[] makeDensityTestValues() {<a name="line.65"></a>
<span class="sourceLineNo">066</span>        return new double[] {0.1998, 0.198, 0.195, 0.19, 0.18, 0.000200000000000,<a name="line.66"></a>
<span class="sourceLineNo">067</span>                0.00200000000002, 0.00499999999997, 0.00999999999994, 0.0199999999999};<a name="line.67"></a>
<span class="sourceLineNo">068</span>    }<a name="line.68"></a>
<span class="sourceLineNo">069</span><a name="line.69"></a>
<span class="sourceLineNo">070</span>    //------------ Additional tests -------------------------------------------<a name="line.70"></a>
<span class="sourceLineNo">071</span><a name="line.71"></a>
<span class="sourceLineNo">072</span>    @Test<a name="line.72"></a>
<span class="sourceLineNo">073</span>    public void testCumulativeProbabilityExtremes() {<a name="line.73"></a>
<span class="sourceLineNo">074</span>        setCumulativeTestPoints(new double[] {-2, 0});<a name="line.74"></a>
<span class="sourceLineNo">075</span>        setCumulativeTestValues(new double[] {0, 0});<a name="line.75"></a>
<span class="sourceLineNo">076</span>        verifyCumulativeProbabilities();<a name="line.76"></a>
<span class="sourceLineNo">077</span>    }<a name="line.77"></a>
<span class="sourceLineNo">078</span><a name="line.78"></a>
<span class="sourceLineNo">079</span>    @Test<a name="line.79"></a>
<span class="sourceLineNo">080</span>    public void testInverseCumulativeProbabilityExtremes() {<a name="line.80"></a>
<span class="sourceLineNo">081</span>         setInverseCumulativeTestPoints(new double[] {0, 1});<a name="line.81"></a>
<span class="sourceLineNo">082</span>         setInverseCumulativeTestValues(new double[] {0, Double.POSITIVE_INFINITY});<a name="line.82"></a>
<span class="sourceLineNo">083</span>         verifyInverseCumulativeProbabilities();<a name="line.83"></a>
<span class="sourceLineNo">084</span>    }<a name="line.84"></a>
<span class="sourceLineNo">085</span><a name="line.85"></a>
<span class="sourceLineNo">086</span>    @Test<a name="line.86"></a>
<span class="sourceLineNo">087</span>    public void testCumulativeProbability2() {<a name="line.87"></a>
<span class="sourceLineNo">088</span>        double actual = getDistribution().cumulativeProbability(0.25, 0.75);<a name="line.88"></a>
<span class="sourceLineNo">089</span>        Assert.assertEquals(0.0905214, actual, 10e-4);<a name="line.89"></a>
<span class="sourceLineNo">090</span>    }<a name="line.90"></a>
<span class="sourceLineNo">091</span><a name="line.91"></a>
<span class="sourceLineNo">092</span>    @Test<a name="line.92"></a>
<span class="sourceLineNo">093</span>    public void testDensity() {<a name="line.93"></a>
<span class="sourceLineNo">094</span>        ExponentialDistribution d1 = new ExponentialDistribution(1);<a name="line.94"></a>
<span class="sourceLineNo">095</span>        Assert.assertTrue(Precision.equals(0.0, d1.density(-1e-9), 1));<a name="line.95"></a>
<span class="sourceLineNo">096</span>        Assert.assertTrue(Precision.equals(1.0, d1.density(0.0), 1));<a name="line.96"></a>
<span class="sourceLineNo">097</span>        Assert.assertTrue(Precision.equals(0.0, d1.density(1000.0), 1));<a name="line.97"></a>
<span class="sourceLineNo">098</span>        Assert.assertTrue(Precision.equals(FastMath.exp(-1), d1.density(1.0), 1));<a name="line.98"></a>
<span class="sourceLineNo">099</span>        Assert.assertTrue(Precision.equals(FastMath.exp(-2), d1.density(2.0), 1));<a name="line.99"></a>
<span class="sourceLineNo">100</span><a name="line.100"></a>
<span class="sourceLineNo">101</span>        ExponentialDistribution d2 = new ExponentialDistribution(3);<a name="line.101"></a>
<span class="sourceLineNo">102</span>        Assert.assertTrue(Precision.equals(1/3.0, d2.density(0.0), 1));<a name="line.102"></a>
<span class="sourceLineNo">103</span>        // computed using  print(dexp(1, rate=1/3), digits=10) in R 2.5<a name="line.103"></a>
<span class="sourceLineNo">104</span>        Assert.assertEquals(0.2388437702, d2.density(1.0), 1e-8);<a name="line.104"></a>
<span class="sourceLineNo">105</span><a name="line.105"></a>
<span class="sourceLineNo">106</span>        // computed using  print(dexp(2, rate=1/3), digits=10) in R 2.5<a name="line.106"></a>
<span class="sourceLineNo">107</span>        Assert.assertEquals(0.1711390397, d2.density(2.0), 1e-8);<a name="line.107"></a>
<span class="sourceLineNo">108</span>    }<a name="line.108"></a>
<span class="sourceLineNo">109</span><a name="line.109"></a>
<span class="sourceLineNo">110</span>    @Test<a name="line.110"></a>
<span class="sourceLineNo">111</span>    public void testMeanAccessors() {<a name="line.111"></a>
<span class="sourceLineNo">112</span>        ExponentialDistribution distribution = (ExponentialDistribution) getDistribution();<a name="line.112"></a>
<span class="sourceLineNo">113</span>        Assert.assertEquals(5d, distribution.getMean(), Double.MIN_VALUE);<a name="line.113"></a>
<span class="sourceLineNo">114</span>    }<a name="line.114"></a>
<span class="sourceLineNo">115</span><a name="line.115"></a>
<span class="sourceLineNo">116</span>    @Test(expected=NotStrictlyPositiveException.class)<a name="line.116"></a>
<span class="sourceLineNo">117</span>    public void testPreconditions() {<a name="line.117"></a>
<span class="sourceLineNo">118</span>        new ExponentialDistribution(0);<a name="line.118"></a>
<span class="sourceLineNo">119</span>    }<a name="line.119"></a>
<span class="sourceLineNo">120</span><a name="line.120"></a>
<span class="sourceLineNo">121</span>    @Test<a name="line.121"></a>
<span class="sourceLineNo">122</span>    public void testMoments() {<a name="line.122"></a>
<span class="sourceLineNo">123</span>        final double tol = 1e-9;<a name="line.123"></a>
<span class="sourceLineNo">124</span>        ExponentialDistribution dist;<a name="line.124"></a>
<span class="sourceLineNo">125</span><a name="line.125"></a>
<span class="sourceLineNo">126</span>        dist = new ExponentialDistribution(11d);<a name="line.126"></a>
<span class="sourceLineNo">127</span>        Assert.assertEquals(dist.getNumericalMean(), 11d, tol);<a name="line.127"></a>
<span class="sourceLineNo">128</span>        Assert.assertEquals(dist.getNumericalVariance(), 11d * 11d, tol);<a name="line.128"></a>
<span class="sourceLineNo">129</span><a name="line.129"></a>
<span class="sourceLineNo">130</span>        dist = new ExponentialDistribution(10.5d);<a name="line.130"></a>
<span class="sourceLineNo">131</span>        Assert.assertEquals(dist.getNumericalMean(), 10.5d, tol);<a name="line.131"></a>
<span class="sourceLineNo">132</span>        Assert.assertEquals(dist.getNumericalVariance(), 10.5d * 10.5d, tol);<a name="line.132"></a>
<span class="sourceLineNo">133</span>    }<a name="line.133"></a>
<span class="sourceLineNo">134</span>}<a name="line.134"></a>




























































</pre>
</div>
</body>
</html>
