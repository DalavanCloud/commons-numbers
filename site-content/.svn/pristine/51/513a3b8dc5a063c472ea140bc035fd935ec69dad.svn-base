<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>LutherStepInterpolator xref</title>
<link type="text/css" rel="stylesheet" href="../../../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../apidocs/org/apache/commons/math3/ode/nonstiff/LutherStepInterpolator.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Licensed to the Apache Software Foundation (ASF) under one or more</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> * contributor license agreements.  See the NOTICE file distributed with</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * this work for additional information regarding copyright ownership.</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * The ASF licenses this file to You under the Apache License, Version 2.0</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * (the "License"); you may not use this file except in compliance with</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> * the License.  You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *      <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  <strong class="jxr_keyword">package</strong> org.apache.commons.math3.ode.nonstiff;
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.ode.sampling.StepInterpolator;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.util.FastMath;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <em class="jxr_javadoccomment"> * This class represents an interpolator over the last step during an</em>
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <em class="jxr_javadoccomment"> * ODE integration for the 6th order Luther integrator.</em>
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <em class="jxr_javadoccomment"> * &lt;p&gt;This interpolator computes dense output inside the last</em>
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <em class="jxr_javadoccomment"> * step computed. The interpolation equation is consistent with the</em>
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <em class="jxr_javadoccomment"> * integration scheme.&lt;/p&gt;</em>
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <em class="jxr_javadoccomment"> * @see LutherIntegrator</em>
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <em class="jxr_javadoccomment"> * @since 3.3</em>
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  <strong class="jxr_keyword">class</strong> <a href="../../../../../../org/apache/commons/math3/ode/nonstiff/LutherStepInterpolator.html">LutherStepInterpolator</a> <strong class="jxr_keyword">extends</strong> <a href="../../../../../../org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator.html">RungeKuttaStepInterpolator</a> {
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  
<a class="jxr_linenumber" name="L37" href="#L37">37</a>      <em class="jxr_javadoccomment">/** Serializable version identifier */</em>
<a class="jxr_linenumber" name="L38" href="#L38">38</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">long</strong> serialVersionUID = 20140416L;
<a class="jxr_linenumber" name="L39" href="#L39">39</a>  
<a class="jxr_linenumber" name="L40" href="#L40">40</a>      <em class="jxr_javadoccomment">/** Square root. */</em>
<a class="jxr_linenumber" name="L41" href="#L41">41</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> Q = FastMath.sqrt(21);
<a class="jxr_linenumber" name="L42" href="#L42">42</a>  
<a class="jxr_linenumber" name="L43" href="#L43">43</a>      <em class="jxr_javadoccomment">/** Simple constructor.</em>
<a class="jxr_linenumber" name="L44" href="#L44">44</a>  <em class="jxr_javadoccomment">     * This constructor builds an instance that is not usable yet, the</em>
<a class="jxr_linenumber" name="L45" href="#L45">45</a>  <em class="jxr_javadoccomment">     * {@link</em>
<a class="jxr_linenumber" name="L46" href="#L46">46</a>  <em class="jxr_javadoccomment">     * org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#reinitialize}</em>
<a class="jxr_linenumber" name="L47" href="#L47">47</a>  <em class="jxr_javadoccomment">     * method should be called before using the instance in order to</em>
<a class="jxr_linenumber" name="L48" href="#L48">48</a>  <em class="jxr_javadoccomment">     * initialize the internal arrays. This constructor is used only</em>
<a class="jxr_linenumber" name="L49" href="#L49">49</a>  <em class="jxr_javadoccomment">     * in order to delay the initialization in some cases. The {@link</em>
<a class="jxr_linenumber" name="L50" href="#L50">50</a>  <em class="jxr_javadoccomment">     * RungeKuttaIntegrator} class uses the prototyping design pattern</em>
<a class="jxr_linenumber" name="L51" href="#L51">51</a>  <em class="jxr_javadoccomment">     * to create the step interpolators by cloning an uninitialized model</em>
<a class="jxr_linenumber" name="L52" href="#L52">52</a>  <em class="jxr_javadoccomment">     * and later initializing the copy.</em>
<a class="jxr_linenumber" name="L53" href="#L53">53</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L54" href="#L54">54</a>      <em class="jxr_comment">// CHECKSTYLE: stop RedundantModifier</em>
<a class="jxr_linenumber" name="L55" href="#L55">55</a>      <em class="jxr_comment">// the public modifier here is needed for serialization</em>
<a class="jxr_linenumber" name="L56" href="#L56">56</a>      <strong class="jxr_keyword">public</strong> <a href="../../../../../../org/apache/commons/math3/ode/nonstiff/LutherStepInterpolator.html">LutherStepInterpolator</a>() {
<a class="jxr_linenumber" name="L57" href="#L57">57</a>      }
<a class="jxr_linenumber" name="L58" href="#L58">58</a>      <em class="jxr_comment">// CHECKSTYLE: resume RedundantModifier</em>
<a class="jxr_linenumber" name="L59" href="#L59">59</a>  
<a class="jxr_linenumber" name="L60" href="#L60">60</a>      <em class="jxr_javadoccomment">/** Copy constructor.</em>
<a class="jxr_linenumber" name="L61" href="#L61">61</a>  <em class="jxr_javadoccomment">     * @param interpolator interpolator to copy from. The copy is a deep</em>
<a class="jxr_linenumber" name="L62" href="#L62">62</a>  <em class="jxr_javadoccomment">     * copy: its arrays are separated from the original arrays of the</em>
<a class="jxr_linenumber" name="L63" href="#L63">63</a>  <em class="jxr_javadoccomment">     * instance</em>
<a class="jxr_linenumber" name="L64" href="#L64">64</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L65" href="#L65">65</a>      <a href="../../../../../../org/apache/commons/math3/ode/nonstiff/LutherStepInterpolator.html">LutherStepInterpolator</a>(<strong class="jxr_keyword">final</strong> <a href="../../../../../../org/apache/commons/math3/ode/nonstiff/LutherStepInterpolator.html">LutherStepInterpolator</a> interpolator) {
<a class="jxr_linenumber" name="L66" href="#L66">66</a>          <strong class="jxr_keyword">super</strong>(interpolator);
<a class="jxr_linenumber" name="L67" href="#L67">67</a>      }
<a class="jxr_linenumber" name="L68" href="#L68">68</a>  
<a class="jxr_linenumber" name="L69" href="#L69">69</a>      <em class="jxr_javadoccomment">/** {@inheritDoc} */</em>
<a class="jxr_linenumber" name="L70" href="#L70">70</a>      @Override
<a class="jxr_linenumber" name="L71" href="#L71">71</a>      <strong class="jxr_keyword">protected</strong> <a href="../../../../../../org/apache/commons/math3/ode/sampling/StepInterpolator.html">StepInterpolator</a> doCopy() {
<a class="jxr_linenumber" name="L72" href="#L72">72</a>          <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/ode/nonstiff/LutherStepInterpolator.html">LutherStepInterpolator</a>(<strong class="jxr_keyword">this</strong>);
<a class="jxr_linenumber" name="L73" href="#L73">73</a>      }
<a class="jxr_linenumber" name="L74" href="#L74">74</a>  
<a class="jxr_linenumber" name="L75" href="#L75">75</a>  
<a class="jxr_linenumber" name="L76" href="#L76">76</a>      <em class="jxr_javadoccomment">/** {@inheritDoc} */</em>
<a class="jxr_linenumber" name="L77" href="#L77">77</a>      @Override
<a class="jxr_linenumber" name="L78" href="#L78">78</a>      <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">void</strong> computeInterpolatedStateAndDerivatives(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> theta,
<a class="jxr_linenumber" name="L79" href="#L79">79</a>                                                            <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> oneMinusThetaH) {
<a class="jxr_linenumber" name="L80" href="#L80">80</a>  
<a class="jxr_linenumber" name="L81" href="#L81">81</a>          <em class="jxr_comment">// the coefficients below have been computed by solving the</em>
<a class="jxr_linenumber" name="L82" href="#L82">82</a>          <em class="jxr_comment">// order conditions from a theorem from Butcher (1963), using</em>
<a class="jxr_linenumber" name="L83" href="#L83">83</a>          <em class="jxr_comment">// the method explained in Folkmar Bornemann paper "Runge-Kutta</em>
<a class="jxr_linenumber" name="L84" href="#L84">84</a>          <em class="jxr_comment">// Methods, Trees, and Maple", Center of Mathematical Sciences, Munich</em>
<a class="jxr_linenumber" name="L85" href="#L85">85</a>          <em class="jxr_comment">// University of Technology, February 9, 2001</em>
<a class="jxr_linenumber" name="L86" href="#L86">86</a>          <em class="jxr_comment">//&lt;http://wwwzenger.informatik.tu-muenchen.de/selcuk/sjam012101.html&gt;</em>
<a class="jxr_linenumber" name="L87" href="#L87">87</a>  
<a class="jxr_linenumber" name="L88" href="#L88">88</a>          <em class="jxr_comment">// the method is implemented in the rkcheck tool</em>
<a class="jxr_linenumber" name="L89" href="#L89">89</a>          <em class="jxr_comment">// &lt;https://www.spaceroots.org/software/rkcheck/index.html&gt;.</em>
<a class="jxr_linenumber" name="L90" href="#L90">90</a>          <em class="jxr_comment">// Running it for order 5 gives the following order conditions</em>
<a class="jxr_linenumber" name="L91" href="#L91">91</a>          <em class="jxr_comment">// for an interpolator:</em>
<a class="jxr_linenumber" name="L92" href="#L92">92</a>          <em class="jxr_comment">// order 1 conditions</em>
<a class="jxr_linenumber" name="L93" href="#L93">93</a>          <em class="jxr_comment">// \sum_{i=1}^{i=s}\left(b_{i} \right) =1</em>
<a class="jxr_linenumber" name="L94" href="#L94">94</a>          <em class="jxr_comment">// order 2 conditions</em>
<a class="jxr_linenumber" name="L95" href="#L95">95</a>          <em class="jxr_comment">// \sum_{i=1}^{i=s}\left(b_{i} c_{i}\right) = \frac{\theta}{2}</em>
<a class="jxr_linenumber" name="L96" href="#L96">96</a>          <em class="jxr_comment">// order 3 conditions</em>
<a class="jxr_linenumber" name="L97" href="#L97">97</a>          <em class="jxr_comment">// \sum_{i=2}^{i=s}\left(b_{i} \sum_{j=1}^{j=i-1}{\left(a_{i,j} c_{j} \right)}\right) = \frac{\theta^{2}}{6}</em>
<a class="jxr_linenumber" name="L98" href="#L98">98</a>          <em class="jxr_comment">// \sum_{i=1}^{i=s}\left(b_{i} c_{i}^{2}\right) = \frac{\theta^{2}}{3}</em>
<a class="jxr_linenumber" name="L99" href="#L99">99</a>          <em class="jxr_comment">// order 4 conditions</em>
<a class="jxr_linenumber" name="L100" href="#L100">100</a>         <em class="jxr_comment">// \sum_{i=3}^{i=s}\left(b_{i} \sum_{j=2}^{j=i-1}{\left(a_{i,j} \sum_{k=1}^{k=j-1}{\left(a_{j,k} c_{k} \right)} \right)}\right) = \frac{\theta^{3}}{24}</em>
<a class="jxr_linenumber" name="L101" href="#L101">101</a>         <em class="jxr_comment">// \sum_{i=2}^{i=s}\left(b_{i} \sum_{j=1}^{j=i-1}{\left(a_{i,j} c_{j}^{2} \right)}\right) = \frac{\theta^{3}}{12}</em>
<a class="jxr_linenumber" name="L102" href="#L102">102</a>         <em class="jxr_comment">// \sum_{i=2}^{i=s}\left(b_{i} c_{i}\sum_{j=1}^{j=i-1}{\left(a_{i,j} c_{j} \right)}\right) = \frac{\theta^{3}}{8}</em>
<a class="jxr_linenumber" name="L103" href="#L103">103</a>         <em class="jxr_comment">// \sum_{i=1}^{i=s}\left(b_{i} c_{i}^{3}\right) = \frac{\theta^{3}}{4}</em>
<a class="jxr_linenumber" name="L104" href="#L104">104</a>         <em class="jxr_comment">// order 5 conditions</em>
<a class="jxr_linenumber" name="L105" href="#L105">105</a>         <em class="jxr_comment">// \sum_{i=4}^{i=s}\left(b_{i} \sum_{j=3}^{j=i-1}{\left(a_{i,j} \sum_{k=2}^{k=j-1}{\left(a_{j,k} \sum_{l=1}^{l=k-1}{\left(a_{k,l} c_{l} \right)} \right)} \right)}\right) = \frac{\theta^{4}}{120}</em>
<a class="jxr_linenumber" name="L106" href="#L106">106</a>         <em class="jxr_comment">// \sum_{i=3}^{i=s}\left(b_{i} \sum_{j=2}^{j=i-1}{\left(a_{i,j} \sum_{k=1}^{k=j-1}{\left(a_{j,k} c_{k}^{2} \right)} \right)}\right) = \frac{\theta^{4}}{60}</em>
<a class="jxr_linenumber" name="L107" href="#L107">107</a>         <em class="jxr_comment">// \sum_{i=3}^{i=s}\left(b_{i} \sum_{j=2}^{j=i-1}{\left(a_{i,j} c_{j}\sum_{k=1}^{k=j-1}{\left(a_{j,k} c_{k} \right)} \right)}\right) = \frac{\theta^{4}}{40}</em>
<a class="jxr_linenumber" name="L108" href="#L108">108</a>         <em class="jxr_comment">// \sum_{i=2}^{i=s}\left(b_{i} \sum_{j=1}^{j=i-1}{\left(a_{i,j} c_{j}^{3} \right)}\right) = \frac{\theta^{4}}{20}</em>
<a class="jxr_linenumber" name="L109" href="#L109">109</a>         <em class="jxr_comment">// \sum_{i=3}^{i=s}\left(b_{i} c_{i}\sum_{j=2}^{j=i-1}{\left(a_{i,j} \sum_{k=1}^{k=j-1}{\left(a_{j,k} c_{k} \right)} \right)}\right) = \frac{\theta^{4}}{30}</em>
<a class="jxr_linenumber" name="L110" href="#L110">110</a>         <em class="jxr_comment">// \sum_{i=2}^{i=s}\left(b_{i} c_{i}\sum_{j=1}^{j=i-1}{\left(a_{i,j} c_{j}^{2} \right)}\right) = \frac{\theta^{4}}{15}</em>
<a class="jxr_linenumber" name="L111" href="#L111">111</a>         <em class="jxr_comment">// \sum_{i=2}^{i=s}\left(b_{i} \left(\sum_{j=1}^{j=i-1}{\left(a_{i,j} c_{j} \right)} \right)^{2}\right) = \frac{\theta^{4}}{20}</em>
<a class="jxr_linenumber" name="L112" href="#L112">112</a>         <em class="jxr_comment">// \sum_{i=2}^{i=s}\left(b_{i} c_{i}^{2}\sum_{j=1}^{j=i-1}{\left(a_{i,j} c_{j} \right)}\right) = \frac{\theta^{4}}{10}</em>
<a class="jxr_linenumber" name="L113" href="#L113">113</a>         <em class="jxr_comment">// \sum_{i=1}^{i=s}\left(b_{i} c_{i}^{4}\right) = \frac{\theta^{4}}{5}</em>
<a class="jxr_linenumber" name="L114" href="#L114">114</a> 
<a class="jxr_linenumber" name="L115" href="#L115">115</a>         <em class="jxr_comment">// The a_{j,k} and c_{k} are given by the integrator Butcher arrays. What remains to solve</em>
<a class="jxr_linenumber" name="L116" href="#L116">116</a>         <em class="jxr_comment">// are the b_i for the interpolator. They are found by solving the above equations.</em>
<a class="jxr_linenumber" name="L117" href="#L117">117</a>         <em class="jxr_comment">// For a given interpolator, some equations are redundant, so in our case when we select</em>
<a class="jxr_linenumber" name="L118" href="#L118">118</a>         <em class="jxr_comment">// all equations from order 1 to 4, we still don't have enough independent equations</em>
<a class="jxr_linenumber" name="L119" href="#L119">119</a>         <em class="jxr_comment">// to solve from b_1 to b_7. We need to also select one equation from order 5. Here,</em>
<a class="jxr_linenumber" name="L120" href="#L120">120</a>         <em class="jxr_comment">// we selected the last equation. It appears this choice implied at least the last 3 equations</em>
<a class="jxr_linenumber" name="L121" href="#L121">121</a>         <em class="jxr_comment">// are fulfilled, but some of the former ones are not, so the resulting interpolator is order 5.</em>
<a class="jxr_linenumber" name="L122" href="#L122">122</a>         <em class="jxr_comment">// At the end, we get the b_i as polynomials in theta.</em>
<a class="jxr_linenumber" name="L123" href="#L123">123</a> 
<a class="jxr_linenumber" name="L124" href="#L124">124</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> coeffDot1 =  1 + theta * ( -54            /   5.0 + theta * (   36                   + theta * ( -47                   + theta *   21)));
<a class="jxr_linenumber" name="L125" href="#L125">125</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> coeffDot2 =  0;
<a class="jxr_linenumber" name="L126" href="#L126">126</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> coeffDot3 =      theta * (-208            /  15.0 + theta * (  320            / 3.0  + theta * (-608            /  3.0 + theta *  112)));
<a class="jxr_linenumber" name="L127" href="#L127">127</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> coeffDot4 =      theta * ( 324            /  25.0 + theta * ( -486            / 5.0  + theta * ( 972            /  5.0 + theta * -567           /  5.0)));
<a class="jxr_linenumber" name="L128" href="#L128">128</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> coeffDot5 =      theta * ((833 + 343 * Q) / 150.0 + theta * ((-637 - 357 * Q) / 30.0 + theta * ((392 + 287 * Q) / 15.0 + theta * (-49 - 49 * Q) /  5.0)));
<a class="jxr_linenumber" name="L129" href="#L129">129</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> coeffDot6 =      theta * ((833 - 343 * Q) / 150.0 + theta * ((-637 + 357 * Q) / 30.0 + theta * ((392 - 287 * Q) / 15.0 + theta * (-49 + 49 * Q) /  5.0)));
<a class="jxr_linenumber" name="L130" href="#L130">130</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> coeffDot7 =      theta * (   3            /   5.0 + theta * (   -3                   + theta *     3));
<a class="jxr_linenumber" name="L131" href="#L131">131</a> 
<a class="jxr_linenumber" name="L132" href="#L132">132</a>         <strong class="jxr_keyword">if</strong> ((previousState != <strong class="jxr_keyword">null</strong>) &amp;&amp; (theta &lt;= 0.5)) {
<a class="jxr_linenumber" name="L133" href="#L133">133</a> 
<a class="jxr_linenumber" name="L134" href="#L134">134</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> coeff1    =  1 + theta * ( -27            /   5.0 + theta * (   12                   + theta * ( -47            /  4.0 + theta *   21           /  5.0)));
<a class="jxr_linenumber" name="L135" href="#L135">135</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> coeff2    =  0;
<a class="jxr_linenumber" name="L136" href="#L136">136</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> coeff3    =      theta * (-104            /  15.0 + theta * (  320            / 9.0  + theta * (-152            /  3.0 + theta *  112           /  5.0)));
<a class="jxr_linenumber" name="L137" href="#L137">137</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> coeff4    =      theta * ( 162            /  25.0 + theta * ( -162            / 5.0  + theta * ( 243            /  5.0 + theta * -567           / 25.0)));
<a class="jxr_linenumber" name="L138" href="#L138">138</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> coeff5    =      theta * ((833 + 343 * Q) / 300.0 + theta * ((-637 - 357 * Q) / 90.0 + theta * ((392 + 287 * Q) / 60.0 + theta * (-49 - 49 * Q) / 25.0)));
<a class="jxr_linenumber" name="L139" href="#L139">139</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> coeff6    =      theta * ((833 - 343 * Q) / 300.0 + theta * ((-637 + 357 * Q) / 90.0 + theta * ((392 - 287 * Q) / 60.0 + theta * (-49 + 49 * Q) / 25.0)));
<a class="jxr_linenumber" name="L140" href="#L140">140</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> coeff7    =      theta * (   3            /  10.0 + theta * (   -1                   + theta * (   3            /  4.0)));
<a class="jxr_linenumber" name="L141" href="#L141">141</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; interpolatedState.length; ++i) {
<a class="jxr_linenumber" name="L142" href="#L142">142</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> yDot1 = yDotK[0][i];
<a class="jxr_linenumber" name="L143" href="#L143">143</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> yDot2 = yDotK[1][i];
<a class="jxr_linenumber" name="L144" href="#L144">144</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> yDot3 = yDotK[2][i];
<a class="jxr_linenumber" name="L145" href="#L145">145</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> yDot4 = yDotK[3][i];
<a class="jxr_linenumber" name="L146" href="#L146">146</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> yDot5 = yDotK[4][i];
<a class="jxr_linenumber" name="L147" href="#L147">147</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> yDot6 = yDotK[5][i];
<a class="jxr_linenumber" name="L148" href="#L148">148</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> yDot7 = yDotK[6][i];
<a class="jxr_linenumber" name="L149" href="#L149">149</a>                 interpolatedState[i] = previousState[i] +
<a class="jxr_linenumber" name="L150" href="#L150">150</a>                         theta * h * (coeff1 * yDot1 + coeff2 * yDot2 + coeff3 * yDot3 +
<a class="jxr_linenumber" name="L151" href="#L151">151</a>                                      coeff4 * yDot4 + coeff5 * yDot5 + coeff6 * yDot6 + coeff7 * yDot7);
<a class="jxr_linenumber" name="L152" href="#L152">152</a>                 interpolatedDerivatives[i] = coeffDot1 * yDot1 + coeffDot2 * yDot2 + coeffDot3 * yDot3 +
<a class="jxr_linenumber" name="L153" href="#L153">153</a>                         coeffDot4 * yDot4 + coeffDot5 * yDot5 + coeffDot6 * yDot6 + coeffDot7 * yDot7;
<a class="jxr_linenumber" name="L154" href="#L154">154</a>             }
<a class="jxr_linenumber" name="L155" href="#L155">155</a>         } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L156" href="#L156">156</a> 
<a class="jxr_linenumber" name="L157" href="#L157">157</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> coeff1    =  -1 /  20.0 + theta * (  19            /  20.0 + theta * (  -89             /  20.0  + theta * (   151            /  20.0 + theta *  -21           /   5.0)));
<a class="jxr_linenumber" name="L158" href="#L158">158</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> coeff2    =  0;
<a class="jxr_linenumber" name="L159" href="#L159">159</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> coeff3    = -16 /  45.0 + theta * ( -16            /  45.0 + theta * ( -328             /  45.0  + theta * (   424            /  15.0 + theta * -112           /   5.0)));
<a class="jxr_linenumber" name="L160" href="#L160">160</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> coeff4    =               theta * (                          theta * (  162             /  25.0  + theta * (  -648            /  25.0 + theta *  567           /  25.0)));
<a class="jxr_linenumber" name="L161" href="#L161">161</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> coeff5    = -49 / 180.0 + theta * ( -49            / 180.0 + theta * ((2254 + 1029 * Q) / 900.0  + theta * ((-1372 - 847 * Q) / 300.0 + theta * ( 49 + 49 * Q) /  25.0)));
<a class="jxr_linenumber" name="L162" href="#L162">162</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> coeff6    = -49 / 180.0 + theta * ( -49            / 180.0 + theta * ((2254 - 1029 * Q) / 900.0  + theta * ((-1372 + 847 * Q) / 300.0 + theta * ( 49 - 49 * Q) /  25.0)));
<a class="jxr_linenumber" name="L163" href="#L163">163</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> coeff7    =  -1 /  20.0 + theta * (  -1            /  20.0 + theta * (    1             /   4.0  + theta * (    -3            /   4.0)));
<a class="jxr_linenumber" name="L164" href="#L164">164</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; interpolatedState.length; ++i) {
<a class="jxr_linenumber" name="L165" href="#L165">165</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> yDot1 = yDotK[0][i];
<a class="jxr_linenumber" name="L166" href="#L166">166</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> yDot2 = yDotK[1][i];
<a class="jxr_linenumber" name="L167" href="#L167">167</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> yDot3 = yDotK[2][i];
<a class="jxr_linenumber" name="L168" href="#L168">168</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> yDot4 = yDotK[3][i];
<a class="jxr_linenumber" name="L169" href="#L169">169</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> yDot5 = yDotK[4][i];
<a class="jxr_linenumber" name="L170" href="#L170">170</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> yDot6 = yDotK[5][i];
<a class="jxr_linenumber" name="L171" href="#L171">171</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> yDot7 = yDotK[6][i];
<a class="jxr_linenumber" name="L172" href="#L172">172</a>                 interpolatedState[i] = currentState[i] +
<a class="jxr_linenumber" name="L173" href="#L173">173</a>                         oneMinusThetaH * (coeff1 * yDot1 + coeff2 * yDot2 + coeff3 * yDot3 +
<a class="jxr_linenumber" name="L174" href="#L174">174</a>                                           coeff4 * yDot4 + coeff5 * yDot5 + coeff6 * yDot6 + coeff7 * yDot7);
<a class="jxr_linenumber" name="L175" href="#L175">175</a>                 interpolatedDerivatives[i] = coeffDot1 * yDot1 + coeffDot2 * yDot2 + coeffDot3 * yDot3 +
<a class="jxr_linenumber" name="L176" href="#L176">176</a>                         coeffDot4 * yDot4 + coeffDot5 * yDot5 + coeffDot6 * yDot6 + coeffDot7 * yDot7;
<a class="jxr_linenumber" name="L177" href="#L177">177</a>             }
<a class="jxr_linenumber" name="L178" href="#L178">178</a>         }
<a class="jxr_linenumber" name="L179" href="#L179">179</a> 
<a class="jxr_linenumber" name="L180" href="#L180">180</a>     }
<a class="jxr_linenumber" name="L181" href="#L181">181</a> 
<a class="jxr_linenumber" name="L182" href="#L182">182</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2003&#x2013;2016 <a href="http://www.apache.org/">The Apache Software Foundation</a>. All rights reserved.</div>
</body>
</html>
