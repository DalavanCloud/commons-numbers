<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>GLSMultipleLinearRegressionTest xref</title>
<link type="text/css" rel="stylesheet" href="../../../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../testapidocs/org/apache/commons/math3/stat/regression/GLSMultipleLinearRegressionTest.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Licensed to the Apache Software Foundation (ASF) under one or more</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> * contributor license agreements.  See the NOTICE file distributed with</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * this work for additional information regarding copyright ownership.</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * The ASF licenses this file to You under the Apache License, Version 2.0</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * (the "License"); you may not use this file except in compliance with</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> * the License.  You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *      <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">package</strong> org.apache.commons.math3.stat.regression;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <strong class="jxr_keyword">import</strong> org.junit.Assert;
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> org.junit.Before;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> org.junit.Test;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.TestUtils;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.linear.MatrixUtils;
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.linear.RealMatrix;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.linear.RealVector;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.random.CorrelatedRandomVectorGenerator;
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.random.JDKRandomGenerator;
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.random.GaussianRandomGenerator;
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.random.RandomGenerator;
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.stat.correlation.Covariance;
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../../org/apache/commons/math3/stat/regression/GLSMultipleLinearRegressionTest.html">GLSMultipleLinearRegressionTest</a> <strong class="jxr_keyword">extends</strong> <a href="../../../../../../org/apache/commons/math3/stat/regression/MultipleLinearRegressionAbstractTest.html">MultipleLinearRegressionAbstractTest</a> {
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  
<a class="jxr_linenumber" name="L35" href="#L35">35</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">double</strong>[] y;
<a class="jxr_linenumber" name="L36" href="#L36">36</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">double</strong>[][] x;
<a class="jxr_linenumber" name="L37" href="#L37">37</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">double</strong>[][] omega;
<a class="jxr_linenumber" name="L38" href="#L38">38</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">double</strong>[] longley = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {
<a class="jxr_linenumber" name="L39" href="#L39">39</a>              60323,83.0,234289,2356,1590,107608,1947,
<a class="jxr_linenumber" name="L40" href="#L40">40</a>              61122,88.5,259426,2325,1456,108632,1948,
<a class="jxr_linenumber" name="L41" href="#L41">41</a>              60171,88.2,258054,3682,1616,109773,1949,
<a class="jxr_linenumber" name="L42" href="#L42">42</a>              61187,89.5,284599,3351,1650,110929,1950,
<a class="jxr_linenumber" name="L43" href="#L43">43</a>              63221,96.2,328975,2099,3099,112075,1951,
<a class="jxr_linenumber" name="L44" href="#L44">44</a>              63639,98.1,346999,1932,3594,113270,1952,
<a class="jxr_linenumber" name="L45" href="#L45">45</a>              64989,99.0,365385,1870,3547,115094,1953,
<a class="jxr_linenumber" name="L46" href="#L46">46</a>              63761,100.0,363112,3578,3350,116219,1954,
<a class="jxr_linenumber" name="L47" href="#L47">47</a>              66019,101.2,397469,2904,3048,117388,1955,
<a class="jxr_linenumber" name="L48" href="#L48">48</a>              67857,104.6,419180,2822,2857,118734,1956,
<a class="jxr_linenumber" name="L49" href="#L49">49</a>              68169,108.4,442769,2936,2798,120445,1957,
<a class="jxr_linenumber" name="L50" href="#L50">50</a>              66513,110.8,444546,4681,2637,121950,1958,
<a class="jxr_linenumber" name="L51" href="#L51">51</a>              68655,112.6,482704,3813,2552,123366,1959,
<a class="jxr_linenumber" name="L52" href="#L52">52</a>              69564,114.2,502601,3931,2514,125368,1960,
<a class="jxr_linenumber" name="L53" href="#L53">53</a>              69331,115.7,518173,4806,2572,127852,1961,
<a class="jxr_linenumber" name="L54" href="#L54">54</a>              70551,116.9,554894,4007,2827,130081,1962
<a class="jxr_linenumber" name="L55" href="#L55">55</a>          };
<a class="jxr_linenumber" name="L56" href="#L56">56</a>  
<a class="jxr_linenumber" name="L57" href="#L57">57</a>      @Before
<a class="jxr_linenumber" name="L58" href="#L58">58</a>      @Override
<a class="jxr_linenumber" name="L59" href="#L59">59</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> setUp(){
<a class="jxr_linenumber" name="L60" href="#L60">60</a>          y = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{11.0, 12.0, 13.0, 14.0, 15.0, 16.0};
<a class="jxr_linenumber" name="L61" href="#L61">61</a>          x = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[6][];
<a class="jxr_linenumber" name="L62" href="#L62">62</a>          x[0] = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{0, 0, 0, 0, 0};
<a class="jxr_linenumber" name="L63" href="#L63">63</a>          x[1] = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{2.0, 0, 0, 0, 0};
<a class="jxr_linenumber" name="L64" href="#L64">64</a>          x[2] = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{0, 3.0, 0, 0, 0};
<a class="jxr_linenumber" name="L65" href="#L65">65</a>          x[3] = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{0, 0, 4.0, 0, 0};
<a class="jxr_linenumber" name="L66" href="#L66">66</a>          x[4] = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{0, 0, 0, 5.0, 0};
<a class="jxr_linenumber" name="L67" href="#L67">67</a>          x[5] = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{0, 0, 0, 0, 6.0};
<a class="jxr_linenumber" name="L68" href="#L68">68</a>          omega = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[6][];
<a class="jxr_linenumber" name="L69" href="#L69">69</a>          omega[0] = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{1.0, 0, 0, 0, 0, 0};
<a class="jxr_linenumber" name="L70" href="#L70">70</a>          omega[1] = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{0, 2.0, 0, 0, 0, 0};
<a class="jxr_linenumber" name="L71" href="#L71">71</a>          omega[2] = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{0, 0, 3.0, 0, 0, 0};
<a class="jxr_linenumber" name="L72" href="#L72">72</a>          omega[3] = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{0, 0, 0, 4.0, 0, 0};
<a class="jxr_linenumber" name="L73" href="#L73">73</a>          omega[4] = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{0, 0, 0, 0, 5.0, 0};
<a class="jxr_linenumber" name="L74" href="#L74">74</a>          omega[5] = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{0, 0, 0, 0, 0, 6.0};
<a class="jxr_linenumber" name="L75" href="#L75">75</a>          <strong class="jxr_keyword">super</strong>.setUp();
<a class="jxr_linenumber" name="L76" href="#L76">76</a>      }
<a class="jxr_linenumber" name="L77" href="#L77">77</a>  
<a class="jxr_linenumber" name="L78" href="#L78">78</a>      @Test(expected=IllegalArgumentException.<strong class="jxr_keyword">class</strong>)
<a class="jxr_linenumber" name="L79" href="#L79">79</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> cannotAddXSampleData() {
<a class="jxr_linenumber" name="L80" href="#L80">80</a>          createRegression().newSampleData(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{}, <strong class="jxr_keyword">null</strong>, <strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L81" href="#L81">81</a>      }
<a class="jxr_linenumber" name="L82" href="#L82">82</a>  
<a class="jxr_linenumber" name="L83" href="#L83">83</a>      @Test(expected=IllegalArgumentException.<strong class="jxr_keyword">class</strong>)
<a class="jxr_linenumber" name="L84" href="#L84">84</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> cannotAddNullYSampleData() {
<a class="jxr_linenumber" name="L85" href="#L85">85</a>          createRegression().newSampleData(<strong class="jxr_keyword">null</strong>, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[][]{}, <strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L86" href="#L86">86</a>      }
<a class="jxr_linenumber" name="L87" href="#L87">87</a>  
<a class="jxr_linenumber" name="L88" href="#L88">88</a>      @Test(expected=IllegalArgumentException.<strong class="jxr_keyword">class</strong>)
<a class="jxr_linenumber" name="L89" href="#L89">89</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> cannotAddSampleDataWithSizeMismatch() {
<a class="jxr_linenumber" name="L90" href="#L90">90</a>          <strong class="jxr_keyword">double</strong>[] y = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{1.0, 2.0};
<a class="jxr_linenumber" name="L91" href="#L91">91</a>          <strong class="jxr_keyword">double</strong>[][] x = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[1][];
<a class="jxr_linenumber" name="L92" href="#L92">92</a>          x[0] = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{1.0, 0};
<a class="jxr_linenumber" name="L93" href="#L93">93</a>          createRegression().newSampleData(y, x, <strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L94" href="#L94">94</a>      }
<a class="jxr_linenumber" name="L95" href="#L95">95</a>  
<a class="jxr_linenumber" name="L96" href="#L96">96</a>      @Test(expected=IllegalArgumentException.<strong class="jxr_keyword">class</strong>)
<a class="jxr_linenumber" name="L97" href="#L97">97</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> cannotAddNullCovarianceData() {
<a class="jxr_linenumber" name="L98" href="#L98">98</a>          createRegression().newSampleData(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{}, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[][]{}, <strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L99" href="#L99">99</a>      }
<a class="jxr_linenumber" name="L100" href="#L100">100</a> 
<a class="jxr_linenumber" name="L101" href="#L101">101</a>     @Test(expected=IllegalArgumentException.<strong class="jxr_keyword">class</strong>)
<a class="jxr_linenumber" name="L102" href="#L102">102</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> notEnoughData() {
<a class="jxr_linenumber" name="L103" href="#L103">103</a>         <strong class="jxr_keyword">double</strong>[]   reducedY = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[y.length - 1];
<a class="jxr_linenumber" name="L104" href="#L104">104</a>         <strong class="jxr_keyword">double</strong>[][] reducedX = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[x.length - 1][];
<a class="jxr_linenumber" name="L105" href="#L105">105</a>         <strong class="jxr_keyword">double</strong>[][] reducedO = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[omega.length - 1][];
<a class="jxr_linenumber" name="L106" href="#L106">106</a>         System.arraycopy(y,     0, reducedY, 0, reducedY.length);
<a class="jxr_linenumber" name="L107" href="#L107">107</a>         System.arraycopy(x,     0, reducedX, 0, reducedX.length);
<a class="jxr_linenumber" name="L108" href="#L108">108</a>         System.arraycopy(omega, 0, reducedO, 0, reducedO.length);
<a class="jxr_linenumber" name="L109" href="#L109">109</a>         createRegression().newSampleData(reducedY, reducedX, reducedO);
<a class="jxr_linenumber" name="L110" href="#L110">110</a>     }
<a class="jxr_linenumber" name="L111" href="#L111">111</a> 
<a class="jxr_linenumber" name="L112" href="#L112">112</a>     @Test(expected=IllegalArgumentException.<strong class="jxr_keyword">class</strong>)
<a class="jxr_linenumber" name="L113" href="#L113">113</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> cannotAddCovarianceDataWithSampleSizeMismatch() {
<a class="jxr_linenumber" name="L114" href="#L114">114</a>         <strong class="jxr_keyword">double</strong>[] y = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{1.0, 2.0};
<a class="jxr_linenumber" name="L115" href="#L115">115</a>         <strong class="jxr_keyword">double</strong>[][] x = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[2][];
<a class="jxr_linenumber" name="L116" href="#L116">116</a>         x[0] = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{1.0, 0};
<a class="jxr_linenumber" name="L117" href="#L117">117</a>         x[1] = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{0, 1.0};
<a class="jxr_linenumber" name="L118" href="#L118">118</a>         <strong class="jxr_keyword">double</strong>[][] omega = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[1][];
<a class="jxr_linenumber" name="L119" href="#L119">119</a>         omega[0] = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{1.0, 0};
<a class="jxr_linenumber" name="L120" href="#L120">120</a>         createRegression().newSampleData(y, x, omega);
<a class="jxr_linenumber" name="L121" href="#L121">121</a>     }
<a class="jxr_linenumber" name="L122" href="#L122">122</a> 
<a class="jxr_linenumber" name="L123" href="#L123">123</a>     @Test(expected=IllegalArgumentException.<strong class="jxr_keyword">class</strong>)
<a class="jxr_linenumber" name="L124" href="#L124">124</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> cannotAddCovarianceDataThatIsNotSquare() {
<a class="jxr_linenumber" name="L125" href="#L125">125</a>         <strong class="jxr_keyword">double</strong>[] y = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{1.0, 2.0};
<a class="jxr_linenumber" name="L126" href="#L126">126</a>         <strong class="jxr_keyword">double</strong>[][] x = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[2][];
<a class="jxr_linenumber" name="L127" href="#L127">127</a>         x[0] = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{1.0, 0};
<a class="jxr_linenumber" name="L128" href="#L128">128</a>         x[1] = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{0, 1.0};
<a class="jxr_linenumber" name="L129" href="#L129">129</a>         <strong class="jxr_keyword">double</strong>[][] omega = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[3][];
<a class="jxr_linenumber" name="L130" href="#L130">130</a>         omega[0] = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{1.0, 0};
<a class="jxr_linenumber" name="L131" href="#L131">131</a>         omega[1] = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{0, 1.0};
<a class="jxr_linenumber" name="L132" href="#L132">132</a>         omega[2] = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{0, 2.0};
<a class="jxr_linenumber" name="L133" href="#L133">133</a>         createRegression().newSampleData(y, x, omega);
<a class="jxr_linenumber" name="L134" href="#L134">134</a>     }
<a class="jxr_linenumber" name="L135" href="#L135">135</a> 
<a class="jxr_linenumber" name="L136" href="#L136">136</a>     @Override
<a class="jxr_linenumber" name="L137" href="#L137">137</a>     <strong class="jxr_keyword">protected</strong> GLSMultipleLinearRegression createRegression() {
<a class="jxr_linenumber" name="L138" href="#L138">138</a>         GLSMultipleLinearRegression regression = <strong class="jxr_keyword">new</strong> GLSMultipleLinearRegression();
<a class="jxr_linenumber" name="L139" href="#L139">139</a>         regression.newSampleData(y, x, omega);
<a class="jxr_linenumber" name="L140" href="#L140">140</a>         <strong class="jxr_keyword">return</strong> regression;
<a class="jxr_linenumber" name="L141" href="#L141">141</a>     }
<a class="jxr_linenumber" name="L142" href="#L142">142</a> 
<a class="jxr_linenumber" name="L143" href="#L143">143</a>     @Override
<a class="jxr_linenumber" name="L144" href="#L144">144</a>     <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">int</strong> getNumberOfRegressors() {
<a class="jxr_linenumber" name="L145" href="#L145">145</a>         <strong class="jxr_keyword">return</strong> x[0].length + 1;
<a class="jxr_linenumber" name="L146" href="#L146">146</a>     }
<a class="jxr_linenumber" name="L147" href="#L147">147</a> 
<a class="jxr_linenumber" name="L148" href="#L148">148</a>     @Override
<a class="jxr_linenumber" name="L149" href="#L149">149</a>     <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">int</strong> getSampleSize() {
<a class="jxr_linenumber" name="L150" href="#L150">150</a>         <strong class="jxr_keyword">return</strong> y.length;
<a class="jxr_linenumber" name="L151" href="#L151">151</a>     }
<a class="jxr_linenumber" name="L152" href="#L152">152</a> 
<a class="jxr_linenumber" name="L153" href="#L153">153</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L154" href="#L154">154</a> <em class="jxr_javadoccomment">     * test calculateYVariance</em>
<a class="jxr_linenumber" name="L155" href="#L155">155</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L156" href="#L156">156</a>     @Test
<a class="jxr_linenumber" name="L157" href="#L157">157</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testYVariance() {
<a class="jxr_linenumber" name="L158" href="#L158">158</a> 
<a class="jxr_linenumber" name="L159" href="#L159">159</a>         <em class="jxr_comment">// assumes: y = new double[]{11.0, 12.0, 13.0, 14.0, 15.0, 16.0};</em>
<a class="jxr_linenumber" name="L160" href="#L160">160</a> 
<a class="jxr_linenumber" name="L161" href="#L161">161</a>         GLSMultipleLinearRegression model = <strong class="jxr_keyword">new</strong> GLSMultipleLinearRegression();
<a class="jxr_linenumber" name="L162" href="#L162">162</a>         model.newSampleData(y, x, omega);
<a class="jxr_linenumber" name="L163" href="#L163">163</a>         TestUtils.assertEquals(model.calculateYVariance(), 3.5, 0);
<a class="jxr_linenumber" name="L164" href="#L164">164</a>     }
<a class="jxr_linenumber" name="L165" href="#L165">165</a> 
<a class="jxr_linenumber" name="L166" href="#L166">166</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L167" href="#L167">167</a> <em class="jxr_javadoccomment">     * Verifies that setting X, Y and covariance separately has the same effect as newSample(X,Y,cov).</em>
<a class="jxr_linenumber" name="L168" href="#L168">168</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L169" href="#L169">169</a>     @Test
<a class="jxr_linenumber" name="L170" href="#L170">170</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testNewSample2() {
<a class="jxr_linenumber" name="L171" href="#L171">171</a>         <strong class="jxr_keyword">double</strong>[] y = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {1, 2, 3, 4};
<a class="jxr_linenumber" name="L172" href="#L172">172</a>         <strong class="jxr_keyword">double</strong>[][] x = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[][] {
<a class="jxr_linenumber" name="L173" href="#L173">173</a>           {19, 22, 33},
<a class="jxr_linenumber" name="L174" href="#L174">174</a>           {20, 30, 40},
<a class="jxr_linenumber" name="L175" href="#L175">175</a>           {25, 35, 45},
<a class="jxr_linenumber" name="L176" href="#L176">176</a>           {27, 37, 47}
<a class="jxr_linenumber" name="L177" href="#L177">177</a>         };
<a class="jxr_linenumber" name="L178" href="#L178">178</a>         <strong class="jxr_keyword">double</strong>[][] covariance = MatrixUtils.createRealIdentityMatrix(4).scalarMultiply(2).getData();
<a class="jxr_linenumber" name="L179" href="#L179">179</a>         GLSMultipleLinearRegression regression = <strong class="jxr_keyword">new</strong> GLSMultipleLinearRegression();
<a class="jxr_linenumber" name="L180" href="#L180">180</a>         regression.newSampleData(y, x, covariance);
<a class="jxr_linenumber" name="L181" href="#L181">181</a>         RealMatrix combinedX = regression.getX().copy();
<a class="jxr_linenumber" name="L182" href="#L182">182</a>         RealVector combinedY = regression.getY().copy();
<a class="jxr_linenumber" name="L183" href="#L183">183</a>         RealMatrix combinedCovInv = regression.getOmegaInverse();
<a class="jxr_linenumber" name="L184" href="#L184">184</a>         regression.newXSampleData(x);
<a class="jxr_linenumber" name="L185" href="#L185">185</a>         regression.newYSampleData(y);
<a class="jxr_linenumber" name="L186" href="#L186">186</a>         Assert.assertEquals(combinedX, regression.getX());
<a class="jxr_linenumber" name="L187" href="#L187">187</a>         Assert.assertEquals(combinedY, regression.getY());
<a class="jxr_linenumber" name="L188" href="#L188">188</a>         Assert.assertEquals(combinedCovInv, regression.getOmegaInverse());
<a class="jxr_linenumber" name="L189" href="#L189">189</a>     }
<a class="jxr_linenumber" name="L190" href="#L190">190</a> 
<a class="jxr_linenumber" name="L191" href="#L191">191</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L192" href="#L192">192</a> <em class="jxr_javadoccomment">     * Verifies that GLS with identity covariance matrix gives the same results</em>
<a class="jxr_linenumber" name="L193" href="#L193">193</a> <em class="jxr_javadoccomment">     * as OLS.</em>
<a class="jxr_linenumber" name="L194" href="#L194">194</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L195" href="#L195">195</a>     @Test
<a class="jxr_linenumber" name="L196" href="#L196">196</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testGLSOLSConsistency() {
<a class="jxr_linenumber" name="L197" href="#L197">197</a>         RealMatrix identityCov = MatrixUtils.createRealIdentityMatrix(16);
<a class="jxr_linenumber" name="L198" href="#L198">198</a>         GLSMultipleLinearRegression glsModel = <strong class="jxr_keyword">new</strong> GLSMultipleLinearRegression();
<a class="jxr_linenumber" name="L199" href="#L199">199</a>         OLSMultipleLinearRegression olsModel = <strong class="jxr_keyword">new</strong> OLSMultipleLinearRegression();
<a class="jxr_linenumber" name="L200" href="#L200">200</a>         glsModel.newSampleData(longley, 16, 6);
<a class="jxr_linenumber" name="L201" href="#L201">201</a>         olsModel.newSampleData(longley, 16, 6);
<a class="jxr_linenumber" name="L202" href="#L202">202</a>         glsModel.newCovarianceData(identityCov.getData());
<a class="jxr_linenumber" name="L203" href="#L203">203</a>         <strong class="jxr_keyword">double</strong>[] olsBeta = olsModel.calculateBeta().toArray();
<a class="jxr_linenumber" name="L204" href="#L204">204</a>         <strong class="jxr_keyword">double</strong>[] glsBeta = glsModel.calculateBeta().toArray();
<a class="jxr_linenumber" name="L205" href="#L205">205</a>         <em class="jxr_comment">// TODO:  Should have assertRelativelyEquals(double[], double[], eps) in TestUtils</em>
<a class="jxr_linenumber" name="L206" href="#L206">206</a>         <em class="jxr_comment">//        Should also add RealVector and RealMatrix versions</em>
<a class="jxr_linenumber" name="L207" href="#L207">207</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; olsBeta.length; i++) {
<a class="jxr_linenumber" name="L208" href="#L208">208</a>             TestUtils.assertRelativelyEquals(olsBeta[i], glsBeta[i], 10E-7);
<a class="jxr_linenumber" name="L209" href="#L209">209</a>         }
<a class="jxr_linenumber" name="L210" href="#L210">210</a>     }
<a class="jxr_linenumber" name="L211" href="#L211">211</a> 
<a class="jxr_linenumber" name="L212" href="#L212">212</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L213" href="#L213">213</a> <em class="jxr_javadoccomment">     * Generate an error covariance matrix and sample data representing models</em>
<a class="jxr_linenumber" name="L214" href="#L214">214</a> <em class="jxr_javadoccomment">     * with this error structure. Then verify that GLS estimated coefficients,</em>
<a class="jxr_linenumber" name="L215" href="#L215">215</a> <em class="jxr_javadoccomment">     * on average, perform better than OLS.</em>
<a class="jxr_linenumber" name="L216" href="#L216">216</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L217" href="#L217">217</a>     @Test
<a class="jxr_linenumber" name="L218" href="#L218">218</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testGLSEfficiency() {
<a class="jxr_linenumber" name="L219" href="#L219">219</a>         RandomGenerator rg = <strong class="jxr_keyword">new</strong> JDKRandomGenerator();
<a class="jxr_linenumber" name="L220" href="#L220">220</a>         rg.setSeed(200);  <em class="jxr_comment">// Seed has been selected to generate non-trivial covariance</em>
<a class="jxr_linenumber" name="L221" href="#L221">221</a> 
<a class="jxr_linenumber" name="L222" href="#L222">222</a>         <em class="jxr_comment">// Assume model has 16 observations (will use Longley data).  Start by generating</em>
<a class="jxr_linenumber" name="L223" href="#L223">223</a>         <em class="jxr_comment">// non-constant variances for the 16 error terms.</em>
<a class="jxr_linenumber" name="L224" href="#L224">224</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> nObs = 16;
<a class="jxr_linenumber" name="L225" href="#L225">225</a>         <strong class="jxr_keyword">double</strong>[] sigma = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[nObs];
<a class="jxr_linenumber" name="L226" href="#L226">226</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; nObs; i++) {
<a class="jxr_linenumber" name="L227" href="#L227">227</a>             sigma[i] = 10 * rg.nextDouble();
<a class="jxr_linenumber" name="L228" href="#L228">228</a>         }
<a class="jxr_linenumber" name="L229" href="#L229">229</a> 
<a class="jxr_linenumber" name="L230" href="#L230">230</a>         <em class="jxr_comment">// Now generate 1000 error vectors to use to estimate the covariance matrix</em>
<a class="jxr_linenumber" name="L231" href="#L231">231</a>         <em class="jxr_comment">// Columns are draws on N(0, sigma[col])</em>
<a class="jxr_linenumber" name="L232" href="#L232">232</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> numSeeds = 1000;
<a class="jxr_linenumber" name="L233" href="#L233">233</a>         RealMatrix errorSeeds = MatrixUtils.createRealMatrix(numSeeds, nObs);
<a class="jxr_linenumber" name="L234" href="#L234">234</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; numSeeds; i++) {
<a class="jxr_linenumber" name="L235" href="#L235">235</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = 0; j &lt; nObs; j++) {
<a class="jxr_linenumber" name="L236" href="#L236">236</a>                 errorSeeds.setEntry(i, j, rg.nextGaussian() * sigma[j]);
<a class="jxr_linenumber" name="L237" href="#L237">237</a>             }
<a class="jxr_linenumber" name="L238" href="#L238">238</a>         }
<a class="jxr_linenumber" name="L239" href="#L239">239</a> 
<a class="jxr_linenumber" name="L240" href="#L240">240</a>         <em class="jxr_comment">// Get covariance matrix for columns</em>
<a class="jxr_linenumber" name="L241" href="#L241">241</a>         RealMatrix cov = (<strong class="jxr_keyword">new</strong> Covariance(errorSeeds)).getCovarianceMatrix();
<a class="jxr_linenumber" name="L242" href="#L242">242</a> 
<a class="jxr_linenumber" name="L243" href="#L243">243</a>         <em class="jxr_comment">// Create a CorrelatedRandomVectorGenerator to use to generate correlated errors</em>
<a class="jxr_linenumber" name="L244" href="#L244">244</a>         GaussianRandomGenerator rawGenerator = <strong class="jxr_keyword">new</strong> GaussianRandomGenerator(rg);
<a class="jxr_linenumber" name="L245" href="#L245">245</a>         <strong class="jxr_keyword">double</strong>[] errorMeans = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[nObs];  <em class="jxr_comment">// Counting on init to 0 here</em>
<a class="jxr_linenumber" name="L246" href="#L246">246</a>         CorrelatedRandomVectorGenerator gen = <strong class="jxr_keyword">new</strong> CorrelatedRandomVectorGenerator(errorMeans, cov,
<a class="jxr_linenumber" name="L247" href="#L247">247</a>          1.0e-12 * cov.getNorm(), rawGenerator);
<a class="jxr_linenumber" name="L248" href="#L248">248</a> 
<a class="jxr_linenumber" name="L249" href="#L249">249</a>         <em class="jxr_comment">// Now start generating models.  Use Longley X matrix on LHS</em>
<a class="jxr_linenumber" name="L250" href="#L250">250</a>         <em class="jxr_comment">// and Longley OLS beta vector as "true" beta.  Generate</em>
<a class="jxr_linenumber" name="L251" href="#L251">251</a>         <em class="jxr_comment">// Y values by XB + u where u is a CorrelatedRandomVector generated</em>
<a class="jxr_linenumber" name="L252" href="#L252">252</a>         <em class="jxr_comment">// from cov.</em>
<a class="jxr_linenumber" name="L253" href="#L253">253</a>         OLSMultipleLinearRegression ols = <strong class="jxr_keyword">new</strong> OLSMultipleLinearRegression();
<a class="jxr_linenumber" name="L254" href="#L254">254</a>         ols.newSampleData(longley, nObs, 6);
<a class="jxr_linenumber" name="L255" href="#L255">255</a>         <strong class="jxr_keyword">final</strong> RealVector b = ols.calculateBeta().copy();
<a class="jxr_linenumber" name="L256" href="#L256">256</a>         <strong class="jxr_keyword">final</strong> RealMatrix x = ols.getX().copy();
<a class="jxr_linenumber" name="L257" href="#L257">257</a> 
<a class="jxr_linenumber" name="L258" href="#L258">258</a>         <em class="jxr_comment">// Create a GLS model to reuse</em>
<a class="jxr_linenumber" name="L259" href="#L259">259</a>         GLSMultipleLinearRegression gls = <strong class="jxr_keyword">new</strong> GLSMultipleLinearRegression();
<a class="jxr_linenumber" name="L260" href="#L260">260</a>         gls.newSampleData(longley, nObs, 6);
<a class="jxr_linenumber" name="L261" href="#L261">261</a>         gls.newCovarianceData(cov.getData());
<a class="jxr_linenumber" name="L262" href="#L262">262</a> 
<a class="jxr_linenumber" name="L263" href="#L263">263</a>         <em class="jxr_comment">// Create aggregators for stats measuring model performance</em>
<a class="jxr_linenumber" name="L264" href="#L264">264</a>         DescriptiveStatistics olsBetaStats = <strong class="jxr_keyword">new</strong> DescriptiveStatistics();
<a class="jxr_linenumber" name="L265" href="#L265">265</a>         DescriptiveStatistics glsBetaStats = <strong class="jxr_keyword">new</strong> DescriptiveStatistics();
<a class="jxr_linenumber" name="L266" href="#L266">266</a> 
<a class="jxr_linenumber" name="L267" href="#L267">267</a>         <em class="jxr_comment">// Generate Y vectors for 10000 models, estimate GLS and OLS and</em>
<a class="jxr_linenumber" name="L268" href="#L268">268</a>         <em class="jxr_comment">// Verify that OLS estimates are better</em>
<a class="jxr_linenumber" name="L269" href="#L269">269</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> nModels = 10000;
<a class="jxr_linenumber" name="L270" href="#L270">270</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; nModels; i++) {
<a class="jxr_linenumber" name="L271" href="#L271">271</a> 
<a class="jxr_linenumber" name="L272" href="#L272">272</a>             <em class="jxr_comment">// Generate y = xb + u with u cov</em>
<a class="jxr_linenumber" name="L273" href="#L273">273</a>             RealVector u = MatrixUtils.createRealVector(gen.nextVector());
<a class="jxr_linenumber" name="L274" href="#L274">274</a>             <strong class="jxr_keyword">double</strong>[] y = u.add(x.operate(b)).toArray();
<a class="jxr_linenumber" name="L275" href="#L275">275</a> 
<a class="jxr_linenumber" name="L276" href="#L276">276</a>             <em class="jxr_comment">// Estimate OLS parameters</em>
<a class="jxr_linenumber" name="L277" href="#L277">277</a>             ols.newYSampleData(y);
<a class="jxr_linenumber" name="L278" href="#L278">278</a>             RealVector olsBeta = ols.calculateBeta();
<a class="jxr_linenumber" name="L279" href="#L279">279</a> 
<a class="jxr_linenumber" name="L280" href="#L280">280</a>             <em class="jxr_comment">// Estimate GLS parameters</em>
<a class="jxr_linenumber" name="L281" href="#L281">281</a>             gls.newYSampleData(y);
<a class="jxr_linenumber" name="L282" href="#L282">282</a>             RealVector glsBeta = gls.calculateBeta();
<a class="jxr_linenumber" name="L283" href="#L283">283</a> 
<a class="jxr_linenumber" name="L284" href="#L284">284</a>             <em class="jxr_comment">// Record deviations from "true" beta</em>
<a class="jxr_linenumber" name="L285" href="#L285">285</a>             <strong class="jxr_keyword">double</strong> dist = olsBeta.getDistance(b);
<a class="jxr_linenumber" name="L286" href="#L286">286</a>             olsBetaStats.addValue(dist * dist);
<a class="jxr_linenumber" name="L287" href="#L287">287</a>             dist = glsBeta.getDistance(b);
<a class="jxr_linenumber" name="L288" href="#L288">288</a>             glsBetaStats.addValue(dist * dist);
<a class="jxr_linenumber" name="L289" href="#L289">289</a> 
<a class="jxr_linenumber" name="L290" href="#L290">290</a>         }
<a class="jxr_linenumber" name="L291" href="#L291">291</a> 
<a class="jxr_linenumber" name="L292" href="#L292">292</a>         <em class="jxr_comment">// Verify that GLS is on average more efficient, lower variance</em>
<a class="jxr_linenumber" name="L293" href="#L293">293</a>         assert(olsBetaStats.getMean() &gt; 1.5 * glsBetaStats.getMean());
<a class="jxr_linenumber" name="L294" href="#L294">294</a>         assert(olsBetaStats.getStandardDeviation() &gt; glsBetaStats.getStandardDeviation());
<a class="jxr_linenumber" name="L295" href="#L295">295</a>     }
<a class="jxr_linenumber" name="L296" href="#L296">296</a> 
<a class="jxr_linenumber" name="L297" href="#L297">297</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2003&#x2013;2016 <a href="http://www.apache.org/">The Apache Software Foundation</a>. All rights reserved.</div>
</body>
</html>
