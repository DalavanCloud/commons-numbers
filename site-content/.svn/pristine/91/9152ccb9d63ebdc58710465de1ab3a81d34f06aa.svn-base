<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span>package org.apache.commons.math3.geometry.spherical.twod;<a name="line.17"></a>
<span class="sourceLineNo">018</span><a name="line.18"></a>
<span class="sourceLineNo">019</span>import org.apache.commons.math3.geometry.euclidean.threed.Rotation;<a name="line.19"></a>
<span class="sourceLineNo">020</span>import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;<a name="line.20"></a>
<span class="sourceLineNo">021</span>import org.apache.commons.math3.geometry.partitioning.RegionFactory;<a name="line.21"></a>
<span class="sourceLineNo">022</span>import org.apache.commons.math3.geometry.partitioning.Side;<a name="line.22"></a>
<span class="sourceLineNo">023</span>import org.apache.commons.math3.geometry.partitioning.SubHyperplane.SplitSubHyperplane;<a name="line.23"></a>
<span class="sourceLineNo">024</span>import org.apache.commons.math3.geometry.spherical.oned.ArcsSet;<a name="line.24"></a>
<span class="sourceLineNo">025</span>import org.apache.commons.math3.geometry.spherical.oned.Sphere1D;<a name="line.25"></a>
<span class="sourceLineNo">026</span>import org.apache.commons.math3.util.MathUtils;<a name="line.26"></a>
<span class="sourceLineNo">027</span>import org.junit.Assert;<a name="line.27"></a>
<span class="sourceLineNo">028</span>import org.junit.Test;<a name="line.28"></a>
<span class="sourceLineNo">029</span><a name="line.29"></a>
<span class="sourceLineNo">030</span>public class SubCircleTest {<a name="line.30"></a>
<span class="sourceLineNo">031</span><a name="line.31"></a>
<span class="sourceLineNo">032</span>    @Test<a name="line.32"></a>
<span class="sourceLineNo">033</span>    public void testFullCircle() {<a name="line.33"></a>
<span class="sourceLineNo">034</span>        Circle circle = new Circle(Vector3D.PLUS_K, 1.0e-10);<a name="line.34"></a>
<span class="sourceLineNo">035</span>        SubCircle set = circle.wholeHyperplane();<a name="line.35"></a>
<span class="sourceLineNo">036</span>        Assert.assertEquals(MathUtils.TWO_PI, set.getSize(), 1.0e-10);<a name="line.36"></a>
<span class="sourceLineNo">037</span>        Assert.assertTrue(circle == set.getHyperplane());<a name="line.37"></a>
<span class="sourceLineNo">038</span>        Assert.assertTrue(circle != set.copySelf().getHyperplane());<a name="line.38"></a>
<span class="sourceLineNo">039</span>    }<a name="line.39"></a>
<span class="sourceLineNo">040</span><a name="line.40"></a>
<span class="sourceLineNo">041</span>    @Test<a name="line.41"></a>
<span class="sourceLineNo">042</span>    public void testSide() {<a name="line.42"></a>
<span class="sourceLineNo">043</span><a name="line.43"></a>
<span class="sourceLineNo">044</span>        Circle xzPlane = new Circle(Vector3D.PLUS_J, 1.0e-10);<a name="line.44"></a>
<span class="sourceLineNo">045</span><a name="line.45"></a>
<span class="sourceLineNo">046</span>        SubCircle sc1 = create(Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J, 1.0e-10, 1.0, 3.0, 5.0, 6.0);<a name="line.46"></a>
<span class="sourceLineNo">047</span>        Assert.assertEquals(Side.BOTH, sc1.side(xzPlane));<a name="line.47"></a>
<span class="sourceLineNo">048</span><a name="line.48"></a>
<span class="sourceLineNo">049</span>        SubCircle sc2 = create(Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J, 1.0e-10, 1.0, 3.0);<a name="line.49"></a>
<span class="sourceLineNo">050</span>        Assert.assertEquals(Side.MINUS, sc2.side(xzPlane));<a name="line.50"></a>
<span class="sourceLineNo">051</span><a name="line.51"></a>
<span class="sourceLineNo">052</span>        SubCircle sc3 = create(Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J, 1.0e-10, 5.0, 6.0);<a name="line.52"></a>
<span class="sourceLineNo">053</span>        Assert.assertEquals(Side.PLUS, sc3.side(xzPlane));<a name="line.53"></a>
<span class="sourceLineNo">054</span><a name="line.54"></a>
<span class="sourceLineNo">055</span>        SubCircle sc4 = create(Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I, 1.0e-10, 5.0, 6.0);<a name="line.55"></a>
<span class="sourceLineNo">056</span>        Assert.assertEquals(Side.HYPER, sc4.side(xzPlane));<a name="line.56"></a>
<span class="sourceLineNo">057</span><a name="line.57"></a>
<span class="sourceLineNo">058</span>        SubCircle sc5 = create(Vector3D.MINUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K, 1.0e-10, 5.0, 6.0);<a name="line.58"></a>
<span class="sourceLineNo">059</span>        Assert.assertEquals(Side.HYPER, sc5.side(xzPlane));<a name="line.59"></a>
<span class="sourceLineNo">060</span><a name="line.60"></a>
<span class="sourceLineNo">061</span>    }<a name="line.61"></a>
<span class="sourceLineNo">062</span><a name="line.62"></a>
<span class="sourceLineNo">063</span>    @Test<a name="line.63"></a>
<span class="sourceLineNo">064</span>    public void testSPlit() {<a name="line.64"></a>
<span class="sourceLineNo">065</span><a name="line.65"></a>
<span class="sourceLineNo">066</span>        Circle xzPlane = new Circle(Vector3D.PLUS_J, 1.0e-10);<a name="line.66"></a>
<span class="sourceLineNo">067</span><a name="line.67"></a>
<span class="sourceLineNo">068</span>        SubCircle sc1 = create(Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J, 1.0e-10, 1.0, 3.0, 5.0, 6.0);<a name="line.68"></a>
<span class="sourceLineNo">069</span>        SplitSubHyperplane&lt;Sphere2D&gt; split1 = sc1.split(xzPlane);<a name="line.69"></a>
<span class="sourceLineNo">070</span>        ArcsSet plus1  = (ArcsSet) ((SubCircle) split1.getPlus()).getRemainingRegion();<a name="line.70"></a>
<span class="sourceLineNo">071</span>        ArcsSet minus1 = (ArcsSet) ((SubCircle) split1.getMinus()).getRemainingRegion();<a name="line.71"></a>
<span class="sourceLineNo">072</span>        Assert.assertEquals(1, plus1.asList().size());<a name="line.72"></a>
<span class="sourceLineNo">073</span>        Assert.assertEquals(5.0, plus1.asList().get(0).getInf(), 1.0e-10);<a name="line.73"></a>
<span class="sourceLineNo">074</span>        Assert.assertEquals(6.0, plus1.asList().get(0).getSup(), 1.0e-10);<a name="line.74"></a>
<span class="sourceLineNo">075</span>        Assert.assertEquals(1, minus1.asList().size());<a name="line.75"></a>
<span class="sourceLineNo">076</span>        Assert.assertEquals(1.0, minus1.asList().get(0).getInf(), 1.0e-10);<a name="line.76"></a>
<span class="sourceLineNo">077</span>        Assert.assertEquals(3.0, minus1.asList().get(0).getSup(), 1.0e-10);<a name="line.77"></a>
<span class="sourceLineNo">078</span><a name="line.78"></a>
<span class="sourceLineNo">079</span>        SubCircle sc2 = create(Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J, 1.0e-10, 1.0, 3.0);<a name="line.79"></a>
<span class="sourceLineNo">080</span>        SplitSubHyperplane&lt;Sphere2D&gt; split2 = sc2.split(xzPlane);<a name="line.80"></a>
<span class="sourceLineNo">081</span>        Assert.assertNull(split2.getPlus());<a name="line.81"></a>
<span class="sourceLineNo">082</span>        ArcsSet minus2 = (ArcsSet) ((SubCircle) split2.getMinus()).getRemainingRegion();<a name="line.82"></a>
<span class="sourceLineNo">083</span>        Assert.assertEquals(1, minus2.asList().size());<a name="line.83"></a>
<span class="sourceLineNo">084</span>        Assert.assertEquals(1.0, minus2.asList().get(0).getInf(), 1.0e-10);<a name="line.84"></a>
<span class="sourceLineNo">085</span>        Assert.assertEquals(3.0, minus2.asList().get(0).getSup(), 1.0e-10);<a name="line.85"></a>
<span class="sourceLineNo">086</span><a name="line.86"></a>
<span class="sourceLineNo">087</span>        SubCircle sc3 = create(Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J, 1.0e-10, 5.0, 6.0);<a name="line.87"></a>
<span class="sourceLineNo">088</span>        SplitSubHyperplane&lt;Sphere2D&gt; split3 = sc3.split(xzPlane);<a name="line.88"></a>
<span class="sourceLineNo">089</span>        ArcsSet plus3  = (ArcsSet) ((SubCircle) split3.getPlus()).getRemainingRegion();<a name="line.89"></a>
<span class="sourceLineNo">090</span>        Assert.assertEquals(1, plus3.asList().size());<a name="line.90"></a>
<span class="sourceLineNo">091</span>        Assert.assertEquals(5.0, plus3.asList().get(0).getInf(), 1.0e-10);<a name="line.91"></a>
<span class="sourceLineNo">092</span>        Assert.assertEquals(6.0, plus3.asList().get(0).getSup(), 1.0e-10);<a name="line.92"></a>
<span class="sourceLineNo">093</span>        Assert.assertNull(split3.getMinus());<a name="line.93"></a>
<span class="sourceLineNo">094</span><a name="line.94"></a>
<span class="sourceLineNo">095</span>        SubCircle sc4 = create(Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I, 1.0e-10, 5.0, 6.0);<a name="line.95"></a>
<span class="sourceLineNo">096</span>        SplitSubHyperplane&lt;Sphere2D&gt; split4 = sc4.split(xzPlane);<a name="line.96"></a>
<span class="sourceLineNo">097</span>        Assert.assertEquals(Side.HYPER, sc4.side(xzPlane));<a name="line.97"></a>
<span class="sourceLineNo">098</span>        Assert.assertNull(split4.getPlus());<a name="line.98"></a>
<span class="sourceLineNo">099</span>        Assert.assertTrue(split4.getMinus() == sc4);<a name="line.99"></a>
<span class="sourceLineNo">100</span><a name="line.100"></a>
<span class="sourceLineNo">101</span>        SubCircle sc5 = create(Vector3D.MINUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K, 1.0e-10, 5.0, 6.0);<a name="line.101"></a>
<span class="sourceLineNo">102</span>        SplitSubHyperplane&lt;Sphere2D&gt; split5 = sc5.split(xzPlane);<a name="line.102"></a>
<span class="sourceLineNo">103</span>        Assert.assertTrue(split5.getPlus() == sc5);<a name="line.103"></a>
<span class="sourceLineNo">104</span>        Assert.assertNull(split5.getMinus());<a name="line.104"></a>
<span class="sourceLineNo">105</span><a name="line.105"></a>
<span class="sourceLineNo">106</span>    }<a name="line.106"></a>
<span class="sourceLineNo">107</span><a name="line.107"></a>
<span class="sourceLineNo">108</span>    private SubCircle create(Vector3D pole, Vector3D x, Vector3D y,<a name="line.108"></a>
<span class="sourceLineNo">109</span>                             double tolerance, double ... limits) {<a name="line.109"></a>
<span class="sourceLineNo">110</span>        RegionFactory&lt;Sphere1D&gt; factory = new RegionFactory&lt;Sphere1D&gt;();<a name="line.110"></a>
<span class="sourceLineNo">111</span>        Circle circle = new Circle(pole, tolerance);<a name="line.111"></a>
<span class="sourceLineNo">112</span>        Circle phased =<a name="line.112"></a>
<span class="sourceLineNo">113</span>                (Circle) Circle.getTransform(new Rotation(circle.getXAxis(), circle.getYAxis(), x, y)).apply(circle);<a name="line.113"></a>
<span class="sourceLineNo">114</span>        ArcsSet set = (ArcsSet) factory.getComplement(new ArcsSet(tolerance));<a name="line.114"></a>
<span class="sourceLineNo">115</span>        for (int i = 0; i &lt; limits.length; i += 2) {<a name="line.115"></a>
<span class="sourceLineNo">116</span>            set = (ArcsSet) factory.union(set, new ArcsSet(limits[i], limits[i + 1], tolerance));<a name="line.116"></a>
<span class="sourceLineNo">117</span>        }<a name="line.117"></a>
<span class="sourceLineNo">118</span>        return new SubCircle(phased, set);<a name="line.118"></a>
<span class="sourceLineNo">119</span>    }<a name="line.119"></a>
<span class="sourceLineNo">120</span><a name="line.120"></a>
<span class="sourceLineNo">121</span>}<a name="line.121"></a>




























































</pre>
</div>
</body>
</html>
