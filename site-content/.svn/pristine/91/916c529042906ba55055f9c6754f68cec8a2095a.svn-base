<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span><a name="line.17"></a>
<span class="sourceLineNo">018</span>package org.apache.commons.math3.analysis.function;<a name="line.18"></a>
<span class="sourceLineNo">019</span><a name="line.19"></a>
<span class="sourceLineNo">020</span>import org.apache.commons.math3.analysis.UnivariateFunction;<a name="line.20"></a>
<span class="sourceLineNo">021</span>import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;<a name="line.21"></a>
<span class="sourceLineNo">022</span>import org.apache.commons.math3.exception.NotStrictlyPositiveException;<a name="line.22"></a>
<span class="sourceLineNo">023</span>import org.apache.commons.math3.exception.NullArgumentException;<a name="line.23"></a>
<span class="sourceLineNo">024</span>import org.apache.commons.math3.exception.DimensionMismatchException;<a name="line.24"></a>
<span class="sourceLineNo">025</span>import org.apache.commons.math3.util.FastMath;<a name="line.25"></a>
<span class="sourceLineNo">026</span><a name="line.26"></a>
<span class="sourceLineNo">027</span>import org.junit.Assert;<a name="line.27"></a>
<span class="sourceLineNo">028</span>import org.junit.Test;<a name="line.28"></a>
<span class="sourceLineNo">029</span><a name="line.29"></a>
<span class="sourceLineNo">030</span>/**<a name="line.30"></a>
<span class="sourceLineNo">031</span> * Test for class {@link Logistic}.<a name="line.31"></a>
<span class="sourceLineNo">032</span> */<a name="line.32"></a>
<span class="sourceLineNo">033</span>public class LogisticTest {<a name="line.33"></a>
<span class="sourceLineNo">034</span>    private final double EPS = Math.ulp(1d);<a name="line.34"></a>
<span class="sourceLineNo">035</span><a name="line.35"></a>
<span class="sourceLineNo">036</span>    @Test(expected=NotStrictlyPositiveException.class)<a name="line.36"></a>
<span class="sourceLineNo">037</span>    public void testPreconditions1() {<a name="line.37"></a>
<span class="sourceLineNo">038</span>        new Logistic(1, 0, 1, 1, 0, -1);<a name="line.38"></a>
<span class="sourceLineNo">039</span>    }<a name="line.39"></a>
<span class="sourceLineNo">040</span><a name="line.40"></a>
<span class="sourceLineNo">041</span>    @Test(expected=NotStrictlyPositiveException.class)<a name="line.41"></a>
<span class="sourceLineNo">042</span>    public void testPreconditions2() {<a name="line.42"></a>
<span class="sourceLineNo">043</span>        new Logistic(1, 0, 1, 1, 0, 0);<a name="line.43"></a>
<span class="sourceLineNo">044</span>    }<a name="line.44"></a>
<span class="sourceLineNo">045</span><a name="line.45"></a>
<span class="sourceLineNo">046</span>    @Test<a name="line.46"></a>
<span class="sourceLineNo">047</span>    public void testCompareSigmoid() {<a name="line.47"></a>
<span class="sourceLineNo">048</span>        final UnivariateFunction sig = new Sigmoid();<a name="line.48"></a>
<span class="sourceLineNo">049</span>        final UnivariateFunction sigL = new Logistic(1, 0, 1, 1, 0, 1);<a name="line.49"></a>
<span class="sourceLineNo">050</span><a name="line.50"></a>
<span class="sourceLineNo">051</span>        final double min = -2;<a name="line.51"></a>
<span class="sourceLineNo">052</span>        final double max = 2;<a name="line.52"></a>
<span class="sourceLineNo">053</span>        final int n = 100;<a name="line.53"></a>
<span class="sourceLineNo">054</span>        final double delta = (max - min) / n;<a name="line.54"></a>
<span class="sourceLineNo">055</span>        for (int i = 0; i &lt; n; i++) {<a name="line.55"></a>
<span class="sourceLineNo">056</span>            final double x = min + i * delta;<a name="line.56"></a>
<span class="sourceLineNo">057</span>            Assert.assertEquals("x=" + x, sig.value(x), sigL.value(x), EPS);<a name="line.57"></a>
<span class="sourceLineNo">058</span>        }<a name="line.58"></a>
<span class="sourceLineNo">059</span>    }<a name="line.59"></a>
<span class="sourceLineNo">060</span><a name="line.60"></a>
<span class="sourceLineNo">061</span>    @Test<a name="line.61"></a>
<span class="sourceLineNo">062</span>    public void testSomeValues() {<a name="line.62"></a>
<span class="sourceLineNo">063</span>        final double k = 4;<a name="line.63"></a>
<span class="sourceLineNo">064</span>        final double m = 5;<a name="line.64"></a>
<span class="sourceLineNo">065</span>        final double b = 2;<a name="line.65"></a>
<span class="sourceLineNo">066</span>        final double q = 3;<a name="line.66"></a>
<span class="sourceLineNo">067</span>        final double a = -1;<a name="line.67"></a>
<span class="sourceLineNo">068</span>        final double n = 2;<a name="line.68"></a>
<span class="sourceLineNo">069</span><a name="line.69"></a>
<span class="sourceLineNo">070</span>        final UnivariateFunction f = new Logistic(k, m, b, q, a, n);<a name="line.70"></a>
<span class="sourceLineNo">071</span><a name="line.71"></a>
<span class="sourceLineNo">072</span>        double x;<a name="line.72"></a>
<span class="sourceLineNo">073</span>        x = m;<a name="line.73"></a>
<span class="sourceLineNo">074</span>        Assert.assertEquals("x=" + x, a + (k - a) / FastMath.sqrt(1 + q), f.value(x), EPS);<a name="line.74"></a>
<span class="sourceLineNo">075</span><a name="line.75"></a>
<span class="sourceLineNo">076</span>        x = Double.NEGATIVE_INFINITY;<a name="line.76"></a>
<span class="sourceLineNo">077</span>        Assert.assertEquals("x=" + x, a, f.value(x), EPS);<a name="line.77"></a>
<span class="sourceLineNo">078</span><a name="line.78"></a>
<span class="sourceLineNo">079</span>        x = Double.POSITIVE_INFINITY;<a name="line.79"></a>
<span class="sourceLineNo">080</span>        Assert.assertEquals("x=" + x, k, f.value(x), EPS);<a name="line.80"></a>
<span class="sourceLineNo">081</span>    }<a name="line.81"></a>
<span class="sourceLineNo">082</span><a name="line.82"></a>
<span class="sourceLineNo">083</span>    @Test<a name="line.83"></a>
<span class="sourceLineNo">084</span>    public void testCompareDerivativeSigmoid() {<a name="line.84"></a>
<span class="sourceLineNo">085</span>        final double k = 3;<a name="line.85"></a>
<span class="sourceLineNo">086</span>        final double a = 2;<a name="line.86"></a>
<span class="sourceLineNo">087</span><a name="line.87"></a>
<span class="sourceLineNo">088</span>        final Logistic f = new Logistic(k, 0, 1, 1, a, 1);<a name="line.88"></a>
<span class="sourceLineNo">089</span>        final Sigmoid g = new Sigmoid(a, k);<a name="line.89"></a>
<span class="sourceLineNo">090</span>        <a name="line.90"></a>
<span class="sourceLineNo">091</span>        final double min = -10;<a name="line.91"></a>
<span class="sourceLineNo">092</span>        final double max = 10;<a name="line.92"></a>
<span class="sourceLineNo">093</span>        final double n = 20;<a name="line.93"></a>
<span class="sourceLineNo">094</span>        final double delta = (max - min) / n;<a name="line.94"></a>
<span class="sourceLineNo">095</span>        for (int i = 0; i &lt; n; i++) {<a name="line.95"></a>
<span class="sourceLineNo">096</span>            final DerivativeStructure x = new DerivativeStructure(1, 5, 0, min + i * delta);<a name="line.96"></a>
<span class="sourceLineNo">097</span>            for (int order = 0; order &lt;= x.getOrder(); ++order) {<a name="line.97"></a>
<span class="sourceLineNo">098</span>                Assert.assertEquals("x=" + x.getValue(),<a name="line.98"></a>
<span class="sourceLineNo">099</span>                                    g.value(x).getPartialDerivative(order),<a name="line.99"></a>
<span class="sourceLineNo">100</span>                                    f.value(x).getPartialDerivative(order),<a name="line.100"></a>
<span class="sourceLineNo">101</span>                                    3.0e-15);<a name="line.101"></a>
<span class="sourceLineNo">102</span>            }<a name="line.102"></a>
<span class="sourceLineNo">103</span>        }<a name="line.103"></a>
<span class="sourceLineNo">104</span>    }<a name="line.104"></a>
<span class="sourceLineNo">105</span><a name="line.105"></a>
<span class="sourceLineNo">106</span>    @Test(expected=NullArgumentException.class)<a name="line.106"></a>
<span class="sourceLineNo">107</span>    public void testParametricUsage1() {<a name="line.107"></a>
<span class="sourceLineNo">108</span>        final Logistic.Parametric g = new Logistic.Parametric();<a name="line.108"></a>
<span class="sourceLineNo">109</span>        g.value(0, null);<a name="line.109"></a>
<span class="sourceLineNo">110</span>    }<a name="line.110"></a>
<span class="sourceLineNo">111</span><a name="line.111"></a>
<span class="sourceLineNo">112</span>    @Test(expected=DimensionMismatchException.class)<a name="line.112"></a>
<span class="sourceLineNo">113</span>    public void testParametricUsage2() {<a name="line.113"></a>
<span class="sourceLineNo">114</span>        final Logistic.Parametric g = new Logistic.Parametric();<a name="line.114"></a>
<span class="sourceLineNo">115</span>        g.value(0, new double[] {0});<a name="line.115"></a>
<span class="sourceLineNo">116</span>    }<a name="line.116"></a>
<span class="sourceLineNo">117</span><a name="line.117"></a>
<span class="sourceLineNo">118</span>    @Test(expected=NullArgumentException.class)<a name="line.118"></a>
<span class="sourceLineNo">119</span>    public void testParametricUsage3() {<a name="line.119"></a>
<span class="sourceLineNo">120</span>        final Logistic.Parametric g = new Logistic.Parametric();<a name="line.120"></a>
<span class="sourceLineNo">121</span>        g.gradient(0, null);<a name="line.121"></a>
<span class="sourceLineNo">122</span>    }<a name="line.122"></a>
<span class="sourceLineNo">123</span><a name="line.123"></a>
<span class="sourceLineNo">124</span>    @Test(expected=DimensionMismatchException.class)<a name="line.124"></a>
<span class="sourceLineNo">125</span>    public void testParametricUsage4() {<a name="line.125"></a>
<span class="sourceLineNo">126</span>        final Logistic.Parametric g = new Logistic.Parametric();<a name="line.126"></a>
<span class="sourceLineNo">127</span>        g.gradient(0, new double[] {0});<a name="line.127"></a>
<span class="sourceLineNo">128</span>    }<a name="line.128"></a>
<span class="sourceLineNo">129</span><a name="line.129"></a>
<span class="sourceLineNo">130</span>    @Test(expected=NotStrictlyPositiveException.class)<a name="line.130"></a>
<span class="sourceLineNo">131</span>    public void testParametricUsage5() {<a name="line.131"></a>
<span class="sourceLineNo">132</span>        final Logistic.Parametric g = new Logistic.Parametric();<a name="line.132"></a>
<span class="sourceLineNo">133</span>        g.value(0, new double[] {1, 0, 1, 1, 0 ,0});<a name="line.133"></a>
<span class="sourceLineNo">134</span>    }<a name="line.134"></a>
<span class="sourceLineNo">135</span><a name="line.135"></a>
<span class="sourceLineNo">136</span>    @Test(expected=NotStrictlyPositiveException.class)<a name="line.136"></a>
<span class="sourceLineNo">137</span>    public void testParametricUsage6() {<a name="line.137"></a>
<span class="sourceLineNo">138</span>        final Logistic.Parametric g = new Logistic.Parametric();<a name="line.138"></a>
<span class="sourceLineNo">139</span>        g.gradient(0, new double[] {1, 0, 1, 1, 0 ,0});<a name="line.139"></a>
<span class="sourceLineNo">140</span>    }<a name="line.140"></a>
<span class="sourceLineNo">141</span><a name="line.141"></a>
<span class="sourceLineNo">142</span>    @Test<a name="line.142"></a>
<span class="sourceLineNo">143</span>    public void testGradientComponent0Component4() {<a name="line.143"></a>
<span class="sourceLineNo">144</span>        final double k = 3;<a name="line.144"></a>
<span class="sourceLineNo">145</span>        final double a = 2;<a name="line.145"></a>
<span class="sourceLineNo">146</span><a name="line.146"></a>
<span class="sourceLineNo">147</span>        final Logistic.Parametric f = new Logistic.Parametric();<a name="line.147"></a>
<span class="sourceLineNo">148</span>        // Compare using the "Sigmoid" function.<a name="line.148"></a>
<span class="sourceLineNo">149</span>        final Sigmoid.Parametric g = new Sigmoid.Parametric();<a name="line.149"></a>
<span class="sourceLineNo">150</span>        <a name="line.150"></a>
<span class="sourceLineNo">151</span>        final double x = 0.12345;<a name="line.151"></a>
<span class="sourceLineNo">152</span>        final double[] gf = f.gradient(x, new double[] {k, 0, 1, 1, a, 1});<a name="line.152"></a>
<span class="sourceLineNo">153</span>        final double[] gg = g.gradient(x, new double[] {a, k});<a name="line.153"></a>
<span class="sourceLineNo">154</span><a name="line.154"></a>
<span class="sourceLineNo">155</span>        Assert.assertEquals(gg[0], gf[4], EPS);<a name="line.155"></a>
<span class="sourceLineNo">156</span>        Assert.assertEquals(gg[1], gf[0], EPS);<a name="line.156"></a>
<span class="sourceLineNo">157</span>    }<a name="line.157"></a>
<span class="sourceLineNo">158</span><a name="line.158"></a>
<span class="sourceLineNo">159</span>    @Test<a name="line.159"></a>
<span class="sourceLineNo">160</span>    public void testGradientComponent5() {<a name="line.160"></a>
<span class="sourceLineNo">161</span>        final double m = 1.2;<a name="line.161"></a>
<span class="sourceLineNo">162</span>        final double k = 3.4;<a name="line.162"></a>
<span class="sourceLineNo">163</span>        final double a = 2.3;<a name="line.163"></a>
<span class="sourceLineNo">164</span>        final double q = 0.567;<a name="line.164"></a>
<span class="sourceLineNo">165</span>        final double b = -FastMath.log(q);<a name="line.165"></a>
<span class="sourceLineNo">166</span>        final double n = 3.4;<a name="line.166"></a>
<span class="sourceLineNo">167</span><a name="line.167"></a>
<span class="sourceLineNo">168</span>        final Logistic.Parametric f = new Logistic.Parametric();<a name="line.168"></a>
<span class="sourceLineNo">169</span>        <a name="line.169"></a>
<span class="sourceLineNo">170</span>        final double x = m - 1;<a name="line.170"></a>
<span class="sourceLineNo">171</span>        final double qExp1 = 2;<a name="line.171"></a>
<span class="sourceLineNo">172</span><a name="line.172"></a>
<span class="sourceLineNo">173</span>        final double[] gf = f.gradient(x, new double[] {k, m, b, q, a, n});<a name="line.173"></a>
<span class="sourceLineNo">174</span><a name="line.174"></a>
<span class="sourceLineNo">175</span>        Assert.assertEquals((k - a) * FastMath.log(qExp1) / (n * n * FastMath.pow(qExp1, 1 / n)),<a name="line.175"></a>
<span class="sourceLineNo">176</span>                            gf[5], EPS);<a name="line.176"></a>
<span class="sourceLineNo">177</span>    }<a name="line.177"></a>
<span class="sourceLineNo">178</span><a name="line.178"></a>
<span class="sourceLineNo">179</span>    @Test<a name="line.179"></a>
<span class="sourceLineNo">180</span>    public void testGradientComponent1Component2Component3() {<a name="line.180"></a>
<span class="sourceLineNo">181</span>        final double m = 1.2;<a name="line.181"></a>
<span class="sourceLineNo">182</span>        final double k = 3.4;<a name="line.182"></a>
<span class="sourceLineNo">183</span>        final double a = 2.3;<a name="line.183"></a>
<span class="sourceLineNo">184</span>        final double b = 0.567;<a name="line.184"></a>
<span class="sourceLineNo">185</span>        final double q = 1 / FastMath.exp(b * m);<a name="line.185"></a>
<span class="sourceLineNo">186</span>        final double n = 3.4;<a name="line.186"></a>
<span class="sourceLineNo">187</span><a name="line.187"></a>
<span class="sourceLineNo">188</span>        final Logistic.Parametric f = new Logistic.Parametric();<a name="line.188"></a>
<span class="sourceLineNo">189</span>        <a name="line.189"></a>
<span class="sourceLineNo">190</span>        final double x = 0;<a name="line.190"></a>
<span class="sourceLineNo">191</span>        final double qExp1 = 2;<a name="line.191"></a>
<span class="sourceLineNo">192</span><a name="line.192"></a>
<span class="sourceLineNo">193</span>        final double[] gf = f.gradient(x, new double[] {k, m, b, q, a, n});<a name="line.193"></a>
<span class="sourceLineNo">194</span><a name="line.194"></a>
<span class="sourceLineNo">195</span>        final double factor = (a - k) / (n * FastMath.pow(qExp1, 1 / n + 1));<a name="line.195"></a>
<span class="sourceLineNo">196</span>        Assert.assertEquals(factor * b, gf[1], EPS);<a name="line.196"></a>
<span class="sourceLineNo">197</span>        Assert.assertEquals(factor * m, gf[2], EPS);<a name="line.197"></a>
<span class="sourceLineNo">198</span>        Assert.assertEquals(factor / q, gf[3], EPS);<a name="line.198"></a>
<span class="sourceLineNo">199</span>    }<a name="line.199"></a>
<span class="sourceLineNo">200</span>}<a name="line.200"></a>




























































</pre>
</div>
</body>
</html>
