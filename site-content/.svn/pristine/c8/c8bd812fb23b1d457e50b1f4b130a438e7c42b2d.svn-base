<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>AkimaSplineInterpolator xref</title>
<link type="text/css" rel="stylesheet" href="../../../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../apidocs/org/apache/commons/math3/analysis/interpolation/AkimaSplineInterpolator.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Licensed to the Apache Software Foundation (ASF) under one or more</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> * contributor license agreements.  See the NOTICE file distributed with</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * this work for additional information regarding copyright ownership.</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * The ASF licenses this file to You under the Apache License, Version 2.0</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * (the "License"); you may not use this file except in compliance with</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> * the License.  You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *      <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">package</strong> org.apache.commons.math3.analysis.interpolation;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.analysis.polynomials.PolynomialFunction;
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.DimensionMismatchException;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.NonMonotonicSequenceException;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.NullArgumentException;
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.NumberIsTooSmallException;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.util.LocalizedFormats;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.util.FastMath;
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.util.MathArrays;
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.util.Precision;
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <em class="jxr_javadoccomment"> * Computes a cubic spline interpolation for the data set using the Akima</em>
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <em class="jxr_javadoccomment"> * algorithm, as originally formulated by Hiroshi Akima in his 1970 paper</em>
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <em class="jxr_javadoccomment"> * "A New Method of Interpolation and Smooth Curve Fitting Based on Local Procedures."</em>
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <em class="jxr_javadoccomment"> * J. ACM 17, 4 (October 1970), 589-602. DOI=10.1145/321607.321609</em>
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  <em class="jxr_javadoccomment"> * <a href="http://doi.acm.org/10.1145/321607.32160" target="alexandria_uri">http://doi.acm.org/10.1145/321607.32160</a>9</em>
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  <em class="jxr_javadoccomment"> * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  <em class="jxr_javadoccomment"> * This implementation is based on the Akima implementation in the CubicSpline</em>
<a class="jxr_linenumber" name="L38" href="#L38">38</a>  <em class="jxr_javadoccomment"> * class in the Math.NET Numerics library. The method referenced is</em>
<a class="jxr_linenumber" name="L39" href="#L39">39</a>  <em class="jxr_javadoccomment"> * CubicSpline.InterpolateAkimaSorted</em>
<a class="jxr_linenumber" name="L40" href="#L40">40</a>  <em class="jxr_javadoccomment"> * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L41" href="#L41">41</a>  <em class="jxr_javadoccomment"> * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L42" href="#L42">42</a>  <em class="jxr_javadoccomment"> * The {@link #interpolate(double[], double[]) interpolate} method returns a</em>
<a class="jxr_linenumber" name="L43" href="#L43">43</a>  <em class="jxr_javadoccomment"> * {@link PolynomialSplineFunction} consisting of n cubic polynomials, defined</em>
<a class="jxr_linenumber" name="L44" href="#L44">44</a>  <em class="jxr_javadoccomment"> * over the subintervals determined by the x values, {@code x[0] &lt; x[i] ... &lt; x[n]}.</em>
<a class="jxr_linenumber" name="L45" href="#L45">45</a>  <em class="jxr_javadoccomment"> * The Akima algorithm requires that {@code n &gt;= 5}.</em>
<a class="jxr_linenumber" name="L46" href="#L46">46</a>  <em class="jxr_javadoccomment"> * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L47" href="#L47">47</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L48" href="#L48">48</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../../org/apache/commons/math3/analysis/interpolation/AkimaSplineInterpolator.html">AkimaSplineInterpolator</a>
<a class="jxr_linenumber" name="L49" href="#L49">49</a>      <strong class="jxr_keyword">implements</strong> <a href="../../../../../../org/apache/commons/math3/analysis/interpolation/UnivariateInterpolator.html">UnivariateInterpolator</a> {
<a class="jxr_linenumber" name="L50" href="#L50">50</a>      <em class="jxr_javadoccomment">/** The minimum number of points that are needed to compute the function. */</em>
<a class="jxr_linenumber" name="L51" href="#L51">51</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> MINIMUM_NUMBER_POINTS = 5;
<a class="jxr_linenumber" name="L52" href="#L52">52</a>  
<a class="jxr_linenumber" name="L53" href="#L53">53</a>      <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L54" href="#L54">54</a>  <em class="jxr_javadoccomment">     * Computes an interpolating function for the data set.</em>
<a class="jxr_linenumber" name="L55" href="#L55">55</a>  <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L56" href="#L56">56</a>  <em class="jxr_javadoccomment">     * @param xvals the arguments for the interpolation points</em>
<a class="jxr_linenumber" name="L57" href="#L57">57</a>  <em class="jxr_javadoccomment">     * @param yvals the values for the interpolation points</em>
<a class="jxr_linenumber" name="L58" href="#L58">58</a>  <em class="jxr_javadoccomment">     * @return a function which interpolates the data set</em>
<a class="jxr_linenumber" name="L59" href="#L59">59</a>  <em class="jxr_javadoccomment">     * @throws DimensionMismatchException if {@code xvals} and {@code yvals} have</em>
<a class="jxr_linenumber" name="L60" href="#L60">60</a>  <em class="jxr_javadoccomment">     *         different sizes.</em>
<a class="jxr_linenumber" name="L61" href="#L61">61</a>  <em class="jxr_javadoccomment">     * @throws NonMonotonicSequenceException if {@code xvals} is not sorted in</em>
<a class="jxr_linenumber" name="L62" href="#L62">62</a>  <em class="jxr_javadoccomment">     *         strict increasing order.</em>
<a class="jxr_linenumber" name="L63" href="#L63">63</a>  <em class="jxr_javadoccomment">     * @throws NumberIsTooSmallException if the size of {@code xvals} is smaller</em>
<a class="jxr_linenumber" name="L64" href="#L64">64</a>  <em class="jxr_javadoccomment">     *         than 5.</em>
<a class="jxr_linenumber" name="L65" href="#L65">65</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L66" href="#L66">66</a>      <strong class="jxr_keyword">public</strong> <a href="../../../../../../org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.html">PolynomialSplineFunction</a> interpolate(<strong class="jxr_keyword">double</strong>[] xvals,
<a class="jxr_linenumber" name="L67" href="#L67">67</a>                                                  <strong class="jxr_keyword">double</strong>[] yvals)
<a class="jxr_linenumber" name="L68" href="#L68">68</a>          <strong class="jxr_keyword">throws</strong> DimensionMismatchException,
<a class="jxr_linenumber" name="L69" href="#L69">69</a>                 NumberIsTooSmallException,
<a class="jxr_linenumber" name="L70" href="#L70">70</a>                 <a href="../../../../../../org/apache/commons/math3/exception/NonMonotonicSequenceException.html">NonMonotonicSequenceException</a> {
<a class="jxr_linenumber" name="L71" href="#L71">71</a>          <strong class="jxr_keyword">if</strong> (xvals == <strong class="jxr_keyword">null</strong> ||
<a class="jxr_linenumber" name="L72" href="#L72">72</a>              yvals == <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L73" href="#L73">73</a>              <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/exception/NullArgumentException.html">NullArgumentException</a>();
<a class="jxr_linenumber" name="L74" href="#L74">74</a>          }
<a class="jxr_linenumber" name="L75" href="#L75">75</a>  
<a class="jxr_linenumber" name="L76" href="#L76">76</a>          <strong class="jxr_keyword">if</strong> (xvals.length != yvals.length) {
<a class="jxr_linenumber" name="L77" href="#L77">77</a>              <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/exception/DimensionMismatchException.html">DimensionMismatchException</a>(xvals.length, yvals.length);
<a class="jxr_linenumber" name="L78" href="#L78">78</a>          }
<a class="jxr_linenumber" name="L79" href="#L79">79</a>  
<a class="jxr_linenumber" name="L80" href="#L80">80</a>          <strong class="jxr_keyword">if</strong> (xvals.length &lt; MINIMUM_NUMBER_POINTS) {
<a class="jxr_linenumber" name="L81" href="#L81">81</a>              <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/exception/NumberIsTooSmallException.html">NumberIsTooSmallException</a>(LocalizedFormats.NUMBER_OF_POINTS,
<a class="jxr_linenumber" name="L82" href="#L82">82</a>                                                  xvals.length,
<a class="jxr_linenumber" name="L83" href="#L83">83</a>                                                  MINIMUM_NUMBER_POINTS, <strong class="jxr_keyword">true</strong>);
<a class="jxr_linenumber" name="L84" href="#L84">84</a>          }
<a class="jxr_linenumber" name="L85" href="#L85">85</a>  
<a class="jxr_linenumber" name="L86" href="#L86">86</a>          MathArrays.checkOrder(xvals);
<a class="jxr_linenumber" name="L87" href="#L87">87</a>  
<a class="jxr_linenumber" name="L88" href="#L88">88</a>          <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> numberOfDiffAndWeightElements = xvals.length - 1;
<a class="jxr_linenumber" name="L89" href="#L89">89</a>  
<a class="jxr_linenumber" name="L90" href="#L90">90</a>          <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] differences = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[numberOfDiffAndWeightElements];
<a class="jxr_linenumber" name="L91" href="#L91">91</a>          <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] weights = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[numberOfDiffAndWeightElements];
<a class="jxr_linenumber" name="L92" href="#L92">92</a>  
<a class="jxr_linenumber" name="L93" href="#L93">93</a>          <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; differences.length; i++) {
<a class="jxr_linenumber" name="L94" href="#L94">94</a>              differences[i] = (yvals[i + 1] - yvals[i]) / (xvals[i + 1] - xvals[i]);
<a class="jxr_linenumber" name="L95" href="#L95">95</a>          }
<a class="jxr_linenumber" name="L96" href="#L96">96</a>  
<a class="jxr_linenumber" name="L97" href="#L97">97</a>          <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 1; i &lt; weights.length; i++) {
<a class="jxr_linenumber" name="L98" href="#L98">98</a>              weights[i] = FastMath.abs(differences[i] - differences[i - 1]);
<a class="jxr_linenumber" name="L99" href="#L99">99</a>          }
<a class="jxr_linenumber" name="L100" href="#L100">100</a> 
<a class="jxr_linenumber" name="L101" href="#L101">101</a>         <em class="jxr_comment">// Prepare Hermite interpolation scheme.</em>
<a class="jxr_linenumber" name="L102" href="#L102">102</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] firstDerivatives = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[xvals.length];
<a class="jxr_linenumber" name="L103" href="#L103">103</a> 
<a class="jxr_linenumber" name="L104" href="#L104">104</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 2; i &lt; firstDerivatives.length - 2; i++) {
<a class="jxr_linenumber" name="L105" href="#L105">105</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> wP = weights[i + 1];
<a class="jxr_linenumber" name="L106" href="#L106">106</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> wM = weights[i - 1];
<a class="jxr_linenumber" name="L107" href="#L107">107</a>             <strong class="jxr_keyword">if</strong> (Precision.equals(wP, 0.0) &amp;&amp;
<a class="jxr_linenumber" name="L108" href="#L108">108</a>                 Precision.equals(wM, 0.0)) {
<a class="jxr_linenumber" name="L109" href="#L109">109</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> xv = xvals[i];
<a class="jxr_linenumber" name="L110" href="#L110">110</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> xvP = xvals[i + 1];
<a class="jxr_linenumber" name="L111" href="#L111">111</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> xvM = xvals[i - 1];
<a class="jxr_linenumber" name="L112" href="#L112">112</a>                 firstDerivatives[i] = (((xvP - xv) * differences[i - 1]) + ((xv - xvM) * differences[i])) / (xvP - xvM);
<a class="jxr_linenumber" name="L113" href="#L113">113</a>             } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L114" href="#L114">114</a>                 firstDerivatives[i] = ((wP * differences[i - 1]) + (wM * differences[i])) / (wP + wM);
<a class="jxr_linenumber" name="L115" href="#L115">115</a>             }
<a class="jxr_linenumber" name="L116" href="#L116">116</a>         }
<a class="jxr_linenumber" name="L117" href="#L117">117</a> 
<a class="jxr_linenumber" name="L118" href="#L118">118</a>         firstDerivatives[0] = differentiateThreePoint(xvals, yvals, 0, 0, 1, 2);
<a class="jxr_linenumber" name="L119" href="#L119">119</a>         firstDerivatives[1] = differentiateThreePoint(xvals, yvals, 1, 0, 1, 2);
<a class="jxr_linenumber" name="L120" href="#L120">120</a>         firstDerivatives[xvals.length - 2] = differentiateThreePoint(xvals, yvals, xvals.length - 2,
<a class="jxr_linenumber" name="L121" href="#L121">121</a>                                                                      xvals.length - 3, xvals.length - 2,
<a class="jxr_linenumber" name="L122" href="#L122">122</a>                                                                      xvals.length - 1);
<a class="jxr_linenumber" name="L123" href="#L123">123</a>         firstDerivatives[xvals.length - 1] = differentiateThreePoint(xvals, yvals, xvals.length - 1,
<a class="jxr_linenumber" name="L124" href="#L124">124</a>                                                                      xvals.length - 3, xvals.length - 2,
<a class="jxr_linenumber" name="L125" href="#L125">125</a>                                                                      xvals.length - 1);
<a class="jxr_linenumber" name="L126" href="#L126">126</a> 
<a class="jxr_linenumber" name="L127" href="#L127">127</a>         <strong class="jxr_keyword">return</strong> interpolateHermiteSorted(xvals, yvals, firstDerivatives);
<a class="jxr_linenumber" name="L128" href="#L128">128</a>     }
<a class="jxr_linenumber" name="L129" href="#L129">129</a> 
<a class="jxr_linenumber" name="L130" href="#L130">130</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L131" href="#L131">131</a> <em class="jxr_javadoccomment">     * Three point differentiation helper, modeled off of the same method in the</em>
<a class="jxr_linenumber" name="L132" href="#L132">132</a> <em class="jxr_javadoccomment">     * Math.NET CubicSpline class. This is used by both the Apache Math and the</em>
<a class="jxr_linenumber" name="L133" href="#L133">133</a> <em class="jxr_javadoccomment">     * Math.NET Akima Cubic Spline algorithms</em>
<a class="jxr_linenumber" name="L134" href="#L134">134</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L135" href="#L135">135</a> <em class="jxr_javadoccomment">     * @param xvals x values to calculate the numerical derivative with</em>
<a class="jxr_linenumber" name="L136" href="#L136">136</a> <em class="jxr_javadoccomment">     * @param yvals y values to calculate the numerical derivative with</em>
<a class="jxr_linenumber" name="L137" href="#L137">137</a> <em class="jxr_javadoccomment">     * @param indexOfDifferentiation index of the elemnt we are calculating the derivative around</em>
<a class="jxr_linenumber" name="L138" href="#L138">138</a> <em class="jxr_javadoccomment">     * @param indexOfFirstSample index of the first element to sample for the three point method</em>
<a class="jxr_linenumber" name="L139" href="#L139">139</a> <em class="jxr_javadoccomment">     * @param indexOfSecondsample index of the second element to sample for the three point method</em>
<a class="jxr_linenumber" name="L140" href="#L140">140</a> <em class="jxr_javadoccomment">     * @param indexOfThirdSample index of the third element to sample for the three point method</em>
<a class="jxr_linenumber" name="L141" href="#L141">141</a> <em class="jxr_javadoccomment">     * @return the derivative</em>
<a class="jxr_linenumber" name="L142" href="#L142">142</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L143" href="#L143">143</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">double</strong> differentiateThreePoint(<strong class="jxr_keyword">double</strong>[] xvals, <strong class="jxr_keyword">double</strong>[] yvals,
<a class="jxr_linenumber" name="L144" href="#L144">144</a>                                            <strong class="jxr_keyword">int</strong> indexOfDifferentiation,
<a class="jxr_linenumber" name="L145" href="#L145">145</a>                                            <strong class="jxr_keyword">int</strong> indexOfFirstSample,
<a class="jxr_linenumber" name="L146" href="#L146">146</a>                                            <strong class="jxr_keyword">int</strong> indexOfSecondsample,
<a class="jxr_linenumber" name="L147" href="#L147">147</a>                                            <strong class="jxr_keyword">int</strong> indexOfThirdSample) {
<a class="jxr_linenumber" name="L148" href="#L148">148</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> x0 = yvals[indexOfFirstSample];
<a class="jxr_linenumber" name="L149" href="#L149">149</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> x1 = yvals[indexOfSecondsample];
<a class="jxr_linenumber" name="L150" href="#L150">150</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> x2 = yvals[indexOfThirdSample];
<a class="jxr_linenumber" name="L151" href="#L151">151</a> 
<a class="jxr_linenumber" name="L152" href="#L152">152</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> t = xvals[indexOfDifferentiation] - xvals[indexOfFirstSample];
<a class="jxr_linenumber" name="L153" href="#L153">153</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> t1 = xvals[indexOfSecondsample] - xvals[indexOfFirstSample];
<a class="jxr_linenumber" name="L154" href="#L154">154</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> t2 = xvals[indexOfThirdSample] - xvals[indexOfFirstSample];
<a class="jxr_linenumber" name="L155" href="#L155">155</a> 
<a class="jxr_linenumber" name="L156" href="#L156">156</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> a = (x2 - x0 - (t2 / t1 * (x1 - x0))) / (t2 * t2 - t1 * t2);
<a class="jxr_linenumber" name="L157" href="#L157">157</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> b = (x1 - x0 - a * t1 * t1) / t1;
<a class="jxr_linenumber" name="L158" href="#L158">158</a> 
<a class="jxr_linenumber" name="L159" href="#L159">159</a>         <strong class="jxr_keyword">return</strong> (2 * a * t) + b;
<a class="jxr_linenumber" name="L160" href="#L160">160</a>     }
<a class="jxr_linenumber" name="L161" href="#L161">161</a> 
<a class="jxr_linenumber" name="L162" href="#L162">162</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L163" href="#L163">163</a> <em class="jxr_javadoccomment">     * Creates a Hermite cubic spline interpolation from the set of (x,y) value</em>
<a class="jxr_linenumber" name="L164" href="#L164">164</a> <em class="jxr_javadoccomment">     * pairs and their derivatives. This is modeled off of the</em>
<a class="jxr_linenumber" name="L165" href="#L165">165</a> <em class="jxr_javadoccomment">     * InterpolateHermiteSorted method in the Math.NET CubicSpline class.</em>
<a class="jxr_linenumber" name="L166" href="#L166">166</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L167" href="#L167">167</a> <em class="jxr_javadoccomment">     * @param xvals x values for interpolation</em>
<a class="jxr_linenumber" name="L168" href="#L168">168</a> <em class="jxr_javadoccomment">     * @param yvals y values for interpolation</em>
<a class="jxr_linenumber" name="L169" href="#L169">169</a> <em class="jxr_javadoccomment">     * @param firstDerivatives first derivative values of the function</em>
<a class="jxr_linenumber" name="L170" href="#L170">170</a> <em class="jxr_javadoccomment">     * @return polynomial that fits the function</em>
<a class="jxr_linenumber" name="L171" href="#L171">171</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L172" href="#L172">172</a>     <strong class="jxr_keyword">private</strong> <a href="../../../../../../org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.html">PolynomialSplineFunction</a> interpolateHermiteSorted(<strong class="jxr_keyword">double</strong>[] xvals,
<a class="jxr_linenumber" name="L173" href="#L173">173</a>                                                               <strong class="jxr_keyword">double</strong>[] yvals,
<a class="jxr_linenumber" name="L174" href="#L174">174</a>                                                               <strong class="jxr_keyword">double</strong>[] firstDerivatives) {
<a class="jxr_linenumber" name="L175" href="#L175">175</a>         <strong class="jxr_keyword">if</strong> (xvals.length != yvals.length) {
<a class="jxr_linenumber" name="L176" href="#L176">176</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/exception/DimensionMismatchException.html">DimensionMismatchException</a>(xvals.length, yvals.length);
<a class="jxr_linenumber" name="L177" href="#L177">177</a>         }
<a class="jxr_linenumber" name="L178" href="#L178">178</a> 
<a class="jxr_linenumber" name="L179" href="#L179">179</a>         <strong class="jxr_keyword">if</strong> (xvals.length != firstDerivatives.length) {
<a class="jxr_linenumber" name="L180" href="#L180">180</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/exception/DimensionMismatchException.html">DimensionMismatchException</a>(xvals.length,
<a class="jxr_linenumber" name="L181" href="#L181">181</a>                                                  firstDerivatives.length);
<a class="jxr_linenumber" name="L182" href="#L182">182</a>         }
<a class="jxr_linenumber" name="L183" href="#L183">183</a> 
<a class="jxr_linenumber" name="L184" href="#L184">184</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> minimumLength = 2;
<a class="jxr_linenumber" name="L185" href="#L185">185</a>         <strong class="jxr_keyword">if</strong> (xvals.length &lt; minimumLength) {
<a class="jxr_linenumber" name="L186" href="#L186">186</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/exception/NumberIsTooSmallException.html">NumberIsTooSmallException</a>(LocalizedFormats.NUMBER_OF_POINTS,
<a class="jxr_linenumber" name="L187" href="#L187">187</a>                                                 xvals.length, minimumLength,
<a class="jxr_linenumber" name="L188" href="#L188">188</a>                                                 <strong class="jxr_keyword">true</strong>);
<a class="jxr_linenumber" name="L189" href="#L189">189</a>         }
<a class="jxr_linenumber" name="L190" href="#L190">190</a> 
<a class="jxr_linenumber" name="L191" href="#L191">191</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> size = xvals.length - 1;
<a class="jxr_linenumber" name="L192" href="#L192">192</a>         <strong class="jxr_keyword">final</strong> <a href="../../../../../../org/apache/commons/math3/analysis/polynomials/PolynomialFunction.html">PolynomialFunction</a>[] polynomials = <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/analysis/polynomials/PolynomialFunction.html">PolynomialFunction</a>[size];
<a class="jxr_linenumber" name="L193" href="#L193">193</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] coefficients = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[4];
<a class="jxr_linenumber" name="L194" href="#L194">194</a> 
<a class="jxr_linenumber" name="L195" href="#L195">195</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; polynomials.length; i++) {
<a class="jxr_linenumber" name="L196" href="#L196">196</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> w = xvals[i + 1] - xvals[i];
<a class="jxr_linenumber" name="L197" href="#L197">197</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> w2 = w * w;
<a class="jxr_linenumber" name="L198" href="#L198">198</a> 
<a class="jxr_linenumber" name="L199" href="#L199">199</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> yv = yvals[i];
<a class="jxr_linenumber" name="L200" href="#L200">200</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> yvP = yvals[i + 1];
<a class="jxr_linenumber" name="L201" href="#L201">201</a> 
<a class="jxr_linenumber" name="L202" href="#L202">202</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> fd = firstDerivatives[i];
<a class="jxr_linenumber" name="L203" href="#L203">203</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> fdP = firstDerivatives[i + 1];
<a class="jxr_linenumber" name="L204" href="#L204">204</a> 
<a class="jxr_linenumber" name="L205" href="#L205">205</a>             coefficients[0] = yv;
<a class="jxr_linenumber" name="L206" href="#L206">206</a>             coefficients[1] = firstDerivatives[i];
<a class="jxr_linenumber" name="L207" href="#L207">207</a>             coefficients[2] = (3 * (yvP - yv) / w - 2 * fd - fdP) / w;
<a class="jxr_linenumber" name="L208" href="#L208">208</a>             coefficients[3] = (2 * (yv - yvP) / w + fd + fdP) / w2;
<a class="jxr_linenumber" name="L209" href="#L209">209</a>             polynomials[i] = <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/analysis/polynomials/PolynomialFunction.html">PolynomialFunction</a>(coefficients);
<a class="jxr_linenumber" name="L210" href="#L210">210</a>         }
<a class="jxr_linenumber" name="L211" href="#L211">211</a> 
<a class="jxr_linenumber" name="L212" href="#L212">212</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.html">PolynomialSplineFunction</a>(xvals, polynomials);
<a class="jxr_linenumber" name="L213" href="#L213">213</a> 
<a class="jxr_linenumber" name="L214" href="#L214">214</a>     }
<a class="jxr_linenumber" name="L215" href="#L215">215</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2003&#x2013;2016 <a href="http://www.apache.org/">The Apache Software Foundation</a>. All rights reserved.</div>
</body>
</html>
