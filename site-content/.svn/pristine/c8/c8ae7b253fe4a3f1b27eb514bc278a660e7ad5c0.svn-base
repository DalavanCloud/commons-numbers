<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>EulerStepInterpolatorTest xref</title>
<link type="text/css" rel="stylesheet" href="../../../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../testapidocs/org/apache/commons/math3/ode/nonstiff/EulerStepInterpolatorTest.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Licensed to the Apache Software Foundation (ASF) under one or more</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> * contributor license agreements.  See the NOTICE file distributed with</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * this work for additional information regarding copyright ownership.</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * The ASF licenses this file to You under the Apache License, Version 2.0</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * (the "License"); you may not use this file except in compliance with</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> * the License.  You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *      <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  <strong class="jxr_keyword">package</strong> org.apache.commons.math3.ode.nonstiff;
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> java.io.ByteArrayInputStream;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> java.io.ByteArrayOutputStream;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <strong class="jxr_keyword">import</strong> java.io.IOException;
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> java.io.ObjectInputStream;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> java.io.ObjectOutputStream;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <strong class="jxr_keyword">import</strong> java.util.Random;
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.DimensionMismatchException;
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.MaxCountExceededException;
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.NoBracketingException;
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.NumberIsTooSmallException;
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.ode.ContinuousOutputModel;
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.ode.EquationsMapper;
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.ode.TestProblem1;
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.ode.TestProblem3;
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.ode.sampling.StepHandler;
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.ode.sampling.StepInterpolatorTestUtils;
<a class="jxr_linenumber" name="L38" href="#L38">38</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.util.FastMath;
<a class="jxr_linenumber" name="L39" href="#L39">39</a>  <strong class="jxr_keyword">import</strong> org.junit.Assert;
<a class="jxr_linenumber" name="L40" href="#L40">40</a>  <strong class="jxr_keyword">import</strong> org.junit.Test;
<a class="jxr_linenumber" name="L41" href="#L41">41</a>  
<a class="jxr_linenumber" name="L42" href="#L42">42</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../../org/apache/commons/math3/ode/nonstiff/EulerStepInterpolatorTest.html">EulerStepInterpolatorTest</a> {
<a class="jxr_linenumber" name="L43" href="#L43">43</a>  
<a class="jxr_linenumber" name="L44" href="#L44">44</a>    @Test
<a class="jxr_linenumber" name="L45" href="#L45">45</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> noReset() <strong class="jxr_keyword">throws</strong> MaxCountExceededException {
<a class="jxr_linenumber" name="L46" href="#L46">46</a>  
<a class="jxr_linenumber" name="L47" href="#L47">47</a>      <strong class="jxr_keyword">double</strong>[]   y    =   { 0.0, 1.0, -2.0 };
<a class="jxr_linenumber" name="L48" href="#L48">48</a>      <strong class="jxr_keyword">double</strong>[][] yDot = { { 1.0, 2.0, -2.0 } };
<a class="jxr_linenumber" name="L49" href="#L49">49</a>      EulerStepInterpolator interpolator = <strong class="jxr_keyword">new</strong> EulerStepInterpolator();
<a class="jxr_linenumber" name="L50" href="#L50">50</a>      interpolator.reinitialize(<strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/ode/nonstiff/EulerStepInterpolatorTest.html">DummyIntegrator</a>(interpolator), y, yDot, <strong class="jxr_keyword">true</strong>,
<a class="jxr_linenumber" name="L51" href="#L51">51</a>                                <strong class="jxr_keyword">new</strong> EquationsMapper(0, y.length),
<a class="jxr_linenumber" name="L52" href="#L52">52</a>                                <strong class="jxr_keyword">new</strong> EquationsMapper[0]);
<a class="jxr_linenumber" name="L53" href="#L53">53</a>      interpolator.storeTime(0);
<a class="jxr_linenumber" name="L54" href="#L54">54</a>      interpolator.shift();
<a class="jxr_linenumber" name="L55" href="#L55">55</a>      interpolator.storeTime(1);
<a class="jxr_linenumber" name="L56" href="#L56">56</a>  
<a class="jxr_linenumber" name="L57" href="#L57">57</a>      <strong class="jxr_keyword">double</strong>[] result = interpolator.getInterpolatedState();
<a class="jxr_linenumber" name="L58" href="#L58">58</a>      <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; result.length; ++i) {
<a class="jxr_linenumber" name="L59" href="#L59">59</a>        Assert.assertTrue(FastMath.abs(result[i] - y[i]) &lt; 1.0e-10);
<a class="jxr_linenumber" name="L60" href="#L60">60</a>      }
<a class="jxr_linenumber" name="L61" href="#L61">61</a>  
<a class="jxr_linenumber" name="L62" href="#L62">62</a>    }
<a class="jxr_linenumber" name="L63" href="#L63">63</a>  
<a class="jxr_linenumber" name="L64" href="#L64">64</a>    @Test
<a class="jxr_linenumber" name="L65" href="#L65">65</a>    <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> interpolationAtBounds() <strong class="jxr_keyword">throws</strong> MaxCountExceededException {
<a class="jxr_linenumber" name="L66" href="#L66">66</a>  
<a class="jxr_linenumber" name="L67" href="#L67">67</a>      <strong class="jxr_keyword">double</strong>   t0 = 0;
<a class="jxr_linenumber" name="L68" href="#L68">68</a>      <strong class="jxr_keyword">double</strong>[] y0 = {0.0, 1.0, -2.0};
<a class="jxr_linenumber" name="L69" href="#L69">69</a>  
<a class="jxr_linenumber" name="L70" href="#L70">70</a>      <strong class="jxr_keyword">double</strong>[] y = y0.clone();
<a class="jxr_linenumber" name="L71" href="#L71">71</a>      <strong class="jxr_keyword">double</strong>[][] yDot = { <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[y0.length] };
<a class="jxr_linenumber" name="L72" href="#L72">72</a>      EulerStepInterpolator interpolator = <strong class="jxr_keyword">new</strong> EulerStepInterpolator();
<a class="jxr_linenumber" name="L73" href="#L73">73</a>      interpolator.reinitialize(<strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/ode/nonstiff/EulerStepInterpolatorTest.html">DummyIntegrator</a>(interpolator), y, yDot, <strong class="jxr_keyword">true</strong>,
<a class="jxr_linenumber" name="L74" href="#L74">74</a>                                <strong class="jxr_keyword">new</strong> EquationsMapper(0, y.length),
<a class="jxr_linenumber" name="L75" href="#L75">75</a>                                <strong class="jxr_keyword">new</strong> EquationsMapper[0]);
<a class="jxr_linenumber" name="L76" href="#L76">76</a>      interpolator.storeTime(t0);
<a class="jxr_linenumber" name="L77" href="#L77">77</a>  
<a class="jxr_linenumber" name="L78" href="#L78">78</a>      <strong class="jxr_keyword">double</strong> dt = 1.0;
<a class="jxr_linenumber" name="L79" href="#L79">79</a>      interpolator.shift();
<a class="jxr_linenumber" name="L80" href="#L80">80</a>      y[0] =  1.0;
<a class="jxr_linenumber" name="L81" href="#L81">81</a>      y[1] =  3.0;
<a class="jxr_linenumber" name="L82" href="#L82">82</a>      y[2] = -4.0;
<a class="jxr_linenumber" name="L83" href="#L83">83</a>      yDot[0][0] = (y[0] - y0[0]) / dt;
<a class="jxr_linenumber" name="L84" href="#L84">84</a>      yDot[0][1] = (y[1] - y0[1]) / dt;
<a class="jxr_linenumber" name="L85" href="#L85">85</a>      yDot[0][2] = (y[2] - y0[2]) / dt;
<a class="jxr_linenumber" name="L86" href="#L86">86</a>      interpolator.storeTime(t0 + dt);
<a class="jxr_linenumber" name="L87" href="#L87">87</a>  
<a class="jxr_linenumber" name="L88" href="#L88">88</a>      interpolator.setInterpolatedTime(interpolator.getPreviousTime());
<a class="jxr_linenumber" name="L89" href="#L89">89</a>      <strong class="jxr_keyword">double</strong>[] result = interpolator.getInterpolatedState();
<a class="jxr_linenumber" name="L90" href="#L90">90</a>      <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; result.length; ++i) {
<a class="jxr_linenumber" name="L91" href="#L91">91</a>          Assert.assertTrue(FastMath.abs(result[i] - y0[i]) &lt; 1.0e-10);
<a class="jxr_linenumber" name="L92" href="#L92">92</a>      }
<a class="jxr_linenumber" name="L93" href="#L93">93</a>  
<a class="jxr_linenumber" name="L94" href="#L94">94</a>      interpolator.setInterpolatedTime(interpolator.getCurrentTime());
<a class="jxr_linenumber" name="L95" href="#L95">95</a>      result = interpolator.getInterpolatedState();
<a class="jxr_linenumber" name="L96" href="#L96">96</a>      <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; result.length; ++i) {
<a class="jxr_linenumber" name="L97" href="#L97">97</a>        Assert.assertTrue(FastMath.abs(result[i] - y[i]) &lt; 1.0e-10);
<a class="jxr_linenumber" name="L98" href="#L98">98</a>      }
<a class="jxr_linenumber" name="L99" href="#L99">99</a>  
<a class="jxr_linenumber" name="L100" href="#L100">100</a>   }
<a class="jxr_linenumber" name="L101" href="#L101">101</a> 
<a class="jxr_linenumber" name="L102" href="#L102">102</a>   @Test
<a class="jxr_linenumber" name="L103" href="#L103">103</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> interpolationInside() <strong class="jxr_keyword">throws</strong> MaxCountExceededException {
<a class="jxr_linenumber" name="L104" href="#L104">104</a> 
<a class="jxr_linenumber" name="L105" href="#L105">105</a>     <strong class="jxr_keyword">double</strong>[]   y    =   { 0.0, 1.0, -2.0 };
<a class="jxr_linenumber" name="L106" href="#L106">106</a>     <strong class="jxr_keyword">double</strong>[][] yDot = { { 1.0, 2.0, -2.0 } };
<a class="jxr_linenumber" name="L107" href="#L107">107</a>     EulerStepInterpolator interpolator = <strong class="jxr_keyword">new</strong> EulerStepInterpolator();
<a class="jxr_linenumber" name="L108" href="#L108">108</a>     interpolator.reinitialize(<strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/ode/nonstiff/EulerStepInterpolatorTest.html">DummyIntegrator</a>(interpolator), y, yDot, <strong class="jxr_keyword">true</strong>,
<a class="jxr_linenumber" name="L109" href="#L109">109</a>                               <strong class="jxr_keyword">new</strong> EquationsMapper(0, y.length),
<a class="jxr_linenumber" name="L110" href="#L110">110</a>                               <strong class="jxr_keyword">new</strong> EquationsMapper[0]);
<a class="jxr_linenumber" name="L111" href="#L111">111</a>     interpolator.storeTime(0);
<a class="jxr_linenumber" name="L112" href="#L112">112</a>     interpolator.shift();
<a class="jxr_linenumber" name="L113" href="#L113">113</a>     y[0] =  1.0;
<a class="jxr_linenumber" name="L114" href="#L114">114</a>     y[1] =  3.0;
<a class="jxr_linenumber" name="L115" href="#L115">115</a>     y[2] = -4.0;
<a class="jxr_linenumber" name="L116" href="#L116">116</a>     interpolator.storeTime(1);
<a class="jxr_linenumber" name="L117" href="#L117">117</a> 
<a class="jxr_linenumber" name="L118" href="#L118">118</a>     interpolator.setInterpolatedTime(0.1);
<a class="jxr_linenumber" name="L119" href="#L119">119</a>     <strong class="jxr_keyword">double</strong>[] result = interpolator.getInterpolatedState();
<a class="jxr_linenumber" name="L120" href="#L120">120</a>     Assert.assertTrue(FastMath.abs(result[0] - 0.1) &lt; 1.0e-10);
<a class="jxr_linenumber" name="L121" href="#L121">121</a>     Assert.assertTrue(FastMath.abs(result[1] - 1.2) &lt; 1.0e-10);
<a class="jxr_linenumber" name="L122" href="#L122">122</a>     Assert.assertTrue(FastMath.abs(result[2] + 2.2) &lt; 1.0e-10);
<a class="jxr_linenumber" name="L123" href="#L123">123</a> 
<a class="jxr_linenumber" name="L124" href="#L124">124</a>     interpolator.setInterpolatedTime(0.5);
<a class="jxr_linenumber" name="L125" href="#L125">125</a>     result = interpolator.getInterpolatedState();
<a class="jxr_linenumber" name="L126" href="#L126">126</a>     Assert.assertTrue(FastMath.abs(result[0] - 0.5) &lt; 1.0e-10);
<a class="jxr_linenumber" name="L127" href="#L127">127</a>     Assert.assertTrue(FastMath.abs(result[1] - 2.0) &lt; 1.0e-10);
<a class="jxr_linenumber" name="L128" href="#L128">128</a>     Assert.assertTrue(FastMath.abs(result[2] + 3.0) &lt; 1.0e-10);
<a class="jxr_linenumber" name="L129" href="#L129">129</a> 
<a class="jxr_linenumber" name="L130" href="#L130">130</a>   }
<a class="jxr_linenumber" name="L131" href="#L131">131</a> 
<a class="jxr_linenumber" name="L132" href="#L132">132</a>   @Test
<a class="jxr_linenumber" name="L133" href="#L133">133</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> derivativesConsistency()
<a class="jxr_linenumber" name="L134" href="#L134">134</a>       <strong class="jxr_keyword">throws</strong> DimensionMismatchException, NumberIsTooSmallException,
<a class="jxr_linenumber" name="L135" href="#L135">135</a>              MaxCountExceededException, NoBracketingException {
<a class="jxr_linenumber" name="L136" href="#L136">136</a>     <a href="../../../../../../org/apache/commons/math3/ode/TestProblem3.html">TestProblem3</a> pb = <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/ode/TestProblem3.html">TestProblem3</a>();
<a class="jxr_linenumber" name="L137" href="#L137">137</a>     <strong class="jxr_keyword">double</strong> step = (pb.getFinalTime() - pb.getInitialTime()) * 0.001;
<a class="jxr_linenumber" name="L138" href="#L138">138</a>     EulerIntegrator integ = <strong class="jxr_keyword">new</strong> EulerIntegrator(step);
<a class="jxr_linenumber" name="L139" href="#L139">139</a>     StepInterpolatorTestUtils.checkDerivativesConsistency(integ, pb, 0.01, 5.1e-12);
<a class="jxr_linenumber" name="L140" href="#L140">140</a>   }
<a class="jxr_linenumber" name="L141" href="#L141">141</a> 
<a class="jxr_linenumber" name="L142" href="#L142">142</a>   @Test
<a class="jxr_linenumber" name="L143" href="#L143">143</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> serialization()
<a class="jxr_linenumber" name="L144" href="#L144">144</a>     <strong class="jxr_keyword">throws</strong> IOException, ClassNotFoundException,
<a class="jxr_linenumber" name="L145" href="#L145">145</a>            DimensionMismatchException, NumberIsTooSmallException,
<a class="jxr_linenumber" name="L146" href="#L146">146</a>            MaxCountExceededException, NoBracketingException {
<a class="jxr_linenumber" name="L147" href="#L147">147</a> 
<a class="jxr_linenumber" name="L148" href="#L148">148</a>     <a href="../../../../../../org/apache/commons/math3/ode/TestProblem1.html">TestProblem1</a> pb = <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/ode/TestProblem1.html">TestProblem1</a>();
<a class="jxr_linenumber" name="L149" href="#L149">149</a>     <strong class="jxr_keyword">double</strong> step = (pb.getFinalTime() - pb.getInitialTime()) * 0.001;
<a class="jxr_linenumber" name="L150" href="#L150">150</a>     EulerIntegrator integ = <strong class="jxr_keyword">new</strong> EulerIntegrator(step);
<a class="jxr_linenumber" name="L151" href="#L151">151</a>     integ.addStepHandler(<strong class="jxr_keyword">new</strong> ContinuousOutputModel());
<a class="jxr_linenumber" name="L152" href="#L152">152</a>     integ.integrate(pb,
<a class="jxr_linenumber" name="L153" href="#L153">153</a>                     pb.getInitialTime(), pb.getInitialState(),
<a class="jxr_linenumber" name="L154" href="#L154">154</a>                     pb.getFinalTime(), <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[pb.getDimension()]);
<a class="jxr_linenumber" name="L155" href="#L155">155</a> 
<a class="jxr_linenumber" name="L156" href="#L156">156</a>     ByteArrayOutputStream bos = <strong class="jxr_keyword">new</strong> ByteArrayOutputStream();
<a class="jxr_linenumber" name="L157" href="#L157">157</a>     ObjectOutputStream    oos = <strong class="jxr_keyword">new</strong> ObjectOutputStream(bos);
<a class="jxr_linenumber" name="L158" href="#L158">158</a>     <strong class="jxr_keyword">for</strong> (StepHandler handler : integ.getStepHandlers()) {
<a class="jxr_linenumber" name="L159" href="#L159">159</a>         oos.writeObject(handler);
<a class="jxr_linenumber" name="L160" href="#L160">160</a>     }
<a class="jxr_linenumber" name="L161" href="#L161">161</a> 
<a class="jxr_linenumber" name="L162" href="#L162">162</a>     ByteArrayInputStream  bis = <strong class="jxr_keyword">new</strong> ByteArrayInputStream(bos.toByteArray());
<a class="jxr_linenumber" name="L163" href="#L163">163</a>     ObjectInputStream     ois = <strong class="jxr_keyword">new</strong> ObjectInputStream(bis);
<a class="jxr_linenumber" name="L164" href="#L164">164</a>     ContinuousOutputModel cm  = (ContinuousOutputModel) ois.readObject();
<a class="jxr_linenumber" name="L165" href="#L165">165</a> 
<a class="jxr_linenumber" name="L166" href="#L166">166</a>     Random random = <strong class="jxr_keyword">new</strong> Random(347588535632l);
<a class="jxr_linenumber" name="L167" href="#L167">167</a>     <strong class="jxr_keyword">double</strong> maxError = 0.0;
<a class="jxr_linenumber" name="L168" href="#L168">168</a>     <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; 1000; ++i) {
<a class="jxr_linenumber" name="L169" href="#L169">169</a>       <strong class="jxr_keyword">double</strong> r = random.nextDouble();
<a class="jxr_linenumber" name="L170" href="#L170">170</a>       <strong class="jxr_keyword">double</strong> time = r * pb.getInitialTime() + (1.0 - r) * pb.getFinalTime();
<a class="jxr_linenumber" name="L171" href="#L171">171</a>       cm.setInterpolatedTime(time);
<a class="jxr_linenumber" name="L172" href="#L172">172</a>       <strong class="jxr_keyword">double</strong>[] interpolatedY = cm.getInterpolatedState ();
<a class="jxr_linenumber" name="L173" href="#L173">173</a>       <strong class="jxr_keyword">double</strong>[] theoreticalY  = pb.computeTheoreticalState(time);
<a class="jxr_linenumber" name="L174" href="#L174">174</a>       <strong class="jxr_keyword">double</strong> dx = interpolatedY[0] - theoreticalY[0];
<a class="jxr_linenumber" name="L175" href="#L175">175</a>       <strong class="jxr_keyword">double</strong> dy = interpolatedY[1] - theoreticalY[1];
<a class="jxr_linenumber" name="L176" href="#L176">176</a>       <strong class="jxr_keyword">double</strong> error = dx * dx + dy * dy;
<a class="jxr_linenumber" name="L177" href="#L177">177</a>       <strong class="jxr_keyword">if</strong> (error &gt; maxError) {
<a class="jxr_linenumber" name="L178" href="#L178">178</a>         maxError = error;
<a class="jxr_linenumber" name="L179" href="#L179">179</a>       }
<a class="jxr_linenumber" name="L180" href="#L180">180</a>     }
<a class="jxr_linenumber" name="L181" href="#L181">181</a>     Assert.assertTrue(maxError &lt; 0.001);
<a class="jxr_linenumber" name="L182" href="#L182">182</a> 
<a class="jxr_linenumber" name="L183" href="#L183">183</a>   }
<a class="jxr_linenumber" name="L184" href="#L184">184</a> 
<a class="jxr_linenumber" name="L185" href="#L185">185</a>   <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../../org/apache/commons/math3/ode/nonstiff/EulerStepInterpolatorTest.html">DummyIntegrator</a> <strong class="jxr_keyword">extends</strong> RungeKuttaIntegrator {
<a class="jxr_linenumber" name="L186" href="#L186">186</a> 
<a class="jxr_linenumber" name="L187" href="#L187">187</a> 
<a class="jxr_linenumber" name="L188" href="#L188">188</a>       <strong class="jxr_keyword">protected</strong> <a href="../../../../../../org/apache/commons/math3/ode/nonstiff/EulerStepInterpolatorTest.html">DummyIntegrator</a>(RungeKuttaStepInterpolator prototype) {
<a class="jxr_linenumber" name="L189" href="#L189">189</a>           <strong class="jxr_keyword">super</strong>(<span class="jxr_string">"dummy"</span>, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[0], <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[0][0], <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[0], prototype, Double.NaN);
<a class="jxr_linenumber" name="L190" href="#L190">190</a>       }
<a class="jxr_linenumber" name="L191" href="#L191">191</a> 
<a class="jxr_linenumber" name="L192" href="#L192">192</a>   }
<a class="jxr_linenumber" name="L193" href="#L193">193</a> 
<a class="jxr_linenumber" name="L194" href="#L194">194</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2003&#x2013;2016 <a href="http://www.apache.org/">The Apache Software Foundation</a>. All rights reserved.</div>
</body>
</html>
