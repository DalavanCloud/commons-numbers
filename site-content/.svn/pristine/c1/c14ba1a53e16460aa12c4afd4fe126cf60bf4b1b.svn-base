<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Beta xref</title>
<link type="text/css" rel="stylesheet" href="../../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../apidocs/org/apache/commons/math3/special/Beta.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Licensed to the Apache Software Foundation (ASF) under one or more</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> * contributor license agreements.  See the NOTICE file distributed with</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * this work for additional information regarding copyright ownership.</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * The ASF licenses this file to You under the Apache License, Version 2.0</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * (the "License"); you may not use this file except in compliance with</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> * the License.  You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *      <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">package</strong> org.apache.commons.math3.special;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.NumberIsTooSmallException;
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.OutOfRangeException;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.util.ContinuedFraction;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.util.FastMath;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <em class="jxr_javadoccomment"> * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <em class="jxr_javadoccomment"> * This is a utility class that provides computation methods related to the</em>
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <em class="jxr_javadoccomment"> * Beta family of functions.</em>
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <em class="jxr_javadoccomment"> * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <em class="jxr_javadoccomment"> * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <em class="jxr_javadoccomment"> * Implementation of {@link #logBeta(double, double)} is based on the</em>
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <em class="jxr_javadoccomment"> * algorithms described in</em>
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <em class="jxr_javadoccomment"> * &lt;ul&gt;</em>
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <em class="jxr_javadoccomment"> * &lt;li&gt;&lt;a href="<a href="http://dx.doi.org/10.1145/22721.23109" target="alexandria_uri">http://dx.doi.org/10.1145/22721.23109</a>"&gt;Didonato and Morris</em>
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <em class="jxr_javadoccomment"> *     (1986)&lt;/a&gt;, &lt;em&gt;Computation of the Incomplete Gamma Function Ratios</em>
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  <em class="jxr_javadoccomment"> *     and their Inverse&lt;/em&gt;, TOMS 12(4), 377-393,&lt;/li&gt;</em>
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  <em class="jxr_javadoccomment"> * &lt;li&gt;&lt;a href="<a href="http://dx.doi.org/10.1145/131766.131776" target="alexandria_uri">http://dx.doi.org/10.1145/131766.131776</a>"&gt;Didonato and Morris</em>
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  <em class="jxr_javadoccomment"> *     (1992)&lt;/a&gt;, &lt;em&gt;Algorithm 708: Significant Digit Computation of the</em>
<a class="jxr_linenumber" name="L38" href="#L38">38</a>  <em class="jxr_javadoccomment"> *     Incomplete Beta Function Ratios&lt;/em&gt;, TOMS 18(3), 360-373,&lt;/li&gt;</em>
<a class="jxr_linenumber" name="L39" href="#L39">39</a>  <em class="jxr_javadoccomment"> * &lt;/ul&gt;</em>
<a class="jxr_linenumber" name="L40" href="#L40">40</a>  <em class="jxr_javadoccomment"> * and implemented in the</em>
<a class="jxr_linenumber" name="L41" href="#L41">41</a>  <em class="jxr_javadoccomment"> * &lt;a href="<a href="http://www.dtic.mil/docs/citations/ADA476840" target="alexandria_uri">http://www.dtic.mil/docs/citations/ADA476840</a>"&gt;NSWC Library of Mathematical Functions&lt;/a&gt;,</em>
<a class="jxr_linenumber" name="L42" href="#L42">42</a>  <em class="jxr_javadoccomment"> * available</em>
<a class="jxr_linenumber" name="L43" href="#L43">43</a>  <em class="jxr_javadoccomment"> * &lt;a href="<a href="http://www.ualberta.ca/CNS/RESEARCH/Software/NumericalNSWC/site.html" target="alexandria_uri">http://www.ualberta.ca/CNS/RESEARCH/Software/NumericalNSWC/site.html</a>"&gt;here&lt;/a&gt;.</em>
<a class="jxr_linenumber" name="L44" href="#L44">44</a>  <em class="jxr_javadoccomment"> * This library is "approved for public release", and the</em>
<a class="jxr_linenumber" name="L45" href="#L45">45</a>  <em class="jxr_javadoccomment"> * &lt;a href="<a href="http://www.dtic.mil/dtic/pdf/announcements/CopyrightGuidance.pdf" target="alexandria_uri">http://www.dtic.mil/dtic/pdf/announcements/CopyrightGuidance.pdf</a>"&gt;Copyright guidance&lt;/a&gt;</em>
<a class="jxr_linenumber" name="L46" href="#L46">46</a>  <em class="jxr_javadoccomment"> * indicates that unless otherwise stated in the code, all FORTRAN functions in</em>
<a class="jxr_linenumber" name="L47" href="#L47">47</a>  <em class="jxr_javadoccomment"> * this library are license free. Since no such notice appears in the code these</em>
<a class="jxr_linenumber" name="L48" href="#L48">48</a>  <em class="jxr_javadoccomment"> * functions can safely be ported to Commons-Math.</em>
<a class="jxr_linenumber" name="L49" href="#L49">49</a>  <em class="jxr_javadoccomment"> * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L50" href="#L50">50</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L51" href="#L51">51</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L52" href="#L52">52</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L53" href="#L53">53</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../org/apache/commons/math3/special/Beta.html">Beta</a> {
<a class="jxr_linenumber" name="L54" href="#L54">54</a>      <em class="jxr_javadoccomment">/** Maximum allowed numerical error. */</em>
<a class="jxr_linenumber" name="L55" href="#L55">55</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> DEFAULT_EPSILON = 1E-14;
<a class="jxr_linenumber" name="L56" href="#L56">56</a>  
<a class="jxr_linenumber" name="L57" href="#L57">57</a>      <em class="jxr_javadoccomment">/** The constant value of ½log 2π. */</em>
<a class="jxr_linenumber" name="L58" href="#L58">58</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> HALF_LOG_TWO_PI = .9189385332046727;
<a class="jxr_linenumber" name="L59" href="#L59">59</a>  
<a class="jxr_linenumber" name="L60" href="#L60">60</a>      <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L61" href="#L61">61</a>  <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L62" href="#L62">62</a>  <em class="jxr_javadoccomment">     * The coefficients of the series expansion of the Δ function. This function</em>
<a class="jxr_linenumber" name="L63" href="#L63">63</a>  <em class="jxr_javadoccomment">     * is defined as follows</em>
<a class="jxr_linenumber" name="L64" href="#L64">64</a>  <em class="jxr_javadoccomment">     * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L65" href="#L65">65</a>  <em class="jxr_javadoccomment">     * &lt;center&gt;Δ(x) = log Γ(x) - (x - 0.5) log a + a - 0.5 log 2π,&lt;/center&gt;</em>
<a class="jxr_linenumber" name="L66" href="#L66">66</a>  <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L67" href="#L67">67</a>  <em class="jxr_javadoccomment">     * see equation (23) in Didonato and Morris (1992). The series expansion,</em>
<a class="jxr_linenumber" name="L68" href="#L68">68</a>  <em class="jxr_javadoccomment">     * which applies for x ≥ 10, reads</em>
<a class="jxr_linenumber" name="L69" href="#L69">69</a>  <em class="jxr_javadoccomment">     * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L70" href="#L70">70</a>  <em class="jxr_javadoccomment">     * &lt;pre&gt;</em>
<a class="jxr_linenumber" name="L71" href="#L71">71</a>  <em class="jxr_javadoccomment">     *                 14</em>
<a class="jxr_linenumber" name="L72" href="#L72">72</a>  <em class="jxr_javadoccomment">     *                ====</em>
<a class="jxr_linenumber" name="L73" href="#L73">73</a>  <em class="jxr_javadoccomment">     *             1  \                2 n</em>
<a class="jxr_linenumber" name="L74" href="#L74">74</a>  <em class="jxr_javadoccomment">     *     Δ(x) = ---  &gt;    d  (10 / x)</em>
<a class="jxr_linenumber" name="L75" href="#L75">75</a>  <em class="jxr_javadoccomment">     *             x  /      n</em>
<a class="jxr_linenumber" name="L76" href="#L76">76</a>  <em class="jxr_javadoccomment">     *                ====</em>
<a class="jxr_linenumber" name="L77" href="#L77">77</a>  <em class="jxr_javadoccomment">     *                n = 0</em>
<a class="jxr_linenumber" name="L78" href="#L78">78</a>  <em class="jxr_javadoccomment">     * &lt;pre&gt;</em>
<a class="jxr_linenumber" name="L79" href="#L79">79</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L80" href="#L80">80</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] DELTA = {
<a class="jxr_linenumber" name="L81" href="#L81">81</a>          .833333333333333333333333333333E-01,
<a class="jxr_linenumber" name="L82" href="#L82">82</a>          -.277777777777777777777777752282E-04,
<a class="jxr_linenumber" name="L83" href="#L83">83</a>          .793650793650793650791732130419E-07,
<a class="jxr_linenumber" name="L84" href="#L84">84</a>          -.595238095238095232389839236182E-09,
<a class="jxr_linenumber" name="L85" href="#L85">85</a>          .841750841750832853294451671990E-11,
<a class="jxr_linenumber" name="L86" href="#L86">86</a>          -.191752691751854612334149171243E-12,
<a class="jxr_linenumber" name="L87" href="#L87">87</a>          .641025640510325475730918472625E-14,
<a class="jxr_linenumber" name="L88" href="#L88">88</a>          -.295506514125338232839867823991E-15,
<a class="jxr_linenumber" name="L89" href="#L89">89</a>          .179643716359402238723287696452E-16,
<a class="jxr_linenumber" name="L90" href="#L90">90</a>          -.139228964661627791231203060395E-17,
<a class="jxr_linenumber" name="L91" href="#L91">91</a>          .133802855014020915603275339093E-18,
<a class="jxr_linenumber" name="L92" href="#L92">92</a>          -.154246009867966094273710216533E-19,
<a class="jxr_linenumber" name="L93" href="#L93">93</a>          .197701992980957427278370133333E-20,
<a class="jxr_linenumber" name="L94" href="#L94">94</a>          -.234065664793997056856992426667E-21,
<a class="jxr_linenumber" name="L95" href="#L95">95</a>          .171348014966398575409015466667E-22
<a class="jxr_linenumber" name="L96" href="#L96">96</a>      };
<a class="jxr_linenumber" name="L97" href="#L97">97</a>  
<a class="jxr_linenumber" name="L98" href="#L98">98</a>      <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L99" href="#L99">99</a>  <em class="jxr_javadoccomment">     * Default constructor.  Prohibit instantiation.</em>
<a class="jxr_linenumber" name="L100" href="#L100">100</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L101" href="#L101">101</a>     <strong class="jxr_keyword">private</strong> <a href="../../../../../org/apache/commons/math3/special/Beta.html">Beta</a>() {}
<a class="jxr_linenumber" name="L102" href="#L102">102</a> 
<a class="jxr_linenumber" name="L103" href="#L103">103</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L104" href="#L104">104</a> <em class="jxr_javadoccomment">     * Returns the</em>
<a class="jxr_linenumber" name="L105" href="#L105">105</a> <em class="jxr_javadoccomment">     * &lt;a href="<a href="http://mathworld.wolfram.com/RegularizedBetaFunction.html" target="alexandria_uri">http://mathworld.wolfram.com/RegularizedBetaFunction.html</a>"&gt;</em>
<a class="jxr_linenumber" name="L106" href="#L106">106</a> <em class="jxr_javadoccomment">     * regularized beta function&lt;/a&gt; I(x, a, b).</em>
<a class="jxr_linenumber" name="L107" href="#L107">107</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L108" href="#L108">108</a> <em class="jxr_javadoccomment">     * @param x Value.</em>
<a class="jxr_linenumber" name="L109" href="#L109">109</a> <em class="jxr_javadoccomment">     * @param a Parameter {@code a}.</em>
<a class="jxr_linenumber" name="L110" href="#L110">110</a> <em class="jxr_javadoccomment">     * @param b Parameter {@code b}.</em>
<a class="jxr_linenumber" name="L111" href="#L111">111</a> <em class="jxr_javadoccomment">     * @return the regularized beta function I(x, a, b).</em>
<a class="jxr_linenumber" name="L112" href="#L112">112</a> <em class="jxr_javadoccomment">     * @throws org.apache.commons.math3.exception.MaxCountExceededException</em>
<a class="jxr_linenumber" name="L113" href="#L113">113</a> <em class="jxr_javadoccomment">     * if the algorithm fails to converge.</em>
<a class="jxr_linenumber" name="L114" href="#L114">114</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L115" href="#L115">115</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">double</strong> regularizedBeta(<strong class="jxr_keyword">double</strong> x, <strong class="jxr_keyword">double</strong> a, <strong class="jxr_keyword">double</strong> b) {
<a class="jxr_linenumber" name="L116" href="#L116">116</a>         <strong class="jxr_keyword">return</strong> regularizedBeta(x, a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);
<a class="jxr_linenumber" name="L117" href="#L117">117</a>     }
<a class="jxr_linenumber" name="L118" href="#L118">118</a> 
<a class="jxr_linenumber" name="L119" href="#L119">119</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L120" href="#L120">120</a> <em class="jxr_javadoccomment">     * Returns the</em>
<a class="jxr_linenumber" name="L121" href="#L121">121</a> <em class="jxr_javadoccomment">     * &lt;a href="<a href="http://mathworld.wolfram.com/RegularizedBetaFunction.html" target="alexandria_uri">http://mathworld.wolfram.com/RegularizedBetaFunction.html</a>"&gt;</em>
<a class="jxr_linenumber" name="L122" href="#L122">122</a> <em class="jxr_javadoccomment">     * regularized beta function&lt;/a&gt; I(x, a, b).</em>
<a class="jxr_linenumber" name="L123" href="#L123">123</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L124" href="#L124">124</a> <em class="jxr_javadoccomment">     * @param x Value.</em>
<a class="jxr_linenumber" name="L125" href="#L125">125</a> <em class="jxr_javadoccomment">     * @param a Parameter {@code a}.</em>
<a class="jxr_linenumber" name="L126" href="#L126">126</a> <em class="jxr_javadoccomment">     * @param b Parameter {@code b}.</em>
<a class="jxr_linenumber" name="L127" href="#L127">127</a> <em class="jxr_javadoccomment">     * @param epsilon When the absolute value of the nth item in the</em>
<a class="jxr_linenumber" name="L128" href="#L128">128</a> <em class="jxr_javadoccomment">     * series is less than epsilon the approximation ceases to calculate</em>
<a class="jxr_linenumber" name="L129" href="#L129">129</a> <em class="jxr_javadoccomment">     * further elements in the series.</em>
<a class="jxr_linenumber" name="L130" href="#L130">130</a> <em class="jxr_javadoccomment">     * @return the regularized beta function I(x, a, b)</em>
<a class="jxr_linenumber" name="L131" href="#L131">131</a> <em class="jxr_javadoccomment">     * @throws org.apache.commons.math3.exception.MaxCountExceededException</em>
<a class="jxr_linenumber" name="L132" href="#L132">132</a> <em class="jxr_javadoccomment">     * if the algorithm fails to converge.</em>
<a class="jxr_linenumber" name="L133" href="#L133">133</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L134" href="#L134">134</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">double</strong> regularizedBeta(<strong class="jxr_keyword">double</strong> x,
<a class="jxr_linenumber" name="L135" href="#L135">135</a>                                          <strong class="jxr_keyword">double</strong> a, <strong class="jxr_keyword">double</strong> b,
<a class="jxr_linenumber" name="L136" href="#L136">136</a>                                          <strong class="jxr_keyword">double</strong> epsilon) {
<a class="jxr_linenumber" name="L137" href="#L137">137</a>         <strong class="jxr_keyword">return</strong> regularizedBeta(x, a, b, epsilon, Integer.MAX_VALUE);
<a class="jxr_linenumber" name="L138" href="#L138">138</a>     }
<a class="jxr_linenumber" name="L139" href="#L139">139</a> 
<a class="jxr_linenumber" name="L140" href="#L140">140</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L141" href="#L141">141</a> <em class="jxr_javadoccomment">     * Returns the regularized beta function I(x, a, b).</em>
<a class="jxr_linenumber" name="L142" href="#L142">142</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L143" href="#L143">143</a> <em class="jxr_javadoccomment">     * @param x the value.</em>
<a class="jxr_linenumber" name="L144" href="#L144">144</a> <em class="jxr_javadoccomment">     * @param a Parameter {@code a}.</em>
<a class="jxr_linenumber" name="L145" href="#L145">145</a> <em class="jxr_javadoccomment">     * @param b Parameter {@code b}.</em>
<a class="jxr_linenumber" name="L146" href="#L146">146</a> <em class="jxr_javadoccomment">     * @param maxIterations Maximum number of "iterations" to complete.</em>
<a class="jxr_linenumber" name="L147" href="#L147">147</a> <em class="jxr_javadoccomment">     * @return the regularized beta function I(x, a, b)</em>
<a class="jxr_linenumber" name="L148" href="#L148">148</a> <em class="jxr_javadoccomment">     * @throws org.apache.commons.math3.exception.MaxCountExceededException</em>
<a class="jxr_linenumber" name="L149" href="#L149">149</a> <em class="jxr_javadoccomment">     * if the algorithm fails to converge.</em>
<a class="jxr_linenumber" name="L150" href="#L150">150</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L151" href="#L151">151</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">double</strong> regularizedBeta(<strong class="jxr_keyword">double</strong> x,
<a class="jxr_linenumber" name="L152" href="#L152">152</a>                                          <strong class="jxr_keyword">double</strong> a, <strong class="jxr_keyword">double</strong> b,
<a class="jxr_linenumber" name="L153" href="#L153">153</a>                                          <strong class="jxr_keyword">int</strong> maxIterations) {
<a class="jxr_linenumber" name="L154" href="#L154">154</a>         <strong class="jxr_keyword">return</strong> regularizedBeta(x, a, b, DEFAULT_EPSILON, maxIterations);
<a class="jxr_linenumber" name="L155" href="#L155">155</a>     }
<a class="jxr_linenumber" name="L156" href="#L156">156</a> 
<a class="jxr_linenumber" name="L157" href="#L157">157</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L158" href="#L158">158</a> <em class="jxr_javadoccomment">     * Returns the regularized beta function I(x, a, b).</em>
<a class="jxr_linenumber" name="L159" href="#L159">159</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L160" href="#L160">160</a> <em class="jxr_javadoccomment">     * The implementation of this method is based on:</em>
<a class="jxr_linenumber" name="L161" href="#L161">161</a> <em class="jxr_javadoccomment">     * &lt;ul&gt;</em>
<a class="jxr_linenumber" name="L162" href="#L162">162</a> <em class="jxr_javadoccomment">     * &lt;li&gt;</em>
<a class="jxr_linenumber" name="L163" href="#L163">163</a> <em class="jxr_javadoccomment">     * &lt;a href="<a href="http://mathworld.wolfram.com/RegularizedBetaFunction.html" target="alexandria_uri">http://mathworld.wolfram.com/RegularizedBetaFunction.html</a>"&gt;</em>
<a class="jxr_linenumber" name="L164" href="#L164">164</a> <em class="jxr_javadoccomment">     * Regularized Beta Function&lt;/a&gt;.&lt;/li&gt;</em>
<a class="jxr_linenumber" name="L165" href="#L165">165</a> <em class="jxr_javadoccomment">     * &lt;li&gt;</em>
<a class="jxr_linenumber" name="L166" href="#L166">166</a> <em class="jxr_javadoccomment">     * &lt;a href="<a href="http://functions.wolfram.com/06.21.10.0001.01" target="alexandria_uri">http://functions.wolfram.com/06.21.10.0001.01</a>"&gt;</em>
<a class="jxr_linenumber" name="L167" href="#L167">167</a> <em class="jxr_javadoccomment">     * Regularized Beta Function&lt;/a&gt;.&lt;/li&gt;</em>
<a class="jxr_linenumber" name="L168" href="#L168">168</a> <em class="jxr_javadoccomment">     * &lt;/ul&gt;</em>
<a class="jxr_linenumber" name="L169" href="#L169">169</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L170" href="#L170">170</a> <em class="jxr_javadoccomment">     * @param x the value.</em>
<a class="jxr_linenumber" name="L171" href="#L171">171</a> <em class="jxr_javadoccomment">     * @param a Parameter {@code a}.</em>
<a class="jxr_linenumber" name="L172" href="#L172">172</a> <em class="jxr_javadoccomment">     * @param b Parameter {@code b}.</em>
<a class="jxr_linenumber" name="L173" href="#L173">173</a> <em class="jxr_javadoccomment">     * @param epsilon When the absolute value of the nth item in the</em>
<a class="jxr_linenumber" name="L174" href="#L174">174</a> <em class="jxr_javadoccomment">     * series is less than epsilon the approximation ceases to calculate</em>
<a class="jxr_linenumber" name="L175" href="#L175">175</a> <em class="jxr_javadoccomment">     * further elements in the series.</em>
<a class="jxr_linenumber" name="L176" href="#L176">176</a> <em class="jxr_javadoccomment">     * @param maxIterations Maximum number of "iterations" to complete.</em>
<a class="jxr_linenumber" name="L177" href="#L177">177</a> <em class="jxr_javadoccomment">     * @return the regularized beta function I(x, a, b)</em>
<a class="jxr_linenumber" name="L178" href="#L178">178</a> <em class="jxr_javadoccomment">     * @throws org.apache.commons.math3.exception.MaxCountExceededException</em>
<a class="jxr_linenumber" name="L179" href="#L179">179</a> <em class="jxr_javadoccomment">     * if the algorithm fails to converge.</em>
<a class="jxr_linenumber" name="L180" href="#L180">180</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L181" href="#L181">181</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">double</strong> regularizedBeta(<strong class="jxr_keyword">double</strong> x,
<a class="jxr_linenumber" name="L182" href="#L182">182</a>                                          <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> a, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> b,
<a class="jxr_linenumber" name="L183" href="#L183">183</a>                                          <strong class="jxr_keyword">double</strong> epsilon, <strong class="jxr_keyword">int</strong> maxIterations) {
<a class="jxr_linenumber" name="L184" href="#L184">184</a>         <strong class="jxr_keyword">double</strong> ret;
<a class="jxr_linenumber" name="L185" href="#L185">185</a> 
<a class="jxr_linenumber" name="L186" href="#L186">186</a>         <strong class="jxr_keyword">if</strong> (Double.isNaN(x) ||
<a class="jxr_linenumber" name="L187" href="#L187">187</a>             Double.isNaN(a) ||
<a class="jxr_linenumber" name="L188" href="#L188">188</a>             Double.isNaN(b) ||
<a class="jxr_linenumber" name="L189" href="#L189">189</a>             x &lt; 0 ||
<a class="jxr_linenumber" name="L190" href="#L190">190</a>             x &gt; 1 ||
<a class="jxr_linenumber" name="L191" href="#L191">191</a>             a &lt;= 0 ||
<a class="jxr_linenumber" name="L192" href="#L192">192</a>             b &lt;= 0) {
<a class="jxr_linenumber" name="L193" href="#L193">193</a>             ret = Double.NaN;
<a class="jxr_linenumber" name="L194" href="#L194">194</a>         } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (x &gt; (a + 1) / (2 + b + a) &amp;&amp;
<a class="jxr_linenumber" name="L195" href="#L195">195</a>                    1 - x &lt;= (b + 1) / (2 + b + a)) {
<a class="jxr_linenumber" name="L196" href="#L196">196</a>             ret = 1 - regularizedBeta(1 - x, b, a, epsilon, maxIterations);
<a class="jxr_linenumber" name="L197" href="#L197">197</a>         } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L198" href="#L198">198</a>             <a href="../../../../../org/apache/commons/math3/util/ContinuedFraction.html">ContinuedFraction</a> fraction = <strong class="jxr_keyword">new</strong> <a href="../../../../../org/apache/commons/math3/util/ContinuedFraction.html">ContinuedFraction</a>() {
<a class="jxr_linenumber" name="L199" href="#L199">199</a> 
<a class="jxr_linenumber" name="L200" href="#L200">200</a>                 <em class="jxr_javadoccomment">/** {@inheritDoc} */</em>
<a class="jxr_linenumber" name="L201" href="#L201">201</a>                 @Override
<a class="jxr_linenumber" name="L202" href="#L202">202</a>                 <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">double</strong> getB(<strong class="jxr_keyword">int</strong> n, <strong class="jxr_keyword">double</strong> x) {
<a class="jxr_linenumber" name="L203" href="#L203">203</a>                     <strong class="jxr_keyword">double</strong> ret;
<a class="jxr_linenumber" name="L204" href="#L204">204</a>                     <strong class="jxr_keyword">double</strong> m;
<a class="jxr_linenumber" name="L205" href="#L205">205</a>                     <strong class="jxr_keyword">if</strong> (n % 2 == 0) { <em class="jxr_comment">// even</em>
<a class="jxr_linenumber" name="L206" href="#L206">206</a>                         m = n / 2.0;
<a class="jxr_linenumber" name="L207" href="#L207">207</a>                         ret = (m * (b - m) * x) /
<a class="jxr_linenumber" name="L208" href="#L208">208</a>                             ((a + (2 * m) - 1) * (a + (2 * m)));
<a class="jxr_linenumber" name="L209" href="#L209">209</a>                     } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L210" href="#L210">210</a>                         m = (n - 1.0) / 2.0;
<a class="jxr_linenumber" name="L211" href="#L211">211</a>                         ret = -((a + m) * (a + b + m) * x) /
<a class="jxr_linenumber" name="L212" href="#L212">212</a>                                 ((a + (2 * m)) * (a + (2 * m) + 1.0));
<a class="jxr_linenumber" name="L213" href="#L213">213</a>                     }
<a class="jxr_linenumber" name="L214" href="#L214">214</a>                     <strong class="jxr_keyword">return</strong> ret;
<a class="jxr_linenumber" name="L215" href="#L215">215</a>                 }
<a class="jxr_linenumber" name="L216" href="#L216">216</a> 
<a class="jxr_linenumber" name="L217" href="#L217">217</a>                 <em class="jxr_javadoccomment">/** {@inheritDoc} */</em>
<a class="jxr_linenumber" name="L218" href="#L218">218</a>                 @Override
<a class="jxr_linenumber" name="L219" href="#L219">219</a>                 <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">double</strong> getA(<strong class="jxr_keyword">int</strong> n, <strong class="jxr_keyword">double</strong> x) {
<a class="jxr_linenumber" name="L220" href="#L220">220</a>                     <strong class="jxr_keyword">return</strong> 1.0;
<a class="jxr_linenumber" name="L221" href="#L221">221</a>                 }
<a class="jxr_linenumber" name="L222" href="#L222">222</a>             };
<a class="jxr_linenumber" name="L223" href="#L223">223</a>             ret = FastMath.exp((a * FastMath.log(x)) + (b * FastMath.log1p(-x)) -
<a class="jxr_linenumber" name="L224" href="#L224">224</a>                 FastMath.log(a) - logBeta(a, b)) *
<a class="jxr_linenumber" name="L225" href="#L225">225</a>                 1.0 / fraction.evaluate(x, epsilon, maxIterations);
<a class="jxr_linenumber" name="L226" href="#L226">226</a>         }
<a class="jxr_linenumber" name="L227" href="#L227">227</a> 
<a class="jxr_linenumber" name="L228" href="#L228">228</a>         <strong class="jxr_keyword">return</strong> ret;
<a class="jxr_linenumber" name="L229" href="#L229">229</a>     }
<a class="jxr_linenumber" name="L230" href="#L230">230</a> 
<a class="jxr_linenumber" name="L231" href="#L231">231</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L232" href="#L232">232</a> <em class="jxr_javadoccomment">     * Returns the natural logarithm of the beta function B(a, b).</em>
<a class="jxr_linenumber" name="L233" href="#L233">233</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L234" href="#L234">234</a> <em class="jxr_javadoccomment">     * The implementation of this method is based on:</em>
<a class="jxr_linenumber" name="L235" href="#L235">235</a> <em class="jxr_javadoccomment">     * &lt;ul&gt;</em>
<a class="jxr_linenumber" name="L236" href="#L236">236</a> <em class="jxr_javadoccomment">     * &lt;li&gt;&lt;a href="<a href="http://mathworld.wolfram.com/BetaFunction.html" target="alexandria_uri">http://mathworld.wolfram.com/BetaFunction.html</a>"&gt;</em>
<a class="jxr_linenumber" name="L237" href="#L237">237</a> <em class="jxr_javadoccomment">     * Beta Function&lt;/a&gt;, equation (1).&lt;/li&gt;</em>
<a class="jxr_linenumber" name="L238" href="#L238">238</a> <em class="jxr_javadoccomment">     * &lt;/ul&gt;</em>
<a class="jxr_linenumber" name="L239" href="#L239">239</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L240" href="#L240">240</a> <em class="jxr_javadoccomment">     * @param a Parameter {@code a}.</em>
<a class="jxr_linenumber" name="L241" href="#L241">241</a> <em class="jxr_javadoccomment">     * @param b Parameter {@code b}.</em>
<a class="jxr_linenumber" name="L242" href="#L242">242</a> <em class="jxr_javadoccomment">     * @param epsilon This parameter is ignored.</em>
<a class="jxr_linenumber" name="L243" href="#L243">243</a> <em class="jxr_javadoccomment">     * @param maxIterations This parameter is ignored.</em>
<a class="jxr_linenumber" name="L244" href="#L244">244</a> <em class="jxr_javadoccomment">     * @return log(B(a, b)).</em>
<a class="jxr_linenumber" name="L245" href="#L245">245</a> <em class="jxr_javadoccomment">     * @deprecated as of version 3.1, this method is deprecated as the</em>
<a class="jxr_linenumber" name="L246" href="#L246">246</a> <em class="jxr_javadoccomment">     * computation of the beta function is no longer iterative; it will be</em>
<a class="jxr_linenumber" name="L247" href="#L247">247</a> <em class="jxr_javadoccomment">     * removed in version 4.0. Current implementation of this method</em>
<a class="jxr_linenumber" name="L248" href="#L248">248</a> <em class="jxr_javadoccomment">     * internally calls {@link #logBeta(double, double)}.</em>
<a class="jxr_linenumber" name="L249" href="#L249">249</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L250" href="#L250">250</a>     @Deprecated
<a class="jxr_linenumber" name="L251" href="#L251">251</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">double</strong> logBeta(<strong class="jxr_keyword">double</strong> a, <strong class="jxr_keyword">double</strong> b,
<a class="jxr_linenumber" name="L252" href="#L252">252</a>                                  <strong class="jxr_keyword">double</strong> epsilon,
<a class="jxr_linenumber" name="L253" href="#L253">253</a>                                  <strong class="jxr_keyword">int</strong> maxIterations) {
<a class="jxr_linenumber" name="L254" href="#L254">254</a> 
<a class="jxr_linenumber" name="L255" href="#L255">255</a>         <strong class="jxr_keyword">return</strong> logBeta(a, b);
<a class="jxr_linenumber" name="L256" href="#L256">256</a>     }
<a class="jxr_linenumber" name="L257" href="#L257">257</a> 
<a class="jxr_linenumber" name="L258" href="#L258">258</a> 
<a class="jxr_linenumber" name="L259" href="#L259">259</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L260" href="#L260">260</a> <em class="jxr_javadoccomment">     * Returns the value of log Γ(a + b) for 1 ≤ a, b ≤ 2. Based on the</em>
<a class="jxr_linenumber" name="L261" href="#L261">261</a> <em class="jxr_javadoccomment">     * &lt;em&gt;NSWC Library of Mathematics Subroutines&lt;/em&gt; double precision</em>
<a class="jxr_linenumber" name="L262" href="#L262">262</a> <em class="jxr_javadoccomment">     * implementation, {@code DGSMLN}. In {@code BetaTest.testLogGammaSum()},</em>
<a class="jxr_linenumber" name="L263" href="#L263">263</a> <em class="jxr_javadoccomment">     * this private method is accessed through reflection.</em>
<a class="jxr_linenumber" name="L264" href="#L264">264</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L265" href="#L265">265</a> <em class="jxr_javadoccomment">     * @param a First argument.</em>
<a class="jxr_linenumber" name="L266" href="#L266">266</a> <em class="jxr_javadoccomment">     * @param b Second argument.</em>
<a class="jxr_linenumber" name="L267" href="#L267">267</a> <em class="jxr_javadoccomment">     * @return the value of {@code log(Gamma(a + b))}.</em>
<a class="jxr_linenumber" name="L268" href="#L268">268</a> <em class="jxr_javadoccomment">     * @throws OutOfRangeException if {@code a} or {@code b} is lower than</em>
<a class="jxr_linenumber" name="L269" href="#L269">269</a> <em class="jxr_javadoccomment">     * {@code 1.0} or greater than {@code 2.0}.</em>
<a class="jxr_linenumber" name="L270" href="#L270">270</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L271" href="#L271">271</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">double</strong> logGammaSum(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> a, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> b)
<a class="jxr_linenumber" name="L272" href="#L272">272</a>         <strong class="jxr_keyword">throws</strong> <a href="../../../../../org/apache/commons/math3/exception/OutOfRangeException.html">OutOfRangeException</a> {
<a class="jxr_linenumber" name="L273" href="#L273">273</a> 
<a class="jxr_linenumber" name="L274" href="#L274">274</a>         <strong class="jxr_keyword">if</strong> ((a &lt; 1.0) || (a &gt; 2.0)) {
<a class="jxr_linenumber" name="L275" href="#L275">275</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../org/apache/commons/math3/exception/OutOfRangeException.html">OutOfRangeException</a>(a, 1.0, 2.0);
<a class="jxr_linenumber" name="L276" href="#L276">276</a>         }
<a class="jxr_linenumber" name="L277" href="#L277">277</a>         <strong class="jxr_keyword">if</strong> ((b &lt; 1.0) || (b &gt; 2.0)) {
<a class="jxr_linenumber" name="L278" href="#L278">278</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../org/apache/commons/math3/exception/OutOfRangeException.html">OutOfRangeException</a>(b, 1.0, 2.0);
<a class="jxr_linenumber" name="L279" href="#L279">279</a>         }
<a class="jxr_linenumber" name="L280" href="#L280">280</a> 
<a class="jxr_linenumber" name="L281" href="#L281">281</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> x = (a - 1.0) + (b - 1.0);
<a class="jxr_linenumber" name="L282" href="#L282">282</a>         <strong class="jxr_keyword">if</strong> (x &lt;= 0.5) {
<a class="jxr_linenumber" name="L283" href="#L283">283</a>             <strong class="jxr_keyword">return</strong> Gamma.logGamma1p(1.0 + x);
<a class="jxr_linenumber" name="L284" href="#L284">284</a>         } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (x &lt;= 1.5) {
<a class="jxr_linenumber" name="L285" href="#L285">285</a>             <strong class="jxr_keyword">return</strong> Gamma.logGamma1p(x) + FastMath.log1p(x);
<a class="jxr_linenumber" name="L286" href="#L286">286</a>         } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L287" href="#L287">287</a>             <strong class="jxr_keyword">return</strong> Gamma.logGamma1p(x - 1.0) + FastMath.log(x * (1.0 + x));
<a class="jxr_linenumber" name="L288" href="#L288">288</a>         }
<a class="jxr_linenumber" name="L289" href="#L289">289</a>     }
<a class="jxr_linenumber" name="L290" href="#L290">290</a> 
<a class="jxr_linenumber" name="L291" href="#L291">291</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L292" href="#L292">292</a> <em class="jxr_javadoccomment">     * Returns the value of log[Γ(b) / Γ(a + b)] for a ≥ 0 and b ≥ 10. Based on</em>
<a class="jxr_linenumber" name="L293" href="#L293">293</a> <em class="jxr_javadoccomment">     * the &lt;em&gt;NSWC Library of Mathematics Subroutines&lt;/em&gt; double precision</em>
<a class="jxr_linenumber" name="L294" href="#L294">294</a> <em class="jxr_javadoccomment">     * implementation, {@code DLGDIV}. In</em>
<a class="jxr_linenumber" name="L295" href="#L295">295</a> <em class="jxr_javadoccomment">     * {@code BetaTest.testLogGammaMinusLogGammaSum()}, this private method is</em>
<a class="jxr_linenumber" name="L296" href="#L296">296</a> <em class="jxr_javadoccomment">     * accessed through reflection.</em>
<a class="jxr_linenumber" name="L297" href="#L297">297</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L298" href="#L298">298</a> <em class="jxr_javadoccomment">     * @param a First argument.</em>
<a class="jxr_linenumber" name="L299" href="#L299">299</a> <em class="jxr_javadoccomment">     * @param b Second argument.</em>
<a class="jxr_linenumber" name="L300" href="#L300">300</a> <em class="jxr_javadoccomment">     * @return the value of {@code log(Gamma(b) / Gamma(a + b))}.</em>
<a class="jxr_linenumber" name="L301" href="#L301">301</a> <em class="jxr_javadoccomment">     * @throws NumberIsTooSmallException if {@code a &lt; 0.0} or {@code b &lt; 10.0}.</em>
<a class="jxr_linenumber" name="L302" href="#L302">302</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L303" href="#L303">303</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">double</strong> logGammaMinusLogGammaSum(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> a,
<a class="jxr_linenumber" name="L304" href="#L304">304</a>                                                    <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> b)
<a class="jxr_linenumber" name="L305" href="#L305">305</a>         <strong class="jxr_keyword">throws</strong> <a href="../../../../../org/apache/commons/math3/exception/NumberIsTooSmallException.html">NumberIsTooSmallException</a> {
<a class="jxr_linenumber" name="L306" href="#L306">306</a> 
<a class="jxr_linenumber" name="L307" href="#L307">307</a>         <strong class="jxr_keyword">if</strong> (a &lt; 0.0) {
<a class="jxr_linenumber" name="L308" href="#L308">308</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../org/apache/commons/math3/exception/NumberIsTooSmallException.html">NumberIsTooSmallException</a>(a, 0.0, <strong class="jxr_keyword">true</strong>);
<a class="jxr_linenumber" name="L309" href="#L309">309</a>         }
<a class="jxr_linenumber" name="L310" href="#L310">310</a>         <strong class="jxr_keyword">if</strong> (b &lt; 10.0) {
<a class="jxr_linenumber" name="L311" href="#L311">311</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../org/apache/commons/math3/exception/NumberIsTooSmallException.html">NumberIsTooSmallException</a>(b, 10.0, <strong class="jxr_keyword">true</strong>);
<a class="jxr_linenumber" name="L312" href="#L312">312</a>         }
<a class="jxr_linenumber" name="L313" href="#L313">313</a> 
<a class="jxr_linenumber" name="L314" href="#L314">314</a>         <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L315" href="#L315">315</a> <em class="jxr_comment">         * d = a + b - 0.5</em>
<a class="jxr_linenumber" name="L316" href="#L316">316</a> <em class="jxr_comment">         */</em>
<a class="jxr_linenumber" name="L317" href="#L317">317</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> d;
<a class="jxr_linenumber" name="L318" href="#L318">318</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> w;
<a class="jxr_linenumber" name="L319" href="#L319">319</a>         <strong class="jxr_keyword">if</strong> (a &lt;= b) {
<a class="jxr_linenumber" name="L320" href="#L320">320</a>             d = b + (a - 0.5);
<a class="jxr_linenumber" name="L321" href="#L321">321</a>             w = deltaMinusDeltaSum(a, b);
<a class="jxr_linenumber" name="L322" href="#L322">322</a>         } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L323" href="#L323">323</a>             d = a + (b - 0.5);
<a class="jxr_linenumber" name="L324" href="#L324">324</a>             w = deltaMinusDeltaSum(b, a);
<a class="jxr_linenumber" name="L325" href="#L325">325</a>         }
<a class="jxr_linenumber" name="L326" href="#L326">326</a> 
<a class="jxr_linenumber" name="L327" href="#L327">327</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> u = d * FastMath.log1p(a / b);
<a class="jxr_linenumber" name="L328" href="#L328">328</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> v = a * (FastMath.log(b) - 1.0);
<a class="jxr_linenumber" name="L329" href="#L329">329</a> 
<a class="jxr_linenumber" name="L330" href="#L330">330</a>         <strong class="jxr_keyword">return</strong> u &lt;= v ? (w - u) - v : (w - v) - u;
<a class="jxr_linenumber" name="L331" href="#L331">331</a>     }
<a class="jxr_linenumber" name="L332" href="#L332">332</a> 
<a class="jxr_linenumber" name="L333" href="#L333">333</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L334" href="#L334">334</a> <em class="jxr_javadoccomment">     * Returns the value of Δ(b) - Δ(a + b), with 0 ≤ a ≤ b and b ≥ 10. Based</em>
<a class="jxr_linenumber" name="L335" href="#L335">335</a> <em class="jxr_javadoccomment">     * on equations (26), (27) and (28) in Didonato and Morris (1992).</em>
<a class="jxr_linenumber" name="L336" href="#L336">336</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L337" href="#L337">337</a> <em class="jxr_javadoccomment">     * @param a First argument.</em>
<a class="jxr_linenumber" name="L338" href="#L338">338</a> <em class="jxr_javadoccomment">     * @param b Second argument.</em>
<a class="jxr_linenumber" name="L339" href="#L339">339</a> <em class="jxr_javadoccomment">     * @return the value of {@code Delta(b) - Delta(a + b)}</em>
<a class="jxr_linenumber" name="L340" href="#L340">340</a> <em class="jxr_javadoccomment">     * @throws OutOfRangeException if {@code a &lt; 0} or {@code a &gt; b}</em>
<a class="jxr_linenumber" name="L341" href="#L341">341</a> <em class="jxr_javadoccomment">     * @throws NumberIsTooSmallException if {@code b &lt; 10}</em>
<a class="jxr_linenumber" name="L342" href="#L342">342</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L343" href="#L343">343</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">double</strong> deltaMinusDeltaSum(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> a,
<a class="jxr_linenumber" name="L344" href="#L344">344</a>                                              <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> b)
<a class="jxr_linenumber" name="L345" href="#L345">345</a>         <strong class="jxr_keyword">throws</strong> OutOfRangeException, <a href="../../../../../org/apache/commons/math3/exception/NumberIsTooSmallException.html">NumberIsTooSmallException</a> {
<a class="jxr_linenumber" name="L346" href="#L346">346</a> 
<a class="jxr_linenumber" name="L347" href="#L347">347</a>         <strong class="jxr_keyword">if</strong> ((a &lt; 0) || (a &gt; b)) {
<a class="jxr_linenumber" name="L348" href="#L348">348</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../org/apache/commons/math3/exception/OutOfRangeException.html">OutOfRangeException</a>(a, 0, b);
<a class="jxr_linenumber" name="L349" href="#L349">349</a>         }
<a class="jxr_linenumber" name="L350" href="#L350">350</a>         <strong class="jxr_keyword">if</strong> (b &lt; 10) {
<a class="jxr_linenumber" name="L351" href="#L351">351</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../org/apache/commons/math3/exception/NumberIsTooSmallException.html">NumberIsTooSmallException</a>(b, 10, <strong class="jxr_keyword">true</strong>);
<a class="jxr_linenumber" name="L352" href="#L352">352</a>         }
<a class="jxr_linenumber" name="L353" href="#L353">353</a> 
<a class="jxr_linenumber" name="L354" href="#L354">354</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> h = a / b;
<a class="jxr_linenumber" name="L355" href="#L355">355</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> p = h / (1.0 + h);
<a class="jxr_linenumber" name="L356" href="#L356">356</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> q = 1.0 / (1.0 + h);
<a class="jxr_linenumber" name="L357" href="#L357">357</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> q2 = q * q;
<a class="jxr_linenumber" name="L358" href="#L358">358</a>         <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L359" href="#L359">359</a> <em class="jxr_comment">         * s[i] = 1 + q + ... - q**(2 * i)</em>
<a class="jxr_linenumber" name="L360" href="#L360">360</a> <em class="jxr_comment">         */</em>
<a class="jxr_linenumber" name="L361" href="#L361">361</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] s = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[DELTA.length];
<a class="jxr_linenumber" name="L362" href="#L362">362</a>         s[0] = 1.0;
<a class="jxr_linenumber" name="L363" href="#L363">363</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 1; i &lt; s.length; i++) {
<a class="jxr_linenumber" name="L364" href="#L364">364</a>             s[i] = 1.0 + (q + q2 * s[i - 1]);
<a class="jxr_linenumber" name="L365" href="#L365">365</a>         }
<a class="jxr_linenumber" name="L366" href="#L366">366</a>         <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L367" href="#L367">367</a> <em class="jxr_comment">         * w = Delta(b) - Delta(a + b)</em>
<a class="jxr_linenumber" name="L368" href="#L368">368</a> <em class="jxr_comment">         */</em>
<a class="jxr_linenumber" name="L369" href="#L369">369</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> sqrtT = 10.0 / b;
<a class="jxr_linenumber" name="L370" href="#L370">370</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> t = sqrtT * sqrtT;
<a class="jxr_linenumber" name="L371" href="#L371">371</a>         <strong class="jxr_keyword">double</strong> w = DELTA[DELTA.length - 1] * s[s.length - 1];
<a class="jxr_linenumber" name="L372" href="#L372">372</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = DELTA.length - 2; i &gt;= 0; i--) {
<a class="jxr_linenumber" name="L373" href="#L373">373</a>             w = t * w + DELTA[i] * s[i];
<a class="jxr_linenumber" name="L374" href="#L374">374</a>         }
<a class="jxr_linenumber" name="L375" href="#L375">375</a>         <strong class="jxr_keyword">return</strong> w * p / b;
<a class="jxr_linenumber" name="L376" href="#L376">376</a>     }
<a class="jxr_linenumber" name="L377" href="#L377">377</a> 
<a class="jxr_linenumber" name="L378" href="#L378">378</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L379" href="#L379">379</a> <em class="jxr_javadoccomment">     * Returns the value of Δ(p) + Δ(q) - Δ(p + q), with p, q ≥ 10. Based on</em>
<a class="jxr_linenumber" name="L380" href="#L380">380</a> <em class="jxr_javadoccomment">     * the &lt;em&gt;NSWC Library of Mathematics Subroutines&lt;/em&gt; double precision</em>
<a class="jxr_linenumber" name="L381" href="#L381">381</a> <em class="jxr_javadoccomment">     * implementation, {@code DBCORR}. In</em>
<a class="jxr_linenumber" name="L382" href="#L382">382</a> <em class="jxr_javadoccomment">     * {@code BetaTest.testSumDeltaMinusDeltaSum()}, this private method is</em>
<a class="jxr_linenumber" name="L383" href="#L383">383</a> <em class="jxr_javadoccomment">     * accessed through reflection.</em>
<a class="jxr_linenumber" name="L384" href="#L384">384</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L385" href="#L385">385</a> <em class="jxr_javadoccomment">     * @param p First argument.</em>
<a class="jxr_linenumber" name="L386" href="#L386">386</a> <em class="jxr_javadoccomment">     * @param q Second argument.</em>
<a class="jxr_linenumber" name="L387" href="#L387">387</a> <em class="jxr_javadoccomment">     * @return the value of {@code Delta(p) + Delta(q) - Delta(p + q)}.</em>
<a class="jxr_linenumber" name="L388" href="#L388">388</a> <em class="jxr_javadoccomment">     * @throws NumberIsTooSmallException if {@code p &lt; 10.0} or {@code q &lt; 10.0}.</em>
<a class="jxr_linenumber" name="L389" href="#L389">389</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L390" href="#L390">390</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">double</strong> sumDeltaMinusDeltaSum(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> p,
<a class="jxr_linenumber" name="L391" href="#L391">391</a>                                                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> q) {
<a class="jxr_linenumber" name="L392" href="#L392">392</a> 
<a class="jxr_linenumber" name="L393" href="#L393">393</a>         <strong class="jxr_keyword">if</strong> (p &lt; 10.0) {
<a class="jxr_linenumber" name="L394" href="#L394">394</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../org/apache/commons/math3/exception/NumberIsTooSmallException.html">NumberIsTooSmallException</a>(p, 10.0, <strong class="jxr_keyword">true</strong>);
<a class="jxr_linenumber" name="L395" href="#L395">395</a>         }
<a class="jxr_linenumber" name="L396" href="#L396">396</a>         <strong class="jxr_keyword">if</strong> (q &lt; 10.0) {
<a class="jxr_linenumber" name="L397" href="#L397">397</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../org/apache/commons/math3/exception/NumberIsTooSmallException.html">NumberIsTooSmallException</a>(q, 10.0, <strong class="jxr_keyword">true</strong>);
<a class="jxr_linenumber" name="L398" href="#L398">398</a>         }
<a class="jxr_linenumber" name="L399" href="#L399">399</a> 
<a class="jxr_linenumber" name="L400" href="#L400">400</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> a = FastMath.min(p, q);
<a class="jxr_linenumber" name="L401" href="#L401">401</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> b = FastMath.max(p, q);
<a class="jxr_linenumber" name="L402" href="#L402">402</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> sqrtT = 10.0 / a;
<a class="jxr_linenumber" name="L403" href="#L403">403</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> t = sqrtT * sqrtT;
<a class="jxr_linenumber" name="L404" href="#L404">404</a>         <strong class="jxr_keyword">double</strong> z = DELTA[DELTA.length - 1];
<a class="jxr_linenumber" name="L405" href="#L405">405</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = DELTA.length - 2; i &gt;= 0; i--) {
<a class="jxr_linenumber" name="L406" href="#L406">406</a>             z = t * z + DELTA[i];
<a class="jxr_linenumber" name="L407" href="#L407">407</a>         }
<a class="jxr_linenumber" name="L408" href="#L408">408</a>         <strong class="jxr_keyword">return</strong> z / a + deltaMinusDeltaSum(a, b);
<a class="jxr_linenumber" name="L409" href="#L409">409</a>     }
<a class="jxr_linenumber" name="L410" href="#L410">410</a> 
<a class="jxr_linenumber" name="L411" href="#L411">411</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L412" href="#L412">412</a> <em class="jxr_javadoccomment">     * Returns the value of log B(p, q) for 0 ≤ x ≤ 1 and p, q &gt; 0. Based on the</em>
<a class="jxr_linenumber" name="L413" href="#L413">413</a> <em class="jxr_javadoccomment">     * &lt;em&gt;NSWC Library of Mathematics Subroutines&lt;/em&gt; implementation,</em>
<a class="jxr_linenumber" name="L414" href="#L414">414</a> <em class="jxr_javadoccomment">     * {@code DBETLN}.</em>
<a class="jxr_linenumber" name="L415" href="#L415">415</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L416" href="#L416">416</a> <em class="jxr_javadoccomment">     * @param p First argument.</em>
<a class="jxr_linenumber" name="L417" href="#L417">417</a> <em class="jxr_javadoccomment">     * @param q Second argument.</em>
<a class="jxr_linenumber" name="L418" href="#L418">418</a> <em class="jxr_javadoccomment">     * @return the value of {@code log(Beta(p, q))}, {@code NaN} if</em>
<a class="jxr_linenumber" name="L419" href="#L419">419</a> <em class="jxr_javadoccomment">     * {@code p &lt;= 0} or {@code q &lt;= 0}.</em>
<a class="jxr_linenumber" name="L420" href="#L420">420</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L421" href="#L421">421</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">double</strong> logBeta(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> p, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> q) {
<a class="jxr_linenumber" name="L422" href="#L422">422</a>         <strong class="jxr_keyword">if</strong> (Double.isNaN(p) || Double.isNaN(q) || (p &lt;= 0.0) || (q &lt;= 0.0)) {
<a class="jxr_linenumber" name="L423" href="#L423">423</a>             <strong class="jxr_keyword">return</strong> Double.NaN;
<a class="jxr_linenumber" name="L424" href="#L424">424</a>         }
<a class="jxr_linenumber" name="L425" href="#L425">425</a> 
<a class="jxr_linenumber" name="L426" href="#L426">426</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> a = FastMath.min(p, q);
<a class="jxr_linenumber" name="L427" href="#L427">427</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> b = FastMath.max(p, q);
<a class="jxr_linenumber" name="L428" href="#L428">428</a>         <strong class="jxr_keyword">if</strong> (a &gt;= 10.0) {
<a class="jxr_linenumber" name="L429" href="#L429">429</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> w = sumDeltaMinusDeltaSum(a, b);
<a class="jxr_linenumber" name="L430" href="#L430">430</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> h = a / b;
<a class="jxr_linenumber" name="L431" href="#L431">431</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> c = h / (1.0 + h);
<a class="jxr_linenumber" name="L432" href="#L432">432</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> u = -(a - 0.5) * FastMath.log(c);
<a class="jxr_linenumber" name="L433" href="#L433">433</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> v = b * FastMath.log1p(h);
<a class="jxr_linenumber" name="L434" href="#L434">434</a>             <strong class="jxr_keyword">if</strong> (u &lt;= v) {
<a class="jxr_linenumber" name="L435" href="#L435">435</a>                 <strong class="jxr_keyword">return</strong> (((-0.5 * FastMath.log(b) + HALF_LOG_TWO_PI) + w) - u) - v;
<a class="jxr_linenumber" name="L436" href="#L436">436</a>             } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L437" href="#L437">437</a>                 <strong class="jxr_keyword">return</strong> (((-0.5 * FastMath.log(b) + HALF_LOG_TWO_PI) + w) - v) - u;
<a class="jxr_linenumber" name="L438" href="#L438">438</a>             }
<a class="jxr_linenumber" name="L439" href="#L439">439</a>         } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (a &gt; 2.0) {
<a class="jxr_linenumber" name="L440" href="#L440">440</a>             <strong class="jxr_keyword">if</strong> (b &gt; 1000.0) {
<a class="jxr_linenumber" name="L441" href="#L441">441</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> n = (<strong class="jxr_keyword">int</strong>) FastMath.floor(a - 1.0);
<a class="jxr_linenumber" name="L442" href="#L442">442</a>                 <strong class="jxr_keyword">double</strong> prod = 1.0;
<a class="jxr_linenumber" name="L443" href="#L443">443</a>                 <strong class="jxr_keyword">double</strong> ared = a;
<a class="jxr_linenumber" name="L444" href="#L444">444</a>                 <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; n; i++) {
<a class="jxr_linenumber" name="L445" href="#L445">445</a>                     ared -= 1.0;
<a class="jxr_linenumber" name="L446" href="#L446">446</a>                     prod *= ared / (1.0 + ared / b);
<a class="jxr_linenumber" name="L447" href="#L447">447</a>                 }
<a class="jxr_linenumber" name="L448" href="#L448">448</a>                 <strong class="jxr_keyword">return</strong> (FastMath.log(prod) - n * FastMath.log(b)) +
<a class="jxr_linenumber" name="L449" href="#L449">449</a>                         (Gamma.logGamma(ared) +
<a class="jxr_linenumber" name="L450" href="#L450">450</a>                          logGammaMinusLogGammaSum(ared, b));
<a class="jxr_linenumber" name="L451" href="#L451">451</a>             } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L452" href="#L452">452</a>                 <strong class="jxr_keyword">double</strong> prod1 = 1.0;
<a class="jxr_linenumber" name="L453" href="#L453">453</a>                 <strong class="jxr_keyword">double</strong> ared = a;
<a class="jxr_linenumber" name="L454" href="#L454">454</a>                 <strong class="jxr_keyword">while</strong> (ared &gt; 2.0) {
<a class="jxr_linenumber" name="L455" href="#L455">455</a>                     ared -= 1.0;
<a class="jxr_linenumber" name="L456" href="#L456">456</a>                     <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> h = ared / b;
<a class="jxr_linenumber" name="L457" href="#L457">457</a>                     prod1 *= h / (1.0 + h);
<a class="jxr_linenumber" name="L458" href="#L458">458</a>                 }
<a class="jxr_linenumber" name="L459" href="#L459">459</a>                 <strong class="jxr_keyword">if</strong> (b &lt; 10.0) {
<a class="jxr_linenumber" name="L460" href="#L460">460</a>                     <strong class="jxr_keyword">double</strong> prod2 = 1.0;
<a class="jxr_linenumber" name="L461" href="#L461">461</a>                     <strong class="jxr_keyword">double</strong> bred = b;
<a class="jxr_linenumber" name="L462" href="#L462">462</a>                     <strong class="jxr_keyword">while</strong> (bred &gt; 2.0) {
<a class="jxr_linenumber" name="L463" href="#L463">463</a>                         bred -= 1.0;
<a class="jxr_linenumber" name="L464" href="#L464">464</a>                         prod2 *= bred / (ared + bred);
<a class="jxr_linenumber" name="L465" href="#L465">465</a>                     }
<a class="jxr_linenumber" name="L466" href="#L466">466</a>                     <strong class="jxr_keyword">return</strong> FastMath.log(prod1) +
<a class="jxr_linenumber" name="L467" href="#L467">467</a>                            FastMath.log(prod2) +
<a class="jxr_linenumber" name="L468" href="#L468">468</a>                            (Gamma.logGamma(ared) +
<a class="jxr_linenumber" name="L469" href="#L469">469</a>                            (Gamma.logGamma(bred) -
<a class="jxr_linenumber" name="L470" href="#L470">470</a>                             logGammaSum(ared, bred)));
<a class="jxr_linenumber" name="L471" href="#L471">471</a>                 } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L472" href="#L472">472</a>                     <strong class="jxr_keyword">return</strong> FastMath.log(prod1) +
<a class="jxr_linenumber" name="L473" href="#L473">473</a>                            Gamma.logGamma(ared) +
<a class="jxr_linenumber" name="L474" href="#L474">474</a>                            logGammaMinusLogGammaSum(ared, b);
<a class="jxr_linenumber" name="L475" href="#L475">475</a>                 }
<a class="jxr_linenumber" name="L476" href="#L476">476</a>             }
<a class="jxr_linenumber" name="L477" href="#L477">477</a>         } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (a &gt;= 1.0) {
<a class="jxr_linenumber" name="L478" href="#L478">478</a>             <strong class="jxr_keyword">if</strong> (b &gt; 2.0) {
<a class="jxr_linenumber" name="L479" href="#L479">479</a>                 <strong class="jxr_keyword">if</strong> (b &lt; 10.0) {
<a class="jxr_linenumber" name="L480" href="#L480">480</a>                     <strong class="jxr_keyword">double</strong> prod = 1.0;
<a class="jxr_linenumber" name="L481" href="#L481">481</a>                     <strong class="jxr_keyword">double</strong> bred = b;
<a class="jxr_linenumber" name="L482" href="#L482">482</a>                     <strong class="jxr_keyword">while</strong> (bred &gt; 2.0) {
<a class="jxr_linenumber" name="L483" href="#L483">483</a>                         bred -= 1.0;
<a class="jxr_linenumber" name="L484" href="#L484">484</a>                         prod *= bred / (a + bred);
<a class="jxr_linenumber" name="L485" href="#L485">485</a>                     }
<a class="jxr_linenumber" name="L486" href="#L486">486</a>                     <strong class="jxr_keyword">return</strong> FastMath.log(prod) +
<a class="jxr_linenumber" name="L487" href="#L487">487</a>                            (Gamma.logGamma(a) +
<a class="jxr_linenumber" name="L488" href="#L488">488</a>                             (Gamma.logGamma(bred) -
<a class="jxr_linenumber" name="L489" href="#L489">489</a>                              logGammaSum(a, bred)));
<a class="jxr_linenumber" name="L490" href="#L490">490</a>                 } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L491" href="#L491">491</a>                     <strong class="jxr_keyword">return</strong> Gamma.logGamma(a) +
<a class="jxr_linenumber" name="L492" href="#L492">492</a>                            logGammaMinusLogGammaSum(a, b);
<a class="jxr_linenumber" name="L493" href="#L493">493</a>                 }
<a class="jxr_linenumber" name="L494" href="#L494">494</a>             } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L495" href="#L495">495</a>                 <strong class="jxr_keyword">return</strong> Gamma.logGamma(a) +
<a class="jxr_linenumber" name="L496" href="#L496">496</a>                        Gamma.logGamma(b) -
<a class="jxr_linenumber" name="L497" href="#L497">497</a>                        logGammaSum(a, b);
<a class="jxr_linenumber" name="L498" href="#L498">498</a>             }
<a class="jxr_linenumber" name="L499" href="#L499">499</a>         } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L500" href="#L500">500</a>             <strong class="jxr_keyword">if</strong> (b &gt;= 10.0) {
<a class="jxr_linenumber" name="L501" href="#L501">501</a>                 <strong class="jxr_keyword">return</strong> Gamma.logGamma(a) +
<a class="jxr_linenumber" name="L502" href="#L502">502</a>                        logGammaMinusLogGammaSum(a, b);
<a class="jxr_linenumber" name="L503" href="#L503">503</a>             } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L504" href="#L504">504</a>                 <em class="jxr_comment">// The following command is the original NSWC implementation.</em>
<a class="jxr_linenumber" name="L505" href="#L505">505</a>                 <em class="jxr_comment">// return Gamma.logGamma(a) +</em>
<a class="jxr_linenumber" name="L506" href="#L506">506</a>                 <em class="jxr_comment">// (Gamma.logGamma(b) - Gamma.logGamma(a + b));</em>
<a class="jxr_linenumber" name="L507" href="#L507">507</a>                 <em class="jxr_comment">// The following command turns out to be more accurate.</em>
<a class="jxr_linenumber" name="L508" href="#L508">508</a>                 <strong class="jxr_keyword">return</strong> FastMath.log(Gamma.gamma(a) * Gamma.gamma(b) /
<a class="jxr_linenumber" name="L509" href="#L509">509</a>                                     Gamma.gamma(a + b));
<a class="jxr_linenumber" name="L510" href="#L510">510</a>             }
<a class="jxr_linenumber" name="L511" href="#L511">511</a>         }
<a class="jxr_linenumber" name="L512" href="#L512">512</a>     }
<a class="jxr_linenumber" name="L513" href="#L513">513</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2003&#x2013;2016 <a href="http://www.apache.org/">The Apache Software Foundation</a>. All rights reserved.</div>
</body>
</html>
