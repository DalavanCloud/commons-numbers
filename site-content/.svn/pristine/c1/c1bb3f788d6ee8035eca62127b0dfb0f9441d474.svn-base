<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>FastCosineTransformerTest xref</title>
<link type="text/css" rel="stylesheet" href="../../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../testapidocs/org/apache/commons/math3/transform/FastCosineTransformerTest.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Licensed to the Apache Software Foundation (ASF) under one or more</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> * contributor license agreements.  See the NOTICE file distributed with</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * this work for additional information regarding copyright ownership.</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * The ASF licenses this file to You under the Apache License, Version 2.0</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * (the "License"); you may not use this file except in compliance with</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> * the License.  You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *      <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">package</strong> org.apache.commons.math3.transform;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <strong class="jxr_keyword">import</strong> java.util.Arrays;
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> java.util.Collection;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.analysis.UnivariateFunction;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.analysis.function.Sin;
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.analysis.function.Sinc;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.MathIllegalStateException;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.util.FastMath;
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <strong class="jxr_keyword">import</strong> org.junit.Assert;
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <strong class="jxr_keyword">import</strong> org.junit.Test;
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <strong class="jxr_keyword">import</strong> org.junit.runner.RunWith;
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <strong class="jxr_keyword">import</strong> org.junit.runners.Parameterized;
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <strong class="jxr_keyword">import</strong> org.junit.runners.Parameterized.Parameters;
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <em class="jxr_javadoccomment"> * Test case for fast cosine transformer.</em>
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  <em class="jxr_javadoccomment"> * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  <em class="jxr_javadoccomment"> * FCT algorithm is exact, the small tolerance number is used only to account</em>
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  <em class="jxr_javadoccomment"> * for round-off errors.</em>
<a class="jxr_linenumber" name="L38" href="#L38">38</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L39" href="#L39">39</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L40" href="#L40">40</a>  @RunWith(value = Parameterized.<strong class="jxr_keyword">class</strong>)
<a class="jxr_linenumber" name="L41" href="#L41">41</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../org/apache/commons/math3/transform/FastCosineTransformerTest.html">FastCosineTransformerTest</a>
<a class="jxr_linenumber" name="L42" href="#L42">42</a>      <strong class="jxr_keyword">extends</strong> <a href="../../../../../org/apache/commons/math3/transform/RealTransformerAbstractTest.html">RealTransformerAbstractTest</a> {
<a class="jxr_linenumber" name="L43" href="#L43">43</a>  
<a class="jxr_linenumber" name="L44" href="#L44">44</a>      <strong class="jxr_keyword">private</strong> DctNormalization normalization;
<a class="jxr_linenumber" name="L45" href="#L45">45</a>  
<a class="jxr_linenumber" name="L46" href="#L46">46</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong>[] invalidDataSize;
<a class="jxr_linenumber" name="L47" href="#L47">47</a>  
<a class="jxr_linenumber" name="L48" href="#L48">48</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] relativeTolerance;
<a class="jxr_linenumber" name="L49" href="#L49">49</a>  
<a class="jxr_linenumber" name="L50" href="#L50">50</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong>[] validDataSize;
<a class="jxr_linenumber" name="L51" href="#L51">51</a>  
<a class="jxr_linenumber" name="L52" href="#L52">52</a>      <strong class="jxr_keyword">public</strong> <a href="../../../../../org/apache/commons/math3/transform/FastCosineTransformerTest.html">FastCosineTransformerTest</a>(<strong class="jxr_keyword">final</strong> DctNormalization normalization) {
<a class="jxr_linenumber" name="L53" href="#L53">53</a>          <strong class="jxr_keyword">this</strong>.normalization = normalization;
<a class="jxr_linenumber" name="L54" href="#L54">54</a>          <strong class="jxr_keyword">this</strong>.validDataSize = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">int</strong>[] {
<a class="jxr_linenumber" name="L55" href="#L55">55</a>              2, 3, 5, 9, 17, 33, 65, 129
<a class="jxr_linenumber" name="L56" href="#L56">56</a>          };
<a class="jxr_linenumber" name="L57" href="#L57">57</a>          <strong class="jxr_keyword">this</strong>.invalidDataSize = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">int</strong>[] {
<a class="jxr_linenumber" name="L58" href="#L58">58</a>              128
<a class="jxr_linenumber" name="L59" href="#L59">59</a>          };
<a class="jxr_linenumber" name="L60" href="#L60">60</a>          <strong class="jxr_keyword">this</strong>.relativeTolerance = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {
<a class="jxr_linenumber" name="L61" href="#L61">61</a>              1E-15, 1E-15, 1E-14, 1E-13, 1E-13, 1E-12, 1E-11, 1E-10
<a class="jxr_linenumber" name="L62" href="#L62">62</a>          };
<a class="jxr_linenumber" name="L63" href="#L63">63</a>      }
<a class="jxr_linenumber" name="L64" href="#L64">64</a>  
<a class="jxr_linenumber" name="L65" href="#L65">65</a>      <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L66" href="#L66">66</a>  <em class="jxr_javadoccomment">     * Returns an array containing {@code true, false} in order to check both</em>
<a class="jxr_linenumber" name="L67" href="#L67">67</a>  <em class="jxr_javadoccomment">     * standard and orthogonal DCTs.</em>
<a class="jxr_linenumber" name="L68" href="#L68">68</a>  <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L69" href="#L69">69</a>  <em class="jxr_javadoccomment">     * @return an array of parameters for this parameterized test</em>
<a class="jxr_linenumber" name="L70" href="#L70">70</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L71" href="#L71">71</a>      @Parameters
<a class="jxr_linenumber" name="L72" href="#L72">72</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> Collection&lt;Object[]&gt; data() {
<a class="jxr_linenumber" name="L73" href="#L73">73</a>          <strong class="jxr_keyword">final</strong> DctNormalization[] normalization = DctNormalization.values();
<a class="jxr_linenumber" name="L74" href="#L74">74</a>          <strong class="jxr_keyword">final</strong> Object[][] data = <strong class="jxr_keyword">new</strong> DctNormalization[normalization.length][1];
<a class="jxr_linenumber" name="L75" href="#L75">75</a>          <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; normalization.length; i++){
<a class="jxr_linenumber" name="L76" href="#L76">76</a>              data[i][0] = normalization[i];
<a class="jxr_linenumber" name="L77" href="#L77">77</a>          }
<a class="jxr_linenumber" name="L78" href="#L78">78</a>          <strong class="jxr_keyword">return</strong> Arrays.asList(data);
<a class="jxr_linenumber" name="L79" href="#L79">79</a>      }
<a class="jxr_linenumber" name="L80" href="#L80">80</a>  
<a class="jxr_linenumber" name="L81" href="#L81">81</a>      @Override
<a class="jxr_linenumber" name="L82" href="#L82">82</a>      RealTransformer createRealTransformer() {
<a class="jxr_linenumber" name="L83" href="#L83">83</a>          <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> FastCosineTransformer(normalization);
<a class="jxr_linenumber" name="L84" href="#L84">84</a>      }
<a class="jxr_linenumber" name="L85" href="#L85">85</a>  
<a class="jxr_linenumber" name="L86" href="#L86">86</a>      @Override
<a class="jxr_linenumber" name="L87" href="#L87">87</a>      <strong class="jxr_keyword">int</strong> getInvalidDataSize(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> i) {
<a class="jxr_linenumber" name="L88" href="#L88">88</a>          <strong class="jxr_keyword">return</strong> invalidDataSize[i];
<a class="jxr_linenumber" name="L89" href="#L89">89</a>      }
<a class="jxr_linenumber" name="L90" href="#L90">90</a>  
<a class="jxr_linenumber" name="L91" href="#L91">91</a>      @Override
<a class="jxr_linenumber" name="L92" href="#L92">92</a>      <strong class="jxr_keyword">int</strong> getNumberOfInvalidDataSizes() {
<a class="jxr_linenumber" name="L93" href="#L93">93</a>          <strong class="jxr_keyword">return</strong> invalidDataSize.length;
<a class="jxr_linenumber" name="L94" href="#L94">94</a>      }
<a class="jxr_linenumber" name="L95" href="#L95">95</a>  
<a class="jxr_linenumber" name="L96" href="#L96">96</a>      @Override
<a class="jxr_linenumber" name="L97" href="#L97">97</a>      <strong class="jxr_keyword">int</strong> getNumberOfValidDataSizes() {
<a class="jxr_linenumber" name="L98" href="#L98">98</a>          <strong class="jxr_keyword">return</strong> validDataSize.length;
<a class="jxr_linenumber" name="L99" href="#L99">99</a>      }
<a class="jxr_linenumber" name="L100" href="#L100">100</a> 
<a class="jxr_linenumber" name="L101" href="#L101">101</a>     @Override
<a class="jxr_linenumber" name="L102" href="#L102">102</a>     <strong class="jxr_keyword">double</strong> getRelativeTolerance(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> i) {
<a class="jxr_linenumber" name="L103" href="#L103">103</a>         <strong class="jxr_keyword">return</strong> relativeTolerance[i];
<a class="jxr_linenumber" name="L104" href="#L104">104</a>     }
<a class="jxr_linenumber" name="L105" href="#L105">105</a> 
<a class="jxr_linenumber" name="L106" href="#L106">106</a>     @Override
<a class="jxr_linenumber" name="L107" href="#L107">107</a>     <strong class="jxr_keyword">int</strong> getValidDataSize(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> i) {
<a class="jxr_linenumber" name="L108" href="#L108">108</a>         <strong class="jxr_keyword">return</strong> validDataSize[i];
<a class="jxr_linenumber" name="L109" href="#L109">109</a>     }
<a class="jxr_linenumber" name="L110" href="#L110">110</a> 
<a class="jxr_linenumber" name="L111" href="#L111">111</a>     @Override
<a class="jxr_linenumber" name="L112" href="#L112">112</a>     UnivariateFunction getValidFunction() {
<a class="jxr_linenumber" name="L113" href="#L113">113</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> Sinc();
<a class="jxr_linenumber" name="L114" href="#L114">114</a>     }
<a class="jxr_linenumber" name="L115" href="#L115">115</a> 
<a class="jxr_linenumber" name="L116" href="#L116">116</a>     @Override
<a class="jxr_linenumber" name="L117" href="#L117">117</a>     <strong class="jxr_keyword">double</strong> getValidLowerBound() {
<a class="jxr_linenumber" name="L118" href="#L118">118</a>         <strong class="jxr_keyword">return</strong> 0.0;
<a class="jxr_linenumber" name="L119" href="#L119">119</a>     }
<a class="jxr_linenumber" name="L120" href="#L120">120</a> 
<a class="jxr_linenumber" name="L121" href="#L121">121</a>     @Override
<a class="jxr_linenumber" name="L122" href="#L122">122</a>     <strong class="jxr_keyword">double</strong> getValidUpperBound() {
<a class="jxr_linenumber" name="L123" href="#L123">123</a>         <strong class="jxr_keyword">return</strong> FastMath.PI;
<a class="jxr_linenumber" name="L124" href="#L124">124</a>     }
<a class="jxr_linenumber" name="L125" href="#L125">125</a> 
<a class="jxr_linenumber" name="L126" href="#L126">126</a>     @Override
<a class="jxr_linenumber" name="L127" href="#L127">127</a>     <strong class="jxr_keyword">double</strong>[] transform(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] x, <strong class="jxr_keyword">final</strong> TransformType type) {
<a class="jxr_linenumber" name="L128" href="#L128">128</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> n = x.length;
<a class="jxr_linenumber" name="L129" href="#L129">129</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] y = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[n];
<a class="jxr_linenumber" name="L130" href="#L130">130</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] cos = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[2 * (n - 1)];
<a class="jxr_linenumber" name="L131" href="#L131">131</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; cos.length; i++) {
<a class="jxr_linenumber" name="L132" href="#L132">132</a>             cos[i] = FastMath.cos(FastMath.PI * i / (n - 1.0));
<a class="jxr_linenumber" name="L133" href="#L133">133</a>         }
<a class="jxr_linenumber" name="L134" href="#L134">134</a>         <strong class="jxr_keyword">int</strong> sgn = 1;
<a class="jxr_linenumber" name="L135" href="#L135">135</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = 0; j &lt; n; j++) {
<a class="jxr_linenumber" name="L136" href="#L136">136</a>             <strong class="jxr_keyword">double</strong> yj = 0.5 * (x[0] + sgn * x[n - 1]);
<a class="jxr_linenumber" name="L137" href="#L137">137</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 1; i &lt; n - 1; i++) {
<a class="jxr_linenumber" name="L138" href="#L138">138</a>                 yj += x[i] * cos[(i * j) % cos.length];
<a class="jxr_linenumber" name="L139" href="#L139">139</a>             }
<a class="jxr_linenumber" name="L140" href="#L140">140</a>             y[j] = yj;
<a class="jxr_linenumber" name="L141" href="#L141">141</a>             sgn *= -1;
<a class="jxr_linenumber" name="L142" href="#L142">142</a>         }
<a class="jxr_linenumber" name="L143" href="#L143">143</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> s;
<a class="jxr_linenumber" name="L144" href="#L144">144</a>         <strong class="jxr_keyword">if</strong> (type == TransformType.FORWARD) {
<a class="jxr_linenumber" name="L145" href="#L145">145</a>             <strong class="jxr_keyword">if</strong> (normalization == DctNormalization.STANDARD_DCT_I) {
<a class="jxr_linenumber" name="L146" href="#L146">146</a>                 s = 1.0;
<a class="jxr_linenumber" name="L147" href="#L147">147</a>             } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (normalization == DctNormalization.ORTHOGONAL_DCT_I) {
<a class="jxr_linenumber" name="L148" href="#L148">148</a>                 s = FastMath.sqrt(2.0 / (n - 1.0));
<a class="jxr_linenumber" name="L149" href="#L149">149</a>             } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L150" href="#L150">150</a>                 <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> MathIllegalStateException();
<a class="jxr_linenumber" name="L151" href="#L151">151</a>             }
<a class="jxr_linenumber" name="L152" href="#L152">152</a>         } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (type == TransformType.INVERSE) {
<a class="jxr_linenumber" name="L153" href="#L153">153</a>             <strong class="jxr_keyword">if</strong> (normalization == DctNormalization.STANDARD_DCT_I) {
<a class="jxr_linenumber" name="L154" href="#L154">154</a>                 s = 2.0 / (n - 1.0);
<a class="jxr_linenumber" name="L155" href="#L155">155</a>             } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (normalization == DctNormalization.ORTHOGONAL_DCT_I) {
<a class="jxr_linenumber" name="L156" href="#L156">156</a>                 s = FastMath.sqrt(2.0 / (n - 1.0));
<a class="jxr_linenumber" name="L157" href="#L157">157</a>             } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L158" href="#L158">158</a>                 <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> MathIllegalStateException();
<a class="jxr_linenumber" name="L159" href="#L159">159</a>             }
<a class="jxr_linenumber" name="L160" href="#L160">160</a>         } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L161" href="#L161">161</a>             <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L162" href="#L162">162</a> <em class="jxr_comment">             * Should never occur. This clause is a safeguard in case other</em>
<a class="jxr_linenumber" name="L163" href="#L163">163</a> <em class="jxr_comment">             * types are used to TransformType (which should not be done).</em>
<a class="jxr_linenumber" name="L164" href="#L164">164</a> <em class="jxr_comment">             */</em>
<a class="jxr_linenumber" name="L165" href="#L165">165</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> MathIllegalStateException();
<a class="jxr_linenumber" name="L166" href="#L166">166</a>         }
<a class="jxr_linenumber" name="L167" href="#L167">167</a>         TransformUtils.scaleArray(y, s);
<a class="jxr_linenumber" name="L168" href="#L168">168</a>         <strong class="jxr_keyword">return</strong> y;
<a class="jxr_linenumber" name="L169" href="#L169">169</a>     }
<a class="jxr_linenumber" name="L170" href="#L170">170</a> 
<a class="jxr_linenumber" name="L171" href="#L171">171</a>     <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L172" href="#L172">172</a> <em class="jxr_comment">     * Additional tests.</em>
<a class="jxr_linenumber" name="L173" href="#L173">173</a> <em class="jxr_comment">     */</em>
<a class="jxr_linenumber" name="L174" href="#L174">174</a> 
<a class="jxr_linenumber" name="L175" href="#L175">175</a>     <em class="jxr_javadoccomment">/** Test of transformer for the ad hoc data. */</em>
<a class="jxr_linenumber" name="L176" href="#L176">176</a>     @Test
<a class="jxr_linenumber" name="L177" href="#L177">177</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testAdHocData() {
<a class="jxr_linenumber" name="L178" href="#L178">178</a>         FastCosineTransformer transformer;
<a class="jxr_linenumber" name="L179" href="#L179">179</a>         transformer = <strong class="jxr_keyword">new</strong> FastCosineTransformer(DctNormalization.STANDARD_DCT_I);
<a class="jxr_linenumber" name="L180" href="#L180">180</a>         <strong class="jxr_keyword">double</strong> result[], tolerance = 1E-12;
<a class="jxr_linenumber" name="L181" href="#L181">181</a> 
<a class="jxr_linenumber" name="L182" href="#L182">182</a>         <strong class="jxr_keyword">double</strong> x[] = {
<a class="jxr_linenumber" name="L183" href="#L183">183</a>             0.0, 1.0, 4.0, 9.0, 16.0, 25.0, 36.0, 49.0, 64.0
<a class="jxr_linenumber" name="L184" href="#L184">184</a>         };
<a class="jxr_linenumber" name="L185" href="#L185">185</a>         <strong class="jxr_keyword">double</strong> y[] =
<a class="jxr_linenumber" name="L186" href="#L186">186</a>             {
<a class="jxr_linenumber" name="L187" href="#L187">187</a>                 172.0, -105.096569476353, 27.3137084989848, -12.9593152353742,
<a class="jxr_linenumber" name="L188" href="#L188">188</a>                 8.0, -5.78585076868676, 4.68629150101524, -4.15826451958632,
<a class="jxr_linenumber" name="L189" href="#L189">189</a>                 4.0
<a class="jxr_linenumber" name="L190" href="#L190">190</a>             };
<a class="jxr_linenumber" name="L191" href="#L191">191</a> 
<a class="jxr_linenumber" name="L192" href="#L192">192</a>         result = transformer.transform(x, TransformType.FORWARD);
<a class="jxr_linenumber" name="L193" href="#L193">193</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; result.length; i++) {
<a class="jxr_linenumber" name="L194" href="#L194">194</a>             Assert.assertEquals(y[i], result[i], tolerance);
<a class="jxr_linenumber" name="L195" href="#L195">195</a>         }
<a class="jxr_linenumber" name="L196" href="#L196">196</a> 
<a class="jxr_linenumber" name="L197" href="#L197">197</a>         result = transformer.transform(y, TransformType.INVERSE);
<a class="jxr_linenumber" name="L198" href="#L198">198</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; result.length; i++) {
<a class="jxr_linenumber" name="L199" href="#L199">199</a>             Assert.assertEquals(x[i], result[i], tolerance);
<a class="jxr_linenumber" name="L200" href="#L200">200</a>         }
<a class="jxr_linenumber" name="L201" href="#L201">201</a> 
<a class="jxr_linenumber" name="L202" href="#L202">202</a>         TransformUtils.scaleArray(x, FastMath.sqrt(0.5 * (x.length - 1)));
<a class="jxr_linenumber" name="L203" href="#L203">203</a> 
<a class="jxr_linenumber" name="L204" href="#L204">204</a>         transformer = <strong class="jxr_keyword">new</strong> FastCosineTransformer(DctNormalization.ORTHOGONAL_DCT_I);
<a class="jxr_linenumber" name="L205" href="#L205">205</a>         result = transformer.transform(y, TransformType.FORWARD);
<a class="jxr_linenumber" name="L206" href="#L206">206</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; result.length; i++) {
<a class="jxr_linenumber" name="L207" href="#L207">207</a>             Assert.assertEquals(x[i], result[i], tolerance);
<a class="jxr_linenumber" name="L208" href="#L208">208</a>         }
<a class="jxr_linenumber" name="L209" href="#L209">209</a> 
<a class="jxr_linenumber" name="L210" href="#L210">210</a>         result = transformer.transform(x, TransformType.INVERSE);
<a class="jxr_linenumber" name="L211" href="#L211">211</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; result.length; i++) {
<a class="jxr_linenumber" name="L212" href="#L212">212</a>             Assert.assertEquals(y[i], result[i], tolerance);
<a class="jxr_linenumber" name="L213" href="#L213">213</a>         }
<a class="jxr_linenumber" name="L214" href="#L214">214</a>     }
<a class="jxr_linenumber" name="L215" href="#L215">215</a> 
<a class="jxr_linenumber" name="L216" href="#L216">216</a>     <em class="jxr_javadoccomment">/** Test of parameters for the transformer. */</em>
<a class="jxr_linenumber" name="L217" href="#L217">217</a>     @Test
<a class="jxr_linenumber" name="L218" href="#L218">218</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testParameters()
<a class="jxr_linenumber" name="L219" href="#L219">219</a>         <strong class="jxr_keyword">throws</strong> Exception {
<a class="jxr_linenumber" name="L220" href="#L220">220</a>         UnivariateFunction f = <strong class="jxr_keyword">new</strong> Sin();
<a class="jxr_linenumber" name="L221" href="#L221">221</a>         FastCosineTransformer transformer;
<a class="jxr_linenumber" name="L222" href="#L222">222</a>         transformer = <strong class="jxr_keyword">new</strong> FastCosineTransformer(DctNormalization.STANDARD_DCT_I);
<a class="jxr_linenumber" name="L223" href="#L223">223</a> 
<a class="jxr_linenumber" name="L224" href="#L224">224</a>         <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L225" href="#L225">225</a>             <em class="jxr_comment">// bad interval</em>
<a class="jxr_linenumber" name="L226" href="#L226">226</a>             transformer.transform(f, 1, -1, 65, TransformType.FORWARD);
<a class="jxr_linenumber" name="L227" href="#L227">227</a>             Assert.fail(<span class="jxr_string">"Expecting IllegalArgumentException - bad interval"</span>);
<a class="jxr_linenumber" name="L228" href="#L228">228</a>         } <strong class="jxr_keyword">catch</strong> (IllegalArgumentException ex) {
<a class="jxr_linenumber" name="L229" href="#L229">229</a>             <em class="jxr_comment">// expected</em>
<a class="jxr_linenumber" name="L230" href="#L230">230</a>         }
<a class="jxr_linenumber" name="L231" href="#L231">231</a>         <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L232" href="#L232">232</a>             <em class="jxr_comment">// bad samples number</em>
<a class="jxr_linenumber" name="L233" href="#L233">233</a>             transformer.transform(f, -1, 1, 1, TransformType.FORWARD);
<a class="jxr_linenumber" name="L234" href="#L234">234</a>             Assert
<a class="jxr_linenumber" name="L235" href="#L235">235</a>                 .fail(<span class="jxr_string">"Expecting IllegalArgumentException - bad samples number"</span>);
<a class="jxr_linenumber" name="L236" href="#L236">236</a>         } <strong class="jxr_keyword">catch</strong> (IllegalArgumentException ex) {
<a class="jxr_linenumber" name="L237" href="#L237">237</a>             <em class="jxr_comment">// expected</em>
<a class="jxr_linenumber" name="L238" href="#L238">238</a>         }
<a class="jxr_linenumber" name="L239" href="#L239">239</a>         <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L240" href="#L240">240</a>             <em class="jxr_comment">// bad samples number</em>
<a class="jxr_linenumber" name="L241" href="#L241">241</a>             transformer.transform(f, -1, 1, 64, TransformType.FORWARD);
<a class="jxr_linenumber" name="L242" href="#L242">242</a>             Assert
<a class="jxr_linenumber" name="L243" href="#L243">243</a>                 .fail(<span class="jxr_string">"Expecting IllegalArgumentException - bad samples number"</span>);
<a class="jxr_linenumber" name="L244" href="#L244">244</a>         } <strong class="jxr_keyword">catch</strong> (IllegalArgumentException ex) {
<a class="jxr_linenumber" name="L245" href="#L245">245</a>             <em class="jxr_comment">// expected</em>
<a class="jxr_linenumber" name="L246" href="#L246">246</a>         }
<a class="jxr_linenumber" name="L247" href="#L247">247</a>     }
<a class="jxr_linenumber" name="L248" href="#L248">248</a> 
<a class="jxr_linenumber" name="L249" href="#L249">249</a>     <em class="jxr_javadoccomment">/** Test of transformer for the sine function. */</em>
<a class="jxr_linenumber" name="L250" href="#L250">250</a>     @Test
<a class="jxr_linenumber" name="L251" href="#L251">251</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testSinFunction() {
<a class="jxr_linenumber" name="L252" href="#L252">252</a>         UnivariateFunction f = <strong class="jxr_keyword">new</strong> Sin();
<a class="jxr_linenumber" name="L253" href="#L253">253</a>         FastCosineTransformer transformer;
<a class="jxr_linenumber" name="L254" href="#L254">254</a>         transformer = <strong class="jxr_keyword">new</strong> FastCosineTransformer(DctNormalization.STANDARD_DCT_I);
<a class="jxr_linenumber" name="L255" href="#L255">255</a>         <strong class="jxr_keyword">double</strong> min, max, result[], tolerance = 1E-12;
<a class="jxr_linenumber" name="L256" href="#L256">256</a>         <strong class="jxr_keyword">int</strong> N = 9;
<a class="jxr_linenumber" name="L257" href="#L257">257</a> 
<a class="jxr_linenumber" name="L258" href="#L258">258</a>         <strong class="jxr_keyword">double</strong> expected[] =
<a class="jxr_linenumber" name="L259" href="#L259">259</a>             {
<a class="jxr_linenumber" name="L260" href="#L260">260</a>                 0.0, 3.26197262739567, 0.0, -2.17958042710327, 0.0,
<a class="jxr_linenumber" name="L261" href="#L261">261</a>                 -0.648846697642915, 0.0, -0.433545502649478, 0.0
<a class="jxr_linenumber" name="L262" href="#L262">262</a>             };
<a class="jxr_linenumber" name="L263" href="#L263">263</a>         min = 0.0;
<a class="jxr_linenumber" name="L264" href="#L264">264</a>         max = 2.0 * FastMath.PI * N / (N - 1);
<a class="jxr_linenumber" name="L265" href="#L265">265</a>         result = transformer.transform(f, min, max, N, TransformType.FORWARD);
<a class="jxr_linenumber" name="L266" href="#L266">266</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; N; i++) {
<a class="jxr_linenumber" name="L267" href="#L267">267</a>             Assert.assertEquals(expected[i], result[i], tolerance);
<a class="jxr_linenumber" name="L268" href="#L268">268</a>         }
<a class="jxr_linenumber" name="L269" href="#L269">269</a> 
<a class="jxr_linenumber" name="L270" href="#L270">270</a>         min = -FastMath.PI;
<a class="jxr_linenumber" name="L271" href="#L271">271</a>         max = FastMath.PI * (N + 1) / (N - 1);
<a class="jxr_linenumber" name="L272" href="#L272">272</a>         result = transformer.transform(f, min, max, N, TransformType.FORWARD);
<a class="jxr_linenumber" name="L273" href="#L273">273</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; N; i++) {
<a class="jxr_linenumber" name="L274" href="#L274">274</a>             Assert.assertEquals(-expected[i], result[i], tolerance);
<a class="jxr_linenumber" name="L275" href="#L275">275</a>         }
<a class="jxr_linenumber" name="L276" href="#L276">276</a>     }
<a class="jxr_linenumber" name="L277" href="#L277">277</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2003&#x2013;2016 <a href="http://www.apache.org/">The Apache Software Foundation</a>. All rights reserved.</div>
</body>
</html>
