<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>LUDecomposition xref</title>
<link type="text/css" rel="stylesheet" href="../../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../apidocs/org/apache/commons/math3/linear/LUDecomposition.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Licensed to the Apache Software Foundation (ASF) under one or more</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> * contributor license agreements.  See the NOTICE file distributed with</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * this work for additional information regarding copyright ownership.</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * The ASF licenses this file to You under the Apache License, Version 2.0</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * (the "License"); you may not use this file except in compliance with</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> * the License.  You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *      <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  <strong class="jxr_keyword">package</strong> org.apache.commons.math3.linear;
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.DimensionMismatchException;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.util.FastMath;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <em class="jxr_javadoccomment"> * Calculates the LUP-decomposition of a square matrix.</em>
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <em class="jxr_javadoccomment"> * &lt;p&gt;The LUP-decomposition of a matrix A consists of three matrices L, U and</em>
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <em class="jxr_javadoccomment"> * P that satisfy: P&amp;times;A = L&amp;times;U. L is lower triangular (with unit</em>
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <em class="jxr_javadoccomment"> * diagonal terms), U is upper triangular and P is a permutation matrix. All</em>
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <em class="jxr_javadoccomment"> * matrices are m&amp;times;m.&lt;/p&gt;</em>
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <em class="jxr_javadoccomment"> * &lt;p&gt;As shown by the presence of the P matrix, this decomposition is</em>
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <em class="jxr_javadoccomment"> * implemented using partial pivoting.&lt;/p&gt;</em>
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <em class="jxr_javadoccomment"> * &lt;p&gt;This class is based on the class with similar name from the</em>
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <em class="jxr_javadoccomment"> * &lt;a href="<a href="http://math.nist.gov/javanumerics/jama/" target="alexandria_uri">http://math.nist.gov/javanumerics/jama/</a>"&gt;JAMA&lt;/a&gt; library.&lt;/p&gt;</em>
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <em class="jxr_javadoccomment"> * &lt;ul&gt;</em>
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <em class="jxr_javadoccomment"> *   &lt;li&gt;a {@link #getP() getP} method has been added,&lt;/li&gt;</em>
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  <em class="jxr_javadoccomment"> *   &lt;li&gt;the {@code det} method has been renamed as {@link #getDeterminant()</em>
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  <em class="jxr_javadoccomment"> *   getDeterminant},&lt;/li&gt;</em>
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  <em class="jxr_javadoccomment"> *   &lt;li&gt;the {@code getDoublePivot} method has been removed (but the int based</em>
<a class="jxr_linenumber" name="L38" href="#L38">38</a>  <em class="jxr_javadoccomment"> *   {@link #getPivot() getPivot} method has been kept),&lt;/li&gt;</em>
<a class="jxr_linenumber" name="L39" href="#L39">39</a>  <em class="jxr_javadoccomment"> *   &lt;li&gt;the {@code solve} and {@code isNonSingular} methods have been replaced</em>
<a class="jxr_linenumber" name="L40" href="#L40">40</a>  <em class="jxr_javadoccomment"> *   by a {@link #getSolver() getSolver} method and the equivalent methods</em>
<a class="jxr_linenumber" name="L41" href="#L41">41</a>  <em class="jxr_javadoccomment"> *   provided by the returned {@link DecompositionSolver}.&lt;/li&gt;</em>
<a class="jxr_linenumber" name="L42" href="#L42">42</a>  <em class="jxr_javadoccomment"> * &lt;/ul&gt;</em>
<a class="jxr_linenumber" name="L43" href="#L43">43</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L44" href="#L44">44</a>  <em class="jxr_javadoccomment"> * @see &lt;a href="<a href="http://mathworld.wolfram.com/LUDecomposition.html" target="alexandria_uri">http://mathworld.wolfram.com/LUDecomposition.html</a>"&gt;MathWorld&lt;/a&gt;</em>
<a class="jxr_linenumber" name="L45" href="#L45">45</a>  <em class="jxr_javadoccomment"> * @see &lt;a href="<a href="http://en.wikipedia.org/wiki/LU_decomposition" target="alexandria_uri">http://en.wikipedia.org/wiki/LU_decomposition</a>"&gt;Wikipedia&lt;/a&gt;</em>
<a class="jxr_linenumber" name="L46" href="#L46">46</a>  <em class="jxr_javadoccomment"> * @since 2.0 (changed to concrete class in 3.0)</em>
<a class="jxr_linenumber" name="L47" href="#L47">47</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L48" href="#L48">48</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../org/apache/commons/math3/linear/LUDecomposition.html">LUDecomposition</a> {
<a class="jxr_linenumber" name="L49" href="#L49">49</a>      <em class="jxr_javadoccomment">/** Default bound to determine effective singularity in LU decomposition. */</em>
<a class="jxr_linenumber" name="L50" href="#L50">50</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> DEFAULT_TOO_SMALL = 1e-11;
<a class="jxr_linenumber" name="L51" href="#L51">51</a>      <em class="jxr_javadoccomment">/** Entries of LU decomposition. */</em>
<a class="jxr_linenumber" name="L52" href="#L52">52</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[][] lu;
<a class="jxr_linenumber" name="L53" href="#L53">53</a>      <em class="jxr_javadoccomment">/** Pivot permutation associated with LU decomposition. */</em>
<a class="jxr_linenumber" name="L54" href="#L54">54</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong>[] pivot;
<a class="jxr_linenumber" name="L55" href="#L55">55</a>      <em class="jxr_javadoccomment">/** Parity of the permutation associated with the LU decomposition. */</em>
<a class="jxr_linenumber" name="L56" href="#L56">56</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">boolean</strong> even;
<a class="jxr_linenumber" name="L57" href="#L57">57</a>      <em class="jxr_javadoccomment">/** Singularity indicator. */</em>
<a class="jxr_linenumber" name="L58" href="#L58">58</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">boolean</strong> singular;
<a class="jxr_linenumber" name="L59" href="#L59">59</a>      <em class="jxr_javadoccomment">/** Cached value of L. */</em>
<a class="jxr_linenumber" name="L60" href="#L60">60</a>      <strong class="jxr_keyword">private</strong> <a href="../../../../../org/apache/commons/math3/linear/RealMatrix.html">RealMatrix</a> cachedL;
<a class="jxr_linenumber" name="L61" href="#L61">61</a>      <em class="jxr_javadoccomment">/** Cached value of U. */</em>
<a class="jxr_linenumber" name="L62" href="#L62">62</a>      <strong class="jxr_keyword">private</strong> <a href="../../../../../org/apache/commons/math3/linear/RealMatrix.html">RealMatrix</a> cachedU;
<a class="jxr_linenumber" name="L63" href="#L63">63</a>      <em class="jxr_javadoccomment">/** Cached value of P. */</em>
<a class="jxr_linenumber" name="L64" href="#L64">64</a>      <strong class="jxr_keyword">private</strong> <a href="../../../../../org/apache/commons/math3/linear/RealMatrix.html">RealMatrix</a> cachedP;
<a class="jxr_linenumber" name="L65" href="#L65">65</a>  
<a class="jxr_linenumber" name="L66" href="#L66">66</a>      <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L67" href="#L67">67</a>  <em class="jxr_javadoccomment">     * Calculates the LU-decomposition of the given matrix.</em>
<a class="jxr_linenumber" name="L68" href="#L68">68</a>  <em class="jxr_javadoccomment">     * This constructor uses 1e-11 as default value for the singularity</em>
<a class="jxr_linenumber" name="L69" href="#L69">69</a>  <em class="jxr_javadoccomment">     * threshold.</em>
<a class="jxr_linenumber" name="L70" href="#L70">70</a>  <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L71" href="#L71">71</a>  <em class="jxr_javadoccomment">     * @param matrix Matrix to decompose.</em>
<a class="jxr_linenumber" name="L72" href="#L72">72</a>  <em class="jxr_javadoccomment">     * @throws NonSquareMatrixException if matrix is not square.</em>
<a class="jxr_linenumber" name="L73" href="#L73">73</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L74" href="#L74">74</a>      <strong class="jxr_keyword">public</strong> <a href="../../../../../org/apache/commons/math3/linear/LUDecomposition.html">LUDecomposition</a>(<a href="../../../../../org/apache/commons/math3/linear/RealMatrix.html">RealMatrix</a> matrix) {
<a class="jxr_linenumber" name="L75" href="#L75">75</a>          <strong class="jxr_keyword">this</strong>(matrix, DEFAULT_TOO_SMALL);
<a class="jxr_linenumber" name="L76" href="#L76">76</a>      }
<a class="jxr_linenumber" name="L77" href="#L77">77</a>  
<a class="jxr_linenumber" name="L78" href="#L78">78</a>      <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L79" href="#L79">79</a>  <em class="jxr_javadoccomment">     * Calculates the LU-decomposition of the given matrix.</em>
<a class="jxr_linenumber" name="L80" href="#L80">80</a>  <em class="jxr_javadoccomment">     * @param matrix The matrix to decompose.</em>
<a class="jxr_linenumber" name="L81" href="#L81">81</a>  <em class="jxr_javadoccomment">     * @param singularityThreshold threshold (based on partial row norm)</em>
<a class="jxr_linenumber" name="L82" href="#L82">82</a>  <em class="jxr_javadoccomment">     * under which a matrix is considered singular</em>
<a class="jxr_linenumber" name="L83" href="#L83">83</a>  <em class="jxr_javadoccomment">     * @throws NonSquareMatrixException if matrix is not square</em>
<a class="jxr_linenumber" name="L84" href="#L84">84</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L85" href="#L85">85</a>      <strong class="jxr_keyword">public</strong> <a href="../../../../../org/apache/commons/math3/linear/LUDecomposition.html">LUDecomposition</a>(<a href="../../../../../org/apache/commons/math3/linear/RealMatrix.html">RealMatrix</a> matrix, <strong class="jxr_keyword">double</strong> singularityThreshold) {
<a class="jxr_linenumber" name="L86" href="#L86">86</a>          <strong class="jxr_keyword">if</strong> (!matrix.isSquare()) {
<a class="jxr_linenumber" name="L87" href="#L87">87</a>              <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../org/apache/commons/math3/linear/NonSquareMatrixException.html">NonSquareMatrixException</a>(matrix.getRowDimension(),
<a class="jxr_linenumber" name="L88" href="#L88">88</a>                                                 matrix.getColumnDimension());
<a class="jxr_linenumber" name="L89" href="#L89">89</a>          }
<a class="jxr_linenumber" name="L90" href="#L90">90</a>  
<a class="jxr_linenumber" name="L91" href="#L91">91</a>          <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> m = matrix.getColumnDimension();
<a class="jxr_linenumber" name="L92" href="#L92">92</a>          lu = matrix.getData();
<a class="jxr_linenumber" name="L93" href="#L93">93</a>          pivot = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">int</strong>[m];
<a class="jxr_linenumber" name="L94" href="#L94">94</a>          cachedL = <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L95" href="#L95">95</a>          cachedU = <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L96" href="#L96">96</a>          cachedP = <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L97" href="#L97">97</a>  
<a class="jxr_linenumber" name="L98" href="#L98">98</a>          <em class="jxr_comment">// Initialize permutation array and parity</em>
<a class="jxr_linenumber" name="L99" href="#L99">99</a>          <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> row = 0; row &lt; m; row++) {
<a class="jxr_linenumber" name="L100" href="#L100">100</a>             pivot[row] = row;
<a class="jxr_linenumber" name="L101" href="#L101">101</a>         }
<a class="jxr_linenumber" name="L102" href="#L102">102</a>         even     = <strong class="jxr_keyword">true</strong>;
<a class="jxr_linenumber" name="L103" href="#L103">103</a>         singular = false;
<a class="jxr_linenumber" name="L104" href="#L104">104</a> 
<a class="jxr_linenumber" name="L105" href="#L105">105</a>         <em class="jxr_comment">// Loop over columns</em>
<a class="jxr_linenumber" name="L106" href="#L106">106</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> col = 0; col &lt; m; col++) {
<a class="jxr_linenumber" name="L107" href="#L107">107</a> 
<a class="jxr_linenumber" name="L108" href="#L108">108</a>             <em class="jxr_comment">// upper</em>
<a class="jxr_linenumber" name="L109" href="#L109">109</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> row = 0; row &lt; col; row++) {
<a class="jxr_linenumber" name="L110" href="#L110">110</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] luRow = lu[row];
<a class="jxr_linenumber" name="L111" href="#L111">111</a>                 <strong class="jxr_keyword">double</strong> sum = luRow[col];
<a class="jxr_linenumber" name="L112" href="#L112">112</a>                 <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; row; i++) {
<a class="jxr_linenumber" name="L113" href="#L113">113</a>                     sum -= luRow[i] * lu[i][col];
<a class="jxr_linenumber" name="L114" href="#L114">114</a>                 }
<a class="jxr_linenumber" name="L115" href="#L115">115</a>                 luRow[col] = sum;
<a class="jxr_linenumber" name="L116" href="#L116">116</a>             }
<a class="jxr_linenumber" name="L117" href="#L117">117</a> 
<a class="jxr_linenumber" name="L118" href="#L118">118</a>             <em class="jxr_comment">// lower</em>
<a class="jxr_linenumber" name="L119" href="#L119">119</a>             <strong class="jxr_keyword">int</strong> max = col; <em class="jxr_comment">// permutation row</em>
<a class="jxr_linenumber" name="L120" href="#L120">120</a>             <strong class="jxr_keyword">double</strong> largest = Double.NEGATIVE_INFINITY;
<a class="jxr_linenumber" name="L121" href="#L121">121</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> row = col; row &lt; m; row++) {
<a class="jxr_linenumber" name="L122" href="#L122">122</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] luRow = lu[row];
<a class="jxr_linenumber" name="L123" href="#L123">123</a>                 <strong class="jxr_keyword">double</strong> sum = luRow[col];
<a class="jxr_linenumber" name="L124" href="#L124">124</a>                 <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; col; i++) {
<a class="jxr_linenumber" name="L125" href="#L125">125</a>                     sum -= luRow[i] * lu[i][col];
<a class="jxr_linenumber" name="L126" href="#L126">126</a>                 }
<a class="jxr_linenumber" name="L127" href="#L127">127</a>                 luRow[col] = sum;
<a class="jxr_linenumber" name="L128" href="#L128">128</a> 
<a class="jxr_linenumber" name="L129" href="#L129">129</a>                 <em class="jxr_comment">// maintain best permutation choice</em>
<a class="jxr_linenumber" name="L130" href="#L130">130</a>                 <strong class="jxr_keyword">if</strong> (FastMath.abs(sum) &gt; largest) {
<a class="jxr_linenumber" name="L131" href="#L131">131</a>                     largest = FastMath.abs(sum);
<a class="jxr_linenumber" name="L132" href="#L132">132</a>                     max = row;
<a class="jxr_linenumber" name="L133" href="#L133">133</a>                 }
<a class="jxr_linenumber" name="L134" href="#L134">134</a>             }
<a class="jxr_linenumber" name="L135" href="#L135">135</a> 
<a class="jxr_linenumber" name="L136" href="#L136">136</a>             <em class="jxr_comment">// Singularity check</em>
<a class="jxr_linenumber" name="L137" href="#L137">137</a>             <strong class="jxr_keyword">if</strong> (FastMath.abs(lu[max][col]) &lt; singularityThreshold) {
<a class="jxr_linenumber" name="L138" href="#L138">138</a>                 singular = <strong class="jxr_keyword">true</strong>;
<a class="jxr_linenumber" name="L139" href="#L139">139</a>                 <strong class="jxr_keyword">return</strong>;
<a class="jxr_linenumber" name="L140" href="#L140">140</a>             }
<a class="jxr_linenumber" name="L141" href="#L141">141</a> 
<a class="jxr_linenumber" name="L142" href="#L142">142</a>             <em class="jxr_comment">// Pivot if necessary</em>
<a class="jxr_linenumber" name="L143" href="#L143">143</a>             <strong class="jxr_keyword">if</strong> (max != col) {
<a class="jxr_linenumber" name="L144" href="#L144">144</a>                 <strong class="jxr_keyword">double</strong> tmp = 0;
<a class="jxr_linenumber" name="L145" href="#L145">145</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] luMax = lu[max];
<a class="jxr_linenumber" name="L146" href="#L146">146</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] luCol = lu[col];
<a class="jxr_linenumber" name="L147" href="#L147">147</a>                 <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; m; i++) {
<a class="jxr_linenumber" name="L148" href="#L148">148</a>                     tmp = luMax[i];
<a class="jxr_linenumber" name="L149" href="#L149">149</a>                     luMax[i] = luCol[i];
<a class="jxr_linenumber" name="L150" href="#L150">150</a>                     luCol[i] = tmp;
<a class="jxr_linenumber" name="L151" href="#L151">151</a>                 }
<a class="jxr_linenumber" name="L152" href="#L152">152</a>                 <strong class="jxr_keyword">int</strong> temp = pivot[max];
<a class="jxr_linenumber" name="L153" href="#L153">153</a>                 pivot[max] = pivot[col];
<a class="jxr_linenumber" name="L154" href="#L154">154</a>                 pivot[col] = temp;
<a class="jxr_linenumber" name="L155" href="#L155">155</a>                 even = !even;
<a class="jxr_linenumber" name="L156" href="#L156">156</a>             }
<a class="jxr_linenumber" name="L157" href="#L157">157</a> 
<a class="jxr_linenumber" name="L158" href="#L158">158</a>             <em class="jxr_comment">// Divide the lower elements by the "winning" diagonal elt.</em>
<a class="jxr_linenumber" name="L159" href="#L159">159</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> luDiag = lu[col][col];
<a class="jxr_linenumber" name="L160" href="#L160">160</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> row = col + 1; row &lt; m; row++) {
<a class="jxr_linenumber" name="L161" href="#L161">161</a>                 lu[row][col] /= luDiag;
<a class="jxr_linenumber" name="L162" href="#L162">162</a>             }
<a class="jxr_linenumber" name="L163" href="#L163">163</a>         }
<a class="jxr_linenumber" name="L164" href="#L164">164</a>     }
<a class="jxr_linenumber" name="L165" href="#L165">165</a> 
<a class="jxr_linenumber" name="L166" href="#L166">166</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L167" href="#L167">167</a> <em class="jxr_javadoccomment">     * Returns the matrix L of the decomposition.</em>
<a class="jxr_linenumber" name="L168" href="#L168">168</a> <em class="jxr_javadoccomment">     * &lt;p&gt;L is a lower-triangular matrix&lt;/p&gt;</em>
<a class="jxr_linenumber" name="L169" href="#L169">169</a> <em class="jxr_javadoccomment">     * @return the L matrix (or null if decomposed matrix is singular)</em>
<a class="jxr_linenumber" name="L170" href="#L170">170</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L171" href="#L171">171</a>     <strong class="jxr_keyword">public</strong> <a href="../../../../../org/apache/commons/math3/linear/RealMatrix.html">RealMatrix</a> getL() {
<a class="jxr_linenumber" name="L172" href="#L172">172</a>         <strong class="jxr_keyword">if</strong> ((cachedL == <strong class="jxr_keyword">null</strong>) &amp;&amp; !singular) {
<a class="jxr_linenumber" name="L173" href="#L173">173</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> m = pivot.length;
<a class="jxr_linenumber" name="L174" href="#L174">174</a>             cachedL = MatrixUtils.createRealMatrix(m, m);
<a class="jxr_linenumber" name="L175" href="#L175">175</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; m; ++i) {
<a class="jxr_linenumber" name="L176" href="#L176">176</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] luI = lu[i];
<a class="jxr_linenumber" name="L177" href="#L177">177</a>                 <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = 0; j &lt; i; ++j) {
<a class="jxr_linenumber" name="L178" href="#L178">178</a>                     cachedL.setEntry(i, j, luI[j]);
<a class="jxr_linenumber" name="L179" href="#L179">179</a>                 }
<a class="jxr_linenumber" name="L180" href="#L180">180</a>                 cachedL.setEntry(i, i, 1.0);
<a class="jxr_linenumber" name="L181" href="#L181">181</a>             }
<a class="jxr_linenumber" name="L182" href="#L182">182</a>         }
<a class="jxr_linenumber" name="L183" href="#L183">183</a>         <strong class="jxr_keyword">return</strong> cachedL;
<a class="jxr_linenumber" name="L184" href="#L184">184</a>     }
<a class="jxr_linenumber" name="L185" href="#L185">185</a> 
<a class="jxr_linenumber" name="L186" href="#L186">186</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L187" href="#L187">187</a> <em class="jxr_javadoccomment">     * Returns the matrix U of the decomposition.</em>
<a class="jxr_linenumber" name="L188" href="#L188">188</a> <em class="jxr_javadoccomment">     * &lt;p&gt;U is an upper-triangular matrix&lt;/p&gt;</em>
<a class="jxr_linenumber" name="L189" href="#L189">189</a> <em class="jxr_javadoccomment">     * @return the U matrix (or null if decomposed matrix is singular)</em>
<a class="jxr_linenumber" name="L190" href="#L190">190</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L191" href="#L191">191</a>     <strong class="jxr_keyword">public</strong> <a href="../../../../../org/apache/commons/math3/linear/RealMatrix.html">RealMatrix</a> getU() {
<a class="jxr_linenumber" name="L192" href="#L192">192</a>         <strong class="jxr_keyword">if</strong> ((cachedU == <strong class="jxr_keyword">null</strong>) &amp;&amp; !singular) {
<a class="jxr_linenumber" name="L193" href="#L193">193</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> m = pivot.length;
<a class="jxr_linenumber" name="L194" href="#L194">194</a>             cachedU = MatrixUtils.createRealMatrix(m, m);
<a class="jxr_linenumber" name="L195" href="#L195">195</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; m; ++i) {
<a class="jxr_linenumber" name="L196" href="#L196">196</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] luI = lu[i];
<a class="jxr_linenumber" name="L197" href="#L197">197</a>                 <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = i; j &lt; m; ++j) {
<a class="jxr_linenumber" name="L198" href="#L198">198</a>                     cachedU.setEntry(i, j, luI[j]);
<a class="jxr_linenumber" name="L199" href="#L199">199</a>                 }
<a class="jxr_linenumber" name="L200" href="#L200">200</a>             }
<a class="jxr_linenumber" name="L201" href="#L201">201</a>         }
<a class="jxr_linenumber" name="L202" href="#L202">202</a>         <strong class="jxr_keyword">return</strong> cachedU;
<a class="jxr_linenumber" name="L203" href="#L203">203</a>     }
<a class="jxr_linenumber" name="L204" href="#L204">204</a> 
<a class="jxr_linenumber" name="L205" href="#L205">205</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L206" href="#L206">206</a> <em class="jxr_javadoccomment">     * Returns the P rows permutation matrix.</em>
<a class="jxr_linenumber" name="L207" href="#L207">207</a> <em class="jxr_javadoccomment">     * &lt;p&gt;P is a sparse matrix with exactly one element set to 1.0 in</em>
<a class="jxr_linenumber" name="L208" href="#L208">208</a> <em class="jxr_javadoccomment">     * each row and each column, all other elements being set to 0.0.&lt;/p&gt;</em>
<a class="jxr_linenumber" name="L209" href="#L209">209</a> <em class="jxr_javadoccomment">     * &lt;p&gt;The positions of the 1 elements are given by the {@link #getPivot()</em>
<a class="jxr_linenumber" name="L210" href="#L210">210</a> <em class="jxr_javadoccomment">     * pivot permutation vector}.&lt;/p&gt;</em>
<a class="jxr_linenumber" name="L211" href="#L211">211</a> <em class="jxr_javadoccomment">     * @return the P rows permutation matrix (or null if decomposed matrix is singular)</em>
<a class="jxr_linenumber" name="L212" href="#L212">212</a> <em class="jxr_javadoccomment">     * @see #getPivot()</em>
<a class="jxr_linenumber" name="L213" href="#L213">213</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L214" href="#L214">214</a>     <strong class="jxr_keyword">public</strong> <a href="../../../../../org/apache/commons/math3/linear/RealMatrix.html">RealMatrix</a> getP() {
<a class="jxr_linenumber" name="L215" href="#L215">215</a>         <strong class="jxr_keyword">if</strong> ((cachedP == <strong class="jxr_keyword">null</strong>) &amp;&amp; !singular) {
<a class="jxr_linenumber" name="L216" href="#L216">216</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> m = pivot.length;
<a class="jxr_linenumber" name="L217" href="#L217">217</a>             cachedP = MatrixUtils.createRealMatrix(m, m);
<a class="jxr_linenumber" name="L218" href="#L218">218</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; m; ++i) {
<a class="jxr_linenumber" name="L219" href="#L219">219</a>                 cachedP.setEntry(i, pivot[i], 1.0);
<a class="jxr_linenumber" name="L220" href="#L220">220</a>             }
<a class="jxr_linenumber" name="L221" href="#L221">221</a>         }
<a class="jxr_linenumber" name="L222" href="#L222">222</a>         <strong class="jxr_keyword">return</strong> cachedP;
<a class="jxr_linenumber" name="L223" href="#L223">223</a>     }
<a class="jxr_linenumber" name="L224" href="#L224">224</a> 
<a class="jxr_linenumber" name="L225" href="#L225">225</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L226" href="#L226">226</a> <em class="jxr_javadoccomment">     * Returns the pivot permutation vector.</em>
<a class="jxr_linenumber" name="L227" href="#L227">227</a> <em class="jxr_javadoccomment">     * @return the pivot permutation vector</em>
<a class="jxr_linenumber" name="L228" href="#L228">228</a> <em class="jxr_javadoccomment">     * @see #getP()</em>
<a class="jxr_linenumber" name="L229" href="#L229">229</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L230" href="#L230">230</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">int</strong>[] getPivot() {
<a class="jxr_linenumber" name="L231" href="#L231">231</a>         <strong class="jxr_keyword">return</strong> pivot.clone();
<a class="jxr_linenumber" name="L232" href="#L232">232</a>     }
<a class="jxr_linenumber" name="L233" href="#L233">233</a> 
<a class="jxr_linenumber" name="L234" href="#L234">234</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L235" href="#L235">235</a> <em class="jxr_javadoccomment">     * Return the determinant of the matrix</em>
<a class="jxr_linenumber" name="L236" href="#L236">236</a> <em class="jxr_javadoccomment">     * @return determinant of the matrix</em>
<a class="jxr_linenumber" name="L237" href="#L237">237</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L238" href="#L238">238</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">double</strong> getDeterminant() {
<a class="jxr_linenumber" name="L239" href="#L239">239</a>         <strong class="jxr_keyword">if</strong> (singular) {
<a class="jxr_linenumber" name="L240" href="#L240">240</a>             <strong class="jxr_keyword">return</strong> 0;
<a class="jxr_linenumber" name="L241" href="#L241">241</a>         } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L242" href="#L242">242</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> m = pivot.length;
<a class="jxr_linenumber" name="L243" href="#L243">243</a>             <strong class="jxr_keyword">double</strong> determinant = even ? 1 : -1;
<a class="jxr_linenumber" name="L244" href="#L244">244</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; m; i++) {
<a class="jxr_linenumber" name="L245" href="#L245">245</a>                 determinant *= lu[i][i];
<a class="jxr_linenumber" name="L246" href="#L246">246</a>             }
<a class="jxr_linenumber" name="L247" href="#L247">247</a>             <strong class="jxr_keyword">return</strong> determinant;
<a class="jxr_linenumber" name="L248" href="#L248">248</a>         }
<a class="jxr_linenumber" name="L249" href="#L249">249</a>     }
<a class="jxr_linenumber" name="L250" href="#L250">250</a> 
<a class="jxr_linenumber" name="L251" href="#L251">251</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L252" href="#L252">252</a> <em class="jxr_javadoccomment">     * Get a solver for finding the A &amp;times; X = B solution in exact linear</em>
<a class="jxr_linenumber" name="L253" href="#L253">253</a> <em class="jxr_javadoccomment">     * sense.</em>
<a class="jxr_linenumber" name="L254" href="#L254">254</a> <em class="jxr_javadoccomment">     * @return a solver</em>
<a class="jxr_linenumber" name="L255" href="#L255">255</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L256" href="#L256">256</a>     <strong class="jxr_keyword">public</strong> <a href="../../../../../org/apache/commons/math3/linear/DecompositionSolver.html">DecompositionSolver</a> getSolver() {
<a class="jxr_linenumber" name="L257" href="#L257">257</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../org/apache/commons/math3/linear/QRDecomposition.html">Solver</a>(lu, pivot, singular);
<a class="jxr_linenumber" name="L258" href="#L258">258</a>     }
<a class="jxr_linenumber" name="L259" href="#L259">259</a> 
<a class="jxr_linenumber" name="L260" href="#L260">260</a>     <em class="jxr_javadoccomment">/** Specialized solver. */</em>
<a class="jxr_linenumber" name="L261" href="#L261">261</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../org/apache/commons/math3/linear/QRDecomposition.html">Solver</a> <strong class="jxr_keyword">implements</strong> <a href="../../../../../org/apache/commons/math3/linear/DecompositionSolver.html">DecompositionSolver</a> {
<a class="jxr_linenumber" name="L262" href="#L262">262</a> 
<a class="jxr_linenumber" name="L263" href="#L263">263</a>         <em class="jxr_javadoccomment">/** Entries of LU decomposition. */</em>
<a class="jxr_linenumber" name="L264" href="#L264">264</a>         <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[][] lu;
<a class="jxr_linenumber" name="L265" href="#L265">265</a> 
<a class="jxr_linenumber" name="L266" href="#L266">266</a>         <em class="jxr_javadoccomment">/** Pivot permutation associated with LU decomposition. */</em>
<a class="jxr_linenumber" name="L267" href="#L267">267</a>         <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong>[] pivot;
<a class="jxr_linenumber" name="L268" href="#L268">268</a> 
<a class="jxr_linenumber" name="L269" href="#L269">269</a>         <em class="jxr_javadoccomment">/** Singularity indicator. */</em>
<a class="jxr_linenumber" name="L270" href="#L270">270</a>         <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">boolean</strong> singular;
<a class="jxr_linenumber" name="L271" href="#L271">271</a> 
<a class="jxr_linenumber" name="L272" href="#L272">272</a>         <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L273" href="#L273">273</a> <em class="jxr_javadoccomment">         * Build a solver from decomposed matrix.</em>
<a class="jxr_linenumber" name="L274" href="#L274">274</a> <em class="jxr_javadoccomment">         * @param lu entries of LU decomposition</em>
<a class="jxr_linenumber" name="L275" href="#L275">275</a> <em class="jxr_javadoccomment">         * @param pivot pivot permutation associated with LU decomposition</em>
<a class="jxr_linenumber" name="L276" href="#L276">276</a> <em class="jxr_javadoccomment">         * @param singular singularity indicator</em>
<a class="jxr_linenumber" name="L277" href="#L277">277</a> <em class="jxr_javadoccomment">         */</em>
<a class="jxr_linenumber" name="L278" href="#L278">278</a>         <strong class="jxr_keyword">private</strong> <a href="../../../../../org/apache/commons/math3/linear/QRDecomposition.html">Solver</a>(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[][] lu, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong>[] pivot, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">boolean</strong> singular) {
<a class="jxr_linenumber" name="L279" href="#L279">279</a>             <strong class="jxr_keyword">this</strong>.lu       = lu;
<a class="jxr_linenumber" name="L280" href="#L280">280</a>             <strong class="jxr_keyword">this</strong>.pivot    = pivot;
<a class="jxr_linenumber" name="L281" href="#L281">281</a>             <strong class="jxr_keyword">this</strong>.singular = singular;
<a class="jxr_linenumber" name="L282" href="#L282">282</a>         }
<a class="jxr_linenumber" name="L283" href="#L283">283</a> 
<a class="jxr_linenumber" name="L284" href="#L284">284</a>         <em class="jxr_javadoccomment">/** {@inheritDoc} */</em>
<a class="jxr_linenumber" name="L285" href="#L285">285</a>         <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">boolean</strong> isNonSingular() {
<a class="jxr_linenumber" name="L286" href="#L286">286</a>             <strong class="jxr_keyword">return</strong> !singular;
<a class="jxr_linenumber" name="L287" href="#L287">287</a>         }
<a class="jxr_linenumber" name="L288" href="#L288">288</a> 
<a class="jxr_linenumber" name="L289" href="#L289">289</a>         <em class="jxr_javadoccomment">/** {@inheritDoc} */</em>
<a class="jxr_linenumber" name="L290" href="#L290">290</a>         <strong class="jxr_keyword">public</strong> <a href="../../../../../org/apache/commons/math3/linear/RealVector.html">RealVector</a> solve(<a href="../../../../../org/apache/commons/math3/linear/RealVector.html">RealVector</a> b) {
<a class="jxr_linenumber" name="L291" href="#L291">291</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> m = pivot.length;
<a class="jxr_linenumber" name="L292" href="#L292">292</a>             <strong class="jxr_keyword">if</strong> (b.getDimension() != m) {
<a class="jxr_linenumber" name="L293" href="#L293">293</a>                 <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../org/apache/commons/math3/exception/DimensionMismatchException.html">DimensionMismatchException</a>(b.getDimension(), m);
<a class="jxr_linenumber" name="L294" href="#L294">294</a>             }
<a class="jxr_linenumber" name="L295" href="#L295">295</a>             <strong class="jxr_keyword">if</strong> (singular) {
<a class="jxr_linenumber" name="L296" href="#L296">296</a>                 <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../org/apache/commons/math3/linear/SingularMatrixException.html">SingularMatrixException</a>();
<a class="jxr_linenumber" name="L297" href="#L297">297</a>             }
<a class="jxr_linenumber" name="L298" href="#L298">298</a> 
<a class="jxr_linenumber" name="L299" href="#L299">299</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] bp = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[m];
<a class="jxr_linenumber" name="L300" href="#L300">300</a> 
<a class="jxr_linenumber" name="L301" href="#L301">301</a>             <em class="jxr_comment">// Apply permutations to b</em>
<a class="jxr_linenumber" name="L302" href="#L302">302</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> row = 0; row &lt; m; row++) {
<a class="jxr_linenumber" name="L303" href="#L303">303</a>                 bp[row] = b.getEntry(pivot[row]);
<a class="jxr_linenumber" name="L304" href="#L304">304</a>             }
<a class="jxr_linenumber" name="L305" href="#L305">305</a> 
<a class="jxr_linenumber" name="L306" href="#L306">306</a>             <em class="jxr_comment">// Solve LY = b</em>
<a class="jxr_linenumber" name="L307" href="#L307">307</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> col = 0; col &lt; m; col++) {
<a class="jxr_linenumber" name="L308" href="#L308">308</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> bpCol = bp[col];
<a class="jxr_linenumber" name="L309" href="#L309">309</a>                 <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = col + 1; i &lt; m; i++) {
<a class="jxr_linenumber" name="L310" href="#L310">310</a>                     bp[i] -= bpCol * lu[i][col];
<a class="jxr_linenumber" name="L311" href="#L311">311</a>                 }
<a class="jxr_linenumber" name="L312" href="#L312">312</a>             }
<a class="jxr_linenumber" name="L313" href="#L313">313</a> 
<a class="jxr_linenumber" name="L314" href="#L314">314</a>             <em class="jxr_comment">// Solve UX = Y</em>
<a class="jxr_linenumber" name="L315" href="#L315">315</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> col = m - 1; col &gt;= 0; col--) {
<a class="jxr_linenumber" name="L316" href="#L316">316</a>                 bp[col] /= lu[col][col];
<a class="jxr_linenumber" name="L317" href="#L317">317</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> bpCol = bp[col];
<a class="jxr_linenumber" name="L318" href="#L318">318</a>                 <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; col; i++) {
<a class="jxr_linenumber" name="L319" href="#L319">319</a>                     bp[i] -= bpCol * lu[i][col];
<a class="jxr_linenumber" name="L320" href="#L320">320</a>                 }
<a class="jxr_linenumber" name="L321" href="#L321">321</a>             }
<a class="jxr_linenumber" name="L322" href="#L322">322</a> 
<a class="jxr_linenumber" name="L323" href="#L323">323</a>             <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../org/apache/commons/math3/linear/ArrayRealVector.html">ArrayRealVector</a>(bp, false);
<a class="jxr_linenumber" name="L324" href="#L324">324</a>         }
<a class="jxr_linenumber" name="L325" href="#L325">325</a> 
<a class="jxr_linenumber" name="L326" href="#L326">326</a>         <em class="jxr_javadoccomment">/** {@inheritDoc} */</em>
<a class="jxr_linenumber" name="L327" href="#L327">327</a>         <strong class="jxr_keyword">public</strong> <a href="../../../../../org/apache/commons/math3/linear/RealMatrix.html">RealMatrix</a> solve(<a href="../../../../../org/apache/commons/math3/linear/RealMatrix.html">RealMatrix</a> b) {
<a class="jxr_linenumber" name="L328" href="#L328">328</a> 
<a class="jxr_linenumber" name="L329" href="#L329">329</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> m = pivot.length;
<a class="jxr_linenumber" name="L330" href="#L330">330</a>             <strong class="jxr_keyword">if</strong> (b.getRowDimension() != m) {
<a class="jxr_linenumber" name="L331" href="#L331">331</a>                 <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../org/apache/commons/math3/exception/DimensionMismatchException.html">DimensionMismatchException</a>(b.getRowDimension(), m);
<a class="jxr_linenumber" name="L332" href="#L332">332</a>             }
<a class="jxr_linenumber" name="L333" href="#L333">333</a>             <strong class="jxr_keyword">if</strong> (singular) {
<a class="jxr_linenumber" name="L334" href="#L334">334</a>                 <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../org/apache/commons/math3/linear/SingularMatrixException.html">SingularMatrixException</a>();
<a class="jxr_linenumber" name="L335" href="#L335">335</a>             }
<a class="jxr_linenumber" name="L336" href="#L336">336</a> 
<a class="jxr_linenumber" name="L337" href="#L337">337</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> nColB = b.getColumnDimension();
<a class="jxr_linenumber" name="L338" href="#L338">338</a> 
<a class="jxr_linenumber" name="L339" href="#L339">339</a>             <em class="jxr_comment">// Apply permutations to b</em>
<a class="jxr_linenumber" name="L340" href="#L340">340</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[][] bp = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[m][nColB];
<a class="jxr_linenumber" name="L341" href="#L341">341</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> row = 0; row &lt; m; row++) {
<a class="jxr_linenumber" name="L342" href="#L342">342</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] bpRow = bp[row];
<a class="jxr_linenumber" name="L343" href="#L343">343</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> pRow = pivot[row];
<a class="jxr_linenumber" name="L344" href="#L344">344</a>                 <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> col = 0; col &lt; nColB; col++) {
<a class="jxr_linenumber" name="L345" href="#L345">345</a>                     bpRow[col] = b.getEntry(pRow, col);
<a class="jxr_linenumber" name="L346" href="#L346">346</a>                 }
<a class="jxr_linenumber" name="L347" href="#L347">347</a>             }
<a class="jxr_linenumber" name="L348" href="#L348">348</a> 
<a class="jxr_linenumber" name="L349" href="#L349">349</a>             <em class="jxr_comment">// Solve LY = b</em>
<a class="jxr_linenumber" name="L350" href="#L350">350</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> col = 0; col &lt; m; col++) {
<a class="jxr_linenumber" name="L351" href="#L351">351</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] bpCol = bp[col];
<a class="jxr_linenumber" name="L352" href="#L352">352</a>                 <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = col + 1; i &lt; m; i++) {
<a class="jxr_linenumber" name="L353" href="#L353">353</a>                     <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] bpI = bp[i];
<a class="jxr_linenumber" name="L354" href="#L354">354</a>                     <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> luICol = lu[i][col];
<a class="jxr_linenumber" name="L355" href="#L355">355</a>                     <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = 0; j &lt; nColB; j++) {
<a class="jxr_linenumber" name="L356" href="#L356">356</a>                         bpI[j] -= bpCol[j] * luICol;
<a class="jxr_linenumber" name="L357" href="#L357">357</a>                     }
<a class="jxr_linenumber" name="L358" href="#L358">358</a>                 }
<a class="jxr_linenumber" name="L359" href="#L359">359</a>             }
<a class="jxr_linenumber" name="L360" href="#L360">360</a> 
<a class="jxr_linenumber" name="L361" href="#L361">361</a>             <em class="jxr_comment">// Solve UX = Y</em>
<a class="jxr_linenumber" name="L362" href="#L362">362</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> col = m - 1; col &gt;= 0; col--) {
<a class="jxr_linenumber" name="L363" href="#L363">363</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] bpCol = bp[col];
<a class="jxr_linenumber" name="L364" href="#L364">364</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> luDiag = lu[col][col];
<a class="jxr_linenumber" name="L365" href="#L365">365</a>                 <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = 0; j &lt; nColB; j++) {
<a class="jxr_linenumber" name="L366" href="#L366">366</a>                     bpCol[j] /= luDiag;
<a class="jxr_linenumber" name="L367" href="#L367">367</a>                 }
<a class="jxr_linenumber" name="L368" href="#L368">368</a>                 <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; col; i++) {
<a class="jxr_linenumber" name="L369" href="#L369">369</a>                     <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] bpI = bp[i];
<a class="jxr_linenumber" name="L370" href="#L370">370</a>                     <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> luICol = lu[i][col];
<a class="jxr_linenumber" name="L371" href="#L371">371</a>                     <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = 0; j &lt; nColB; j++) {
<a class="jxr_linenumber" name="L372" href="#L372">372</a>                         bpI[j] -= bpCol[j] * luICol;
<a class="jxr_linenumber" name="L373" href="#L373">373</a>                     }
<a class="jxr_linenumber" name="L374" href="#L374">374</a>                 }
<a class="jxr_linenumber" name="L375" href="#L375">375</a>             }
<a class="jxr_linenumber" name="L376" href="#L376">376</a> 
<a class="jxr_linenumber" name="L377" href="#L377">377</a>             <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../org/apache/commons/math3/linear/Array2DRowRealMatrix.html">Array2DRowRealMatrix</a>(bp, false);
<a class="jxr_linenumber" name="L378" href="#L378">378</a>         }
<a class="jxr_linenumber" name="L379" href="#L379">379</a> 
<a class="jxr_linenumber" name="L380" href="#L380">380</a>         <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L381" href="#L381">381</a> <em class="jxr_javadoccomment">         * Get the inverse of the decomposed matrix.</em>
<a class="jxr_linenumber" name="L382" href="#L382">382</a> <em class="jxr_javadoccomment">         *</em>
<a class="jxr_linenumber" name="L383" href="#L383">383</a> <em class="jxr_javadoccomment">         * @return the inverse matrix.</em>
<a class="jxr_linenumber" name="L384" href="#L384">384</a> <em class="jxr_javadoccomment">         * @throws SingularMatrixException if the decomposed matrix is singular.</em>
<a class="jxr_linenumber" name="L385" href="#L385">385</a> <em class="jxr_javadoccomment">         */</em>
<a class="jxr_linenumber" name="L386" href="#L386">386</a>         <strong class="jxr_keyword">public</strong> <a href="../../../../../org/apache/commons/math3/linear/RealMatrix.html">RealMatrix</a> getInverse() {
<a class="jxr_linenumber" name="L387" href="#L387">387</a>             <strong class="jxr_keyword">return</strong> solve(MatrixUtils.createRealIdentityMatrix(pivot.length));
<a class="jxr_linenumber" name="L388" href="#L388">388</a>         }
<a class="jxr_linenumber" name="L389" href="#L389">389</a>     }
<a class="jxr_linenumber" name="L390" href="#L390">390</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2003&#x2013;2016 <a href="http://www.apache.org/">The Apache Software Foundation</a>. All rights reserved.</div>
</body>
</html>
