<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>LineSearch xref</title>
<link type="text/css" rel="stylesheet" href="../../../../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../../apidocs/org/apache/commons/math3/optim/nonlinear/scalar/LineSearch.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Licensed to the Apache Software Foundation (ASF) under one or more</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> * contributor license agreements.  See the NOTICE file distributed with</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * this work for additional information regarding copyright ownership.</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * The ASF licenses this file to You under the Apache License, Version 2.0</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * (the "License"); you may not use this file except in compliance with</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> * the License.  You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *      <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">package</strong> org.apache.commons.math3.optim.nonlinear.scalar;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.optim.univariate.UnivariateOptimizer;
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.optim.univariate.BrentOptimizer;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.optim.univariate.BracketFinder;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.optim.univariate.UnivariatePointValuePair;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.optim.univariate.SimpleUnivariateValueChecker;
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.optim.univariate.SearchInterval;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.optim.univariate.UnivariateObjectiveFunction;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.analysis.UnivariateFunction;
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.optim.MaxEval;
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <em class="jxr_javadoccomment"> * Class for finding the minimum of the objective function along a given</em>
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <em class="jxr_javadoccomment"> * direction.</em>
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <em class="jxr_javadoccomment"> * @since 3.3</em>
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../../../org/apache/commons/math3/optim/nonlinear/scalar/LineSearch.html">LineSearch</a> {
<a class="jxr_linenumber" name="L36" href="#L36">36</a>      <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  <em class="jxr_javadoccomment">     * Value that will pass the precondition check for {@link BrentOptimizer}</em>
<a class="jxr_linenumber" name="L38" href="#L38">38</a>  <em class="jxr_javadoccomment">     * but will not pass the convergence check, so that the custom checker</em>
<a class="jxr_linenumber" name="L39" href="#L39">39</a>  <em class="jxr_javadoccomment">     * will always decide when to stop the line search.</em>
<a class="jxr_linenumber" name="L40" href="#L40">40</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L41" href="#L41">41</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> REL_TOL_UNUSED = 1e-15;
<a class="jxr_linenumber" name="L42" href="#L42">42</a>      <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L43" href="#L43">43</a>  <em class="jxr_javadoccomment">     * Value that will pass the precondition check for {@link BrentOptimizer}</em>
<a class="jxr_linenumber" name="L44" href="#L44">44</a>  <em class="jxr_javadoccomment">     * but will not pass the convergence check, so that the custom checker</em>
<a class="jxr_linenumber" name="L45" href="#L45">45</a>  <em class="jxr_javadoccomment">     * will always decide when to stop the line search.</em>
<a class="jxr_linenumber" name="L46" href="#L46">46</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L47" href="#L47">47</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> ABS_TOL_UNUSED = Double.MIN_VALUE;
<a class="jxr_linenumber" name="L48" href="#L48">48</a>      <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L49" href="#L49">49</a>  <em class="jxr_javadoccomment">     * Optimizer used for line search.</em>
<a class="jxr_linenumber" name="L50" href="#L50">50</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L51" href="#L51">51</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/optim/univariate/UnivariateOptimizer.html">UnivariateOptimizer</a> lineOptimizer;
<a class="jxr_linenumber" name="L52" href="#L52">52</a>      <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L53" href="#L53">53</a>  <em class="jxr_javadoccomment">     * Automatic bracketing.</em>
<a class="jxr_linenumber" name="L54" href="#L54">54</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L55" href="#L55">55</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/optim/univariate/BracketFinder.html">BracketFinder</a> bracket = <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/optim/univariate/BracketFinder.html">BracketFinder</a>();
<a class="jxr_linenumber" name="L56" href="#L56">56</a>      <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L57" href="#L57">57</a>  <em class="jxr_javadoccomment">     * Extent of the initial interval used to find an interval that</em>
<a class="jxr_linenumber" name="L58" href="#L58">58</a>  <em class="jxr_javadoccomment">     * brackets the optimum.</em>
<a class="jxr_linenumber" name="L59" href="#L59">59</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L60" href="#L60">60</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> initialBracketingRange;
<a class="jxr_linenumber" name="L61" href="#L61">61</a>      <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L62" href="#L62">62</a>  <em class="jxr_javadoccomment">     * Optimizer on behalf of which the line search must be performed.</em>
<a class="jxr_linenumber" name="L63" href="#L63">63</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L64" href="#L64">64</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/optim/nonlinear/scalar/MultivariateOptimizer.html">MultivariateOptimizer</a> mainOptimizer;
<a class="jxr_linenumber" name="L65" href="#L65">65</a>  
<a class="jxr_linenumber" name="L66" href="#L66">66</a>      <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L67" href="#L67">67</a>  <em class="jxr_javadoccomment">     * The {@code BrentOptimizer} default stopping criterion uses the</em>
<a class="jxr_linenumber" name="L68" href="#L68">68</a>  <em class="jxr_javadoccomment">     * tolerances to check the domain (point) values, not the function</em>
<a class="jxr_linenumber" name="L69" href="#L69">69</a>  <em class="jxr_javadoccomment">     * values.</em>
<a class="jxr_linenumber" name="L70" href="#L70">70</a>  <em class="jxr_javadoccomment">     * The {@code relativeTolerance} and {@code absoluteTolerance}</em>
<a class="jxr_linenumber" name="L71" href="#L71">71</a>  <em class="jxr_javadoccomment">     * arguments are thus passed to a {@link SimpleUnivariateValueChecker</em>
<a class="jxr_linenumber" name="L72" href="#L72">72</a>  <em class="jxr_javadoccomment">     * custom checker} that will use the function values.</em>
<a class="jxr_linenumber" name="L73" href="#L73">73</a>  <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L74" href="#L74">74</a>  <em class="jxr_javadoccomment">     * @param optimizer Optimizer on behalf of which the line search</em>
<a class="jxr_linenumber" name="L75" href="#L75">75</a>  <em class="jxr_javadoccomment">     * be performed.</em>
<a class="jxr_linenumber" name="L76" href="#L76">76</a>  <em class="jxr_javadoccomment">     * Its {@link MultivariateOptimizer#computeObjectiveValue(double[])</em>
<a class="jxr_linenumber" name="L77" href="#L77">77</a>  <em class="jxr_javadoccomment">     * computeObjectiveValue} method will be called by the</em>
<a class="jxr_linenumber" name="L78" href="#L78">78</a>  <em class="jxr_javadoccomment">     * {@link #search(double[],double[]) search} method.</em>
<a class="jxr_linenumber" name="L79" href="#L79">79</a>  <em class="jxr_javadoccomment">     * @param relativeTolerance Search will stop when the function relative</em>
<a class="jxr_linenumber" name="L80" href="#L80">80</a>  <em class="jxr_javadoccomment">     * difference between successive iterations is below this value.</em>
<a class="jxr_linenumber" name="L81" href="#L81">81</a>  <em class="jxr_javadoccomment">     * @param absoluteTolerance Search will stop when the function absolute</em>
<a class="jxr_linenumber" name="L82" href="#L82">82</a>  <em class="jxr_javadoccomment">     * difference between successive iterations is below this value.</em>
<a class="jxr_linenumber" name="L83" href="#L83">83</a>  <em class="jxr_javadoccomment">     * @param initialBracketingRange Extent of the initial interval used to</em>
<a class="jxr_linenumber" name="L84" href="#L84">84</a>  <em class="jxr_javadoccomment">     * find an interval that brackets the optimum.</em>
<a class="jxr_linenumber" name="L85" href="#L85">85</a>  <em class="jxr_javadoccomment">     * If the optimized function varies a lot in the vicinity of the optimum,</em>
<a class="jxr_linenumber" name="L86" href="#L86">86</a>  <em class="jxr_javadoccomment">     * it may be necessary to provide a value lower than the distance between</em>
<a class="jxr_linenumber" name="L87" href="#L87">87</a>  <em class="jxr_javadoccomment">     * successive local minima.</em>
<a class="jxr_linenumber" name="L88" href="#L88">88</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L89" href="#L89">89</a>      <strong class="jxr_keyword">public</strong> <a href="../../../../../../../org/apache/commons/math3/optim/nonlinear/scalar/LineSearch.html">LineSearch</a>(<a href="../../../../../../../org/apache/commons/math3/optim/nonlinear/scalar/MultivariateOptimizer.html">MultivariateOptimizer</a> optimizer,
<a class="jxr_linenumber" name="L90" href="#L90">90</a>                        <strong class="jxr_keyword">double</strong> relativeTolerance,
<a class="jxr_linenumber" name="L91" href="#L91">91</a>                        <strong class="jxr_keyword">double</strong> absoluteTolerance,
<a class="jxr_linenumber" name="L92" href="#L92">92</a>                        <strong class="jxr_keyword">double</strong> initialBracketingRange) {
<a class="jxr_linenumber" name="L93" href="#L93">93</a>          mainOptimizer = optimizer;
<a class="jxr_linenumber" name="L94" href="#L94">94</a>          lineOptimizer = <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/optim/univariate/BrentOptimizer.html">BrentOptimizer</a>(REL_TOL_UNUSED,
<a class="jxr_linenumber" name="L95" href="#L95">95</a>                                             ABS_TOL_UNUSED,
<a class="jxr_linenumber" name="L96" href="#L96">96</a>                                             <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/optim/univariate/SimpleUnivariateValueChecker.html">SimpleUnivariateValueChecker</a>(relativeTolerance,
<a class="jxr_linenumber" name="L97" href="#L97">97</a>                                                                              absoluteTolerance));
<a class="jxr_linenumber" name="L98" href="#L98">98</a>          <strong class="jxr_keyword">this</strong>.initialBracketingRange = initialBracketingRange;
<a class="jxr_linenumber" name="L99" href="#L99">99</a>      }
<a class="jxr_linenumber" name="L100" href="#L100">100</a> 
<a class="jxr_linenumber" name="L101" href="#L101">101</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L102" href="#L102">102</a> <em class="jxr_javadoccomment">     * Finds the number {@code alpha} that optimizes</em>
<a class="jxr_linenumber" name="L103" href="#L103">103</a> <em class="jxr_javadoccomment">     * {@code f(startPoint + alpha * direction)}.</em>
<a class="jxr_linenumber" name="L104" href="#L104">104</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L105" href="#L105">105</a> <em class="jxr_javadoccomment">     * @param startPoint Starting point.</em>
<a class="jxr_linenumber" name="L106" href="#L106">106</a> <em class="jxr_javadoccomment">     * @param direction Search direction.</em>
<a class="jxr_linenumber" name="L107" href="#L107">107</a> <em class="jxr_javadoccomment">     * @return the optimum.</em>
<a class="jxr_linenumber" name="L108" href="#L108">108</a> <em class="jxr_javadoccomment">     * @throws org.apache.commons.math3.exception.TooManyEvaluationsException</em>
<a class="jxr_linenumber" name="L109" href="#L109">109</a> <em class="jxr_javadoccomment">     * if the number of evaluations is exceeded.</em>
<a class="jxr_linenumber" name="L110" href="#L110">110</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L111" href="#L111">111</a>     <strong class="jxr_keyword">public</strong> <a href="../../../../../../../org/apache/commons/math3/optim/univariate/UnivariatePointValuePair.html">UnivariatePointValuePair</a> search(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] startPoint,
<a class="jxr_linenumber" name="L112" href="#L112">112</a>                                            <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] direction) {
<a class="jxr_linenumber" name="L113" href="#L113">113</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> n = startPoint.length;
<a class="jxr_linenumber" name="L114" href="#L114">114</a>         <strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/analysis/UnivariateFunction.html">UnivariateFunction</a> f = <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/analysis/UnivariateFunction.html">UnivariateFunction</a>() {
<a class="jxr_linenumber" name="L115" href="#L115">115</a>                 <em class="jxr_javadoccomment">/** {@inheritDoc} */</em>
<a class="jxr_linenumber" name="L116" href="#L116">116</a>                 <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">double</strong> value(<strong class="jxr_keyword">double</strong> alpha) {
<a class="jxr_linenumber" name="L117" href="#L117">117</a>                     <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] x = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[n];
<a class="jxr_linenumber" name="L118" href="#L118">118</a>                     <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; n; i++) {
<a class="jxr_linenumber" name="L119" href="#L119">119</a>                         x[i] = startPoint[i] + alpha * direction[i];
<a class="jxr_linenumber" name="L120" href="#L120">120</a>                     }
<a class="jxr_linenumber" name="L121" href="#L121">121</a>                     <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> obj = mainOptimizer.computeObjectiveValue(x);
<a class="jxr_linenumber" name="L122" href="#L122">122</a>                     <strong class="jxr_keyword">return</strong> obj;
<a class="jxr_linenumber" name="L123" href="#L123">123</a>                 }
<a class="jxr_linenumber" name="L124" href="#L124">124</a>             };
<a class="jxr_linenumber" name="L125" href="#L125">125</a> 
<a class="jxr_linenumber" name="L126" href="#L126">126</a>         <strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/optim/nonlinear/scalar/GoalType.html">GoalType</a> goal = mainOptimizer.getGoalType();
<a class="jxr_linenumber" name="L127" href="#L127">127</a>         bracket.search(f, goal, 0, initialBracketingRange);
<a class="jxr_linenumber" name="L128" href="#L128">128</a>         <em class="jxr_comment">// Passing "MAX_VALUE" as a dummy value because it is the enclosing</em>
<a class="jxr_linenumber" name="L129" href="#L129">129</a>         <em class="jxr_comment">// class that counts the number of evaluations (and will eventually</em>
<a class="jxr_linenumber" name="L130" href="#L130">130</a>         <em class="jxr_comment">// generate the exception).</em>
<a class="jxr_linenumber" name="L131" href="#L131">131</a>         <strong class="jxr_keyword">return</strong> lineOptimizer.optimize(<strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/optim/MaxEval.html">MaxEval</a>(Integer.MAX_VALUE),
<a class="jxr_linenumber" name="L132" href="#L132">132</a>                                       <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/optim/univariate/UnivariateObjectiveFunction.html">UnivariateObjectiveFunction</a>(f),
<a class="jxr_linenumber" name="L133" href="#L133">133</a>                                       goal,
<a class="jxr_linenumber" name="L134" href="#L134">134</a>                                       <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/optim/univariate/SearchInterval.html">SearchInterval</a>(bracket.getLo(),
<a class="jxr_linenumber" name="L135" href="#L135">135</a>                                                          bracket.getHi(),
<a class="jxr_linenumber" name="L136" href="#L136">136</a>                                                          bracket.getMid()));
<a class="jxr_linenumber" name="L137" href="#L137">137</a>     }
<a class="jxr_linenumber" name="L138" href="#L138">138</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2003&#x2013;2016 <a href="http://www.apache.org/">The Apache Software Foundation</a>. All rights reserved.</div>
</body>
</html>
