<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span><a name="line.17"></a>
<span class="sourceLineNo">018</span>package org.apache.commons.math3.dfp;<a name="line.18"></a>
<span class="sourceLineNo">019</span><a name="line.19"></a>
<span class="sourceLineNo">020</span>import org.junit.After;<a name="line.20"></a>
<span class="sourceLineNo">021</span>import org.junit.Assert;<a name="line.21"></a>
<span class="sourceLineNo">022</span>import org.junit.Before;<a name="line.22"></a>
<span class="sourceLineNo">023</span>import org.junit.Test;<a name="line.23"></a>
<span class="sourceLineNo">024</span><a name="line.24"></a>
<span class="sourceLineNo">025</span>public class DfpMathTest {<a name="line.25"></a>
<span class="sourceLineNo">026</span><a name="line.26"></a>
<span class="sourceLineNo">027</span>    private DfpField factory;<a name="line.27"></a>
<span class="sourceLineNo">028</span>    private Dfp pinf;<a name="line.28"></a>
<span class="sourceLineNo">029</span>    private Dfp ninf;<a name="line.29"></a>
<span class="sourceLineNo">030</span>    private Dfp nan;<a name="line.30"></a>
<span class="sourceLineNo">031</span>    private Dfp qnan;<a name="line.31"></a>
<span class="sourceLineNo">032</span><a name="line.32"></a>
<span class="sourceLineNo">033</span>    @Before<a name="line.33"></a>
<span class="sourceLineNo">034</span>    public void setUp() {<a name="line.34"></a>
<span class="sourceLineNo">035</span>        // Some basic setup.  Define some constants and clear the status flags<a name="line.35"></a>
<span class="sourceLineNo">036</span>        factory = new DfpField(20);<a name="line.36"></a>
<span class="sourceLineNo">037</span>        pinf = factory.newDfp("1").divide(factory.newDfp("0"));<a name="line.37"></a>
<span class="sourceLineNo">038</span>        ninf = factory.newDfp("-1").divide(factory.newDfp("0"));<a name="line.38"></a>
<span class="sourceLineNo">039</span>        nan = factory.newDfp("0").divide(factory.newDfp("0"));<a name="line.39"></a>
<span class="sourceLineNo">040</span>        qnan = factory.newDfp((byte)1, Dfp.QNAN);<a name="line.40"></a>
<span class="sourceLineNo">041</span>        ninf.getField().clearIEEEFlags();<a name="line.41"></a>
<span class="sourceLineNo">042</span><a name="line.42"></a>
<span class="sourceLineNo">043</span>        // force loading of dfpmath<a name="line.43"></a>
<span class="sourceLineNo">044</span>        Dfp pi = factory.getPi();<a name="line.44"></a>
<span class="sourceLineNo">045</span>        pi.getField().clearIEEEFlags();<a name="line.45"></a>
<span class="sourceLineNo">046</span>    }<a name="line.46"></a>
<span class="sourceLineNo">047</span><a name="line.47"></a>
<span class="sourceLineNo">048</span>    @After<a name="line.48"></a>
<span class="sourceLineNo">049</span>    public void tearDown() {<a name="line.49"></a>
<span class="sourceLineNo">050</span>        pinf = null;<a name="line.50"></a>
<span class="sourceLineNo">051</span>        ninf = null;<a name="line.51"></a>
<span class="sourceLineNo">052</span>        nan  = null;<a name="line.52"></a>
<span class="sourceLineNo">053</span>        qnan = null;<a name="line.53"></a>
<span class="sourceLineNo">054</span>    }<a name="line.54"></a>
<span class="sourceLineNo">055</span><a name="line.55"></a>
<span class="sourceLineNo">056</span>    // Generic test function.  Takes params x and y and tests them for <a name="line.56"></a>
<span class="sourceLineNo">057</span>    // equality.  Then checks the status flags against the flags argument.<a name="line.57"></a>
<span class="sourceLineNo">058</span>    // If the test fail, it prints the desc string<a name="line.58"></a>
<span class="sourceLineNo">059</span>    private void test(Dfp x, Dfp y, int flags, String desc)<a name="line.59"></a>
<span class="sourceLineNo">060</span>    {<a name="line.60"></a>
<span class="sourceLineNo">061</span>        boolean b = x.equals(y);<a name="line.61"></a>
<span class="sourceLineNo">062</span><a name="line.62"></a>
<span class="sourceLineNo">063</span>        if (!x.equals(y) &amp;&amp; !x.unequal(y))  // NaNs involved <a name="line.63"></a>
<span class="sourceLineNo">064</span>            b = (x.toString().equals(y.toString()));<a name="line.64"></a>
<span class="sourceLineNo">065</span><a name="line.65"></a>
<span class="sourceLineNo">066</span>        if (x.equals(factory.newDfp("0")))  // distinguish +/- zero<a name="line.66"></a>
<span class="sourceLineNo">067</span>            b = (b &amp;&amp; (x.toString().equals(y.toString())));<a name="line.67"></a>
<span class="sourceLineNo">068</span><a name="line.68"></a>
<span class="sourceLineNo">069</span>        b = (b &amp;&amp; x.getField().getIEEEFlags() == flags);<a name="line.69"></a>
<span class="sourceLineNo">070</span><a name="line.70"></a>
<span class="sourceLineNo">071</span>        if (!b)<a name="line.71"></a>
<span class="sourceLineNo">072</span>            Assert.assertTrue("assersion failed "+desc+" x = "+x.toString()+" flags = "+x.getField().getIEEEFlags(), b);<a name="line.72"></a>
<span class="sourceLineNo">073</span><a name="line.73"></a>
<span class="sourceLineNo">074</span>        x.getField().clearIEEEFlags();<a name="line.74"></a>
<span class="sourceLineNo">075</span>    }<a name="line.75"></a>
<span class="sourceLineNo">076</span><a name="line.76"></a>
<span class="sourceLineNo">077</span>    @Test<a name="line.77"></a>
<span class="sourceLineNo">078</span>    public void testPow()  <a name="line.78"></a>
<span class="sourceLineNo">079</span>    {<a name="line.79"></a>
<span class="sourceLineNo">080</span>        // Test special cases  exponent of zero<a name="line.80"></a>
<span class="sourceLineNo">081</span>        test(DfpMath.pow(factory.newDfp("0"), factory.newDfp("0")),      <a name="line.81"></a>
<span class="sourceLineNo">082</span>             factory.newDfp("1"), <a name="line.82"></a>
<span class="sourceLineNo">083</span>             0, "pow #1");<a name="line.83"></a>
<span class="sourceLineNo">084</span><a name="line.84"></a>
<span class="sourceLineNo">085</span>        test(DfpMath.pow(factory.newDfp("0"), factory.newDfp("-0")),      <a name="line.85"></a>
<span class="sourceLineNo">086</span>             factory.newDfp("1"), <a name="line.86"></a>
<span class="sourceLineNo">087</span>             0, "pow #2");<a name="line.87"></a>
<span class="sourceLineNo">088</span><a name="line.88"></a>
<span class="sourceLineNo">089</span>        test(DfpMath.pow(factory.newDfp("2"), factory.newDfp("0")),      <a name="line.89"></a>
<span class="sourceLineNo">090</span>             factory.newDfp("1"), <a name="line.90"></a>
<span class="sourceLineNo">091</span>             0, "pow #3");<a name="line.91"></a>
<span class="sourceLineNo">092</span><a name="line.92"></a>
<span class="sourceLineNo">093</span>        test(DfpMath.pow(factory.newDfp("-2"), factory.newDfp("-0")),      <a name="line.93"></a>
<span class="sourceLineNo">094</span>             factory.newDfp("1"), <a name="line.94"></a>
<span class="sourceLineNo">095</span>             0, "pow #4");<a name="line.95"></a>
<span class="sourceLineNo">096</span><a name="line.96"></a>
<span class="sourceLineNo">097</span>        test(DfpMath.pow(pinf, factory.newDfp("-0")),      <a name="line.97"></a>
<span class="sourceLineNo">098</span>             factory.newDfp("1"), <a name="line.98"></a>
<span class="sourceLineNo">099</span>             0, "pow #5");<a name="line.99"></a>
<span class="sourceLineNo">100</span><a name="line.100"></a>
<span class="sourceLineNo">101</span>        test(DfpMath.pow(pinf, factory.newDfp("0")),<a name="line.101"></a>
<span class="sourceLineNo">102</span>             factory.newDfp("1"), <a name="line.102"></a>
<span class="sourceLineNo">103</span>             0, "pow #6");<a name="line.103"></a>
<span class="sourceLineNo">104</span><a name="line.104"></a>
<span class="sourceLineNo">105</span>        test(DfpMath.pow(ninf, factory.newDfp("-0")),      <a name="line.105"></a>
<span class="sourceLineNo">106</span>             factory.newDfp("1"), <a name="line.106"></a>
<span class="sourceLineNo">107</span>             0, "pow #7");<a name="line.107"></a>
<span class="sourceLineNo">108</span><a name="line.108"></a>
<span class="sourceLineNo">109</span>        test(DfpMath.pow(ninf, factory.newDfp("0")),<a name="line.109"></a>
<span class="sourceLineNo">110</span>             factory.newDfp("1"), <a name="line.110"></a>
<span class="sourceLineNo">111</span>             0, "pow #8");<a name="line.111"></a>
<span class="sourceLineNo">112</span><a name="line.112"></a>
<span class="sourceLineNo">113</span>        test(DfpMath.pow(qnan, factory.newDfp("0")),<a name="line.113"></a>
<span class="sourceLineNo">114</span>             factory.newDfp("1"), <a name="line.114"></a>
<span class="sourceLineNo">115</span>             0, "pow #8");<a name="line.115"></a>
<span class="sourceLineNo">116</span><a name="line.116"></a>
<span class="sourceLineNo">117</span>        // exponent of one<a name="line.117"></a>
<span class="sourceLineNo">118</span>        test(DfpMath.pow(factory.newDfp("0"), factory.newDfp("1")),<a name="line.118"></a>
<span class="sourceLineNo">119</span>             factory.newDfp("0"), <a name="line.119"></a>
<span class="sourceLineNo">120</span>             0, "pow #9");<a name="line.120"></a>
<span class="sourceLineNo">121</span><a name="line.121"></a>
<span class="sourceLineNo">122</span>        test(DfpMath.pow(factory.newDfp("-0"), factory.newDfp("1")),      <a name="line.122"></a>
<span class="sourceLineNo">123</span>             factory.newDfp("-0"), <a name="line.123"></a>
<span class="sourceLineNo">124</span>             0, "pow #10");<a name="line.124"></a>
<span class="sourceLineNo">125</span><a name="line.125"></a>
<span class="sourceLineNo">126</span>        test(DfpMath.pow(factory.newDfp("2"), factory.newDfp("1")),<a name="line.126"></a>
<span class="sourceLineNo">127</span>             factory.newDfp("2"), <a name="line.127"></a>
<span class="sourceLineNo">128</span>             0, "pow #11");<a name="line.128"></a>
<span class="sourceLineNo">129</span><a name="line.129"></a>
<span class="sourceLineNo">130</span>        test(DfpMath.pow(factory.newDfp("-2"), factory.newDfp("1")),<a name="line.130"></a>
<span class="sourceLineNo">131</span>             factory.newDfp("-2"), <a name="line.131"></a>
<span class="sourceLineNo">132</span>             0, "pow #12");<a name="line.132"></a>
<span class="sourceLineNo">133</span><a name="line.133"></a>
<span class="sourceLineNo">134</span>        test(DfpMath.pow(pinf, factory.newDfp("1")),      <a name="line.134"></a>
<span class="sourceLineNo">135</span>             pinf, <a name="line.135"></a>
<span class="sourceLineNo">136</span>             0, "pow #13");<a name="line.136"></a>
<span class="sourceLineNo">137</span><a name="line.137"></a>
<span class="sourceLineNo">138</span>        test(DfpMath.pow(ninf, factory.newDfp("1")),<a name="line.138"></a>
<span class="sourceLineNo">139</span>             ninf, <a name="line.139"></a>
<span class="sourceLineNo">140</span>             0, "pow #14");<a name="line.140"></a>
<span class="sourceLineNo">141</span><a name="line.141"></a>
<span class="sourceLineNo">142</span>        test(DfpMath.pow(qnan, factory.newDfp("1")),<a name="line.142"></a>
<span class="sourceLineNo">143</span>             qnan, <a name="line.143"></a>
<span class="sourceLineNo">144</span>             DfpField.FLAG_INVALID, "pow #14.1");<a name="line.144"></a>
<span class="sourceLineNo">145</span><a name="line.145"></a>
<span class="sourceLineNo">146</span>        // exponent of NaN<a name="line.146"></a>
<span class="sourceLineNo">147</span>        test(DfpMath.pow(factory.newDfp("0"), qnan),<a name="line.147"></a>
<span class="sourceLineNo">148</span>             qnan, <a name="line.148"></a>
<span class="sourceLineNo">149</span>             DfpField.FLAG_INVALID, "pow #15");<a name="line.149"></a>
<span class="sourceLineNo">150</span><a name="line.150"></a>
<span class="sourceLineNo">151</span>        test(DfpMath.pow(factory.newDfp("-0"), qnan),      <a name="line.151"></a>
<span class="sourceLineNo">152</span>             qnan, <a name="line.152"></a>
<span class="sourceLineNo">153</span>             DfpField.FLAG_INVALID, "pow #16");<a name="line.153"></a>
<span class="sourceLineNo">154</span><a name="line.154"></a>
<span class="sourceLineNo">155</span>        test(DfpMath.pow(factory.newDfp("2"), qnan),<a name="line.155"></a>
<span class="sourceLineNo">156</span>             qnan, <a name="line.156"></a>
<span class="sourceLineNo">157</span>             DfpField.FLAG_INVALID, "pow #17");<a name="line.157"></a>
<span class="sourceLineNo">158</span><a name="line.158"></a>
<span class="sourceLineNo">159</span>        test(DfpMath.pow(factory.newDfp("-2"), qnan),<a name="line.159"></a>
<span class="sourceLineNo">160</span>             qnan, <a name="line.160"></a>
<span class="sourceLineNo">161</span>             DfpField.FLAG_INVALID, "pow #18");<a name="line.161"></a>
<span class="sourceLineNo">162</span><a name="line.162"></a>
<span class="sourceLineNo">163</span>        test(DfpMath.pow(pinf, qnan),      <a name="line.163"></a>
<span class="sourceLineNo">164</span>             qnan, <a name="line.164"></a>
<span class="sourceLineNo">165</span>             DfpField.FLAG_INVALID, "pow #19");<a name="line.165"></a>
<span class="sourceLineNo">166</span><a name="line.166"></a>
<span class="sourceLineNo">167</span>        test(DfpMath.pow(ninf, qnan),<a name="line.167"></a>
<span class="sourceLineNo">168</span>             qnan, <a name="line.168"></a>
<span class="sourceLineNo">169</span>             DfpField.FLAG_INVALID, "pow #20");<a name="line.169"></a>
<span class="sourceLineNo">170</span><a name="line.170"></a>
<span class="sourceLineNo">171</span>        test(DfpMath.pow(qnan, qnan),<a name="line.171"></a>
<span class="sourceLineNo">172</span>             qnan, <a name="line.172"></a>
<span class="sourceLineNo">173</span>             DfpField.FLAG_INVALID, "pow #21");<a name="line.173"></a>
<span class="sourceLineNo">174</span><a name="line.174"></a>
<span class="sourceLineNo">175</span>        // radix of NaN<a name="line.175"></a>
<span class="sourceLineNo">176</span>        test(DfpMath.pow(qnan, factory.newDfp("1")),<a name="line.176"></a>
<span class="sourceLineNo">177</span>             qnan, <a name="line.177"></a>
<span class="sourceLineNo">178</span>             DfpField.FLAG_INVALID, "pow #22");<a name="line.178"></a>
<span class="sourceLineNo">179</span><a name="line.179"></a>
<span class="sourceLineNo">180</span>        test(DfpMath.pow(qnan, factory.newDfp("-1")),      <a name="line.180"></a>
<span class="sourceLineNo">181</span>             qnan,<a name="line.181"></a>
<span class="sourceLineNo">182</span>             DfpField.FLAG_INVALID, "pow #23");<a name="line.182"></a>
<span class="sourceLineNo">183</span><a name="line.183"></a>
<span class="sourceLineNo">184</span>        test(DfpMath.pow(qnan, pinf),<a name="line.184"></a>
<span class="sourceLineNo">185</span>             qnan,<a name="line.185"></a>
<span class="sourceLineNo">186</span>             DfpField.FLAG_INVALID, "pow #24");<a name="line.186"></a>
<span class="sourceLineNo">187</span><a name="line.187"></a>
<span class="sourceLineNo">188</span>        test(DfpMath.pow(qnan, ninf),<a name="line.188"></a>
<span class="sourceLineNo">189</span>             qnan, <a name="line.189"></a>
<span class="sourceLineNo">190</span>             DfpField.FLAG_INVALID, "pow #25");<a name="line.190"></a>
<span class="sourceLineNo">191</span><a name="line.191"></a>
<span class="sourceLineNo">192</span>        test(DfpMath.pow(qnan, qnan),<a name="line.192"></a>
<span class="sourceLineNo">193</span>             qnan, <a name="line.193"></a>
<span class="sourceLineNo">194</span>             DfpField.FLAG_INVALID, "pow #26");<a name="line.194"></a>
<span class="sourceLineNo">195</span><a name="line.195"></a>
<span class="sourceLineNo">196</span>        // (x &gt; 1) ^ pinf = pinf,    (x &lt; -1) ^ pinf = pinf<a name="line.196"></a>
<span class="sourceLineNo">197</span>        test(DfpMath.pow(factory.newDfp("2"), pinf),<a name="line.197"></a>
<span class="sourceLineNo">198</span>             pinf, <a name="line.198"></a>
<span class="sourceLineNo">199</span>             0, "pow #27");<a name="line.199"></a>
<span class="sourceLineNo">200</span><a name="line.200"></a>
<span class="sourceLineNo">201</span>        test(DfpMath.pow(factory.newDfp("-2"), pinf),      <a name="line.201"></a>
<span class="sourceLineNo">202</span>             pinf,<a name="line.202"></a>
<span class="sourceLineNo">203</span>             0, "pow #28");<a name="line.203"></a>
<span class="sourceLineNo">204</span><a name="line.204"></a>
<span class="sourceLineNo">205</span>        test(DfpMath.pow(pinf, pinf),<a name="line.205"></a>
<span class="sourceLineNo">206</span>             pinf,<a name="line.206"></a>
<span class="sourceLineNo">207</span>             0, "pow #29");<a name="line.207"></a>
<span class="sourceLineNo">208</span><a name="line.208"></a>
<span class="sourceLineNo">209</span>        test(DfpMath.pow(ninf, pinf),<a name="line.209"></a>
<span class="sourceLineNo">210</span>             pinf, <a name="line.210"></a>
<span class="sourceLineNo">211</span>             0, "pow #30");<a name="line.211"></a>
<span class="sourceLineNo">212</span><a name="line.212"></a>
<span class="sourceLineNo">213</span>        // (x &gt; 1) ^ ninf = +0,    (x &lt; -1) ^ ninf = +0<a name="line.213"></a>
<span class="sourceLineNo">214</span>        test(DfpMath.pow(factory.newDfp("2"), ninf),<a name="line.214"></a>
<span class="sourceLineNo">215</span>             factory.getZero(), <a name="line.215"></a>
<span class="sourceLineNo">216</span>             0, "pow #31");<a name="line.216"></a>
<span class="sourceLineNo">217</span><a name="line.217"></a>
<span class="sourceLineNo">218</span>        test(DfpMath.pow(factory.newDfp("-2"), ninf),      <a name="line.218"></a>
<span class="sourceLineNo">219</span>             factory.getZero(),<a name="line.219"></a>
<span class="sourceLineNo">220</span>             0, "pow #32");<a name="line.220"></a>
<span class="sourceLineNo">221</span><a name="line.221"></a>
<span class="sourceLineNo">222</span>        test(DfpMath.pow(pinf, ninf),<a name="line.222"></a>
<span class="sourceLineNo">223</span>             factory.getZero(),<a name="line.223"></a>
<span class="sourceLineNo">224</span>             0, "pow #33");<a name="line.224"></a>
<span class="sourceLineNo">225</span><a name="line.225"></a>
<span class="sourceLineNo">226</span>        test(DfpMath.pow(ninf, ninf),<a name="line.226"></a>
<span class="sourceLineNo">227</span>             factory.getZero(), <a name="line.227"></a>
<span class="sourceLineNo">228</span>             0, "pow #34");<a name="line.228"></a>
<span class="sourceLineNo">229</span><a name="line.229"></a>
<span class="sourceLineNo">230</span>        // (-1 &lt; x &lt; 1) ^ pinf = 0<a name="line.230"></a>
<span class="sourceLineNo">231</span>        test(DfpMath.pow(factory.newDfp("0.5"), pinf),<a name="line.231"></a>
<span class="sourceLineNo">232</span>             factory.getZero(), <a name="line.232"></a>
<span class="sourceLineNo">233</span>             0, "pow #35");<a name="line.233"></a>
<span class="sourceLineNo">234</span><a name="line.234"></a>
<span class="sourceLineNo">235</span>        test(DfpMath.pow(factory.newDfp("-0.5"), pinf),      <a name="line.235"></a>
<span class="sourceLineNo">236</span>             factory.getZero(),<a name="line.236"></a>
<span class="sourceLineNo">237</span>             0, "pow #36");<a name="line.237"></a>
<span class="sourceLineNo">238</span><a name="line.238"></a>
<span class="sourceLineNo">239</span>        // (-1 &lt; x &lt; 1) ^ ninf = pinf <a name="line.239"></a>
<span class="sourceLineNo">240</span>        test(DfpMath.pow(factory.newDfp("0.5"), ninf),<a name="line.240"></a>
<span class="sourceLineNo">241</span>             pinf, <a name="line.241"></a>
<span class="sourceLineNo">242</span>             0, "pow #37");<a name="line.242"></a>
<span class="sourceLineNo">243</span><a name="line.243"></a>
<span class="sourceLineNo">244</span>        test(DfpMath.pow(factory.newDfp("-0.5"), ninf),      <a name="line.244"></a>
<span class="sourceLineNo">245</span>             pinf,<a name="line.245"></a>
<span class="sourceLineNo">246</span>             0, "pow #38");<a name="line.246"></a>
<span class="sourceLineNo">247</span><a name="line.247"></a>
<span class="sourceLineNo">248</span>        // +/- 1  ^ +/-inf  = NaN<a name="line.248"></a>
<span class="sourceLineNo">249</span>        test(DfpMath.pow(factory.getOne(), pinf),<a name="line.249"></a>
<span class="sourceLineNo">250</span>             qnan, <a name="line.250"></a>
<span class="sourceLineNo">251</span>             DfpField.FLAG_INVALID, "pow #39");<a name="line.251"></a>
<span class="sourceLineNo">252</span><a name="line.252"></a>
<span class="sourceLineNo">253</span>        test(DfpMath.pow(factory.getOne(), ninf),      <a name="line.253"></a>
<span class="sourceLineNo">254</span>             qnan,<a name="line.254"></a>
<span class="sourceLineNo">255</span>             DfpField.FLAG_INVALID, "pow #40");<a name="line.255"></a>
<span class="sourceLineNo">256</span><a name="line.256"></a>
<span class="sourceLineNo">257</span>        test(DfpMath.pow(factory.newDfp("-1"), pinf),<a name="line.257"></a>
<span class="sourceLineNo">258</span>             qnan, <a name="line.258"></a>
<span class="sourceLineNo">259</span>             DfpField.FLAG_INVALID, "pow #41");<a name="line.259"></a>
<span class="sourceLineNo">260</span><a name="line.260"></a>
<span class="sourceLineNo">261</span>        test(DfpMath.pow(factory.getOne().negate(), ninf),      <a name="line.261"></a>
<span class="sourceLineNo">262</span>             qnan,<a name="line.262"></a>
<span class="sourceLineNo">263</span>             DfpField.FLAG_INVALID, "pow #42");<a name="line.263"></a>
<span class="sourceLineNo">264</span><a name="line.264"></a>
<span class="sourceLineNo">265</span>        // +0  ^ +anything except 0, NAN  = +0<a name="line.265"></a>
<span class="sourceLineNo">266</span><a name="line.266"></a>
<span class="sourceLineNo">267</span>        test(DfpMath.pow(factory.newDfp("0"), factory.newDfp("1")),<a name="line.267"></a>
<span class="sourceLineNo">268</span>             factory.newDfp("0"),<a name="line.268"></a>
<span class="sourceLineNo">269</span>             0, "pow #43");<a name="line.269"></a>
<span class="sourceLineNo">270</span><a name="line.270"></a>
<span class="sourceLineNo">271</span>        test(DfpMath.pow(factory.newDfp("0"), factory.newDfp("1e30")),<a name="line.271"></a>
<span class="sourceLineNo">272</span>             factory.newDfp("0"),<a name="line.272"></a>
<span class="sourceLineNo">273</span>             0, "pow #44");<a name="line.273"></a>
<span class="sourceLineNo">274</span><a name="line.274"></a>
<span class="sourceLineNo">275</span>        test(DfpMath.pow(factory.newDfp("0"), factory.newDfp("1e-30")),<a name="line.275"></a>
<span class="sourceLineNo">276</span>             factory.newDfp("0"),<a name="line.276"></a>
<span class="sourceLineNo">277</span>             0, "pow #45");<a name="line.277"></a>
<span class="sourceLineNo">278</span><a name="line.278"></a>
<span class="sourceLineNo">279</span>        test(DfpMath.pow(factory.newDfp("0"), pinf),<a name="line.279"></a>
<span class="sourceLineNo">280</span>             factory.newDfp("0"),<a name="line.280"></a>
<span class="sourceLineNo">281</span>             0, "pow #46");<a name="line.281"></a>
<span class="sourceLineNo">282</span><a name="line.282"></a>
<span class="sourceLineNo">283</span>        // -0  ^ +anything except 0, NAN, odd integer  = +0<a name="line.283"></a>
<span class="sourceLineNo">284</span><a name="line.284"></a>
<span class="sourceLineNo">285</span>        test(DfpMath.pow(factory.newDfp("-0"), factory.newDfp("2")),<a name="line.285"></a>
<span class="sourceLineNo">286</span>             factory.newDfp("0"),<a name="line.286"></a>
<span class="sourceLineNo">287</span>             0, "pow #47");<a name="line.287"></a>
<span class="sourceLineNo">288</span><a name="line.288"></a>
<span class="sourceLineNo">289</span>        test(DfpMath.pow(factory.newDfp("-0"), factory.newDfp("1e30")),<a name="line.289"></a>
<span class="sourceLineNo">290</span>             factory.newDfp("0"),<a name="line.290"></a>
<span class="sourceLineNo">291</span>             0, "pow #48");<a name="line.291"></a>
<span class="sourceLineNo">292</span><a name="line.292"></a>
<span class="sourceLineNo">293</span>        test(DfpMath.pow(factory.newDfp("-0"), factory.newDfp("1e-30")),<a name="line.293"></a>
<span class="sourceLineNo">294</span>             factory.newDfp("0"),<a name="line.294"></a>
<span class="sourceLineNo">295</span>             DfpField.FLAG_INEXACT, "pow #49");<a name="line.295"></a>
<span class="sourceLineNo">296</span><a name="line.296"></a>
<span class="sourceLineNo">297</span>        test(DfpMath.pow(factory.newDfp("-0"), pinf),<a name="line.297"></a>
<span class="sourceLineNo">298</span>             factory.newDfp("0"),<a name="line.298"></a>
<span class="sourceLineNo">299</span>             0, "pow #50");<a name="line.299"></a>
<span class="sourceLineNo">300</span><a name="line.300"></a>
<span class="sourceLineNo">301</span>        // +0  ^ -anything except 0, NAN  = +INF<a name="line.301"></a>
<span class="sourceLineNo">302</span><a name="line.302"></a>
<span class="sourceLineNo">303</span>        test(DfpMath.pow(factory.newDfp("0"), factory.newDfp("-1")),<a name="line.303"></a>
<span class="sourceLineNo">304</span>             pinf,<a name="line.304"></a>
<span class="sourceLineNo">305</span>             0, "pow #51");<a name="line.305"></a>
<span class="sourceLineNo">306</span><a name="line.306"></a>
<span class="sourceLineNo">307</span>        test(DfpMath.pow(factory.newDfp("0"), factory.newDfp("-1e30")),<a name="line.307"></a>
<span class="sourceLineNo">308</span>             pinf,<a name="line.308"></a>
<span class="sourceLineNo">309</span>             0, "pow #52");<a name="line.309"></a>
<span class="sourceLineNo">310</span><a name="line.310"></a>
<span class="sourceLineNo">311</span>        test(DfpMath.pow(factory.newDfp("0"), factory.newDfp("-1e-30")),<a name="line.311"></a>
<span class="sourceLineNo">312</span>             pinf,<a name="line.312"></a>
<span class="sourceLineNo">313</span>             0, "pow #53");<a name="line.313"></a>
<span class="sourceLineNo">314</span><a name="line.314"></a>
<span class="sourceLineNo">315</span>        test(DfpMath.pow(factory.newDfp("0"), ninf),<a name="line.315"></a>
<span class="sourceLineNo">316</span>             pinf,<a name="line.316"></a>
<span class="sourceLineNo">317</span>             0, "pow #54");<a name="line.317"></a>
<span class="sourceLineNo">318</span><a name="line.318"></a>
<span class="sourceLineNo">319</span>        // -0  ^ -anything except 0, NAN, odd integer  = +INF<a name="line.319"></a>
<span class="sourceLineNo">320</span><a name="line.320"></a>
<span class="sourceLineNo">321</span>        test(DfpMath.pow(factory.newDfp("-0"), factory.newDfp("-2")),<a name="line.321"></a>
<span class="sourceLineNo">322</span>             pinf,<a name="line.322"></a>
<span class="sourceLineNo">323</span>             0, "pow #55");<a name="line.323"></a>
<span class="sourceLineNo">324</span><a name="line.324"></a>
<span class="sourceLineNo">325</span>        test(DfpMath.pow(factory.newDfp("-0"), factory.newDfp("-1e30")),<a name="line.325"></a>
<span class="sourceLineNo">326</span>             pinf,<a name="line.326"></a>
<span class="sourceLineNo">327</span>             0, "pow #56");<a name="line.327"></a>
<span class="sourceLineNo">328</span><a name="line.328"></a>
<span class="sourceLineNo">329</span>        test(DfpMath.pow(factory.newDfp("-0"), factory.newDfp("-1e-30")),<a name="line.329"></a>
<span class="sourceLineNo">330</span>             pinf,<a name="line.330"></a>
<span class="sourceLineNo">331</span>             DfpField.FLAG_INEXACT, "pow #57");<a name="line.331"></a>
<span class="sourceLineNo">332</span><a name="line.332"></a>
<span class="sourceLineNo">333</span>        test(DfpMath.pow(factory.newDfp("-0"), ninf),<a name="line.333"></a>
<span class="sourceLineNo">334</span>             pinf,<a name="line.334"></a>
<span class="sourceLineNo">335</span>             0, "pow #58");<a name="line.335"></a>
<span class="sourceLineNo">336</span><a name="line.336"></a>
<span class="sourceLineNo">337</span>        // -0  ^ -odd integer   =  -INF<a name="line.337"></a>
<span class="sourceLineNo">338</span>        test(DfpMath.pow(factory.newDfp("-0"), factory.newDfp("-1")),<a name="line.338"></a>
<span class="sourceLineNo">339</span>             ninf,<a name="line.339"></a>
<span class="sourceLineNo">340</span>             DfpField.FLAG_INEXACT, "pow #59");<a name="line.340"></a>
<span class="sourceLineNo">341</span><a name="line.341"></a>
<span class="sourceLineNo">342</span>        test(DfpMath.pow(factory.newDfp("-0"), factory.newDfp("-12345")),<a name="line.342"></a>
<span class="sourceLineNo">343</span>             ninf,<a name="line.343"></a>
<span class="sourceLineNo">344</span>             DfpField.FLAG_INEXACT, "pow #60");<a name="line.344"></a>
<span class="sourceLineNo">345</span><a name="line.345"></a>
<span class="sourceLineNo">346</span>        // -0  ^ +odd integer   =  -0<a name="line.346"></a>
<span class="sourceLineNo">347</span>        test(DfpMath.pow(factory.newDfp("-0"), factory.newDfp("3")),<a name="line.347"></a>
<span class="sourceLineNo">348</span>             factory.newDfp("-0"),<a name="line.348"></a>
<span class="sourceLineNo">349</span>             DfpField.FLAG_INEXACT, "pow #61");<a name="line.349"></a>
<span class="sourceLineNo">350</span><a name="line.350"></a>
<span class="sourceLineNo">351</span>        test(DfpMath.pow(factory.newDfp("-0"), factory.newDfp("12345")),<a name="line.351"></a>
<span class="sourceLineNo">352</span>             factory.newDfp("-0"),<a name="line.352"></a>
<span class="sourceLineNo">353</span>             DfpField.FLAG_INEXACT, "pow #62");<a name="line.353"></a>
<span class="sourceLineNo">354</span><a name="line.354"></a>
<span class="sourceLineNo">355</span>        // pinf  ^ +anything   = pinf <a name="line.355"></a>
<span class="sourceLineNo">356</span>        test(DfpMath.pow(pinf, factory.newDfp("3")),<a name="line.356"></a>
<span class="sourceLineNo">357</span>             pinf,<a name="line.357"></a>
<span class="sourceLineNo">358</span>             0, "pow #63");<a name="line.358"></a>
<span class="sourceLineNo">359</span><a name="line.359"></a>
<span class="sourceLineNo">360</span>        test(DfpMath.pow(pinf, factory.newDfp("1e30")),<a name="line.360"></a>
<span class="sourceLineNo">361</span>             pinf,<a name="line.361"></a>
<span class="sourceLineNo">362</span>             0, "pow #64");<a name="line.362"></a>
<span class="sourceLineNo">363</span><a name="line.363"></a>
<span class="sourceLineNo">364</span>        test(DfpMath.pow(pinf, factory.newDfp("1e-30")),<a name="line.364"></a>
<span class="sourceLineNo">365</span>             pinf,<a name="line.365"></a>
<span class="sourceLineNo">366</span>             0, "pow #65");<a name="line.366"></a>
<span class="sourceLineNo">367</span><a name="line.367"></a>
<span class="sourceLineNo">368</span>        test(DfpMath.pow(pinf, pinf),<a name="line.368"></a>
<span class="sourceLineNo">369</span>             pinf,<a name="line.369"></a>
<span class="sourceLineNo">370</span>             0, "pow #66");<a name="line.370"></a>
<span class="sourceLineNo">371</span><a name="line.371"></a>
<span class="sourceLineNo">372</span>        // pinf  ^ -anything   = +0 <a name="line.372"></a>
<span class="sourceLineNo">373</span><a name="line.373"></a>
<span class="sourceLineNo">374</span>        test(DfpMath.pow(pinf, factory.newDfp("-3")),<a name="line.374"></a>
<span class="sourceLineNo">375</span>             factory.getZero(),<a name="line.375"></a>
<span class="sourceLineNo">376</span>             0, "pow #67");<a name="line.376"></a>
<span class="sourceLineNo">377</span><a name="line.377"></a>
<span class="sourceLineNo">378</span>        test(DfpMath.pow(pinf, factory.newDfp("-1e30")),<a name="line.378"></a>
<span class="sourceLineNo">379</span>             factory.getZero(),<a name="line.379"></a>
<span class="sourceLineNo">380</span>             0, "pow #68");<a name="line.380"></a>
<span class="sourceLineNo">381</span><a name="line.381"></a>
<span class="sourceLineNo">382</span>        test(DfpMath.pow(pinf, factory.newDfp("-1e-30")),<a name="line.382"></a>
<span class="sourceLineNo">383</span>             factory.getZero(),<a name="line.383"></a>
<span class="sourceLineNo">384</span>             0, "pow #69");<a name="line.384"></a>
<span class="sourceLineNo">385</span><a name="line.385"></a>
<span class="sourceLineNo">386</span>        test(DfpMath.pow(pinf, ninf),<a name="line.386"></a>
<span class="sourceLineNo">387</span>             factory.getZero(),<a name="line.387"></a>
<span class="sourceLineNo">388</span>             0, "pow #70");<a name="line.388"></a>
<span class="sourceLineNo">389</span><a name="line.389"></a>
<span class="sourceLineNo">390</span>        // ninf  ^ anything   = -0 ^ -anything<a name="line.390"></a>
<span class="sourceLineNo">391</span>        // ninf  ^ -anything except 0, NAN, odd integer  = +0<a name="line.391"></a>
<span class="sourceLineNo">392</span><a name="line.392"></a>
<span class="sourceLineNo">393</span>        test(DfpMath.pow(ninf, factory.newDfp("-2")),<a name="line.393"></a>
<span class="sourceLineNo">394</span>             factory.newDfp("0"),<a name="line.394"></a>
<span class="sourceLineNo">395</span>             0, "pow #71");<a name="line.395"></a>
<span class="sourceLineNo">396</span><a name="line.396"></a>
<span class="sourceLineNo">397</span>        test(DfpMath.pow(ninf, factory.newDfp("-1e30")),<a name="line.397"></a>
<span class="sourceLineNo">398</span>             factory.newDfp("0"),<a name="line.398"></a>
<span class="sourceLineNo">399</span>             0, "pow #72");<a name="line.399"></a>
<span class="sourceLineNo">400</span><a name="line.400"></a>
<span class="sourceLineNo">401</span>        test(DfpMath.pow(ninf, factory.newDfp("-1e-30")),<a name="line.401"></a>
<span class="sourceLineNo">402</span>             factory.newDfp("0"),<a name="line.402"></a>
<span class="sourceLineNo">403</span>             DfpField.FLAG_INEXACT, "pow #73");<a name="line.403"></a>
<span class="sourceLineNo">404</span><a name="line.404"></a>
<span class="sourceLineNo">405</span>        test(DfpMath.pow(ninf, ninf),<a name="line.405"></a>
<span class="sourceLineNo">406</span>             factory.newDfp("0"),<a name="line.406"></a>
<span class="sourceLineNo">407</span>             0, "pow #74");<a name="line.407"></a>
<span class="sourceLineNo">408</span><a name="line.408"></a>
<span class="sourceLineNo">409</span>        // ninf  ^ +anything except 0, NAN, odd integer  = +INF<a name="line.409"></a>
<span class="sourceLineNo">410</span><a name="line.410"></a>
<span class="sourceLineNo">411</span>        test(DfpMath.pow(ninf, factory.newDfp("2")),<a name="line.411"></a>
<span class="sourceLineNo">412</span>             pinf,<a name="line.412"></a>
<span class="sourceLineNo">413</span>             0, "pow #75");<a name="line.413"></a>
<span class="sourceLineNo">414</span><a name="line.414"></a>
<span class="sourceLineNo">415</span>        test(DfpMath.pow(ninf, factory.newDfp("1e30")),<a name="line.415"></a>
<span class="sourceLineNo">416</span>             pinf,<a name="line.416"></a>
<span class="sourceLineNo">417</span>             0, "pow #76");<a name="line.417"></a>
<span class="sourceLineNo">418</span><a name="line.418"></a>
<span class="sourceLineNo">419</span>        test(DfpMath.pow(ninf, factory.newDfp("1e-30")),<a name="line.419"></a>
<span class="sourceLineNo">420</span>             pinf,<a name="line.420"></a>
<span class="sourceLineNo">421</span>             DfpField.FLAG_INEXACT, "pow #77");<a name="line.421"></a>
<span class="sourceLineNo">422</span><a name="line.422"></a>
<span class="sourceLineNo">423</span>        test(DfpMath.pow(ninf, pinf),<a name="line.423"></a>
<span class="sourceLineNo">424</span>             pinf,<a name="line.424"></a>
<span class="sourceLineNo">425</span>             0, "pow #78");<a name="line.425"></a>
<span class="sourceLineNo">426</span><a name="line.426"></a>
<span class="sourceLineNo">427</span>        // ninf  ^ +odd integer   =  -INF<a name="line.427"></a>
<span class="sourceLineNo">428</span>        test(DfpMath.pow(ninf, factory.newDfp("3")),<a name="line.428"></a>
<span class="sourceLineNo">429</span>             ninf,<a name="line.429"></a>
<span class="sourceLineNo">430</span>             DfpField.FLAG_INEXACT, "pow #79");<a name="line.430"></a>
<span class="sourceLineNo">431</span><a name="line.431"></a>
<span class="sourceLineNo">432</span>        test(DfpMath.pow(ninf, factory.newDfp("12345")),<a name="line.432"></a>
<span class="sourceLineNo">433</span>             ninf,<a name="line.433"></a>
<span class="sourceLineNo">434</span>             DfpField.FLAG_INEXACT, "pow #80");<a name="line.434"></a>
<span class="sourceLineNo">435</span><a name="line.435"></a>
<span class="sourceLineNo">436</span>        // ninf  ^ -odd integer   =  -0<a name="line.436"></a>
<span class="sourceLineNo">437</span>        test(DfpMath.pow(ninf, factory.newDfp("-3")),<a name="line.437"></a>
<span class="sourceLineNo">438</span>             factory.newDfp("-0"),<a name="line.438"></a>
<span class="sourceLineNo">439</span>             DfpField.FLAG_INEXACT, "pow #81");<a name="line.439"></a>
<span class="sourceLineNo">440</span><a name="line.440"></a>
<span class="sourceLineNo">441</span>        test(DfpMath.pow(ninf, factory.newDfp("-12345")),<a name="line.441"></a>
<span class="sourceLineNo">442</span>             factory.newDfp("-0"),<a name="line.442"></a>
<span class="sourceLineNo">443</span>             DfpField.FLAG_INEXACT, "pow #82");<a name="line.443"></a>
<span class="sourceLineNo">444</span><a name="line.444"></a>
<span class="sourceLineNo">445</span>        // -anything ^ integer <a name="line.445"></a>
<span class="sourceLineNo">446</span>        test(DfpMath.pow(factory.newDfp("-2"), factory.newDfp("3")),<a name="line.446"></a>
<span class="sourceLineNo">447</span>             factory.newDfp("-8"),<a name="line.447"></a>
<span class="sourceLineNo">448</span>             DfpField.FLAG_INEXACT, "pow #83");<a name="line.448"></a>
<span class="sourceLineNo">449</span><a name="line.449"></a>
<span class="sourceLineNo">450</span>        test(DfpMath.pow(factory.newDfp("-2"), factory.newDfp("16")),<a name="line.450"></a>
<span class="sourceLineNo">451</span>             factory.newDfp("65536"),<a name="line.451"></a>
<span class="sourceLineNo">452</span>             0, "pow #84");<a name="line.452"></a>
<span class="sourceLineNo">453</span><a name="line.453"></a>
<span class="sourceLineNo">454</span>        test(DfpMath.pow(factory.newDfp("-2"), factory.newDfp("-3")),<a name="line.454"></a>
<span class="sourceLineNo">455</span>             factory.newDfp("-0.125"),<a name="line.455"></a>
<span class="sourceLineNo">456</span>             DfpField.FLAG_INEXACT, "pow #85");<a name="line.456"></a>
<span class="sourceLineNo">457</span><a name="line.457"></a>
<span class="sourceLineNo">458</span>        test(DfpMath.pow(factory.newDfp("-2"), factory.newDfp("-4")),<a name="line.458"></a>
<span class="sourceLineNo">459</span>             factory.newDfp("0.0625"),<a name="line.459"></a>
<span class="sourceLineNo">460</span>             0, "pow #86");<a name="line.460"></a>
<span class="sourceLineNo">461</span><a name="line.461"></a>
<span class="sourceLineNo">462</span>        // -anything ^ noninteger = NaN<a name="line.462"></a>
<span class="sourceLineNo">463</span><a name="line.463"></a>
<span class="sourceLineNo">464</span>        test(DfpMath.pow(factory.newDfp("-2"), factory.newDfp("-4.1")),<a name="line.464"></a>
<span class="sourceLineNo">465</span>             qnan,<a name="line.465"></a>
<span class="sourceLineNo">466</span>             DfpField.FLAG_INVALID|DfpField.FLAG_INEXACT, "pow #87");<a name="line.466"></a>
<span class="sourceLineNo">467</span><a name="line.467"></a>
<span class="sourceLineNo">468</span>        // Some fractional cases.<a name="line.468"></a>
<span class="sourceLineNo">469</span>        test(DfpMath.pow(factory.newDfp("2"),factory.newDfp("1.5")),<a name="line.469"></a>
<span class="sourceLineNo">470</span>             factory.newDfp("2.8284271247461901"), <a name="line.470"></a>
<span class="sourceLineNo">471</span>             DfpField.FLAG_INEXACT, "pow #88");<a name="line.471"></a>
<span class="sourceLineNo">472</span>    }<a name="line.472"></a>
<span class="sourceLineNo">473</span><a name="line.473"></a>
<span class="sourceLineNo">474</span>    @Test<a name="line.474"></a>
<span class="sourceLineNo">475</span>    public void testSin()<a name="line.475"></a>
<span class="sourceLineNo">476</span>    {<a name="line.476"></a>
<span class="sourceLineNo">477</span>        test(DfpMath.sin(pinf),<a name="line.477"></a>
<span class="sourceLineNo">478</span>             nan,<a name="line.478"></a>
<span class="sourceLineNo">479</span>             DfpField.FLAG_INVALID|DfpField.FLAG_INEXACT, "sin #1");<a name="line.479"></a>
<span class="sourceLineNo">480</span><a name="line.480"></a>
<span class="sourceLineNo">481</span>        test(DfpMath.sin(nan),<a name="line.481"></a>
<span class="sourceLineNo">482</span>             nan,<a name="line.482"></a>
<span class="sourceLineNo">483</span>             DfpField.FLAG_INVALID|DfpField.FLAG_INEXACT, "sin #2");<a name="line.483"></a>
<span class="sourceLineNo">484</span><a name="line.484"></a>
<span class="sourceLineNo">485</span>        test(DfpMath.sin(factory.getZero()),<a name="line.485"></a>
<span class="sourceLineNo">486</span>             factory.getZero(),<a name="line.486"></a>
<span class="sourceLineNo">487</span>             DfpField.FLAG_INEXACT, "sin #3");<a name="line.487"></a>
<span class="sourceLineNo">488</span><a name="line.488"></a>
<span class="sourceLineNo">489</span>        test(DfpMath.sin(factory.getPi()),<a name="line.489"></a>
<span class="sourceLineNo">490</span>             factory.getZero(),<a name="line.490"></a>
<span class="sourceLineNo">491</span>             DfpField.FLAG_INEXACT, "sin #4");<a name="line.491"></a>
<span class="sourceLineNo">492</span><a name="line.492"></a>
<span class="sourceLineNo">493</span>        test(DfpMath.sin(factory.getPi().negate()),<a name="line.493"></a>
<span class="sourceLineNo">494</span>             factory.newDfp("-0"),<a name="line.494"></a>
<span class="sourceLineNo">495</span>             DfpField.FLAG_INEXACT, "sin #5");<a name="line.495"></a>
<span class="sourceLineNo">496</span><a name="line.496"></a>
<span class="sourceLineNo">497</span>        test(DfpMath.sin(factory.getPi().multiply(2)),<a name="line.497"></a>
<span class="sourceLineNo">498</span>             factory.getZero(),<a name="line.498"></a>
<span class="sourceLineNo">499</span>             DfpField.FLAG_INEXACT, "sin #6");<a name="line.499"></a>
<span class="sourceLineNo">500</span><a name="line.500"></a>
<span class="sourceLineNo">501</span>        test(DfpMath.sin(factory.getPi().divide(2)),<a name="line.501"></a>
<span class="sourceLineNo">502</span>             factory.getOne(),<a name="line.502"></a>
<span class="sourceLineNo">503</span>             DfpField.FLAG_INEXACT, "sin #7");<a name="line.503"></a>
<span class="sourceLineNo">504</span><a name="line.504"></a>
<span class="sourceLineNo">505</span>        test(DfpMath.sin(factory.getPi().divide(2).negate()),<a name="line.505"></a>
<span class="sourceLineNo">506</span>             factory.getOne().negate(),<a name="line.506"></a>
<span class="sourceLineNo">507</span>             DfpField.FLAG_INEXACT, "sin #8");<a name="line.507"></a>
<span class="sourceLineNo">508</span><a name="line.508"></a>
<span class="sourceLineNo">509</span>        test(DfpMath.sin(DfpMath.atan(factory.getOne())),  // pi/4<a name="line.509"></a>
<span class="sourceLineNo">510</span>             factory.newDfp("0.5").sqrt(),<a name="line.510"></a>
<span class="sourceLineNo">511</span>             DfpField.FLAG_INEXACT, "sin #9");<a name="line.511"></a>
<span class="sourceLineNo">512</span><a name="line.512"></a>
<span class="sourceLineNo">513</span>        test(DfpMath.sin(DfpMath.atan(factory.getOne())).negate(),  // -pi/4<a name="line.513"></a>
<span class="sourceLineNo">514</span>             factory.newDfp("0.5").sqrt().negate(),<a name="line.514"></a>
<span class="sourceLineNo">515</span>             DfpField.FLAG_INEXACT, "sin #10");<a name="line.515"></a>
<span class="sourceLineNo">516</span><a name="line.516"></a>
<span class="sourceLineNo">517</span>        test(DfpMath.sin(DfpMath.atan(factory.getOne())).negate(),  // -pi/4<a name="line.517"></a>
<span class="sourceLineNo">518</span>             factory.newDfp("0.5").sqrt().negate(),<a name="line.518"></a>
<span class="sourceLineNo">519</span>             DfpField.FLAG_INEXACT, "sin #11");<a name="line.519"></a>
<span class="sourceLineNo">520</span><a name="line.520"></a>
<span class="sourceLineNo">521</span>        test(DfpMath.sin(factory.newDfp("0.1")),<a name="line.521"></a>
<span class="sourceLineNo">522</span>             factory.newDfp("0.0998334166468281523"),<a name="line.522"></a>
<span class="sourceLineNo">523</span>             DfpField.FLAG_INEXACT, "sin #12");<a name="line.523"></a>
<span class="sourceLineNo">524</span><a name="line.524"></a>
<span class="sourceLineNo">525</span>        test(DfpMath.sin(factory.newDfp("0.2")),<a name="line.525"></a>
<span class="sourceLineNo">526</span>             factory.newDfp("0.19866933079506121546"),<a name="line.526"></a>
<span class="sourceLineNo">527</span>             DfpField.FLAG_INEXACT, "sin #13");<a name="line.527"></a>
<span class="sourceLineNo">528</span><a name="line.528"></a>
<span class="sourceLineNo">529</span>        test(DfpMath.sin(factory.newDfp("0.3")),<a name="line.529"></a>
<span class="sourceLineNo">530</span>             factory.newDfp("0.2955202066613395751"),<a name="line.530"></a>
<span class="sourceLineNo">531</span>             DfpField.FLAG_INEXACT, "sin #14");<a name="line.531"></a>
<span class="sourceLineNo">532</span><a name="line.532"></a>
<span class="sourceLineNo">533</span>        test(DfpMath.sin(factory.newDfp("0.4")),<a name="line.533"></a>
<span class="sourceLineNo">534</span>             factory.newDfp("0.38941834230865049166"),<a name="line.534"></a>
<span class="sourceLineNo">535</span>             DfpField.FLAG_INEXACT, "sin #15");<a name="line.535"></a>
<span class="sourceLineNo">536</span><a name="line.536"></a>
<span class="sourceLineNo">537</span>        test(DfpMath.sin(factory.newDfp("0.5")),<a name="line.537"></a>
<span class="sourceLineNo">538</span>             factory.newDfp("0.47942553860420300026"),  // off by one ULP<a name="line.538"></a>
<span class="sourceLineNo">539</span>             DfpField.FLAG_INEXACT, "sin #16");<a name="line.539"></a>
<span class="sourceLineNo">540</span><a name="line.540"></a>
<span class="sourceLineNo">541</span>        test(DfpMath.sin(factory.newDfp("0.6")),<a name="line.541"></a>
<span class="sourceLineNo">542</span>             factory.newDfp("0.56464247339503535721"),  // off by one ULP<a name="line.542"></a>
<span class="sourceLineNo">543</span>             DfpField.FLAG_INEXACT, "sin #17");<a name="line.543"></a>
<span class="sourceLineNo">544</span><a name="line.544"></a>
<span class="sourceLineNo">545</span>        test(DfpMath.sin(factory.newDfp("0.7")),<a name="line.545"></a>
<span class="sourceLineNo">546</span>             factory.newDfp("0.64421768723769105367"),  <a name="line.546"></a>
<span class="sourceLineNo">547</span>             DfpField.FLAG_INEXACT, "sin #18");<a name="line.547"></a>
<span class="sourceLineNo">548</span><a name="line.548"></a>
<span class="sourceLineNo">549</span>        test(DfpMath.sin(factory.newDfp("0.8")),        <a name="line.549"></a>
<span class="sourceLineNo">550</span>             factory.newDfp("0.71735609089952276163"),<a name="line.550"></a>
<span class="sourceLineNo">551</span>             DfpField.FLAG_INEXACT, "sin #19");<a name="line.551"></a>
<span class="sourceLineNo">552</span><a name="line.552"></a>
<span class="sourceLineNo">553</span>        test(DfpMath.sin(factory.newDfp("0.9")),        // off by one ULP<a name="line.553"></a>
<span class="sourceLineNo">554</span>             factory.newDfp("0.78332690962748338847"),<a name="line.554"></a>
<span class="sourceLineNo">555</span>             DfpField.FLAG_INEXACT, "sin #20");<a name="line.555"></a>
<span class="sourceLineNo">556</span><a name="line.556"></a>
<span class="sourceLineNo">557</span>        test(DfpMath.sin(factory.newDfp("1.0")),<a name="line.557"></a>
<span class="sourceLineNo">558</span>             factory.newDfp("0.84147098480789650666"),<a name="line.558"></a>
<span class="sourceLineNo">559</span>             DfpField.FLAG_INEXACT, "sin #21");<a name="line.559"></a>
<span class="sourceLineNo">560</span><a name="line.560"></a>
<span class="sourceLineNo">561</span>        test(DfpMath.sin(factory.newDfp("1.1")),<a name="line.561"></a>
<span class="sourceLineNo">562</span>             factory.newDfp("0.89120736006143533995"),<a name="line.562"></a>
<span class="sourceLineNo">563</span>             DfpField.FLAG_INEXACT, "sin #22");<a name="line.563"></a>
<span class="sourceLineNo">564</span><a name="line.564"></a>
<span class="sourceLineNo">565</span>        test(DfpMath.sin(factory.newDfp("1.2")),<a name="line.565"></a>
<span class="sourceLineNo">566</span>             factory.newDfp("0.93203908596722634968"),<a name="line.566"></a>
<span class="sourceLineNo">567</span>             DfpField.FLAG_INEXACT, "sin #23");<a name="line.567"></a>
<span class="sourceLineNo">568</span><a name="line.568"></a>
<span class="sourceLineNo">569</span>        test(DfpMath.sin(factory.newDfp("1.3")),<a name="line.569"></a>
<span class="sourceLineNo">570</span>             factory.newDfp("0.9635581854171929647"),<a name="line.570"></a>
<span class="sourceLineNo">571</span>             DfpField.FLAG_INEXACT, "sin #24");<a name="line.571"></a>
<span class="sourceLineNo">572</span><a name="line.572"></a>
<span class="sourceLineNo">573</span>        test(DfpMath.sin(factory.newDfp("1.4")),<a name="line.573"></a>
<span class="sourceLineNo">574</span>             factory.newDfp("0.98544972998846018066"),<a name="line.574"></a>
<span class="sourceLineNo">575</span>             DfpField.FLAG_INEXACT, "sin #25");<a name="line.575"></a>
<span class="sourceLineNo">576</span><a name="line.576"></a>
<span class="sourceLineNo">577</span>        test(DfpMath.sin(factory.newDfp("1.5")),<a name="line.577"></a>
<span class="sourceLineNo">578</span>             factory.newDfp("0.99749498660405443096"),<a name="line.578"></a>
<span class="sourceLineNo">579</span>             DfpField.FLAG_INEXACT, "sin #26");<a name="line.579"></a>
<span class="sourceLineNo">580</span><a name="line.580"></a>
<span class="sourceLineNo">581</span>        test(DfpMath.sin(factory.newDfp("1.6")),<a name="line.581"></a>
<span class="sourceLineNo">582</span>             factory.newDfp("0.99957360304150516323"),<a name="line.582"></a>
<span class="sourceLineNo">583</span>             DfpField.FLAG_INEXACT, "sin #27");<a name="line.583"></a>
<span class="sourceLineNo">584</span>    }<a name="line.584"></a>
<span class="sourceLineNo">585</span><a name="line.585"></a>
<span class="sourceLineNo">586</span><a name="line.586"></a>
<span class="sourceLineNo">587</span>}<a name="line.587"></a>




























































</pre>
</div>
</body>
</html>
