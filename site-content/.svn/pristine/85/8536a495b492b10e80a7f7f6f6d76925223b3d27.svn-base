<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span><a name="line.17"></a>
<span class="sourceLineNo">018</span>package org.apache.commons.math3.distribution;<a name="line.18"></a>
<span class="sourceLineNo">019</span><a name="line.19"></a>
<span class="sourceLineNo">020</span>import org.apache.commons.math3.exception.NumberIsTooLargeException;<a name="line.20"></a>
<span class="sourceLineNo">021</span>import org.apache.commons.math3.exception.NumberIsTooSmallException;<a name="line.21"></a>
<span class="sourceLineNo">022</span>import org.junit.Assert;<a name="line.22"></a>
<span class="sourceLineNo">023</span>import org.junit.Test;<a name="line.23"></a>
<span class="sourceLineNo">024</span><a name="line.24"></a>
<span class="sourceLineNo">025</span>/**<a name="line.25"></a>
<span class="sourceLineNo">026</span> * Test cases for {@link TriangularDistribution}. See class javadoc for<a name="line.26"></a>
<span class="sourceLineNo">027</span> * {@link RealDistributionAbstractTest} for further details.<a name="line.27"></a>
<span class="sourceLineNo">028</span> */<a name="line.28"></a>
<span class="sourceLineNo">029</span>public class TriangularDistributionTest extends RealDistributionAbstractTest {<a name="line.29"></a>
<span class="sourceLineNo">030</span><a name="line.30"></a>
<span class="sourceLineNo">031</span>    // --- Override tolerance -------------------------------------------------<a name="line.31"></a>
<span class="sourceLineNo">032</span><a name="line.32"></a>
<span class="sourceLineNo">033</span>    @Override<a name="line.33"></a>
<span class="sourceLineNo">034</span>    public void setUp() {<a name="line.34"></a>
<span class="sourceLineNo">035</span>        super.setUp();<a name="line.35"></a>
<span class="sourceLineNo">036</span>        setTolerance(1e-4);<a name="line.36"></a>
<span class="sourceLineNo">037</span>    }<a name="line.37"></a>
<span class="sourceLineNo">038</span><a name="line.38"></a>
<span class="sourceLineNo">039</span>    //--- Implementations for abstract methods --------------------------------<a name="line.39"></a>
<span class="sourceLineNo">040</span><a name="line.40"></a>
<span class="sourceLineNo">041</span>    /**<a name="line.41"></a>
<span class="sourceLineNo">042</span>     * Creates the default triangular distribution instance to use in tests.<a name="line.42"></a>
<span class="sourceLineNo">043</span>     */<a name="line.43"></a>
<span class="sourceLineNo">044</span>    @Override<a name="line.44"></a>
<span class="sourceLineNo">045</span>    public TriangularDistribution makeDistribution() {<a name="line.45"></a>
<span class="sourceLineNo">046</span>        // Left side 5 wide, right side 10 wide.<a name="line.46"></a>
<span class="sourceLineNo">047</span>        return new TriangularDistribution(-3, 2, 12);<a name="line.47"></a>
<span class="sourceLineNo">048</span>    }<a name="line.48"></a>
<span class="sourceLineNo">049</span><a name="line.49"></a>
<span class="sourceLineNo">050</span>    /**<a name="line.50"></a>
<span class="sourceLineNo">051</span>     * Creates the default cumulative probability distribution test input<a name="line.51"></a>
<span class="sourceLineNo">052</span>     * values.<a name="line.52"></a>
<span class="sourceLineNo">053</span>     */<a name="line.53"></a>
<span class="sourceLineNo">054</span>    @Override<a name="line.54"></a>
<span class="sourceLineNo">055</span>    public double[] makeCumulativeTestPoints() {<a name="line.55"></a>
<span class="sourceLineNo">056</span>        return new double[] { -3.0001,                 // below lower limit<a name="line.56"></a>
<span class="sourceLineNo">057</span>                              -3.0,                    // at lower limit<a name="line.57"></a>
<span class="sourceLineNo">058</span>                              -2.0, -1.0, 0.0, 1.0,    // on lower side<a name="line.58"></a>
<span class="sourceLineNo">059</span>                              2.0,                     // at mode<a name="line.59"></a>
<span class="sourceLineNo">060</span>                              3.0, 4.0, 10.0, 11.0,    // on upper side<a name="line.60"></a>
<span class="sourceLineNo">061</span>                              12.0,                    // at upper limit<a name="line.61"></a>
<span class="sourceLineNo">062</span>                              12.0001                  // above upper limit<a name="line.62"></a>
<span class="sourceLineNo">063</span>                            };<a name="line.63"></a>
<span class="sourceLineNo">064</span>    }<a name="line.64"></a>
<span class="sourceLineNo">065</span><a name="line.65"></a>
<span class="sourceLineNo">066</span>    /**<a name="line.66"></a>
<span class="sourceLineNo">067</span>     * Creates the default cumulative probability density test expected values.<a name="line.67"></a>
<span class="sourceLineNo">068</span>     */<a name="line.68"></a>
<span class="sourceLineNo">069</span>    @Override<a name="line.69"></a>
<span class="sourceLineNo">070</span>    public double[] makeCumulativeTestValues() {<a name="line.70"></a>
<span class="sourceLineNo">071</span>        // Top at 2 / (b - a) = 2 / (12 - -3) = 2 / 15 = 7.5<a name="line.71"></a>
<span class="sourceLineNo">072</span>        // Area left  = 7.5 * 5  * 0.5 = 18.75 (1/3 of the total area)<a name="line.72"></a>
<span class="sourceLineNo">073</span>        // Area right = 7.5 * 10 * 0.5 = 37.5  (2/3 of the total area)<a name="line.73"></a>
<span class="sourceLineNo">074</span>        // Area total = 18.75 + 37.5 = 56.25<a name="line.74"></a>
<span class="sourceLineNo">075</span>        // Derivative left side = 7.5 / 5 = 1.5<a name="line.75"></a>
<span class="sourceLineNo">076</span>        // Derivative right side = -7.5 / 10 = -0.75<a name="line.76"></a>
<span class="sourceLineNo">077</span>        double third = 1 / 3.0;<a name="line.77"></a>
<span class="sourceLineNo">078</span>        double left = 18.75;<a name="line.78"></a>
<span class="sourceLineNo">079</span>        double area = 56.25;<a name="line.79"></a>
<span class="sourceLineNo">080</span>        return new double[] { 0.0,<a name="line.80"></a>
<span class="sourceLineNo">081</span>                              0.0,<a name="line.81"></a>
<span class="sourceLineNo">082</span>                              0.75 / area, 3 / area, 6.75 / area, 12 / area,<a name="line.82"></a>
<span class="sourceLineNo">083</span>                              third,<a name="line.83"></a>
<span class="sourceLineNo">084</span>                              (left + 7.125) / area, (left + 13.5) / area,<a name="line.84"></a>
<span class="sourceLineNo">085</span>                              (left + 36) / area, (left + 37.125) / area,<a name="line.85"></a>
<span class="sourceLineNo">086</span>                              1.0,<a name="line.86"></a>
<span class="sourceLineNo">087</span>                              1.0<a name="line.87"></a>
<span class="sourceLineNo">088</span>                            };<a name="line.88"></a>
<span class="sourceLineNo">089</span>    }<a name="line.89"></a>
<span class="sourceLineNo">090</span><a name="line.90"></a>
<span class="sourceLineNo">091</span>    /**<a name="line.91"></a>
<span class="sourceLineNo">092</span>     * Creates the default inverse cumulative probability distribution test<a name="line.92"></a>
<span class="sourceLineNo">093</span>     * input values.<a name="line.93"></a>
<span class="sourceLineNo">094</span>     */<a name="line.94"></a>
<span class="sourceLineNo">095</span>    @Override<a name="line.95"></a>
<span class="sourceLineNo">096</span>    public double[] makeInverseCumulativeTestPoints() {<a name="line.96"></a>
<span class="sourceLineNo">097</span>        // Exclude the points outside the limits, as they have cumulative<a name="line.97"></a>
<span class="sourceLineNo">098</span>        // probability of zero and one, meaning the inverse returns the<a name="line.98"></a>
<span class="sourceLineNo">099</span>        // limits and not the points outside the limits.<a name="line.99"></a>
<span class="sourceLineNo">100</span>        double[] points = makeCumulativeTestValues();<a name="line.100"></a>
<span class="sourceLineNo">101</span>        double[] points2 = new double[points.length-2];<a name="line.101"></a>
<span class="sourceLineNo">102</span>        System.arraycopy(points, 1, points2, 0, points2.length);<a name="line.102"></a>
<span class="sourceLineNo">103</span>        return points2;<a name="line.103"></a>
<span class="sourceLineNo">104</span>        //return Arrays.copyOfRange(points, 1, points.length - 1);<a name="line.104"></a>
<span class="sourceLineNo">105</span>    }<a name="line.105"></a>
<span class="sourceLineNo">106</span><a name="line.106"></a>
<span class="sourceLineNo">107</span>    /**<a name="line.107"></a>
<span class="sourceLineNo">108</span>     * Creates the default inverse cumulative probability density test expected<a name="line.108"></a>
<span class="sourceLineNo">109</span>     * values.<a name="line.109"></a>
<span class="sourceLineNo">110</span>     */<a name="line.110"></a>
<span class="sourceLineNo">111</span>    @Override<a name="line.111"></a>
<span class="sourceLineNo">112</span>    public double[] makeInverseCumulativeTestValues() {<a name="line.112"></a>
<span class="sourceLineNo">113</span>        // Exclude the points outside the limits, as they have cumulative<a name="line.113"></a>
<span class="sourceLineNo">114</span>        // probability of zero and one, meaning the inverse returns the<a name="line.114"></a>
<span class="sourceLineNo">115</span>        // limits and not the points outside the limits.<a name="line.115"></a>
<span class="sourceLineNo">116</span>        double[] points = makeCumulativeTestPoints();<a name="line.116"></a>
<span class="sourceLineNo">117</span>        double[] points2 = new double[points.length-2];<a name="line.117"></a>
<span class="sourceLineNo">118</span>        System.arraycopy(points, 1, points2, 0, points2.length);<a name="line.118"></a>
<span class="sourceLineNo">119</span>        return points2;<a name="line.119"></a>
<span class="sourceLineNo">120</span>        //return Arrays.copyOfRange(points, 1, points.length - 1);<a name="line.120"></a>
<span class="sourceLineNo">121</span>    }<a name="line.121"></a>
<span class="sourceLineNo">122</span><a name="line.122"></a>
<span class="sourceLineNo">123</span>    /** Creates the default probability density test expected values. */<a name="line.123"></a>
<span class="sourceLineNo">124</span>    @Override<a name="line.124"></a>
<span class="sourceLineNo">125</span>    public double[] makeDensityTestValues() {<a name="line.125"></a>
<span class="sourceLineNo">126</span>        return new double[] { 0,<a name="line.126"></a>
<span class="sourceLineNo">127</span>                              0,<a name="line.127"></a>
<span class="sourceLineNo">128</span>                              2 / 75.0, 4 / 75.0, 6 / 75.0, 8 / 75.0,<a name="line.128"></a>
<span class="sourceLineNo">129</span>                              10 / 75.0,<a name="line.129"></a>
<span class="sourceLineNo">130</span>                              9 / 75.0, 8 / 75.0, 2 / 75.0, 1 / 75.0,<a name="line.130"></a>
<span class="sourceLineNo">131</span>                              0,<a name="line.131"></a>
<span class="sourceLineNo">132</span>                              0<a name="line.132"></a>
<span class="sourceLineNo">133</span>                            };<a name="line.133"></a>
<span class="sourceLineNo">134</span>    }<a name="line.134"></a>
<span class="sourceLineNo">135</span><a name="line.135"></a>
<span class="sourceLineNo">136</span>    //--- Additional test cases -----------------------------------------------<a name="line.136"></a>
<span class="sourceLineNo">137</span><a name="line.137"></a>
<span class="sourceLineNo">138</span>    /** Test lower bound getter. */<a name="line.138"></a>
<span class="sourceLineNo">139</span>    @Test<a name="line.139"></a>
<span class="sourceLineNo">140</span>    public void testGetLowerBound() {<a name="line.140"></a>
<span class="sourceLineNo">141</span>        TriangularDistribution distribution = makeDistribution();<a name="line.141"></a>
<span class="sourceLineNo">142</span>        Assert.assertEquals(-3.0, distribution.getSupportLowerBound(), 0);<a name="line.142"></a>
<span class="sourceLineNo">143</span>    }<a name="line.143"></a>
<span class="sourceLineNo">144</span><a name="line.144"></a>
<span class="sourceLineNo">145</span>    /** Test upper bound getter. */<a name="line.145"></a>
<span class="sourceLineNo">146</span>    @Test<a name="line.146"></a>
<span class="sourceLineNo">147</span>    public void testGetUpperBound() {<a name="line.147"></a>
<span class="sourceLineNo">148</span>        TriangularDistribution distribution = makeDistribution();<a name="line.148"></a>
<span class="sourceLineNo">149</span>        Assert.assertEquals(12.0, distribution.getSupportUpperBound(), 0);<a name="line.149"></a>
<span class="sourceLineNo">150</span>    }<a name="line.150"></a>
<span class="sourceLineNo">151</span><a name="line.151"></a>
<span class="sourceLineNo">152</span>    /** Test pre-condition for equal lower/upper limit. */<a name="line.152"></a>
<span class="sourceLineNo">153</span>    @Test(expected=NumberIsTooLargeException.class)<a name="line.153"></a>
<span class="sourceLineNo">154</span>    public void testPreconditions1() {<a name="line.154"></a>
<span class="sourceLineNo">155</span>        new TriangularDistribution(0, 0, 0);<a name="line.155"></a>
<span class="sourceLineNo">156</span>    }<a name="line.156"></a>
<span class="sourceLineNo">157</span><a name="line.157"></a>
<span class="sourceLineNo">158</span>    /** Test pre-condition for lower limit larger than upper limit. */<a name="line.158"></a>
<span class="sourceLineNo">159</span>    @Test(expected=NumberIsTooLargeException.class)<a name="line.159"></a>
<span class="sourceLineNo">160</span>    public void testPreconditions2() {<a name="line.160"></a>
<span class="sourceLineNo">161</span>        new TriangularDistribution(1, 1, 0);<a name="line.161"></a>
<span class="sourceLineNo">162</span>    }<a name="line.162"></a>
<span class="sourceLineNo">163</span><a name="line.163"></a>
<span class="sourceLineNo">164</span>    /** Test pre-condition for mode larger than upper limit. */<a name="line.164"></a>
<span class="sourceLineNo">165</span>    @Test(expected=NumberIsTooLargeException.class)<a name="line.165"></a>
<span class="sourceLineNo">166</span>    public void testPreconditions3() {<a name="line.166"></a>
<span class="sourceLineNo">167</span>        new TriangularDistribution(0, 2, 1);<a name="line.167"></a>
<span class="sourceLineNo">168</span>    }<a name="line.168"></a>
<span class="sourceLineNo">169</span><a name="line.169"></a>
<span class="sourceLineNo">170</span>    /** Test pre-condition for mode smaller than lower limit. */<a name="line.170"></a>
<span class="sourceLineNo">171</span>    @Test(expected=NumberIsTooSmallException.class)<a name="line.171"></a>
<span class="sourceLineNo">172</span>    public void testPreconditions4() {<a name="line.172"></a>
<span class="sourceLineNo">173</span>        new TriangularDistribution(2, 1, 3);<a name="line.173"></a>
<span class="sourceLineNo">174</span>    }<a name="line.174"></a>
<span class="sourceLineNo">175</span><a name="line.175"></a>
<span class="sourceLineNo">176</span>    /** Test mean/variance. */<a name="line.176"></a>
<span class="sourceLineNo">177</span>    @Test<a name="line.177"></a>
<span class="sourceLineNo">178</span>    public void testMeanVariance() {<a name="line.178"></a>
<span class="sourceLineNo">179</span>        TriangularDistribution dist;<a name="line.179"></a>
<span class="sourceLineNo">180</span><a name="line.180"></a>
<span class="sourceLineNo">181</span>        dist = new TriangularDistribution(0, 0.5, 1.0);<a name="line.181"></a>
<span class="sourceLineNo">182</span>        Assert.assertEquals(dist.getNumericalMean(), 0.5, 0);<a name="line.182"></a>
<span class="sourceLineNo">183</span>        Assert.assertEquals(dist.getNumericalVariance(), 1 / 24.0, 0);<a name="line.183"></a>
<span class="sourceLineNo">184</span><a name="line.184"></a>
<span class="sourceLineNo">185</span>        dist = new TriangularDistribution(0, 1, 1);<a name="line.185"></a>
<span class="sourceLineNo">186</span>        Assert.assertEquals(dist.getNumericalMean(), 2 / 3.0, 0);<a name="line.186"></a>
<span class="sourceLineNo">187</span>        Assert.assertEquals(dist.getNumericalVariance(), 1 / 18.0, 0);<a name="line.187"></a>
<span class="sourceLineNo">188</span><a name="line.188"></a>
<span class="sourceLineNo">189</span>        dist = new TriangularDistribution(-3, 2, 12);<a name="line.189"></a>
<span class="sourceLineNo">190</span>        Assert.assertEquals(dist.getNumericalMean(), 3 + (2 / 3.0), 0);<a name="line.190"></a>
<span class="sourceLineNo">191</span>        Assert.assertEquals(dist.getNumericalVariance(), 175 / 18.0, 0);<a name="line.191"></a>
<span class="sourceLineNo">192</span>    }<a name="line.192"></a>
<span class="sourceLineNo">193</span>}<a name="line.193"></a>




























































</pre>
</div>
</body>
</html>
