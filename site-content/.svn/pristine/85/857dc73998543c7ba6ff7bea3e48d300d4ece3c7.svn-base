<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span><a name="line.17"></a>
<span class="sourceLineNo">018</span>package org.apache.commons.math3.geometry.euclidean.threed;<a name="line.18"></a>
<span class="sourceLineNo">019</span><a name="line.19"></a>
<span class="sourceLineNo">020</span>import org.apache.commons.math3.TestUtils;<a name="line.20"></a>
<span class="sourceLineNo">021</span>import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;<a name="line.21"></a>
<span class="sourceLineNo">022</span>import org.apache.commons.math3.exception.DimensionMismatchException;<a name="line.22"></a>
<span class="sourceLineNo">023</span>import org.apache.commons.math3.util.FastMath;<a name="line.23"></a>
<span class="sourceLineNo">024</span>import org.junit.Assert;<a name="line.24"></a>
<span class="sourceLineNo">025</span>import org.junit.Test;<a name="line.25"></a>
<span class="sourceLineNo">026</span><a name="line.26"></a>
<span class="sourceLineNo">027</span>public class SphericalCoordinatesTest {<a name="line.27"></a>
<span class="sourceLineNo">028</span><a name="line.28"></a>
<span class="sourceLineNo">029</span>    @Test<a name="line.29"></a>
<span class="sourceLineNo">030</span>    public void testCoordinatesStoC() throws DimensionMismatchException {<a name="line.30"></a>
<span class="sourceLineNo">031</span>        double piO2 = 0.5 * FastMath.PI;<a name="line.31"></a>
<span class="sourceLineNo">032</span>        SphericalCoordinates sc1 = new SphericalCoordinates(2.0, 0, piO2);<a name="line.32"></a>
<span class="sourceLineNo">033</span>        Assert.assertEquals(0, sc1.getCartesian().distance(new Vector3D(2, 0, 0)), 1.0e-10);<a name="line.33"></a>
<span class="sourceLineNo">034</span>        SphericalCoordinates sc2 = new SphericalCoordinates(2.0, piO2, piO2);<a name="line.34"></a>
<span class="sourceLineNo">035</span>        Assert.assertEquals(0, sc2.getCartesian().distance(new Vector3D(0, 2, 0)), 1.0e-10);<a name="line.35"></a>
<span class="sourceLineNo">036</span>        SphericalCoordinates sc3 = new SphericalCoordinates(2.0, FastMath.PI, piO2);<a name="line.36"></a>
<span class="sourceLineNo">037</span>        Assert.assertEquals(0, sc3.getCartesian().distance(new Vector3D(-2, 0, 0)), 1.0e-10);<a name="line.37"></a>
<span class="sourceLineNo">038</span>        SphericalCoordinates sc4 = new SphericalCoordinates(2.0, -piO2, piO2);<a name="line.38"></a>
<span class="sourceLineNo">039</span>        Assert.assertEquals(0, sc4.getCartesian().distance(new Vector3D(0, -2, 0)), 1.0e-10);<a name="line.39"></a>
<span class="sourceLineNo">040</span>        SphericalCoordinates sc5 = new SphericalCoordinates(2.0, 1.23456, 0);<a name="line.40"></a>
<span class="sourceLineNo">041</span>        Assert.assertEquals(0, sc5.getCartesian().distance(new Vector3D(0, 0, 2)), 1.0e-10);<a name="line.41"></a>
<span class="sourceLineNo">042</span>        SphericalCoordinates sc6 = new SphericalCoordinates(2.0, 6.54321, FastMath.PI);<a name="line.42"></a>
<span class="sourceLineNo">043</span>        Assert.assertEquals(0, sc6.getCartesian().distance(new Vector3D(0, 0, -2)), 1.0e-10);<a name="line.43"></a>
<span class="sourceLineNo">044</span>    }<a name="line.44"></a>
<span class="sourceLineNo">045</span><a name="line.45"></a>
<span class="sourceLineNo">046</span>    @Test<a name="line.46"></a>
<span class="sourceLineNo">047</span>    public void testCoordinatesCtoS() throws DimensionMismatchException {<a name="line.47"></a>
<span class="sourceLineNo">048</span>        double piO2 = 0.5 * FastMath.PI;<a name="line.48"></a>
<span class="sourceLineNo">049</span>        SphericalCoordinates sc1 = new SphericalCoordinates(new Vector3D(2, 0, 0));<a name="line.49"></a>
<span class="sourceLineNo">050</span>        Assert.assertEquals(2,           sc1.getR(),     1.0e-10);<a name="line.50"></a>
<span class="sourceLineNo">051</span>        Assert.assertEquals(0,           sc1.getTheta(), 1.0e-10);<a name="line.51"></a>
<span class="sourceLineNo">052</span>        Assert.assertEquals(piO2,        sc1.getPhi(),   1.0e-10);<a name="line.52"></a>
<span class="sourceLineNo">053</span>        SphericalCoordinates sc2 = new SphericalCoordinates(new Vector3D(0, 2, 0));<a name="line.53"></a>
<span class="sourceLineNo">054</span>        Assert.assertEquals(2,           sc2.getR(),     1.0e-10);<a name="line.54"></a>
<span class="sourceLineNo">055</span>        Assert.assertEquals(piO2,        sc2.getTheta(), 1.0e-10);<a name="line.55"></a>
<span class="sourceLineNo">056</span>        Assert.assertEquals(piO2,        sc2.getPhi(),   1.0e-10);<a name="line.56"></a>
<span class="sourceLineNo">057</span>        SphericalCoordinates sc3 = new SphericalCoordinates(new Vector3D(-2, 0, 0));<a name="line.57"></a>
<span class="sourceLineNo">058</span>        Assert.assertEquals(2,           sc3.getR(),     1.0e-10);<a name="line.58"></a>
<span class="sourceLineNo">059</span>        Assert.assertEquals(FastMath.PI, sc3.getTheta(), 1.0e-10);<a name="line.59"></a>
<span class="sourceLineNo">060</span>        Assert.assertEquals(piO2,        sc3.getPhi(),   1.0e-10);<a name="line.60"></a>
<span class="sourceLineNo">061</span>        SphericalCoordinates sc4 = new SphericalCoordinates(new Vector3D(0, -2, 0));<a name="line.61"></a>
<span class="sourceLineNo">062</span>        Assert.assertEquals(2,           sc4.getR(),     1.0e-10);<a name="line.62"></a>
<span class="sourceLineNo">063</span>        Assert.assertEquals(-piO2,       sc4.getTheta(), 1.0e-10);<a name="line.63"></a>
<span class="sourceLineNo">064</span>        Assert.assertEquals(piO2,        sc4.getPhi(),   1.0e-10);<a name="line.64"></a>
<span class="sourceLineNo">065</span>        SphericalCoordinates sc5 = new SphericalCoordinates(new Vector3D(0, 0, 2));<a name="line.65"></a>
<span class="sourceLineNo">066</span>        Assert.assertEquals(2,           sc5.getR(),     1.0e-10);<a name="line.66"></a>
<span class="sourceLineNo">067</span>        //  don't check theta on poles, as it is singular<a name="line.67"></a>
<span class="sourceLineNo">068</span>        Assert.assertEquals(0,           sc5.getPhi(),   1.0e-10);<a name="line.68"></a>
<span class="sourceLineNo">069</span>        SphericalCoordinates sc6 = new SphericalCoordinates(new Vector3D(0, 0, -2));<a name="line.69"></a>
<span class="sourceLineNo">070</span>        Assert.assertEquals(2,           sc6.getR(),     1.0e-10);<a name="line.70"></a>
<span class="sourceLineNo">071</span>        //  don't check theta on poles, as it is singular<a name="line.71"></a>
<span class="sourceLineNo">072</span>        Assert.assertEquals(FastMath.PI, sc6.getPhi(),   1.0e-10);<a name="line.72"></a>
<span class="sourceLineNo">073</span>    }<a name="line.73"></a>
<span class="sourceLineNo">074</span><a name="line.74"></a>
<span class="sourceLineNo">075</span>    @Test<a name="line.75"></a>
<span class="sourceLineNo">076</span>    public void testGradient() {<a name="line.76"></a>
<span class="sourceLineNo">077</span>        for (double r = 0.2; r &lt; 10; r += 0.5) {<a name="line.77"></a>
<span class="sourceLineNo">078</span>            for (double theta = 0; theta &lt; 2 * FastMath.PI; theta += 0.1) {<a name="line.78"></a>
<span class="sourceLineNo">079</span>                for (double phi = 0.1; phi &lt; FastMath.PI; phi += 0.1) {<a name="line.79"></a>
<span class="sourceLineNo">080</span>                    SphericalCoordinates sc = new SphericalCoordinates(r, theta, phi);<a name="line.80"></a>
<span class="sourceLineNo">081</span><a name="line.81"></a>
<span class="sourceLineNo">082</span>                    DerivativeStructure svalue = valueSpherical(new DerivativeStructure(3, 1, 0, r),<a name="line.82"></a>
<span class="sourceLineNo">083</span>                                                                new DerivativeStructure(3, 1, 1, theta),<a name="line.83"></a>
<span class="sourceLineNo">084</span>                                                                new DerivativeStructure(3, 1, 2, phi));<a name="line.84"></a>
<span class="sourceLineNo">085</span>                    double[] sGradient = new double[] {<a name="line.85"></a>
<span class="sourceLineNo">086</span>                        svalue.getPartialDerivative(1, 0, 0),<a name="line.86"></a>
<span class="sourceLineNo">087</span>                        svalue.getPartialDerivative(0, 1, 0),<a name="line.87"></a>
<span class="sourceLineNo">088</span>                        svalue.getPartialDerivative(0, 0, 1),<a name="line.88"></a>
<span class="sourceLineNo">089</span>                    };<a name="line.89"></a>
<span class="sourceLineNo">090</span><a name="line.90"></a>
<span class="sourceLineNo">091</span>                    DerivativeStructure cvalue = valueCartesian(new DerivativeStructure(3, 1, 0, sc.getCartesian().getX()),<a name="line.91"></a>
<span class="sourceLineNo">092</span>                                                                new DerivativeStructure(3, 1, 1, sc.getCartesian().getY()),<a name="line.92"></a>
<span class="sourceLineNo">093</span>                                                                new DerivativeStructure(3, 1, 2, sc.getCartesian().getZ()));<a name="line.93"></a>
<span class="sourceLineNo">094</span>                    Vector3D refCGradient = new Vector3D(cvalue.getPartialDerivative(1, 0, 0),<a name="line.94"></a>
<span class="sourceLineNo">095</span>                                                         cvalue.getPartialDerivative(0, 1, 0),<a name="line.95"></a>
<span class="sourceLineNo">096</span>                                                         cvalue.getPartialDerivative(0, 0, 1));<a name="line.96"></a>
<span class="sourceLineNo">097</span><a name="line.97"></a>
<span class="sourceLineNo">098</span>                    Vector3D testCGradient = new Vector3D(sc.toCartesianGradient(sGradient));<a name="line.98"></a>
<span class="sourceLineNo">099</span>                    <a name="line.99"></a>
<span class="sourceLineNo">100</span>                    Assert.assertEquals(0, testCGradient.distance(refCGradient) / refCGradient.getNorm(), 5.0e-14);<a name="line.100"></a>
<span class="sourceLineNo">101</span><a name="line.101"></a>
<span class="sourceLineNo">102</span>                }<a name="line.102"></a>
<span class="sourceLineNo">103</span>            }<a name="line.103"></a>
<span class="sourceLineNo">104</span>        }<a name="line.104"></a>
<span class="sourceLineNo">105</span>    }<a name="line.105"></a>
<span class="sourceLineNo">106</span><a name="line.106"></a>
<span class="sourceLineNo">107</span>    @Test<a name="line.107"></a>
<span class="sourceLineNo">108</span>    public void testHessian() {<a name="line.108"></a>
<span class="sourceLineNo">109</span>        for (double r = 0.2; r &lt; 10; r += 0.5) {<a name="line.109"></a>
<span class="sourceLineNo">110</span>            for (double theta = 0; theta &lt; 2 * FastMath.PI; theta += 0.2) {<a name="line.110"></a>
<span class="sourceLineNo">111</span>                for (double phi = 0.1; phi &lt; FastMath.PI; phi += 0.2) {<a name="line.111"></a>
<span class="sourceLineNo">112</span>                    SphericalCoordinates sc = new SphericalCoordinates(r, theta, phi);<a name="line.112"></a>
<span class="sourceLineNo">113</span><a name="line.113"></a>
<span class="sourceLineNo">114</span>                    DerivativeStructure svalue = valueSpherical(new DerivativeStructure(3, 2, 0, r),<a name="line.114"></a>
<span class="sourceLineNo">115</span>                                                                new DerivativeStructure(3, 2, 1, theta),<a name="line.115"></a>
<span class="sourceLineNo">116</span>                                                                new DerivativeStructure(3, 2, 2, phi));<a name="line.116"></a>
<span class="sourceLineNo">117</span>                    double[] sGradient = new double[] {<a name="line.117"></a>
<span class="sourceLineNo">118</span>                        svalue.getPartialDerivative(1, 0, 0),<a name="line.118"></a>
<span class="sourceLineNo">119</span>                        svalue.getPartialDerivative(0, 1, 0),<a name="line.119"></a>
<span class="sourceLineNo">120</span>                        svalue.getPartialDerivative(0, 0, 1),<a name="line.120"></a>
<span class="sourceLineNo">121</span>                    };<a name="line.121"></a>
<span class="sourceLineNo">122</span>                    double[][] sHessian = new double[3][3];<a name="line.122"></a>
<span class="sourceLineNo">123</span>                    sHessian[0][0] = svalue.getPartialDerivative(2, 0, 0); // d2F/dR2<a name="line.123"></a>
<span class="sourceLineNo">124</span>                    sHessian[1][0] = svalue.getPartialDerivative(1, 1, 0); // d2F/dRdTheta<a name="line.124"></a>
<span class="sourceLineNo">125</span>                    sHessian[2][0] = svalue.getPartialDerivative(1, 0, 1); // d2F/dRdPhi<a name="line.125"></a>
<span class="sourceLineNo">126</span>                    sHessian[0][1] = Double.NaN; // just to check upper-right part is not used<a name="line.126"></a>
<span class="sourceLineNo">127</span>                    sHessian[1][1] = svalue.getPartialDerivative(0, 2, 0); // d2F/dTheta2<a name="line.127"></a>
<span class="sourceLineNo">128</span>                    sHessian[2][1] = svalue.getPartialDerivative(0, 1, 1); // d2F/dThetadPhi<a name="line.128"></a>
<span class="sourceLineNo">129</span>                    sHessian[0][2] = Double.NaN; // just to check upper-right part is not used<a name="line.129"></a>
<span class="sourceLineNo">130</span>                    sHessian[1][2] = Double.NaN; // just to check upper-right part is not used<a name="line.130"></a>
<span class="sourceLineNo">131</span>                    sHessian[2][2] = svalue.getPartialDerivative(0, 0, 2); // d2F/dPhi2<a name="line.131"></a>
<span class="sourceLineNo">132</span><a name="line.132"></a>
<span class="sourceLineNo">133</span>                    DerivativeStructure cvalue = valueCartesian(new DerivativeStructure(3, 2, 0, sc.getCartesian().getX()),<a name="line.133"></a>
<span class="sourceLineNo">134</span>                                                                new DerivativeStructure(3, 2, 1, sc.getCartesian().getY()),<a name="line.134"></a>
<span class="sourceLineNo">135</span>                                                                new DerivativeStructure(3, 2, 2, sc.getCartesian().getZ()));<a name="line.135"></a>
<span class="sourceLineNo">136</span>                    double[][] refCHessian = new double[3][3];<a name="line.136"></a>
<span class="sourceLineNo">137</span>                    refCHessian[0][0] = cvalue.getPartialDerivative(2, 0, 0); // d2F/dX2<a name="line.137"></a>
<span class="sourceLineNo">138</span>                    refCHessian[1][0] = cvalue.getPartialDerivative(1, 1, 0); // d2F/dXdY<a name="line.138"></a>
<span class="sourceLineNo">139</span>                    refCHessian[2][0] = cvalue.getPartialDerivative(1, 0, 1); // d2F/dXdZ<a name="line.139"></a>
<span class="sourceLineNo">140</span>                    refCHessian[0][1] = refCHessian[1][0];<a name="line.140"></a>
<span class="sourceLineNo">141</span>                    refCHessian[1][1] = cvalue.getPartialDerivative(0, 2, 0); // d2F/dY2<a name="line.141"></a>
<span class="sourceLineNo">142</span>                    refCHessian[2][1] = cvalue.getPartialDerivative(0, 1, 1); // d2F/dYdZ<a name="line.142"></a>
<span class="sourceLineNo">143</span>                    refCHessian[0][2] = refCHessian[2][0];<a name="line.143"></a>
<span class="sourceLineNo">144</span>                    refCHessian[1][2] = refCHessian[2][1];<a name="line.144"></a>
<span class="sourceLineNo">145</span>                    refCHessian[2][2] = cvalue.getPartialDerivative(0, 0, 2); // d2F/dZ2<a name="line.145"></a>
<span class="sourceLineNo">146</span>                    double norm =  0;<a name="line.146"></a>
<span class="sourceLineNo">147</span>                    for (int i = 0; i &lt; 3; ++i) {<a name="line.147"></a>
<span class="sourceLineNo">148</span>                        for (int j = 0; j &lt; 3; ++j) {<a name="line.148"></a>
<span class="sourceLineNo">149</span>                            norm = FastMath.max(norm, FastMath.abs(refCHessian[i][j]));<a name="line.149"></a>
<span class="sourceLineNo">150</span>                        }<a name="line.150"></a>
<span class="sourceLineNo">151</span>                    }<a name="line.151"></a>
<span class="sourceLineNo">152</span><a name="line.152"></a>
<span class="sourceLineNo">153</span>                    double[][] testCHessian = sc.toCartesianHessian(sHessian, sGradient);<a name="line.153"></a>
<span class="sourceLineNo">154</span>                    for (int i = 0; i &lt; 3; ++i) {<a name="line.154"></a>
<span class="sourceLineNo">155</span>                        for (int j = 0; j &lt; 3; ++j) {<a name="line.155"></a>
<span class="sourceLineNo">156</span>                            Assert.assertEquals("" + FastMath.abs((refCHessian[i][j] - testCHessian[i][j]) / norm),<a name="line.156"></a>
<span class="sourceLineNo">157</span>                                                refCHessian[i][j], testCHessian[i][j], 1.0e-14 * norm);<a name="line.157"></a>
<span class="sourceLineNo">158</span>                        }<a name="line.158"></a>
<span class="sourceLineNo">159</span>                    }<a name="line.159"></a>
<span class="sourceLineNo">160</span><a name="line.160"></a>
<span class="sourceLineNo">161</span>                }<a name="line.161"></a>
<span class="sourceLineNo">162</span>            }<a name="line.162"></a>
<span class="sourceLineNo">163</span>        }<a name="line.163"></a>
<span class="sourceLineNo">164</span>    }<a name="line.164"></a>
<span class="sourceLineNo">165</span><a name="line.165"></a>
<span class="sourceLineNo">166</span>    public DerivativeStructure valueCartesian(DerivativeStructure x, DerivativeStructure y, DerivativeStructure z) {<a name="line.166"></a>
<span class="sourceLineNo">167</span>        return x.divide(y.multiply(5).add(10)).multiply(z.pow(3));<a name="line.167"></a>
<span class="sourceLineNo">168</span>    }<a name="line.168"></a>
<span class="sourceLineNo">169</span><a name="line.169"></a>
<span class="sourceLineNo">170</span>    public DerivativeStructure valueSpherical(DerivativeStructure r, DerivativeStructure theta, DerivativeStructure phi) {<a name="line.170"></a>
<span class="sourceLineNo">171</span>        return valueCartesian(r.multiply(theta.cos()).multiply(phi.sin()),<a name="line.171"></a>
<span class="sourceLineNo">172</span>                              r.multiply(theta.sin()).multiply(phi.sin()),<a name="line.172"></a>
<span class="sourceLineNo">173</span>                              r.multiply(phi.cos()));<a name="line.173"></a>
<span class="sourceLineNo">174</span>    }<a name="line.174"></a>
<span class="sourceLineNo">175</span><a name="line.175"></a>
<span class="sourceLineNo">176</span>    @Test<a name="line.176"></a>
<span class="sourceLineNo">177</span>    public void testSerialization() {<a name="line.177"></a>
<span class="sourceLineNo">178</span>        SphericalCoordinates a = new SphericalCoordinates(3, 2, 1);<a name="line.178"></a>
<span class="sourceLineNo">179</span>        SphericalCoordinates b = (SphericalCoordinates) TestUtils.serializeAndRecover(a);<a name="line.179"></a>
<span class="sourceLineNo">180</span>        Assert.assertEquals(0, a.getCartesian().distance(b.getCartesian()), 1.0e-10);<a name="line.180"></a>
<span class="sourceLineNo">181</span>        Assert.assertEquals(a.getR(),     b.getR(),     1.0e-10);<a name="line.181"></a>
<span class="sourceLineNo">182</span>        Assert.assertEquals(a.getTheta(), b.getTheta(), 1.0e-10);<a name="line.182"></a>
<span class="sourceLineNo">183</span>        Assert.assertEquals(a.getPhi(),   b.getPhi(),   1.0e-10);<a name="line.183"></a>
<span class="sourceLineNo">184</span>    }<a name="line.184"></a>
<span class="sourceLineNo">185</span><a name="line.185"></a>
<span class="sourceLineNo">186</span>}<a name="line.186"></a>




























































</pre>
</div>
</body>
</html>
