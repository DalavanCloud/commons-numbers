<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Combinations xref</title>
<link type="text/css" rel="stylesheet" href="../../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../apidocs/org/apache/commons/math3/util/Combinations.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Licensed to the Apache Software Foundation (ASF) under one or more</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> * contributor license agreements.  See the NOTICE file distributed with</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * this work for additional information regarding copyright ownership.</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * The ASF licenses this file to You under the Apache License, Version 2.0</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * (the "License"); you may not use this file except in compliance with</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> * the License.  You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *      <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">package</strong> org.apache.commons.math3.util;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <strong class="jxr_keyword">import</strong> java.util.Iterator;
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> java.util.Comparator;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> java.util.Arrays;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> java.util.NoSuchElementException;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <strong class="jxr_keyword">import</strong> java.io.Serializable;
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.MathInternalError;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.DimensionMismatchException;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.OutOfRangeException;
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <em class="jxr_javadoccomment"> * Utility to create &lt;a href="<a href="http://en.wikipedia.org/wiki/Combination" target="alexandria_uri">http://en.wikipedia.org/wiki/Combination</a>"&gt;</em>
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <em class="jxr_javadoccomment"> * combinations&lt;/a&gt; {@code (n, k)} of {@code k} elements in a set of</em>
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <em class="jxr_javadoccomment"> * {@code n} elements.</em>
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <em class="jxr_javadoccomment"> * @since 3.3</em>
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../org/apache/commons/math3/util/Combinations.html">Combinations</a> <strong class="jxr_keyword">implements</strong> Iterable&lt;<strong class="jxr_keyword">int</strong>[]&gt; {
<a class="jxr_linenumber" name="L36" href="#L36">36</a>      <em class="jxr_javadoccomment">/** Size of the set from which combinations are drawn. */</em>
<a class="jxr_linenumber" name="L37" href="#L37">37</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> n;
<a class="jxr_linenumber" name="L38" href="#L38">38</a>      <em class="jxr_javadoccomment">/** Number of elements in each combination. */</em>
<a class="jxr_linenumber" name="L39" href="#L39">39</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> k;
<a class="jxr_linenumber" name="L40" href="#L40">40</a>      <em class="jxr_javadoccomment">/** Iteration order. */</em>
<a class="jxr_linenumber" name="L41" href="#L41">41</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> <a href="../../../../../org/apache/commons/math3/util/Combinations.html">IterationOrder</a> iterationOrder;
<a class="jxr_linenumber" name="L42" href="#L42">42</a>  
<a class="jxr_linenumber" name="L43" href="#L43">43</a>      <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L44" href="#L44">44</a>  <em class="jxr_javadoccomment">     * Describes the type of iteration performed by the</em>
<a class="jxr_linenumber" name="L45" href="#L45">45</a>  <em class="jxr_javadoccomment">     * {@link #iterator() iterator}.</em>
<a class="jxr_linenumber" name="L46" href="#L46">46</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L47" href="#L47">47</a>      <strong class="jxr_keyword">private</strong> enum <a href="../../../../../org/apache/commons/math3/util/Combinations.html">IterationOrder</a> {
<a class="jxr_linenumber" name="L48" href="#L48">48</a>          <em class="jxr_javadoccomment">/** Lexicographic order. */</em>
<a class="jxr_linenumber" name="L49" href="#L49">49</a>          LEXICOGRAPHIC
<a class="jxr_linenumber" name="L50" href="#L50">50</a>      }
<a class="jxr_linenumber" name="L51" href="#L51">51</a>  
<a class="jxr_linenumber" name="L52" href="#L52">52</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L53" href="#L53">53</a>  <em class="jxr_javadoccomment">     * Creates an instance whose range is the k-element subsets of</em>
<a class="jxr_linenumber" name="L54" href="#L54">54</a>  <em class="jxr_javadoccomment">     * {0, ..., n - 1} represented as {@code int[]} arrays.</em>
<a class="jxr_linenumber" name="L55" href="#L55">55</a>  <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L56" href="#L56">56</a>  <em class="jxr_javadoccomment">     * The iteration order is lexicographic: the arrays returned by the</em>
<a class="jxr_linenumber" name="L57" href="#L57">57</a>  <em class="jxr_javadoccomment">     * {@link #iterator() iterator} are sorted in descending order and</em>
<a class="jxr_linenumber" name="L58" href="#L58">58</a>  <em class="jxr_javadoccomment">     * they are visited in lexicographic order with significance from</em>
<a class="jxr_linenumber" name="L59" href="#L59">59</a>  <em class="jxr_javadoccomment">     * right to left.</em>
<a class="jxr_linenumber" name="L60" href="#L60">60</a>  <em class="jxr_javadoccomment">     * For example, {@code new Combinations(4, 2).iterator()} returns</em>
<a class="jxr_linenumber" name="L61" href="#L61">61</a>  <em class="jxr_javadoccomment">     * an iterator that will generate the following sequence of arrays</em>
<a class="jxr_linenumber" name="L62" href="#L62">62</a>  <em class="jxr_javadoccomment">     * on successive calls to</em>
<a class="jxr_linenumber" name="L63" href="#L63">63</a>  <em class="jxr_javadoccomment">     * {@code next()}:&lt;br/&gt;</em>
<a class="jxr_linenumber" name="L64" href="#L64">64</a>  <em class="jxr_javadoccomment">     * {@code [0, 1], [0, 2], [1, 2], [0, 3], [1, 3], [2, 3]}</em>
<a class="jxr_linenumber" name="L65" href="#L65">65</a>  <em class="jxr_javadoccomment">     * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L66" href="#L66">66</a>  <em class="jxr_javadoccomment">     * If {@code k == 0} an iterator containing an empty array is returned;</em>
<a class="jxr_linenumber" name="L67" href="#L67">67</a>  <em class="jxr_javadoccomment">     * if {@code k == n} an iterator containing [0, ..., n - 1] is returned.</em>
<a class="jxr_linenumber" name="L68" href="#L68">68</a>  <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L69" href="#L69">69</a>  <em class="jxr_javadoccomment">     * @param n Size of the set from which subsets are selected.</em>
<a class="jxr_linenumber" name="L70" href="#L70">70</a>  <em class="jxr_javadoccomment">     * @param k Size of the subsets to be enumerated.</em>
<a class="jxr_linenumber" name="L71" href="#L71">71</a>  <em class="jxr_javadoccomment">     * @throws org.apache.commons.math3.exception.NotPositiveException if {@code n &lt; 0}.</em>
<a class="jxr_linenumber" name="L72" href="#L72">72</a>  <em class="jxr_javadoccomment">     * @throws org.apache.commons.math3.exception.NumberIsTooLargeException if {@code k &gt; n}.</em>
<a class="jxr_linenumber" name="L73" href="#L73">73</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L74" href="#L74">74</a>      <strong class="jxr_keyword">public</strong> <a href="../../../../../org/apache/commons/math3/util/Combinations.html">Combinations</a>(<strong class="jxr_keyword">int</strong> n,
<a class="jxr_linenumber" name="L75" href="#L75">75</a>                          <strong class="jxr_keyword">int</strong> k) {
<a class="jxr_linenumber" name="L76" href="#L76">76</a>          <strong class="jxr_keyword">this</strong>(n, k, IterationOrder.LEXICOGRAPHIC);
<a class="jxr_linenumber" name="L77" href="#L77">77</a>      }
<a class="jxr_linenumber" name="L78" href="#L78">78</a>  
<a class="jxr_linenumber" name="L79" href="#L79">79</a>      <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L80" href="#L80">80</a>  <em class="jxr_javadoccomment">     * Creates an instance whose range is the k-element subsets of</em>
<a class="jxr_linenumber" name="L81" href="#L81">81</a>  <em class="jxr_javadoccomment">     * {0, ..., n - 1} represented as {@code int[]} arrays.</em>
<a class="jxr_linenumber" name="L82" href="#L82">82</a>  <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L83" href="#L83">83</a>  <em class="jxr_javadoccomment">     * If the {@code iterationOrder} argument is set to</em>
<a class="jxr_linenumber" name="L84" href="#L84">84</a>  <em class="jxr_javadoccomment">     * {@link IterationOrder#LEXICOGRAPHIC}, the arrays returned by the</em>
<a class="jxr_linenumber" name="L85" href="#L85">85</a>  <em class="jxr_javadoccomment">     * {@link #iterator() iterator} are sorted in descending order and</em>
<a class="jxr_linenumber" name="L86" href="#L86">86</a>  <em class="jxr_javadoccomment">     * they are visited in lexicographic order with significance from</em>
<a class="jxr_linenumber" name="L87" href="#L87">87</a>  <em class="jxr_javadoccomment">     * right to left.</em>
<a class="jxr_linenumber" name="L88" href="#L88">88</a>  <em class="jxr_javadoccomment">     * For example, {@code new Combinations(4, 2).iterator()} returns</em>
<a class="jxr_linenumber" name="L89" href="#L89">89</a>  <em class="jxr_javadoccomment">     * an iterator that will generate the following sequence of arrays</em>
<a class="jxr_linenumber" name="L90" href="#L90">90</a>  <em class="jxr_javadoccomment">     * on successive calls to</em>
<a class="jxr_linenumber" name="L91" href="#L91">91</a>  <em class="jxr_javadoccomment">     * {@code next()}:&lt;br/&gt;</em>
<a class="jxr_linenumber" name="L92" href="#L92">92</a>  <em class="jxr_javadoccomment">     * {@code [0, 1], [0, 2], [1, 2], [0, 3], [1, 3], [2, 3]}</em>
<a class="jxr_linenumber" name="L93" href="#L93">93</a>  <em class="jxr_javadoccomment">     * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L94" href="#L94">94</a>  <em class="jxr_javadoccomment">     * If {@code k == 0} an iterator containing an empty array is returned;</em>
<a class="jxr_linenumber" name="L95" href="#L95">95</a>  <em class="jxr_javadoccomment">     * if {@code k == n} an iterator containing [0, ..., n - 1] is returned.</em>
<a class="jxr_linenumber" name="L96" href="#L96">96</a>  <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L97" href="#L97">97</a>  <em class="jxr_javadoccomment">     * @param n Size of the set from which subsets are selected.</em>
<a class="jxr_linenumber" name="L98" href="#L98">98</a>  <em class="jxr_javadoccomment">     * @param k Size of the subsets to be enumerated.</em>
<a class="jxr_linenumber" name="L99" href="#L99">99</a>  <em class="jxr_javadoccomment">     * @param iterationOrder Specifies the {@link #iterator() iteration order}.</em>
<a class="jxr_linenumber" name="L100" href="#L100">100</a> <em class="jxr_javadoccomment">     * @throws org.apache.commons.math3.exception.NotPositiveException if {@code n &lt; 0}.</em>
<a class="jxr_linenumber" name="L101" href="#L101">101</a> <em class="jxr_javadoccomment">     * @throws org.apache.commons.math3.exception.NumberIsTooLargeException if {@code k &gt; n}.</em>
<a class="jxr_linenumber" name="L102" href="#L102">102</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L103" href="#L103">103</a>     <strong class="jxr_keyword">private</strong> <a href="../../../../../org/apache/commons/math3/util/Combinations.html">Combinations</a>(<strong class="jxr_keyword">int</strong> n,
<a class="jxr_linenumber" name="L104" href="#L104">104</a>                          <strong class="jxr_keyword">int</strong> k,
<a class="jxr_linenumber" name="L105" href="#L105">105</a>                          <a href="../../../../../org/apache/commons/math3/util/Combinations.html">IterationOrder</a> iterationOrder) {
<a class="jxr_linenumber" name="L106" href="#L106">106</a>         CombinatoricsUtils.checkBinomial(n, k);
<a class="jxr_linenumber" name="L107" href="#L107">107</a>         <strong class="jxr_keyword">this</strong>.n = n;
<a class="jxr_linenumber" name="L108" href="#L108">108</a>         <strong class="jxr_keyword">this</strong>.k = k;
<a class="jxr_linenumber" name="L109" href="#L109">109</a>         <strong class="jxr_keyword">this</strong>.iterationOrder = iterationOrder;
<a class="jxr_linenumber" name="L110" href="#L110">110</a>     }
<a class="jxr_linenumber" name="L111" href="#L111">111</a> 
<a class="jxr_linenumber" name="L112" href="#L112">112</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L113" href="#L113">113</a> <em class="jxr_javadoccomment">     * Gets the size of the set from which combinations are drawn.</em>
<a class="jxr_linenumber" name="L114" href="#L114">114</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L115" href="#L115">115</a> <em class="jxr_javadoccomment">     * @return the size of the universe.</em>
<a class="jxr_linenumber" name="L116" href="#L116">116</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L117" href="#L117">117</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">int</strong> getN() {
<a class="jxr_linenumber" name="L118" href="#L118">118</a>         <strong class="jxr_keyword">return</strong> n;
<a class="jxr_linenumber" name="L119" href="#L119">119</a>     }
<a class="jxr_linenumber" name="L120" href="#L120">120</a> 
<a class="jxr_linenumber" name="L121" href="#L121">121</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L122" href="#L122">122</a> <em class="jxr_javadoccomment">     * Gets the number of elements in each combination.</em>
<a class="jxr_linenumber" name="L123" href="#L123">123</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L124" href="#L124">124</a> <em class="jxr_javadoccomment">     * @return the size of the subsets to be enumerated.</em>
<a class="jxr_linenumber" name="L125" href="#L125">125</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L126" href="#L126">126</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">int</strong> getK() {
<a class="jxr_linenumber" name="L127" href="#L127">127</a>         <strong class="jxr_keyword">return</strong> k;
<a class="jxr_linenumber" name="L128" href="#L128">128</a>     }
<a class="jxr_linenumber" name="L129" href="#L129">129</a> 
<a class="jxr_linenumber" name="L130" href="#L130">130</a>     <em class="jxr_javadoccomment">/** {@inheritDoc} */</em>
<a class="jxr_linenumber" name="L131" href="#L131">131</a>     <strong class="jxr_keyword">public</strong> Iterator&lt;<strong class="jxr_keyword">int</strong>[]&gt; iterator() {
<a class="jxr_linenumber" name="L132" href="#L132">132</a>         <strong class="jxr_keyword">if</strong> (k == 0 ||
<a class="jxr_linenumber" name="L133" href="#L133">133</a>             k == n) {
<a class="jxr_linenumber" name="L134" href="#L134">134</a>             <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../org/apache/commons/math3/util/Combinations.html">SingletonIterator</a>(MathArrays.natural(k));
<a class="jxr_linenumber" name="L135" href="#L135">135</a>         }
<a class="jxr_linenumber" name="L136" href="#L136">136</a> 
<a class="jxr_linenumber" name="L137" href="#L137">137</a>         <strong class="jxr_keyword">switch</strong> (iterationOrder) {
<a class="jxr_linenumber" name="L138" href="#L138">138</a>         <strong class="jxr_keyword">case</strong> LEXICOGRAPHIC:
<a class="jxr_linenumber" name="L139" href="#L139">139</a>             <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../org/apache/commons/math3/util/Combinations.html">LexicographicIterator</a>(n, k);
<a class="jxr_linenumber" name="L140" href="#L140">140</a>         <strong class="jxr_keyword">default</strong>:
<a class="jxr_linenumber" name="L141" href="#L141">141</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../org/apache/commons/math3/exception/MathInternalError.html">MathInternalError</a>(); <em class="jxr_comment">// Should never happen.</em>
<a class="jxr_linenumber" name="L142" href="#L142">142</a>         }
<a class="jxr_linenumber" name="L143" href="#L143">143</a>     }
<a class="jxr_linenumber" name="L144" href="#L144">144</a> 
<a class="jxr_linenumber" name="L145" href="#L145">145</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L146" href="#L146">146</a> <em class="jxr_javadoccomment">     * Defines a lexicographic ordering of combinations.</em>
<a class="jxr_linenumber" name="L147" href="#L147">147</a> <em class="jxr_javadoccomment">     * The returned comparator allows to compare any two combinations</em>
<a class="jxr_linenumber" name="L148" href="#L148">148</a> <em class="jxr_javadoccomment">     * that can be produced by this instance's {@link #iterator() iterator}.</em>
<a class="jxr_linenumber" name="L149" href="#L149">149</a> <em class="jxr_javadoccomment">     * Its {@code compare(int[],int[])} method will throw exceptions if</em>
<a class="jxr_linenumber" name="L150" href="#L150">150</a> <em class="jxr_javadoccomment">     * passed combinations that are inconsistent with this instance:</em>
<a class="jxr_linenumber" name="L151" href="#L151">151</a> <em class="jxr_javadoccomment">     * &lt;ul&gt;</em>
<a class="jxr_linenumber" name="L152" href="#L152">152</a> <em class="jxr_javadoccomment">     *  &lt;li&gt;{@code DimensionMismatchException} if the array lengths are not</em>
<a class="jxr_linenumber" name="L153" href="#L153">153</a> <em class="jxr_javadoccomment">     *      equal to {@code k},&lt;/li&gt;</em>
<a class="jxr_linenumber" name="L154" href="#L154">154</a> <em class="jxr_javadoccomment">     *  &lt;li&gt;{@code OutOfRangeException} if an element of the array is not</em>
<a class="jxr_linenumber" name="L155" href="#L155">155</a> <em class="jxr_javadoccomment">     *      within the interval [0, {@code n}).&lt;/li&gt;</em>
<a class="jxr_linenumber" name="L156" href="#L156">156</a> <em class="jxr_javadoccomment">     * &lt;/ul&gt;</em>
<a class="jxr_linenumber" name="L157" href="#L157">157</a> <em class="jxr_javadoccomment">     * @return a lexicographic comparator.</em>
<a class="jxr_linenumber" name="L158" href="#L158">158</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L159" href="#L159">159</a>     <strong class="jxr_keyword">public</strong> Comparator&lt;<strong class="jxr_keyword">int</strong>[]&gt; comparator() {
<a class="jxr_linenumber" name="L160" href="#L160">160</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../org/apache/commons/math3/util/Combinations.html">LexicographicComparator</a>(n, k);
<a class="jxr_linenumber" name="L161" href="#L161">161</a>     }
<a class="jxr_linenumber" name="L162" href="#L162">162</a> 
<a class="jxr_linenumber" name="L163" href="#L163">163</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L164" href="#L164">164</a> <em class="jxr_javadoccomment">     * Lexicographic combinations iterator.</em>
<a class="jxr_linenumber" name="L165" href="#L165">165</a> <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L166" href="#L166">166</a> <em class="jxr_javadoccomment">     * Implementation follows Algorithm T in &lt;i&gt;The Art of Computer Programming&lt;/i&gt;</em>
<a class="jxr_linenumber" name="L167" href="#L167">167</a> <em class="jxr_javadoccomment">     * Internet Draft (PRE-FASCICLE 3A), "A Draft of Section 7.2.1.3 Generating All</em>
<a class="jxr_linenumber" name="L168" href="#L168">168</a> <em class="jxr_javadoccomment">     * Combinations&lt;/a&gt;, D. Knuth, 2004.&lt;/p&gt;</em>
<a class="jxr_linenumber" name="L169" href="#L169">169</a> <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L170" href="#L170">170</a> <em class="jxr_javadoccomment">     * The degenerate cases {@code k == 0} and {@code k == n} are NOT handled by this</em>
<a class="jxr_linenumber" name="L171" href="#L171">171</a> <em class="jxr_javadoccomment">     * implementation.  If constructor arguments satisfy {@code k == 0}</em>
<a class="jxr_linenumber" name="L172" href="#L172">172</a> <em class="jxr_javadoccomment">     * or {@code k &gt;= n}, no exception is generated, but the iterator is empty.</em>
<a class="jxr_linenumber" name="L173" href="#L173">173</a> <em class="jxr_javadoccomment">     * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L174" href="#L174">174</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L175" href="#L175">175</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L176" href="#L176">176</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../org/apache/commons/math3/util/Combinations.html">LexicographicIterator</a> <strong class="jxr_keyword">implements</strong> Iterator&lt;<strong class="jxr_keyword">int</strong>[]&gt; {
<a class="jxr_linenumber" name="L177" href="#L177">177</a>         <em class="jxr_javadoccomment">/** Size of subsets returned by the iterator */</em>
<a class="jxr_linenumber" name="L178" href="#L178">178</a>         <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> k;
<a class="jxr_linenumber" name="L179" href="#L179">179</a> 
<a class="jxr_linenumber" name="L180" href="#L180">180</a>         <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L181" href="#L181">181</a> <em class="jxr_javadoccomment">         * c[1], ..., c[k] stores the next combination; c[k + 1], c[k + 2] are</em>
<a class="jxr_linenumber" name="L182" href="#L182">182</a> <em class="jxr_javadoccomment">         * sentinels.</em>
<a class="jxr_linenumber" name="L183" href="#L183">183</a> <em class="jxr_javadoccomment">         * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L184" href="#L184">184</a> <em class="jxr_javadoccomment">         * Note that c[0] is "wasted" but this makes it a little easier to</em>
<a class="jxr_linenumber" name="L185" href="#L185">185</a> <em class="jxr_javadoccomment">         * follow the code.</em>
<a class="jxr_linenumber" name="L186" href="#L186">186</a> <em class="jxr_javadoccomment">         * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L187" href="#L187">187</a> <em class="jxr_javadoccomment">         */</em>
<a class="jxr_linenumber" name="L188" href="#L188">188</a>         <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong>[] c;
<a class="jxr_linenumber" name="L189" href="#L189">189</a> 
<a class="jxr_linenumber" name="L190" href="#L190">190</a>         <em class="jxr_javadoccomment">/** Return value for {@link #hasNext()} */</em>
<a class="jxr_linenumber" name="L191" href="#L191">191</a>         <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">boolean</strong> more = <strong class="jxr_keyword">true</strong>;
<a class="jxr_linenumber" name="L192" href="#L192">192</a> 
<a class="jxr_linenumber" name="L193" href="#L193">193</a>         <em class="jxr_javadoccomment">/** Marker: smallest index such that c[j + 1] &gt; j */</em>
<a class="jxr_linenumber" name="L194" href="#L194">194</a>         <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">int</strong> j;
<a class="jxr_linenumber" name="L195" href="#L195">195</a> 
<a class="jxr_linenumber" name="L196" href="#L196">196</a>         <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L197" href="#L197">197</a> <em class="jxr_javadoccomment">         * Construct a CombinationIterator to enumerate k-sets from n.</em>
<a class="jxr_linenumber" name="L198" href="#L198">198</a> <em class="jxr_javadoccomment">         * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L199" href="#L199">199</a> <em class="jxr_javadoccomment">         * NOTE: If {@code k === 0} or {@code k &gt;= n}, the Iterator will be empty</em>
<a class="jxr_linenumber" name="L200" href="#L200">200</a> <em class="jxr_javadoccomment">         * (that is, {@link #hasNext()} will return {@code false} immediately.</em>
<a class="jxr_linenumber" name="L201" href="#L201">201</a> <em class="jxr_javadoccomment">         * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L202" href="#L202">202</a> <em class="jxr_javadoccomment">         *</em>
<a class="jxr_linenumber" name="L203" href="#L203">203</a> <em class="jxr_javadoccomment">         * @param n size of the set from which subsets are enumerated</em>
<a class="jxr_linenumber" name="L204" href="#L204">204</a> <em class="jxr_javadoccomment">         * @param k size of the subsets to enumerate</em>
<a class="jxr_linenumber" name="L205" href="#L205">205</a> <em class="jxr_javadoccomment">         */</em>
<a class="jxr_linenumber" name="L206" href="#L206">206</a>         <a href="../../../../../org/apache/commons/math3/util/Combinations.html">LexicographicIterator</a>(<strong class="jxr_keyword">int</strong> n, <strong class="jxr_keyword">int</strong> k) {
<a class="jxr_linenumber" name="L207" href="#L207">207</a>             <strong class="jxr_keyword">this</strong>.k = k;
<a class="jxr_linenumber" name="L208" href="#L208">208</a>             c = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">int</strong>[k + 3];
<a class="jxr_linenumber" name="L209" href="#L209">209</a>             <strong class="jxr_keyword">if</strong> (k == 0 || k &gt;= n) {
<a class="jxr_linenumber" name="L210" href="#L210">210</a>                 more = false;
<a class="jxr_linenumber" name="L211" href="#L211">211</a>                 <strong class="jxr_keyword">return</strong>;
<a class="jxr_linenumber" name="L212" href="#L212">212</a>             }
<a class="jxr_linenumber" name="L213" href="#L213">213</a>             <em class="jxr_comment">// Initialize c to start with lexicographically first k-set</em>
<a class="jxr_linenumber" name="L214" href="#L214">214</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 1; i &lt;= k; i++) {
<a class="jxr_linenumber" name="L215" href="#L215">215</a>                 c[i] = i - 1;
<a class="jxr_linenumber" name="L216" href="#L216">216</a>             }
<a class="jxr_linenumber" name="L217" href="#L217">217</a>             <em class="jxr_comment">// Initialize sentinels</em>
<a class="jxr_linenumber" name="L218" href="#L218">218</a>             c[k + 1] = n;
<a class="jxr_linenumber" name="L219" href="#L219">219</a>             c[k + 2] = 0;
<a class="jxr_linenumber" name="L220" href="#L220">220</a>             j = k; <em class="jxr_comment">// Set up invariant: j is smallest index such that c[j + 1] &gt; j</em>
<a class="jxr_linenumber" name="L221" href="#L221">221</a>         }
<a class="jxr_linenumber" name="L222" href="#L222">222</a> 
<a class="jxr_linenumber" name="L223" href="#L223">223</a>         <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L224" href="#L224">224</a> <em class="jxr_javadoccomment">         * {@inheritDoc}</em>
<a class="jxr_linenumber" name="L225" href="#L225">225</a> <em class="jxr_javadoccomment">         */</em>
<a class="jxr_linenumber" name="L226" href="#L226">226</a>         <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">boolean</strong> hasNext() {
<a class="jxr_linenumber" name="L227" href="#L227">227</a>             <strong class="jxr_keyword">return</strong> more;
<a class="jxr_linenumber" name="L228" href="#L228">228</a>         }
<a class="jxr_linenumber" name="L229" href="#L229">229</a> 
<a class="jxr_linenumber" name="L230" href="#L230">230</a>         <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L231" href="#L231">231</a> <em class="jxr_javadoccomment">         * {@inheritDoc}</em>
<a class="jxr_linenumber" name="L232" href="#L232">232</a> <em class="jxr_javadoccomment">         */</em>
<a class="jxr_linenumber" name="L233" href="#L233">233</a>         <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">int</strong>[] next() {
<a class="jxr_linenumber" name="L234" href="#L234">234</a>             <strong class="jxr_keyword">if</strong> (!more) {
<a class="jxr_linenumber" name="L235" href="#L235">235</a>                 <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> NoSuchElementException();
<a class="jxr_linenumber" name="L236" href="#L236">236</a>             }
<a class="jxr_linenumber" name="L237" href="#L237">237</a>             <em class="jxr_comment">// Copy return value (prepared by last activation)</em>
<a class="jxr_linenumber" name="L238" href="#L238">238</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong>[] ret = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">int</strong>[k];
<a class="jxr_linenumber" name="L239" href="#L239">239</a>             System.arraycopy(c, 1, ret, 0, k);
<a class="jxr_linenumber" name="L240" href="#L240">240</a> 
<a class="jxr_linenumber" name="L241" href="#L241">241</a>             <em class="jxr_comment">// Prepare next iteration</em>
<a class="jxr_linenumber" name="L242" href="#L242">242</a>             <em class="jxr_comment">// T2 and T6 loop</em>
<a class="jxr_linenumber" name="L243" href="#L243">243</a>             <strong class="jxr_keyword">int</strong> x = 0;
<a class="jxr_linenumber" name="L244" href="#L244">244</a>             <strong class="jxr_keyword">if</strong> (j &gt; 0) {
<a class="jxr_linenumber" name="L245" href="#L245">245</a>                 x = j;
<a class="jxr_linenumber" name="L246" href="#L246">246</a>                 c[j] = x;
<a class="jxr_linenumber" name="L247" href="#L247">247</a>                 j--;
<a class="jxr_linenumber" name="L248" href="#L248">248</a>                 <strong class="jxr_keyword">return</strong> ret;
<a class="jxr_linenumber" name="L249" href="#L249">249</a>             }
<a class="jxr_linenumber" name="L250" href="#L250">250</a>             <em class="jxr_comment">// T3</em>
<a class="jxr_linenumber" name="L251" href="#L251">251</a>             <strong class="jxr_keyword">if</strong> (c[1] + 1 &lt; c[2]) {
<a class="jxr_linenumber" name="L252" href="#L252">252</a>                 c[1]++;
<a class="jxr_linenumber" name="L253" href="#L253">253</a>                 <strong class="jxr_keyword">return</strong> ret;
<a class="jxr_linenumber" name="L254" href="#L254">254</a>             } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L255" href="#L255">255</a>                 j = 2;
<a class="jxr_linenumber" name="L256" href="#L256">256</a>             }
<a class="jxr_linenumber" name="L257" href="#L257">257</a>             <em class="jxr_comment">// T4</em>
<a class="jxr_linenumber" name="L258" href="#L258">258</a>             <strong class="jxr_keyword">boolean</strong> stepDone = false;
<a class="jxr_linenumber" name="L259" href="#L259">259</a>             <strong class="jxr_keyword">while</strong> (!stepDone) {
<a class="jxr_linenumber" name="L260" href="#L260">260</a>                 c[j - 1] = j - 2;
<a class="jxr_linenumber" name="L261" href="#L261">261</a>                 x = c[j] + 1;
<a class="jxr_linenumber" name="L262" href="#L262">262</a>                 <strong class="jxr_keyword">if</strong> (x == c[j + 1]) {
<a class="jxr_linenumber" name="L263" href="#L263">263</a>                     j++;
<a class="jxr_linenumber" name="L264" href="#L264">264</a>                 } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L265" href="#L265">265</a>                     stepDone = <strong class="jxr_keyword">true</strong>;
<a class="jxr_linenumber" name="L266" href="#L266">266</a>                 }
<a class="jxr_linenumber" name="L267" href="#L267">267</a>             }
<a class="jxr_linenumber" name="L268" href="#L268">268</a>             <em class="jxr_comment">// T5</em>
<a class="jxr_linenumber" name="L269" href="#L269">269</a>             <strong class="jxr_keyword">if</strong> (j &gt; k) {
<a class="jxr_linenumber" name="L270" href="#L270">270</a>                 more = false;
<a class="jxr_linenumber" name="L271" href="#L271">271</a>                 <strong class="jxr_keyword">return</strong> ret;
<a class="jxr_linenumber" name="L272" href="#L272">272</a>             }
<a class="jxr_linenumber" name="L273" href="#L273">273</a>             <em class="jxr_comment">// T6</em>
<a class="jxr_linenumber" name="L274" href="#L274">274</a>             c[j] = x;
<a class="jxr_linenumber" name="L275" href="#L275">275</a>             j--;
<a class="jxr_linenumber" name="L276" href="#L276">276</a>             <strong class="jxr_keyword">return</strong> ret;
<a class="jxr_linenumber" name="L277" href="#L277">277</a>         }
<a class="jxr_linenumber" name="L278" href="#L278">278</a> 
<a class="jxr_linenumber" name="L279" href="#L279">279</a>         <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L280" href="#L280">280</a> <em class="jxr_javadoccomment">         * Not supported.</em>
<a class="jxr_linenumber" name="L281" href="#L281">281</a> <em class="jxr_javadoccomment">         */</em>
<a class="jxr_linenumber" name="L282" href="#L282">282</a>         <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> remove() {
<a class="jxr_linenumber" name="L283" href="#L283">283</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> UnsupportedOperationException();
<a class="jxr_linenumber" name="L284" href="#L284">284</a>         }
<a class="jxr_linenumber" name="L285" href="#L285">285</a>     }
<a class="jxr_linenumber" name="L286" href="#L286">286</a> 
<a class="jxr_linenumber" name="L287" href="#L287">287</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L288" href="#L288">288</a> <em class="jxr_javadoccomment">     * Iterator with just one element to handle degenerate cases (full array,</em>
<a class="jxr_linenumber" name="L289" href="#L289">289</a> <em class="jxr_javadoccomment">     * empty array) for combination iterator.</em>
<a class="jxr_linenumber" name="L290" href="#L290">290</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L291" href="#L291">291</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../org/apache/commons/math3/util/Combinations.html">SingletonIterator</a> <strong class="jxr_keyword">implements</strong> Iterator&lt;<strong class="jxr_keyword">int</strong>[]&gt; {
<a class="jxr_linenumber" name="L292" href="#L292">292</a>         <em class="jxr_javadoccomment">/** Singleton array */</em>
<a class="jxr_linenumber" name="L293" href="#L293">293</a>         <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong>[] singleton;
<a class="jxr_linenumber" name="L294" href="#L294">294</a>         <em class="jxr_javadoccomment">/** True on initialization, false after first call to next */</em>
<a class="jxr_linenumber" name="L295" href="#L295">295</a>         <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">boolean</strong> more = <strong class="jxr_keyword">true</strong>;
<a class="jxr_linenumber" name="L296" href="#L296">296</a>         <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L297" href="#L297">297</a> <em class="jxr_javadoccomment">         * Create a singleton iterator providing the given array.</em>
<a class="jxr_linenumber" name="L298" href="#L298">298</a> <em class="jxr_javadoccomment">         * @param singleton array returned by the iterator</em>
<a class="jxr_linenumber" name="L299" href="#L299">299</a> <em class="jxr_javadoccomment">         */</em>
<a class="jxr_linenumber" name="L300" href="#L300">300</a>         <a href="../../../../../org/apache/commons/math3/util/Combinations.html">SingletonIterator</a>(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong>[] singleton) {
<a class="jxr_linenumber" name="L301" href="#L301">301</a>             <strong class="jxr_keyword">this</strong>.singleton = singleton;
<a class="jxr_linenumber" name="L302" href="#L302">302</a>         }
<a class="jxr_linenumber" name="L303" href="#L303">303</a>         <em class="jxr_javadoccomment">/** @return True until next is called the first time, then false */</em>
<a class="jxr_linenumber" name="L304" href="#L304">304</a>         <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">boolean</strong> hasNext() {
<a class="jxr_linenumber" name="L305" href="#L305">305</a>             <strong class="jxr_keyword">return</strong> more;
<a class="jxr_linenumber" name="L306" href="#L306">306</a>         }
<a class="jxr_linenumber" name="L307" href="#L307">307</a>         <em class="jxr_javadoccomment">/** @return the singleton in first activation; throws NSEE thereafter */</em>
<a class="jxr_linenumber" name="L308" href="#L308">308</a>         <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">int</strong>[] next() {
<a class="jxr_linenumber" name="L309" href="#L309">309</a>             <strong class="jxr_keyword">if</strong> (more) {
<a class="jxr_linenumber" name="L310" href="#L310">310</a>                 more = false;
<a class="jxr_linenumber" name="L311" href="#L311">311</a>                 <strong class="jxr_keyword">return</strong> singleton;
<a class="jxr_linenumber" name="L312" href="#L312">312</a>             } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L313" href="#L313">313</a>                 <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> NoSuchElementException();
<a class="jxr_linenumber" name="L314" href="#L314">314</a>             }
<a class="jxr_linenumber" name="L315" href="#L315">315</a>         }
<a class="jxr_linenumber" name="L316" href="#L316">316</a>         <em class="jxr_javadoccomment">/** Not supported */</em>
<a class="jxr_linenumber" name="L317" href="#L317">317</a>         <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> remove() {
<a class="jxr_linenumber" name="L318" href="#L318">318</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> UnsupportedOperationException();
<a class="jxr_linenumber" name="L319" href="#L319">319</a>         }
<a class="jxr_linenumber" name="L320" href="#L320">320</a>     }
<a class="jxr_linenumber" name="L321" href="#L321">321</a> 
<a class="jxr_linenumber" name="L322" href="#L322">322</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L323" href="#L323">323</a> <em class="jxr_javadoccomment">     * Defines the lexicographic ordering of combinations, using</em>
<a class="jxr_linenumber" name="L324" href="#L324">324</a> <em class="jxr_javadoccomment">     * the {@link #lexNorm(int[])} method.</em>
<a class="jxr_linenumber" name="L325" href="#L325">325</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L326" href="#L326">326</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../org/apache/commons/math3/util/Combinations.html">LexicographicComparator</a>
<a class="jxr_linenumber" name="L327" href="#L327">327</a>         <strong class="jxr_keyword">implements</strong> Comparator&lt;<strong class="jxr_keyword">int</strong>[]&gt;, Serializable {
<a class="jxr_linenumber" name="L328" href="#L328">328</a>         <em class="jxr_javadoccomment">/** Serializable version identifier. */</em>
<a class="jxr_linenumber" name="L329" href="#L329">329</a>         <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">long</strong> serialVersionUID = 20130906L;
<a class="jxr_linenumber" name="L330" href="#L330">330</a>         <em class="jxr_javadoccomment">/** Size of the set from which combinations are drawn. */</em>
<a class="jxr_linenumber" name="L331" href="#L331">331</a>         <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> n;
<a class="jxr_linenumber" name="L332" href="#L332">332</a>         <em class="jxr_javadoccomment">/** Number of elements in each combination. */</em>
<a class="jxr_linenumber" name="L333" href="#L333">333</a>         <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> k;
<a class="jxr_linenumber" name="L334" href="#L334">334</a> 
<a class="jxr_linenumber" name="L335" href="#L335">335</a>         <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L336" href="#L336">336</a> <em class="jxr_javadoccomment">         * @param n Size of the set from which subsets are selected.</em>
<a class="jxr_linenumber" name="L337" href="#L337">337</a> <em class="jxr_javadoccomment">         * @param k Size of the subsets to be enumerated.</em>
<a class="jxr_linenumber" name="L338" href="#L338">338</a> <em class="jxr_javadoccomment">         */</em>
<a class="jxr_linenumber" name="L339" href="#L339">339</a>         <a href="../../../../../org/apache/commons/math3/util/Combinations.html">LexicographicComparator</a>(<strong class="jxr_keyword">int</strong> n, <strong class="jxr_keyword">int</strong> k) {
<a class="jxr_linenumber" name="L340" href="#L340">340</a>             <strong class="jxr_keyword">this</strong>.n = n;
<a class="jxr_linenumber" name="L341" href="#L341">341</a>             <strong class="jxr_keyword">this</strong>.k = k;
<a class="jxr_linenumber" name="L342" href="#L342">342</a>         }
<a class="jxr_linenumber" name="L343" href="#L343">343</a> 
<a class="jxr_linenumber" name="L344" href="#L344">344</a>         <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L345" href="#L345">345</a> <em class="jxr_javadoccomment">         * {@inheritDoc}</em>
<a class="jxr_linenumber" name="L346" href="#L346">346</a> <em class="jxr_javadoccomment">         *</em>
<a class="jxr_linenumber" name="L347" href="#L347">347</a> <em class="jxr_javadoccomment">         * @throws DimensionMismatchException if the array lengths are not</em>
<a class="jxr_linenumber" name="L348" href="#L348">348</a> <em class="jxr_javadoccomment">         * equal to {@code k}.</em>
<a class="jxr_linenumber" name="L349" href="#L349">349</a> <em class="jxr_javadoccomment">         * @throws OutOfRangeException if an element of the array is not</em>
<a class="jxr_linenumber" name="L350" href="#L350">350</a> <em class="jxr_javadoccomment">         * within the interval [0, {@code n}).</em>
<a class="jxr_linenumber" name="L351" href="#L351">351</a> <em class="jxr_javadoccomment">         */</em>
<a class="jxr_linenumber" name="L352" href="#L352">352</a>         <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">int</strong> compare(<strong class="jxr_keyword">int</strong>[] c1,
<a class="jxr_linenumber" name="L353" href="#L353">353</a>                            <strong class="jxr_keyword">int</strong>[] c2) {
<a class="jxr_linenumber" name="L354" href="#L354">354</a>             <strong class="jxr_keyword">if</strong> (c1.length != k) {
<a class="jxr_linenumber" name="L355" href="#L355">355</a>                 <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../org/apache/commons/math3/exception/DimensionMismatchException.html">DimensionMismatchException</a>(c1.length, k);
<a class="jxr_linenumber" name="L356" href="#L356">356</a>             }
<a class="jxr_linenumber" name="L357" href="#L357">357</a>             <strong class="jxr_keyword">if</strong> (c2.length != k) {
<a class="jxr_linenumber" name="L358" href="#L358">358</a>                 <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../org/apache/commons/math3/exception/DimensionMismatchException.html">DimensionMismatchException</a>(c2.length, k);
<a class="jxr_linenumber" name="L359" href="#L359">359</a>             }
<a class="jxr_linenumber" name="L360" href="#L360">360</a> 
<a class="jxr_linenumber" name="L361" href="#L361">361</a>             <em class="jxr_comment">// Method "lexNorm" works with ordered arrays.</em>
<a class="jxr_linenumber" name="L362" href="#L362">362</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong>[] c1s = MathArrays.copyOf(c1);
<a class="jxr_linenumber" name="L363" href="#L363">363</a>             Arrays.sort(c1s);
<a class="jxr_linenumber" name="L364" href="#L364">364</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong>[] c2s = MathArrays.copyOf(c2);
<a class="jxr_linenumber" name="L365" href="#L365">365</a>             Arrays.sort(c2s);
<a class="jxr_linenumber" name="L366" href="#L366">366</a> 
<a class="jxr_linenumber" name="L367" href="#L367">367</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">long</strong> v1 = lexNorm(c1s);
<a class="jxr_linenumber" name="L368" href="#L368">368</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">long</strong> v2 = lexNorm(c2s);
<a class="jxr_linenumber" name="L369" href="#L369">369</a> 
<a class="jxr_linenumber" name="L370" href="#L370">370</a>             <strong class="jxr_keyword">if</strong> (v1 &lt; v2) {
<a class="jxr_linenumber" name="L371" href="#L371">371</a>                 <strong class="jxr_keyword">return</strong> -1;
<a class="jxr_linenumber" name="L372" href="#L372">372</a>             } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (v1 &gt; v2) {
<a class="jxr_linenumber" name="L373" href="#L373">373</a>                 <strong class="jxr_keyword">return</strong> 1;
<a class="jxr_linenumber" name="L374" href="#L374">374</a>             } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L375" href="#L375">375</a>                 <strong class="jxr_keyword">return</strong> 0;
<a class="jxr_linenumber" name="L376" href="#L376">376</a>             }
<a class="jxr_linenumber" name="L377" href="#L377">377</a>         }
<a class="jxr_linenumber" name="L378" href="#L378">378</a> 
<a class="jxr_linenumber" name="L379" href="#L379">379</a>         <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L380" href="#L380">380</a> <em class="jxr_javadoccomment">         * Computes the value (in base 10) represented by the digit</em>
<a class="jxr_linenumber" name="L381" href="#L381">381</a> <em class="jxr_javadoccomment">         * (interpreted in base {@code n}) in the input array in reverse</em>
<a class="jxr_linenumber" name="L382" href="#L382">382</a> <em class="jxr_javadoccomment">         * order.</em>
<a class="jxr_linenumber" name="L383" href="#L383">383</a> <em class="jxr_javadoccomment">         * For example if {@code c} is {@code {3, 2, 1}}, and {@code n}</em>
<a class="jxr_linenumber" name="L384" href="#L384">384</a> <em class="jxr_javadoccomment">         * is 3, the method will return 18.</em>
<a class="jxr_linenumber" name="L385" href="#L385">385</a> <em class="jxr_javadoccomment">         *</em>
<a class="jxr_linenumber" name="L386" href="#L386">386</a> <em class="jxr_javadoccomment">         * @param c Input array.</em>
<a class="jxr_linenumber" name="L387" href="#L387">387</a> <em class="jxr_javadoccomment">         * @return the lexicographic norm.</em>
<a class="jxr_linenumber" name="L388" href="#L388">388</a> <em class="jxr_javadoccomment">         * @throws OutOfRangeException if an element of the array is not</em>
<a class="jxr_linenumber" name="L389" href="#L389">389</a> <em class="jxr_javadoccomment">         * within the interval [0, {@code n}).</em>
<a class="jxr_linenumber" name="L390" href="#L390">390</a> <em class="jxr_javadoccomment">         */</em>
<a class="jxr_linenumber" name="L391" href="#L391">391</a>         <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">long</strong> lexNorm(<strong class="jxr_keyword">int</strong>[] c) {
<a class="jxr_linenumber" name="L392" href="#L392">392</a>             <strong class="jxr_keyword">long</strong> ret = 0;
<a class="jxr_linenumber" name="L393" href="#L393">393</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; c.length; i++) {
<a class="jxr_linenumber" name="L394" href="#L394">394</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> digit = c[i];
<a class="jxr_linenumber" name="L395" href="#L395">395</a>                 <strong class="jxr_keyword">if</strong> (digit &lt; 0 ||
<a class="jxr_linenumber" name="L396" href="#L396">396</a>                     digit &gt;= n) {
<a class="jxr_linenumber" name="L397" href="#L397">397</a>                     <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../org/apache/commons/math3/exception/OutOfRangeException.html">OutOfRangeException</a>(digit, 0, n - 1);
<a class="jxr_linenumber" name="L398" href="#L398">398</a>                 }
<a class="jxr_linenumber" name="L399" href="#L399">399</a> 
<a class="jxr_linenumber" name="L400" href="#L400">400</a>                 ret += c[i] * ArithmeticUtils.pow(n, i);
<a class="jxr_linenumber" name="L401" href="#L401">401</a>             }
<a class="jxr_linenumber" name="L402" href="#L402">402</a>             <strong class="jxr_keyword">return</strong> ret;
<a class="jxr_linenumber" name="L403" href="#L403">403</a>         }
<a class="jxr_linenumber" name="L404" href="#L404">404</a>     }
<a class="jxr_linenumber" name="L405" href="#L405">405</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2003&#x2013;2016 <a href="http://www.apache.org/">The Apache Software Foundation</a>. All rights reserved.</div>
</body>
</html>
