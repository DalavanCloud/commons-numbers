<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>AbstractLeastSquaresOptimizer xref</title>
<link type="text/css" rel="stylesheet" href="../../../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../apidocs/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Licensed to the Apache Software Foundation (ASF) under one or more</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> * contributor license agreements.  See the NOTICE file distributed with</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * this work for additional information regarding copyright ownership.</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * The ASF licenses this file to You under the Apache License, Version 2.0</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * (the "License"); you may not use this file except in compliance with</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> * the License.  You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *      <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  <strong class="jxr_keyword">package</strong> org.apache.commons.math3.optimization.general;
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.analysis.FunctionUtils;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction;
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.DimensionMismatchException;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.NumberIsTooSmallException;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.util.LocalizedFormats;
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.linear.ArrayRealVector;
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.linear.RealMatrix;
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.linear.DiagonalMatrix;
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.linear.DecompositionSolver;
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.linear.MatrixUtils;
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.linear.QRDecomposition;
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.linear.EigenDecomposition;
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.optimization.OptimizationData;
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.optimization.InitialGuess;
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.optimization.Target;
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.optimization.Weight;
<a class="jxr_linenumber" name="L38" href="#L38">38</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.optimization.ConvergenceChecker;
<a class="jxr_linenumber" name="L39" href="#L39">39</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer;
<a class="jxr_linenumber" name="L40" href="#L40">40</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.optimization.PointVectorValuePair;
<a class="jxr_linenumber" name="L41" href="#L41">41</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer;
<a class="jxr_linenumber" name="L42" href="#L42">42</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.util.FastMath;
<a class="jxr_linenumber" name="L43" href="#L43">43</a>  
<a class="jxr_linenumber" name="L44" href="#L44">44</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L45" href="#L45">45</a>  <em class="jxr_javadoccomment"> * Base class for implementing least squares optimizers.</em>
<a class="jxr_linenumber" name="L46" href="#L46">46</a>  <em class="jxr_javadoccomment"> * It handles the boilerplate methods associated to thresholds settings,</em>
<a class="jxr_linenumber" name="L47" href="#L47">47</a>  <em class="jxr_javadoccomment"> * Jacobian and error estimation.</em>
<a class="jxr_linenumber" name="L48" href="#L48">48</a>  <em class="jxr_javadoccomment"> * &lt;br/&gt;</em>
<a class="jxr_linenumber" name="L49" href="#L49">49</a>  <em class="jxr_javadoccomment"> * This class constructs the Jacobian matrix of the function argument in method</em>
<a class="jxr_linenumber" name="L50" href="#L50">50</a>  <em class="jxr_javadoccomment"> * {@link BaseAbstractMultivariateVectorOptimizer#optimize(int,</em>
<a class="jxr_linenumber" name="L51" href="#L51">51</a>  <em class="jxr_javadoccomment"> * org.apache.commons.math3.analysis.MultivariateVectorFunction,OptimizationData[])</em>
<a class="jxr_linenumber" name="L52" href="#L52">52</a>  <em class="jxr_javadoccomment"> * optimize} and assumes that the rows of that matrix iterate on the model</em>
<a class="jxr_linenumber" name="L53" href="#L53">53</a>  <em class="jxr_javadoccomment"> * functions while the columns iterate on the parameters; thus, the numbers</em>
<a class="jxr_linenumber" name="L54" href="#L54">54</a>  <em class="jxr_javadoccomment"> * of rows is equal to the dimension of the</em>
<a class="jxr_linenumber" name="L55" href="#L55">55</a>  <em class="jxr_javadoccomment"> * {@link org.apache.commons.math3.optimization.Target Target} while</em>
<a class="jxr_linenumber" name="L56" href="#L56">56</a>  <em class="jxr_javadoccomment"> * the number of columns is equal to the dimension of the</em>
<a class="jxr_linenumber" name="L57" href="#L57">57</a>  <em class="jxr_javadoccomment"> * {@link org.apache.commons.math3.optimization.InitialGuess InitialGuess}.</em>
<a class="jxr_linenumber" name="L58" href="#L58">58</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L59" href="#L59">59</a>  <em class="jxr_javadoccomment"> * @deprecated As of 3.1 (to be removed in 4.0).</em>
<a class="jxr_linenumber" name="L60" href="#L60">60</a>  <em class="jxr_javadoccomment"> * @since 1.2</em>
<a class="jxr_linenumber" name="L61" href="#L61">61</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L62" href="#L62">62</a>  @Deprecated
<a class="jxr_linenumber" name="L63" href="#L63">63</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">abstract</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../../org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.html">AbstractLeastSquaresOptimizer</a>
<a class="jxr_linenumber" name="L64" href="#L64">64</a>      <strong class="jxr_keyword">extends</strong> BaseAbstractMultivariateVectorOptimizer&lt;DifferentiableMultivariateVectorFunction&gt;
<a class="jxr_linenumber" name="L65" href="#L65">65</a>      <strong class="jxr_keyword">implements</strong> <a href="../../../../../../org/apache/commons/math3/optimization/DifferentiableMultivariateVectorOptimizer.html">DifferentiableMultivariateVectorOptimizer</a> {
<a class="jxr_linenumber" name="L66" href="#L66">66</a>      <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L67" href="#L67">67</a>  <em class="jxr_javadoccomment">     * Singularity threshold (cf. {@link #getCovariances(double)}).</em>
<a class="jxr_linenumber" name="L68" href="#L68">68</a>  <em class="jxr_javadoccomment">     * @deprecated As of 3.1.</em>
<a class="jxr_linenumber" name="L69" href="#L69">69</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L70" href="#L70">70</a>      @Deprecated
<a class="jxr_linenumber" name="L71" href="#L71">71</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> DEFAULT_SINGULARITY_THRESHOLD = 1e-14;
<a class="jxr_linenumber" name="L72" href="#L72">72</a>      <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L73" href="#L73">73</a>  <em class="jxr_javadoccomment">     * Jacobian matrix of the weighted residuals.</em>
<a class="jxr_linenumber" name="L74" href="#L74">74</a>  <em class="jxr_javadoccomment">     * This matrix is in canonical form just after the calls to</em>
<a class="jxr_linenumber" name="L75" href="#L75">75</a>  <em class="jxr_javadoccomment">     * {@link #updateJacobian()}, but may be modified by the solver</em>
<a class="jxr_linenumber" name="L76" href="#L76">76</a>  <em class="jxr_javadoccomment">     * in the derived class (the {@link LevenbergMarquardtOptimizer</em>
<a class="jxr_linenumber" name="L77" href="#L77">77</a>  <em class="jxr_javadoccomment">     * Levenberg-Marquardt optimizer} does this).</em>
<a class="jxr_linenumber" name="L78" href="#L78">78</a>  <em class="jxr_javadoccomment">     * @deprecated As of 3.1. To be removed in 4.0. Please use</em>
<a class="jxr_linenumber" name="L79" href="#L79">79</a>  <em class="jxr_javadoccomment">     * {@link #computeWeightedJacobian(double[])} instead.</em>
<a class="jxr_linenumber" name="L80" href="#L80">80</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L81" href="#L81">81</a>      @Deprecated
<a class="jxr_linenumber" name="L82" href="#L82">82</a>      <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">double</strong>[][] weightedResidualJacobian;
<a class="jxr_linenumber" name="L83" href="#L83">83</a>      <em class="jxr_javadoccomment">/** Number of columns of the jacobian matrix.</em>
<a class="jxr_linenumber" name="L84" href="#L84">84</a>  <em class="jxr_javadoccomment">     * @deprecated As of 3.1.</em>
<a class="jxr_linenumber" name="L85" href="#L85">85</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L86" href="#L86">86</a>      @Deprecated
<a class="jxr_linenumber" name="L87" href="#L87">87</a>      <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">int</strong> cols;
<a class="jxr_linenumber" name="L88" href="#L88">88</a>      <em class="jxr_javadoccomment">/** Number of rows of the jacobian matrix.</em>
<a class="jxr_linenumber" name="L89" href="#L89">89</a>  <em class="jxr_javadoccomment">     * @deprecated As of 3.1.</em>
<a class="jxr_linenumber" name="L90" href="#L90">90</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L91" href="#L91">91</a>      @Deprecated
<a class="jxr_linenumber" name="L92" href="#L92">92</a>      <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">int</strong> rows;
<a class="jxr_linenumber" name="L93" href="#L93">93</a>      <em class="jxr_javadoccomment">/** Current point.</em>
<a class="jxr_linenumber" name="L94" href="#L94">94</a>  <em class="jxr_javadoccomment">     * @deprecated As of 3.1.</em>
<a class="jxr_linenumber" name="L95" href="#L95">95</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L96" href="#L96">96</a>      @Deprecated
<a class="jxr_linenumber" name="L97" href="#L97">97</a>      <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">double</strong>[] point;
<a class="jxr_linenumber" name="L98" href="#L98">98</a>      <em class="jxr_javadoccomment">/** Current objective function value.</em>
<a class="jxr_linenumber" name="L99" href="#L99">99</a>  <em class="jxr_javadoccomment">     * @deprecated As of 3.1.</em>
<a class="jxr_linenumber" name="L100" href="#L100">100</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L101" href="#L101">101</a>     @Deprecated
<a class="jxr_linenumber" name="L102" href="#L102">102</a>     <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">double</strong>[] objective;
<a class="jxr_linenumber" name="L103" href="#L103">103</a>     <em class="jxr_javadoccomment">/** Weighted residuals</em>
<a class="jxr_linenumber" name="L104" href="#L104">104</a> <em class="jxr_javadoccomment">     * @deprecated As of 3.1.</em>
<a class="jxr_linenumber" name="L105" href="#L105">105</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L106" href="#L106">106</a>     @Deprecated
<a class="jxr_linenumber" name="L107" href="#L107">107</a>     <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">double</strong>[] weightedResiduals;
<a class="jxr_linenumber" name="L108" href="#L108">108</a>     <em class="jxr_javadoccomment">/** Cost value (square root of the sum of the residuals).</em>
<a class="jxr_linenumber" name="L109" href="#L109">109</a> <em class="jxr_javadoccomment">     * @deprecated As of 3.1. Field to become "private" in 4.0.</em>
<a class="jxr_linenumber" name="L110" href="#L110">110</a> <em class="jxr_javadoccomment">     * Please use {@link #setCost(double)}.</em>
<a class="jxr_linenumber" name="L111" href="#L111">111</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L112" href="#L112">112</a>     @Deprecated
<a class="jxr_linenumber" name="L113" href="#L113">113</a>     <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">double</strong> cost;
<a class="jxr_linenumber" name="L114" href="#L114">114</a>     <em class="jxr_javadoccomment">/** Objective function derivatives. */</em>
<a class="jxr_linenumber" name="L115" href="#L115">115</a>     <strong class="jxr_keyword">private</strong> <a href="../../../../../../org/apache/commons/math3/analysis/differentiation/MultivariateDifferentiableVectorFunction.html">MultivariateDifferentiableVectorFunction</a> jF;
<a class="jxr_linenumber" name="L116" href="#L116">116</a>     <em class="jxr_javadoccomment">/** Number of evaluations of the Jacobian. */</em>
<a class="jxr_linenumber" name="L117" href="#L117">117</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">int</strong> jacobianEvaluations;
<a class="jxr_linenumber" name="L118" href="#L118">118</a>     <em class="jxr_javadoccomment">/** Square-root of the weight matrix. */</em>
<a class="jxr_linenumber" name="L119" href="#L119">119</a>     <strong class="jxr_keyword">private</strong> <a href="../../../../../../org/apache/commons/math3/linear/RealMatrix.html">RealMatrix</a> weightMatrixSqrt;
<a class="jxr_linenumber" name="L120" href="#L120">120</a> 
<a class="jxr_linenumber" name="L121" href="#L121">121</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L122" href="#L122">122</a> <em class="jxr_javadoccomment">     * Simple constructor with default settings.</em>
<a class="jxr_linenumber" name="L123" href="#L123">123</a> <em class="jxr_javadoccomment">     * The convergence check is set to a {@link</em>
<a class="jxr_linenumber" name="L124" href="#L124">124</a> <em class="jxr_javadoccomment">     * org.apache.commons.math3.optimization.SimpleVectorValueChecker}.</em>
<a class="jxr_linenumber" name="L125" href="#L125">125</a> <em class="jxr_javadoccomment">     * @deprecated See {@link org.apache.commons.math3.optimization.SimpleValueChecker#SimpleValueChecker()}</em>
<a class="jxr_linenumber" name="L126" href="#L126">126</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L127" href="#L127">127</a>     @Deprecated
<a class="jxr_linenumber" name="L128" href="#L128">128</a>     <strong class="jxr_keyword">protected</strong> <a href="../../../../../../org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.html">AbstractLeastSquaresOptimizer</a>() {}
<a class="jxr_linenumber" name="L129" href="#L129">129</a> 
<a class="jxr_linenumber" name="L130" href="#L130">130</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L131" href="#L131">131</a> <em class="jxr_javadoccomment">     * @param checker Convergence checker.</em>
<a class="jxr_linenumber" name="L132" href="#L132">132</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L133" href="#L133">133</a>     <strong class="jxr_keyword">protected</strong> <a href="../../../../../../org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.html">AbstractLeastSquaresOptimizer</a>(ConvergenceChecker&lt;PointVectorValuePair&gt; checker) {
<a class="jxr_linenumber" name="L134" href="#L134">134</a>         <strong class="jxr_keyword">super</strong>(checker);
<a class="jxr_linenumber" name="L135" href="#L135">135</a>     }
<a class="jxr_linenumber" name="L136" href="#L136">136</a> 
<a class="jxr_linenumber" name="L137" href="#L137">137</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L138" href="#L138">138</a> <em class="jxr_javadoccomment">     * @return the number of evaluations of the Jacobian function.</em>
<a class="jxr_linenumber" name="L139" href="#L139">139</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L140" href="#L140">140</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">int</strong> getJacobianEvaluations() {
<a class="jxr_linenumber" name="L141" href="#L141">141</a>         <strong class="jxr_keyword">return</strong> jacobianEvaluations;
<a class="jxr_linenumber" name="L142" href="#L142">142</a>     }
<a class="jxr_linenumber" name="L143" href="#L143">143</a> 
<a class="jxr_linenumber" name="L144" href="#L144">144</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L145" href="#L145">145</a> <em class="jxr_javadoccomment">     * Update the jacobian matrix.</em>
<a class="jxr_linenumber" name="L146" href="#L146">146</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L147" href="#L147">147</a> <em class="jxr_javadoccomment">     * @throws DimensionMismatchException if the Jacobian dimension does not</em>
<a class="jxr_linenumber" name="L148" href="#L148">148</a> <em class="jxr_javadoccomment">     * match problem dimension.</em>
<a class="jxr_linenumber" name="L149" href="#L149">149</a> <em class="jxr_javadoccomment">     * @deprecated As of 3.1. Please use {@link #computeWeightedJacobian(double[])}</em>
<a class="jxr_linenumber" name="L150" href="#L150">150</a> <em class="jxr_javadoccomment">     * instead.</em>
<a class="jxr_linenumber" name="L151" href="#L151">151</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L152" href="#L152">152</a>     @Deprecated
<a class="jxr_linenumber" name="L153" href="#L153">153</a>     <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">void</strong> updateJacobian() {
<a class="jxr_linenumber" name="L154" href="#L154">154</a>         <strong class="jxr_keyword">final</strong> <a href="../../../../../../org/apache/commons/math3/linear/RealMatrix.html">RealMatrix</a> weightedJacobian = computeWeightedJacobian(point);
<a class="jxr_linenumber" name="L155" href="#L155">155</a>         weightedResidualJacobian = weightedJacobian.scalarMultiply(-1).getData();
<a class="jxr_linenumber" name="L156" href="#L156">156</a>     }
<a class="jxr_linenumber" name="L157" href="#L157">157</a> 
<a class="jxr_linenumber" name="L158" href="#L158">158</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L159" href="#L159">159</a> <em class="jxr_javadoccomment">     * Computes the Jacobian matrix.</em>
<a class="jxr_linenumber" name="L160" href="#L160">160</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L161" href="#L161">161</a> <em class="jxr_javadoccomment">     * @param params Model parameters at which to compute the Jacobian.</em>
<a class="jxr_linenumber" name="L162" href="#L162">162</a> <em class="jxr_javadoccomment">     * @return the weighted Jacobian: W&lt;sup&gt;1/2&lt;/sup&gt; J.</em>
<a class="jxr_linenumber" name="L163" href="#L163">163</a> <em class="jxr_javadoccomment">     * @throws DimensionMismatchException if the Jacobian dimension does not</em>
<a class="jxr_linenumber" name="L164" href="#L164">164</a> <em class="jxr_javadoccomment">     * match problem dimension.</em>
<a class="jxr_linenumber" name="L165" href="#L165">165</a> <em class="jxr_javadoccomment">     * @since 3.1</em>
<a class="jxr_linenumber" name="L166" href="#L166">166</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L167" href="#L167">167</a>     <strong class="jxr_keyword">protected</strong> <a href="../../../../../../org/apache/commons/math3/linear/RealMatrix.html">RealMatrix</a> computeWeightedJacobian(<strong class="jxr_keyword">double</strong>[] params) {
<a class="jxr_linenumber" name="L168" href="#L168">168</a>         ++jacobianEvaluations;
<a class="jxr_linenumber" name="L169" href="#L169">169</a> 
<a class="jxr_linenumber" name="L170" href="#L170">170</a>         <strong class="jxr_keyword">final</strong> <a href="../../../../../../org/apache/commons/math3/analysis/differentiation/DerivativeStructure.html">DerivativeStructure</a>[] dsPoint = <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/analysis/differentiation/DerivativeStructure.html">DerivativeStructure</a>[params.length];
<a class="jxr_linenumber" name="L171" href="#L171">171</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> nC = params.length;
<a class="jxr_linenumber" name="L172" href="#L172">172</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; nC; ++i) {
<a class="jxr_linenumber" name="L173" href="#L173">173</a>             dsPoint[i] = <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/analysis/differentiation/DerivativeStructure.html">DerivativeStructure</a>(nC, 1, i, params[i]);
<a class="jxr_linenumber" name="L174" href="#L174">174</a>         }
<a class="jxr_linenumber" name="L175" href="#L175">175</a>         <strong class="jxr_keyword">final</strong> <a href="../../../../../../org/apache/commons/math3/analysis/differentiation/DerivativeStructure.html">DerivativeStructure</a>[] dsValue = jF.value(dsPoint);
<a class="jxr_linenumber" name="L176" href="#L176">176</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> nR = getTarget().length;
<a class="jxr_linenumber" name="L177" href="#L177">177</a>         <strong class="jxr_keyword">if</strong> (dsValue.length != nR) {
<a class="jxr_linenumber" name="L178" href="#L178">178</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/exception/DimensionMismatchException.html">DimensionMismatchException</a>(dsValue.length, nR);
<a class="jxr_linenumber" name="L179" href="#L179">179</a>         }
<a class="jxr_linenumber" name="L180" href="#L180">180</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[][] jacobianData = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[nR][nC];
<a class="jxr_linenumber" name="L181" href="#L181">181</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; nR; ++i) {
<a class="jxr_linenumber" name="L182" href="#L182">182</a>             <strong class="jxr_keyword">int</strong>[] orders = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">int</strong>[nC];
<a class="jxr_linenumber" name="L183" href="#L183">183</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = 0; j &lt; nC; ++j) {
<a class="jxr_linenumber" name="L184" href="#L184">184</a>                 orders[j] = 1;
<a class="jxr_linenumber" name="L185" href="#L185">185</a>                 jacobianData[i][j] = dsValue[i].getPartialDerivative(orders);
<a class="jxr_linenumber" name="L186" href="#L186">186</a>                 orders[j] = 0;
<a class="jxr_linenumber" name="L187" href="#L187">187</a>             }
<a class="jxr_linenumber" name="L188" href="#L188">188</a>         }
<a class="jxr_linenumber" name="L189" href="#L189">189</a> 
<a class="jxr_linenumber" name="L190" href="#L190">190</a>         <strong class="jxr_keyword">return</strong> weightMatrixSqrt.multiply(MatrixUtils.createRealMatrix(jacobianData));
<a class="jxr_linenumber" name="L191" href="#L191">191</a>     }
<a class="jxr_linenumber" name="L192" href="#L192">192</a> 
<a class="jxr_linenumber" name="L193" href="#L193">193</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L194" href="#L194">194</a> <em class="jxr_javadoccomment">     * Update the residuals array and cost function value.</em>
<a class="jxr_linenumber" name="L195" href="#L195">195</a> <em class="jxr_javadoccomment">     * @throws DimensionMismatchException if the dimension does not match the</em>
<a class="jxr_linenumber" name="L196" href="#L196">196</a> <em class="jxr_javadoccomment">     * problem dimension.</em>
<a class="jxr_linenumber" name="L197" href="#L197">197</a> <em class="jxr_javadoccomment">     * @throws org.apache.commons.math3.exception.TooManyEvaluationsException</em>
<a class="jxr_linenumber" name="L198" href="#L198">198</a> <em class="jxr_javadoccomment">     * if the maximal number of evaluations is exceeded.</em>
<a class="jxr_linenumber" name="L199" href="#L199">199</a> <em class="jxr_javadoccomment">     * @deprecated As of 3.1. Please use {@link #computeResiduals(double[])},</em>
<a class="jxr_linenumber" name="L200" href="#L200">200</a> <em class="jxr_javadoccomment">     * {@link #computeObjectiveValue(double[])}, {@link #computeCost(double[])}</em>
<a class="jxr_linenumber" name="L201" href="#L201">201</a> <em class="jxr_javadoccomment">     * and {@link #setCost(double)} instead.</em>
<a class="jxr_linenumber" name="L202" href="#L202">202</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L203" href="#L203">203</a>     @Deprecated
<a class="jxr_linenumber" name="L204" href="#L204">204</a>     <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">void</strong> updateResidualsAndCost() {
<a class="jxr_linenumber" name="L205" href="#L205">205</a>         objective = computeObjectiveValue(point);
<a class="jxr_linenumber" name="L206" href="#L206">206</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] res = computeResiduals(objective);
<a class="jxr_linenumber" name="L207" href="#L207">207</a> 
<a class="jxr_linenumber" name="L208" href="#L208">208</a>         <em class="jxr_comment">// Compute cost.</em>
<a class="jxr_linenumber" name="L209" href="#L209">209</a>         cost = computeCost(res);
<a class="jxr_linenumber" name="L210" href="#L210">210</a> 
<a class="jxr_linenumber" name="L211" href="#L211">211</a>         <em class="jxr_comment">// Compute weighted residuals.</em>
<a class="jxr_linenumber" name="L212" href="#L212">212</a>         <strong class="jxr_keyword">final</strong> <a href="../../../../../../org/apache/commons/math3/linear/ArrayRealVector.html">ArrayRealVector</a> residuals = <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/linear/ArrayRealVector.html">ArrayRealVector</a>(res);
<a class="jxr_linenumber" name="L213" href="#L213">213</a>         weightedResiduals = weightMatrixSqrt.operate(residuals).toArray();
<a class="jxr_linenumber" name="L214" href="#L214">214</a>     }
<a class="jxr_linenumber" name="L215" href="#L215">215</a> 
<a class="jxr_linenumber" name="L216" href="#L216">216</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L217" href="#L217">217</a> <em class="jxr_javadoccomment">     * Computes the cost.</em>
<a class="jxr_linenumber" name="L218" href="#L218">218</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L219" href="#L219">219</a> <em class="jxr_javadoccomment">     * @param residuals Residuals.</em>
<a class="jxr_linenumber" name="L220" href="#L220">220</a> <em class="jxr_javadoccomment">     * @return the cost.</em>
<a class="jxr_linenumber" name="L221" href="#L221">221</a> <em class="jxr_javadoccomment">     * @see #computeResiduals(double[])</em>
<a class="jxr_linenumber" name="L222" href="#L222">222</a> <em class="jxr_javadoccomment">     * @since 3.1</em>
<a class="jxr_linenumber" name="L223" href="#L223">223</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L224" href="#L224">224</a>     <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">double</strong> computeCost(<strong class="jxr_keyword">double</strong>[] residuals) {
<a class="jxr_linenumber" name="L225" href="#L225">225</a>         <strong class="jxr_keyword">final</strong> <a href="../../../../../../org/apache/commons/math3/linear/ArrayRealVector.html">ArrayRealVector</a> r = <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/linear/ArrayRealVector.html">ArrayRealVector</a>(residuals);
<a class="jxr_linenumber" name="L226" href="#L226">226</a>         <strong class="jxr_keyword">return</strong> FastMath.sqrt(r.dotProduct(getWeight().operate(r)));
<a class="jxr_linenumber" name="L227" href="#L227">227</a>     }
<a class="jxr_linenumber" name="L228" href="#L228">228</a> 
<a class="jxr_linenumber" name="L229" href="#L229">229</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L230" href="#L230">230</a> <em class="jxr_javadoccomment">     * Get the Root Mean Square value.</em>
<a class="jxr_linenumber" name="L231" href="#L231">231</a> <em class="jxr_javadoccomment">     * Get the Root Mean Square value, i.e. the root of the arithmetic</em>
<a class="jxr_linenumber" name="L232" href="#L232">232</a> <em class="jxr_javadoccomment">     * mean of the square of all weighted residuals. This is related to the</em>
<a class="jxr_linenumber" name="L233" href="#L233">233</a> <em class="jxr_javadoccomment">     * criterion that is minimized by the optimizer as follows: if</em>
<a class="jxr_linenumber" name="L234" href="#L234">234</a> <em class="jxr_javadoccomment">     * &lt;em&gt;c&lt;/em&gt; if the criterion, and &lt;em&gt;n&lt;/em&gt; is the number of</em>
<a class="jxr_linenumber" name="L235" href="#L235">235</a> <em class="jxr_javadoccomment">     * measurements, then the RMS is &lt;em&gt;sqrt (c/n)&lt;/em&gt;.</em>
<a class="jxr_linenumber" name="L236" href="#L236">236</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L237" href="#L237">237</a> <em class="jxr_javadoccomment">     * @return RMS value</em>
<a class="jxr_linenumber" name="L238" href="#L238">238</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L239" href="#L239">239</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">double</strong> getRMS() {
<a class="jxr_linenumber" name="L240" href="#L240">240</a>         <strong class="jxr_keyword">return</strong> FastMath.sqrt(getChiSquare() / rows);
<a class="jxr_linenumber" name="L241" href="#L241">241</a>     }
<a class="jxr_linenumber" name="L242" href="#L242">242</a> 
<a class="jxr_linenumber" name="L243" href="#L243">243</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L244" href="#L244">244</a> <em class="jxr_javadoccomment">     * Get a Chi-Square-like value assuming the N residuals follow N</em>
<a class="jxr_linenumber" name="L245" href="#L245">245</a> <em class="jxr_javadoccomment">     * distinct normal distributions centered on 0 and whose variances are</em>
<a class="jxr_linenumber" name="L246" href="#L246">246</a> <em class="jxr_javadoccomment">     * the reciprocal of the weights.</em>
<a class="jxr_linenumber" name="L247" href="#L247">247</a> <em class="jxr_javadoccomment">     * @return chi-square value</em>
<a class="jxr_linenumber" name="L248" href="#L248">248</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L249" href="#L249">249</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">double</strong> getChiSquare() {
<a class="jxr_linenumber" name="L250" href="#L250">250</a>         <strong class="jxr_keyword">return</strong> cost * cost;
<a class="jxr_linenumber" name="L251" href="#L251">251</a>     }
<a class="jxr_linenumber" name="L252" href="#L252">252</a> 
<a class="jxr_linenumber" name="L253" href="#L253">253</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L254" href="#L254">254</a> <em class="jxr_javadoccomment">     * Gets the square-root of the weight matrix.</em>
<a class="jxr_linenumber" name="L255" href="#L255">255</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L256" href="#L256">256</a> <em class="jxr_javadoccomment">     * @return the square-root of the weight matrix.</em>
<a class="jxr_linenumber" name="L257" href="#L257">257</a> <em class="jxr_javadoccomment">     * @since 3.1</em>
<a class="jxr_linenumber" name="L258" href="#L258">258</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L259" href="#L259">259</a>     <strong class="jxr_keyword">public</strong> <a href="../../../../../../org/apache/commons/math3/linear/RealMatrix.html">RealMatrix</a> getWeightSquareRoot() {
<a class="jxr_linenumber" name="L260" href="#L260">260</a>         <strong class="jxr_keyword">return</strong> weightMatrixSqrt.copy();
<a class="jxr_linenumber" name="L261" href="#L261">261</a>     }
<a class="jxr_linenumber" name="L262" href="#L262">262</a> 
<a class="jxr_linenumber" name="L263" href="#L263">263</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L264" href="#L264">264</a> <em class="jxr_javadoccomment">     * Sets the cost.</em>
<a class="jxr_linenumber" name="L265" href="#L265">265</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L266" href="#L266">266</a> <em class="jxr_javadoccomment">     * @param cost Cost value.</em>
<a class="jxr_linenumber" name="L267" href="#L267">267</a> <em class="jxr_javadoccomment">     * @since 3.1</em>
<a class="jxr_linenumber" name="L268" href="#L268">268</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L269" href="#L269">269</a>     <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">void</strong> setCost(<strong class="jxr_keyword">double</strong> cost) {
<a class="jxr_linenumber" name="L270" href="#L270">270</a>         <strong class="jxr_keyword">this</strong>.cost = cost;
<a class="jxr_linenumber" name="L271" href="#L271">271</a>     }
<a class="jxr_linenumber" name="L272" href="#L272">272</a> 
<a class="jxr_linenumber" name="L273" href="#L273">273</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L274" href="#L274">274</a> <em class="jxr_javadoccomment">     * Get the covariance matrix of the optimized parameters.</em>
<a class="jxr_linenumber" name="L275" href="#L275">275</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L276" href="#L276">276</a> <em class="jxr_javadoccomment">     * @return the covariance matrix.</em>
<a class="jxr_linenumber" name="L277" href="#L277">277</a> <em class="jxr_javadoccomment">     * @throws org.apache.commons.math3.linear.SingularMatrixException</em>
<a class="jxr_linenumber" name="L278" href="#L278">278</a> <em class="jxr_javadoccomment">     * if the covariance matrix cannot be computed (singular problem).</em>
<a class="jxr_linenumber" name="L279" href="#L279">279</a> <em class="jxr_javadoccomment">     * @see #getCovariances(double)</em>
<a class="jxr_linenumber" name="L280" href="#L280">280</a> <em class="jxr_javadoccomment">     * @deprecated As of 3.1. Please use {@link #computeCovariances(double[],double)}</em>
<a class="jxr_linenumber" name="L281" href="#L281">281</a> <em class="jxr_javadoccomment">     * instead.</em>
<a class="jxr_linenumber" name="L282" href="#L282">282</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L283" href="#L283">283</a>     @Deprecated
<a class="jxr_linenumber" name="L284" href="#L284">284</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">double</strong>[][] getCovariances() {
<a class="jxr_linenumber" name="L285" href="#L285">285</a>         <strong class="jxr_keyword">return</strong> getCovariances(DEFAULT_SINGULARITY_THRESHOLD);
<a class="jxr_linenumber" name="L286" href="#L286">286</a>     }
<a class="jxr_linenumber" name="L287" href="#L287">287</a> 
<a class="jxr_linenumber" name="L288" href="#L288">288</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L289" href="#L289">289</a> <em class="jxr_javadoccomment">     * Get the covariance matrix of the optimized parameters.</em>
<a class="jxr_linenumber" name="L290" href="#L290">290</a> <em class="jxr_javadoccomment">     * &lt;br/&gt;</em>
<a class="jxr_linenumber" name="L291" href="#L291">291</a> <em class="jxr_javadoccomment">     * Note that this operation involves the inversion of the</em>
<a class="jxr_linenumber" name="L292" href="#L292">292</a> <em class="jxr_javadoccomment">     * &lt;code&gt;J&lt;sup&gt;T&lt;/sup&gt;J&lt;/code&gt; matrix, where {@code J} is the</em>
<a class="jxr_linenumber" name="L293" href="#L293">293</a> <em class="jxr_javadoccomment">     * Jacobian matrix.</em>
<a class="jxr_linenumber" name="L294" href="#L294">294</a> <em class="jxr_javadoccomment">     * The {@code threshold} parameter is a way for the caller to specify</em>
<a class="jxr_linenumber" name="L295" href="#L295">295</a> <em class="jxr_javadoccomment">     * that the result of this computation should be considered meaningless,</em>
<a class="jxr_linenumber" name="L296" href="#L296">296</a> <em class="jxr_javadoccomment">     * and thus trigger an exception.</em>
<a class="jxr_linenumber" name="L297" href="#L297">297</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L298" href="#L298">298</a> <em class="jxr_javadoccomment">     * @param threshold Singularity threshold.</em>
<a class="jxr_linenumber" name="L299" href="#L299">299</a> <em class="jxr_javadoccomment">     * @return the covariance matrix.</em>
<a class="jxr_linenumber" name="L300" href="#L300">300</a> <em class="jxr_javadoccomment">     * @throws org.apache.commons.math3.linear.SingularMatrixException</em>
<a class="jxr_linenumber" name="L301" href="#L301">301</a> <em class="jxr_javadoccomment">     * if the covariance matrix cannot be computed (singular problem).</em>
<a class="jxr_linenumber" name="L302" href="#L302">302</a> <em class="jxr_javadoccomment">     * @deprecated As of 3.1. Please use {@link #computeCovariances(double[],double)}</em>
<a class="jxr_linenumber" name="L303" href="#L303">303</a> <em class="jxr_javadoccomment">     * instead.</em>
<a class="jxr_linenumber" name="L304" href="#L304">304</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L305" href="#L305">305</a>     @Deprecated
<a class="jxr_linenumber" name="L306" href="#L306">306</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">double</strong>[][] getCovariances(<strong class="jxr_keyword">double</strong> threshold) {
<a class="jxr_linenumber" name="L307" href="#L307">307</a>         <strong class="jxr_keyword">return</strong> computeCovariances(point, threshold);
<a class="jxr_linenumber" name="L308" href="#L308">308</a>     }
<a class="jxr_linenumber" name="L309" href="#L309">309</a> 
<a class="jxr_linenumber" name="L310" href="#L310">310</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L311" href="#L311">311</a> <em class="jxr_javadoccomment">     * Get the covariance matrix of the optimized parameters.</em>
<a class="jxr_linenumber" name="L312" href="#L312">312</a> <em class="jxr_javadoccomment">     * &lt;br/&gt;</em>
<a class="jxr_linenumber" name="L313" href="#L313">313</a> <em class="jxr_javadoccomment">     * Note that this operation involves the inversion of the</em>
<a class="jxr_linenumber" name="L314" href="#L314">314</a> <em class="jxr_javadoccomment">     * &lt;code&gt;J&lt;sup&gt;T&lt;/sup&gt;J&lt;/code&gt; matrix, where {@code J} is the</em>
<a class="jxr_linenumber" name="L315" href="#L315">315</a> <em class="jxr_javadoccomment">     * Jacobian matrix.</em>
<a class="jxr_linenumber" name="L316" href="#L316">316</a> <em class="jxr_javadoccomment">     * The {@code threshold} parameter is a way for the caller to specify</em>
<a class="jxr_linenumber" name="L317" href="#L317">317</a> <em class="jxr_javadoccomment">     * that the result of this computation should be considered meaningless,</em>
<a class="jxr_linenumber" name="L318" href="#L318">318</a> <em class="jxr_javadoccomment">     * and thus trigger an exception.</em>
<a class="jxr_linenumber" name="L319" href="#L319">319</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L320" href="#L320">320</a> <em class="jxr_javadoccomment">     * @param params Model parameters.</em>
<a class="jxr_linenumber" name="L321" href="#L321">321</a> <em class="jxr_javadoccomment">     * @param threshold Singularity threshold.</em>
<a class="jxr_linenumber" name="L322" href="#L322">322</a> <em class="jxr_javadoccomment">     * @return the covariance matrix.</em>
<a class="jxr_linenumber" name="L323" href="#L323">323</a> <em class="jxr_javadoccomment">     * @throws org.apache.commons.math3.linear.SingularMatrixException</em>
<a class="jxr_linenumber" name="L324" href="#L324">324</a> <em class="jxr_javadoccomment">     * if the covariance matrix cannot be computed (singular problem).</em>
<a class="jxr_linenumber" name="L325" href="#L325">325</a> <em class="jxr_javadoccomment">     * @since 3.1</em>
<a class="jxr_linenumber" name="L326" href="#L326">326</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L327" href="#L327">327</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">double</strong>[][] computeCovariances(<strong class="jxr_keyword">double</strong>[] params,
<a class="jxr_linenumber" name="L328" href="#L328">328</a>                                          <strong class="jxr_keyword">double</strong> threshold) {
<a class="jxr_linenumber" name="L329" href="#L329">329</a>         <em class="jxr_comment">// Set up the Jacobian.</em>
<a class="jxr_linenumber" name="L330" href="#L330">330</a>         <strong class="jxr_keyword">final</strong> <a href="../../../../../../org/apache/commons/math3/linear/RealMatrix.html">RealMatrix</a> j = computeWeightedJacobian(params);
<a class="jxr_linenumber" name="L331" href="#L331">331</a> 
<a class="jxr_linenumber" name="L332" href="#L332">332</a>         <em class="jxr_comment">// Compute transpose(J)J.</em>
<a class="jxr_linenumber" name="L333" href="#L333">333</a>         <strong class="jxr_keyword">final</strong> <a href="../../../../../../org/apache/commons/math3/linear/RealMatrix.html">RealMatrix</a> jTj = j.transpose().multiply(j);
<a class="jxr_linenumber" name="L334" href="#L334">334</a> 
<a class="jxr_linenumber" name="L335" href="#L335">335</a>         <em class="jxr_comment">// Compute the covariances matrix.</em>
<a class="jxr_linenumber" name="L336" href="#L336">336</a>         <strong class="jxr_keyword">final</strong> <a href="../../../../../../org/apache/commons/math3/linear/DecompositionSolver.html">DecompositionSolver</a> solver
<a class="jxr_linenumber" name="L337" href="#L337">337</a>             = <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/linear/QRDecomposition.html">QRDecomposition</a>(jTj, threshold).getSolver();
<a class="jxr_linenumber" name="L338" href="#L338">338</a>         <strong class="jxr_keyword">return</strong> solver.getInverse().getData();
<a class="jxr_linenumber" name="L339" href="#L339">339</a>     }
<a class="jxr_linenumber" name="L340" href="#L340">340</a> 
<a class="jxr_linenumber" name="L341" href="#L341">341</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L342" href="#L342">342</a> <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L343" href="#L343">343</a> <em class="jxr_javadoccomment">     * Returns an estimate of the standard deviation of each parameter. The</em>
<a class="jxr_linenumber" name="L344" href="#L344">344</a> <em class="jxr_javadoccomment">     * returned values are the so-called (asymptotic) standard errors on the</em>
<a class="jxr_linenumber" name="L345" href="#L345">345</a> <em class="jxr_javadoccomment">     * parameters, defined as {@code sd(a[i]) = sqrt(S / (n - m) * C[i][i])},</em>
<a class="jxr_linenumber" name="L346" href="#L346">346</a> <em class="jxr_javadoccomment">     * where {@code a[i]} is the optimized value of the {@code i}-th parameter,</em>
<a class="jxr_linenumber" name="L347" href="#L347">347</a> <em class="jxr_javadoccomment">     * {@code S} is the minimized value of the sum of squares objective function</em>
<a class="jxr_linenumber" name="L348" href="#L348">348</a> <em class="jxr_javadoccomment">     * (as returned by {@link #getChiSquare()}), {@code n} is the number of</em>
<a class="jxr_linenumber" name="L349" href="#L349">349</a> <em class="jxr_javadoccomment">     * observations, {@code m} is the number of parameters and {@code C} is the</em>
<a class="jxr_linenumber" name="L350" href="#L350">350</a> <em class="jxr_javadoccomment">     * covariance matrix.</em>
<a class="jxr_linenumber" name="L351" href="#L351">351</a> <em class="jxr_javadoccomment">     * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L352" href="#L352">352</a> <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L353" href="#L353">353</a> <em class="jxr_javadoccomment">     * See also</em>
<a class="jxr_linenumber" name="L354" href="#L354">354</a> <em class="jxr_javadoccomment">     * &lt;a href="<a href="http://en.wikipedia.org/wiki/Least_squares" target="alexandria_uri">http://en.wikipedia.org/wiki/Least_squares</a>"&gt;Wikipedia&lt;/a&gt;,</em>
<a class="jxr_linenumber" name="L355" href="#L355">355</a> <em class="jxr_javadoccomment">     * or</em>
<a class="jxr_linenumber" name="L356" href="#L356">356</a> <em class="jxr_javadoccomment">     * &lt;a href="<a href="http://mathworld.wolfram.com/LeastSquaresFitting.html" target="alexandria_uri">http://mathworld.wolfram.com/LeastSquaresFitting.html</a>"&gt;MathWorld&lt;/a&gt;,</em>
<a class="jxr_linenumber" name="L357" href="#L357">357</a> <em class="jxr_javadoccomment">     * equations (34) and (35) for a particular case.</em>
<a class="jxr_linenumber" name="L358" href="#L358">358</a> <em class="jxr_javadoccomment">     * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L359" href="#L359">359</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L360" href="#L360">360</a> <em class="jxr_javadoccomment">     * @return an estimate of the standard deviation of the optimized parameters</em>
<a class="jxr_linenumber" name="L361" href="#L361">361</a> <em class="jxr_javadoccomment">     * @throws org.apache.commons.math3.linear.SingularMatrixException</em>
<a class="jxr_linenumber" name="L362" href="#L362">362</a> <em class="jxr_javadoccomment">     * if the covariance matrix cannot be computed.</em>
<a class="jxr_linenumber" name="L363" href="#L363">363</a> <em class="jxr_javadoccomment">     * @throws NumberIsTooSmallException if the number of degrees of freedom is not</em>
<a class="jxr_linenumber" name="L364" href="#L364">364</a> <em class="jxr_javadoccomment">     * positive, i.e. the number of measurements is less or equal to the number of</em>
<a class="jxr_linenumber" name="L365" href="#L365">365</a> <em class="jxr_javadoccomment">     * parameters.</em>
<a class="jxr_linenumber" name="L366" href="#L366">366</a> <em class="jxr_javadoccomment">     * @deprecated as of version 3.1, {@link #computeSigma(double[],double)} should be used</em>
<a class="jxr_linenumber" name="L367" href="#L367">367</a> <em class="jxr_javadoccomment">     * instead. It should be emphasized that {@code guessParametersErrors} and</em>
<a class="jxr_linenumber" name="L368" href="#L368">368</a> <em class="jxr_javadoccomment">     * {@code computeSigma} are &lt;em&gt;not&lt;/em&gt; strictly equivalent.</em>
<a class="jxr_linenumber" name="L369" href="#L369">369</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L370" href="#L370">370</a>     @Deprecated
<a class="jxr_linenumber" name="L371" href="#L371">371</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">double</strong>[] guessParametersErrors() {
<a class="jxr_linenumber" name="L372" href="#L372">372</a>         <strong class="jxr_keyword">if</strong> (rows &lt;= cols) {
<a class="jxr_linenumber" name="L373" href="#L373">373</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/exception/NumberIsTooSmallException.html">NumberIsTooSmallException</a>(LocalizedFormats.NO_DEGREES_OF_FREEDOM,
<a class="jxr_linenumber" name="L374" href="#L374">374</a>                                                 rows, cols, false);
<a class="jxr_linenumber" name="L375" href="#L375">375</a>         }
<a class="jxr_linenumber" name="L376" href="#L376">376</a>         <strong class="jxr_keyword">double</strong>[] errors = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[cols];
<a class="jxr_linenumber" name="L377" href="#L377">377</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> c = FastMath.sqrt(getChiSquare() / (rows - cols));
<a class="jxr_linenumber" name="L378" href="#L378">378</a>         <strong class="jxr_keyword">double</strong>[][] covar = computeCovariances(point, 1e-14);
<a class="jxr_linenumber" name="L379" href="#L379">379</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; errors.length; ++i) {
<a class="jxr_linenumber" name="L380" href="#L380">380</a>             errors[i] = FastMath.sqrt(covar[i][i]) * c;
<a class="jxr_linenumber" name="L381" href="#L381">381</a>         }
<a class="jxr_linenumber" name="L382" href="#L382">382</a>         <strong class="jxr_keyword">return</strong> errors;
<a class="jxr_linenumber" name="L383" href="#L383">383</a>     }
<a class="jxr_linenumber" name="L384" href="#L384">384</a> 
<a class="jxr_linenumber" name="L385" href="#L385">385</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L386" href="#L386">386</a> <em class="jxr_javadoccomment">     * Computes an estimate of the standard deviation of the parameters. The</em>
<a class="jxr_linenumber" name="L387" href="#L387">387</a> <em class="jxr_javadoccomment">     * returned values are the square root of the diagonal coefficients of the</em>
<a class="jxr_linenumber" name="L388" href="#L388">388</a> <em class="jxr_javadoccomment">     * covariance matrix, {@code sd(a[i]) ~= sqrt(C[i][i])}, where {@code a[i]}</em>
<a class="jxr_linenumber" name="L389" href="#L389">389</a> <em class="jxr_javadoccomment">     * is the optimized value of the {@code i}-th parameter, and {@code C} is</em>
<a class="jxr_linenumber" name="L390" href="#L390">390</a> <em class="jxr_javadoccomment">     * the covariance matrix.</em>
<a class="jxr_linenumber" name="L391" href="#L391">391</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L392" href="#L392">392</a> <em class="jxr_javadoccomment">     * @param params Model parameters.</em>
<a class="jxr_linenumber" name="L393" href="#L393">393</a> <em class="jxr_javadoccomment">     * @param covarianceSingularityThreshold Singularity threshold (see</em>
<a class="jxr_linenumber" name="L394" href="#L394">394</a> <em class="jxr_javadoccomment">     * {@link #computeCovariances(double[],double) computeCovariances}).</em>
<a class="jxr_linenumber" name="L395" href="#L395">395</a> <em class="jxr_javadoccomment">     * @return an estimate of the standard deviation of the optimized parameters</em>
<a class="jxr_linenumber" name="L396" href="#L396">396</a> <em class="jxr_javadoccomment">     * @throws org.apache.commons.math3.linear.SingularMatrixException</em>
<a class="jxr_linenumber" name="L397" href="#L397">397</a> <em class="jxr_javadoccomment">     * if the covariance matrix cannot be computed.</em>
<a class="jxr_linenumber" name="L398" href="#L398">398</a> <em class="jxr_javadoccomment">     * @since 3.1</em>
<a class="jxr_linenumber" name="L399" href="#L399">399</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L400" href="#L400">400</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">double</strong>[] computeSigma(<strong class="jxr_keyword">double</strong>[] params,
<a class="jxr_linenumber" name="L401" href="#L401">401</a>                                  <strong class="jxr_keyword">double</strong> covarianceSingularityThreshold) {
<a class="jxr_linenumber" name="L402" href="#L402">402</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> nC = params.length;
<a class="jxr_linenumber" name="L403" href="#L403">403</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] sig = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[nC];
<a class="jxr_linenumber" name="L404" href="#L404">404</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[][] cov = computeCovariances(params, covarianceSingularityThreshold);
<a class="jxr_linenumber" name="L405" href="#L405">405</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; nC; ++i) {
<a class="jxr_linenumber" name="L406" href="#L406">406</a>             sig[i] = FastMath.sqrt(cov[i][i]);
<a class="jxr_linenumber" name="L407" href="#L407">407</a>         }
<a class="jxr_linenumber" name="L408" href="#L408">408</a>         <strong class="jxr_keyword">return</strong> sig;
<a class="jxr_linenumber" name="L409" href="#L409">409</a>     }
<a class="jxr_linenumber" name="L410" href="#L410">410</a> 
<a class="jxr_linenumber" name="L411" href="#L411">411</a>     <em class="jxr_javadoccomment">/** {@inheritDoc}</em>
<a class="jxr_linenumber" name="L412" href="#L412">412</a> <em class="jxr_javadoccomment">     * @deprecated As of 3.1. Please use</em>
<a class="jxr_linenumber" name="L413" href="#L413">413</a> <em class="jxr_javadoccomment">     * {@link BaseAbstractMultivariateVectorOptimizer#optimize(int,</em>
<a class="jxr_linenumber" name="L414" href="#L414">414</a> <em class="jxr_javadoccomment">     * org.apache.commons.math3.analysis.MultivariateVectorFunction,OptimizationData[])</em>
<a class="jxr_linenumber" name="L415" href="#L415">415</a> <em class="jxr_javadoccomment">     * optimize(int,MultivariateDifferentiableVectorFunction,OptimizationData...)}</em>
<a class="jxr_linenumber" name="L416" href="#L416">416</a> <em class="jxr_javadoccomment">     * instead.</em>
<a class="jxr_linenumber" name="L417" href="#L417">417</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L418" href="#L418">418</a>     @Override
<a class="jxr_linenumber" name="L419" href="#L419">419</a>     @Deprecated
<a class="jxr_linenumber" name="L420" href="#L420">420</a>     <strong class="jxr_keyword">public</strong> <a href="../../../../../../org/apache/commons/math3/optimization/PointVectorValuePair.html">PointVectorValuePair</a> optimize(<strong class="jxr_keyword">int</strong> maxEval,
<a class="jxr_linenumber" name="L421" href="#L421">421</a>                                          <strong class="jxr_keyword">final</strong> <a href="../../../../../../org/apache/commons/math3/analysis/DifferentiableMultivariateVectorFunction.html">DifferentiableMultivariateVectorFunction</a> f,
<a class="jxr_linenumber" name="L422" href="#L422">422</a>                                          <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] target, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] weights,
<a class="jxr_linenumber" name="L423" href="#L423">423</a>                                          <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] startPoint) {
<a class="jxr_linenumber" name="L424" href="#L424">424</a>         <strong class="jxr_keyword">return</strong> optimizeInternal(maxEval,
<a class="jxr_linenumber" name="L425" href="#L425">425</a>                                 FunctionUtils.toMultivariateDifferentiableVectorFunction(f),
<a class="jxr_linenumber" name="L426" href="#L426">426</a>                                 <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/optimization/Target.html">Target</a>(target),
<a class="jxr_linenumber" name="L427" href="#L427">427</a>                                 <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/optimization/Weight.html">Weight</a>(weights),
<a class="jxr_linenumber" name="L428" href="#L428">428</a>                                 <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/optimization/InitialGuess.html">InitialGuess</a>(startPoint));
<a class="jxr_linenumber" name="L429" href="#L429">429</a>     }
<a class="jxr_linenumber" name="L430" href="#L430">430</a> 
<a class="jxr_linenumber" name="L431" href="#L431">431</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L432" href="#L432">432</a> <em class="jxr_javadoccomment">     * Optimize an objective function.</em>
<a class="jxr_linenumber" name="L433" href="#L433">433</a> <em class="jxr_javadoccomment">     * Optimization is considered to be a weighted least-squares minimization.</em>
<a class="jxr_linenumber" name="L434" href="#L434">434</a> <em class="jxr_javadoccomment">     * The cost function to be minimized is</em>
<a class="jxr_linenumber" name="L435" href="#L435">435</a> <em class="jxr_javadoccomment">     * &lt;code&gt;&amp;sum;weight&lt;sub&gt;i&lt;/sub&gt;(objective&lt;sub&gt;i&lt;/sub&gt; - target&lt;sub&gt;i&lt;/sub&gt;)&lt;sup&gt;2&lt;/sup&gt;&lt;/code&gt;</em>
<a class="jxr_linenumber" name="L436" href="#L436">436</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L437" href="#L437">437</a> <em class="jxr_javadoccomment">     * @param f Objective function.</em>
<a class="jxr_linenumber" name="L438" href="#L438">438</a> <em class="jxr_javadoccomment">     * @param target Target value for the objective functions at optimum.</em>
<a class="jxr_linenumber" name="L439" href="#L439">439</a> <em class="jxr_javadoccomment">     * @param weights Weights for the least squares cost computation.</em>
<a class="jxr_linenumber" name="L440" href="#L440">440</a> <em class="jxr_javadoccomment">     * @param startPoint Start point for optimization.</em>
<a class="jxr_linenumber" name="L441" href="#L441">441</a> <em class="jxr_javadoccomment">     * @return the point/value pair giving the optimal value for objective</em>
<a class="jxr_linenumber" name="L442" href="#L442">442</a> <em class="jxr_javadoccomment">     * function.</em>
<a class="jxr_linenumber" name="L443" href="#L443">443</a> <em class="jxr_javadoccomment">     * @param maxEval Maximum number of function evaluations.</em>
<a class="jxr_linenumber" name="L444" href="#L444">444</a> <em class="jxr_javadoccomment">     * @throws org.apache.commons.math3.exception.DimensionMismatchException</em>
<a class="jxr_linenumber" name="L445" href="#L445">445</a> <em class="jxr_javadoccomment">     * if the start point dimension is wrong.</em>
<a class="jxr_linenumber" name="L446" href="#L446">446</a> <em class="jxr_javadoccomment">     * @throws org.apache.commons.math3.exception.TooManyEvaluationsException</em>
<a class="jxr_linenumber" name="L447" href="#L447">447</a> <em class="jxr_javadoccomment">     * if the maximal number of evaluations is exceeded.</em>
<a class="jxr_linenumber" name="L448" href="#L448">448</a> <em class="jxr_javadoccomment">     * @throws org.apache.commons.math3.exception.NullArgumentException if</em>
<a class="jxr_linenumber" name="L449" href="#L449">449</a> <em class="jxr_javadoccomment">     * any argument is {@code null}.</em>
<a class="jxr_linenumber" name="L450" href="#L450">450</a> <em class="jxr_javadoccomment">     * @deprecated As of 3.1. Please use</em>
<a class="jxr_linenumber" name="L451" href="#L451">451</a> <em class="jxr_javadoccomment">     * {@link BaseAbstractMultivariateVectorOptimizer#optimize(int,</em>
<a class="jxr_linenumber" name="L452" href="#L452">452</a> <em class="jxr_javadoccomment">     * org.apache.commons.math3.analysis.MultivariateVectorFunction,OptimizationData[])</em>
<a class="jxr_linenumber" name="L453" href="#L453">453</a> <em class="jxr_javadoccomment">     * optimize(int,MultivariateDifferentiableVectorFunction,OptimizationData...)}</em>
<a class="jxr_linenumber" name="L454" href="#L454">454</a> <em class="jxr_javadoccomment">     * instead.</em>
<a class="jxr_linenumber" name="L455" href="#L455">455</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L456" href="#L456">456</a>     @Deprecated
<a class="jxr_linenumber" name="L457" href="#L457">457</a>     <strong class="jxr_keyword">public</strong> <a href="../../../../../../org/apache/commons/math3/optimization/PointVectorValuePair.html">PointVectorValuePair</a> optimize(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> maxEval,
<a class="jxr_linenumber" name="L458" href="#L458">458</a>                                          <strong class="jxr_keyword">final</strong> <a href="../../../../../../org/apache/commons/math3/analysis/differentiation/MultivariateDifferentiableVectorFunction.html">MultivariateDifferentiableVectorFunction</a> f,
<a class="jxr_linenumber" name="L459" href="#L459">459</a>                                          <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] target, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] weights,
<a class="jxr_linenumber" name="L460" href="#L460">460</a>                                          <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] startPoint) {
<a class="jxr_linenumber" name="L461" href="#L461">461</a>         <strong class="jxr_keyword">return</strong> optimizeInternal(maxEval, f,
<a class="jxr_linenumber" name="L462" href="#L462">462</a>                                 <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/optimization/Target.html">Target</a>(target),
<a class="jxr_linenumber" name="L463" href="#L463">463</a>                                 <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/optimization/Weight.html">Weight</a>(weights),
<a class="jxr_linenumber" name="L464" href="#L464">464</a>                                 <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/optimization/InitialGuess.html">InitialGuess</a>(startPoint));
<a class="jxr_linenumber" name="L465" href="#L465">465</a>     }
<a class="jxr_linenumber" name="L466" href="#L466">466</a> 
<a class="jxr_linenumber" name="L467" href="#L467">467</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L468" href="#L468">468</a> <em class="jxr_javadoccomment">     * Optimize an objective function.</em>
<a class="jxr_linenumber" name="L469" href="#L469">469</a> <em class="jxr_javadoccomment">     * Optimization is considered to be a weighted least-squares minimization.</em>
<a class="jxr_linenumber" name="L470" href="#L470">470</a> <em class="jxr_javadoccomment">     * The cost function to be minimized is</em>
<a class="jxr_linenumber" name="L471" href="#L471">471</a> <em class="jxr_javadoccomment">     * &lt;code&gt;&amp;sum;weight&lt;sub&gt;i&lt;/sub&gt;(objective&lt;sub&gt;i&lt;/sub&gt; - target&lt;sub&gt;i&lt;/sub&gt;)&lt;sup&gt;2&lt;/sup&gt;&lt;/code&gt;</em>
<a class="jxr_linenumber" name="L472" href="#L472">472</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L473" href="#L473">473</a> <em class="jxr_javadoccomment">     * @param maxEval Allowed number of evaluations of the objective function.</em>
<a class="jxr_linenumber" name="L474" href="#L474">474</a> <em class="jxr_javadoccomment">     * @param f Objective function.</em>
<a class="jxr_linenumber" name="L475" href="#L475">475</a> <em class="jxr_javadoccomment">     * @param optData Optimization data. The following data will be looked for:</em>
<a class="jxr_linenumber" name="L476" href="#L476">476</a> <em class="jxr_javadoccomment">     * &lt;ul&gt;</em>
<a class="jxr_linenumber" name="L477" href="#L477">477</a> <em class="jxr_javadoccomment">     *  &lt;li&gt;{@link Target}&lt;/li&gt;</em>
<a class="jxr_linenumber" name="L478" href="#L478">478</a> <em class="jxr_javadoccomment">     *  &lt;li&gt;{@link Weight}&lt;/li&gt;</em>
<a class="jxr_linenumber" name="L479" href="#L479">479</a> <em class="jxr_javadoccomment">     *  &lt;li&gt;{@link InitialGuess}&lt;/li&gt;</em>
<a class="jxr_linenumber" name="L480" href="#L480">480</a> <em class="jxr_javadoccomment">     * &lt;/ul&gt;</em>
<a class="jxr_linenumber" name="L481" href="#L481">481</a> <em class="jxr_javadoccomment">     * @return the point/value pair giving the optimal value of the objective</em>
<a class="jxr_linenumber" name="L482" href="#L482">482</a> <em class="jxr_javadoccomment">     * function.</em>
<a class="jxr_linenumber" name="L483" href="#L483">483</a> <em class="jxr_javadoccomment">     * @throws org.apache.commons.math3.exception.TooManyEvaluationsException if</em>
<a class="jxr_linenumber" name="L484" href="#L484">484</a> <em class="jxr_javadoccomment">     * the maximal number of evaluations is exceeded.</em>
<a class="jxr_linenumber" name="L485" href="#L485">485</a> <em class="jxr_javadoccomment">     * @throws DimensionMismatchException if the target, and weight arguments</em>
<a class="jxr_linenumber" name="L486" href="#L486">486</a> <em class="jxr_javadoccomment">     * have inconsistent dimensions.</em>
<a class="jxr_linenumber" name="L487" href="#L487">487</a> <em class="jxr_javadoccomment">     * @see BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,</em>
<a class="jxr_linenumber" name="L488" href="#L488">488</a> <em class="jxr_javadoccomment">     * org.apache.commons.math3.analysis.MultivariateVectorFunction,OptimizationData[])</em>
<a class="jxr_linenumber" name="L489" href="#L489">489</a> <em class="jxr_javadoccomment">     * @since 3.1</em>
<a class="jxr_linenumber" name="L490" href="#L490">490</a> <em class="jxr_javadoccomment">     * @deprecated As of 3.1. Override is necessary only until this class's generic</em>
<a class="jxr_linenumber" name="L491" href="#L491">491</a> <em class="jxr_javadoccomment">     * argument is changed to {@code MultivariateDifferentiableVectorFunction}.</em>
<a class="jxr_linenumber" name="L492" href="#L492">492</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L493" href="#L493">493</a>     @Deprecated
<a class="jxr_linenumber" name="L494" href="#L494">494</a>     <strong class="jxr_keyword">protected</strong> <a href="../../../../../../org/apache/commons/math3/optimization/PointVectorValuePair.html">PointVectorValuePair</a> optimizeInternal(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> maxEval,
<a class="jxr_linenumber" name="L495" href="#L495">495</a>                                                     <strong class="jxr_keyword">final</strong> <a href="../../../../../../org/apache/commons/math3/analysis/differentiation/MultivariateDifferentiableVectorFunction.html">MultivariateDifferentiableVectorFunction</a> f,
<a class="jxr_linenumber" name="L496" href="#L496">496</a>                                                     OptimizationData... optData) {
<a class="jxr_linenumber" name="L497" href="#L497">497</a>         <em class="jxr_comment">// XXX Conversion will be removed when the generic argument of the</em>
<a class="jxr_linenumber" name="L498" href="#L498">498</a>         <em class="jxr_comment">// base class becomes "MultivariateDifferentiableVectorFunction".</em>
<a class="jxr_linenumber" name="L499" href="#L499">499</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">super</strong>.optimizeInternal(maxEval, FunctionUtils.toDifferentiableMultivariateVectorFunction(f), optData);
<a class="jxr_linenumber" name="L500" href="#L500">500</a>     }
<a class="jxr_linenumber" name="L501" href="#L501">501</a> 
<a class="jxr_linenumber" name="L502" href="#L502">502</a>     <em class="jxr_javadoccomment">/** {@inheritDoc} */</em>
<a class="jxr_linenumber" name="L503" href="#L503">503</a>     @Override
<a class="jxr_linenumber" name="L504" href="#L504">504</a>     <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">void</strong> setUp() {
<a class="jxr_linenumber" name="L505" href="#L505">505</a>         <strong class="jxr_keyword">super</strong>.setUp();
<a class="jxr_linenumber" name="L506" href="#L506">506</a> 
<a class="jxr_linenumber" name="L507" href="#L507">507</a>         <em class="jxr_comment">// Reset counter.</em>
<a class="jxr_linenumber" name="L508" href="#L508">508</a>         jacobianEvaluations = 0;
<a class="jxr_linenumber" name="L509" href="#L509">509</a> 
<a class="jxr_linenumber" name="L510" href="#L510">510</a>         <em class="jxr_comment">// Square-root of the weight matrix.</em>
<a class="jxr_linenumber" name="L511" href="#L511">511</a>         weightMatrixSqrt = squareRoot(getWeight());
<a class="jxr_linenumber" name="L512" href="#L512">512</a> 
<a class="jxr_linenumber" name="L513" href="#L513">513</a>         <em class="jxr_comment">// Store least squares problem characteristics.</em>
<a class="jxr_linenumber" name="L514" href="#L514">514</a>         <em class="jxr_comment">// XXX The conversion won't be necessary when the generic argument of</em>
<a class="jxr_linenumber" name="L515" href="#L515">515</a>         <em class="jxr_comment">// the base class becomes "MultivariateDifferentiableVectorFunction".</em>
<a class="jxr_linenumber" name="L516" href="#L516">516</a>         <em class="jxr_comment">// XXX "jF" is not strictly necessary anymore but is currently more</em>
<a class="jxr_linenumber" name="L517" href="#L517">517</a>         <em class="jxr_comment">// efficient than converting the value returned from "getObjectiveFunction()"</em>
<a class="jxr_linenumber" name="L518" href="#L518">518</a>         <em class="jxr_comment">// every time it is used.</em>
<a class="jxr_linenumber" name="L519" href="#L519">519</a>         jF = FunctionUtils.toMultivariateDifferentiableVectorFunction((DifferentiableMultivariateVectorFunction) getObjectiveFunction());
<a class="jxr_linenumber" name="L520" href="#L520">520</a> 
<a class="jxr_linenumber" name="L521" href="#L521">521</a>         <em class="jxr_comment">// Arrays shared with "private" and "protected" methods.</em>
<a class="jxr_linenumber" name="L522" href="#L522">522</a>         point = getStartPoint();
<a class="jxr_linenumber" name="L523" href="#L523">523</a>         rows = getTarget().length;
<a class="jxr_linenumber" name="L524" href="#L524">524</a>         cols = point.length;
<a class="jxr_linenumber" name="L525" href="#L525">525</a>     }
<a class="jxr_linenumber" name="L526" href="#L526">526</a> 
<a class="jxr_linenumber" name="L527" href="#L527">527</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L528" href="#L528">528</a> <em class="jxr_javadoccomment">     * Computes the residuals.</em>
<a class="jxr_linenumber" name="L529" href="#L529">529</a> <em class="jxr_javadoccomment">     * The residual is the difference between the observed (target)</em>
<a class="jxr_linenumber" name="L530" href="#L530">530</a> <em class="jxr_javadoccomment">     * values and the model (objective function) value.</em>
<a class="jxr_linenumber" name="L531" href="#L531">531</a> <em class="jxr_javadoccomment">     * There is one residual for each element of the vector-valued</em>
<a class="jxr_linenumber" name="L532" href="#L532">532</a> <em class="jxr_javadoccomment">     * function.</em>
<a class="jxr_linenumber" name="L533" href="#L533">533</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L534" href="#L534">534</a> <em class="jxr_javadoccomment">     * @param objectiveValue Value of the the objective function. This is</em>
<a class="jxr_linenumber" name="L535" href="#L535">535</a> <em class="jxr_javadoccomment">     * the value returned from a call to</em>
<a class="jxr_linenumber" name="L536" href="#L536">536</a> <em class="jxr_javadoccomment">     * {@link #computeObjectiveValue(double[]) computeObjectiveValue}</em>
<a class="jxr_linenumber" name="L537" href="#L537">537</a> <em class="jxr_javadoccomment">     * (whose array argument contains the model parameters).</em>
<a class="jxr_linenumber" name="L538" href="#L538">538</a> <em class="jxr_javadoccomment">     * @return the residuals.</em>
<a class="jxr_linenumber" name="L539" href="#L539">539</a> <em class="jxr_javadoccomment">     * @throws DimensionMismatchException if {@code params} has a wrong</em>
<a class="jxr_linenumber" name="L540" href="#L540">540</a> <em class="jxr_javadoccomment">     * length.</em>
<a class="jxr_linenumber" name="L541" href="#L541">541</a> <em class="jxr_javadoccomment">     * @since 3.1</em>
<a class="jxr_linenumber" name="L542" href="#L542">542</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L543" href="#L543">543</a>     <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">double</strong>[] computeResiduals(<strong class="jxr_keyword">double</strong>[] objectiveValue) {
<a class="jxr_linenumber" name="L544" href="#L544">544</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] target = getTarget();
<a class="jxr_linenumber" name="L545" href="#L545">545</a>         <strong class="jxr_keyword">if</strong> (objectiveValue.length != target.length) {
<a class="jxr_linenumber" name="L546" href="#L546">546</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/exception/DimensionMismatchException.html">DimensionMismatchException</a>(target.length,
<a class="jxr_linenumber" name="L547" href="#L547">547</a>                                                  objectiveValue.length);
<a class="jxr_linenumber" name="L548" href="#L548">548</a>         }
<a class="jxr_linenumber" name="L549" href="#L549">549</a> 
<a class="jxr_linenumber" name="L550" href="#L550">550</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] residuals = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[target.length];
<a class="jxr_linenumber" name="L551" href="#L551">551</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; target.length; i++) {
<a class="jxr_linenumber" name="L552" href="#L552">552</a>             residuals[i] = target[i] - objectiveValue[i];
<a class="jxr_linenumber" name="L553" href="#L553">553</a>         }
<a class="jxr_linenumber" name="L554" href="#L554">554</a> 
<a class="jxr_linenumber" name="L555" href="#L555">555</a>         <strong class="jxr_keyword">return</strong> residuals;
<a class="jxr_linenumber" name="L556" href="#L556">556</a>     }
<a class="jxr_linenumber" name="L557" href="#L557">557</a> 
<a class="jxr_linenumber" name="L558" href="#L558">558</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L559" href="#L559">559</a> <em class="jxr_javadoccomment">     * Computes the square-root of the weight matrix.</em>
<a class="jxr_linenumber" name="L560" href="#L560">560</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L561" href="#L561">561</a> <em class="jxr_javadoccomment">     * @param m Symmetric, positive-definite (weight) matrix.</em>
<a class="jxr_linenumber" name="L562" href="#L562">562</a> <em class="jxr_javadoccomment">     * @return the square-root of the weight matrix.</em>
<a class="jxr_linenumber" name="L563" href="#L563">563</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L564" href="#L564">564</a>     <strong class="jxr_keyword">private</strong> <a href="../../../../../../org/apache/commons/math3/linear/RealMatrix.html">RealMatrix</a> squareRoot(<a href="../../../../../../org/apache/commons/math3/linear/RealMatrix.html">RealMatrix</a> m) {
<a class="jxr_linenumber" name="L565" href="#L565">565</a>         <strong class="jxr_keyword">if</strong> (m instanceof DiagonalMatrix) {
<a class="jxr_linenumber" name="L566" href="#L566">566</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> dim = m.getRowDimension();
<a class="jxr_linenumber" name="L567" href="#L567">567</a>             <strong class="jxr_keyword">final</strong> <a href="../../../../../../org/apache/commons/math3/linear/RealMatrix.html">RealMatrix</a> sqrtM = <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/linear/DiagonalMatrix.html">DiagonalMatrix</a>(dim);
<a class="jxr_linenumber" name="L568" href="#L568">568</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; dim; i++) {
<a class="jxr_linenumber" name="L569" href="#L569">569</a>                sqrtM.setEntry(i, i, FastMath.sqrt(m.getEntry(i, i)));
<a class="jxr_linenumber" name="L570" href="#L570">570</a>             }
<a class="jxr_linenumber" name="L571" href="#L571">571</a>             <strong class="jxr_keyword">return</strong> sqrtM;
<a class="jxr_linenumber" name="L572" href="#L572">572</a>         } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L573" href="#L573">573</a>             <strong class="jxr_keyword">final</strong> <a href="../../../../../../org/apache/commons/math3/linear/EigenDecomposition.html">EigenDecomposition</a> dec = <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/linear/EigenDecomposition.html">EigenDecomposition</a>(m);
<a class="jxr_linenumber" name="L574" href="#L574">574</a>             <strong class="jxr_keyword">return</strong> dec.getSquareRoot();
<a class="jxr_linenumber" name="L575" href="#L575">575</a>         }
<a class="jxr_linenumber" name="L576" href="#L576">576</a>     }
<a class="jxr_linenumber" name="L577" href="#L577">577</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2003&#x2013;2016 <a href="http://www.apache.org/">The Apache Software Foundation</a>. All rights reserved.</div>
</body>
</html>
