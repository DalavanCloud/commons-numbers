<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>MapUtils xref</title>
<link type="text/css" rel="stylesheet" href="../../../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../apidocs/org/apache/commons/math3/ml/neuralnet/MapUtils.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Licensed to the Apache Software Foundation (ASF) under one or more</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> * contributor license agreements.  See the NOTICE file distributed with</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * this work for additional information regarding copyright ownership.</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * The ASF licenses this file to You under the Apache License, Version 2.0</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * (the "License"); you may not use this file except in compliance with</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> * the License.  You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *      <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  <strong class="jxr_keyword">package</strong> org.apache.commons.math3.ml.neuralnet;
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> java.util.ArrayList;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> java.util.Collection;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> java.util.Collections;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <strong class="jxr_keyword">import</strong> java.util.HashMap;
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> java.util.List;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> java.util.Comparator;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.NoDataException;
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.ml.distance.DistanceMeasure;
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D;
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.util.Pair;
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <em class="jxr_javadoccomment"> * Utilities for network maps.</em>
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  <em class="jxr_javadoccomment"> * @since 3.3</em>
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../../org/apache/commons/math3/ml/neuralnet/MapUtils.html">MapUtils</a> {
<a class="jxr_linenumber" name="L38" href="#L38">38</a>      <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L39" href="#L39">39</a>  <em class="jxr_javadoccomment">     * Class contains only static methods.</em>
<a class="jxr_linenumber" name="L40" href="#L40">40</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L41" href="#L41">41</a>      <strong class="jxr_keyword">private</strong> <a href="../../../../../../org/apache/commons/math3/ml/neuralnet/MapUtils.html">MapUtils</a>() {}
<a class="jxr_linenumber" name="L42" href="#L42">42</a>  
<a class="jxr_linenumber" name="L43" href="#L43">43</a>      <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L44" href="#L44">44</a>  <em class="jxr_javadoccomment">     * Finds the neuron that best matches the given features.</em>
<a class="jxr_linenumber" name="L45" href="#L45">45</a>  <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L46" href="#L46">46</a>  <em class="jxr_javadoccomment">     * @param features Data.</em>
<a class="jxr_linenumber" name="L47" href="#L47">47</a>  <em class="jxr_javadoccomment">     * @param neurons List of neurons to scan. If the list is empty</em>
<a class="jxr_linenumber" name="L48" href="#L48">48</a>  <em class="jxr_javadoccomment">     * {@code null} will be returned.</em>
<a class="jxr_linenumber" name="L49" href="#L49">49</a>  <em class="jxr_javadoccomment">     * @param distance Distance function. The neuron's features are</em>
<a class="jxr_linenumber" name="L50" href="#L50">50</a>  <em class="jxr_javadoccomment">     * passed as the first argument to {@link DistanceMeasure#compute(double[],double[])}.</em>
<a class="jxr_linenumber" name="L51" href="#L51">51</a>  <em class="jxr_javadoccomment">     * @return the neuron whose features are closest to the given data.</em>
<a class="jxr_linenumber" name="L52" href="#L52">52</a>  <em class="jxr_javadoccomment">     * @throws org.apache.commons.math3.exception.DimensionMismatchException</em>
<a class="jxr_linenumber" name="L53" href="#L53">53</a>  <em class="jxr_javadoccomment">     * if the size of the input is not compatible with the neurons features</em>
<a class="jxr_linenumber" name="L54" href="#L54">54</a>  <em class="jxr_javadoccomment">     * size.</em>
<a class="jxr_linenumber" name="L55" href="#L55">55</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L56" href="#L56">56</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <a href="../../../../../../org/apache/commons/math3/ml/neuralnet/Neuron.html">Neuron</a> findBest(<strong class="jxr_keyword">double</strong>[] features,
<a class="jxr_linenumber" name="L57" href="#L57">57</a>                                    Iterable&lt;Neuron&gt; neurons,
<a class="jxr_linenumber" name="L58" href="#L58">58</a>                                    <a href="../../../../../../org/apache/commons/math3/ml/distance/DistanceMeasure.html">DistanceMeasure</a> distance) {
<a class="jxr_linenumber" name="L59" href="#L59">59</a>          <a href="../../../../../../org/apache/commons/math3/ml/neuralnet/Neuron.html">Neuron</a> best = <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L60" href="#L60">60</a>          <strong class="jxr_keyword">double</strong> min = Double.POSITIVE_INFINITY;
<a class="jxr_linenumber" name="L61" href="#L61">61</a>          <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">final</strong> Neuron n : neurons) {
<a class="jxr_linenumber" name="L62" href="#L62">62</a>              <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> d = distance.compute(n.getFeatures(), features);
<a class="jxr_linenumber" name="L63" href="#L63">63</a>              <strong class="jxr_keyword">if</strong> (d &lt; min) {
<a class="jxr_linenumber" name="L64" href="#L64">64</a>                  min = d;
<a class="jxr_linenumber" name="L65" href="#L65">65</a>                  best = n;
<a class="jxr_linenumber" name="L66" href="#L66">66</a>              }
<a class="jxr_linenumber" name="L67" href="#L67">67</a>          }
<a class="jxr_linenumber" name="L68" href="#L68">68</a>  
<a class="jxr_linenumber" name="L69" href="#L69">69</a>          <strong class="jxr_keyword">return</strong> best;
<a class="jxr_linenumber" name="L70" href="#L70">70</a>      }
<a class="jxr_linenumber" name="L71" href="#L71">71</a>  
<a class="jxr_linenumber" name="L72" href="#L72">72</a>      <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L73" href="#L73">73</a>  <em class="jxr_javadoccomment">     * Finds the two neurons that best match the given features.</em>
<a class="jxr_linenumber" name="L74" href="#L74">74</a>  <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L75" href="#L75">75</a>  <em class="jxr_javadoccomment">     * @param features Data.</em>
<a class="jxr_linenumber" name="L76" href="#L76">76</a>  <em class="jxr_javadoccomment">     * @param neurons List of neurons to scan. If the list is empty</em>
<a class="jxr_linenumber" name="L77" href="#L77">77</a>  <em class="jxr_javadoccomment">     * {@code null} will be returned.</em>
<a class="jxr_linenumber" name="L78" href="#L78">78</a>  <em class="jxr_javadoccomment">     * @param distance Distance function. The neuron's features are</em>
<a class="jxr_linenumber" name="L79" href="#L79">79</a>  <em class="jxr_javadoccomment">     * passed as the first argument to {@link DistanceMeasure#compute(double[],double[])}.</em>
<a class="jxr_linenumber" name="L80" href="#L80">80</a>  <em class="jxr_javadoccomment">     * @return the two neurons whose features are closest to the given data.</em>
<a class="jxr_linenumber" name="L81" href="#L81">81</a>  <em class="jxr_javadoccomment">     * @throws org.apache.commons.math3.exception.DimensionMismatchException</em>
<a class="jxr_linenumber" name="L82" href="#L82">82</a>  <em class="jxr_javadoccomment">     * if the size of the input is not compatible with the neurons features</em>
<a class="jxr_linenumber" name="L83" href="#L83">83</a>  <em class="jxr_javadoccomment">     * size.</em>
<a class="jxr_linenumber" name="L84" href="#L84">84</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L85" href="#L85">85</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> Pair&lt;Neuron, Neuron&gt; findBestAndSecondBest(<strong class="jxr_keyword">double</strong>[] features,
<a class="jxr_linenumber" name="L86" href="#L86">86</a>                                                               Iterable&lt;Neuron&gt; neurons,
<a class="jxr_linenumber" name="L87" href="#L87">87</a>                                                               <a href="../../../../../../org/apache/commons/math3/ml/distance/DistanceMeasure.html">DistanceMeasure</a> distance) {
<a class="jxr_linenumber" name="L88" href="#L88">88</a>          <a href="../../../../../../org/apache/commons/math3/ml/neuralnet/Neuron.html">Neuron</a>[] best = { <strong class="jxr_keyword">null</strong>, <strong class="jxr_keyword">null</strong> };
<a class="jxr_linenumber" name="L89" href="#L89">89</a>          <strong class="jxr_keyword">double</strong>[] min = { Double.POSITIVE_INFINITY,
<a class="jxr_linenumber" name="L90" href="#L90">90</a>                           Double.POSITIVE_INFINITY };
<a class="jxr_linenumber" name="L91" href="#L91">91</a>          <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">final</strong> Neuron n : neurons) {
<a class="jxr_linenumber" name="L92" href="#L92">92</a>              <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> d = distance.compute(n.getFeatures(), features);
<a class="jxr_linenumber" name="L93" href="#L93">93</a>              <strong class="jxr_keyword">if</strong> (d &lt; min[0]) {
<a class="jxr_linenumber" name="L94" href="#L94">94</a>                  <em class="jxr_comment">// Replace second best with old best.</em>
<a class="jxr_linenumber" name="L95" href="#L95">95</a>                  min[1] = min[0];
<a class="jxr_linenumber" name="L96" href="#L96">96</a>                  best[1] = best[0];
<a class="jxr_linenumber" name="L97" href="#L97">97</a>  
<a class="jxr_linenumber" name="L98" href="#L98">98</a>                  <em class="jxr_comment">// Store current as new best.</em>
<a class="jxr_linenumber" name="L99" href="#L99">99</a>                  min[0] = d;
<a class="jxr_linenumber" name="L100" href="#L100">100</a>                 best[0] = n;
<a class="jxr_linenumber" name="L101" href="#L101">101</a>             } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (d &lt; min[1]) {
<a class="jxr_linenumber" name="L102" href="#L102">102</a>                 <em class="jxr_comment">// Replace old second best with current.</em>
<a class="jxr_linenumber" name="L103" href="#L103">103</a>                 min[1] = d;
<a class="jxr_linenumber" name="L104" href="#L104">104</a>                 best[1] = n;
<a class="jxr_linenumber" name="L105" href="#L105">105</a>             }
<a class="jxr_linenumber" name="L106" href="#L106">106</a>         }
<a class="jxr_linenumber" name="L107" href="#L107">107</a> 
<a class="jxr_linenumber" name="L108" href="#L108">108</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> Pair&lt;Neuron, Neuron&gt;(best[0], best[1]);
<a class="jxr_linenumber" name="L109" href="#L109">109</a>     }
<a class="jxr_linenumber" name="L110" href="#L110">110</a> 
<a class="jxr_linenumber" name="L111" href="#L111">111</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L112" href="#L112">112</a> <em class="jxr_javadoccomment">     * Creates a list of neurons sorted in increased order of the distance</em>
<a class="jxr_linenumber" name="L113" href="#L113">113</a> <em class="jxr_javadoccomment">     * to the given {@code features}.</em>
<a class="jxr_linenumber" name="L114" href="#L114">114</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L115" href="#L115">115</a> <em class="jxr_javadoccomment">     * @param features Data.</em>
<a class="jxr_linenumber" name="L116" href="#L116">116</a> <em class="jxr_javadoccomment">     * @param neurons List of neurons to scan. If it is empty, an empty array</em>
<a class="jxr_linenumber" name="L117" href="#L117">117</a> <em class="jxr_javadoccomment">     * will be returned.</em>
<a class="jxr_linenumber" name="L118" href="#L118">118</a> <em class="jxr_javadoccomment">     * @param distance Distance function.</em>
<a class="jxr_linenumber" name="L119" href="#L119">119</a> <em class="jxr_javadoccomment">     * @return the neurons, sorted in increasing order of distance in data</em>
<a class="jxr_linenumber" name="L120" href="#L120">120</a> <em class="jxr_javadoccomment">     * space.</em>
<a class="jxr_linenumber" name="L121" href="#L121">121</a> <em class="jxr_javadoccomment">     * @throws org.apache.commons.math3.exception.DimensionMismatchException</em>
<a class="jxr_linenumber" name="L122" href="#L122">122</a> <em class="jxr_javadoccomment">     * if the size of the input is not compatible with the neurons features</em>
<a class="jxr_linenumber" name="L123" href="#L123">123</a> <em class="jxr_javadoccomment">     * size.</em>
<a class="jxr_linenumber" name="L124" href="#L124">124</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L125" href="#L125">125</a> <em class="jxr_javadoccomment">     * @see #findBest(double[],Iterable,DistanceMeasure)</em>
<a class="jxr_linenumber" name="L126" href="#L126">126</a> <em class="jxr_javadoccomment">     * @see #findBestAndSecondBest(double[],Iterable,DistanceMeasure)</em>
<a class="jxr_linenumber" name="L127" href="#L127">127</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L128" href="#L128">128</a> <em class="jxr_javadoccomment">     * @since 3.6</em>
<a class="jxr_linenumber" name="L129" href="#L129">129</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L130" href="#L130">130</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <a href="../../../../../../org/apache/commons/math3/ml/neuralnet/Neuron.html">Neuron</a>[] sort(<strong class="jxr_keyword">double</strong>[] features,
<a class="jxr_linenumber" name="L131" href="#L131">131</a>                                 Iterable&lt;Neuron&gt; neurons,
<a class="jxr_linenumber" name="L132" href="#L132">132</a>                                 <a href="../../../../../../org/apache/commons/math3/ml/distance/DistanceMeasure.html">DistanceMeasure</a> distance) {
<a class="jxr_linenumber" name="L133" href="#L133">133</a>         <strong class="jxr_keyword">final</strong> List&lt;PairNeuronDouble&gt; list = <strong class="jxr_keyword">new</strong> ArrayList&lt;PairNeuronDouble&gt;();
<a class="jxr_linenumber" name="L134" href="#L134">134</a> 
<a class="jxr_linenumber" name="L135" href="#L135">135</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">final</strong> Neuron n : neurons) {
<a class="jxr_linenumber" name="L136" href="#L136">136</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> d = distance.compute(n.getFeatures(), features);
<a class="jxr_linenumber" name="L137" href="#L137">137</a>             list.add(<strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/ml/neuralnet/MapUtils.html">PairNeuronDouble</a>(n, d));
<a class="jxr_linenumber" name="L138" href="#L138">138</a>         }
<a class="jxr_linenumber" name="L139" href="#L139">139</a> 
<a class="jxr_linenumber" name="L140" href="#L140">140</a>         Collections.sort(list, PairNeuronDouble.COMPARATOR);
<a class="jxr_linenumber" name="L141" href="#L141">141</a> 
<a class="jxr_linenumber" name="L142" href="#L142">142</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> len = list.size();
<a class="jxr_linenumber" name="L143" href="#L143">143</a>         <strong class="jxr_keyword">final</strong> <a href="../../../../../../org/apache/commons/math3/ml/neuralnet/Neuron.html">Neuron</a>[] sorted = <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/ml/neuralnet/Neuron.html">Neuron</a>[len];
<a class="jxr_linenumber" name="L144" href="#L144">144</a> 
<a class="jxr_linenumber" name="L145" href="#L145">145</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; len; i++) {
<a class="jxr_linenumber" name="L146" href="#L146">146</a>             sorted[i] = list.get(i).getNeuron();
<a class="jxr_linenumber" name="L147" href="#L147">147</a>         }
<a class="jxr_linenumber" name="L148" href="#L148">148</a>         <strong class="jxr_keyword">return</strong> sorted;
<a class="jxr_linenumber" name="L149" href="#L149">149</a>     }
<a class="jxr_linenumber" name="L150" href="#L150">150</a> 
<a class="jxr_linenumber" name="L151" href="#L151">151</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L152" href="#L152">152</a> <em class="jxr_javadoccomment">     * Computes the &lt;a href="<a href="http://en.wikipedia.org/wiki/U-Matrix" target="alexandria_uri">http://en.wikipedia.org/wiki/U-Matrix</a>"&gt;</em>
<a class="jxr_linenumber" name="L153" href="#L153">153</a> <em class="jxr_javadoccomment">     *  U-matrix&lt;/a&gt; of a two-dimensional map.</em>
<a class="jxr_linenumber" name="L154" href="#L154">154</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L155" href="#L155">155</a> <em class="jxr_javadoccomment">     * @param map Network.</em>
<a class="jxr_linenumber" name="L156" href="#L156">156</a> <em class="jxr_javadoccomment">     * @param distance Function to use for computing the average</em>
<a class="jxr_linenumber" name="L157" href="#L157">157</a> <em class="jxr_javadoccomment">     * distance from a neuron to its neighbours.</em>
<a class="jxr_linenumber" name="L158" href="#L158">158</a> <em class="jxr_javadoccomment">     * @return the matrix of average distances.</em>
<a class="jxr_linenumber" name="L159" href="#L159">159</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L160" href="#L160">160</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">double</strong>[][] computeU(<a href="../../../../../../org/apache/commons/math3/ml/neuralnet/twod/NeuronSquareMesh2D.html">NeuronSquareMesh2D</a> map,
<a class="jxr_linenumber" name="L161" href="#L161">161</a>                                       <a href="../../../../../../org/apache/commons/math3/ml/distance/DistanceMeasure.html">DistanceMeasure</a> distance) {
<a class="jxr_linenumber" name="L162" href="#L162">162</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> numRows = map.getNumberOfRows();
<a class="jxr_linenumber" name="L163" href="#L163">163</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> numCols = map.getNumberOfColumns();
<a class="jxr_linenumber" name="L164" href="#L164">164</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[][] uMatrix = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[numRows][numCols];
<a class="jxr_linenumber" name="L165" href="#L165">165</a> 
<a class="jxr_linenumber" name="L166" href="#L166">166</a>         <strong class="jxr_keyword">final</strong> <a href="../../../../../../org/apache/commons/math3/ml/neuralnet/Network.html">Network</a> net = map.getNetwork();
<a class="jxr_linenumber" name="L167" href="#L167">167</a> 
<a class="jxr_linenumber" name="L168" href="#L168">168</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; numRows; i++) {
<a class="jxr_linenumber" name="L169" href="#L169">169</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = 0; j &lt; numCols; j++) {
<a class="jxr_linenumber" name="L170" href="#L170">170</a>                 <strong class="jxr_keyword">final</strong> <a href="../../../../../../org/apache/commons/math3/ml/neuralnet/Neuron.html">Neuron</a> neuron = map.getNeuron(i, j);
<a class="jxr_linenumber" name="L171" href="#L171">171</a>                 <strong class="jxr_keyword">final</strong> Collection&lt;Neuron&gt; neighbours = net.getNeighbours(neuron);
<a class="jxr_linenumber" name="L172" href="#L172">172</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] features = neuron.getFeatures();
<a class="jxr_linenumber" name="L173" href="#L173">173</a> 
<a class="jxr_linenumber" name="L174" href="#L174">174</a>                 <strong class="jxr_keyword">double</strong> d = 0;
<a class="jxr_linenumber" name="L175" href="#L175">175</a>                 <strong class="jxr_keyword">int</strong> count = 0;
<a class="jxr_linenumber" name="L176" href="#L176">176</a>                 <strong class="jxr_keyword">for</strong> (Neuron n : neighbours) {
<a class="jxr_linenumber" name="L177" href="#L177">177</a>                     ++count;
<a class="jxr_linenumber" name="L178" href="#L178">178</a>                     d += distance.compute(features, n.getFeatures());
<a class="jxr_linenumber" name="L179" href="#L179">179</a>                 }
<a class="jxr_linenumber" name="L180" href="#L180">180</a> 
<a class="jxr_linenumber" name="L181" href="#L181">181</a>                 uMatrix[i][j] = d / count;
<a class="jxr_linenumber" name="L182" href="#L182">182</a>             }
<a class="jxr_linenumber" name="L183" href="#L183">183</a>         }
<a class="jxr_linenumber" name="L184" href="#L184">184</a> 
<a class="jxr_linenumber" name="L185" href="#L185">185</a>         <strong class="jxr_keyword">return</strong> uMatrix;
<a class="jxr_linenumber" name="L186" href="#L186">186</a>     }
<a class="jxr_linenumber" name="L187" href="#L187">187</a> 
<a class="jxr_linenumber" name="L188" href="#L188">188</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L189" href="#L189">189</a> <em class="jxr_javadoccomment">     * Computes the "hit" histogram of a two-dimensional map.</em>
<a class="jxr_linenumber" name="L190" href="#L190">190</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L191" href="#L191">191</a> <em class="jxr_javadoccomment">     * @param data Feature vectors.</em>
<a class="jxr_linenumber" name="L192" href="#L192">192</a> <em class="jxr_javadoccomment">     * @param map Network.</em>
<a class="jxr_linenumber" name="L193" href="#L193">193</a> <em class="jxr_javadoccomment">     * @param distance Function to use for determining the best matching unit.</em>
<a class="jxr_linenumber" name="L194" href="#L194">194</a> <em class="jxr_javadoccomment">     * @return the number of hits for each neuron in the map.</em>
<a class="jxr_linenumber" name="L195" href="#L195">195</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L196" href="#L196">196</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">int</strong>[][] computeHitHistogram(Iterable&lt;<strong class="jxr_keyword">double</strong>[]&gt; data,
<a class="jxr_linenumber" name="L197" href="#L197">197</a>                                               <a href="../../../../../../org/apache/commons/math3/ml/neuralnet/twod/NeuronSquareMesh2D.html">NeuronSquareMesh2D</a> map,
<a class="jxr_linenumber" name="L198" href="#L198">198</a>                                               <a href="../../../../../../org/apache/commons/math3/ml/distance/DistanceMeasure.html">DistanceMeasure</a> distance) {
<a class="jxr_linenumber" name="L199" href="#L199">199</a>         <strong class="jxr_keyword">final</strong> HashMap&lt;Neuron, Integer&gt; hit = <strong class="jxr_keyword">new</strong> HashMap&lt;Neuron, Integer&gt;();
<a class="jxr_linenumber" name="L200" href="#L200">200</a>         <strong class="jxr_keyword">final</strong> <a href="../../../../../../org/apache/commons/math3/ml/neuralnet/Network.html">Network</a> net = map.getNetwork();
<a class="jxr_linenumber" name="L201" href="#L201">201</a> 
<a class="jxr_linenumber" name="L202" href="#L202">202</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">double</strong>[] f : data) {
<a class="jxr_linenumber" name="L203" href="#L203">203</a>             <strong class="jxr_keyword">final</strong> <a href="../../../../../../org/apache/commons/math3/ml/neuralnet/Neuron.html">Neuron</a> best = findBest(f, net, distance);
<a class="jxr_linenumber" name="L204" href="#L204">204</a>             <strong class="jxr_keyword">final</strong> Integer count = hit.get(best);
<a class="jxr_linenumber" name="L205" href="#L205">205</a>             <strong class="jxr_keyword">if</strong> (count == <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L206" href="#L206">206</a>                 hit.put(best, 1);
<a class="jxr_linenumber" name="L207" href="#L207">207</a>             } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L208" href="#L208">208</a>                 hit.put(best, count + 1);
<a class="jxr_linenumber" name="L209" href="#L209">209</a>             }
<a class="jxr_linenumber" name="L210" href="#L210">210</a>         }
<a class="jxr_linenumber" name="L211" href="#L211">211</a> 
<a class="jxr_linenumber" name="L212" href="#L212">212</a>         <em class="jxr_comment">// Copy the histogram data into a 2D map.</em>
<a class="jxr_linenumber" name="L213" href="#L213">213</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> numRows = map.getNumberOfRows();
<a class="jxr_linenumber" name="L214" href="#L214">214</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> numCols = map.getNumberOfColumns();
<a class="jxr_linenumber" name="L215" href="#L215">215</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong>[][] histo = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">int</strong>[numRows][numCols];
<a class="jxr_linenumber" name="L216" href="#L216">216</a> 
<a class="jxr_linenumber" name="L217" href="#L217">217</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; numRows; i++) {
<a class="jxr_linenumber" name="L218" href="#L218">218</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = 0; j &lt; numCols; j++) {
<a class="jxr_linenumber" name="L219" href="#L219">219</a>                 <strong class="jxr_keyword">final</strong> <a href="../../../../../../org/apache/commons/math3/ml/neuralnet/Neuron.html">Neuron</a> neuron = map.getNeuron(i, j);
<a class="jxr_linenumber" name="L220" href="#L220">220</a>                 <strong class="jxr_keyword">final</strong> Integer count = hit.get(neuron);
<a class="jxr_linenumber" name="L221" href="#L221">221</a>                 <strong class="jxr_keyword">if</strong> (count == <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L222" href="#L222">222</a>                     histo[i][j] = 0;
<a class="jxr_linenumber" name="L223" href="#L223">223</a>                 } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L224" href="#L224">224</a>                     histo[i][j] = count;
<a class="jxr_linenumber" name="L225" href="#L225">225</a>                 }
<a class="jxr_linenumber" name="L226" href="#L226">226</a>             }
<a class="jxr_linenumber" name="L227" href="#L227">227</a>         }
<a class="jxr_linenumber" name="L228" href="#L228">228</a> 
<a class="jxr_linenumber" name="L229" href="#L229">229</a>         <strong class="jxr_keyword">return</strong> histo;
<a class="jxr_linenumber" name="L230" href="#L230">230</a>     }
<a class="jxr_linenumber" name="L231" href="#L231">231</a> 
<a class="jxr_linenumber" name="L232" href="#L232">232</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L233" href="#L233">233</a> <em class="jxr_javadoccomment">     * Computes the quantization error.</em>
<a class="jxr_linenumber" name="L234" href="#L234">234</a> <em class="jxr_javadoccomment">     * The quantization error is the average distance between a feature vector</em>
<a class="jxr_linenumber" name="L235" href="#L235">235</a> <em class="jxr_javadoccomment">     * and its "best matching unit" (closest neuron).</em>
<a class="jxr_linenumber" name="L236" href="#L236">236</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L237" href="#L237">237</a> <em class="jxr_javadoccomment">     * @param data Feature vectors.</em>
<a class="jxr_linenumber" name="L238" href="#L238">238</a> <em class="jxr_javadoccomment">     * @param neurons List of neurons to scan.</em>
<a class="jxr_linenumber" name="L239" href="#L239">239</a> <em class="jxr_javadoccomment">     * @param distance Distance function.</em>
<a class="jxr_linenumber" name="L240" href="#L240">240</a> <em class="jxr_javadoccomment">     * @return the error.</em>
<a class="jxr_linenumber" name="L241" href="#L241">241</a> <em class="jxr_javadoccomment">     * @throws NoDataException if {@code data} is empty.</em>
<a class="jxr_linenumber" name="L242" href="#L242">242</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L243" href="#L243">243</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">double</strong> computeQuantizationError(Iterable&lt;<strong class="jxr_keyword">double</strong>[]&gt; data,
<a class="jxr_linenumber" name="L244" href="#L244">244</a>                                                   Iterable&lt;Neuron&gt; neurons,
<a class="jxr_linenumber" name="L245" href="#L245">245</a>                                                   <a href="../../../../../../org/apache/commons/math3/ml/distance/DistanceMeasure.html">DistanceMeasure</a> distance) {
<a class="jxr_linenumber" name="L246" href="#L246">246</a>         <strong class="jxr_keyword">double</strong> d = 0;
<a class="jxr_linenumber" name="L247" href="#L247">247</a>         <strong class="jxr_keyword">int</strong> count = 0;
<a class="jxr_linenumber" name="L248" href="#L248">248</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">double</strong>[] f : data) {
<a class="jxr_linenumber" name="L249" href="#L249">249</a>             ++count;
<a class="jxr_linenumber" name="L250" href="#L250">250</a>             d += distance.compute(f, findBest(f, neurons, distance).getFeatures());
<a class="jxr_linenumber" name="L251" href="#L251">251</a>         }
<a class="jxr_linenumber" name="L252" href="#L252">252</a> 
<a class="jxr_linenumber" name="L253" href="#L253">253</a>         <strong class="jxr_keyword">if</strong> (count == 0) {
<a class="jxr_linenumber" name="L254" href="#L254">254</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/exception/NoDataException.html">NoDataException</a>();
<a class="jxr_linenumber" name="L255" href="#L255">255</a>         }
<a class="jxr_linenumber" name="L256" href="#L256">256</a> 
<a class="jxr_linenumber" name="L257" href="#L257">257</a>         <strong class="jxr_keyword">return</strong> d / count;
<a class="jxr_linenumber" name="L258" href="#L258">258</a>     }
<a class="jxr_linenumber" name="L259" href="#L259">259</a> 
<a class="jxr_linenumber" name="L260" href="#L260">260</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L261" href="#L261">261</a> <em class="jxr_javadoccomment">     * Computes the topographic error.</em>
<a class="jxr_linenumber" name="L262" href="#L262">262</a> <em class="jxr_javadoccomment">     * The topographic error is the proportion of data for which first and</em>
<a class="jxr_linenumber" name="L263" href="#L263">263</a> <em class="jxr_javadoccomment">     * second best matching units are not adjacent in the map.</em>
<a class="jxr_linenumber" name="L264" href="#L264">264</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L265" href="#L265">265</a> <em class="jxr_javadoccomment">     * @param data Feature vectors.</em>
<a class="jxr_linenumber" name="L266" href="#L266">266</a> <em class="jxr_javadoccomment">     * @param net Network.</em>
<a class="jxr_linenumber" name="L267" href="#L267">267</a> <em class="jxr_javadoccomment">     * @param distance Distance function.</em>
<a class="jxr_linenumber" name="L268" href="#L268">268</a> <em class="jxr_javadoccomment">     * @return the error.</em>
<a class="jxr_linenumber" name="L269" href="#L269">269</a> <em class="jxr_javadoccomment">     * @throws NoDataException if {@code data} is empty.</em>
<a class="jxr_linenumber" name="L270" href="#L270">270</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L271" href="#L271">271</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">double</strong> computeTopographicError(Iterable&lt;<strong class="jxr_keyword">double</strong>[]&gt; data,
<a class="jxr_linenumber" name="L272" href="#L272">272</a>                                                  <a href="../../../../../../org/apache/commons/math3/ml/neuralnet/Network.html">Network</a> net,
<a class="jxr_linenumber" name="L273" href="#L273">273</a>                                                  <a href="../../../../../../org/apache/commons/math3/ml/distance/DistanceMeasure.html">DistanceMeasure</a> distance) {
<a class="jxr_linenumber" name="L274" href="#L274">274</a>         <strong class="jxr_keyword">int</strong> notAdjacentCount = 0;
<a class="jxr_linenumber" name="L275" href="#L275">275</a>         <strong class="jxr_keyword">int</strong> count = 0;
<a class="jxr_linenumber" name="L276" href="#L276">276</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">double</strong>[] f : data) {
<a class="jxr_linenumber" name="L277" href="#L277">277</a>             ++count;
<a class="jxr_linenumber" name="L278" href="#L278">278</a>             <strong class="jxr_keyword">final</strong> Pair&lt;Neuron, Neuron&gt; p = findBestAndSecondBest(f, net, distance);
<a class="jxr_linenumber" name="L279" href="#L279">279</a>             <strong class="jxr_keyword">if</strong> (!net.getNeighbours(p.getFirst()).contains(p.getSecond())) {
<a class="jxr_linenumber" name="L280" href="#L280">280</a>                 <em class="jxr_comment">// Increment count if first and second best matching units</em>
<a class="jxr_linenumber" name="L281" href="#L281">281</a>                 <em class="jxr_comment">// are not neighbours.</em>
<a class="jxr_linenumber" name="L282" href="#L282">282</a>                 ++notAdjacentCount;
<a class="jxr_linenumber" name="L283" href="#L283">283</a>             }
<a class="jxr_linenumber" name="L284" href="#L284">284</a>         }
<a class="jxr_linenumber" name="L285" href="#L285">285</a> 
<a class="jxr_linenumber" name="L286" href="#L286">286</a>         <strong class="jxr_keyword">if</strong> (count == 0) {
<a class="jxr_linenumber" name="L287" href="#L287">287</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/exception/NoDataException.html">NoDataException</a>();
<a class="jxr_linenumber" name="L288" href="#L288">288</a>         }
<a class="jxr_linenumber" name="L289" href="#L289">289</a> 
<a class="jxr_linenumber" name="L290" href="#L290">290</a>         <strong class="jxr_keyword">return</strong> ((<strong class="jxr_keyword">double</strong>) notAdjacentCount) / count;
<a class="jxr_linenumber" name="L291" href="#L291">291</a>     }
<a class="jxr_linenumber" name="L292" href="#L292">292</a> 
<a class="jxr_linenumber" name="L293" href="#L293">293</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L294" href="#L294">294</a> <em class="jxr_javadoccomment">     * Helper data structure holding a (Neuron, double) pair.</em>
<a class="jxr_linenumber" name="L295" href="#L295">295</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L296" href="#L296">296</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../../org/apache/commons/math3/ml/neuralnet/MapUtils.html">PairNeuronDouble</a> {
<a class="jxr_linenumber" name="L297" href="#L297">297</a>         <em class="jxr_javadoccomment">/** Comparator. */</em>
<a class="jxr_linenumber" name="L298" href="#L298">298</a>         <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> Comparator&lt;PairNeuronDouble&gt; COMPARATOR
<a class="jxr_linenumber" name="L299" href="#L299">299</a>             = <strong class="jxr_keyword">new</strong> Comparator&lt;PairNeuronDouble&gt;() {
<a class="jxr_linenumber" name="L300" href="#L300">300</a>             <em class="jxr_javadoccomment">/** {@inheritDoc} */</em>
<a class="jxr_linenumber" name="L301" href="#L301">301</a>             <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">int</strong> compare(<a href="../../../../../../org/apache/commons/math3/ml/neuralnet/MapUtils.html">PairNeuronDouble</a> o1,
<a class="jxr_linenumber" name="L302" href="#L302">302</a>                                <a href="../../../../../../org/apache/commons/math3/ml/neuralnet/MapUtils.html">PairNeuronDouble</a> o2) {
<a class="jxr_linenumber" name="L303" href="#L303">303</a>                 <strong class="jxr_keyword">return</strong> Double.compare(o1.value, o2.value);
<a class="jxr_linenumber" name="L304" href="#L304">304</a>             }
<a class="jxr_linenumber" name="L305" href="#L305">305</a>         };
<a class="jxr_linenumber" name="L306" href="#L306">306</a>         <em class="jxr_javadoccomment">/** Key. */</em>
<a class="jxr_linenumber" name="L307" href="#L307">307</a>         <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> <a href="../../../../../../org/apache/commons/math3/ml/neuralnet/Neuron.html">Neuron</a> neuron;
<a class="jxr_linenumber" name="L308" href="#L308">308</a>         <em class="jxr_javadoccomment">/** Value. */</em>
<a class="jxr_linenumber" name="L309" href="#L309">309</a>         <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> value;
<a class="jxr_linenumber" name="L310" href="#L310">310</a> 
<a class="jxr_linenumber" name="L311" href="#L311">311</a>         <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L312" href="#L312">312</a> <em class="jxr_javadoccomment">         * @param neuron Neuron.</em>
<a class="jxr_linenumber" name="L313" href="#L313">313</a> <em class="jxr_javadoccomment">         * @param value Value.</em>
<a class="jxr_linenumber" name="L314" href="#L314">314</a> <em class="jxr_javadoccomment">         */</em>
<a class="jxr_linenumber" name="L315" href="#L315">315</a>         <a href="../../../../../../org/apache/commons/math3/ml/neuralnet/MapUtils.html">PairNeuronDouble</a>(<a href="../../../../../../org/apache/commons/math3/ml/neuralnet/Neuron.html">Neuron</a> neuron, <strong class="jxr_keyword">double</strong> value) {
<a class="jxr_linenumber" name="L316" href="#L316">316</a>             <strong class="jxr_keyword">this</strong>.neuron = neuron;
<a class="jxr_linenumber" name="L317" href="#L317">317</a>             <strong class="jxr_keyword">this</strong>.value = value;
<a class="jxr_linenumber" name="L318" href="#L318">318</a>         }
<a class="jxr_linenumber" name="L319" href="#L319">319</a> 
<a class="jxr_linenumber" name="L320" href="#L320">320</a>         <em class="jxr_javadoccomment">/** @return the neuron. */</em>
<a class="jxr_linenumber" name="L321" href="#L321">321</a>         <strong class="jxr_keyword">public</strong> <a href="../../../../../../org/apache/commons/math3/ml/neuralnet/Neuron.html">Neuron</a> getNeuron() {
<a class="jxr_linenumber" name="L322" href="#L322">322</a>             <strong class="jxr_keyword">return</strong> neuron;
<a class="jxr_linenumber" name="L323" href="#L323">323</a>         }
<a class="jxr_linenumber" name="L324" href="#L324">324</a> 
<a class="jxr_linenumber" name="L325" href="#L325">325</a>     }
<a class="jxr_linenumber" name="L326" href="#L326">326</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2003&#x2013;2016 <a href="http://www.apache.org/">The Apache Software Foundation</a>. All rights reserved.</div>
</body>
</html>
