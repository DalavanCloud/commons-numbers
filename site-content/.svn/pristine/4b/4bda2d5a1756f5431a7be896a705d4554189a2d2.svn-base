<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>DSCompilerTest xref</title>
<link type="text/css" rel="stylesheet" href="../../../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../testapidocs/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Licensed to the Apache Software Foundation (ASF) under one or more</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> * contributor license agreements.  See the NOTICE file distributed with</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * this work for additional information regarding copyright ownership.</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * The ASF licenses this file to You under the Apache License, Version 2.0</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * (the "License"); you may not use this file except in compliance with</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> * the License.  You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *      <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  <strong class="jxr_keyword">package</strong> org.apache.commons.math3.analysis.differentiation;
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> java.lang.reflect.Field;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> java.util.HashMap;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> java.util.Map;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.DimensionMismatchException;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.util.CombinatoricsUtils;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <strong class="jxr_keyword">import</strong> org.junit.Assert;
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <strong class="jxr_keyword">import</strong> org.junit.Test;
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <em class="jxr_javadoccomment"> * Test for class {@link DSCompiler}.</em>
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../../org/apache/commons/math3/analysis/differentiation/DSCompilerTest.html">DSCompilerTest</a> {
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  
<a class="jxr_linenumber" name="L35" href="#L35">35</a>      @Test
<a class="jxr_linenumber" name="L36" href="#L36">36</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testSize() {
<a class="jxr_linenumber" name="L37" href="#L37">37</a>          <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; 6; ++i) {
<a class="jxr_linenumber" name="L38" href="#L38">38</a>              <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = 0; j &lt; 6; ++j) {
<a class="jxr_linenumber" name="L39" href="#L39">39</a>                  <strong class="jxr_keyword">long</strong> expected = CombinatoricsUtils.binomialCoefficient(i + j, i);
<a class="jxr_linenumber" name="L40" href="#L40">40</a>                  Assert.assertEquals(expected, DSCompiler.getCompiler(i, j).getSize());
<a class="jxr_linenumber" name="L41" href="#L41">41</a>                  Assert.assertEquals(expected, DSCompiler.getCompiler(j, i).getSize());
<a class="jxr_linenumber" name="L42" href="#L42">42</a>              }
<a class="jxr_linenumber" name="L43" href="#L43">43</a>          }
<a class="jxr_linenumber" name="L44" href="#L44">44</a>      }
<a class="jxr_linenumber" name="L45" href="#L45">45</a>  
<a class="jxr_linenumber" name="L46" href="#L46">46</a>      @Test
<a class="jxr_linenumber" name="L47" href="#L47">47</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testIndices() {
<a class="jxr_linenumber" name="L48" href="#L48">48</a>  
<a class="jxr_linenumber" name="L49" href="#L49">49</a>          DSCompiler c = DSCompiler.getCompiler(0, 0);
<a class="jxr_linenumber" name="L50" href="#L50">50</a>          checkIndices(c.getPartialDerivativeOrders(0), <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">int</strong>[0]);
<a class="jxr_linenumber" name="L51" href="#L51">51</a>  
<a class="jxr_linenumber" name="L52" href="#L52">52</a>          c = DSCompiler.getCompiler(0, 1);
<a class="jxr_linenumber" name="L53" href="#L53">53</a>          checkIndices(c.getPartialDerivativeOrders(0), <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">int</strong>[0]);
<a class="jxr_linenumber" name="L54" href="#L54">54</a>  
<a class="jxr_linenumber" name="L55" href="#L55">55</a>          c = DSCompiler.getCompiler(1, 0);
<a class="jxr_linenumber" name="L56" href="#L56">56</a>          checkIndices(c.getPartialDerivativeOrders(0), 0);
<a class="jxr_linenumber" name="L57" href="#L57">57</a>  
<a class="jxr_linenumber" name="L58" href="#L58">58</a>          c = DSCompiler.getCompiler(1, 1);
<a class="jxr_linenumber" name="L59" href="#L59">59</a>          checkIndices(c.getPartialDerivativeOrders(0), 0);
<a class="jxr_linenumber" name="L60" href="#L60">60</a>          checkIndices(c.getPartialDerivativeOrders(1), 1);
<a class="jxr_linenumber" name="L61" href="#L61">61</a>  
<a class="jxr_linenumber" name="L62" href="#L62">62</a>          c = DSCompiler.getCompiler(1, 2);
<a class="jxr_linenumber" name="L63" href="#L63">63</a>          checkIndices(c.getPartialDerivativeOrders(0), 0);
<a class="jxr_linenumber" name="L64" href="#L64">64</a>          checkIndices(c.getPartialDerivativeOrders(1), 1);
<a class="jxr_linenumber" name="L65" href="#L65">65</a>          checkIndices(c.getPartialDerivativeOrders(2), 2);
<a class="jxr_linenumber" name="L66" href="#L66">66</a>  
<a class="jxr_linenumber" name="L67" href="#L67">67</a>          c = DSCompiler.getCompiler(2, 1);
<a class="jxr_linenumber" name="L68" href="#L68">68</a>          checkIndices(c.getPartialDerivativeOrders(0), 0, 0);
<a class="jxr_linenumber" name="L69" href="#L69">69</a>          checkIndices(c.getPartialDerivativeOrders(1), 1, 0);
<a class="jxr_linenumber" name="L70" href="#L70">70</a>          checkIndices(c.getPartialDerivativeOrders(2), 0, 1);
<a class="jxr_linenumber" name="L71" href="#L71">71</a>  
<a class="jxr_linenumber" name="L72" href="#L72">72</a>          c = DSCompiler.getCompiler(1, 3);
<a class="jxr_linenumber" name="L73" href="#L73">73</a>          checkIndices(c.getPartialDerivativeOrders(0), 0);
<a class="jxr_linenumber" name="L74" href="#L74">74</a>          checkIndices(c.getPartialDerivativeOrders(1), 1);
<a class="jxr_linenumber" name="L75" href="#L75">75</a>          checkIndices(c.getPartialDerivativeOrders(2), 2);
<a class="jxr_linenumber" name="L76" href="#L76">76</a>          checkIndices(c.getPartialDerivativeOrders(3), 3);
<a class="jxr_linenumber" name="L77" href="#L77">77</a>  
<a class="jxr_linenumber" name="L78" href="#L78">78</a>          c = DSCompiler.getCompiler(2, 2);
<a class="jxr_linenumber" name="L79" href="#L79">79</a>          checkIndices(c.getPartialDerivativeOrders(0), 0, 0);
<a class="jxr_linenumber" name="L80" href="#L80">80</a>          checkIndices(c.getPartialDerivativeOrders(1), 1, 0);
<a class="jxr_linenumber" name="L81" href="#L81">81</a>          checkIndices(c.getPartialDerivativeOrders(2), 2, 0);
<a class="jxr_linenumber" name="L82" href="#L82">82</a>          checkIndices(c.getPartialDerivativeOrders(3), 0, 1);
<a class="jxr_linenumber" name="L83" href="#L83">83</a>          checkIndices(c.getPartialDerivativeOrders(4), 1, 1);
<a class="jxr_linenumber" name="L84" href="#L84">84</a>          checkIndices(c.getPartialDerivativeOrders(5), 0, 2);
<a class="jxr_linenumber" name="L85" href="#L85">85</a>  
<a class="jxr_linenumber" name="L86" href="#L86">86</a>          c = DSCompiler.getCompiler(3, 1);
<a class="jxr_linenumber" name="L87" href="#L87">87</a>          checkIndices(c.getPartialDerivativeOrders(0), 0, 0, 0);
<a class="jxr_linenumber" name="L88" href="#L88">88</a>          checkIndices(c.getPartialDerivativeOrders(1), 1, 0, 0);
<a class="jxr_linenumber" name="L89" href="#L89">89</a>          checkIndices(c.getPartialDerivativeOrders(2), 0, 1, 0);
<a class="jxr_linenumber" name="L90" href="#L90">90</a>          checkIndices(c.getPartialDerivativeOrders(3), 0, 0, 1);
<a class="jxr_linenumber" name="L91" href="#L91">91</a>  
<a class="jxr_linenumber" name="L92" href="#L92">92</a>          c = DSCompiler.getCompiler(1, 4);
<a class="jxr_linenumber" name="L93" href="#L93">93</a>          checkIndices(c.getPartialDerivativeOrders(0), 0);
<a class="jxr_linenumber" name="L94" href="#L94">94</a>          checkIndices(c.getPartialDerivativeOrders(1), 1);
<a class="jxr_linenumber" name="L95" href="#L95">95</a>          checkIndices(c.getPartialDerivativeOrders(2), 2);
<a class="jxr_linenumber" name="L96" href="#L96">96</a>          checkIndices(c.getPartialDerivativeOrders(3), 3);
<a class="jxr_linenumber" name="L97" href="#L97">97</a>          checkIndices(c.getPartialDerivativeOrders(4), 4);
<a class="jxr_linenumber" name="L98" href="#L98">98</a>  
<a class="jxr_linenumber" name="L99" href="#L99">99</a>          c = DSCompiler.getCompiler(2, 3);
<a class="jxr_linenumber" name="L100" href="#L100">100</a>         checkIndices(c.getPartialDerivativeOrders(0), 0, 0);
<a class="jxr_linenumber" name="L101" href="#L101">101</a>         checkIndices(c.getPartialDerivativeOrders(1), 1, 0);
<a class="jxr_linenumber" name="L102" href="#L102">102</a>         checkIndices(c.getPartialDerivativeOrders(2), 2, 0);
<a class="jxr_linenumber" name="L103" href="#L103">103</a>         checkIndices(c.getPartialDerivativeOrders(3), 3, 0);
<a class="jxr_linenumber" name="L104" href="#L104">104</a>         checkIndices(c.getPartialDerivativeOrders(4), 0, 1);
<a class="jxr_linenumber" name="L105" href="#L105">105</a>         checkIndices(c.getPartialDerivativeOrders(5), 1, 1);
<a class="jxr_linenumber" name="L106" href="#L106">106</a>         checkIndices(c.getPartialDerivativeOrders(6), 2, 1);
<a class="jxr_linenumber" name="L107" href="#L107">107</a>         checkIndices(c.getPartialDerivativeOrders(7), 0, 2);
<a class="jxr_linenumber" name="L108" href="#L108">108</a>         checkIndices(c.getPartialDerivativeOrders(8), 1, 2);
<a class="jxr_linenumber" name="L109" href="#L109">109</a>         checkIndices(c.getPartialDerivativeOrders(9), 0, 3);
<a class="jxr_linenumber" name="L110" href="#L110">110</a> 
<a class="jxr_linenumber" name="L111" href="#L111">111</a>         c = DSCompiler.getCompiler(3, 2);
<a class="jxr_linenumber" name="L112" href="#L112">112</a>         checkIndices(c.getPartialDerivativeOrders(0), 0, 0, 0);
<a class="jxr_linenumber" name="L113" href="#L113">113</a>         checkIndices(c.getPartialDerivativeOrders(1), 1, 0, 0);
<a class="jxr_linenumber" name="L114" href="#L114">114</a>         checkIndices(c.getPartialDerivativeOrders(2), 2, 0, 0);
<a class="jxr_linenumber" name="L115" href="#L115">115</a>         checkIndices(c.getPartialDerivativeOrders(3), 0, 1, 0);
<a class="jxr_linenumber" name="L116" href="#L116">116</a>         checkIndices(c.getPartialDerivativeOrders(4), 1, 1, 0);
<a class="jxr_linenumber" name="L117" href="#L117">117</a>         checkIndices(c.getPartialDerivativeOrders(5), 0, 2, 0);
<a class="jxr_linenumber" name="L118" href="#L118">118</a>         checkIndices(c.getPartialDerivativeOrders(6), 0, 0, 1);
<a class="jxr_linenumber" name="L119" href="#L119">119</a>         checkIndices(c.getPartialDerivativeOrders(7), 1, 0, 1);
<a class="jxr_linenumber" name="L120" href="#L120">120</a>         checkIndices(c.getPartialDerivativeOrders(8), 0, 1, 1);
<a class="jxr_linenumber" name="L121" href="#L121">121</a>         checkIndices(c.getPartialDerivativeOrders(9), 0, 0, 2);
<a class="jxr_linenumber" name="L122" href="#L122">122</a> 
<a class="jxr_linenumber" name="L123" href="#L123">123</a>         c = DSCompiler.getCompiler(4, 1);
<a class="jxr_linenumber" name="L124" href="#L124">124</a>         checkIndices(c.getPartialDerivativeOrders(0), 0, 0, 0, 0);
<a class="jxr_linenumber" name="L125" href="#L125">125</a>         checkIndices(c.getPartialDerivativeOrders(1), 1, 0, 0, 0);
<a class="jxr_linenumber" name="L126" href="#L126">126</a>         checkIndices(c.getPartialDerivativeOrders(2), 0, 1, 0, 0);
<a class="jxr_linenumber" name="L127" href="#L127">127</a>         checkIndices(c.getPartialDerivativeOrders(3), 0, 0, 1, 0);
<a class="jxr_linenumber" name="L128" href="#L128">128</a>         checkIndices(c.getPartialDerivativeOrders(4), 0, 0, 0, 1);
<a class="jxr_linenumber" name="L129" href="#L129">129</a> 
<a class="jxr_linenumber" name="L130" href="#L130">130</a>     }
<a class="jxr_linenumber" name="L131" href="#L131">131</a> 
<a class="jxr_linenumber" name="L132" href="#L132">132</a>     @Test(expected=DimensionMismatchException.<strong class="jxr_keyword">class</strong>)
<a class="jxr_linenumber" name="L133" href="#L133">133</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testIncompatibleParams() {
<a class="jxr_linenumber" name="L134" href="#L134">134</a>         DSCompiler.getCompiler(3, 2).checkCompatibility(DSCompiler.getCompiler(4, 2));
<a class="jxr_linenumber" name="L135" href="#L135">135</a>     }
<a class="jxr_linenumber" name="L136" href="#L136">136</a> 
<a class="jxr_linenumber" name="L137" href="#L137">137</a>     @Test(expected=DimensionMismatchException.<strong class="jxr_keyword">class</strong>)
<a class="jxr_linenumber" name="L138" href="#L138">138</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testIncompatibleOrder() {
<a class="jxr_linenumber" name="L139" href="#L139">139</a>         DSCompiler.getCompiler(3, 3).checkCompatibility(DSCompiler.getCompiler(3, 2));
<a class="jxr_linenumber" name="L140" href="#L140">140</a>     }
<a class="jxr_linenumber" name="L141" href="#L141">141</a> 
<a class="jxr_linenumber" name="L142" href="#L142">142</a>     @Test
<a class="jxr_linenumber" name="L143" href="#L143">143</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testSymmetry() {
<a class="jxr_linenumber" name="L144" href="#L144">144</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; 6; ++i) {
<a class="jxr_linenumber" name="L145" href="#L145">145</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = 0; j &lt; 6; ++j) {
<a class="jxr_linenumber" name="L146" href="#L146">146</a>                 DSCompiler c = DSCompiler.getCompiler(i, j);
<a class="jxr_linenumber" name="L147" href="#L147">147</a>                 <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> k = 0; k &lt; c.getSize(); ++k) {
<a class="jxr_linenumber" name="L148" href="#L148">148</a>                     Assert.assertEquals(k, c.getPartialDerivativeIndex(c.getPartialDerivativeOrders(k)));
<a class="jxr_linenumber" name="L149" href="#L149">149</a>                 }
<a class="jxr_linenumber" name="L150" href="#L150">150</a>             }
<a class="jxr_linenumber" name="L151" href="#L151">151</a>         }
<a class="jxr_linenumber" name="L152" href="#L152">152</a>     }
<a class="jxr_linenumber" name="L153" href="#L153">153</a> 
<a class="jxr_linenumber" name="L154" href="#L154">154</a>     @Test <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testMultiplicationRules()
<a class="jxr_linenumber" name="L155" href="#L155">155</a>         <strong class="jxr_keyword">throws</strong> SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException {
<a class="jxr_linenumber" name="L156" href="#L156">156</a> 
<a class="jxr_linenumber" name="L157" href="#L157">157</a>         Map&lt;String,String&gt; referenceRules = <strong class="jxr_keyword">new</strong> HashMap&lt;String, String&gt;();
<a class="jxr_linenumber" name="L158" href="#L158">158</a>         referenceRules.put(<span class="jxr_string">"(f*g)"</span>,          <span class="jxr_string">"f * g"</span>);
<a class="jxr_linenumber" name="L159" href="#L159">159</a>         referenceRules.put(<span class="jxr_string">"d(f*g)/dx"</span>,      <span class="jxr_string">"f * dg/dx + df/dx * g"</span>);
<a class="jxr_linenumber" name="L160" href="#L160">160</a>         referenceRules.put(<span class="jxr_string">"d(f*g)/dy"</span>,      referenceRules.get(<span class="jxr_string">"d(f*g)/dx"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"y"</span>));
<a class="jxr_linenumber" name="L161" href="#L161">161</a>         referenceRules.put(<span class="jxr_string">"d(f*g)/dz"</span>,      referenceRules.get(<span class="jxr_string">"d(f*g)/dx"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"z"</span>));
<a class="jxr_linenumber" name="L162" href="#L162">162</a>         referenceRules.put(<span class="jxr_string">"d(f*g)/dt"</span>,      referenceRules.get(<span class="jxr_string">"d(f*g)/dx"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"t"</span>));
<a class="jxr_linenumber" name="L163" href="#L163">163</a>         referenceRules.put(<span class="jxr_string">"d2(f*g)/dx2"</span>,    <span class="jxr_string">"f * d2g/dx2 + 2 * df/dx * dg/dx + d2f/dx2 * g"</span>);
<a class="jxr_linenumber" name="L164" href="#L164">164</a>         referenceRules.put(<span class="jxr_string">"d2(f*g)/dy2"</span>,    referenceRules.get(<span class="jxr_string">"d2(f*g)/dx2"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"y"</span>));
<a class="jxr_linenumber" name="L165" href="#L165">165</a>         referenceRules.put(<span class="jxr_string">"d2(f*g)/dz2"</span>,    referenceRules.get(<span class="jxr_string">"d2(f*g)/dx2"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"z"</span>));
<a class="jxr_linenumber" name="L166" href="#L166">166</a>         referenceRules.put(<span class="jxr_string">"d2(f*g)/dt2"</span>,    referenceRules.get(<span class="jxr_string">"d2(f*g)/dx2"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"t"</span>));
<a class="jxr_linenumber" name="L167" href="#L167">167</a>         referenceRules.put(<span class="jxr_string">"d2(f*g)/dxdy"</span>,   <span class="jxr_string">"f * d2g/dxdy + df/dy * dg/dx + df/dx * dg/dy + d2f/dxdy * g"</span>);
<a class="jxr_linenumber" name="L168" href="#L168">168</a>         referenceRules.put(<span class="jxr_string">"d2(f*g)/dxdz"</span>,   referenceRules.get(<span class="jxr_string">"d2(f*g)/dxdy"</span>).replaceAll(<span class="jxr_string">"y"</span>, <span class="jxr_string">"z"</span>));
<a class="jxr_linenumber" name="L169" href="#L169">169</a>         referenceRules.put(<span class="jxr_string">"d2(f*g)/dxdt"</span>,   referenceRules.get(<span class="jxr_string">"d2(f*g)/dxdy"</span>).replaceAll(<span class="jxr_string">"y"</span>, <span class="jxr_string">"t"</span>));
<a class="jxr_linenumber" name="L170" href="#L170">170</a>         referenceRules.put(<span class="jxr_string">"d2(f*g)/dydz"</span>,   referenceRules.get(<span class="jxr_string">"d2(f*g)/dxdz"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"y"</span>));
<a class="jxr_linenumber" name="L171" href="#L171">171</a>         referenceRules.put(<span class="jxr_string">"d2(f*g)/dydt"</span>,   referenceRules.get(<span class="jxr_string">"d2(f*g)/dxdt"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"y"</span>));
<a class="jxr_linenumber" name="L172" href="#L172">172</a>         referenceRules.put(<span class="jxr_string">"d2(f*g)/dzdt"</span>,   referenceRules.get(<span class="jxr_string">"d2(f*g)/dxdt"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"z"</span>));
<a class="jxr_linenumber" name="L173" href="#L173">173</a>         referenceRules.put(<span class="jxr_string">"d3(f*g)/dx3"</span>,    <span class="jxr_string">"f * d3g/dx3 +"</span> +
<a class="jxr_linenumber" name="L174" href="#L174">174</a>                                              <span class="jxr_string">" 3 * df/dx * d2g/dx2 +"</span> +
<a class="jxr_linenumber" name="L175" href="#L175">175</a>                                              <span class="jxr_string">" 3 * d2f/dx2 * dg/dx +"</span> +
<a class="jxr_linenumber" name="L176" href="#L176">176</a>                                              <span class="jxr_string">" d3f/dx3 * g"</span>);
<a class="jxr_linenumber" name="L177" href="#L177">177</a>         referenceRules.put(<span class="jxr_string">"d3(f*g)/dy3"</span>,   referenceRules.get(<span class="jxr_string">"d3(f*g)/dx3"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"y"</span>));
<a class="jxr_linenumber" name="L178" href="#L178">178</a>         referenceRules.put(<span class="jxr_string">"d3(f*g)/dz3"</span>,   referenceRules.get(<span class="jxr_string">"d3(f*g)/dx3"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"z"</span>));
<a class="jxr_linenumber" name="L179" href="#L179">179</a>         referenceRules.put(<span class="jxr_string">"d3(f*g)/dt3"</span>,   referenceRules.get(<span class="jxr_string">"d3(f*g)/dx3"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"t"</span>));
<a class="jxr_linenumber" name="L180" href="#L180">180</a>         referenceRules.put(<span class="jxr_string">"d3(f*g)/dx2dy"</span>,  <span class="jxr_string">"f * d3g/dx2dy +"</span> +
<a class="jxr_linenumber" name="L181" href="#L181">181</a>                                              <span class="jxr_string">" df/dy * d2g/dx2 +"</span> +
<a class="jxr_linenumber" name="L182" href="#L182">182</a>                                              <span class="jxr_string">" 2 * df/dx * d2g/dxdy +"</span> +
<a class="jxr_linenumber" name="L183" href="#L183">183</a>                                              <span class="jxr_string">" 2 * d2f/dxdy * dg/dx +"</span> +
<a class="jxr_linenumber" name="L184" href="#L184">184</a>                                              <span class="jxr_string">" d2f/dx2 * dg/dy +"</span> +
<a class="jxr_linenumber" name="L185" href="#L185">185</a>                                              <span class="jxr_string">" d3f/dx2dy * g"</span>);
<a class="jxr_linenumber" name="L186" href="#L186">186</a>         referenceRules.put(<span class="jxr_string">"d3(f*g)/dxdy2"</span>,  <span class="jxr_string">"f * d3g/dxdy2 +"</span> +
<a class="jxr_linenumber" name="L187" href="#L187">187</a>                                              <span class="jxr_string">" 2 * df/dy * d2g/dxdy +"</span> +
<a class="jxr_linenumber" name="L188" href="#L188">188</a>                                              <span class="jxr_string">" d2f/dy2 * dg/dx +"</span> +
<a class="jxr_linenumber" name="L189" href="#L189">189</a>                                              <span class="jxr_string">" df/dx * d2g/dy2 +"</span> +
<a class="jxr_linenumber" name="L190" href="#L190">190</a>                                              <span class="jxr_string">" 2 * d2f/dxdy * dg/dy +"</span> +
<a class="jxr_linenumber" name="L191" href="#L191">191</a>                                              <span class="jxr_string">" d3f/dxdy2 * g"</span>);
<a class="jxr_linenumber" name="L192" href="#L192">192</a>         referenceRules.put(<span class="jxr_string">"d3(f*g)/dx2dz"</span>,   referenceRules.get(<span class="jxr_string">"d3(f*g)/dx2dy"</span>).replaceAll(<span class="jxr_string">"y"</span>, <span class="jxr_string">"z"</span>));
<a class="jxr_linenumber" name="L193" href="#L193">193</a>         referenceRules.put(<span class="jxr_string">"d3(f*g)/dy2dz"</span>,   referenceRules.get(<span class="jxr_string">"d3(f*g)/dx2dz"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"y"</span>));
<a class="jxr_linenumber" name="L194" href="#L194">194</a>         referenceRules.put(<span class="jxr_string">"d3(f*g)/dxdz2"</span>,   referenceRules.get(<span class="jxr_string">"d3(f*g)/dxdy2"</span>).replaceAll(<span class="jxr_string">"y"</span>, <span class="jxr_string">"z"</span>));
<a class="jxr_linenumber" name="L195" href="#L195">195</a>         referenceRules.put(<span class="jxr_string">"d3(f*g)/dydz2"</span>,   referenceRules.get(<span class="jxr_string">"d3(f*g)/dxdz2"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"y"</span>));
<a class="jxr_linenumber" name="L196" href="#L196">196</a>         referenceRules.put(<span class="jxr_string">"d3(f*g)/dx2dt"</span>,   referenceRules.get(<span class="jxr_string">"d3(f*g)/dx2dz"</span>).replaceAll(<span class="jxr_string">"z"</span>, <span class="jxr_string">"t"</span>));
<a class="jxr_linenumber" name="L197" href="#L197">197</a>         referenceRules.put(<span class="jxr_string">"d3(f*g)/dy2dt"</span>,   referenceRules.get(<span class="jxr_string">"d3(f*g)/dx2dt"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"y"</span>));
<a class="jxr_linenumber" name="L198" href="#L198">198</a>         referenceRules.put(<span class="jxr_string">"d3(f*g)/dz2dt"</span>,   referenceRules.get(<span class="jxr_string">"d3(f*g)/dx2dt"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"z"</span>));
<a class="jxr_linenumber" name="L199" href="#L199">199</a>         referenceRules.put(<span class="jxr_string">"d3(f*g)/dxdt2"</span>,   referenceRules.get(<span class="jxr_string">"d3(f*g)/dxdy2"</span>).replaceAll(<span class="jxr_string">"y"</span>, <span class="jxr_string">"t"</span>));
<a class="jxr_linenumber" name="L200" href="#L200">200</a>         referenceRules.put(<span class="jxr_string">"d3(f*g)/dydt2"</span>,   referenceRules.get(<span class="jxr_string">"d3(f*g)/dxdt2"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"y"</span>));
<a class="jxr_linenumber" name="L201" href="#L201">201</a>         referenceRules.put(<span class="jxr_string">"d3(f*g)/dzdt2"</span>,   referenceRules.get(<span class="jxr_string">"d3(f*g)/dxdt2"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"z"</span>));
<a class="jxr_linenumber" name="L202" href="#L202">202</a>         referenceRules.put(<span class="jxr_string">"d3(f*g)/dxdydz"</span>, <span class="jxr_string">"f * d3g/dxdydz +"</span> +
<a class="jxr_linenumber" name="L203" href="#L203">203</a>                                              <span class="jxr_string">" df/dz * d2g/dxdy +"</span> +
<a class="jxr_linenumber" name="L204" href="#L204">204</a>                                              <span class="jxr_string">" df/dy * d2g/dxdz +"</span> +
<a class="jxr_linenumber" name="L205" href="#L205">205</a>                                              <span class="jxr_string">" d2f/dydz * dg/dx +"</span> +
<a class="jxr_linenumber" name="L206" href="#L206">206</a>                                              <span class="jxr_string">" df/dx * d2g/dydz +"</span> +
<a class="jxr_linenumber" name="L207" href="#L207">207</a>                                              <span class="jxr_string">" d2f/dxdz * dg/dy +"</span> +
<a class="jxr_linenumber" name="L208" href="#L208">208</a>                                              <span class="jxr_string">" d2f/dxdy * dg/dz +"</span> +
<a class="jxr_linenumber" name="L209" href="#L209">209</a>                                              <span class="jxr_string">" d3f/dxdydz * g"</span>);
<a class="jxr_linenumber" name="L210" href="#L210">210</a>         referenceRules.put(<span class="jxr_string">"d3(f*g)/dxdydt"</span>, referenceRules.get(<span class="jxr_string">"d3(f*g)/dxdydz"</span>).replaceAll(<span class="jxr_string">"z"</span>, <span class="jxr_string">"t"</span>));
<a class="jxr_linenumber" name="L211" href="#L211">211</a>         referenceRules.put(<span class="jxr_string">"d3(f*g)/dxdzdt"</span>, referenceRules.get(<span class="jxr_string">"d3(f*g)/dxdydt"</span>).replaceAll(<span class="jxr_string">"y"</span>, <span class="jxr_string">"z"</span>));
<a class="jxr_linenumber" name="L212" href="#L212">212</a>         referenceRules.put(<span class="jxr_string">"d3(f*g)/dydzdt"</span>, referenceRules.get(<span class="jxr_string">"d3(f*g)/dxdzdt"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"y"</span>));
<a class="jxr_linenumber" name="L213" href="#L213">213</a> 
<a class="jxr_linenumber" name="L214" href="#L214">214</a>         Field multFieldArrayField = DSCompiler.<strong class="jxr_keyword">class</strong>.getDeclaredField(<span class="jxr_string">"multIndirection"</span>);
<a class="jxr_linenumber" name="L215" href="#L215">215</a>         multFieldArrayField.setAccessible(<strong class="jxr_keyword">true</strong>);
<a class="jxr_linenumber" name="L216" href="#L216">216</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; 5; ++i) {
<a class="jxr_linenumber" name="L217" href="#L217">217</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = 0; j &lt; 4; ++j) {
<a class="jxr_linenumber" name="L218" href="#L218">218</a>                 DSCompiler compiler = DSCompiler.getCompiler(i, j);
<a class="jxr_linenumber" name="L219" href="#L219">219</a>                 <strong class="jxr_keyword">int</strong>[][][] multIndirection = (<strong class="jxr_keyword">int</strong>[][][]) multFieldArrayField.get(compiler);
<a class="jxr_linenumber" name="L220" href="#L220">220</a>                 <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> k = 0; k &lt; multIndirection.length; ++k) {
<a class="jxr_linenumber" name="L221" href="#L221">221</a>                     String product = ordersToString(compiler.getPartialDerivativeOrders(k),
<a class="jxr_linenumber" name="L222" href="#L222">222</a>                                                     <span class="jxr_string">"(f*g)"</span>, <span class="jxr_string">"x"</span>, <span class="jxr_string">"y"</span>, <span class="jxr_string">"z"</span>, <span class="jxr_string">"t"</span>);
<a class="jxr_linenumber" name="L223" href="#L223">223</a>                     StringBuilder rule = <strong class="jxr_keyword">new</strong> StringBuilder();
<a class="jxr_linenumber" name="L224" href="#L224">224</a>                     <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong>[] term : multIndirection[k]) {
<a class="jxr_linenumber" name="L225" href="#L225">225</a>                         <strong class="jxr_keyword">if</strong> (rule.length() &gt; 0) {
<a class="jxr_linenumber" name="L226" href="#L226">226</a>                             rule.append(<span class="jxr_string">" + "</span>);
<a class="jxr_linenumber" name="L227" href="#L227">227</a>                         }
<a class="jxr_linenumber" name="L228" href="#L228">228</a>                         <strong class="jxr_keyword">if</strong> (term[0] &gt; 1) {
<a class="jxr_linenumber" name="L229" href="#L229">229</a>                             rule.append(term[0]).append(<span class="jxr_string">" * "</span>);
<a class="jxr_linenumber" name="L230" href="#L230">230</a>                         }
<a class="jxr_linenumber" name="L231" href="#L231">231</a>                         rule.append(ordersToString(compiler.getPartialDerivativeOrders(term[1]),
<a class="jxr_linenumber" name="L232" href="#L232">232</a>                                                    <span class="jxr_string">"f"</span>, <span class="jxr_string">"x"</span>, <span class="jxr_string">"y"</span>, <span class="jxr_string">"z"</span>, <span class="jxr_string">"t"</span>));
<a class="jxr_linenumber" name="L233" href="#L233">233</a>                         rule.append(<span class="jxr_string">" * "</span>);
<a class="jxr_linenumber" name="L234" href="#L234">234</a>                         rule.append(ordersToString(compiler.getPartialDerivativeOrders(term[2]),
<a class="jxr_linenumber" name="L235" href="#L235">235</a>                                                    <span class="jxr_string">"g"</span>, <span class="jxr_string">"x"</span>, <span class="jxr_string">"y"</span>, <span class="jxr_string">"z"</span>, <span class="jxr_string">"t"</span>));
<a class="jxr_linenumber" name="L236" href="#L236">236</a>                     }
<a class="jxr_linenumber" name="L237" href="#L237">237</a>                     Assert.assertEquals(product, referenceRules.get(product), rule.toString());
<a class="jxr_linenumber" name="L238" href="#L238">238</a>                 }
<a class="jxr_linenumber" name="L239" href="#L239">239</a>             }
<a class="jxr_linenumber" name="L240" href="#L240">240</a>         }
<a class="jxr_linenumber" name="L241" href="#L241">241</a>     }
<a class="jxr_linenumber" name="L242" href="#L242">242</a> 
<a class="jxr_linenumber" name="L243" href="#L243">243</a>     @Test <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testCompositionRules()
<a class="jxr_linenumber" name="L244" href="#L244">244</a>         <strong class="jxr_keyword">throws</strong> SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException {
<a class="jxr_linenumber" name="L245" href="#L245">245</a> 
<a class="jxr_linenumber" name="L246" href="#L246">246</a>         <em class="jxr_comment">// the following reference rules have all been computed independently from the library,</em>
<a class="jxr_linenumber" name="L247" href="#L247">247</a>         <em class="jxr_comment">// using only pencil and paper and some search and replace to handle symmetries</em>
<a class="jxr_linenumber" name="L248" href="#L248">248</a>         Map&lt;String,String&gt; referenceRules = <strong class="jxr_keyword">new</strong> HashMap&lt;String, String&gt;();
<a class="jxr_linenumber" name="L249" href="#L249">249</a>         referenceRules.put(<span class="jxr_string">"(f(g))"</span>,              <span class="jxr_string">"(f(g))"</span>);
<a class="jxr_linenumber" name="L250" href="#L250">250</a>         referenceRules.put(<span class="jxr_string">"d(f(g))/dx"</span>,          <span class="jxr_string">"d(f(g))/dg * dg/dx"</span>);
<a class="jxr_linenumber" name="L251" href="#L251">251</a>         referenceRules.put(<span class="jxr_string">"d(f(g))/dy"</span>,          referenceRules.get(<span class="jxr_string">"d(f(g))/dx"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"y"</span>));
<a class="jxr_linenumber" name="L252" href="#L252">252</a>         referenceRules.put(<span class="jxr_string">"d(f(g))/dz"</span>,          referenceRules.get(<span class="jxr_string">"d(f(g))/dx"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"z"</span>));
<a class="jxr_linenumber" name="L253" href="#L253">253</a>         referenceRules.put(<span class="jxr_string">"d(f(g))/dt"</span>,          referenceRules.get(<span class="jxr_string">"d(f(g))/dx"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"t"</span>));
<a class="jxr_linenumber" name="L254" href="#L254">254</a>         referenceRules.put(<span class="jxr_string">"d2(f(g))/dx2"</span>,        <span class="jxr_string">"d2(f(g))/dg2 * dg/dx * dg/dx + d(f(g))/dg * d2g/dx2"</span>);
<a class="jxr_linenumber" name="L255" href="#L255">255</a>         referenceRules.put(<span class="jxr_string">"d2(f(g))/dy2"</span>,        referenceRules.get(<span class="jxr_string">"d2(f(g))/dx2"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"y"</span>));
<a class="jxr_linenumber" name="L256" href="#L256">256</a>         referenceRules.put(<span class="jxr_string">"d2(f(g))/dz2"</span>,        referenceRules.get(<span class="jxr_string">"d2(f(g))/dx2"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"z"</span>));
<a class="jxr_linenumber" name="L257" href="#L257">257</a>         referenceRules.put(<span class="jxr_string">"d2(f(g))/dt2"</span>,        referenceRules.get(<span class="jxr_string">"d2(f(g))/dx2"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"t"</span>));
<a class="jxr_linenumber" name="L258" href="#L258">258</a>         referenceRules.put(<span class="jxr_string">"d2(f(g))/dxdy"</span>,       <span class="jxr_string">"d2(f(g))/dg2 * dg/dx * dg/dy + d(f(g))/dg * d2g/dxdy"</span>);
<a class="jxr_linenumber" name="L259" href="#L259">259</a>         referenceRules.put(<span class="jxr_string">"d2(f(g))/dxdz"</span>,       referenceRules.get(<span class="jxr_string">"d2(f(g))/dxdy"</span>).replaceAll(<span class="jxr_string">"y"</span>, <span class="jxr_string">"z"</span>));
<a class="jxr_linenumber" name="L260" href="#L260">260</a>         referenceRules.put(<span class="jxr_string">"d2(f(g))/dxdt"</span>,       referenceRules.get(<span class="jxr_string">"d2(f(g))/dxdy"</span>).replaceAll(<span class="jxr_string">"y"</span>, <span class="jxr_string">"t"</span>));
<a class="jxr_linenumber" name="L261" href="#L261">261</a>         referenceRules.put(<span class="jxr_string">"d2(f(g))/dydz"</span>,       referenceRules.get(<span class="jxr_string">"d2(f(g))/dxdz"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"y"</span>));
<a class="jxr_linenumber" name="L262" href="#L262">262</a>         referenceRules.put(<span class="jxr_string">"d2(f(g))/dydt"</span>,       referenceRules.get(<span class="jxr_string">"d2(f(g))/dxdt"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"y"</span>));
<a class="jxr_linenumber" name="L263" href="#L263">263</a>         referenceRules.put(<span class="jxr_string">"d2(f(g))/dzdt"</span>,       referenceRules.get(<span class="jxr_string">"d2(f(g))/dxdt"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"z"</span>));
<a class="jxr_linenumber" name="L264" href="#L264">264</a>         referenceRules.put(<span class="jxr_string">"d3(f(g))/dx3"</span>,        <span class="jxr_string">"d3(f(g))/dg3 * dg/dx * dg/dx * dg/dx +"</span> +
<a class="jxr_linenumber" name="L265" href="#L265">265</a>                                                   <span class="jxr_string">" 3 * d2(f(g))/dg2 * dg/dx * d2g/dx2 +"</span> +
<a class="jxr_linenumber" name="L266" href="#L266">266</a>                                                   <span class="jxr_string">" d(f(g))/dg * d3g/dx3"</span>);
<a class="jxr_linenumber" name="L267" href="#L267">267</a>         referenceRules.put(<span class="jxr_string">"d3(f(g))/dy3"</span>,        referenceRules.get(<span class="jxr_string">"d3(f(g))/dx3"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"y"</span>));
<a class="jxr_linenumber" name="L268" href="#L268">268</a>         referenceRules.put(<span class="jxr_string">"d3(f(g))/dz3"</span>,        referenceRules.get(<span class="jxr_string">"d3(f(g))/dx3"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"z"</span>));
<a class="jxr_linenumber" name="L269" href="#L269">269</a>         referenceRules.put(<span class="jxr_string">"d3(f(g))/dt3"</span>,        referenceRules.get(<span class="jxr_string">"d3(f(g))/dx3"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"t"</span>));
<a class="jxr_linenumber" name="L270" href="#L270">270</a>         referenceRules.put(<span class="jxr_string">"d3(f(g))/dxdy2"</span>,      <span class="jxr_string">"d3(f(g))/dg3 * dg/dx * dg/dy * dg/dy +"</span> +
<a class="jxr_linenumber" name="L271" href="#L271">271</a>                                                   <span class="jxr_string">" 2 * d2(f(g))/dg2 * dg/dy * d2g/dxdy +"</span> +
<a class="jxr_linenumber" name="L272" href="#L272">272</a>                                                   <span class="jxr_string">" d2(f(g))/dg2 * dg/dx * d2g/dy2 +"</span> +
<a class="jxr_linenumber" name="L273" href="#L273">273</a>                                                   <span class="jxr_string">" d(f(g))/dg * d3g/dxdy2"</span>);
<a class="jxr_linenumber" name="L274" href="#L274">274</a>         referenceRules.put(<span class="jxr_string">"d3(f(g))/dxdz2"</span>,      referenceRules.get(<span class="jxr_string">"d3(f(g))/dxdy2"</span>).replaceAll(<span class="jxr_string">"y"</span>, <span class="jxr_string">"z"</span>));
<a class="jxr_linenumber" name="L275" href="#L275">275</a>         referenceRules.put(<span class="jxr_string">"d3(f(g))/dxdt2"</span>,      referenceRules.get(<span class="jxr_string">"d3(f(g))/dxdy2"</span>).replaceAll(<span class="jxr_string">"y"</span>, <span class="jxr_string">"t"</span>));
<a class="jxr_linenumber" name="L276" href="#L276">276</a>         referenceRules.put(<span class="jxr_string">"d3(f(g))/dydz2"</span>,      referenceRules.get(<span class="jxr_string">"d3(f(g))/dxdz2"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"y"</span>));
<a class="jxr_linenumber" name="L277" href="#L277">277</a>         referenceRules.put(<span class="jxr_string">"d3(f(g))/dydt2"</span>,      referenceRules.get(<span class="jxr_string">"d3(f(g))/dxdt2"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"y"</span>));
<a class="jxr_linenumber" name="L278" href="#L278">278</a>         referenceRules.put(<span class="jxr_string">"d3(f(g))/dzdt2"</span>,      referenceRules.get(<span class="jxr_string">"d3(f(g))/dxdt2"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"z"</span>));
<a class="jxr_linenumber" name="L279" href="#L279">279</a>         referenceRules.put(<span class="jxr_string">"d3(f(g))/dx2dy"</span>,      <span class="jxr_string">"d3(f(g))/dg3 * dg/dx * dg/dx * dg/dy +"</span> +
<a class="jxr_linenumber" name="L280" href="#L280">280</a>                                                   <span class="jxr_string">" 2 * d2(f(g))/dg2 * dg/dx * d2g/dxdy +"</span> +
<a class="jxr_linenumber" name="L281" href="#L281">281</a>                                                   <span class="jxr_string">" d2(f(g))/dg2 * d2g/dx2 * dg/dy +"</span> +
<a class="jxr_linenumber" name="L282" href="#L282">282</a>                                                   <span class="jxr_string">" d(f(g))/dg * d3g/dx2dy"</span>);
<a class="jxr_linenumber" name="L283" href="#L283">283</a>         referenceRules.put(<span class="jxr_string">"d3(f(g))/dx2dz"</span>,      referenceRules.get(<span class="jxr_string">"d3(f(g))/dx2dy"</span>).replaceAll(<span class="jxr_string">"y"</span>, <span class="jxr_string">"z"</span>));
<a class="jxr_linenumber" name="L284" href="#L284">284</a>         referenceRules.put(<span class="jxr_string">"d3(f(g))/dx2dt"</span>,      referenceRules.get(<span class="jxr_string">"d3(f(g))/dx2dy"</span>).replaceAll(<span class="jxr_string">"y"</span>, <span class="jxr_string">"t"</span>));
<a class="jxr_linenumber" name="L285" href="#L285">285</a>         referenceRules.put(<span class="jxr_string">"d3(f(g))/dy2dz"</span>,      referenceRules.get(<span class="jxr_string">"d3(f(g))/dx2dz"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"y"</span>));
<a class="jxr_linenumber" name="L286" href="#L286">286</a>         referenceRules.put(<span class="jxr_string">"d3(f(g))/dy2dt"</span>,      referenceRules.get(<span class="jxr_string">"d3(f(g))/dx2dt"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"y"</span>));
<a class="jxr_linenumber" name="L287" href="#L287">287</a>         referenceRules.put(<span class="jxr_string">"d3(f(g))/dz2dt"</span>,      referenceRules.get(<span class="jxr_string">"d3(f(g))/dx2dt"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"z"</span>));
<a class="jxr_linenumber" name="L288" href="#L288">288</a>         referenceRules.put(<span class="jxr_string">"d3(f(g))/dxdydz"</span>,     <span class="jxr_string">"d3(f(g))/dg3 * dg/dx * dg/dy * dg/dz +"</span> +
<a class="jxr_linenumber" name="L289" href="#L289">289</a>                                                   <span class="jxr_string">" d2(f(g))/dg2 * dg/dy * d2g/dxdz +"</span> +
<a class="jxr_linenumber" name="L290" href="#L290">290</a>                                                   <span class="jxr_string">" d2(f(g))/dg2 * dg/dx * d2g/dydz +"</span> +
<a class="jxr_linenumber" name="L291" href="#L291">291</a>                                                   <span class="jxr_string">" d2(f(g))/dg2 * d2g/dxdy * dg/dz +"</span> +
<a class="jxr_linenumber" name="L292" href="#L292">292</a>                                                   <span class="jxr_string">" d(f(g))/dg * d3g/dxdydz"</span>);
<a class="jxr_linenumber" name="L293" href="#L293">293</a>         referenceRules.put(<span class="jxr_string">"d3(f(g))/dxdydt"</span>,     referenceRules.get(<span class="jxr_string">"d3(f(g))/dxdydz"</span>).replaceAll(<span class="jxr_string">"z"</span>, <span class="jxr_string">"t"</span>));
<a class="jxr_linenumber" name="L294" href="#L294">294</a>         referenceRules.put(<span class="jxr_string">"d3(f(g))/dxdzdt"</span>,     referenceRules.get(<span class="jxr_string">"d3(f(g))/dxdydt"</span>).replaceAll(<span class="jxr_string">"y"</span>, <span class="jxr_string">"z"</span>));
<a class="jxr_linenumber" name="L295" href="#L295">295</a>         referenceRules.put(<span class="jxr_string">"d3(f(g))/dydzdt"</span>,     referenceRules.get(<span class="jxr_string">"d3(f(g))/dxdzdt"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"y"</span>));
<a class="jxr_linenumber" name="L296" href="#L296">296</a>         referenceRules.put(<span class="jxr_string">"d4(f(g))/dx4"</span>,        <span class="jxr_string">"d4(f(g))/dg4 * dg/dx * dg/dx * dg/dx * dg/dx +"</span> +
<a class="jxr_linenumber" name="L297" href="#L297">297</a>                                                   <span class="jxr_string">" 6 * d3(f(g))/dg3 * dg/dx * dg/dx * d2g/dx2 +"</span> +
<a class="jxr_linenumber" name="L298" href="#L298">298</a>                                                   <span class="jxr_string">" 3 * d2(f(g))/dg2 * d2g/dx2 * d2g/dx2 +"</span> +
<a class="jxr_linenumber" name="L299" href="#L299">299</a>                                                   <span class="jxr_string">" 4 * d2(f(g))/dg2 * dg/dx * d3g/dx3 +"</span> +
<a class="jxr_linenumber" name="L300" href="#L300">300</a>                                                   <span class="jxr_string">" d(f(g))/dg * d4g/dx4"</span>);
<a class="jxr_linenumber" name="L301" href="#L301">301</a>         referenceRules.put(<span class="jxr_string">"d4(f(g))/dy4"</span>,        referenceRules.get(<span class="jxr_string">"d4(f(g))/dx4"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"y"</span>));
<a class="jxr_linenumber" name="L302" href="#L302">302</a>         referenceRules.put(<span class="jxr_string">"d4(f(g))/dz4"</span>,        referenceRules.get(<span class="jxr_string">"d4(f(g))/dx4"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"z"</span>));
<a class="jxr_linenumber" name="L303" href="#L303">303</a>         referenceRules.put(<span class="jxr_string">"d4(f(g))/dt4"</span>,        referenceRules.get(<span class="jxr_string">"d4(f(g))/dx4"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"t"</span>));
<a class="jxr_linenumber" name="L304" href="#L304">304</a>         referenceRules.put(<span class="jxr_string">"d4(f(g))/dx3dy"</span>,      <span class="jxr_string">"d4(f(g))/dg4 * dg/dx * dg/dx * dg/dx * dg/dy +"</span> +
<a class="jxr_linenumber" name="L305" href="#L305">305</a>                                                   <span class="jxr_string">" 3 * d3(f(g))/dg3 * dg/dx * dg/dx * d2g/dxdy +"</span> +
<a class="jxr_linenumber" name="L306" href="#L306">306</a>                                                   <span class="jxr_string">" 3 * d3(f(g))/dg3 * dg/dx * d2g/dx2 * dg/dy +"</span> +
<a class="jxr_linenumber" name="L307" href="#L307">307</a>                                                   <span class="jxr_string">" 3 * d2(f(g))/dg2 * d2g/dx2 * d2g/dxdy +"</span> +
<a class="jxr_linenumber" name="L308" href="#L308">308</a>                                                   <span class="jxr_string">" 3 * d2(f(g))/dg2 * dg/dx * d3g/dx2dy +"</span> +
<a class="jxr_linenumber" name="L309" href="#L309">309</a>                                                   <span class="jxr_string">" d2(f(g))/dg2 * d3g/dx3 * dg/dy +"</span> +
<a class="jxr_linenumber" name="L310" href="#L310">310</a>                                                   <span class="jxr_string">" d(f(g))/dg * d4g/dx3dy"</span>);
<a class="jxr_linenumber" name="L311" href="#L311">311</a>         referenceRules.put(<span class="jxr_string">"d4(f(g))/dx3dz"</span>,      referenceRules.get(<span class="jxr_string">"d4(f(g))/dx3dy"</span>).replaceAll(<span class="jxr_string">"y"</span>, <span class="jxr_string">"z"</span>));
<a class="jxr_linenumber" name="L312" href="#L312">312</a>         referenceRules.put(<span class="jxr_string">"d4(f(g))/dx3dt"</span>,      referenceRules.get(<span class="jxr_string">"d4(f(g))/dx3dy"</span>).replaceAll(<span class="jxr_string">"y"</span>, <span class="jxr_string">"t"</span>));
<a class="jxr_linenumber" name="L313" href="#L313">313</a>         referenceRules.put(<span class="jxr_string">"d4(f(g))/dxdy3"</span>,      <span class="jxr_string">"d4(f(g))/dg4 * dg/dx * dg/dy * dg/dy * dg/dy +"</span> +
<a class="jxr_linenumber" name="L314" href="#L314">314</a>                                                   <span class="jxr_string">" 3 * d3(f(g))/dg3 * dg/dy * dg/dy * d2g/dxdy +"</span> +
<a class="jxr_linenumber" name="L315" href="#L315">315</a>                                                   <span class="jxr_string">" 3 * d3(f(g))/dg3 * dg/dx * dg/dy * d2g/dy2 +"</span> +
<a class="jxr_linenumber" name="L316" href="#L316">316</a>                                                   <span class="jxr_string">" 3 * d2(f(g))/dg2 * d2g/dxdy * d2g/dy2 +"</span> +
<a class="jxr_linenumber" name="L317" href="#L317">317</a>                                                   <span class="jxr_string">" 3 * d2(f(g))/dg2 * dg/dy * d3g/dxdy2 +"</span> +
<a class="jxr_linenumber" name="L318" href="#L318">318</a>                                                   <span class="jxr_string">" d2(f(g))/dg2 * dg/dx * d3g/dy3 +"</span> +
<a class="jxr_linenumber" name="L319" href="#L319">319</a>                                                   <span class="jxr_string">" d(f(g))/dg * d4g/dxdy3"</span>);
<a class="jxr_linenumber" name="L320" href="#L320">320</a>         referenceRules.put(<span class="jxr_string">"d4(f(g))/dxdz3"</span>,      referenceRules.get(<span class="jxr_string">"d4(f(g))/dxdy3"</span>).replaceAll(<span class="jxr_string">"y"</span>, <span class="jxr_string">"z"</span>));
<a class="jxr_linenumber" name="L321" href="#L321">321</a>         referenceRules.put(<span class="jxr_string">"d4(f(g))/dxdt3"</span>,      referenceRules.get(<span class="jxr_string">"d4(f(g))/dxdy3"</span>).replaceAll(<span class="jxr_string">"y"</span>, <span class="jxr_string">"t"</span>));
<a class="jxr_linenumber" name="L322" href="#L322">322</a>         referenceRules.put(<span class="jxr_string">"d4(f(g))/dy3dz"</span>,      referenceRules.get(<span class="jxr_string">"d4(f(g))/dx3dz"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"y"</span>));
<a class="jxr_linenumber" name="L323" href="#L323">323</a>         referenceRules.put(<span class="jxr_string">"d4(f(g))/dy3dt"</span>,      referenceRules.get(<span class="jxr_string">"d4(f(g))/dx3dt"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"y"</span>));
<a class="jxr_linenumber" name="L324" href="#L324">324</a>         referenceRules.put(<span class="jxr_string">"d4(f(g))/dydz3"</span>,      referenceRules.get(<span class="jxr_string">"d4(f(g))/dxdz3"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"y"</span>));
<a class="jxr_linenumber" name="L325" href="#L325">325</a>         referenceRules.put(<span class="jxr_string">"d4(f(g))/dydt3"</span>,      referenceRules.get(<span class="jxr_string">"d4(f(g))/dxdt3"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"y"</span>));
<a class="jxr_linenumber" name="L326" href="#L326">326</a>         referenceRules.put(<span class="jxr_string">"d4(f(g))/dz3dt"</span>,      referenceRules.get(<span class="jxr_string">"d4(f(g))/dx3dt"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"z"</span>));
<a class="jxr_linenumber" name="L327" href="#L327">327</a>         referenceRules.put(<span class="jxr_string">"d4(f(g))/dzdt3"</span>,      referenceRules.get(<span class="jxr_string">"d4(f(g))/dxdt3"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"z"</span>));
<a class="jxr_linenumber" name="L328" href="#L328">328</a>         referenceRules.put(<span class="jxr_string">"d4(f(g))/dx2dy2"</span>,     <span class="jxr_string">"d4(f(g))/dg4 * dg/dx * dg/dx * dg/dy * dg/dy +"</span> +
<a class="jxr_linenumber" name="L329" href="#L329">329</a>                                                   <span class="jxr_string">" 4 * d3(f(g))/dg3 * dg/dx * dg/dy * d2g/dxdy +"</span> +
<a class="jxr_linenumber" name="L330" href="#L330">330</a>                                                   <span class="jxr_string">" d3(f(g))/dg3 * dg/dx * dg/dx * d2g/dy2 +"</span> +
<a class="jxr_linenumber" name="L331" href="#L331">331</a>                                                   <span class="jxr_string">" 2 * d2(f(g))/dg2 * d2g/dxdy * d2g/dxdy +"</span> +
<a class="jxr_linenumber" name="L332" href="#L332">332</a>                                                   <span class="jxr_string">" 2 * d2(f(g))/dg2 * dg/dx * d3g/dxdy2 +"</span> +
<a class="jxr_linenumber" name="L333" href="#L333">333</a>                                                   <span class="jxr_string">" d3(f(g))/dg3 * d2g/dx2 * dg/dy * dg/dy +"</span> +
<a class="jxr_linenumber" name="L334" href="#L334">334</a>                                                   <span class="jxr_string">" 2 * d2(f(g))/dg2 * dg/dy * d3g/dx2dy +"</span> +
<a class="jxr_linenumber" name="L335" href="#L335">335</a>                                                   <span class="jxr_string">" d2(f(g))/dg2 * d2g/dx2 * d2g/dy2 +"</span> +
<a class="jxr_linenumber" name="L336" href="#L336">336</a>                                                   <span class="jxr_string">" d(f(g))/dg * d4g/dx2dy2"</span>);
<a class="jxr_linenumber" name="L337" href="#L337">337</a>         referenceRules.put(<span class="jxr_string">"d4(f(g))/dx2dz2"</span>,     referenceRules.get(<span class="jxr_string">"d4(f(g))/dx2dy2"</span>).replaceAll(<span class="jxr_string">"y"</span>, <span class="jxr_string">"z"</span>));
<a class="jxr_linenumber" name="L338" href="#L338">338</a>         referenceRules.put(<span class="jxr_string">"d4(f(g))/dx2dt2"</span>,     referenceRules.get(<span class="jxr_string">"d4(f(g))/dx2dy2"</span>).replaceAll(<span class="jxr_string">"y"</span>, <span class="jxr_string">"t"</span>));
<a class="jxr_linenumber" name="L339" href="#L339">339</a>         referenceRules.put(<span class="jxr_string">"d4(f(g))/dy2dz2"</span>,     referenceRules.get(<span class="jxr_string">"d4(f(g))/dx2dz2"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"y"</span>));
<a class="jxr_linenumber" name="L340" href="#L340">340</a>         referenceRules.put(<span class="jxr_string">"d4(f(g))/dy2dt2"</span>,     referenceRules.get(<span class="jxr_string">"d4(f(g))/dx2dt2"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"y"</span>));
<a class="jxr_linenumber" name="L341" href="#L341">341</a>         referenceRules.put(<span class="jxr_string">"d4(f(g))/dz2dt2"</span>,     referenceRules.get(<span class="jxr_string">"d4(f(g))/dx2dt2"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"z"</span>));
<a class="jxr_linenumber" name="L342" href="#L342">342</a> 
<a class="jxr_linenumber" name="L343" href="#L343">343</a>         referenceRules.put(<span class="jxr_string">"d4(f(g))/dx2dydz"</span>,    <span class="jxr_string">"d4(f(g))/dg4 * dg/dx * dg/dx * dg/dy * dg/dz +"</span> +
<a class="jxr_linenumber" name="L344" href="#L344">344</a>                                                   <span class="jxr_string">" 2 * d3(f(g))/dg3 * dg/dx * dg/dy * d2g/dxdz +"</span> +
<a class="jxr_linenumber" name="L345" href="#L345">345</a>                                                   <span class="jxr_string">" d3(f(g))/dg3 * dg/dx * dg/dx * d2g/dydz +"</span> +
<a class="jxr_linenumber" name="L346" href="#L346">346</a>                                                   <span class="jxr_string">" 2 * d3(f(g))/dg3 * dg/dx * d2g/dxdy * dg/dz +"</span> +
<a class="jxr_linenumber" name="L347" href="#L347">347</a>                                                   <span class="jxr_string">" 2 * d2(f(g))/dg2 * d2g/dxdy * d2g/dxdz +"</span> +
<a class="jxr_linenumber" name="L348" href="#L348">348</a>                                                   <span class="jxr_string">" 2 * d2(f(g))/dg2 * dg/dx * d3g/dxdydz +"</span> +
<a class="jxr_linenumber" name="L349" href="#L349">349</a>                                                   <span class="jxr_string">" d3(f(g))/dg3 * d2g/dx2 * dg/dy * dg/dz +"</span> +
<a class="jxr_linenumber" name="L350" href="#L350">350</a>                                                   <span class="jxr_string">" d2(f(g))/dg2 * dg/dy * d3g/dx2dz +"</span> +
<a class="jxr_linenumber" name="L351" href="#L351">351</a>                                                   <span class="jxr_string">" d2(f(g))/dg2 * d2g/dx2 * d2g/dydz +"</span> +
<a class="jxr_linenumber" name="L352" href="#L352">352</a>                                                   <span class="jxr_string">" d2(f(g))/dg2 * d3g/dx2dy * dg/dz +"</span> +
<a class="jxr_linenumber" name="L353" href="#L353">353</a>                                                   <span class="jxr_string">" d(f(g))/dg * d4g/dx2dydz"</span>);
<a class="jxr_linenumber" name="L354" href="#L354">354</a>         referenceRules.put(<span class="jxr_string">"d4(f(g))/dx2dydt"</span>,    referenceRules.get(<span class="jxr_string">"d4(f(g))/dx2dydz"</span>).replaceAll(<span class="jxr_string">"z"</span>, <span class="jxr_string">"t"</span>));
<a class="jxr_linenumber" name="L355" href="#L355">355</a>         referenceRules.put(<span class="jxr_string">"d4(f(g))/dx2dzdt"</span>,    referenceRules.get(<span class="jxr_string">"d4(f(g))/dx2dydt"</span>).replaceAll(<span class="jxr_string">"y"</span>, <span class="jxr_string">"z"</span>));
<a class="jxr_linenumber" name="L356" href="#L356">356</a>         referenceRules.put(<span class="jxr_string">"d4(f(g))/dxdy2dz"</span>,    <span class="jxr_string">"d4(f(g))/dg4 * dg/dx * dg/dy * dg/dy * dg/dz +"</span> +
<a class="jxr_linenumber" name="L357" href="#L357">357</a>                                                   <span class="jxr_string">" d3(f(g))/dg3 * dg/dy * dg/dy * d2g/dxdz +"</span> +
<a class="jxr_linenumber" name="L358" href="#L358">358</a>                                                   <span class="jxr_string">" 2 * d3(f(g))/dg3 * dg/dx * dg/dy * d2g/dydz +"</span> +
<a class="jxr_linenumber" name="L359" href="#L359">359</a>                                                   <span class="jxr_string">" 2 * d3(f(g))/dg3 * dg/dy * d2g/dxdy * dg/dz +"</span> +
<a class="jxr_linenumber" name="L360" href="#L360">360</a>                                                   <span class="jxr_string">" 2 * d2(f(g))/dg2 * d2g/dxdy * d2g/dydz +"</span> +
<a class="jxr_linenumber" name="L361" href="#L361">361</a>                                                   <span class="jxr_string">" 2 * d2(f(g))/dg2 * dg/dy * d3g/dxdydz +"</span> +
<a class="jxr_linenumber" name="L362" href="#L362">362</a>                                                   <span class="jxr_string">" d3(f(g))/dg3 * dg/dx * d2g/dy2 * dg/dz +"</span> +
<a class="jxr_linenumber" name="L363" href="#L363">363</a>                                                   <span class="jxr_string">" d2(f(g))/dg2 * d2g/dy2 * d2g/dxdz +"</span> +
<a class="jxr_linenumber" name="L364" href="#L364">364</a>                                                   <span class="jxr_string">" d2(f(g))/dg2 * dg/dx * d3g/dy2dz +"</span> +
<a class="jxr_linenumber" name="L365" href="#L365">365</a>                                                   <span class="jxr_string">" d2(f(g))/dg2 * d3g/dxdy2 * dg/dz +"</span> +
<a class="jxr_linenumber" name="L366" href="#L366">366</a>                                                   <span class="jxr_string">" d(f(g))/dg * d4g/dxdy2dz"</span>);
<a class="jxr_linenumber" name="L367" href="#L367">367</a>         referenceRules.put(<span class="jxr_string">"d4(f(g))/dxdy2dt"</span>,    referenceRules.get(<span class="jxr_string">"d4(f(g))/dxdy2dz"</span>).replaceAll(<span class="jxr_string">"z"</span>, <span class="jxr_string">"t"</span>));
<a class="jxr_linenumber" name="L368" href="#L368">368</a>         referenceRules.put(<span class="jxr_string">"d4(f(g))/dy2dzdt"</span>,    referenceRules.get(<span class="jxr_string">"d4(f(g))/dx2dzdt"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"y"</span>));
<a class="jxr_linenumber" name="L369" href="#L369">369</a>         referenceRules.put(<span class="jxr_string">"d4(f(g))/dxdydz2"</span>,    <span class="jxr_string">"d4(f(g))/dg4 * dg/dx * dg/dy * dg/dz * dg/dz +"</span> +
<a class="jxr_linenumber" name="L370" href="#L370">370</a>                                                   <span class="jxr_string">" 2 * d3(f(g))/dg3 * dg/dy * dg/dz * d2g/dxdz +"</span> +
<a class="jxr_linenumber" name="L371" href="#L371">371</a>                                                   <span class="jxr_string">" 2 * d3(f(g))/dg3 * dg/dx * dg/dz * d2g/dydz +"</span> +
<a class="jxr_linenumber" name="L372" href="#L372">372</a>                                                   <span class="jxr_string">" d3(f(g))/dg3 * dg/dx * dg/dy * d2g/dz2 +"</span> +
<a class="jxr_linenumber" name="L373" href="#L373">373</a>                                                   <span class="jxr_string">" 2 * d2(f(g))/dg2 * d2g/dxdz * d2g/dydz +"</span> +
<a class="jxr_linenumber" name="L374" href="#L374">374</a>                                                   <span class="jxr_string">" d2(f(g))/dg2 * dg/dy * d3g/dxdz2 +"</span> +
<a class="jxr_linenumber" name="L375" href="#L375">375</a>                                                   <span class="jxr_string">" d2(f(g))/dg2 * dg/dx * d3g/dydz2 +"</span> +
<a class="jxr_linenumber" name="L376" href="#L376">376</a>                                                   <span class="jxr_string">" d3(f(g))/dg3 * d2g/dxdy * dg/dz * dg/dz +"</span> +
<a class="jxr_linenumber" name="L377" href="#L377">377</a>                                                   <span class="jxr_string">" 2 * d2(f(g))/dg2 * dg/dz * d3g/dxdydz +"</span> +
<a class="jxr_linenumber" name="L378" href="#L378">378</a>                                                   <span class="jxr_string">" d2(f(g))/dg2 * d2g/dxdy * d2g/dz2 +"</span> +
<a class="jxr_linenumber" name="L379" href="#L379">379</a>                                                   <span class="jxr_string">" d(f(g))/dg * d4g/dxdydz2"</span>);
<a class="jxr_linenumber" name="L380" href="#L380">380</a>         referenceRules.put(<span class="jxr_string">"d4(f(g))/dxdz2dt"</span>,    referenceRules.get(<span class="jxr_string">"d4(f(g))/dxdy2dt"</span>).replaceAll(<span class="jxr_string">"y"</span>, <span class="jxr_string">"z"</span>));
<a class="jxr_linenumber" name="L381" href="#L381">381</a>         referenceRules.put(<span class="jxr_string">"d4(f(g))/dydz2dt"</span>,    referenceRules.get(<span class="jxr_string">"d4(f(g))/dxdz2dt"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"y"</span>));
<a class="jxr_linenumber" name="L382" href="#L382">382</a>         referenceRules.put(<span class="jxr_string">"d4(f(g))/dxdydt2"</span>,    referenceRules.get(<span class="jxr_string">"d4(f(g))/dxdydz2"</span>).replaceAll(<span class="jxr_string">"z"</span>, <span class="jxr_string">"t"</span>));
<a class="jxr_linenumber" name="L383" href="#L383">383</a>         referenceRules.put(<span class="jxr_string">"d4(f(g))/dxdzdt2"</span>,    referenceRules.get(<span class="jxr_string">"d4(f(g))/dxdydt2"</span>).replaceAll(<span class="jxr_string">"y"</span>, <span class="jxr_string">"z"</span>));
<a class="jxr_linenumber" name="L384" href="#L384">384</a>         referenceRules.put(<span class="jxr_string">"d4(f(g))/dydzdt2"</span>,    referenceRules.get(<span class="jxr_string">"d4(f(g))/dxdzdt2"</span>).replaceAll(<span class="jxr_string">"x"</span>, <span class="jxr_string">"y"</span>));
<a class="jxr_linenumber" name="L385" href="#L385">385</a>         referenceRules.put(<span class="jxr_string">"d4(f(g))/dxdydzdt"</span>,   <span class="jxr_string">"d4(f(g))/dg4 * dg/dx * dg/dy * dg/dz * dg/dt +"</span> +
<a class="jxr_linenumber" name="L386" href="#L386">386</a>                                                   <span class="jxr_string">" d3(f(g))/dg3 * dg/dy * dg/dz * d2g/dxdt +"</span> +
<a class="jxr_linenumber" name="L387" href="#L387">387</a>                                                   <span class="jxr_string">" d3(f(g))/dg3 * dg/dx * dg/dz * d2g/dydt +"</span> +
<a class="jxr_linenumber" name="L388" href="#L388">388</a>                                                   <span class="jxr_string">" d3(f(g))/dg3 * dg/dx * dg/dy * d2g/dzdt +"</span> +
<a class="jxr_linenumber" name="L389" href="#L389">389</a>                                                   <span class="jxr_string">" d3(f(g))/dg3 * dg/dy * d2g/dxdz * dg/dt +"</span> +
<a class="jxr_linenumber" name="L390" href="#L390">390</a>                                                   <span class="jxr_string">" d2(f(g))/dg2 * d2g/dxdz * d2g/dydt +"</span> +
<a class="jxr_linenumber" name="L391" href="#L391">391</a>                                                   <span class="jxr_string">" d2(f(g))/dg2 * dg/dy * d3g/dxdzdt +"</span> +
<a class="jxr_linenumber" name="L392" href="#L392">392</a>                                                   <span class="jxr_string">" d3(f(g))/dg3 * dg/dx * d2g/dydz * dg/dt +"</span> +
<a class="jxr_linenumber" name="L393" href="#L393">393</a>                                                   <span class="jxr_string">" d2(f(g))/dg2 * d2g/dydz * d2g/dxdt +"</span> +
<a class="jxr_linenumber" name="L394" href="#L394">394</a>                                                   <span class="jxr_string">" d2(f(g))/dg2 * dg/dx * d3g/dydzdt +"</span> +
<a class="jxr_linenumber" name="L395" href="#L395">395</a>                                                   <span class="jxr_string">" d3(f(g))/dg3 * d2g/dxdy * dg/dz * dg/dt +"</span> +
<a class="jxr_linenumber" name="L396" href="#L396">396</a>                                                   <span class="jxr_string">" d2(f(g))/dg2 * dg/dz * d3g/dxdydt +"</span> +
<a class="jxr_linenumber" name="L397" href="#L397">397</a>                                                   <span class="jxr_string">" d2(f(g))/dg2 * d2g/dxdy * d2g/dzdt +"</span> +
<a class="jxr_linenumber" name="L398" href="#L398">398</a>                                                   <span class="jxr_string">" d2(f(g))/dg2 * d3g/dxdydz * dg/dt +"</span> +
<a class="jxr_linenumber" name="L399" href="#L399">399</a>                                                   <span class="jxr_string">" d(f(g))/dg * d4g/dxdydzdt"</span>);
<a class="jxr_linenumber" name="L400" href="#L400">400</a> 
<a class="jxr_linenumber" name="L401" href="#L401">401</a>         Field compFieldArrayField = DSCompiler.<strong class="jxr_keyword">class</strong>.getDeclaredField(<span class="jxr_string">"compIndirection"</span>);
<a class="jxr_linenumber" name="L402" href="#L402">402</a>         compFieldArrayField.setAccessible(<strong class="jxr_keyword">true</strong>);
<a class="jxr_linenumber" name="L403" href="#L403">403</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; 5; ++i) {
<a class="jxr_linenumber" name="L404" href="#L404">404</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = 0; j &lt; 5; ++j) {
<a class="jxr_linenumber" name="L405" href="#L405">405</a>                 DSCompiler compiler = DSCompiler.getCompiler(i, j);
<a class="jxr_linenumber" name="L406" href="#L406">406</a>                 <strong class="jxr_keyword">int</strong>[][][] compIndirection = (<strong class="jxr_keyword">int</strong>[][][]) compFieldArrayField.get(compiler);
<a class="jxr_linenumber" name="L407" href="#L407">407</a>                 <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> k = 0; k &lt; compIndirection.length; ++k) {
<a class="jxr_linenumber" name="L408" href="#L408">408</a>                     String product = ordersToString(compiler.getPartialDerivativeOrders(k),
<a class="jxr_linenumber" name="L409" href="#L409">409</a>                                                     <span class="jxr_string">"(f(g))"</span>, <span class="jxr_string">"x"</span>, <span class="jxr_string">"y"</span>, <span class="jxr_string">"z"</span>, <span class="jxr_string">"t"</span>);
<a class="jxr_linenumber" name="L410" href="#L410">410</a>                     StringBuilder rule = <strong class="jxr_keyword">new</strong> StringBuilder();
<a class="jxr_linenumber" name="L411" href="#L411">411</a>                     <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong>[] term : compIndirection[k]) {
<a class="jxr_linenumber" name="L412" href="#L412">412</a>                         <strong class="jxr_keyword">if</strong> (rule.length() &gt; 0) {
<a class="jxr_linenumber" name="L413" href="#L413">413</a>                             rule.append(<span class="jxr_string">" + "</span>);
<a class="jxr_linenumber" name="L414" href="#L414">414</a>                         }
<a class="jxr_linenumber" name="L415" href="#L415">415</a>                         <strong class="jxr_keyword">if</strong> (term[0] &gt; 1) {
<a class="jxr_linenumber" name="L416" href="#L416">416</a>                             rule.append(term[0]).append(<span class="jxr_string">" * "</span>);
<a class="jxr_linenumber" name="L417" href="#L417">417</a>                         }
<a class="jxr_linenumber" name="L418" href="#L418">418</a>                         rule.append(orderToString(term[1], <span class="jxr_string">"(f(g))"</span>, <span class="jxr_string">"g"</span>));
<a class="jxr_linenumber" name="L419" href="#L419">419</a>                         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> l = 2; l &lt; term.length; ++l) {
<a class="jxr_linenumber" name="L420" href="#L420">420</a>                             rule.append(<span class="jxr_string">" * "</span>);
<a class="jxr_linenumber" name="L421" href="#L421">421</a>                             rule.append(ordersToString(compiler.getPartialDerivativeOrders(term[l]),
<a class="jxr_linenumber" name="L422" href="#L422">422</a>                                                        <span class="jxr_string">"g"</span>, <span class="jxr_string">"x"</span>, <span class="jxr_string">"y"</span>, <span class="jxr_string">"z"</span>, <span class="jxr_string">"t"</span>));
<a class="jxr_linenumber" name="L423" href="#L423">423</a>                         }
<a class="jxr_linenumber" name="L424" href="#L424">424</a>                     }
<a class="jxr_linenumber" name="L425" href="#L425">425</a>                     Assert.assertEquals(product, referenceRules.get(product), rule.toString());
<a class="jxr_linenumber" name="L426" href="#L426">426</a>                 }
<a class="jxr_linenumber" name="L427" href="#L427">427</a>             }
<a class="jxr_linenumber" name="L428" href="#L428">428</a>         }
<a class="jxr_linenumber" name="L429" href="#L429">429</a>     }
<a class="jxr_linenumber" name="L430" href="#L430">430</a> 
<a class="jxr_linenumber" name="L431" href="#L431">431</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">void</strong> checkIndices(<strong class="jxr_keyword">int</strong>[] indices, <strong class="jxr_keyword">int</strong> ... expected) {
<a class="jxr_linenumber" name="L432" href="#L432">432</a>         Assert.assertEquals(expected.length, indices.length);
<a class="jxr_linenumber" name="L433" href="#L433">433</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; expected.length; ++i) {
<a class="jxr_linenumber" name="L434" href="#L434">434</a>             Assert.assertEquals(expected[i], indices[i]);
<a class="jxr_linenumber" name="L435" href="#L435">435</a>         }
<a class="jxr_linenumber" name="L436" href="#L436">436</a>     }
<a class="jxr_linenumber" name="L437" href="#L437">437</a> 
<a class="jxr_linenumber" name="L438" href="#L438">438</a>     <strong class="jxr_keyword">private</strong> String orderToString(<strong class="jxr_keyword">int</strong> order, String functionName, String parameterName) {
<a class="jxr_linenumber" name="L439" href="#L439">439</a>         <strong class="jxr_keyword">if</strong> (order == 0) {
<a class="jxr_linenumber" name="L440" href="#L440">440</a>             <strong class="jxr_keyword">return</strong> functionName;
<a class="jxr_linenumber" name="L441" href="#L441">441</a>         } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (order == 1) {
<a class="jxr_linenumber" name="L442" href="#L442">442</a>             <strong class="jxr_keyword">return</strong> <span class="jxr_string">"d"</span> + functionName + <span class="jxr_string">"/d"</span> + parameterName;
<a class="jxr_linenumber" name="L443" href="#L443">443</a>         } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L444" href="#L444">444</a>             <strong class="jxr_keyword">return</strong> <span class="jxr_string">"d"</span> + order + functionName + <span class="jxr_string">"/d"</span> + parameterName + order;
<a class="jxr_linenumber" name="L445" href="#L445">445</a>         }
<a class="jxr_linenumber" name="L446" href="#L446">446</a>     }
<a class="jxr_linenumber" name="L447" href="#L447">447</a> 
<a class="jxr_linenumber" name="L448" href="#L448">448</a>     <strong class="jxr_keyword">private</strong> String ordersToString(<strong class="jxr_keyword">int</strong>[] orders, String functionName, String ... parametersNames) {
<a class="jxr_linenumber" name="L449" href="#L449">449</a> 
<a class="jxr_linenumber" name="L450" href="#L450">450</a>         <strong class="jxr_keyword">int</strong> sumOrders = 0;
<a class="jxr_linenumber" name="L451" href="#L451">451</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> order : orders) {
<a class="jxr_linenumber" name="L452" href="#L452">452</a>             sumOrders += order;
<a class="jxr_linenumber" name="L453" href="#L453">453</a>         }
<a class="jxr_linenumber" name="L454" href="#L454">454</a> 
<a class="jxr_linenumber" name="L455" href="#L455">455</a>         <strong class="jxr_keyword">if</strong> (sumOrders == 0) {
<a class="jxr_linenumber" name="L456" href="#L456">456</a>             <strong class="jxr_keyword">return</strong> functionName;
<a class="jxr_linenumber" name="L457" href="#L457">457</a>         }
<a class="jxr_linenumber" name="L458" href="#L458">458</a> 
<a class="jxr_linenumber" name="L459" href="#L459">459</a>         StringBuilder builder = <strong class="jxr_keyword">new</strong> StringBuilder();
<a class="jxr_linenumber" name="L460" href="#L460">460</a>         builder.append('d');
<a class="jxr_linenumber" name="L461" href="#L461">461</a>         <strong class="jxr_keyword">if</strong> (sumOrders &gt; 1) {
<a class="jxr_linenumber" name="L462" href="#L462">462</a>             builder.append(sumOrders);
<a class="jxr_linenumber" name="L463" href="#L463">463</a>         }
<a class="jxr_linenumber" name="L464" href="#L464">464</a>         builder.append(functionName).append('/');
<a class="jxr_linenumber" name="L465" href="#L465">465</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; orders.length; ++i) {
<a class="jxr_linenumber" name="L466" href="#L466">466</a>             <strong class="jxr_keyword">if</strong> (orders[i] &gt; 0) {
<a class="jxr_linenumber" name="L467" href="#L467">467</a>                 builder.append('d').append(parametersNames[i]);
<a class="jxr_linenumber" name="L468" href="#L468">468</a>                 <strong class="jxr_keyword">if</strong> (orders[i] &gt; 1) {
<a class="jxr_linenumber" name="L469" href="#L469">469</a>                     builder.append(orders[i]);
<a class="jxr_linenumber" name="L470" href="#L470">470</a>                 }
<a class="jxr_linenumber" name="L471" href="#L471">471</a>             }
<a class="jxr_linenumber" name="L472" href="#L472">472</a>         }
<a class="jxr_linenumber" name="L473" href="#L473">473</a>         <strong class="jxr_keyword">return</strong> builder.toString();
<a class="jxr_linenumber" name="L474" href="#L474">474</a> 
<a class="jxr_linenumber" name="L475" href="#L475">475</a>     }
<a class="jxr_linenumber" name="L476" href="#L476">476</a> 
<a class="jxr_linenumber" name="L477" href="#L477">477</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2003&#x2013;2016 <a href="http://www.apache.org/">The Apache Software Foundation</a>. All rights reserved.</div>
</body>
</html>
