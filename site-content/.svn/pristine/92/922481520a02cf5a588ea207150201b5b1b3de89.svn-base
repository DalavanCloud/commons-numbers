<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span><a name="line.17"></a>
<span class="sourceLineNo">018</span>package org.apache.commons.math3.distribution;<a name="line.18"></a>
<span class="sourceLineNo">019</span><a name="line.19"></a>
<span class="sourceLineNo">020</span>import org.apache.commons.math3.exception.NotStrictlyPositiveException;<a name="line.20"></a>
<span class="sourceLineNo">021</span>import org.junit.Assert;<a name="line.21"></a>
<span class="sourceLineNo">022</span>import org.junit.Test;<a name="line.22"></a>
<span class="sourceLineNo">023</span><a name="line.23"></a>
<span class="sourceLineNo">024</span>/**<a name="line.24"></a>
<span class="sourceLineNo">025</span> * Test cases for {@link NormalDistribution}. Extends<a name="line.25"></a>
<span class="sourceLineNo">026</span> * {@link RealDistributionAbstractTest}. See class javadoc of that class<a name="line.26"></a>
<span class="sourceLineNo">027</span> * for details.<a name="line.27"></a>
<span class="sourceLineNo">028</span> *<a name="line.28"></a>
<span class="sourceLineNo">029</span> */<a name="line.29"></a>
<span class="sourceLineNo">030</span>public class NormalDistributionTest extends RealDistributionAbstractTest {<a name="line.30"></a>
<span class="sourceLineNo">031</span><a name="line.31"></a>
<span class="sourceLineNo">032</span>    //-------------- Implementations for abstract methods -----------------------<a name="line.32"></a>
<span class="sourceLineNo">033</span><a name="line.33"></a>
<span class="sourceLineNo">034</span>    /** Creates the default real distribution instance to use in tests. */<a name="line.34"></a>
<span class="sourceLineNo">035</span>    @Override<a name="line.35"></a>
<span class="sourceLineNo">036</span>    public NormalDistribution makeDistribution() {<a name="line.36"></a>
<span class="sourceLineNo">037</span>        return new NormalDistribution(2.1, 1.4);<a name="line.37"></a>
<span class="sourceLineNo">038</span>    }<a name="line.38"></a>
<span class="sourceLineNo">039</span><a name="line.39"></a>
<span class="sourceLineNo">040</span>    /** Creates the default cumulative probability distribution test input values */<a name="line.40"></a>
<span class="sourceLineNo">041</span>    @Override<a name="line.41"></a>
<span class="sourceLineNo">042</span>    public double[] makeCumulativeTestPoints() {<a name="line.42"></a>
<span class="sourceLineNo">043</span>        // quantiles computed using R<a name="line.43"></a>
<span class="sourceLineNo">044</span>        return new double[] {-2.226325228634938d, -1.156887023657177d, -0.643949578356075d, -0.2027950777320613d, 0.305827808237559d,<a name="line.44"></a>
<span class="sourceLineNo">045</span>                6.42632522863494d, 5.35688702365718d, 4.843949578356074d, 4.40279507773206d, 3.89417219176244d};<a name="line.45"></a>
<span class="sourceLineNo">046</span>    }<a name="line.46"></a>
<span class="sourceLineNo">047</span><a name="line.47"></a>
<span class="sourceLineNo">048</span>    /** Creates the default cumulative probability density test expected values */<a name="line.48"></a>
<span class="sourceLineNo">049</span>    @Override<a name="line.49"></a>
<span class="sourceLineNo">050</span>    public double[] makeCumulativeTestValues() {<a name="line.50"></a>
<span class="sourceLineNo">051</span>        return new double[] {0.001d, 0.01d, 0.025d, 0.05d, 0.1d, 0.999d,<a name="line.51"></a>
<span class="sourceLineNo">052</span>                0.990d, 0.975d, 0.950d, 0.900d};<a name="line.52"></a>
<span class="sourceLineNo">053</span>    }<a name="line.53"></a>
<span class="sourceLineNo">054</span><a name="line.54"></a>
<span class="sourceLineNo">055</span>    /** Creates the default probability density test expected values */<a name="line.55"></a>
<span class="sourceLineNo">056</span>    @Override<a name="line.56"></a>
<span class="sourceLineNo">057</span>    public double[] makeDensityTestValues() {<a name="line.57"></a>
<span class="sourceLineNo">058</span>        return new double[] {0.00240506434076, 0.0190372444310, 0.0417464784322, 0.0736683145538, 0.125355951380,<a name="line.58"></a>
<span class="sourceLineNo">059</span>                0.00240506434076, 0.0190372444310, 0.0417464784322, 0.0736683145538, 0.125355951380};<a name="line.59"></a>
<span class="sourceLineNo">060</span>    }<a name="line.60"></a>
<span class="sourceLineNo">061</span><a name="line.61"></a>
<span class="sourceLineNo">062</span>    // --------------------- Override tolerance  --------------<a name="line.62"></a>
<span class="sourceLineNo">063</span>    protected double defaultTolerance = NormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;<a name="line.63"></a>
<span class="sourceLineNo">064</span>    @Override<a name="line.64"></a>
<span class="sourceLineNo">065</span>    public void setUp() {<a name="line.65"></a>
<span class="sourceLineNo">066</span>        super.setUp();<a name="line.66"></a>
<span class="sourceLineNo">067</span>        setTolerance(defaultTolerance);<a name="line.67"></a>
<span class="sourceLineNo">068</span>    }<a name="line.68"></a>
<span class="sourceLineNo">069</span><a name="line.69"></a>
<span class="sourceLineNo">070</span>    //---------------------------- Additional test cases -------------------------<a name="line.70"></a>
<span class="sourceLineNo">071</span><a name="line.71"></a>
<span class="sourceLineNo">072</span>    private void verifyQuantiles() {<a name="line.72"></a>
<span class="sourceLineNo">073</span>        NormalDistribution distribution = (NormalDistribution) getDistribution();<a name="line.73"></a>
<span class="sourceLineNo">074</span>        double mu = distribution.getMean();<a name="line.74"></a>
<span class="sourceLineNo">075</span>        double sigma = distribution.getStandardDeviation();<a name="line.75"></a>
<span class="sourceLineNo">076</span>        setCumulativeTestPoints( new double[] {mu - 2 *sigma, mu - sigma,<a name="line.76"></a>
<span class="sourceLineNo">077</span>                mu, mu + sigma, mu + 2 * sigma,  mu + 3 * sigma, mu + 4 * sigma,<a name="line.77"></a>
<span class="sourceLineNo">078</span>                mu + 5 * sigma});<a name="line.78"></a>
<span class="sourceLineNo">079</span>        // Quantiles computed using R (same as Mathematica)<a name="line.79"></a>
<span class="sourceLineNo">080</span>        setCumulativeTestValues(new double[] {0.02275013194817921, 0.158655253931457, 0.5, 0.841344746068543,<a name="line.80"></a>
<span class="sourceLineNo">081</span>                0.977249868051821, 0.99865010196837, 0.999968328758167,  0.999999713348428});<a name="line.81"></a>
<span class="sourceLineNo">082</span>        verifyCumulativeProbabilities();<a name="line.82"></a>
<span class="sourceLineNo">083</span>    }<a name="line.83"></a>
<span class="sourceLineNo">084</span><a name="line.84"></a>
<span class="sourceLineNo">085</span>    @Test<a name="line.85"></a>
<span class="sourceLineNo">086</span>    public void testQuantiles() {<a name="line.86"></a>
<span class="sourceLineNo">087</span>        setDensityTestValues(new double[] {0.0385649760808, 0.172836231799, 0.284958771715, 0.172836231799, 0.0385649760808,<a name="line.87"></a>
<span class="sourceLineNo">088</span>                0.00316560600853, 9.55930184035e-05, 1.06194251052e-06});<a name="line.88"></a>
<span class="sourceLineNo">089</span>        verifyQuantiles();<a name="line.89"></a>
<span class="sourceLineNo">090</span>        verifyDensities();<a name="line.90"></a>
<span class="sourceLineNo">091</span><a name="line.91"></a>
<span class="sourceLineNo">092</span>        setDistribution(new NormalDistribution(0, 1));<a name="line.92"></a>
<span class="sourceLineNo">093</span>        setDensityTestValues(new double[] {0.0539909665132, 0.241970724519, 0.398942280401, 0.241970724519, 0.0539909665132,<a name="line.93"></a>
<span class="sourceLineNo">094</span>                0.00443184841194, 0.000133830225765, 1.48671951473e-06});<a name="line.94"></a>
<span class="sourceLineNo">095</span>        verifyQuantiles();<a name="line.95"></a>
<span class="sourceLineNo">096</span>        verifyDensities();<a name="line.96"></a>
<span class="sourceLineNo">097</span><a name="line.97"></a>
<span class="sourceLineNo">098</span>        setDistribution(new NormalDistribution(0, 0.1));<a name="line.98"></a>
<span class="sourceLineNo">099</span>        setDensityTestValues(new double[] {0.539909665132, 2.41970724519, 3.98942280401, 2.41970724519,<a name="line.99"></a>
<span class="sourceLineNo">100</span>                0.539909665132, 0.0443184841194, 0.00133830225765, 1.48671951473e-05});<a name="line.100"></a>
<span class="sourceLineNo">101</span>        verifyQuantiles();<a name="line.101"></a>
<span class="sourceLineNo">102</span>        verifyDensities();<a name="line.102"></a>
<span class="sourceLineNo">103</span>    }<a name="line.103"></a>
<span class="sourceLineNo">104</span><a name="line.104"></a>
<span class="sourceLineNo">105</span>    @Test<a name="line.105"></a>
<span class="sourceLineNo">106</span>    public void testInverseCumulativeProbabilityExtremes() {<a name="line.106"></a>
<span class="sourceLineNo">107</span>        setInverseCumulativeTestPoints(new double[] {0, 1});<a name="line.107"></a>
<span class="sourceLineNo">108</span>        setInverseCumulativeTestValues(<a name="line.108"></a>
<span class="sourceLineNo">109</span>                new double[] {Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY});<a name="line.109"></a>
<span class="sourceLineNo">110</span>        verifyInverseCumulativeProbabilities();<a name="line.110"></a>
<span class="sourceLineNo">111</span>    }<a name="line.111"></a>
<span class="sourceLineNo">112</span><a name="line.112"></a>
<span class="sourceLineNo">113</span>    @Test<a name="line.113"></a>
<span class="sourceLineNo">114</span>    public void testGetMean() {<a name="line.114"></a>
<span class="sourceLineNo">115</span>        NormalDistribution distribution = (NormalDistribution) getDistribution();<a name="line.115"></a>
<span class="sourceLineNo">116</span>        Assert.assertEquals(2.1, distribution.getMean(), 0);<a name="line.116"></a>
<span class="sourceLineNo">117</span>    }<a name="line.117"></a>
<span class="sourceLineNo">118</span><a name="line.118"></a>
<span class="sourceLineNo">119</span>    @Test<a name="line.119"></a>
<span class="sourceLineNo">120</span>    public void testGetStandardDeviation() {<a name="line.120"></a>
<span class="sourceLineNo">121</span>        NormalDistribution distribution = (NormalDistribution) getDistribution();<a name="line.121"></a>
<span class="sourceLineNo">122</span>        Assert.assertEquals(1.4, distribution.getStandardDeviation(), 0);<a name="line.122"></a>
<span class="sourceLineNo">123</span>    }<a name="line.123"></a>
<span class="sourceLineNo">124</span><a name="line.124"></a>
<span class="sourceLineNo">125</span>    @Test(expected=NotStrictlyPositiveException.class)<a name="line.125"></a>
<span class="sourceLineNo">126</span>    public void testPreconditions() {<a name="line.126"></a>
<span class="sourceLineNo">127</span>        new NormalDistribution(1, 0);<a name="line.127"></a>
<span class="sourceLineNo">128</span>    }<a name="line.128"></a>
<span class="sourceLineNo">129</span><a name="line.129"></a>
<span class="sourceLineNo">130</span>    @Test<a name="line.130"></a>
<span class="sourceLineNo">131</span>    public void testDensity() {<a name="line.131"></a>
<span class="sourceLineNo">132</span>        double [] x = new double[]{-2, -1, 0, 1, 2};<a name="line.132"></a>
<span class="sourceLineNo">133</span>        // R 2.5: print(dnorm(c(-2,-1,0,1,2)), digits=10)<a name="line.133"></a>
<span class="sourceLineNo">134</span>        checkDensity(0, 1, x, new double[]{0.05399096651, 0.24197072452, 0.39894228040, 0.24197072452, 0.05399096651});<a name="line.134"></a>
<span class="sourceLineNo">135</span>        // R 2.5: print(dnorm(c(-2,-1,0,1,2), mean=1.1), digits=10)<a name="line.135"></a>
<span class="sourceLineNo">136</span>        checkDensity(1.1, 1, x, new double[]{0.003266819056,0.043983595980,0.217852177033,0.396952547477,0.266085249899});<a name="line.136"></a>
<span class="sourceLineNo">137</span>    }<a name="line.137"></a>
<span class="sourceLineNo">138</span><a name="line.138"></a>
<span class="sourceLineNo">139</span>    private void checkDensity(double mean, double sd, double[] x, double[] expected) {<a name="line.139"></a>
<span class="sourceLineNo">140</span>        NormalDistribution d = new NormalDistribution(mean, sd);<a name="line.140"></a>
<span class="sourceLineNo">141</span>        for (int i = 0; i &lt; x.length; i++) {<a name="line.141"></a>
<span class="sourceLineNo">142</span>            Assert.assertEquals(expected[i], d.density(x[i]), 1e-9);<a name="line.142"></a>
<span class="sourceLineNo">143</span>        }<a name="line.143"></a>
<span class="sourceLineNo">144</span>    }<a name="line.144"></a>
<span class="sourceLineNo">145</span><a name="line.145"></a>
<span class="sourceLineNo">146</span>    /**<a name="line.146"></a>
<span class="sourceLineNo">147</span>     * Check to make sure top-coding of extreme values works correctly.<a name="line.147"></a>
<span class="sourceLineNo">148</span>     * Verifies fixes for JIRA MATH-167, MATH-414<a name="line.148"></a>
<span class="sourceLineNo">149</span>     */<a name="line.149"></a>
<span class="sourceLineNo">150</span>    @Test<a name="line.150"></a>
<span class="sourceLineNo">151</span>    public void testExtremeValues() {<a name="line.151"></a>
<span class="sourceLineNo">152</span>        NormalDistribution distribution = new NormalDistribution(0, 1);<a name="line.152"></a>
<span class="sourceLineNo">153</span>        for (int i = 0; i &lt; 100; i++) { // make sure no convergence exception<a name="line.153"></a>
<span class="sourceLineNo">154</span>            double lowerTail = distribution.cumulativeProbability(-i);<a name="line.154"></a>
<span class="sourceLineNo">155</span>            double upperTail = distribution.cumulativeProbability(i);<a name="line.155"></a>
<span class="sourceLineNo">156</span>            if (i &lt; 9) { // make sure not top-coded<a name="line.156"></a>
<span class="sourceLineNo">157</span>                // For i = 10, due to bad tail precision in erf (MATH-364), 1 is returned<a name="line.157"></a>
<span class="sourceLineNo">158</span>                // TODO: once MATH-364 is resolved, replace 9 with 30<a name="line.158"></a>
<span class="sourceLineNo">159</span>                Assert.assertTrue(lowerTail &gt; 0.0d);<a name="line.159"></a>
<span class="sourceLineNo">160</span>                Assert.assertTrue(upperTail &lt; 1.0d);<a name="line.160"></a>
<span class="sourceLineNo">161</span>            }<a name="line.161"></a>
<span class="sourceLineNo">162</span>            else { // make sure top coding not reversed<a name="line.162"></a>
<span class="sourceLineNo">163</span>                Assert.assertTrue(lowerTail &lt; 0.00001);<a name="line.163"></a>
<span class="sourceLineNo">164</span>                Assert.assertTrue(upperTail &gt; 0.99999);<a name="line.164"></a>
<span class="sourceLineNo">165</span>            }<a name="line.165"></a>
<span class="sourceLineNo">166</span>        }<a name="line.166"></a>
<span class="sourceLineNo">167</span><a name="line.167"></a>
<span class="sourceLineNo">168</span>        Assert.assertEquals(distribution.cumulativeProbability(Double.MAX_VALUE), 1, 0);<a name="line.168"></a>
<span class="sourceLineNo">169</span>        Assert.assertEquals(distribution.cumulativeProbability(-Double.MAX_VALUE), 0, 0);<a name="line.169"></a>
<span class="sourceLineNo">170</span>        Assert.assertEquals(distribution.cumulativeProbability(Double.POSITIVE_INFINITY), 1, 0);<a name="line.170"></a>
<span class="sourceLineNo">171</span>        Assert.assertEquals(distribution.cumulativeProbability(Double.NEGATIVE_INFINITY), 0, 0);<a name="line.171"></a>
<span class="sourceLineNo">172</span>    }<a name="line.172"></a>
<span class="sourceLineNo">173</span><a name="line.173"></a>
<span class="sourceLineNo">174</span>    @Test<a name="line.174"></a>
<span class="sourceLineNo">175</span>    public void testMath280() {<a name="line.175"></a>
<span class="sourceLineNo">176</span>        NormalDistribution normal = new NormalDistribution(0,1);<a name="line.176"></a>
<span class="sourceLineNo">177</span>        double result = normal.inverseCumulativeProbability(0.9986501019683698);<a name="line.177"></a>
<span class="sourceLineNo">178</span>        Assert.assertEquals(3.0, result, defaultTolerance);<a name="line.178"></a>
<span class="sourceLineNo">179</span>        result = normal.inverseCumulativeProbability(0.841344746068543);<a name="line.179"></a>
<span class="sourceLineNo">180</span>        Assert.assertEquals(1.0, result, defaultTolerance);<a name="line.180"></a>
<span class="sourceLineNo">181</span>        result = normal.inverseCumulativeProbability(0.9999683287581673);<a name="line.181"></a>
<span class="sourceLineNo">182</span>        Assert.assertEquals(4.0, result, defaultTolerance);<a name="line.182"></a>
<span class="sourceLineNo">183</span>        result = normal.inverseCumulativeProbability(0.9772498680518209);<a name="line.183"></a>
<span class="sourceLineNo">184</span>        Assert.assertEquals(2.0, result, defaultTolerance);<a name="line.184"></a>
<span class="sourceLineNo">185</span>    }<a name="line.185"></a>
<span class="sourceLineNo">186</span><a name="line.186"></a>
<span class="sourceLineNo">187</span>    @Test<a name="line.187"></a>
<span class="sourceLineNo">188</span>    public void testMoments() {<a name="line.188"></a>
<span class="sourceLineNo">189</span>        final double tol = 1e-9;<a name="line.189"></a>
<span class="sourceLineNo">190</span>        NormalDistribution dist;<a name="line.190"></a>
<span class="sourceLineNo">191</span><a name="line.191"></a>
<span class="sourceLineNo">192</span>        dist = new NormalDistribution(0, 1);<a name="line.192"></a>
<span class="sourceLineNo">193</span>        Assert.assertEquals(dist.getNumericalMean(), 0, tol);<a name="line.193"></a>
<span class="sourceLineNo">194</span>        Assert.assertEquals(dist.getNumericalVariance(), 1, tol);<a name="line.194"></a>
<span class="sourceLineNo">195</span><a name="line.195"></a>
<span class="sourceLineNo">196</span>        dist = new NormalDistribution(2.2, 1.4);<a name="line.196"></a>
<span class="sourceLineNo">197</span>        Assert.assertEquals(dist.getNumericalMean(), 2.2, tol);<a name="line.197"></a>
<span class="sourceLineNo">198</span>        Assert.assertEquals(dist.getNumericalVariance(), 1.4 * 1.4, tol);<a name="line.198"></a>
<span class="sourceLineNo">199</span><a name="line.199"></a>
<span class="sourceLineNo">200</span>        dist = new NormalDistribution(-2000.9, 10.4);<a name="line.200"></a>
<span class="sourceLineNo">201</span>        Assert.assertEquals(dist.getNumericalMean(), -2000.9, tol);<a name="line.201"></a>
<span class="sourceLineNo">202</span>        Assert.assertEquals(dist.getNumericalVariance(), 10.4 * 10.4, tol);<a name="line.202"></a>
<span class="sourceLineNo">203</span>    }<a name="line.203"></a>
<span class="sourceLineNo">204</span>}<a name="line.204"></a>




























































</pre>
</div>
</body>
</html>
