<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span>package org.apache.commons.math3.optim.linear;<a name="line.17"></a>
<span class="sourceLineNo">018</span><a name="line.18"></a>
<span class="sourceLineNo">019</span>import java.util.ArrayList;<a name="line.19"></a>
<span class="sourceLineNo">020</span>import java.util.Collection;<a name="line.20"></a>
<span class="sourceLineNo">021</span>import java.util.List;<a name="line.21"></a>
<span class="sourceLineNo">022</span><a name="line.22"></a>
<span class="sourceLineNo">023</span>import org.apache.commons.math3.exception.TooManyIterationsException;<a name="line.23"></a>
<span class="sourceLineNo">024</span>import org.apache.commons.math3.optim.MaxIter;<a name="line.24"></a>
<span class="sourceLineNo">025</span>import org.apache.commons.math3.optim.nonlinear.scalar.GoalType;<a name="line.25"></a>
<span class="sourceLineNo">026</span>import org.apache.commons.math3.optim.PointValuePair;<a name="line.26"></a>
<span class="sourceLineNo">027</span>import org.apache.commons.math3.util.Precision;<a name="line.27"></a>
<span class="sourceLineNo">028</span>import org.junit.Test;<a name="line.28"></a>
<span class="sourceLineNo">029</span>import org.junit.Assert;<a name="line.29"></a>
<span class="sourceLineNo">030</span><a name="line.30"></a>
<span class="sourceLineNo">031</span>public class SimplexSolverTest {<a name="line.31"></a>
<span class="sourceLineNo">032</span>    private static final MaxIter DEFAULT_MAX_ITER = new MaxIter(100);<a name="line.32"></a>
<span class="sourceLineNo">033</span><a name="line.33"></a>
<span class="sourceLineNo">034</span>    @Test<a name="line.34"></a>
<span class="sourceLineNo">035</span>    public void testMath842Cycle() {<a name="line.35"></a>
<span class="sourceLineNo">036</span>        // from http://www.math.toronto.edu/mpugh/Teaching/APM236_04/bland<a name="line.36"></a>
<span class="sourceLineNo">037</span>        //      maximize 10 x1 - 57 x2 - 9 x3 - 24 x4<a name="line.37"></a>
<span class="sourceLineNo">038</span>        //      subject to<a name="line.38"></a>
<span class="sourceLineNo">039</span>        //          1/2 x1 - 11/2 x2 - 5/2 x3 + 9 x4  &lt;= 0<a name="line.39"></a>
<span class="sourceLineNo">040</span>        //          1/2 x1 -  3/2 x2 - 1/2 x3 +   x4  &lt;= 0<a name="line.40"></a>
<span class="sourceLineNo">041</span>        //              x1                  &lt;= 1<a name="line.41"></a>
<span class="sourceLineNo">042</span>        //      x1,x2,x3,x4 &gt;= 0<a name="line.42"></a>
<span class="sourceLineNo">043</span><a name="line.43"></a>
<span class="sourceLineNo">044</span>        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 10, -57, -9, -24}, 0);<a name="line.44"></a>
<span class="sourceLineNo">045</span>        <a name="line.45"></a>
<span class="sourceLineNo">046</span>        ArrayList&lt;LinearConstraint&gt; constraints = new ArrayList&lt;LinearConstraint&gt;();<a name="line.46"></a>
<span class="sourceLineNo">047</span><a name="line.47"></a>
<span class="sourceLineNo">048</span>        constraints.add(new LinearConstraint(new double[] {0.5, -5.5, -2.5, 9}, Relationship.LEQ, 0));<a name="line.48"></a>
<span class="sourceLineNo">049</span>        constraints.add(new LinearConstraint(new double[] {0.5, -1.5, -0.5, 1}, Relationship.LEQ, 0));<a name="line.49"></a>
<span class="sourceLineNo">050</span>        constraints.add(new LinearConstraint(new double[] {  1,    0,    0, 0}, Relationship.LEQ, 1));<a name="line.50"></a>
<span class="sourceLineNo">051</span>        <a name="line.51"></a>
<span class="sourceLineNo">052</span>        double epsilon = 1e-6;<a name="line.52"></a>
<span class="sourceLineNo">053</span>        SimplexSolver solver = new SimplexSolver();<a name="line.53"></a>
<span class="sourceLineNo">054</span>        PointValuePair solution = solver.optimize(f, new LinearConstraintSet(constraints),<a name="line.54"></a>
<span class="sourceLineNo">055</span>                                                  GoalType.MAXIMIZE,<a name="line.55"></a>
<span class="sourceLineNo">056</span>                                                  new NonNegativeConstraint(true),<a name="line.56"></a>
<span class="sourceLineNo">057</span>                                                  PivotSelectionRule.BLAND);<a name="line.57"></a>
<span class="sourceLineNo">058</span>        Assert.assertEquals(1.0d, solution.getValue(), epsilon);<a name="line.58"></a>
<span class="sourceLineNo">059</span>        Assert.assertTrue(validSolution(solution, constraints, epsilon));<a name="line.59"></a>
<span class="sourceLineNo">060</span>    }<a name="line.60"></a>
<span class="sourceLineNo">061</span><a name="line.61"></a>
<span class="sourceLineNo">062</span>    @Test<a name="line.62"></a>
<span class="sourceLineNo">063</span>    public void testMath828() {<a name="line.63"></a>
<span class="sourceLineNo">064</span>        LinearObjectiveFunction f = new LinearObjectiveFunction(<a name="line.64"></a>
<span class="sourceLineNo">065</span>                new double[] { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, 0.0);<a name="line.65"></a>
<span class="sourceLineNo">066</span>        <a name="line.66"></a>
<span class="sourceLineNo">067</span>        ArrayList &lt;LinearConstraint&gt;constraints = new ArrayList&lt;LinearConstraint&gt;();<a name="line.67"></a>
<span class="sourceLineNo">068</span><a name="line.68"></a>
<span class="sourceLineNo">069</span>        constraints.add(new LinearConstraint(new double[] {0.0, 39.0, 23.0, 96.0, 15.0, 48.0, 9.0, 21.0, 48.0, 36.0, 76.0, 19.0, 88.0, 17.0, 16.0, 36.0,}, Relationship.GEQ, 15.0));<a name="line.69"></a>
<span class="sourceLineNo">070</span>        constraints.add(new LinearConstraint(new double[] {0.0, 59.0, 93.0, 12.0, 29.0, 78.0, 73.0, 87.0, 32.0, 70.0, 68.0, 24.0, 11.0, 26.0, 65.0, 25.0,}, Relationship.GEQ, 29.0));<a name="line.70"></a>
<span class="sourceLineNo">071</span>        constraints.add(new LinearConstraint(new double[] {0.0, 74.0, 5.0, 82.0, 6.0, 97.0, 55.0, 44.0, 52.0, 54.0, 5.0, 93.0, 91.0, 8.0, 20.0, 97.0,}, Relationship.GEQ, 6.0));<a name="line.71"></a>
<span class="sourceLineNo">072</span>        constraints.add(new LinearConstraint(new double[] {8.0, -3.0, -28.0, -72.0, -8.0, -31.0, -31.0, -74.0, -47.0, -59.0, -24.0, -57.0, -56.0, -16.0, -92.0, -59.0,}, Relationship.GEQ, 0.0));<a name="line.72"></a>
<span class="sourceLineNo">073</span>        constraints.add(new LinearConstraint(new double[] {25.0, -7.0, -99.0, -78.0, -25.0, -14.0, -16.0, -89.0, -39.0, -56.0, -53.0, -9.0, -18.0, -26.0, -11.0, -61.0,}, Relationship.GEQ, 0.0));<a name="line.73"></a>
<span class="sourceLineNo">074</span>        constraints.add(new LinearConstraint(new double[] {33.0, -95.0, -15.0, -4.0, -33.0, -3.0, -20.0, -96.0, -27.0, -13.0, -80.0, -24.0, -3.0, -13.0, -57.0, -76.0,}, Relationship.GEQ, 0.0));<a name="line.74"></a>
<span class="sourceLineNo">075</span>        constraints.add(new LinearConstraint(new double[] {7.0, -95.0, -39.0, -93.0, -7.0, -94.0, -94.0, -62.0, -76.0, -26.0, -53.0, -57.0, -31.0, -76.0, -53.0, -52.0,}, Relationship.GEQ, 0.0));<a name="line.75"></a>
<span class="sourceLineNo">076</span>        <a name="line.76"></a>
<span class="sourceLineNo">077</span>        double epsilon = 1e-6;<a name="line.77"></a>
<span class="sourceLineNo">078</span>        PointValuePair solution = new SimplexSolver().optimize(DEFAULT_MAX_ITER, f, new LinearConstraintSet(constraints),<a name="line.78"></a>
<span class="sourceLineNo">079</span>                                                               GoalType.MINIMIZE, new NonNegativeConstraint(true));<a name="line.79"></a>
<span class="sourceLineNo">080</span>        Assert.assertEquals(1.0d, solution.getValue(), epsilon);<a name="line.80"></a>
<span class="sourceLineNo">081</span>        Assert.assertTrue(validSolution(solution, constraints, epsilon));<a name="line.81"></a>
<span class="sourceLineNo">082</span>    }<a name="line.82"></a>
<span class="sourceLineNo">083</span><a name="line.83"></a>
<span class="sourceLineNo">084</span>    @Test<a name="line.84"></a>
<span class="sourceLineNo">085</span>    public void testMath828Cycle() {<a name="line.85"></a>
<span class="sourceLineNo">086</span>        LinearObjectiveFunction f = new LinearObjectiveFunction(<a name="line.86"></a>
<span class="sourceLineNo">087</span>                new double[] { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, 0.0);<a name="line.87"></a>
<span class="sourceLineNo">088</span>        <a name="line.88"></a>
<span class="sourceLineNo">089</span>        ArrayList &lt;LinearConstraint&gt;constraints = new ArrayList&lt;LinearConstraint&gt;();<a name="line.89"></a>
<span class="sourceLineNo">090</span><a name="line.90"></a>
<span class="sourceLineNo">091</span>        constraints.add(new LinearConstraint(new double[] {0.0, 16.0, 14.0, 69.0, 1.0, 85.0, 52.0, 43.0, 64.0, 97.0, 14.0, 74.0, 89.0, 28.0, 94.0, 58.0, 13.0, 22.0, 21.0, 17.0, 30.0, 25.0, 1.0, 59.0, 91.0, 78.0, 12.0, 74.0, 56.0, 3.0, 88.0,}, Relationship.GEQ, 91.0));<a name="line.91"></a>
<span class="sourceLineNo">092</span>        constraints.add(new LinearConstraint(new double[] {0.0, 60.0, 40.0, 81.0, 71.0, 72.0, 46.0, 45.0, 38.0, 48.0, 40.0, 17.0, 33.0, 85.0, 64.0, 32.0, 84.0, 3.0, 54.0, 44.0, 71.0, 67.0, 90.0, 95.0, 54.0, 99.0, 99.0, 29.0, 52.0, 98.0, 9.0,}, Relationship.GEQ, 54.0));<a name="line.92"></a>
<span class="sourceLineNo">093</span>        constraints.add(new LinearConstraint(new double[] {0.0, 41.0, 12.0, 86.0, 90.0, 61.0, 31.0, 41.0, 23.0, 89.0, 17.0, 74.0, 44.0, 27.0, 16.0, 47.0, 80.0, 32.0, 11.0, 56.0, 68.0, 82.0, 11.0, 62.0, 62.0, 53.0, 39.0, 16.0, 48.0, 1.0, 63.0,}, Relationship.GEQ, 62.0));<a name="line.93"></a>
<span class="sourceLineNo">094</span>        constraints.add(new LinearConstraint(new double[] {83.0, -76.0, -94.0, -19.0, -15.0, -70.0, -72.0, -57.0, -63.0, -65.0, -22.0, -94.0, -22.0, -88.0, -86.0, -89.0, -72.0, -16.0, -80.0, -49.0, -70.0, -93.0, -95.0, -17.0, -83.0, -97.0, -31.0, -47.0, -31.0, -13.0, -23.0,}, Relationship.GEQ, 0.0));<a name="line.94"></a>
<span class="sourceLineNo">095</span>        constraints.add(new LinearConstraint(new double[] {41.0, -96.0, -41.0, -48.0, -70.0, -43.0, -43.0, -43.0, -97.0, -37.0, -85.0, -70.0, -45.0, -67.0, -87.0, -69.0, -94.0, -54.0, -54.0, -92.0, -79.0, -10.0, -35.0, -20.0, -41.0, -41.0, -65.0, -25.0, -12.0, -8.0, -46.0,}, Relationship.GEQ, 0.0));<a name="line.95"></a>
<span class="sourceLineNo">096</span>        constraints.add(new LinearConstraint(new double[] {27.0, -42.0, -65.0, -49.0, -53.0, -42.0, -17.0, -2.0, -61.0, -31.0, -76.0, -47.0, -8.0, -93.0, -86.0, -62.0, -65.0, -63.0, -22.0, -43.0, -27.0, -23.0, -32.0, -74.0, -27.0, -63.0, -47.0, -78.0, -29.0, -95.0, -73.0,}, Relationship.GEQ, 0.0));<a name="line.96"></a>
<span class="sourceLineNo">097</span>        constraints.add(new LinearConstraint(new double[] {15.0, -46.0, -41.0, -83.0, -98.0, -99.0, -21.0, -35.0, -7.0, -14.0, -80.0, -63.0, -18.0, -42.0, -5.0, -34.0, -56.0, -70.0, -16.0, -18.0, -74.0, -61.0, -47.0, -41.0, -15.0, -79.0, -18.0, -47.0, -88.0, -68.0, -55.0,}, Relationship.GEQ, 0.0));<a name="line.97"></a>
<span class="sourceLineNo">098</span>        <a name="line.98"></a>
<span class="sourceLineNo">099</span>        double epsilon = 1e-6;<a name="line.99"></a>
<span class="sourceLineNo">100</span>        PointValuePair solution = new SimplexSolver().optimize(DEFAULT_MAX_ITER, f,<a name="line.100"></a>
<span class="sourceLineNo">101</span>                                                               new LinearConstraintSet(constraints),<a name="line.101"></a>
<span class="sourceLineNo">102</span>                                                               GoalType.MINIMIZE, new NonNegativeConstraint(true),<a name="line.102"></a>
<span class="sourceLineNo">103</span>                                                               PivotSelectionRule.BLAND);<a name="line.103"></a>
<span class="sourceLineNo">104</span>        Assert.assertEquals(1.0d, solution.getValue(), epsilon);<a name="line.104"></a>
<span class="sourceLineNo">105</span>        Assert.assertTrue(validSolution(solution, constraints, epsilon));        <a name="line.105"></a>
<span class="sourceLineNo">106</span>    }<a name="line.106"></a>
<span class="sourceLineNo">107</span><a name="line.107"></a>
<span class="sourceLineNo">108</span>    @Test<a name="line.108"></a>
<span class="sourceLineNo">109</span>    public void testMath781() {<a name="line.109"></a>
<span class="sourceLineNo">110</span>        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 2, 6, 7 }, 0);<a name="line.110"></a>
<span class="sourceLineNo">111</span><a name="line.111"></a>
<span class="sourceLineNo">112</span>        ArrayList&lt;LinearConstraint&gt; constraints = new ArrayList&lt;LinearConstraint&gt;();<a name="line.112"></a>
<span class="sourceLineNo">113</span>        constraints.add(new LinearConstraint(new double[] { 1, 2, 1 }, Relationship.LEQ, 2));<a name="line.113"></a>
<span class="sourceLineNo">114</span>        constraints.add(new LinearConstraint(new double[] { -1, 1, 1 }, Relationship.LEQ, -1));<a name="line.114"></a>
<span class="sourceLineNo">115</span>        constraints.add(new LinearConstraint(new double[] { 2, -3, 1 }, Relationship.LEQ, -1));<a name="line.115"></a>
<span class="sourceLineNo">116</span><a name="line.116"></a>
<span class="sourceLineNo">117</span>        double epsilon = 1e-6;<a name="line.117"></a>
<span class="sourceLineNo">118</span>        SimplexSolver solver = new SimplexSolver();<a name="line.118"></a>
<span class="sourceLineNo">119</span>        PointValuePair solution = solver.optimize(DEFAULT_MAX_ITER, f, new LinearConstraintSet(constraints),<a name="line.119"></a>
<span class="sourceLineNo">120</span>                                                  GoalType.MAXIMIZE, new NonNegativeConstraint(false));<a name="line.120"></a>
<span class="sourceLineNo">121</span><a name="line.121"></a>
<span class="sourceLineNo">122</span>        Assert.assertTrue(Precision.compareTo(solution.getPoint()[0], 0.0d, epsilon) &gt; 0);<a name="line.122"></a>
<span class="sourceLineNo">123</span>        Assert.assertTrue(Precision.compareTo(solution.getPoint()[1], 0.0d, epsilon) &gt; 0);<a name="line.123"></a>
<span class="sourceLineNo">124</span>        Assert.assertTrue(Precision.compareTo(solution.getPoint()[2], 0.0d, epsilon) &lt; 0);<a name="line.124"></a>
<span class="sourceLineNo">125</span>        Assert.assertEquals(2.0d, solution.getValue(), epsilon);<a name="line.125"></a>
<span class="sourceLineNo">126</span>    }<a name="line.126"></a>
<span class="sourceLineNo">127</span><a name="line.127"></a>
<span class="sourceLineNo">128</span>    @Test<a name="line.128"></a>
<span class="sourceLineNo">129</span>    public void testMath713NegativeVariable() {<a name="line.129"></a>
<span class="sourceLineNo">130</span>        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] {1.0, 1.0}, 0.0d);<a name="line.130"></a>
<span class="sourceLineNo">131</span>        ArrayList&lt;LinearConstraint&gt; constraints = new ArrayList&lt;LinearConstraint&gt;();<a name="line.131"></a>
<span class="sourceLineNo">132</span>        constraints.add(new LinearConstraint(new double[] {1, 0}, Relationship.EQ, 1));<a name="line.132"></a>
<span class="sourceLineNo">133</span><a name="line.133"></a>
<span class="sourceLineNo">134</span>        double epsilon = 1e-6;<a name="line.134"></a>
<span class="sourceLineNo">135</span>        SimplexSolver solver = new SimplexSolver();<a name="line.135"></a>
<span class="sourceLineNo">136</span>        PointValuePair solution = solver.optimize(DEFAULT_MAX_ITER, f, new LinearConstraintSet(constraints),<a name="line.136"></a>
<span class="sourceLineNo">137</span>                                                  GoalType.MINIMIZE, new NonNegativeConstraint(true));<a name="line.137"></a>
<span class="sourceLineNo">138</span><a name="line.138"></a>
<span class="sourceLineNo">139</span>        Assert.assertTrue(Precision.compareTo(solution.getPoint()[0], 0.0d, epsilon) &gt;= 0);<a name="line.139"></a>
<span class="sourceLineNo">140</span>        Assert.assertTrue(Precision.compareTo(solution.getPoint()[1], 0.0d, epsilon) &gt;= 0);<a name="line.140"></a>
<span class="sourceLineNo">141</span>    }<a name="line.141"></a>
<span class="sourceLineNo">142</span><a name="line.142"></a>
<span class="sourceLineNo">143</span>    @Test<a name="line.143"></a>
<span class="sourceLineNo">144</span>    public void testMath434NegativeVariable() {<a name="line.144"></a>
<span class="sourceLineNo">145</span>        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] {0.0, 0.0, 1.0}, 0.0d);<a name="line.145"></a>
<span class="sourceLineNo">146</span>        ArrayList&lt;LinearConstraint&gt; constraints = new ArrayList&lt;LinearConstraint&gt;();<a name="line.146"></a>
<span class="sourceLineNo">147</span>        constraints.add(new LinearConstraint(new double[] {1, 1, 0}, Relationship.EQ, 5));<a name="line.147"></a>
<span class="sourceLineNo">148</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 1}, Relationship.GEQ, -10));<a name="line.148"></a>
<span class="sourceLineNo">149</span><a name="line.149"></a>
<span class="sourceLineNo">150</span>        double epsilon = 1e-6;<a name="line.150"></a>
<span class="sourceLineNo">151</span>        SimplexSolver solver = new SimplexSolver();<a name="line.151"></a>
<span class="sourceLineNo">152</span>        PointValuePair solution = solver.optimize(DEFAULT_MAX_ITER, f, new LinearConstraintSet(constraints),<a name="line.152"></a>
<span class="sourceLineNo">153</span>                                                  GoalType.MINIMIZE, new NonNegativeConstraint(false));<a name="line.153"></a>
<span class="sourceLineNo">154</span><a name="line.154"></a>
<span class="sourceLineNo">155</span>        Assert.assertEquals(5.0, solution.getPoint()[0] + solution.getPoint()[1], epsilon);<a name="line.155"></a>
<span class="sourceLineNo">156</span>        Assert.assertEquals(-10.0, solution.getPoint()[2], epsilon);<a name="line.156"></a>
<span class="sourceLineNo">157</span>        Assert.assertEquals(-10.0, solution.getValue(), epsilon);<a name="line.157"></a>
<span class="sourceLineNo">158</span><a name="line.158"></a>
<span class="sourceLineNo">159</span>    }<a name="line.159"></a>
<span class="sourceLineNo">160</span><a name="line.160"></a>
<span class="sourceLineNo">161</span>    @Test(expected = NoFeasibleSolutionException.class)<a name="line.161"></a>
<span class="sourceLineNo">162</span>    public void testMath434UnfeasibleSolution() {<a name="line.162"></a>
<span class="sourceLineNo">163</span>        double epsilon = 1e-6;<a name="line.163"></a>
<span class="sourceLineNo">164</span><a name="line.164"></a>
<span class="sourceLineNo">165</span>        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] {1.0, 0.0}, 0.0);<a name="line.165"></a>
<span class="sourceLineNo">166</span>        ArrayList&lt;LinearConstraint&gt; constraints = new ArrayList&lt;LinearConstraint&gt;();<a name="line.166"></a>
<span class="sourceLineNo">167</span>        constraints.add(new LinearConstraint(new double[] {epsilon/2, 0.5}, Relationship.EQ, 0));<a name="line.167"></a>
<span class="sourceLineNo">168</span>        constraints.add(new LinearConstraint(new double[] {1e-3, 0.1}, Relationship.EQ, 10));<a name="line.168"></a>
<span class="sourceLineNo">169</span><a name="line.169"></a>
<span class="sourceLineNo">170</span>        SimplexSolver solver = new SimplexSolver();<a name="line.170"></a>
<span class="sourceLineNo">171</span>        // allowing only non-negative values, no feasible solution shall be found<a name="line.171"></a>
<span class="sourceLineNo">172</span>        solver.optimize(DEFAULT_MAX_ITER, f, new LinearConstraintSet(constraints),<a name="line.172"></a>
<span class="sourceLineNo">173</span>                        GoalType.MINIMIZE, new NonNegativeConstraint(true));<a name="line.173"></a>
<span class="sourceLineNo">174</span>    }<a name="line.174"></a>
<span class="sourceLineNo">175</span><a name="line.175"></a>
<span class="sourceLineNo">176</span>    @Test<a name="line.176"></a>
<span class="sourceLineNo">177</span>    public void testMath434PivotRowSelection() {<a name="line.177"></a>
<span class="sourceLineNo">178</span>        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] {1.0}, 0.0);<a name="line.178"></a>
<span class="sourceLineNo">179</span><a name="line.179"></a>
<span class="sourceLineNo">180</span>        double epsilon = 1e-6;<a name="line.180"></a>
<span class="sourceLineNo">181</span>        ArrayList&lt;LinearConstraint&gt; constraints = new ArrayList&lt;LinearConstraint&gt;();<a name="line.181"></a>
<span class="sourceLineNo">182</span>        constraints.add(new LinearConstraint(new double[] {200}, Relationship.GEQ, 1));<a name="line.182"></a>
<span class="sourceLineNo">183</span>        constraints.add(new LinearConstraint(new double[] {100}, Relationship.GEQ, 0.499900001));<a name="line.183"></a>
<span class="sourceLineNo">184</span><a name="line.184"></a>
<span class="sourceLineNo">185</span>        SimplexSolver solver = new SimplexSolver();<a name="line.185"></a>
<span class="sourceLineNo">186</span>        PointValuePair solution = solver.optimize(DEFAULT_MAX_ITER, f, new LinearConstraintSet(constraints),<a name="line.186"></a>
<span class="sourceLineNo">187</span>                                                  GoalType.MINIMIZE, new NonNegativeConstraint(false));<a name="line.187"></a>
<span class="sourceLineNo">188</span>        <a name="line.188"></a>
<span class="sourceLineNo">189</span>        Assert.assertTrue(Precision.compareTo(solution.getPoint()[0] * 200.d, 1.d, epsilon) &gt;= 0);<a name="line.189"></a>
<span class="sourceLineNo">190</span>        Assert.assertEquals(0.0050, solution.getValue(), epsilon);<a name="line.190"></a>
<span class="sourceLineNo">191</span>    }<a name="line.191"></a>
<span class="sourceLineNo">192</span><a name="line.192"></a>
<span class="sourceLineNo">193</span>    @Test<a name="line.193"></a>
<span class="sourceLineNo">194</span>    public void testMath434PivotRowSelection2() {<a name="line.194"></a>
<span class="sourceLineNo">195</span>        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] {0.0d, 1.0d, 1.0d, 0.0d, 0.0d, 0.0d, 0.0d}, 0.0d);<a name="line.195"></a>
<span class="sourceLineNo">196</span><a name="line.196"></a>
<span class="sourceLineNo">197</span>        ArrayList&lt;LinearConstraint&gt; constraints = new ArrayList&lt;LinearConstraint&gt;();<a name="line.197"></a>
<span class="sourceLineNo">198</span>        constraints.add(new LinearConstraint(new double[] {1.0d, -0.1d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d}, Relationship.EQ, -0.1d));<a name="line.198"></a>
<span class="sourceLineNo">199</span>        constraints.add(new LinearConstraint(new double[] {1.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d}, Relationship.GEQ, -1e-18d));<a name="line.199"></a>
<span class="sourceLineNo">200</span>        constraints.add(new LinearConstraint(new double[] {0.0d, 1.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d}, Relationship.GEQ, 0.0d));<a name="line.200"></a>
<span class="sourceLineNo">201</span>        constraints.add(new LinearConstraint(new double[] {0.0d, 0.0d, 0.0d, 1.0d, 0.0d, -0.0128588d, 1e-5d}, Relationship.EQ, 0.0d));<a name="line.201"></a>
<span class="sourceLineNo">202</span>        constraints.add(new LinearConstraint(new double[] {0.0d, 0.0d, 0.0d, 0.0d, 1.0d, 1e-5d, -0.0128586d}, Relationship.EQ, 1e-10d));<a name="line.202"></a>
<span class="sourceLineNo">203</span>        constraints.add(new LinearConstraint(new double[] {0.0d, 0.0d, 1.0d, -1.0d, 0.0d, 0.0d, 0.0d}, Relationship.GEQ, 0.0d));<a name="line.203"></a>
<span class="sourceLineNo">204</span>        constraints.add(new LinearConstraint(new double[] {0.0d, 0.0d, 1.0d, 1.0d, 0.0d, 0.0d, 0.0d}, Relationship.GEQ, 0.0d));<a name="line.204"></a>
<span class="sourceLineNo">205</span>        constraints.add(new LinearConstraint(new double[] {0.0d, 0.0d, 1.0d, 0.0d, -1.0d, 0.0d, 0.0d}, Relationship.GEQ, 0.0d));<a name="line.205"></a>
<span class="sourceLineNo">206</span>        constraints.add(new LinearConstraint(new double[] {0.0d, 0.0d, 1.0d, 0.0d, 1.0d, 0.0d, 0.0d}, Relationship.GEQ, 0.0d));<a name="line.206"></a>
<span class="sourceLineNo">207</span><a name="line.207"></a>
<span class="sourceLineNo">208</span>        double epsilon = 1e-7;<a name="line.208"></a>
<span class="sourceLineNo">209</span>        SimplexSolver simplex = new SimplexSolver();<a name="line.209"></a>
<span class="sourceLineNo">210</span>        PointValuePair solution = simplex.optimize(DEFAULT_MAX_ITER, f, new LinearConstraintSet(constraints),<a name="line.210"></a>
<span class="sourceLineNo">211</span>                                                   GoalType.MINIMIZE, new NonNegativeConstraint(false));<a name="line.211"></a>
<span class="sourceLineNo">212</span>        <a name="line.212"></a>
<span class="sourceLineNo">213</span>        Assert.assertTrue(Precision.compareTo(solution.getPoint()[0], -1e-18d, epsilon) &gt;= 0);<a name="line.213"></a>
<span class="sourceLineNo">214</span>        Assert.assertEquals(1.0d, solution.getPoint()[1], epsilon);        <a name="line.214"></a>
<span class="sourceLineNo">215</span>        Assert.assertEquals(0.0d, solution.getPoint()[2], epsilon);<a name="line.215"></a>
<span class="sourceLineNo">216</span>        Assert.assertEquals(1.0d, solution.getValue(), epsilon);<a name="line.216"></a>
<span class="sourceLineNo">217</span>    }<a name="line.217"></a>
<span class="sourceLineNo">218</span>    <a name="line.218"></a>
<span class="sourceLineNo">219</span>    @Test<a name="line.219"></a>
<span class="sourceLineNo">220</span>    public void testMath272() {<a name="line.220"></a>
<span class="sourceLineNo">221</span>        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 2, 2, 1 }, 0);<a name="line.221"></a>
<span class="sourceLineNo">222</span>        Collection&lt;LinearConstraint&gt; constraints = new ArrayList&lt;LinearConstraint&gt;();<a name="line.222"></a>
<span class="sourceLineNo">223</span>        constraints.add(new LinearConstraint(new double[] { 1, 1, 0 }, Relationship.GEQ,  1));<a name="line.223"></a>
<span class="sourceLineNo">224</span>        constraints.add(new LinearConstraint(new double[] { 1, 0, 1 }, Relationship.GEQ,  1));<a name="line.224"></a>
<span class="sourceLineNo">225</span>        constraints.add(new LinearConstraint(new double[] { 0, 1, 0 }, Relationship.GEQ,  1));<a name="line.225"></a>
<span class="sourceLineNo">226</span><a name="line.226"></a>
<span class="sourceLineNo">227</span>        SimplexSolver solver = new SimplexSolver();<a name="line.227"></a>
<span class="sourceLineNo">228</span>        PointValuePair solution = solver.optimize(DEFAULT_MAX_ITER, f, new LinearConstraintSet(constraints),<a name="line.228"></a>
<span class="sourceLineNo">229</span>                                                  GoalType.MINIMIZE, new NonNegativeConstraint(true));<a name="line.229"></a>
<span class="sourceLineNo">230</span><a name="line.230"></a>
<span class="sourceLineNo">231</span>        Assert.assertEquals(0.0, solution.getPoint()[0], .0000001);<a name="line.231"></a>
<span class="sourceLineNo">232</span>        Assert.assertEquals(1.0, solution.getPoint()[1], .0000001);<a name="line.232"></a>
<span class="sourceLineNo">233</span>        Assert.assertEquals(1.0, solution.getPoint()[2], .0000001);<a name="line.233"></a>
<span class="sourceLineNo">234</span>        Assert.assertEquals(3.0, solution.getValue(), .0000001);<a name="line.234"></a>
<span class="sourceLineNo">235</span>    }<a name="line.235"></a>
<span class="sourceLineNo">236</span><a name="line.236"></a>
<span class="sourceLineNo">237</span>    @Test<a name="line.237"></a>
<span class="sourceLineNo">238</span>    public void testMath286() {<a name="line.238"></a>
<span class="sourceLineNo">239</span>        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 0.8, 0.2, 0.7, 0.3, 0.6, 0.4 }, 0 );<a name="line.239"></a>
<span class="sourceLineNo">240</span>        Collection&lt;LinearConstraint&gt; constraints = new ArrayList&lt;LinearConstraint&gt;();<a name="line.240"></a>
<span class="sourceLineNo">241</span>        constraints.add(new LinearConstraint(new double[] { 1, 0, 1, 0, 1, 0 }, Relationship.EQ, 23.0));<a name="line.241"></a>
<span class="sourceLineNo">242</span>        constraints.add(new LinearConstraint(new double[] { 0, 1, 0, 1, 0, 1 }, Relationship.EQ, 23.0));<a name="line.242"></a>
<span class="sourceLineNo">243</span>        constraints.add(new LinearConstraint(new double[] { 1, 0, 0, 0, 0, 0 }, Relationship.GEQ, 10.0));<a name="line.243"></a>
<span class="sourceLineNo">244</span>        constraints.add(new LinearConstraint(new double[] { 0, 0, 1, 0, 0, 0 }, Relationship.GEQ, 8.0));<a name="line.244"></a>
<span class="sourceLineNo">245</span>        constraints.add(new LinearConstraint(new double[] { 0, 0, 0, 0, 1, 0 }, Relationship.GEQ, 5.0));<a name="line.245"></a>
<span class="sourceLineNo">246</span><a name="line.246"></a>
<span class="sourceLineNo">247</span>        SimplexSolver solver = new SimplexSolver();<a name="line.247"></a>
<span class="sourceLineNo">248</span>        PointValuePair solution = solver.optimize(DEFAULT_MAX_ITER, f, new LinearConstraintSet(constraints),<a name="line.248"></a>
<span class="sourceLineNo">249</span>                                                  GoalType.MAXIMIZE, new NonNegativeConstraint(true));<a name="line.249"></a>
<span class="sourceLineNo">250</span><a name="line.250"></a>
<span class="sourceLineNo">251</span>        Assert.assertEquals(25.8, solution.getValue(), .0000001);<a name="line.251"></a>
<span class="sourceLineNo">252</span>        Assert.assertEquals(23.0, solution.getPoint()[0] + solution.getPoint()[2] + solution.getPoint()[4], 0.0000001);<a name="line.252"></a>
<span class="sourceLineNo">253</span>        Assert.assertEquals(23.0, solution.getPoint()[1] + solution.getPoint()[3] + solution.getPoint()[5], 0.0000001);<a name="line.253"></a>
<span class="sourceLineNo">254</span>        Assert.assertTrue(solution.getPoint()[0] &gt;= 10.0 - 0.0000001);<a name="line.254"></a>
<span class="sourceLineNo">255</span>        Assert.assertTrue(solution.getPoint()[2] &gt;= 8.0 - 0.0000001);<a name="line.255"></a>
<span class="sourceLineNo">256</span>        Assert.assertTrue(solution.getPoint()[4] &gt;= 5.0 - 0.0000001);<a name="line.256"></a>
<span class="sourceLineNo">257</span>    }<a name="line.257"></a>
<span class="sourceLineNo">258</span><a name="line.258"></a>
<span class="sourceLineNo">259</span>    @Test<a name="line.259"></a>
<span class="sourceLineNo">260</span>    public void testDegeneracy() {<a name="line.260"></a>
<span class="sourceLineNo">261</span>        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 0.8, 0.7 }, 0 );<a name="line.261"></a>
<span class="sourceLineNo">262</span>        Collection&lt;LinearConstraint&gt; constraints = new ArrayList&lt;LinearConstraint&gt;();<a name="line.262"></a>
<span class="sourceLineNo">263</span>        constraints.add(new LinearConstraint(new double[] { 1, 1 }, Relationship.LEQ, 18.0));<a name="line.263"></a>
<span class="sourceLineNo">264</span>        constraints.add(new LinearConstraint(new double[] { 1, 0 }, Relationship.GEQ, 10.0));<a name="line.264"></a>
<span class="sourceLineNo">265</span>        constraints.add(new LinearConstraint(new double[] { 0, 1 }, Relationship.GEQ, 8.0));<a name="line.265"></a>
<span class="sourceLineNo">266</span><a name="line.266"></a>
<span class="sourceLineNo">267</span>        SimplexSolver solver = new SimplexSolver();<a name="line.267"></a>
<span class="sourceLineNo">268</span>        PointValuePair solution = solver.optimize(DEFAULT_MAX_ITER, f, new LinearConstraintSet(constraints),<a name="line.268"></a>
<span class="sourceLineNo">269</span>                                                  GoalType.MINIMIZE, new NonNegativeConstraint(true));<a name="line.269"></a>
<span class="sourceLineNo">270</span>        Assert.assertEquals(13.6, solution.getValue(), .0000001);<a name="line.270"></a>
<span class="sourceLineNo">271</span>    }<a name="line.271"></a>
<span class="sourceLineNo">272</span><a name="line.272"></a>
<span class="sourceLineNo">273</span>    @Test<a name="line.273"></a>
<span class="sourceLineNo">274</span>    public void testMath288() {<a name="line.274"></a>
<span class="sourceLineNo">275</span>        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 7, 3, 0, 0 }, 0 );<a name="line.275"></a>
<span class="sourceLineNo">276</span>        Collection&lt;LinearConstraint&gt; constraints = new ArrayList&lt;LinearConstraint&gt;();<a name="line.276"></a>
<span class="sourceLineNo">277</span>        constraints.add(new LinearConstraint(new double[] { 3, 0, -5, 0 }, Relationship.LEQ, 0.0));<a name="line.277"></a>
<span class="sourceLineNo">278</span>        constraints.add(new LinearConstraint(new double[] { 2, 0, 0, -5 }, Relationship.LEQ, 0.0));<a name="line.278"></a>
<span class="sourceLineNo">279</span>        constraints.add(new LinearConstraint(new double[] { 0, 3, 0, -5 }, Relationship.LEQ, 0.0));<a name="line.279"></a>
<span class="sourceLineNo">280</span>        constraints.add(new LinearConstraint(new double[] { 1, 0, 0, 0 }, Relationship.LEQ, 1.0));<a name="line.280"></a>
<span class="sourceLineNo">281</span>        constraints.add(new LinearConstraint(new double[] { 0, 1, 0, 0 }, Relationship.LEQ, 1.0));<a name="line.281"></a>
<span class="sourceLineNo">282</span><a name="line.282"></a>
<span class="sourceLineNo">283</span>        SimplexSolver solver = new SimplexSolver();<a name="line.283"></a>
<span class="sourceLineNo">284</span>        PointValuePair solution = solver.optimize(DEFAULT_MAX_ITER, f, new LinearConstraintSet(constraints),<a name="line.284"></a>
<span class="sourceLineNo">285</span>                                                  GoalType.MAXIMIZE, new NonNegativeConstraint(true));<a name="line.285"></a>
<span class="sourceLineNo">286</span>        Assert.assertEquals(10.0, solution.getValue(), .0000001);<a name="line.286"></a>
<span class="sourceLineNo">287</span>    }<a name="line.287"></a>
<span class="sourceLineNo">288</span><a name="line.288"></a>
<span class="sourceLineNo">289</span>    @Test<a name="line.289"></a>
<span class="sourceLineNo">290</span>    public void testMath290GEQ() {<a name="line.290"></a>
<span class="sourceLineNo">291</span>        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 1, 5 }, 0 );<a name="line.291"></a>
<span class="sourceLineNo">292</span>        Collection&lt;LinearConstraint&gt; constraints = new ArrayList&lt;LinearConstraint&gt;();<a name="line.292"></a>
<span class="sourceLineNo">293</span>        constraints.add(new LinearConstraint(new double[] { 2, 0 }, Relationship.GEQ, -1.0));<a name="line.293"></a>
<span class="sourceLineNo">294</span>        SimplexSolver solver = new SimplexSolver();<a name="line.294"></a>
<span class="sourceLineNo">295</span>        PointValuePair solution = solver.optimize(DEFAULT_MAX_ITER, f, new LinearConstraintSet(constraints),<a name="line.295"></a>
<span class="sourceLineNo">296</span>                                                  GoalType.MINIMIZE, new NonNegativeConstraint(true));<a name="line.296"></a>
<span class="sourceLineNo">297</span>        Assert.assertEquals(0, solution.getValue(), .0000001);<a name="line.297"></a>
<span class="sourceLineNo">298</span>        Assert.assertEquals(0, solution.getPoint()[0], .0000001);<a name="line.298"></a>
<span class="sourceLineNo">299</span>        Assert.assertEquals(0, solution.getPoint()[1], .0000001);<a name="line.299"></a>
<span class="sourceLineNo">300</span>    }<a name="line.300"></a>
<span class="sourceLineNo">301</span><a name="line.301"></a>
<span class="sourceLineNo">302</span>    @Test(expected=NoFeasibleSolutionException.class)<a name="line.302"></a>
<span class="sourceLineNo">303</span>    public void testMath290LEQ() {<a name="line.303"></a>
<span class="sourceLineNo">304</span>        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 1, 5 }, 0 );<a name="line.304"></a>
<span class="sourceLineNo">305</span>        Collection&lt;LinearConstraint&gt; constraints = new ArrayList&lt;LinearConstraint&gt;();<a name="line.305"></a>
<span class="sourceLineNo">306</span>        constraints.add(new LinearConstraint(new double[] { 2, 0 }, Relationship.LEQ, -1.0));<a name="line.306"></a>
<span class="sourceLineNo">307</span>        SimplexSolver solver = new SimplexSolver();<a name="line.307"></a>
<span class="sourceLineNo">308</span>        solver.optimize(DEFAULT_MAX_ITER, f, new LinearConstraintSet(constraints),<a name="line.308"></a>
<span class="sourceLineNo">309</span>                        GoalType.MINIMIZE, new NonNegativeConstraint(true));<a name="line.309"></a>
<span class="sourceLineNo">310</span>    }<a name="line.310"></a>
<span class="sourceLineNo">311</span><a name="line.311"></a>
<span class="sourceLineNo">312</span>    @Test<a name="line.312"></a>
<span class="sourceLineNo">313</span>    public void testMath293() {<a name="line.313"></a>
<span class="sourceLineNo">314</span>      LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 0.8, 0.2, 0.7, 0.3, 0.4, 0.6}, 0 );<a name="line.314"></a>
<span class="sourceLineNo">315</span>      Collection&lt;LinearConstraint&gt; constraints = new ArrayList&lt;LinearConstraint&gt;();<a name="line.315"></a>
<span class="sourceLineNo">316</span>      constraints.add(new LinearConstraint(new double[] { 1, 0, 1, 0, 1, 0 }, Relationship.EQ, 30.0));<a name="line.316"></a>
<span class="sourceLineNo">317</span>      constraints.add(new LinearConstraint(new double[] { 0, 1, 0, 1, 0, 1 }, Relationship.EQ, 30.0));<a name="line.317"></a>
<span class="sourceLineNo">318</span>      constraints.add(new LinearConstraint(new double[] { 0.8, 0.2, 0.0, 0.0, 0.0, 0.0 }, Relationship.GEQ, 10.0));<a name="line.318"></a>
<span class="sourceLineNo">319</span>      constraints.add(new LinearConstraint(new double[] { 0.0, 0.0, 0.7, 0.3, 0.0, 0.0 }, Relationship.GEQ, 10.0));<a name="line.319"></a>
<span class="sourceLineNo">320</span>      constraints.add(new LinearConstraint(new double[] { 0.0, 0.0, 0.0, 0.0, 0.4, 0.6 }, Relationship.GEQ, 10.0));<a name="line.320"></a>
<span class="sourceLineNo">321</span><a name="line.321"></a>
<span class="sourceLineNo">322</span>      SimplexSolver solver = new SimplexSolver();<a name="line.322"></a>
<span class="sourceLineNo">323</span>      PointValuePair solution1 = solver.optimize(DEFAULT_MAX_ITER, f, new LinearConstraintSet(constraints),<a name="line.323"></a>
<span class="sourceLineNo">324</span>                                                 GoalType.MAXIMIZE, new NonNegativeConstraint(true));<a name="line.324"></a>
<span class="sourceLineNo">325</span><a name="line.325"></a>
<span class="sourceLineNo">326</span>      Assert.assertEquals(15.7143, solution1.getPoint()[0], .0001);<a name="line.326"></a>
<span class="sourceLineNo">327</span>      Assert.assertEquals(0.0, solution1.getPoint()[1], .0001);<a name="line.327"></a>
<span class="sourceLineNo">328</span>      Assert.assertEquals(14.2857, solution1.getPoint()[2], .0001);<a name="line.328"></a>
<span class="sourceLineNo">329</span>      Assert.assertEquals(0.0, solution1.getPoint()[3], .0001);<a name="line.329"></a>
<span class="sourceLineNo">330</span>      Assert.assertEquals(0.0, solution1.getPoint()[4], .0001);<a name="line.330"></a>
<span class="sourceLineNo">331</span>      Assert.assertEquals(30.0, solution1.getPoint()[5], .0001);<a name="line.331"></a>
<span class="sourceLineNo">332</span>      Assert.assertEquals(40.57143, solution1.getValue(), .0001);<a name="line.332"></a>
<span class="sourceLineNo">333</span><a name="line.333"></a>
<span class="sourceLineNo">334</span>      double valA = 0.8 * solution1.getPoint()[0] + 0.2 * solution1.getPoint()[1];<a name="line.334"></a>
<span class="sourceLineNo">335</span>      double valB = 0.7 * solution1.getPoint()[2] + 0.3 * solution1.getPoint()[3];<a name="line.335"></a>
<span class="sourceLineNo">336</span>      double valC = 0.4 * solution1.getPoint()[4] + 0.6 * solution1.getPoint()[5];<a name="line.336"></a>
<span class="sourceLineNo">337</span><a name="line.337"></a>
<span class="sourceLineNo">338</span>      f = new LinearObjectiveFunction(new double[] { 0.8, 0.2, 0.7, 0.3, 0.4, 0.6}, 0 );<a name="line.338"></a>
<span class="sourceLineNo">339</span>      constraints = new ArrayList&lt;LinearConstraint&gt;();<a name="line.339"></a>
<span class="sourceLineNo">340</span>      constraints.add(new LinearConstraint(new double[] { 1, 0, 1, 0, 1, 0 }, Relationship.EQ, 30.0));<a name="line.340"></a>
<span class="sourceLineNo">341</span>      constraints.add(new LinearConstraint(new double[] { 0, 1, 0, 1, 0, 1 }, Relationship.EQ, 30.0));<a name="line.341"></a>
<span class="sourceLineNo">342</span>      constraints.add(new LinearConstraint(new double[] { 0.8, 0.2, 0.0, 0.0, 0.0, 0.0 }, Relationship.GEQ, valA));<a name="line.342"></a>
<span class="sourceLineNo">343</span>      constraints.add(new LinearConstraint(new double[] { 0.0, 0.0, 0.7, 0.3, 0.0, 0.0 }, Relationship.GEQ, valB));<a name="line.343"></a>
<span class="sourceLineNo">344</span>      constraints.add(new LinearConstraint(new double[] { 0.0, 0.0, 0.0, 0.0, 0.4, 0.6 }, Relationship.GEQ, valC));<a name="line.344"></a>
<span class="sourceLineNo">345</span><a name="line.345"></a>
<span class="sourceLineNo">346</span>      PointValuePair solution2 = solver.optimize(DEFAULT_MAX_ITER, f, new LinearConstraintSet(constraints),<a name="line.346"></a>
<span class="sourceLineNo">347</span>                                                 GoalType.MAXIMIZE, new NonNegativeConstraint(true));<a name="line.347"></a>
<span class="sourceLineNo">348</span>      Assert.assertEquals(40.57143, solution2.getValue(), .0001);<a name="line.348"></a>
<span class="sourceLineNo">349</span>    }<a name="line.349"></a>
<span class="sourceLineNo">350</span><a name="line.350"></a>
<span class="sourceLineNo">351</span>    @Test<a name="line.351"></a>
<span class="sourceLineNo">352</span>    public void testMath930() {<a name="line.352"></a>
<span class="sourceLineNo">353</span>        Collection&lt;LinearConstraint&gt; constraints = createMath930Constraints();<a name="line.353"></a>
<span class="sourceLineNo">354</span>        <a name="line.354"></a>
<span class="sourceLineNo">355</span>        double[] objFunctionCoeff = new double[33];<a name="line.355"></a>
<span class="sourceLineNo">356</span>        objFunctionCoeff[3] = 1;<a name="line.356"></a>
<span class="sourceLineNo">357</span>        LinearObjectiveFunction f = new LinearObjectiveFunction(objFunctionCoeff, 0);<a name="line.357"></a>
<span class="sourceLineNo">358</span>        SimplexSolver solver = new SimplexSolver(1e-4, 10, 1e-6);<a name="line.358"></a>
<span class="sourceLineNo">359</span>        <a name="line.359"></a>
<span class="sourceLineNo">360</span>        PointValuePair solution = solver.optimize(new MaxIter(1000), f, new LinearConstraintSet(constraints),<a name="line.360"></a>
<span class="sourceLineNo">361</span>                                                  GoalType.MINIMIZE, new NonNegativeConstraint(true));<a name="line.361"></a>
<span class="sourceLineNo">362</span>        Assert.assertEquals(0.3752298, solution.getValue(), 1e-4);<a name="line.362"></a>
<span class="sourceLineNo">363</span>    }<a name="line.363"></a>
<span class="sourceLineNo">364</span><a name="line.364"></a>
<span class="sourceLineNo">365</span>    private List&lt;LinearConstraint&gt; createMath930Constraints() {<a name="line.365"></a>
<span class="sourceLineNo">366</span>        List&lt;LinearConstraint&gt; constraints = new ArrayList&lt;LinearConstraint&gt;();<a name="line.366"></a>
<span class="sourceLineNo">367</span>        constraints.add(new LinearConstraint(new double[] {1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, 0}, Relationship.GEQ, 0.0));<a name="line.367"></a>
<span class="sourceLineNo">368</span>        constraints.add(new LinearConstraint(new double[] {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1}, Relationship.GEQ, 0.0));<a name="line.368"></a>
<span class="sourceLineNo">369</span>        constraints.add(new LinearConstraint(new double[] {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1}, Relationship.LEQ, 0.0));<a name="line.369"></a>
<span class="sourceLineNo">370</span>        constraints.add(new LinearConstraint(new double[] {0, 1, 0, -1, 0, -1, 0, 1, 0, -1, 0, 1, 0, 1, 0, -1, 0, -1, 0, 1, 0, 1, 0, -1, 0, 1, 0, -1, 0, -1, 0, 1, 0}, Relationship.GEQ, 0.0));<a name="line.370"></a>
<span class="sourceLineNo">371</span>        constraints.add(new LinearConstraint(new double[] {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.628803}, Relationship.GEQ, 0.0));<a name="line.371"></a>
<span class="sourceLineNo">372</span>        constraints.add(new LinearConstraint(new double[] {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.676993}, Relationship.LEQ, 0.0));<a name="line.372"></a>
<span class="sourceLineNo">373</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 1, -1, 0, 0, -1, 1, 0, 0, -1, 1, 0, 0, 1, -1, 0, 0, -1, 1, 0, 0, 1, -1, 0, 0, 1, -1, 0, 0, -1, 1, 0}, Relationship.GEQ, 0.0));<a name="line.373"></a>
<span class="sourceLineNo">374</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.136677}, Relationship.GEQ, 0.0));<a name="line.374"></a>
<span class="sourceLineNo">375</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.444434}, Relationship.LEQ, 0.0));<a name="line.375"></a>
<span class="sourceLineNo">376</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, -1, 0}, Relationship.GEQ, 0.0));<a name="line.376"></a>
<span class="sourceLineNo">377</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.254028}, Relationship.GEQ, 0.0));<a name="line.377"></a>
<span class="sourceLineNo">378</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.302218}, Relationship.LEQ, 0.0));<a name="line.378"></a>
<span class="sourceLineNo">379</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 1, -1, -1, 1, 0, 0, 0, 0, -1, 1, 1, -1, 0, 0, 0, 0, -1, 1, 1, -1, 0, 0, 0, 0, 1, -1, -1, 1, 0}, Relationship.GEQ, 0.0));<a name="line.379"></a>
<span class="sourceLineNo">380</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.653981}, Relationship.GEQ, 0.0));<a name="line.380"></a>
<span class="sourceLineNo">381</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.690437}, Relationship.LEQ, 0.0));<a name="line.381"></a>
<span class="sourceLineNo">382</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 1, 0, -1, 0, 0, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 0, 1, 0, -1, 0}, Relationship.GEQ, 0.0));<a name="line.382"></a>
<span class="sourceLineNo">383</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.423786}, Relationship.GEQ, 0.0));<a name="line.383"></a>
<span class="sourceLineNo">384</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.486717}, Relationship.LEQ, 0.0));<a name="line.384"></a>
<span class="sourceLineNo">385</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 1, -1, 0}, Relationship.GEQ, 0.0));<a name="line.385"></a>
<span class="sourceLineNo">386</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.049232}, Relationship.GEQ, 0.0));<a name="line.386"></a>
<span class="sourceLineNo">387</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.304747}, Relationship.LEQ, 0.0));<a name="line.387"></a>
<span class="sourceLineNo">388</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 1, 0}, Relationship.GEQ, 0.0));<a name="line.388"></a>
<span class="sourceLineNo">389</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.129826}, Relationship.GEQ, 0.0));<a name="line.389"></a>
<span class="sourceLineNo">390</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.205625}, Relationship.LEQ, 0.0));<a name="line.390"></a>
<span class="sourceLineNo">391</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 1, -1, -1, 1, -1, 1, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 1, -1, 1, -1, -1, 1, 0}, Relationship.GEQ, 0.0));<a name="line.391"></a>
<span class="sourceLineNo">392</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.621944}, Relationship.GEQ, 0.0));<a name="line.392"></a>
<span class="sourceLineNo">393</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.764385}, Relationship.LEQ, 0.0));<a name="line.393"></a>
<span class="sourceLineNo">394</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1, 0, -1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 1, 0, 1, 0, -1, 0}, Relationship.GEQ, 0.0));<a name="line.394"></a>
<span class="sourceLineNo">395</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.432572}, Relationship.GEQ, 0.0));<a name="line.395"></a>
<span class="sourceLineNo">396</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.480762}, Relationship.LEQ, 0.0));<a name="line.396"></a>
<span class="sourceLineNo">397</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 1, -1, 0}, Relationship.GEQ, 0.0));<a name="line.397"></a>
<span class="sourceLineNo">398</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.055983}, Relationship.GEQ, 0.0));<a name="line.398"></a>
<span class="sourceLineNo">399</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.11378}, Relationship.LEQ, 0.0));<a name="line.399"></a>
<span class="sourceLineNo">400</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 1, 0}, Relationship.GEQ, 0.0));<a name="line.400"></a>
<span class="sourceLineNo">401</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.009607}, Relationship.GEQ, 0.0));<a name="line.401"></a>
<span class="sourceLineNo">402</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.057797}, Relationship.LEQ, 0.0));<a name="line.402"></a>
<span class="sourceLineNo">403</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 1, -1, 0}, Relationship.GEQ, 0.0));<a name="line.403"></a>
<span class="sourceLineNo">404</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.407308}, Relationship.GEQ, 0.0));<a name="line.404"></a>
<span class="sourceLineNo">405</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.452749}, Relationship.LEQ, 0.0));<a name="line.405"></a>
<span class="sourceLineNo">406</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 1, 0}, Relationship.GEQ, 0.0));<a name="line.406"></a>
<span class="sourceLineNo">407</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.269677}, Relationship.GEQ, 0.0));<a name="line.407"></a>
<span class="sourceLineNo">408</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.321806}, Relationship.LEQ, 0.0));<a name="line.408"></a>
<span class="sourceLineNo">409</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 0}, Relationship.GEQ, 0.0));<a name="line.409"></a>
<span class="sourceLineNo">410</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.049232}, Relationship.GEQ, 0.0));<a name="line.410"></a>
<span class="sourceLineNo">411</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.06902}, Relationship.LEQ, 0.0));<a name="line.411"></a>
<span class="sourceLineNo">412</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0}, Relationship.GEQ, 0.0));<a name="line.412"></a>
<span class="sourceLineNo">413</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0}, Relationship.GEQ, 0.0));<a name="line.413"></a>
<span class="sourceLineNo">414</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.028754}, Relationship.LEQ, 0.0));<a name="line.414"></a>
<span class="sourceLineNo">415</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, 0}, Relationship.GEQ, 0.0));<a name="line.415"></a>
<span class="sourceLineNo">416</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.484254}, Relationship.GEQ, 0.0));<a name="line.416"></a>
<span class="sourceLineNo">417</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.524607}, Relationship.LEQ, 0.0));<a name="line.417"></a>
<span class="sourceLineNo">418</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1, 0, -1, 0, 1, 0, -1, 0, 1, 0, 1, 0, -1, 0}, Relationship.GEQ, 0.0));<a name="line.418"></a>
<span class="sourceLineNo">419</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.385492}, Relationship.GEQ, 0.0));<a name="line.419"></a>
<span class="sourceLineNo">420</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.430134}, Relationship.LEQ, 0.0));<a name="line.420"></a>
<span class="sourceLineNo">421</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, -1, 1, 0, 0, -1, 1, 0, 0, 1, -1, 0}, Relationship.GEQ, 0.0));<a name="line.421"></a>
<span class="sourceLineNo">422</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.34983}, Relationship.GEQ, 0.0));<a name="line.422"></a>
<span class="sourceLineNo">423</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.375781}, Relationship.LEQ, 0.0));<a name="line.423"></a>
<span class="sourceLineNo">424</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, 1, 0}, Relationship.GEQ, 0.0));<a name="line.424"></a>
<span class="sourceLineNo">425</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.254028}, Relationship.GEQ, 0.0));<a name="line.425"></a>
<span class="sourceLineNo">426</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.281308}, Relationship.LEQ, 0.0));<a name="line.426"></a>
<span class="sourceLineNo">427</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, -1, 1, 0, 0, 0, 0, -1, 1, 1, -1, 0}, Relationship.GEQ, 0.0));<a name="line.427"></a>
<span class="sourceLineNo">428</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.304995}, Relationship.GEQ, 0.0));<a name="line.428"></a>
<span class="sourceLineNo">429</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.345347}, Relationship.LEQ, 0.0));<a name="line.429"></a>
<span class="sourceLineNo">430</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1, 0, 0, 0, 0, 0, -1, 0, 1, 0}, Relationship.GEQ, 0.0));<a name="line.430"></a>
<span class="sourceLineNo">431</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.288899}, Relationship.GEQ, 0.0));<a name="line.431"></a>
<span class="sourceLineNo">432</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.332212}, Relationship.LEQ, 0.0));<a name="line.432"></a>
<span class="sourceLineNo">433</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, -1, 1, 0}, Relationship.GEQ, 0.0));<a name="line.433"></a>
<span class="sourceLineNo">434</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.14351}, Relationship.GEQ, 0.0));<a name="line.434"></a>
<span class="sourceLineNo">435</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.17057}, Relationship.LEQ, 0.0));<a name="line.435"></a>
<span class="sourceLineNo">436</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, -1, 0}, Relationship.GEQ, 0.0));<a name="line.436"></a>
<span class="sourceLineNo">437</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, -0.129826}, Relationship.GEQ, 0.0));<a name="line.437"></a>
<span class="sourceLineNo">438</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, -0.157435}, Relationship.LEQ, 0.0));<a name="line.438"></a>
<span class="sourceLineNo">439</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, -1, 1, -1, 1, 1, -1, 0}, Relationship.GEQ, 0.0));<a name="line.439"></a>
<span class="sourceLineNo">440</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, -0}, Relationship.GEQ, 0.0));<a name="line.440"></a>
<span class="sourceLineNo">441</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, -1}, Relationship.LEQ, 0.0));<a name="line.441"></a>
<span class="sourceLineNo">442</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1, 0, -1, 0, 1, 0}, Relationship.GEQ, 0.0));<a name="line.442"></a>
<span class="sourceLineNo">443</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -0.141071}, Relationship.GEQ, 0.0));<a name="line.443"></a>
<span class="sourceLineNo">444</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -0.232574}, Relationship.LEQ, 0.0));<a name="line.444"></a>
<span class="sourceLineNo">445</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, -1, 1, 0}, Relationship.GEQ, 0.0));<a name="line.445"></a>
<span class="sourceLineNo">446</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, -0}, Relationship.GEQ, 0.0));<a name="line.446"></a>
<span class="sourceLineNo">447</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, -1}, Relationship.LEQ, 0.0));<a name="line.447"></a>
<span class="sourceLineNo">448</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, -1, 0}, Relationship.GEQ, 0.0));<a name="line.448"></a>
<span class="sourceLineNo">449</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, -0.009607}, Relationship.GEQ, 0.0));<a name="line.449"></a>
<span class="sourceLineNo">450</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, -0.057797}, Relationship.LEQ, 0.0));<a name="line.450"></a>
<span class="sourceLineNo">451</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, -1, 1, 0}, Relationship.GEQ, 0.0));<a name="line.451"></a>
<span class="sourceLineNo">452</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, -0}, Relationship.GEQ, 0.0));<a name="line.452"></a>
<span class="sourceLineNo">453</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, -1}, Relationship.LEQ, 0.0));<a name="line.453"></a>
<span class="sourceLineNo">454</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1, 0}, Relationship.GEQ, 0.0));<a name="line.454"></a>
<span class="sourceLineNo">455</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, -0.091644}, Relationship.GEQ, 0.0));<a name="line.455"></a>
<span class="sourceLineNo">456</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, -0.203531}, Relationship.LEQ, 0.0));<a name="line.456"></a>
<span class="sourceLineNo">457</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0}, Relationship.GEQ, 0.0));<a name="line.457"></a>
<span class="sourceLineNo">458</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -0}, Relationship.GEQ, 0.0));<a name="line.458"></a>
<span class="sourceLineNo">459</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1}, Relationship.LEQ, 0.0));<a name="line.459"></a>
<span class="sourceLineNo">460</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0}, Relationship.GEQ, 0.0));<a name="line.460"></a>
<span class="sourceLineNo">461</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0}, Relationship.GEQ, 0.0));<a name="line.461"></a>
<span class="sourceLineNo">462</span>        constraints.add(new LinearConstraint(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -0.028754}, Relationship.LEQ, 0.0));<a name="line.462"></a>
<span class="sourceLineNo">463</span>        constraints.add(new LinearConstraint(new double[] {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, Relationship.EQ, 1.0));<a name="line.463"></a>
<span class="sourceLineNo">464</span>        return constraints;<a name="line.464"></a>
<span class="sourceLineNo">465</span>    }<a name="line.465"></a>
<span class="sourceLineNo">466</span><a name="line.466"></a>
<span class="sourceLineNo">467</span>    @Test<a name="line.467"></a>
<span class="sourceLineNo">468</span>    public void testSimplexSolver() {<a name="line.468"></a>
<span class="sourceLineNo">469</span>        LinearObjectiveFunction f =<a name="line.469"></a>
<span class="sourceLineNo">470</span>            new LinearObjectiveFunction(new double[] { 15, 10 }, 7);<a name="line.470"></a>
<span class="sourceLineNo">471</span>        Collection&lt;LinearConstraint&gt; constraints = new ArrayList&lt;LinearConstraint&gt;();<a name="line.471"></a>
<span class="sourceLineNo">472</span>        constraints.add(new LinearConstraint(new double[] { 1, 0 }, Relationship.LEQ, 2));<a name="line.472"></a>
<span class="sourceLineNo">473</span>        constraints.add(new LinearConstraint(new double[] { 0, 1 }, Relationship.LEQ, 3));<a name="line.473"></a>
<span class="sourceLineNo">474</span>        constraints.add(new LinearConstraint(new double[] { 1, 1 }, Relationship.EQ, 4));<a name="line.474"></a>
<span class="sourceLineNo">475</span><a name="line.475"></a>
<span class="sourceLineNo">476</span>        SimplexSolver solver = new SimplexSolver();<a name="line.476"></a>
<span class="sourceLineNo">477</span>        PointValuePair solution = solver.optimize(DEFAULT_MAX_ITER, f, new LinearConstraintSet(constraints),<a name="line.477"></a>
<span class="sourceLineNo">478</span>                                                  GoalType.MAXIMIZE, new NonNegativeConstraint(true));<a name="line.478"></a>
<span class="sourceLineNo">479</span>        Assert.assertEquals(2.0, solution.getPoint()[0], 0.0);<a name="line.479"></a>
<span class="sourceLineNo">480</span>        Assert.assertEquals(2.0, solution.getPoint()[1], 0.0);<a name="line.480"></a>
<span class="sourceLineNo">481</span>        Assert.assertEquals(57.0, solution.getValue(), 0.0);<a name="line.481"></a>
<span class="sourceLineNo">482</span>    }<a name="line.482"></a>
<span class="sourceLineNo">483</span><a name="line.483"></a>
<span class="sourceLineNo">484</span>    @Test<a name="line.484"></a>
<span class="sourceLineNo">485</span>    public void testSingleVariableAndConstraint() {<a name="line.485"></a>
<span class="sourceLineNo">486</span>        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 3 }, 0);<a name="line.486"></a>
<span class="sourceLineNo">487</span>        Collection&lt;LinearConstraint&gt; constraints = new ArrayList&lt;LinearConstraint&gt;();<a name="line.487"></a>
<span class="sourceLineNo">488</span>        constraints.add(new LinearConstraint(new double[] { 1 }, Relationship.LEQ, 10));<a name="line.488"></a>
<span class="sourceLineNo">489</span><a name="line.489"></a>
<span class="sourceLineNo">490</span>        SimplexSolver solver = new SimplexSolver();<a name="line.490"></a>
<span class="sourceLineNo">491</span>        PointValuePair solution = solver.optimize(DEFAULT_MAX_ITER, f, new LinearConstraintSet(constraints),<a name="line.491"></a>
<span class="sourceLineNo">492</span>                                                  GoalType.MAXIMIZE, new NonNegativeConstraint(false));<a name="line.492"></a>
<span class="sourceLineNo">493</span>        Assert.assertEquals(10.0, solution.getPoint()[0], 0.0);<a name="line.493"></a>
<span class="sourceLineNo">494</span>        Assert.assertEquals(30.0, solution.getValue(), 0.0);<a name="line.494"></a>
<span class="sourceLineNo">495</span>    }<a name="line.495"></a>
<span class="sourceLineNo">496</span><a name="line.496"></a>
<span class="sourceLineNo">497</span>    /**<a name="line.497"></a>
<span class="sourceLineNo">498</span>     * With no artificial variables needed (no equals and no greater than<a name="line.498"></a>
<span class="sourceLineNo">499</span>     * constraints) we can go straight to Phase 2.<a name="line.499"></a>
<span class="sourceLineNo">500</span>     */<a name="line.500"></a>
<span class="sourceLineNo">501</span>    @Test<a name="line.501"></a>
<span class="sourceLineNo">502</span>    public void testModelWithNoArtificialVars() {<a name="line.502"></a>
<span class="sourceLineNo">503</span>        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 15, 10 }, 0);<a name="line.503"></a>
<span class="sourceLineNo">504</span>        Collection&lt;LinearConstraint&gt; constraints = new ArrayList&lt;LinearConstraint&gt;();<a name="line.504"></a>
<span class="sourceLineNo">505</span>        constraints.add(new LinearConstraint(new double[] { 1, 0 }, Relationship.LEQ, 2));<a name="line.505"></a>
<span class="sourceLineNo">506</span>        constraints.add(new LinearConstraint(new double[] { 0, 1 }, Relationship.LEQ, 3));<a name="line.506"></a>
<span class="sourceLineNo">507</span>        constraints.add(new LinearConstraint(new double[] { 1, 1 }, Relationship.LEQ, 4));<a name="line.507"></a>
<span class="sourceLineNo">508</span><a name="line.508"></a>
<span class="sourceLineNo">509</span>        SimplexSolver solver = new SimplexSolver();<a name="line.509"></a>
<span class="sourceLineNo">510</span>        PointValuePair solution = solver.optimize(DEFAULT_MAX_ITER, f, new LinearConstraintSet(constraints),<a name="line.510"></a>
<span class="sourceLineNo">511</span>                                                  GoalType.MAXIMIZE, new NonNegativeConstraint(false));<a name="line.511"></a>
<span class="sourceLineNo">512</span>        Assert.assertEquals(2.0, solution.getPoint()[0], 0.0);<a name="line.512"></a>
<span class="sourceLineNo">513</span>        Assert.assertEquals(2.0, solution.getPoint()[1], 0.0);<a name="line.513"></a>
<span class="sourceLineNo">514</span>        Assert.assertEquals(50.0, solution.getValue(), 0.0);<a name="line.514"></a>
<span class="sourceLineNo">515</span>    }<a name="line.515"></a>
<span class="sourceLineNo">516</span><a name="line.516"></a>
<span class="sourceLineNo">517</span>    @Test<a name="line.517"></a>
<span class="sourceLineNo">518</span>    public void testMinimization() {<a name="line.518"></a>
<span class="sourceLineNo">519</span>        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { -2, 1 }, -5);<a name="line.519"></a>
<span class="sourceLineNo">520</span>        Collection&lt;LinearConstraint&gt; constraints = new ArrayList&lt;LinearConstraint&gt;();<a name="line.520"></a>
<span class="sourceLineNo">521</span>        constraints.add(new LinearConstraint(new double[] { 1, 2 }, Relationship.LEQ, 6));<a name="line.521"></a>
<span class="sourceLineNo">522</span>        constraints.add(new LinearConstraint(new double[] { 3, 2 }, Relationship.LEQ, 12));<a name="line.522"></a>
<span class="sourceLineNo">523</span>        constraints.add(new LinearConstraint(new double[] { 0, 1 }, Relationship.GEQ, 0));<a name="line.523"></a>
<span class="sourceLineNo">524</span><a name="line.524"></a>
<span class="sourceLineNo">525</span>        SimplexSolver solver = new SimplexSolver();<a name="line.525"></a>
<span class="sourceLineNo">526</span>        PointValuePair solution = solver.optimize(DEFAULT_MAX_ITER, f, new LinearConstraintSet(constraints),<a name="line.526"></a>
<span class="sourceLineNo">527</span>                                                  GoalType.MINIMIZE, new NonNegativeConstraint(false));<a name="line.527"></a>
<span class="sourceLineNo">528</span>        Assert.assertEquals(4.0, solution.getPoint()[0], 0.0);<a name="line.528"></a>
<span class="sourceLineNo">529</span>        Assert.assertEquals(0.0, solution.getPoint()[1], 0.0);<a name="line.529"></a>
<span class="sourceLineNo">530</span>        Assert.assertEquals(-13.0, solution.getValue(), 0.0);<a name="line.530"></a>
<span class="sourceLineNo">531</span>    }<a name="line.531"></a>
<span class="sourceLineNo">532</span><a name="line.532"></a>
<span class="sourceLineNo">533</span>    @Test<a name="line.533"></a>
<span class="sourceLineNo">534</span>    public void testSolutionWithNegativeDecisionVariable() {<a name="line.534"></a>
<span class="sourceLineNo">535</span>        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { -2, 1 }, 0);<a name="line.535"></a>
<span class="sourceLineNo">536</span>        Collection&lt;LinearConstraint&gt; constraints = new ArrayList&lt;LinearConstraint&gt;();<a name="line.536"></a>
<span class="sourceLineNo">537</span>        constraints.add(new LinearConstraint(new double[] { 1, 1 }, Relationship.GEQ, 6));<a name="line.537"></a>
<span class="sourceLineNo">538</span>        constraints.add(new LinearConstraint(new double[] { 1, 2 }, Relationship.LEQ, 14));<a name="line.538"></a>
<span class="sourceLineNo">539</span><a name="line.539"></a>
<span class="sourceLineNo">540</span>        SimplexSolver solver = new SimplexSolver();<a name="line.540"></a>
<span class="sourceLineNo">541</span>        PointValuePair solution = solver.optimize(DEFAULT_MAX_ITER, f, new LinearConstraintSet(constraints),<a name="line.541"></a>
<span class="sourceLineNo">542</span>                                                  GoalType.MAXIMIZE, new NonNegativeConstraint(false));<a name="line.542"></a>
<span class="sourceLineNo">543</span>        Assert.assertEquals(-2.0, solution.getPoint()[0], 0.0);<a name="line.543"></a>
<span class="sourceLineNo">544</span>        Assert.assertEquals(8.0, solution.getPoint()[1], 0.0);<a name="line.544"></a>
<span class="sourceLineNo">545</span>        Assert.assertEquals(12.0, solution.getValue(), 0.0);<a name="line.545"></a>
<span class="sourceLineNo">546</span>    }<a name="line.546"></a>
<span class="sourceLineNo">547</span><a name="line.547"></a>
<span class="sourceLineNo">548</span>    @Test(expected = NoFeasibleSolutionException.class)<a name="line.548"></a>
<span class="sourceLineNo">549</span>    public void testInfeasibleSolution() {<a name="line.549"></a>
<span class="sourceLineNo">550</span>        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 15 }, 0);<a name="line.550"></a>
<span class="sourceLineNo">551</span>        Collection&lt;LinearConstraint&gt; constraints = new ArrayList&lt;LinearConstraint&gt;();<a name="line.551"></a>
<span class="sourceLineNo">552</span>        constraints.add(new LinearConstraint(new double[] { 1 }, Relationship.LEQ, 1));<a name="line.552"></a>
<span class="sourceLineNo">553</span>        constraints.add(new LinearConstraint(new double[] { 1 }, Relationship.GEQ, 3));<a name="line.553"></a>
<span class="sourceLineNo">554</span><a name="line.554"></a>
<span class="sourceLineNo">555</span>        SimplexSolver solver = new SimplexSolver();<a name="line.555"></a>
<span class="sourceLineNo">556</span>        solver.optimize(DEFAULT_MAX_ITER, f, new LinearConstraintSet(constraints),<a name="line.556"></a>
<span class="sourceLineNo">557</span>                        GoalType.MAXIMIZE, new NonNegativeConstraint(false));<a name="line.557"></a>
<span class="sourceLineNo">558</span>    }<a name="line.558"></a>
<span class="sourceLineNo">559</span><a name="line.559"></a>
<span class="sourceLineNo">560</span>    @Test(expected = UnboundedSolutionException.class)<a name="line.560"></a>
<span class="sourceLineNo">561</span>    public void testUnboundedSolution() {<a name="line.561"></a>
<span class="sourceLineNo">562</span>        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 15, 10 }, 0);<a name="line.562"></a>
<span class="sourceLineNo">563</span>        Collection&lt;LinearConstraint&gt; constraints = new ArrayList&lt;LinearConstraint&gt;();<a name="line.563"></a>
<span class="sourceLineNo">564</span>        constraints.add(new LinearConstraint(new double[] { 1, 0 }, Relationship.EQ, 2));<a name="line.564"></a>
<span class="sourceLineNo">565</span><a name="line.565"></a>
<span class="sourceLineNo">566</span>        SimplexSolver solver = new SimplexSolver();<a name="line.566"></a>
<span class="sourceLineNo">567</span>        solver.optimize(DEFAULT_MAX_ITER, f, new LinearConstraintSet(constraints),<a name="line.567"></a>
<span class="sourceLineNo">568</span>                        GoalType.MAXIMIZE, new NonNegativeConstraint(false));<a name="line.568"></a>
<span class="sourceLineNo">569</span>    }<a name="line.569"></a>
<span class="sourceLineNo">570</span><a name="line.570"></a>
<span class="sourceLineNo">571</span>    @Test<a name="line.571"></a>
<span class="sourceLineNo">572</span>    public void testRestrictVariablesToNonNegative() {<a name="line.572"></a>
<span class="sourceLineNo">573</span>        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 409, 523, 70, 204, 339 }, 0);<a name="line.573"></a>
<span class="sourceLineNo">574</span>        Collection&lt;LinearConstraint&gt; constraints = new ArrayList&lt;LinearConstraint&gt;();<a name="line.574"></a>
<span class="sourceLineNo">575</span>        constraints.add(new LinearConstraint(new double[] {    43,   56, 345,  56,    5 }, Relationship.LEQ,  4567456));<a name="line.575"></a>
<span class="sourceLineNo">576</span>        constraints.add(new LinearConstraint(new double[] {    12,   45,   7,  56,   23 }, Relationship.LEQ,    56454));<a name="line.576"></a>
<span class="sourceLineNo">577</span>        constraints.add(new LinearConstraint(new double[] {     8,  768,   0,  34, 7456 }, Relationship.LEQ,  1923421));<a name="line.577"></a>
<span class="sourceLineNo">578</span>        constraints.add(new LinearConstraint(new double[] { 12342, 2342,  34, 678, 2342 }, Relationship.GEQ,     4356));<a name="line.578"></a>
<span class="sourceLineNo">579</span>        constraints.add(new LinearConstraint(new double[] {    45,  678,  76,  52,   23 }, Relationship.EQ,    456356));<a name="line.579"></a>
<span class="sourceLineNo">580</span><a name="line.580"></a>
<span class="sourceLineNo">581</span>        SimplexSolver solver = new SimplexSolver();<a name="line.581"></a>
<span class="sourceLineNo">582</span>        PointValuePair solution = solver.optimize(DEFAULT_MAX_ITER, f, new LinearConstraintSet(constraints),<a name="line.582"></a>
<span class="sourceLineNo">583</span>                                                  GoalType.MAXIMIZE, new NonNegativeConstraint(true));<a name="line.583"></a>
<span class="sourceLineNo">584</span>        Assert.assertEquals(2902.92783505155, solution.getPoint()[0], .0000001);<a name="line.584"></a>
<span class="sourceLineNo">585</span>        Assert.assertEquals(480.419243986254, solution.getPoint()[1], .0000001);<a name="line.585"></a>
<span class="sourceLineNo">586</span>        Assert.assertEquals(0.0, solution.getPoint()[2], .0000001);<a name="line.586"></a>
<span class="sourceLineNo">587</span>        Assert.assertEquals(0.0, solution.getPoint()[3], .0000001);<a name="line.587"></a>
<span class="sourceLineNo">588</span>        Assert.assertEquals(0.0, solution.getPoint()[4], .0000001);<a name="line.588"></a>
<span class="sourceLineNo">589</span>        Assert.assertEquals(1438556.7491409, solution.getValue(), .0000001);<a name="line.589"></a>
<span class="sourceLineNo">590</span>    }<a name="line.590"></a>
<span class="sourceLineNo">591</span><a name="line.591"></a>
<span class="sourceLineNo">592</span>    @Test<a name="line.592"></a>
<span class="sourceLineNo">593</span>    public void testEpsilon() {<a name="line.593"></a>
<span class="sourceLineNo">594</span>      LinearObjectiveFunction f =<a name="line.594"></a>
<span class="sourceLineNo">595</span>          new LinearObjectiveFunction(new double[] { 10, 5, 1 }, 0);<a name="line.595"></a>
<span class="sourceLineNo">596</span>      Collection&lt;LinearConstraint&gt; constraints = new ArrayList&lt;LinearConstraint&gt;();<a name="line.596"></a>
<span class="sourceLineNo">597</span>      constraints.add(new LinearConstraint(new double[] {  9, 8, 0 }, Relationship.EQ,  17));<a name="line.597"></a>
<span class="sourceLineNo">598</span>      constraints.add(new LinearConstraint(new double[] {  0, 7, 8 }, Relationship.LEQ,  7));<a name="line.598"></a>
<span class="sourceLineNo">599</span>      constraints.add(new LinearConstraint(new double[] { 10, 0, 2 }, Relationship.LEQ, 10));<a name="line.599"></a>
<span class="sourceLineNo">600</span><a name="line.600"></a>
<span class="sourceLineNo">601</span>      SimplexSolver solver = new SimplexSolver();<a name="line.601"></a>
<span class="sourceLineNo">602</span>      PointValuePair solution = solver.optimize(DEFAULT_MAX_ITER, f, new LinearConstraintSet(constraints),<a name="line.602"></a>
<span class="sourceLineNo">603</span>                                                GoalType.MAXIMIZE, new NonNegativeConstraint(false));<a name="line.603"></a>
<span class="sourceLineNo">604</span>      Assert.assertEquals(1.0, solution.getPoint()[0], 0.0);<a name="line.604"></a>
<span class="sourceLineNo">605</span>      Assert.assertEquals(1.0, solution.getPoint()[1], 0.0);<a name="line.605"></a>
<span class="sourceLineNo">606</span>      Assert.assertEquals(0.0, solution.getPoint()[2], 0.0);<a name="line.606"></a>
<span class="sourceLineNo">607</span>      Assert.assertEquals(15.0, solution.getValue(), 0.0);<a name="line.607"></a>
<span class="sourceLineNo">608</span>  }<a name="line.608"></a>
<span class="sourceLineNo">609</span><a name="line.609"></a>
<span class="sourceLineNo">610</span>    @Test<a name="line.610"></a>
<span class="sourceLineNo">611</span>    public void testTrivialModel() {<a name="line.611"></a>
<span class="sourceLineNo">612</span>        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 1, 1 }, 0);<a name="line.612"></a>
<span class="sourceLineNo">613</span>        Collection&lt;LinearConstraint&gt; constraints = new ArrayList&lt;LinearConstraint&gt;();<a name="line.613"></a>
<span class="sourceLineNo">614</span>        constraints.add(new LinearConstraint(new double[] { 1, 1 }, Relationship.EQ,  0));<a name="line.614"></a>
<span class="sourceLineNo">615</span><a name="line.615"></a>
<span class="sourceLineNo">616</span>        SimplexSolver solver = new SimplexSolver();<a name="line.616"></a>
<span class="sourceLineNo">617</span>        PointValuePair solution = solver.optimize(DEFAULT_MAX_ITER, f, new LinearConstraintSet(constraints),<a name="line.617"></a>
<span class="sourceLineNo">618</span>                                                  GoalType.MAXIMIZE, new NonNegativeConstraint(true));<a name="line.618"></a>
<span class="sourceLineNo">619</span>        Assert.assertEquals(0, solution.getValue(), .0000001);<a name="line.619"></a>
<span class="sourceLineNo">620</span>    }<a name="line.620"></a>
<span class="sourceLineNo">621</span><a name="line.621"></a>
<span class="sourceLineNo">622</span>    @Test<a name="line.622"></a>
<span class="sourceLineNo">623</span>    public void testLargeModel() {<a name="line.623"></a>
<span class="sourceLineNo">624</span>        double[] objective = new double[] {<a name="line.624"></a>
<span class="sourceLineNo">625</span>                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,<a name="line.625"></a>
<span class="sourceLineNo">626</span>                                           1, 1, 12, 1, 1, 1, 1, 1, 1, 1,<a name="line.626"></a>
<span class="sourceLineNo">627</span>                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,<a name="line.627"></a>
<span class="sourceLineNo">628</span>                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,<a name="line.628"></a>
<span class="sourceLineNo">629</span>                                           12, 1, 1, 1, 1, 1, 1, 1, 1, 1,<a name="line.629"></a>
<span class="sourceLineNo">630</span>                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,<a name="line.630"></a>
<span class="sourceLineNo">631</span>                                           1, 1, 1, 1, 1, 1, 1, 1, 12, 1,<a name="line.631"></a>
<span class="sourceLineNo">632</span>                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,<a name="line.632"></a>
<span class="sourceLineNo">633</span>                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,<a name="line.633"></a>
<span class="sourceLineNo">634</span>                                           1, 1, 1, 1, 1, 1, 12, 1, 1, 1,<a name="line.634"></a>
<span class="sourceLineNo">635</span>                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,<a name="line.635"></a>
<span class="sourceLineNo">636</span>                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,<a name="line.636"></a>
<span class="sourceLineNo">637</span>                                           1, 1, 1, 1, 12, 1, 1, 1, 1, 1,<a name="line.637"></a>
<span class="sourceLineNo">638</span>                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,<a name="line.638"></a>
<span class="sourceLineNo">639</span>                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,<a name="line.639"></a>
<span class="sourceLineNo">640</span>                                           1, 1, 12, 1, 1, 1, 1, 1, 1, 1,<a name="line.640"></a>
<span class="sourceLineNo">641</span>                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,<a name="line.641"></a>
<span class="sourceLineNo">642</span>                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,<a name="line.642"></a>
<span class="sourceLineNo">643</span>                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,<a name="line.643"></a>
<span class="sourceLineNo">644</span>                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,<a name="line.644"></a>
<span class="sourceLineNo">645</span>                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,<a name="line.645"></a>
<span class="sourceLineNo">646</span>                                           1, 1, 1, 1, 1, 1};<a name="line.646"></a>
<span class="sourceLineNo">647</span><a name="line.647"></a>
<span class="sourceLineNo">648</span>        LinearObjectiveFunction f = new LinearObjectiveFunction(objective, 0);<a name="line.648"></a>
<span class="sourceLineNo">649</span>        Collection&lt;LinearConstraint&gt; constraints = new ArrayList&lt;LinearConstraint&gt;();<a name="line.649"></a>
<span class="sourceLineNo">650</span>        constraints.add(equationFromString(objective.length, "x0 + x1 + x2 + x3 - x12 = 0"));<a name="line.650"></a>
<span class="sourceLineNo">651</span>        constraints.add(equationFromString(objective.length, "x4 + x5 + x6 + x7 + x8 + x9 + x10 + x11 - x13 = 0"));<a name="line.651"></a>
<span class="sourceLineNo">652</span>        constraints.add(equationFromString(objective.length, "x4 + x5 + x6 + x7 + x8 + x9 + x10 + x11 &gt;= 49"));<a name="line.652"></a>
<span class="sourceLineNo">653</span>        constraints.add(equationFromString(objective.length, "x0 + x1 + x2 + x3 &gt;= 42"));<a name="line.653"></a>
<span class="sourceLineNo">654</span>        constraints.add(equationFromString(objective.length, "x14 + x15 + x16 + x17 - x26 = 0"));<a name="line.654"></a>
<span class="sourceLineNo">655</span>        constraints.add(equationFromString(objective.length, "x18 + x19 + x20 + x21 + x22 + x23 + x24 + x25 - x27 = 0"));<a name="line.655"></a>
<span class="sourceLineNo">656</span>        constraints.add(equationFromString(objective.length, "x14 + x15 + x16 + x17 - x12 = 0"));<a name="line.656"></a>
<span class="sourceLineNo">657</span>        constraints.add(equationFromString(objective.length, "x18 + x19 + x20 + x21 + x22 + x23 + x24 + x25 - x13 = 0"));<a name="line.657"></a>
<span class="sourceLineNo">658</span>        constraints.add(equationFromString(objective.length, "x28 + x29 + x30 + x31 - x40 = 0"));<a name="line.658"></a>
<span class="sourceLineNo">659</span>        constraints.add(equationFromString(objective.length, "x32 + x33 + x34 + x35 + x36 + x37 + x38 + x39 - x41 = 0"));<a name="line.659"></a>
<span class="sourceLineNo">660</span>        constraints.add(equationFromString(objective.length, "x32 + x33 + x34 + x35 + x36 + x37 + x38 + x39 &gt;= 49"));<a name="line.660"></a>
<span class="sourceLineNo">661</span>        constraints.add(equationFromString(objective.length, "x28 + x29 + x30 + x31 &gt;= 42"));<a name="line.661"></a>
<span class="sourceLineNo">662</span>        constraints.add(equationFromString(objective.length, "x42 + x43 + x44 + x45 - x54 = 0"));<a name="line.662"></a>
<span class="sourceLineNo">663</span>        constraints.add(equationFromString(objective.length, "x46 + x47 + x48 + x49 + x50 + x51 + x52 + x53 - x55 = 0"));<a name="line.663"></a>
<span class="sourceLineNo">664</span>        constraints.add(equationFromString(objective.length, "x42 + x43 + x44 + x45 - x40 = 0"));<a name="line.664"></a>
<span class="sourceLineNo">665</span>        constraints.add(equationFromString(objective.length, "x46 + x47 + x48 + x49 + x50 + x51 + x52 + x53 - x41 = 0"));<a name="line.665"></a>
<span class="sourceLineNo">666</span>        constraints.add(equationFromString(objective.length, "x56 + x57 + x58 + x59 - x68 = 0"));<a name="line.666"></a>
<span class="sourceLineNo">667</span>        constraints.add(equationFromString(objective.length, "x60 + x61 + x62 + x63 + x64 + x65 + x66 + x67 - x69 = 0"));<a name="line.667"></a>
<span class="sourceLineNo">668</span>        constraints.add(equationFromString(objective.length, "x60 + x61 + x62 + x63 + x64 + x65 + x66 + x67 &gt;= 51"));<a name="line.668"></a>
<span class="sourceLineNo">669</span>        constraints.add(equationFromString(objective.length, "x56 + x57 + x58 + x59 &gt;= 44"));<a name="line.669"></a>
<span class="sourceLineNo">670</span>        constraints.add(equationFromString(objective.length, "x70 + x71 + x72 + x73 - x82 = 0"));<a name="line.670"></a>
<span class="sourceLineNo">671</span>        constraints.add(equationFromString(objective.length, "x74 + x75 + x76 + x77 + x78 + x79 + x80 + x81 - x83 = 0"));<a name="line.671"></a>
<span class="sourceLineNo">672</span>        constraints.add(equationFromString(objective.length, "x70 + x71 + x72 + x73 - x68 = 0"));<a name="line.672"></a>
<span class="sourceLineNo">673</span>        constraints.add(equationFromString(objective.length, "x74 + x75 + x76 + x77 + x78 + x79 + x80 + x81 - x69 = 0"));<a name="line.673"></a>
<span class="sourceLineNo">674</span>        constraints.add(equationFromString(objective.length, "x84 + x85 + x86 + x87 - x96 = 0"));<a name="line.674"></a>
<span class="sourceLineNo">675</span>        constraints.add(equationFromString(objective.length, "x88 + x89 + x90 + x91 + x92 + x93 + x94 + x95 - x97 = 0"));<a name="line.675"></a>
<span class="sourceLineNo">676</span>        constraints.add(equationFromString(objective.length, "x88 + x89 + x90 + x91 + x92 + x93 + x94 + x95 &gt;= 51"));<a name="line.676"></a>
<span class="sourceLineNo">677</span>        constraints.add(equationFromString(objective.length, "x84 + x85 + x86 + x87 &gt;= 44"));<a name="line.677"></a>
<span class="sourceLineNo">678</span>        constraints.add(equationFromString(objective.length, "x98 + x99 + x100 + x101 - x110 = 0"));<a name="line.678"></a>
<span class="sourceLineNo">679</span>        constraints.add(equationFromString(objective.length, "x102 + x103 + x104 + x105 + x106 + x107 + x108 + x109 - x111 = 0"));<a name="line.679"></a>
<span class="sourceLineNo">680</span>        constraints.add(equationFromString(objective.length, "x98 + x99 + x100 + x101 - x96 = 0"));<a name="line.680"></a>
<span class="sourceLineNo">681</span>        constraints.add(equationFromString(objective.length, "x102 + x103 + x104 + x105 + x106 + x107 + x108 + x109 - x97 = 0"));<a name="line.681"></a>
<span class="sourceLineNo">682</span>        constraints.add(equationFromString(objective.length, "x112 + x113 + x114 + x115 - x124 = 0"));<a name="line.682"></a>
<span class="sourceLineNo">683</span>        constraints.add(equationFromString(objective.length, "x116 + x117 + x118 + x119 + x120 + x121 + x122 + x123 - x125 = 0"));<a name="line.683"></a>
<span class="sourceLineNo">684</span>        constraints.add(equationFromString(objective.length, "x116 + x117 + x118 + x119 + x120 + x121 + x122 + x123 &gt;= 49"));<a name="line.684"></a>
<span class="sourceLineNo">685</span>        constraints.add(equationFromString(objective.length, "x112 + x113 + x114 + x115 &gt;= 42"));<a name="line.685"></a>
<span class="sourceLineNo">686</span>        constraints.add(equationFromString(objective.length, "x126 + x127 + x128 + x129 - x138 = 0"));<a name="line.686"></a>
<span class="sourceLineNo">687</span>        constraints.add(equationFromString(objective.length, "x130 + x131 + x132 + x133 + x134 + x135 + x136 + x137 - x139 = 0"));<a name="line.687"></a>
<span class="sourceLineNo">688</span>        constraints.add(equationFromString(objective.length, "x126 + x127 + x128 + x129 - x124 = 0"));<a name="line.688"></a>
<span class="sourceLineNo">689</span>        constraints.add(equationFromString(objective.length, "x130 + x131 + x132 + x133 + x134 + x135 + x136 + x137 - x125 = 0"));<a name="line.689"></a>
<span class="sourceLineNo">690</span>        constraints.add(equationFromString(objective.length, "x140 + x141 + x142 + x143 - x152 = 0"));<a name="line.690"></a>
<span class="sourceLineNo">691</span>        constraints.add(equationFromString(objective.length, "x144 + x145 + x146 + x147 + x148 + x149 + x150 + x151 - x153 = 0"));<a name="line.691"></a>
<span class="sourceLineNo">692</span>        constraints.add(equationFromString(objective.length, "x144 + x145 + x146 + x147 + x148 + x149 + x150 + x151 &gt;= 59"));<a name="line.692"></a>
<span class="sourceLineNo">693</span>        constraints.add(equationFromString(objective.length, "x140 + x141 + x142 + x143 &gt;= 42"));<a name="line.693"></a>
<span class="sourceLineNo">694</span>        constraints.add(equationFromString(objective.length, "x154 + x155 + x156 + x157 - x166 = 0"));<a name="line.694"></a>
<span class="sourceLineNo">695</span>        constraints.add(equationFromString(objective.length, "x158 + x159 + x160 + x161 + x162 + x163 + x164 + x165 - x167 = 0"));<a name="line.695"></a>
<span class="sourceLineNo">696</span>        constraints.add(equationFromString(objective.length, "x154 + x155 + x156 + x157 - x152 = 0"));<a name="line.696"></a>
<span class="sourceLineNo">697</span>        constraints.add(equationFromString(objective.length, "x158 + x159 + x160 + x161 + x162 + x163 + x164 + x165 - x153 = 0"));<a name="line.697"></a>
<span class="sourceLineNo">698</span>        constraints.add(equationFromString(objective.length, "x83 + x82 - x168 = 0"));<a name="line.698"></a>
<span class="sourceLineNo">699</span>        constraints.add(equationFromString(objective.length, "x111 + x110 - x169 = 0"));<a name="line.699"></a>
<span class="sourceLineNo">700</span>        constraints.add(equationFromString(objective.length, "x170 - x182 = 0"));<a name="line.700"></a>
<span class="sourceLineNo">701</span>        constraints.add(equationFromString(objective.length, "x171 - x183 = 0"));<a name="line.701"></a>
<span class="sourceLineNo">702</span>        constraints.add(equationFromString(objective.length, "x172 - x184 = 0"));<a name="line.702"></a>
<span class="sourceLineNo">703</span>        constraints.add(equationFromString(objective.length, "x173 - x185 = 0"));<a name="line.703"></a>
<span class="sourceLineNo">704</span>        constraints.add(equationFromString(objective.length, "x174 - x186 = 0"));<a name="line.704"></a>
<span class="sourceLineNo">705</span>        constraints.add(equationFromString(objective.length, "x175 + x176 - x187 = 0"));<a name="line.705"></a>
<span class="sourceLineNo">706</span>        constraints.add(equationFromString(objective.length, "x177 - x188 = 0"));<a name="line.706"></a>
<span class="sourceLineNo">707</span>        constraints.add(equationFromString(objective.length, "x178 - x189 = 0"));<a name="line.707"></a>
<span class="sourceLineNo">708</span>        constraints.add(equationFromString(objective.length, "x179 - x190 = 0"));<a name="line.708"></a>
<span class="sourceLineNo">709</span>        constraints.add(equationFromString(objective.length, "x180 - x191 = 0"));<a name="line.709"></a>
<span class="sourceLineNo">710</span>        constraints.add(equationFromString(objective.length, "x181 - x192 = 0"));<a name="line.710"></a>
<span class="sourceLineNo">711</span>        constraints.add(equationFromString(objective.length, "x170 - x26 = 0"));<a name="line.711"></a>
<span class="sourceLineNo">712</span>        constraints.add(equationFromString(objective.length, "x171 - x27 = 0"));<a name="line.712"></a>
<span class="sourceLineNo">713</span>        constraints.add(equationFromString(objective.length, "x172 - x54 = 0"));<a name="line.713"></a>
<span class="sourceLineNo">714</span>        constraints.add(equationFromString(objective.length, "x173 - x55 = 0"));<a name="line.714"></a>
<span class="sourceLineNo">715</span>        constraints.add(equationFromString(objective.length, "x174 - x168 = 0"));<a name="line.715"></a>
<span class="sourceLineNo">716</span>        constraints.add(equationFromString(objective.length, "x177 - x169 = 0"));<a name="line.716"></a>
<span class="sourceLineNo">717</span>        constraints.add(equationFromString(objective.length, "x178 - x138 = 0"));<a name="line.717"></a>
<span class="sourceLineNo">718</span>        constraints.add(equationFromString(objective.length, "x179 - x139 = 0"));<a name="line.718"></a>
<span class="sourceLineNo">719</span>        constraints.add(equationFromString(objective.length, "x180 - x166 = 0"));<a name="line.719"></a>
<span class="sourceLineNo">720</span>        constraints.add(equationFromString(objective.length, "x181 - x167 = 0"));<a name="line.720"></a>
<span class="sourceLineNo">721</span>        constraints.add(equationFromString(objective.length, "x193 - x205 = 0"));<a name="line.721"></a>
<span class="sourceLineNo">722</span>        constraints.add(equationFromString(objective.length, "x194 - x206 = 0"));<a name="line.722"></a>
<span class="sourceLineNo">723</span>        constraints.add(equationFromString(objective.length, "x195 - x207 = 0"));<a name="line.723"></a>
<span class="sourceLineNo">724</span>        constraints.add(equationFromString(objective.length, "x196 - x208 = 0"));<a name="line.724"></a>
<span class="sourceLineNo">725</span>        constraints.add(equationFromString(objective.length, "x197 - x209 = 0"));<a name="line.725"></a>
<span class="sourceLineNo">726</span>        constraints.add(equationFromString(objective.length, "x198 + x199 - x210 = 0"));<a name="line.726"></a>
<span class="sourceLineNo">727</span>        constraints.add(equationFromString(objective.length, "x200 - x211 = 0"));<a name="line.727"></a>
<span class="sourceLineNo">728</span>        constraints.add(equationFromString(objective.length, "x201 - x212 = 0"));<a name="line.728"></a>
<span class="sourceLineNo">729</span>        constraints.add(equationFromString(objective.length, "x202 - x213 = 0"));<a name="line.729"></a>
<span class="sourceLineNo">730</span>        constraints.add(equationFromString(objective.length, "x203 - x214 = 0"));<a name="line.730"></a>
<span class="sourceLineNo">731</span>        constraints.add(equationFromString(objective.length, "x204 - x215 = 0"));<a name="line.731"></a>
<span class="sourceLineNo">732</span>        constraints.add(equationFromString(objective.length, "x193 - x182 = 0"));<a name="line.732"></a>
<span class="sourceLineNo">733</span>        constraints.add(equationFromString(objective.length, "x194 - x183 = 0"));<a name="line.733"></a>
<span class="sourceLineNo">734</span>        constraints.add(equationFromString(objective.length, "x195 - x184 = 0"));<a name="line.734"></a>
<span class="sourceLineNo">735</span>        constraints.add(equationFromString(objective.length, "x196 - x185 = 0"));<a name="line.735"></a>
<span class="sourceLineNo">736</span>        constraints.add(equationFromString(objective.length, "x197 - x186 = 0"));<a name="line.736"></a>
<span class="sourceLineNo">737</span>        constraints.add(equationFromString(objective.length, "x198 + x199 - x187 = 0"));<a name="line.737"></a>
<span class="sourceLineNo">738</span>        constraints.add(equationFromString(objective.length, "x200 - x188 = 0"));<a name="line.738"></a>
<span class="sourceLineNo">739</span>        constraints.add(equationFromString(objective.length, "x201 - x189 = 0"));<a name="line.739"></a>
<span class="sourceLineNo">740</span>        constraints.add(equationFromString(objective.length, "x202 - x190 = 0"));<a name="line.740"></a>
<span class="sourceLineNo">741</span>        constraints.add(equationFromString(objective.length, "x203 - x191 = 0"));<a name="line.741"></a>
<span class="sourceLineNo">742</span>        constraints.add(equationFromString(objective.length, "x204 - x192 = 0"));<a name="line.742"></a>
<span class="sourceLineNo">743</span><a name="line.743"></a>
<span class="sourceLineNo">744</span>        SimplexSolver solver = new SimplexSolver();<a name="line.744"></a>
<span class="sourceLineNo">745</span>        PointValuePair solution = solver.optimize(DEFAULT_MAX_ITER, f, new LinearConstraintSet(constraints),<a name="line.745"></a>
<span class="sourceLineNo">746</span>                                                  GoalType.MINIMIZE, new NonNegativeConstraint(true));<a name="line.746"></a>
<span class="sourceLineNo">747</span>        Assert.assertEquals(7518.0, solution.getValue(), .0000001);<a name="line.747"></a>
<span class="sourceLineNo">748</span>    }<a name="line.748"></a>
<span class="sourceLineNo">749</span><a name="line.749"></a>
<span class="sourceLineNo">750</span>    @Test<a name="line.750"></a>
<span class="sourceLineNo">751</span>    public void testSolutionCallback() {<a name="line.751"></a>
<span class="sourceLineNo">752</span>        // re-use the problem from testcase for MATH-288<a name="line.752"></a>
<span class="sourceLineNo">753</span>        // it normally requires 5 iterations<a name="line.753"></a>
<span class="sourceLineNo">754</span>        <a name="line.754"></a>
<span class="sourceLineNo">755</span>        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 7, 3, 0, 0 }, 0 );<a name="line.755"></a>
<span class="sourceLineNo">756</span><a name="line.756"></a>
<span class="sourceLineNo">757</span>        List&lt;LinearConstraint&gt; constraints = new ArrayList&lt;LinearConstraint&gt;();<a name="line.757"></a>
<span class="sourceLineNo">758</span>        constraints.add(new LinearConstraint(new double[] { 3, 0, -5, 0 }, Relationship.LEQ, 0.0));<a name="line.758"></a>
<span class="sourceLineNo">759</span>        constraints.add(new LinearConstraint(new double[] { 2, 0, 0, -5 }, Relationship.LEQ, 0.0));<a name="line.759"></a>
<span class="sourceLineNo">760</span>        constraints.add(new LinearConstraint(new double[] { 0, 3, 0, -5 }, Relationship.LEQ, 0.0));<a name="line.760"></a>
<span class="sourceLineNo">761</span>        constraints.add(new LinearConstraint(new double[] { 1, 0, 0, 0 }, Relationship.LEQ, 1.0));<a name="line.761"></a>
<span class="sourceLineNo">762</span>        constraints.add(new LinearConstraint(new double[] { 0, 1, 0, 0 }, Relationship.LEQ, 1.0));<a name="line.762"></a>
<span class="sourceLineNo">763</span><a name="line.763"></a>
<span class="sourceLineNo">764</span>        final SimplexSolver solver = new SimplexSolver();<a name="line.764"></a>
<span class="sourceLineNo">765</span>        final SolutionCallback callback = new SolutionCallback();<a name="line.765"></a>
<span class="sourceLineNo">766</span>        <a name="line.766"></a>
<span class="sourceLineNo">767</span>        Assert.assertNull(callback.getSolution());<a name="line.767"></a>
<span class="sourceLineNo">768</span>        Assert.assertFalse(callback.isSolutionOptimal());<a name="line.768"></a>
<span class="sourceLineNo">769</span><a name="line.769"></a>
<span class="sourceLineNo">770</span>        try {<a name="line.770"></a>
<span class="sourceLineNo">771</span>            solver.optimize(new MaxIter(3), f, new LinearConstraintSet(constraints),<a name="line.771"></a>
<span class="sourceLineNo">772</span>                            GoalType.MAXIMIZE, new NonNegativeConstraint(true), callback);<a name="line.772"></a>
<span class="sourceLineNo">773</span>            Assert.fail("expected TooManyIterationsException");<a name="line.773"></a>
<span class="sourceLineNo">774</span>        } catch (TooManyIterationsException ex) {<a name="line.774"></a>
<span class="sourceLineNo">775</span>            // expected<a name="line.775"></a>
<span class="sourceLineNo">776</span>        }<a name="line.776"></a>
<span class="sourceLineNo">777</span>        <a name="line.777"></a>
<span class="sourceLineNo">778</span>        final PointValuePair solution = callback.getSolution();<a name="line.778"></a>
<span class="sourceLineNo">779</span>        Assert.assertNotNull(solution);<a name="line.779"></a>
<span class="sourceLineNo">780</span>        Assert.assertTrue(validSolution(solution, constraints, 1e-4));<a name="line.780"></a>
<span class="sourceLineNo">781</span>        Assert.assertFalse(callback.isSolutionOptimal());<a name="line.781"></a>
<span class="sourceLineNo">782</span>        // the solution is clearly not optimal: optimal = 10.0<a name="line.782"></a>
<span class="sourceLineNo">783</span>        Assert.assertEquals(7.0, solution.getValue(), 1e-4);<a name="line.783"></a>
<span class="sourceLineNo">784</span>    }<a name="line.784"></a>
<span class="sourceLineNo">785</span><a name="line.785"></a>
<span class="sourceLineNo">786</span>    /**<a name="line.786"></a>
<span class="sourceLineNo">787</span>     * Converts a test string to a {@link LinearConstraint}.<a name="line.787"></a>
<span class="sourceLineNo">788</span>     * Ex: x0 + x1 + x2 + x3 - x12 = 0<a name="line.788"></a>
<span class="sourceLineNo">789</span>     */<a name="line.789"></a>
<span class="sourceLineNo">790</span>    private LinearConstraint equationFromString(int numCoefficients, String s) {<a name="line.790"></a>
<span class="sourceLineNo">791</span>        Relationship relationship;<a name="line.791"></a>
<span class="sourceLineNo">792</span>        if (s.contains("&gt;=")) {<a name="line.792"></a>
<span class="sourceLineNo">793</span>            relationship = Relationship.GEQ;<a name="line.793"></a>
<span class="sourceLineNo">794</span>        } else if (s.contains("&lt;=")) {<a name="line.794"></a>
<span class="sourceLineNo">795</span>            relationship = Relationship.LEQ;<a name="line.795"></a>
<span class="sourceLineNo">796</span>        } else if (s.contains("=")) {<a name="line.796"></a>
<span class="sourceLineNo">797</span>            relationship = Relationship.EQ;<a name="line.797"></a>
<span class="sourceLineNo">798</span>        } else {<a name="line.798"></a>
<span class="sourceLineNo">799</span>            throw new IllegalArgumentException();<a name="line.799"></a>
<span class="sourceLineNo">800</span>        }<a name="line.800"></a>
<span class="sourceLineNo">801</span><a name="line.801"></a>
<span class="sourceLineNo">802</span>        String[] equationParts = s.split("[&gt;|&lt;]?=");<a name="line.802"></a>
<span class="sourceLineNo">803</span>        double rhs = Double.parseDouble(equationParts[1].trim());<a name="line.803"></a>
<span class="sourceLineNo">804</span><a name="line.804"></a>
<span class="sourceLineNo">805</span>        double[] lhs = new double[numCoefficients];<a name="line.805"></a>
<span class="sourceLineNo">806</span>        String left = equationParts[0].replaceAll(" ?x", "");<a name="line.806"></a>
<span class="sourceLineNo">807</span>        String[] coefficients = left.split(" ");<a name="line.807"></a>
<span class="sourceLineNo">808</span>        for (String coefficient : coefficients) {<a name="line.808"></a>
<span class="sourceLineNo">809</span>            double value = coefficient.charAt(0) == '-' ? -1 : 1;<a name="line.809"></a>
<span class="sourceLineNo">810</span>            int index = Integer.parseInt(coefficient.replaceFirst("[+|-]", "").trim());<a name="line.810"></a>
<span class="sourceLineNo">811</span>            lhs[index] = value;<a name="line.811"></a>
<span class="sourceLineNo">812</span>        }<a name="line.812"></a>
<span class="sourceLineNo">813</span>        return new LinearConstraint(lhs, relationship, rhs);<a name="line.813"></a>
<span class="sourceLineNo">814</span>    }<a name="line.814"></a>
<span class="sourceLineNo">815</span><a name="line.815"></a>
<span class="sourceLineNo">816</span>    private static boolean validSolution(PointValuePair solution, List&lt;LinearConstraint&gt; constraints, double epsilon) {<a name="line.816"></a>
<span class="sourceLineNo">817</span>        double[] vals = solution.getPoint();<a name="line.817"></a>
<span class="sourceLineNo">818</span>        for (LinearConstraint c : constraints) {<a name="line.818"></a>
<span class="sourceLineNo">819</span>            double[] coeffs = c.getCoefficients().toArray();<a name="line.819"></a>
<span class="sourceLineNo">820</span>            double result = 0.0d;<a name="line.820"></a>
<span class="sourceLineNo">821</span>            for (int i = 0; i &lt; vals.length; i++) {<a name="line.821"></a>
<span class="sourceLineNo">822</span>                result += vals[i] * coeffs[i];<a name="line.822"></a>
<span class="sourceLineNo">823</span>            }<a name="line.823"></a>
<span class="sourceLineNo">824</span>            <a name="line.824"></a>
<span class="sourceLineNo">825</span>            switch (c.getRelationship()) {<a name="line.825"></a>
<span class="sourceLineNo">826</span>            case EQ:<a name="line.826"></a>
<span class="sourceLineNo">827</span>                if (!Precision.equals(result, c.getValue(), epsilon)) {<a name="line.827"></a>
<span class="sourceLineNo">828</span>                    return false;<a name="line.828"></a>
<span class="sourceLineNo">829</span>                }<a name="line.829"></a>
<span class="sourceLineNo">830</span>                break;<a name="line.830"></a>
<span class="sourceLineNo">831</span>                <a name="line.831"></a>
<span class="sourceLineNo">832</span>            case GEQ:<a name="line.832"></a>
<span class="sourceLineNo">833</span>                if (Precision.compareTo(result, c.getValue(), epsilon) &lt; 0) {<a name="line.833"></a>
<span class="sourceLineNo">834</span>                    return false;<a name="line.834"></a>
<span class="sourceLineNo">835</span>                }<a name="line.835"></a>
<span class="sourceLineNo">836</span>                break;<a name="line.836"></a>
<span class="sourceLineNo">837</span>                <a name="line.837"></a>
<span class="sourceLineNo">838</span>            case LEQ:<a name="line.838"></a>
<span class="sourceLineNo">839</span>                if (Precision.compareTo(result, c.getValue(), epsilon) &gt; 0) {<a name="line.839"></a>
<span class="sourceLineNo">840</span>                    return false;<a name="line.840"></a>
<span class="sourceLineNo">841</span>                }<a name="line.841"></a>
<span class="sourceLineNo">842</span>                break;<a name="line.842"></a>
<span class="sourceLineNo">843</span>            }<a name="line.843"></a>
<span class="sourceLineNo">844</span>        }<a name="line.844"></a>
<span class="sourceLineNo">845</span>        <a name="line.845"></a>
<span class="sourceLineNo">846</span>        return true;<a name="line.846"></a>
<span class="sourceLineNo">847</span>    }<a name="line.847"></a>
<span class="sourceLineNo">848</span><a name="line.848"></a>
<span class="sourceLineNo">849</span>}<a name="line.849"></a>




























































</pre>
</div>
</body>
</html>
