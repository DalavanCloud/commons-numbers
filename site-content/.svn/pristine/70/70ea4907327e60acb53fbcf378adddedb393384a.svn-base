<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span><a name="line.17"></a>
<span class="sourceLineNo">018</span>package org.apache.commons.math3.ode;<a name="line.18"></a>
<span class="sourceLineNo">019</span><a name="line.19"></a>
<span class="sourceLineNo">020</span>import org.apache.commons.math3.exception.MaxCountExceededException;<a name="line.20"></a>
<span class="sourceLineNo">021</span>import org.apache.commons.math3.ode.sampling.StepHandler;<a name="line.21"></a>
<span class="sourceLineNo">022</span>import org.apache.commons.math3.ode.sampling.StepInterpolator;<a name="line.22"></a>
<span class="sourceLineNo">023</span>import org.apache.commons.math3.util.FastMath;<a name="line.23"></a>
<span class="sourceLineNo">024</span><a name="line.24"></a>
<span class="sourceLineNo">025</span>/**<a name="line.25"></a>
<span class="sourceLineNo">026</span> * This class is used to handle steps for the test problems<a name="line.26"></a>
<span class="sourceLineNo">027</span> * integrated during the junit tests for the ODE integrators.<a name="line.27"></a>
<span class="sourceLineNo">028</span> */<a name="line.28"></a>
<span class="sourceLineNo">029</span>public class TestProblemHandler<a name="line.29"></a>
<span class="sourceLineNo">030</span>  implements StepHandler {<a name="line.30"></a>
<span class="sourceLineNo">031</span><a name="line.31"></a>
<span class="sourceLineNo">032</span>  /** Associated problem. */<a name="line.32"></a>
<span class="sourceLineNo">033</span>  private TestProblemAbstract problem;<a name="line.33"></a>
<span class="sourceLineNo">034</span><a name="line.34"></a>
<span class="sourceLineNo">035</span>  /** Maximal errors encountered during the integration. */<a name="line.35"></a>
<span class="sourceLineNo">036</span>  private double maxValueError;<a name="line.36"></a>
<span class="sourceLineNo">037</span>  private double maxTimeError;<a name="line.37"></a>
<span class="sourceLineNo">038</span><a name="line.38"></a>
<span class="sourceLineNo">039</span>  /** Error at the end of the integration. */<a name="line.39"></a>
<span class="sourceLineNo">040</span>  private double lastError;<a name="line.40"></a>
<span class="sourceLineNo">041</span><a name="line.41"></a>
<span class="sourceLineNo">042</span>  /** Time at the end of integration. */<a name="line.42"></a>
<span class="sourceLineNo">043</span>  private double lastTime;<a name="line.43"></a>
<span class="sourceLineNo">044</span><a name="line.44"></a>
<span class="sourceLineNo">045</span>  /** ODE solver used. */<a name="line.45"></a>
<span class="sourceLineNo">046</span>  private ODEIntegrator integrator;<a name="line.46"></a>
<span class="sourceLineNo">047</span><a name="line.47"></a>
<span class="sourceLineNo">048</span>  /** Expected start for step. */<a name="line.48"></a>
<span class="sourceLineNo">049</span>  private double expectedStepStart;<a name="line.49"></a>
<span class="sourceLineNo">050</span><a name="line.50"></a>
<span class="sourceLineNo">051</span>  /**<a name="line.51"></a>
<span class="sourceLineNo">052</span>   * Simple constructor.<a name="line.52"></a>
<span class="sourceLineNo">053</span>   * @param problem problem for which steps should be handled<a name="line.53"></a>
<span class="sourceLineNo">054</span>   * @param integrator ODE solver used<a name="line.54"></a>
<span class="sourceLineNo">055</span>   */<a name="line.55"></a>
<span class="sourceLineNo">056</span>  public TestProblemHandler(TestProblemAbstract problem, ODEIntegrator integrator) {<a name="line.56"></a>
<span class="sourceLineNo">057</span>    this.problem = problem;<a name="line.57"></a>
<span class="sourceLineNo">058</span>    this.integrator = integrator;<a name="line.58"></a>
<span class="sourceLineNo">059</span>    maxValueError = 0;<a name="line.59"></a>
<span class="sourceLineNo">060</span>    maxTimeError  = 0;<a name="line.60"></a>
<span class="sourceLineNo">061</span>    lastError     = 0;<a name="line.61"></a>
<span class="sourceLineNo">062</span>    expectedStepStart = Double.NaN;<a name="line.62"></a>
<span class="sourceLineNo">063</span>  }<a name="line.63"></a>
<span class="sourceLineNo">064</span><a name="line.64"></a>
<span class="sourceLineNo">065</span>  public void init(double t0, double[] y0, double t) {<a name="line.65"></a>
<span class="sourceLineNo">066</span>    maxValueError = 0;<a name="line.66"></a>
<span class="sourceLineNo">067</span>    maxTimeError  = 0;<a name="line.67"></a>
<span class="sourceLineNo">068</span>    lastError     = 0;<a name="line.68"></a>
<span class="sourceLineNo">069</span>    expectedStepStart = Double.NaN;<a name="line.69"></a>
<span class="sourceLineNo">070</span>  }<a name="line.70"></a>
<span class="sourceLineNo">071</span><a name="line.71"></a>
<span class="sourceLineNo">072</span>  public void handleStep(StepInterpolator interpolator, boolean isLast) throws MaxCountExceededException {<a name="line.72"></a>
<span class="sourceLineNo">073</span><a name="line.73"></a>
<span class="sourceLineNo">074</span>    double start = integrator.getCurrentStepStart();<a name="line.74"></a>
<span class="sourceLineNo">075</span>    if (FastMath.abs((start - problem.getInitialTime()) / integrator.getCurrentSignedStepsize()) &gt; 0.001) {<a name="line.75"></a>
<span class="sourceLineNo">076</span>        // multistep integrators do not handle the first steps themselves<a name="line.76"></a>
<span class="sourceLineNo">077</span>        // so we have to make sure the integrator we look at has really started its work<a name="line.77"></a>
<span class="sourceLineNo">078</span>        if (!Double.isNaN(expectedStepStart)) {<a name="line.78"></a>
<span class="sourceLineNo">079</span>            // the step should either start at the end of the integrator step<a name="line.79"></a>
<span class="sourceLineNo">080</span>            // or at an event if the step is split into several substeps<a name="line.80"></a>
<span class="sourceLineNo">081</span>            double stepError = FastMath.max(maxTimeError, FastMath.abs(start - expectedStepStart));<a name="line.81"></a>
<span class="sourceLineNo">082</span>            for (double eventTime : problem.getTheoreticalEventsTimes()) {<a name="line.82"></a>
<span class="sourceLineNo">083</span>                stepError = FastMath.min(stepError, FastMath.abs(start - eventTime));<a name="line.83"></a>
<span class="sourceLineNo">084</span>            }<a name="line.84"></a>
<span class="sourceLineNo">085</span>            maxTimeError = FastMath.max(maxTimeError, stepError);<a name="line.85"></a>
<span class="sourceLineNo">086</span>        }<a name="line.86"></a>
<span class="sourceLineNo">087</span>        expectedStepStart = start + integrator.getCurrentSignedStepsize();<a name="line.87"></a>
<span class="sourceLineNo">088</span>    }<a name="line.88"></a>
<span class="sourceLineNo">089</span><a name="line.89"></a>
<span class="sourceLineNo">090</span>    double pT = interpolator.getPreviousTime();<a name="line.90"></a>
<span class="sourceLineNo">091</span>    double cT = interpolator.getCurrentTime();<a name="line.91"></a>
<span class="sourceLineNo">092</span>    double[] errorScale = problem.getErrorScale();<a name="line.92"></a>
<span class="sourceLineNo">093</span><a name="line.93"></a>
<span class="sourceLineNo">094</span>    // store the error at the last step<a name="line.94"></a>
<span class="sourceLineNo">095</span>    if (isLast) {<a name="line.95"></a>
<span class="sourceLineNo">096</span>      double[] interpolatedY = interpolator.getInterpolatedState();<a name="line.96"></a>
<span class="sourceLineNo">097</span>      double[] theoreticalY  = problem.computeTheoreticalState(cT);<a name="line.97"></a>
<span class="sourceLineNo">098</span>      for (int i = 0; i &lt; interpolatedY.length; ++i) {<a name="line.98"></a>
<span class="sourceLineNo">099</span>        double error = FastMath.abs(interpolatedY[i] - theoreticalY[i]);<a name="line.99"></a>
<span class="sourceLineNo">100</span>        lastError = FastMath.max(error, lastError);<a name="line.100"></a>
<span class="sourceLineNo">101</span>      }<a name="line.101"></a>
<span class="sourceLineNo">102</span>      lastTime = cT;<a name="line.102"></a>
<span class="sourceLineNo">103</span>    }<a name="line.103"></a>
<span class="sourceLineNo">104</span><a name="line.104"></a>
<span class="sourceLineNo">105</span>    // walk through the step<a name="line.105"></a>
<span class="sourceLineNo">106</span>    for (int k = 0; k &lt;= 20; ++k) {<a name="line.106"></a>
<span class="sourceLineNo">107</span><a name="line.107"></a>
<span class="sourceLineNo">108</span>      double time = pT + (k * (cT - pT)) / 20;<a name="line.108"></a>
<span class="sourceLineNo">109</span>      interpolator.setInterpolatedTime(time);<a name="line.109"></a>
<span class="sourceLineNo">110</span>      double[] interpolatedY = interpolator.getInterpolatedState();<a name="line.110"></a>
<span class="sourceLineNo">111</span>      double[] theoreticalY  = problem.computeTheoreticalState(interpolator.getInterpolatedTime());<a name="line.111"></a>
<span class="sourceLineNo">112</span><a name="line.112"></a>
<span class="sourceLineNo">113</span>      // update the errors<a name="line.113"></a>
<span class="sourceLineNo">114</span>      for (int i = 0; i &lt; interpolatedY.length; ++i) {<a name="line.114"></a>
<span class="sourceLineNo">115</span>        double error = errorScale[i] * FastMath.abs(interpolatedY[i] - theoreticalY[i]);<a name="line.115"></a>
<span class="sourceLineNo">116</span>        maxValueError = FastMath.max(error, maxValueError);<a name="line.116"></a>
<span class="sourceLineNo">117</span>      }<a name="line.117"></a>
<span class="sourceLineNo">118</span>    }<a name="line.118"></a>
<span class="sourceLineNo">119</span>  }<a name="line.119"></a>
<span class="sourceLineNo">120</span><a name="line.120"></a>
<span class="sourceLineNo">121</span>  /**<a name="line.121"></a>
<span class="sourceLineNo">122</span>   * Get the maximal value error encountered during integration.<a name="line.122"></a>
<span class="sourceLineNo">123</span>   * @return maximal value error<a name="line.123"></a>
<span class="sourceLineNo">124</span>   */<a name="line.124"></a>
<span class="sourceLineNo">125</span>  public double getMaximalValueError() {<a name="line.125"></a>
<span class="sourceLineNo">126</span>    return maxValueError;<a name="line.126"></a>
<span class="sourceLineNo">127</span>  }<a name="line.127"></a>
<span class="sourceLineNo">128</span><a name="line.128"></a>
<span class="sourceLineNo">129</span>  /**<a name="line.129"></a>
<span class="sourceLineNo">130</span>   * Get the maximal time error encountered during integration.<a name="line.130"></a>
<span class="sourceLineNo">131</span>   * @return maximal time error<a name="line.131"></a>
<span class="sourceLineNo">132</span>   */<a name="line.132"></a>
<span class="sourceLineNo">133</span>  public double getMaximalTimeError() {<a name="line.133"></a>
<span class="sourceLineNo">134</span>    return maxTimeError;<a name="line.134"></a>
<span class="sourceLineNo">135</span>  }<a name="line.135"></a>
<span class="sourceLineNo">136</span><a name="line.136"></a>
<span class="sourceLineNo">137</span>  /**<a name="line.137"></a>
<span class="sourceLineNo">138</span>   * Get the error at the end of the integration.<a name="line.138"></a>
<span class="sourceLineNo">139</span>   * @return error at the end of the integration<a name="line.139"></a>
<span class="sourceLineNo">140</span>   */<a name="line.140"></a>
<span class="sourceLineNo">141</span>  public double getLastError() {<a name="line.141"></a>
<span class="sourceLineNo">142</span>    return lastError;<a name="line.142"></a>
<span class="sourceLineNo">143</span>  }<a name="line.143"></a>
<span class="sourceLineNo">144</span><a name="line.144"></a>
<span class="sourceLineNo">145</span>  /**<a name="line.145"></a>
<span class="sourceLineNo">146</span>   * Get the time at the end of the integration.<a name="line.146"></a>
<span class="sourceLineNo">147</span>   * @return time at the end of the integration.<a name="line.147"></a>
<span class="sourceLineNo">148</span>   */<a name="line.148"></a>
<span class="sourceLineNo">149</span>  public double getLastTime() {<a name="line.149"></a>
<span class="sourceLineNo">150</span>    return lastTime;<a name="line.150"></a>
<span class="sourceLineNo">151</span>  }<a name="line.151"></a>
<span class="sourceLineNo">152</span><a name="line.152"></a>
<span class="sourceLineNo">153</span>}<a name="line.153"></a>




























































</pre>
</div>
</body>
</html>
