<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>EmbeddedRungeKuttaFieldIntegratorAbstractTest xref</title>
<link type="text/css" rel="stylesheet" href="../../../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../testapidocs/org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaFieldIntegratorAbstractTest.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Licensed to the Apache Software Foundation (ASF) under one or more</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> * contributor license agreements.  See the NOTICE file distributed with</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * this work for additional information regarding copyright ownership.</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * The ASF licenses this file to You under the Apache License, Version 2.0</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * (the "License"); you may not use this file except in compliance with</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> * the License.  You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *      <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  <strong class="jxr_keyword">package</strong> org.apache.commons.math3.ode.nonstiff;
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.Field;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.RealFieldElement;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.DimensionMismatchException;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.MaxCountExceededException;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.NoBracketingException;
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.NumberIsTooSmallException;
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.ode.FieldExpandableODE;
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.ode.FirstOrderFieldDifferentialEquations;
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.ode.FirstOrderFieldIntegrator;
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.ode.FieldODEState;
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.ode.FieldODEStateAndDerivative;
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.ode.TestFieldProblem1;
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.ode.TestFieldProblem3;
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.ode.TestFieldProblem4;
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.ode.TestFieldProblem5;
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.ode.TestFieldProblemHandler;
<a class="jxr_linenumber" name="L38" href="#L38">38</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.ode.events.Action;
<a class="jxr_linenumber" name="L39" href="#L39">39</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.ode.events.FieldEventHandler;
<a class="jxr_linenumber" name="L40" href="#L40">40</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.ode.sampling.FieldStepHandler;
<a class="jxr_linenumber" name="L41" href="#L41">41</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.ode.sampling.FieldStepInterpolator;
<a class="jxr_linenumber" name="L42" href="#L42">42</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.util.FastMath;
<a class="jxr_linenumber" name="L43" href="#L43">43</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.util.MathArrays;
<a class="jxr_linenumber" name="L44" href="#L44">44</a>  <strong class="jxr_keyword">import</strong> org.junit.Assert;
<a class="jxr_linenumber" name="L45" href="#L45">45</a>  <strong class="jxr_keyword">import</strong> org.junit.Test;
<a class="jxr_linenumber" name="L46" href="#L46">46</a>  
<a class="jxr_linenumber" name="L47" href="#L47">47</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">abstract</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../../org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaFieldIntegratorAbstractTest.html">EmbeddedRungeKuttaFieldIntegratorAbstractTest</a> {
<a class="jxr_linenumber" name="L48" href="#L48">48</a>  
<a class="jxr_linenumber" name="L49" href="#L49">49</a>      <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">abstract</strong> &lt;T <strong class="jxr_keyword">extends</strong> RealFieldElement&lt;T&gt;&gt; EmbeddedRungeKuttaFieldIntegrator&lt;T&gt;
<a class="jxr_linenumber" name="L50" href="#L50">50</a>      createIntegrator(Field&lt;T&gt; field, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> minStep, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> maxStep,
<a class="jxr_linenumber" name="L51" href="#L51">51</a>                       <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> scalAbsoluteTolerance, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> scalRelativeTolerance);
<a class="jxr_linenumber" name="L52" href="#L52">52</a>  
<a class="jxr_linenumber" name="L53" href="#L53">53</a>      <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">abstract</strong> &lt;T <strong class="jxr_keyword">extends</strong> RealFieldElement&lt;T&gt;&gt; EmbeddedRungeKuttaFieldIntegrator&lt;T&gt;
<a class="jxr_linenumber" name="L54" href="#L54">54</a>      createIntegrator(Field&lt;T&gt; field, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> minStep, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> maxStep,
<a class="jxr_linenumber" name="L55" href="#L55">55</a>                       <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] vecAbsoluteTolerance, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] vecRelativeTolerance);
<a class="jxr_linenumber" name="L56" href="#L56">56</a>  
<a class="jxr_linenumber" name="L57" href="#L57">57</a>      @Test
<a class="jxr_linenumber" name="L58" href="#L58">58</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">abstract</strong> <strong class="jxr_keyword">void</strong> testNonFieldIntegratorConsistency();
<a class="jxr_linenumber" name="L59" href="#L59">59</a>  
<a class="jxr_linenumber" name="L60" href="#L60">60</a>      <strong class="jxr_keyword">protected</strong> &lt;T <strong class="jxr_keyword">extends</strong> RealFieldElement&lt;T&gt;&gt; <strong class="jxr_keyword">void</strong> doTestNonFieldIntegratorConsistency(<strong class="jxr_keyword">final</strong> Field&lt;T&gt; field) {
<a class="jxr_linenumber" name="L61" href="#L61">61</a>          <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L62" href="#L62">62</a>  
<a class="jxr_linenumber" name="L63" href="#L63">63</a>              <em class="jxr_comment">// get the Butcher arrays from the field integrator</em>
<a class="jxr_linenumber" name="L64" href="#L64">64</a>              EmbeddedRungeKuttaFieldIntegrator&lt;T&gt; fieldIntegrator = createIntegrator(field, 0.001, 1.0, 1.0, 1.0);
<a class="jxr_linenumber" name="L65" href="#L65">65</a>              T[][] fieldA = fieldIntegrator.getA();
<a class="jxr_linenumber" name="L66" href="#L66">66</a>              T[]   fieldB = fieldIntegrator.getB();
<a class="jxr_linenumber" name="L67" href="#L67">67</a>              T[]   fieldC = fieldIntegrator.getC();
<a class="jxr_linenumber" name="L68" href="#L68">68</a>              <strong class="jxr_keyword">if</strong> (fieldIntegrator instanceof DormandPrince853FieldIntegrator) {
<a class="jxr_linenumber" name="L69" href="#L69">69</a>                  <em class="jxr_comment">// special case for Dormand-Prince 8(5,3), the array in the regular</em>
<a class="jxr_linenumber" name="L70" href="#L70">70</a>                  <em class="jxr_comment">// integrator is smaller because as of 3.X, the interpolation steps</em>
<a class="jxr_linenumber" name="L71" href="#L71">71</a>                  <em class="jxr_comment">// are not performed by the integrator itself</em>
<a class="jxr_linenumber" name="L72" href="#L72">72</a>                  T[][] reducedFieldA = MathArrays.buildArray(field, 12, -1);
<a class="jxr_linenumber" name="L73" href="#L73">73</a>                  T[]   reducedFieldB = MathArrays.buildArray(field, 13);
<a class="jxr_linenumber" name="L74" href="#L74">74</a>                  T[]   reducedFieldC = MathArrays.buildArray(field, 12);
<a class="jxr_linenumber" name="L75" href="#L75">75</a>                  System.arraycopy(fieldA, 0, reducedFieldA, 0, reducedFieldA.length);
<a class="jxr_linenumber" name="L76" href="#L76">76</a>                  System.arraycopy(fieldB, 0, reducedFieldB, 0, reducedFieldB.length);
<a class="jxr_linenumber" name="L77" href="#L77">77</a>                  System.arraycopy(fieldC, 0, reducedFieldC, 0, reducedFieldC.length);
<a class="jxr_linenumber" name="L78" href="#L78">78</a>                  fieldA = reducedFieldA;
<a class="jxr_linenumber" name="L79" href="#L79">79</a>                  fieldB = reducedFieldB;
<a class="jxr_linenumber" name="L80" href="#L80">80</a>                  fieldC = reducedFieldC;
<a class="jxr_linenumber" name="L81" href="#L81">81</a>              }
<a class="jxr_linenumber" name="L82" href="#L82">82</a>  
<a class="jxr_linenumber" name="L83" href="#L83">83</a>              String fieldName   = fieldIntegrator.getClass().getName();
<a class="jxr_linenumber" name="L84" href="#L84">84</a>              String regularName = fieldName.replaceAll(<span class="jxr_string">"Field"</span>, <span class="jxr_string">""</span>);
<a class="jxr_linenumber" name="L85" href="#L85">85</a>  
<a class="jxr_linenumber" name="L86" href="#L86">86</a>              <em class="jxr_comment">// get the Butcher arrays from the regular integrator</em>
<a class="jxr_linenumber" name="L87" href="#L87">87</a>              @SuppressWarnings(<span class="jxr_string">"unchecked"</span>)
<a class="jxr_linenumber" name="L88" href="#L88">88</a>              Class&lt;RungeKuttaIntegrator&gt; c = (Class&lt;RungeKuttaIntegrator&gt;) Class.forName(regularName);
<a class="jxr_linenumber" name="L89" href="#L89">89</a>              java.lang.reflect.Field jlrFieldA = c.getDeclaredField(<span class="jxr_string">"STATIC_A"</span>);
<a class="jxr_linenumber" name="L90" href="#L90">90</a>              jlrFieldA.setAccessible(<strong class="jxr_keyword">true</strong>);
<a class="jxr_linenumber" name="L91" href="#L91">91</a>              <strong class="jxr_keyword">double</strong>[][] regularA = (<strong class="jxr_keyword">double</strong>[][]) jlrFieldA.get(<strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L92" href="#L92">92</a>              java.lang.reflect.Field jlrFieldB = c.getDeclaredField(<span class="jxr_string">"STATIC_B"</span>);
<a class="jxr_linenumber" name="L93" href="#L93">93</a>              jlrFieldB.setAccessible(<strong class="jxr_keyword">true</strong>);
<a class="jxr_linenumber" name="L94" href="#L94">94</a>              <strong class="jxr_keyword">double</strong>[]   regularB = (<strong class="jxr_keyword">double</strong>[])   jlrFieldB.get(<strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L95" href="#L95">95</a>              java.lang.reflect.Field jlrFieldC = c.getDeclaredField(<span class="jxr_string">"STATIC_C"</span>);
<a class="jxr_linenumber" name="L96" href="#L96">96</a>              jlrFieldC.setAccessible(<strong class="jxr_keyword">true</strong>);
<a class="jxr_linenumber" name="L97" href="#L97">97</a>              <strong class="jxr_keyword">double</strong>[]   regularC = (<strong class="jxr_keyword">double</strong>[])   jlrFieldC.get(<strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L98" href="#L98">98</a>  
<a class="jxr_linenumber" name="L99" href="#L99">99</a>              Assert.assertEquals(regularA.length, fieldA.length);
<a class="jxr_linenumber" name="L100" href="#L100">100</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; regularA.length; ++i) {
<a class="jxr_linenumber" name="L101" href="#L101">101</a>                 checkArray(regularA[i], fieldA[i]);
<a class="jxr_linenumber" name="L102" href="#L102">102</a>             }
<a class="jxr_linenumber" name="L103" href="#L103">103</a>             checkArray(regularB, fieldB);
<a class="jxr_linenumber" name="L104" href="#L104">104</a>             checkArray(regularC, fieldC);
<a class="jxr_linenumber" name="L105" href="#L105">105</a> 
<a class="jxr_linenumber" name="L106" href="#L106">106</a>         } <strong class="jxr_keyword">catch</strong> (ClassNotFoundException cnfe) {
<a class="jxr_linenumber" name="L107" href="#L107">107</a>             Assert.fail(cnfe.getLocalizedMessage());
<a class="jxr_linenumber" name="L108" href="#L108">108</a>         } <strong class="jxr_keyword">catch</strong> (IllegalAccessException iae) {
<a class="jxr_linenumber" name="L109" href="#L109">109</a>             Assert.fail(iae.getLocalizedMessage());
<a class="jxr_linenumber" name="L110" href="#L110">110</a>         } <strong class="jxr_keyword">catch</strong> (IllegalArgumentException iae) {
<a class="jxr_linenumber" name="L111" href="#L111">111</a>             Assert.fail(iae.getLocalizedMessage());
<a class="jxr_linenumber" name="L112" href="#L112">112</a>         } <strong class="jxr_keyword">catch</strong> (SecurityException se) {
<a class="jxr_linenumber" name="L113" href="#L113">113</a>             Assert.fail(se.getLocalizedMessage());
<a class="jxr_linenumber" name="L114" href="#L114">114</a>         } <strong class="jxr_keyword">catch</strong> (NoSuchFieldException nsfe) {
<a class="jxr_linenumber" name="L115" href="#L115">115</a>             Assert.fail(nsfe.getLocalizedMessage());
<a class="jxr_linenumber" name="L116" href="#L116">116</a>         }
<a class="jxr_linenumber" name="L117" href="#L117">117</a>     }
<a class="jxr_linenumber" name="L118" href="#L118">118</a> 
<a class="jxr_linenumber" name="L119" href="#L119">119</a>     <strong class="jxr_keyword">private</strong> &lt;T <strong class="jxr_keyword">extends</strong> RealFieldElement&lt;T&gt;&gt; <strong class="jxr_keyword">void</strong> checkArray(<strong class="jxr_keyword">double</strong>[] regularArray, T[] fieldArray) {
<a class="jxr_linenumber" name="L120" href="#L120">120</a>         Assert.assertEquals(regularArray.length, fieldArray.length);
<a class="jxr_linenumber" name="L121" href="#L121">121</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; regularArray.length; ++i) {
<a class="jxr_linenumber" name="L122" href="#L122">122</a>             <strong class="jxr_keyword">if</strong> (regularArray[i] == 0) {
<a class="jxr_linenumber" name="L123" href="#L123">123</a>                 Assert.assertTrue(0.0 == fieldArray[i].getReal());
<a class="jxr_linenumber" name="L124" href="#L124">124</a>             } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L125" href="#L125">125</a>                 Assert.assertEquals(regularArray[i], fieldArray[i].getReal(), FastMath.ulp(regularArray[i]));
<a class="jxr_linenumber" name="L126" href="#L126">126</a>             }
<a class="jxr_linenumber" name="L127" href="#L127">127</a>         }
<a class="jxr_linenumber" name="L128" href="#L128">128</a>     }
<a class="jxr_linenumber" name="L129" href="#L129">129</a> 
<a class="jxr_linenumber" name="L130" href="#L130">130</a>     @Test
<a class="jxr_linenumber" name="L131" href="#L131">131</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">abstract</strong> <strong class="jxr_keyword">void</strong> testForwardBackwardExceptions();
<a class="jxr_linenumber" name="L132" href="#L132">132</a> 
<a class="jxr_linenumber" name="L133" href="#L133">133</a>     <strong class="jxr_keyword">protected</strong> &lt;T <strong class="jxr_keyword">extends</strong> RealFieldElement&lt;T&gt;&gt; <strong class="jxr_keyword">void</strong> doTestForwardBackwardExceptions(<strong class="jxr_keyword">final</strong> Field&lt;T&gt; field) {
<a class="jxr_linenumber" name="L134" href="#L134">134</a>         FirstOrderFieldDifferentialEquations&lt;T&gt; equations = <strong class="jxr_keyword">new</strong> FirstOrderFieldDifferentialEquations&lt;T&gt;() {
<a class="jxr_linenumber" name="L135" href="#L135">135</a> 
<a class="jxr_linenumber" name="L136" href="#L136">136</a>             <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">int</strong> getDimension() {
<a class="jxr_linenumber" name="L137" href="#L137">137</a>                 <strong class="jxr_keyword">return</strong> 1;
<a class="jxr_linenumber" name="L138" href="#L138">138</a>             }
<a class="jxr_linenumber" name="L139" href="#L139">139</a> 
<a class="jxr_linenumber" name="L140" href="#L140">140</a>             <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> init(T t0, T[] y0, T t) {
<a class="jxr_linenumber" name="L141" href="#L141">141</a>             }
<a class="jxr_linenumber" name="L142" href="#L142">142</a> 
<a class="jxr_linenumber" name="L143" href="#L143">143</a>             <strong class="jxr_keyword">public</strong> T[] computeDerivatives(T t, T[] y) {
<a class="jxr_linenumber" name="L144" href="#L144">144</a>                 <strong class="jxr_keyword">if</strong> (t.getReal() &lt; -0.5) {
<a class="jxr_linenumber" name="L145" href="#L145">145</a>                     <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/ode/sampling/DummyStepInterpolatorTest.html">LocalException</a>();
<a class="jxr_linenumber" name="L146" href="#L146">146</a>                 } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L147" href="#L147">147</a>                     <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> RuntimeException(<span class="jxr_string">"oops"</span>);
<a class="jxr_linenumber" name="L148" href="#L148">148</a>                 }
<a class="jxr_linenumber" name="L149" href="#L149">149</a>             }
<a class="jxr_linenumber" name="L150" href="#L150">150</a>         };
<a class="jxr_linenumber" name="L151" href="#L151">151</a> 
<a class="jxr_linenumber" name="L152" href="#L152">152</a>         EmbeddedRungeKuttaFieldIntegrator&lt;T&gt; integrator = createIntegrator(field, 0.0, 1.0, 1.0e-10, 1.0e-10);
<a class="jxr_linenumber" name="L153" href="#L153">153</a> 
<a class="jxr_linenumber" name="L154" href="#L154">154</a>         <strong class="jxr_keyword">try</strong>  {
<a class="jxr_linenumber" name="L155" href="#L155">155</a>             integrator.integrate(<strong class="jxr_keyword">new</strong> FieldExpandableODE&lt;T&gt;(equations),
<a class="jxr_linenumber" name="L156" href="#L156">156</a>                                  <strong class="jxr_keyword">new</strong> FieldODEState&lt;T&gt;(field.getOne().negate(),
<a class="jxr_linenumber" name="L157" href="#L157">157</a>                                                       MathArrays.buildArray(field, 1)),
<a class="jxr_linenumber" name="L158" href="#L158">158</a>                                  field.getZero());
<a class="jxr_linenumber" name="L159" href="#L159">159</a>             Assert.fail(<span class="jxr_string">"an exception should have been thrown"</span>);
<a class="jxr_linenumber" name="L160" href="#L160">160</a>           } <strong class="jxr_keyword">catch</strong>(<a href="../../../../../../org/apache/commons/math3/ode/sampling/DummyStepInterpolatorTest.html">LocalException</a> de) {
<a class="jxr_linenumber" name="L161" href="#L161">161</a>             <em class="jxr_comment">// expected behavior</em>
<a class="jxr_linenumber" name="L162" href="#L162">162</a>           }
<a class="jxr_linenumber" name="L163" href="#L163">163</a> 
<a class="jxr_linenumber" name="L164" href="#L164">164</a>           <strong class="jxr_keyword">try</strong>  {
<a class="jxr_linenumber" name="L165" href="#L165">165</a>               integrator.integrate(<strong class="jxr_keyword">new</strong> FieldExpandableODE&lt;T&gt;(equations),
<a class="jxr_linenumber" name="L166" href="#L166">166</a>                                    <strong class="jxr_keyword">new</strong> FieldODEState&lt;T&gt;(field.getZero(),
<a class="jxr_linenumber" name="L167" href="#L167">167</a>                                                         MathArrays.buildArray(field, 1)),
<a class="jxr_linenumber" name="L168" href="#L168">168</a>                                    field.getOne());
<a class="jxr_linenumber" name="L169" href="#L169">169</a>                Assert.fail(<span class="jxr_string">"an exception should have been thrown"</span>);
<a class="jxr_linenumber" name="L170" href="#L170">170</a>           } <strong class="jxr_keyword">catch</strong>(RuntimeException de) {
<a class="jxr_linenumber" name="L171" href="#L171">171</a>             <em class="jxr_comment">// expected behavior</em>
<a class="jxr_linenumber" name="L172" href="#L172">172</a>           }
<a class="jxr_linenumber" name="L173" href="#L173">173</a>     }
<a class="jxr_linenumber" name="L174" href="#L174">174</a> 
<a class="jxr_linenumber" name="L175" href="#L175">175</a>     <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../../org/apache/commons/math3/ode/sampling/DummyStepInterpolatorTest.html">LocalException</a> <strong class="jxr_keyword">extends</strong> RuntimeException {
<a class="jxr_linenumber" name="L176" href="#L176">176</a>         <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">long</strong> serialVersionUID = 20151208L;
<a class="jxr_linenumber" name="L177" href="#L177">177</a>     }
<a class="jxr_linenumber" name="L178" href="#L178">178</a> 
<a class="jxr_linenumber" name="L179" href="#L179">179</a>     @Test(expected=NumberIsTooSmallException.<strong class="jxr_keyword">class</strong>)
<a class="jxr_linenumber" name="L180" href="#L180">180</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">abstract</strong> <strong class="jxr_keyword">void</strong> testMinStep();
<a class="jxr_linenumber" name="L181" href="#L181">181</a> 
<a class="jxr_linenumber" name="L182" href="#L182">182</a>     <strong class="jxr_keyword">protected</strong> &lt;T <strong class="jxr_keyword">extends</strong> RealFieldElement&lt;T&gt;&gt; <strong class="jxr_keyword">void</strong> doTestMinStep(<strong class="jxr_keyword">final</strong> Field&lt;T&gt; field)
<a class="jxr_linenumber" name="L183" href="#L183">183</a>         <strong class="jxr_keyword">throws</strong> NumberIsTooSmallException {
<a class="jxr_linenumber" name="L184" href="#L184">184</a> 
<a class="jxr_linenumber" name="L185" href="#L185">185</a>         TestFieldProblem1&lt;T&gt; pb = <strong class="jxr_keyword">new</strong> TestFieldProblem1&lt;T&gt;(field);
<a class="jxr_linenumber" name="L186" href="#L186">186</a>         <strong class="jxr_keyword">double</strong> minStep = pb.getFinalTime().subtract(pb.getInitialState().getTime()).multiply(0.1).getReal();
<a class="jxr_linenumber" name="L187" href="#L187">187</a>         <strong class="jxr_keyword">double</strong> maxStep = pb.getFinalTime().subtract(pb.getInitialState().getTime()).getReal();
<a class="jxr_linenumber" name="L188" href="#L188">188</a>         <strong class="jxr_keyword">double</strong>[] vecAbsoluteTolerance = { 1.0e-15, 1.0e-16 };
<a class="jxr_linenumber" name="L189" href="#L189">189</a>         <strong class="jxr_keyword">double</strong>[] vecRelativeTolerance = { 1.0e-15, 1.0e-16 };
<a class="jxr_linenumber" name="L190" href="#L190">190</a> 
<a class="jxr_linenumber" name="L191" href="#L191">191</a>         FirstOrderFieldIntegrator&lt;T&gt; integ = createIntegrator(field, minStep, maxStep,
<a class="jxr_linenumber" name="L192" href="#L192">192</a>                                                               vecAbsoluteTolerance, vecRelativeTolerance);
<a class="jxr_linenumber" name="L193" href="#L193">193</a>         TestFieldProblemHandler&lt;T&gt; handler = <strong class="jxr_keyword">new</strong> TestFieldProblemHandler&lt;T&gt;(pb, integ);
<a class="jxr_linenumber" name="L194" href="#L194">194</a>         integ.addStepHandler(handler);
<a class="jxr_linenumber" name="L195" href="#L195">195</a>         integ.integrate(<strong class="jxr_keyword">new</strong> FieldExpandableODE&lt;T&gt;(pb), pb.getInitialState(), pb.getFinalTime());
<a class="jxr_linenumber" name="L196" href="#L196">196</a>         Assert.fail(<span class="jxr_string">"an exception should have been thrown"</span>);
<a class="jxr_linenumber" name="L197" href="#L197">197</a> 
<a class="jxr_linenumber" name="L198" href="#L198">198</a>     }
<a class="jxr_linenumber" name="L199" href="#L199">199</a> 
<a class="jxr_linenumber" name="L200" href="#L200">200</a>     @Test
<a class="jxr_linenumber" name="L201" href="#L201">201</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">abstract</strong> <strong class="jxr_keyword">void</strong> testIncreasingTolerance();
<a class="jxr_linenumber" name="L202" href="#L202">202</a> 
<a class="jxr_linenumber" name="L203" href="#L203">203</a>     <strong class="jxr_keyword">protected</strong> &lt;T <strong class="jxr_keyword">extends</strong> RealFieldElement&lt;T&gt;&gt; <strong class="jxr_keyword">void</strong> doTestIncreasingTolerance(<strong class="jxr_keyword">final</strong> Field&lt;T&gt; field,
<a class="jxr_linenumber" name="L204" href="#L204">204</a>                                                                              <strong class="jxr_keyword">double</strong> factor,
<a class="jxr_linenumber" name="L205" href="#L205">205</a>                                                                              <strong class="jxr_keyword">double</strong> epsilon) {
<a class="jxr_linenumber" name="L206" href="#L206">206</a> 
<a class="jxr_linenumber" name="L207" href="#L207">207</a>         <strong class="jxr_keyword">int</strong> previousCalls = Integer.MAX_VALUE;
<a class="jxr_linenumber" name="L208" href="#L208">208</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = -12; i &lt; -2; ++i) {
<a class="jxr_linenumber" name="L209" href="#L209">209</a>             TestFieldProblem1&lt;T&gt; pb = <strong class="jxr_keyword">new</strong> TestFieldProblem1&lt;T&gt;(field);
<a class="jxr_linenumber" name="L210" href="#L210">210</a>             <strong class="jxr_keyword">double</strong> minStep = 0;
<a class="jxr_linenumber" name="L211" href="#L211">211</a>             <strong class="jxr_keyword">double</strong> maxStep = pb.getFinalTime().subtract(pb.getInitialState().getTime()).getReal();
<a class="jxr_linenumber" name="L212" href="#L212">212</a>             <strong class="jxr_keyword">double</strong> scalAbsoluteTolerance = FastMath.pow(10.0, i);
<a class="jxr_linenumber" name="L213" href="#L213">213</a>             <strong class="jxr_keyword">double</strong> scalRelativeTolerance = 0.01 * scalAbsoluteTolerance;
<a class="jxr_linenumber" name="L214" href="#L214">214</a> 
<a class="jxr_linenumber" name="L215" href="#L215">215</a>             FirstOrderFieldIntegrator&lt;T&gt; integ = createIntegrator(field, minStep, maxStep,
<a class="jxr_linenumber" name="L216" href="#L216">216</a>                                                                   scalAbsoluteTolerance, scalRelativeTolerance);
<a class="jxr_linenumber" name="L217" href="#L217">217</a>             TestFieldProblemHandler&lt;T&gt; handler = <strong class="jxr_keyword">new</strong> TestFieldProblemHandler&lt;T&gt;(pb, integ);
<a class="jxr_linenumber" name="L218" href="#L218">218</a>             integ.addStepHandler(handler);
<a class="jxr_linenumber" name="L219" href="#L219">219</a>             integ.integrate(<strong class="jxr_keyword">new</strong> FieldExpandableODE&lt;T&gt;(pb), pb.getInitialState(), pb.getFinalTime());
<a class="jxr_linenumber" name="L220" href="#L220">220</a> 
<a class="jxr_linenumber" name="L221" href="#L221">221</a>             Assert.assertTrue(handler.getMaximalValueError().getReal() &lt; (factor * scalAbsoluteTolerance));
<a class="jxr_linenumber" name="L222" href="#L222">222</a>             Assert.assertEquals(0, handler.getMaximalTimeError().getReal(), epsilon);
<a class="jxr_linenumber" name="L223" href="#L223">223</a> 
<a class="jxr_linenumber" name="L224" href="#L224">224</a>             <strong class="jxr_keyword">int</strong> calls = pb.getCalls();
<a class="jxr_linenumber" name="L225" href="#L225">225</a>             Assert.assertEquals(integ.getEvaluations(), calls);
<a class="jxr_linenumber" name="L226" href="#L226">226</a>             Assert.assertTrue(calls &lt;= previousCalls);
<a class="jxr_linenumber" name="L227" href="#L227">227</a>             previousCalls = calls;
<a class="jxr_linenumber" name="L228" href="#L228">228</a> 
<a class="jxr_linenumber" name="L229" href="#L229">229</a>         }
<a class="jxr_linenumber" name="L230" href="#L230">230</a> 
<a class="jxr_linenumber" name="L231" href="#L231">231</a>     }
<a class="jxr_linenumber" name="L232" href="#L232">232</a> 
<a class="jxr_linenumber" name="L233" href="#L233">233</a>     @Test
<a class="jxr_linenumber" name="L234" href="#L234">234</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">abstract</strong> <strong class="jxr_keyword">void</strong> testEvents();
<a class="jxr_linenumber" name="L235" href="#L235">235</a> 
<a class="jxr_linenumber" name="L236" href="#L236">236</a>     <strong class="jxr_keyword">protected</strong> &lt;T <strong class="jxr_keyword">extends</strong> RealFieldElement&lt;T&gt;&gt; <strong class="jxr_keyword">void</strong> doTestEvents(<strong class="jxr_keyword">final</strong> Field&lt;T&gt; field,
<a class="jxr_linenumber" name="L237" href="#L237">237</a>                                                                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> epsilonMaxValue,
<a class="jxr_linenumber" name="L238" href="#L238">238</a>                                                                 <strong class="jxr_keyword">final</strong> String name) {
<a class="jxr_linenumber" name="L239" href="#L239">239</a> 
<a class="jxr_linenumber" name="L240" href="#L240">240</a>       TestFieldProblem4&lt;T&gt; pb = <strong class="jxr_keyword">new</strong> TestFieldProblem4&lt;T&gt;(field);
<a class="jxr_linenumber" name="L241" href="#L241">241</a>       <strong class="jxr_keyword">double</strong> minStep = 0;
<a class="jxr_linenumber" name="L242" href="#L242">242</a>       <strong class="jxr_keyword">double</strong> maxStep = pb.getFinalTime().subtract(pb.getInitialState().getTime()).getReal();
<a class="jxr_linenumber" name="L243" href="#L243">243</a>       <strong class="jxr_keyword">double</strong> scalAbsoluteTolerance = 1.0e-8;
<a class="jxr_linenumber" name="L244" href="#L244">244</a>       <strong class="jxr_keyword">double</strong> scalRelativeTolerance = 0.01 * scalAbsoluteTolerance;
<a class="jxr_linenumber" name="L245" href="#L245">245</a> 
<a class="jxr_linenumber" name="L246" href="#L246">246</a>       FirstOrderFieldIntegrator&lt;T&gt; integ = createIntegrator(field, minStep, maxStep,
<a class="jxr_linenumber" name="L247" href="#L247">247</a>                                                             scalAbsoluteTolerance, scalRelativeTolerance);
<a class="jxr_linenumber" name="L248" href="#L248">248</a>       TestFieldProblemHandler&lt;T&gt; handler = <strong class="jxr_keyword">new</strong> TestFieldProblemHandler&lt;T&gt;(pb, integ);
<a class="jxr_linenumber" name="L249" href="#L249">249</a>       integ.addStepHandler(handler);
<a class="jxr_linenumber" name="L250" href="#L250">250</a>       FieldEventHandler&lt;T&gt;[] functions = pb.getEventsHandlers();
<a class="jxr_linenumber" name="L251" href="#L251">251</a>       <strong class="jxr_keyword">double</strong> convergence = 1.0e-8 * maxStep;
<a class="jxr_linenumber" name="L252" href="#L252">252</a>       <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> l = 0; l &lt; functions.length; ++l) {
<a class="jxr_linenumber" name="L253" href="#L253">253</a>           integ.addEventHandler(functions[l], Double.POSITIVE_INFINITY, convergence, 1000);
<a class="jxr_linenumber" name="L254" href="#L254">254</a>       }
<a class="jxr_linenumber" name="L255" href="#L255">255</a>       Assert.assertEquals(functions.length, integ.getEventHandlers().size());
<a class="jxr_linenumber" name="L256" href="#L256">256</a>       integ.integrate(<strong class="jxr_keyword">new</strong> FieldExpandableODE&lt;T&gt;(pb), pb.getInitialState(), pb.getFinalTime());
<a class="jxr_linenumber" name="L257" href="#L257">257</a> 
<a class="jxr_linenumber" name="L258" href="#L258">258</a>       Assert.assertEquals(0, handler.getMaximalValueError().getReal(), epsilonMaxValue);
<a class="jxr_linenumber" name="L259" href="#L259">259</a>       Assert.assertEquals(0, handler.getMaximalTimeError().getReal(), convergence);
<a class="jxr_linenumber" name="L260" href="#L260">260</a>       Assert.assertEquals(12.0, handler.getLastTime().getReal(), convergence);
<a class="jxr_linenumber" name="L261" href="#L261">261</a>       Assert.assertEquals(name, integ.getName());
<a class="jxr_linenumber" name="L262" href="#L262">262</a>       integ.clearEventHandlers();
<a class="jxr_linenumber" name="L263" href="#L263">263</a>       Assert.assertEquals(0, integ.getEventHandlers().size());
<a class="jxr_linenumber" name="L264" href="#L264">264</a> 
<a class="jxr_linenumber" name="L265" href="#L265">265</a>     }
<a class="jxr_linenumber" name="L266" href="#L266">266</a> 
<a class="jxr_linenumber" name="L267" href="#L267">267</a>     @Test(expected=LocalException.<strong class="jxr_keyword">class</strong>)
<a class="jxr_linenumber" name="L268" href="#L268">268</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">abstract</strong> <strong class="jxr_keyword">void</strong> testEventsErrors();
<a class="jxr_linenumber" name="L269" href="#L269">269</a> 
<a class="jxr_linenumber" name="L270" href="#L270">270</a>     <strong class="jxr_keyword">protected</strong> &lt;T <strong class="jxr_keyword">extends</strong> RealFieldElement&lt;T&gt;&gt; <strong class="jxr_keyword">void</strong> doTestEventsErrors(<strong class="jxr_keyword">final</strong> Field&lt;T&gt; field)
<a class="jxr_linenumber" name="L271" href="#L271">271</a>         <strong class="jxr_keyword">throws</strong> <a href="../../../../../../org/apache/commons/math3/ode/sampling/DummyStepInterpolatorTest.html">LocalException</a> {
<a class="jxr_linenumber" name="L272" href="#L272">272</a>         <strong class="jxr_keyword">final</strong> TestFieldProblem1&lt;T&gt; pb = <strong class="jxr_keyword">new</strong> TestFieldProblem1&lt;T&gt;(field);
<a class="jxr_linenumber" name="L273" href="#L273">273</a>         <strong class="jxr_keyword">double</strong> minStep = 0;
<a class="jxr_linenumber" name="L274" href="#L274">274</a>         <strong class="jxr_keyword">double</strong> maxStep = pb.getFinalTime().subtract(pb.getInitialState().getTime()).getReal();
<a class="jxr_linenumber" name="L275" href="#L275">275</a>         <strong class="jxr_keyword">double</strong> scalAbsoluteTolerance = 1.0e-8;
<a class="jxr_linenumber" name="L276" href="#L276">276</a>         <strong class="jxr_keyword">double</strong> scalRelativeTolerance = 0.01 * scalAbsoluteTolerance;
<a class="jxr_linenumber" name="L277" href="#L277">277</a> 
<a class="jxr_linenumber" name="L278" href="#L278">278</a>         FirstOrderFieldIntegrator&lt;T&gt; integ = createIntegrator(field, minStep, maxStep,
<a class="jxr_linenumber" name="L279" href="#L279">279</a>                                                               scalAbsoluteTolerance, scalRelativeTolerance);
<a class="jxr_linenumber" name="L280" href="#L280">280</a>         TestFieldProblemHandler&lt;T&gt; handler = <strong class="jxr_keyword">new</strong> TestFieldProblemHandler&lt;T&gt;(pb, integ);
<a class="jxr_linenumber" name="L281" href="#L281">281</a>         integ.addStepHandler(handler);
<a class="jxr_linenumber" name="L282" href="#L282">282</a> 
<a class="jxr_linenumber" name="L283" href="#L283">283</a>         integ.addEventHandler(<strong class="jxr_keyword">new</strong> FieldEventHandler&lt;T&gt;() {
<a class="jxr_linenumber" name="L284" href="#L284">284</a>           <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> init(FieldODEStateAndDerivative&lt;T&gt; state0, T t) {
<a class="jxr_linenumber" name="L285" href="#L285">285</a>           }
<a class="jxr_linenumber" name="L286" href="#L286">286</a>           <strong class="jxr_keyword">public</strong> Action eventOccurred(FieldODEStateAndDerivative&lt;T&gt; state, <strong class="jxr_keyword">boolean</strong> increasing) {
<a class="jxr_linenumber" name="L287" href="#L287">287</a>             <strong class="jxr_keyword">return</strong> Action.CONTINUE;
<a class="jxr_linenumber" name="L288" href="#L288">288</a>           }
<a class="jxr_linenumber" name="L289" href="#L289">289</a>           <strong class="jxr_keyword">public</strong> T g(FieldODEStateAndDerivative&lt;T&gt; state) {
<a class="jxr_linenumber" name="L290" href="#L290">290</a>             T middle = pb.getInitialState().getTime().add(pb.getFinalTime()).multiply(0.5);
<a class="jxr_linenumber" name="L291" href="#L291">291</a>             T offset = state.getTime().subtract(middle);
<a class="jxr_linenumber" name="L292" href="#L292">292</a>             <strong class="jxr_keyword">if</strong> (offset.getReal() &gt; 0) {
<a class="jxr_linenumber" name="L293" href="#L293">293</a>               <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/ode/sampling/DummyStepInterpolatorTest.html">LocalException</a>();
<a class="jxr_linenumber" name="L294" href="#L294">294</a>             }
<a class="jxr_linenumber" name="L295" href="#L295">295</a>             <strong class="jxr_keyword">return</strong> offset;
<a class="jxr_linenumber" name="L296" href="#L296">296</a>           }
<a class="jxr_linenumber" name="L297" href="#L297">297</a>           <strong class="jxr_keyword">public</strong> FieldODEState&lt;T&gt; resetState(FieldODEStateAndDerivative&lt;T&gt; state) {
<a class="jxr_linenumber" name="L298" href="#L298">298</a>               <strong class="jxr_keyword">return</strong> state;
<a class="jxr_linenumber" name="L299" href="#L299">299</a>           }
<a class="jxr_linenumber" name="L300" href="#L300">300</a>         }, Double.POSITIVE_INFINITY, 1.0e-8 * maxStep, 1000);
<a class="jxr_linenumber" name="L301" href="#L301">301</a> 
<a class="jxr_linenumber" name="L302" href="#L302">302</a>         integ.integrate(<strong class="jxr_keyword">new</strong> FieldExpandableODE&lt;T&gt;(pb), pb.getInitialState(), pb.getFinalTime());
<a class="jxr_linenumber" name="L303" href="#L303">303</a> 
<a class="jxr_linenumber" name="L304" href="#L304">304</a>     }
<a class="jxr_linenumber" name="L305" href="#L305">305</a> 
<a class="jxr_linenumber" name="L306" href="#L306">306</a>     @Test
<a class="jxr_linenumber" name="L307" href="#L307">307</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">abstract</strong> <strong class="jxr_keyword">void</strong> testEventsNoConvergence();
<a class="jxr_linenumber" name="L308" href="#L308">308</a> 
<a class="jxr_linenumber" name="L309" href="#L309">309</a>     <strong class="jxr_keyword">protected</strong> &lt;T <strong class="jxr_keyword">extends</strong> RealFieldElement&lt;T&gt;&gt; <strong class="jxr_keyword">void</strong> doTestEventsNoConvergence(<strong class="jxr_keyword">final</strong> Field&lt;T&gt; field){
<a class="jxr_linenumber" name="L310" href="#L310">310</a> 
<a class="jxr_linenumber" name="L311" href="#L311">311</a>         <strong class="jxr_keyword">final</strong> TestFieldProblem1&lt;T&gt; pb = <strong class="jxr_keyword">new</strong> TestFieldProblem1&lt;T&gt;(field);
<a class="jxr_linenumber" name="L312" href="#L312">312</a>         <strong class="jxr_keyword">double</strong> minStep = 0;
<a class="jxr_linenumber" name="L313" href="#L313">313</a>         <strong class="jxr_keyword">double</strong> maxStep = pb.getFinalTime().subtract(pb.getInitialState().getTime()).getReal();
<a class="jxr_linenumber" name="L314" href="#L314">314</a>         <strong class="jxr_keyword">double</strong> scalAbsoluteTolerance = 1.0e-8;
<a class="jxr_linenumber" name="L315" href="#L315">315</a>         <strong class="jxr_keyword">double</strong> scalRelativeTolerance = 0.01 * scalAbsoluteTolerance;
<a class="jxr_linenumber" name="L316" href="#L316">316</a> 
<a class="jxr_linenumber" name="L317" href="#L317">317</a>         FirstOrderFieldIntegrator&lt;T&gt; integ = createIntegrator(field, minStep, maxStep,
<a class="jxr_linenumber" name="L318" href="#L318">318</a>                                                               scalAbsoluteTolerance, scalRelativeTolerance);
<a class="jxr_linenumber" name="L319" href="#L319">319</a>         TestFieldProblemHandler&lt;T&gt; handler = <strong class="jxr_keyword">new</strong> TestFieldProblemHandler&lt;T&gt;(pb, integ);
<a class="jxr_linenumber" name="L320" href="#L320">320</a>         integ.addStepHandler(handler);
<a class="jxr_linenumber" name="L321" href="#L321">321</a> 
<a class="jxr_linenumber" name="L322" href="#L322">322</a>         integ.addEventHandler(<strong class="jxr_keyword">new</strong> FieldEventHandler&lt;T&gt;() {
<a class="jxr_linenumber" name="L323" href="#L323">323</a>             <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> init(FieldODEStateAndDerivative&lt;T&gt; state0, T t) {
<a class="jxr_linenumber" name="L324" href="#L324">324</a>             }
<a class="jxr_linenumber" name="L325" href="#L325">325</a>             <strong class="jxr_keyword">public</strong> Action eventOccurred(FieldODEStateAndDerivative&lt;T&gt; state, <strong class="jxr_keyword">boolean</strong> increasing) {
<a class="jxr_linenumber" name="L326" href="#L326">326</a>                 <strong class="jxr_keyword">return</strong> Action.CONTINUE;
<a class="jxr_linenumber" name="L327" href="#L327">327</a>             }
<a class="jxr_linenumber" name="L328" href="#L328">328</a>             <strong class="jxr_keyword">public</strong> T g(FieldODEStateAndDerivative&lt;T&gt; state) {
<a class="jxr_linenumber" name="L329" href="#L329">329</a>                 T middle = pb.getInitialState().getTime().add(pb.getFinalTime()).multiply(0.5);
<a class="jxr_linenumber" name="L330" href="#L330">330</a>                 T offset = state.getTime().subtract(middle);
<a class="jxr_linenumber" name="L331" href="#L331">331</a>                 <strong class="jxr_keyword">return</strong> (offset.getReal() &gt; 0) ? offset.add(0.5) : offset.subtract(0.5);
<a class="jxr_linenumber" name="L332" href="#L332">332</a>             }
<a class="jxr_linenumber" name="L333" href="#L333">333</a>             <strong class="jxr_keyword">public</strong> FieldODEState&lt;T&gt; resetState(FieldODEStateAndDerivative&lt;T&gt; state) {
<a class="jxr_linenumber" name="L334" href="#L334">334</a>                 <strong class="jxr_keyword">return</strong> state;
<a class="jxr_linenumber" name="L335" href="#L335">335</a>             }
<a class="jxr_linenumber" name="L336" href="#L336">336</a>         }, Double.POSITIVE_INFINITY, 1.0e-8 * maxStep, 3);
<a class="jxr_linenumber" name="L337" href="#L337">337</a> 
<a class="jxr_linenumber" name="L338" href="#L338">338</a>         <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L339" href="#L339">339</a>             integ.integrate(<strong class="jxr_keyword">new</strong> FieldExpandableODE&lt;T&gt;(pb), pb.getInitialState(), pb.getFinalTime());
<a class="jxr_linenumber" name="L340" href="#L340">340</a>             Assert.fail(<span class="jxr_string">"an exception should have been thrown"</span>);
<a class="jxr_linenumber" name="L341" href="#L341">341</a>         } <strong class="jxr_keyword">catch</strong> (MaxCountExceededException mcee) {
<a class="jxr_linenumber" name="L342" href="#L342">342</a>             <em class="jxr_comment">// Expected.</em>
<a class="jxr_linenumber" name="L343" href="#L343">343</a>         }
<a class="jxr_linenumber" name="L344" href="#L344">344</a> 
<a class="jxr_linenumber" name="L345" href="#L345">345</a>     }
<a class="jxr_linenumber" name="L346" href="#L346">346</a> 
<a class="jxr_linenumber" name="L347" href="#L347">347</a>     @Test
<a class="jxr_linenumber" name="L348" href="#L348">348</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">abstract</strong> <strong class="jxr_keyword">void</strong> testSanityChecks();
<a class="jxr_linenumber" name="L349" href="#L349">349</a> 
<a class="jxr_linenumber" name="L350" href="#L350">350</a>     <strong class="jxr_keyword">protected</strong> &lt;T <strong class="jxr_keyword">extends</strong> RealFieldElement&lt;T&gt;&gt; <strong class="jxr_keyword">void</strong> doTestSanityChecks(Field&lt;T&gt; field) {
<a class="jxr_linenumber" name="L351" href="#L351">351</a>         TestFieldProblem3&lt;T&gt; pb = <strong class="jxr_keyword">new</strong> TestFieldProblem3&lt;T&gt;(field);
<a class="jxr_linenumber" name="L352" href="#L352">352</a>         <strong class="jxr_keyword">try</strong>  {
<a class="jxr_linenumber" name="L353" href="#L353">353</a>             EmbeddedRungeKuttaFieldIntegrator&lt;T&gt; integrator = createIntegrator(field, 0,
<a class="jxr_linenumber" name="L354" href="#L354">354</a>                                                                                pb.getFinalTime().subtract(pb.getInitialState().getTime()).getReal(),
<a class="jxr_linenumber" name="L355" href="#L355">355</a>                                                                                <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[4], <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[4]);
<a class="jxr_linenumber" name="L356" href="#L356">356</a>             integrator.integrate(<strong class="jxr_keyword">new</strong> FieldExpandableODE&lt;T&gt;(pb),
<a class="jxr_linenumber" name="L357" href="#L357">357</a>                                  <strong class="jxr_keyword">new</strong> FieldODEState&lt;T&gt;(pb.getInitialState().getTime(),
<a class="jxr_linenumber" name="L358" href="#L358">358</a>                                                       MathArrays.buildArray(field, 6)),
<a class="jxr_linenumber" name="L359" href="#L359">359</a>                                  pb.getFinalTime());
<a class="jxr_linenumber" name="L360" href="#L360">360</a>             Assert.fail(<span class="jxr_string">"an exception should have been thrown"</span>);
<a class="jxr_linenumber" name="L361" href="#L361">361</a>         } <strong class="jxr_keyword">catch</strong>(DimensionMismatchException ie) {
<a class="jxr_linenumber" name="L362" href="#L362">362</a>         }
<a class="jxr_linenumber" name="L363" href="#L363">363</a>         <strong class="jxr_keyword">try</strong>  {
<a class="jxr_linenumber" name="L364" href="#L364">364</a>             EmbeddedRungeKuttaFieldIntegrator&lt;T&gt; integrator =
<a class="jxr_linenumber" name="L365" href="#L365">365</a>                             createIntegrator(field, 0,
<a class="jxr_linenumber" name="L366" href="#L366">366</a>                                              pb.getFinalTime().subtract(pb.getInitialState().getTime()).getReal(),
<a class="jxr_linenumber" name="L367" href="#L367">367</a>                                              <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[2], <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[4]);
<a class="jxr_linenumber" name="L368" href="#L368">368</a>             integrator.integrate(<strong class="jxr_keyword">new</strong> FieldExpandableODE&lt;T&gt;(pb), pb.getInitialState(), pb.getFinalTime());
<a class="jxr_linenumber" name="L369" href="#L369">369</a>             Assert.fail(<span class="jxr_string">"an exception should have been thrown"</span>);
<a class="jxr_linenumber" name="L370" href="#L370">370</a>         } <strong class="jxr_keyword">catch</strong>(DimensionMismatchException ie) {
<a class="jxr_linenumber" name="L371" href="#L371">371</a>         }
<a class="jxr_linenumber" name="L372" href="#L372">372</a>         <strong class="jxr_keyword">try</strong>  {
<a class="jxr_linenumber" name="L373" href="#L373">373</a>             EmbeddedRungeKuttaFieldIntegrator&lt;T&gt; integrator =
<a class="jxr_linenumber" name="L374" href="#L374">374</a>                             createIntegrator(field, 0,
<a class="jxr_linenumber" name="L375" href="#L375">375</a>                                              pb.getFinalTime().subtract(pb.getInitialState().getTime()).getReal(),
<a class="jxr_linenumber" name="L376" href="#L376">376</a>                                              <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[4], <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[4]);
<a class="jxr_linenumber" name="L377" href="#L377">377</a>             integrator.integrate(<strong class="jxr_keyword">new</strong> FieldExpandableODE&lt;T&gt;(pb), pb.getInitialState(), pb.getInitialState().getTime());
<a class="jxr_linenumber" name="L378" href="#L378">378</a>             Assert.fail(<span class="jxr_string">"an exception should have been thrown"</span>);
<a class="jxr_linenumber" name="L379" href="#L379">379</a>         } <strong class="jxr_keyword">catch</strong>(NumberIsTooSmallException ie) {
<a class="jxr_linenumber" name="L380" href="#L380">380</a>         }
<a class="jxr_linenumber" name="L381" href="#L381">381</a>     }
<a class="jxr_linenumber" name="L382" href="#L382">382</a> 
<a class="jxr_linenumber" name="L383" href="#L383">383</a>     @Test
<a class="jxr_linenumber" name="L384" href="#L384">384</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">abstract</strong> <strong class="jxr_keyword">void</strong> testBackward();
<a class="jxr_linenumber" name="L385" href="#L385">385</a> 
<a class="jxr_linenumber" name="L386" href="#L386">386</a>     <strong class="jxr_keyword">protected</strong> &lt;T <strong class="jxr_keyword">extends</strong> RealFieldElement&lt;T&gt;&gt; <strong class="jxr_keyword">void</strong> doTestBackward(Field&lt;T&gt; field,
<a class="jxr_linenumber" name="L387" href="#L387">387</a>                                                                   <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> epsilonLast,
<a class="jxr_linenumber" name="L388" href="#L388">388</a>                                                                   <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> epsilonMaxValue,
<a class="jxr_linenumber" name="L389" href="#L389">389</a>                                                                   <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> epsilonMaxTime,
<a class="jxr_linenumber" name="L390" href="#L390">390</a>                                                                   <strong class="jxr_keyword">final</strong> String name)
<a class="jxr_linenumber" name="L391" href="#L391">391</a>         <strong class="jxr_keyword">throws</strong> DimensionMismatchException, NumberIsTooSmallException,
<a class="jxr_linenumber" name="L392" href="#L392">392</a>                MaxCountExceededException, NoBracketingException {
<a class="jxr_linenumber" name="L393" href="#L393">393</a> 
<a class="jxr_linenumber" name="L394" href="#L394">394</a>         TestFieldProblem5&lt;T&gt; pb = <strong class="jxr_keyword">new</strong> TestFieldProblem5&lt;T&gt;(field);
<a class="jxr_linenumber" name="L395" href="#L395">395</a>         <strong class="jxr_keyword">double</strong> minStep = 0;
<a class="jxr_linenumber" name="L396" href="#L396">396</a>         <strong class="jxr_keyword">double</strong> maxStep = pb.getFinalTime().subtract(pb.getInitialState().getTime()).abs().getReal();
<a class="jxr_linenumber" name="L397" href="#L397">397</a>         <strong class="jxr_keyword">double</strong> scalAbsoluteTolerance = 1.0e-8;
<a class="jxr_linenumber" name="L398" href="#L398">398</a>         <strong class="jxr_keyword">double</strong> scalRelativeTolerance = 0.01 * scalAbsoluteTolerance;
<a class="jxr_linenumber" name="L399" href="#L399">399</a> 
<a class="jxr_linenumber" name="L400" href="#L400">400</a>         EmbeddedRungeKuttaFieldIntegrator&lt;T&gt; integ = createIntegrator(field, minStep, maxStep,
<a class="jxr_linenumber" name="L401" href="#L401">401</a>                                                                       scalAbsoluteTolerance,
<a class="jxr_linenumber" name="L402" href="#L402">402</a>                                                                       scalRelativeTolerance);
<a class="jxr_linenumber" name="L403" href="#L403">403</a>         TestFieldProblemHandler&lt;T&gt; handler = <strong class="jxr_keyword">new</strong> TestFieldProblemHandler&lt;T&gt;(pb, integ);
<a class="jxr_linenumber" name="L404" href="#L404">404</a>         integ.addStepHandler(handler);
<a class="jxr_linenumber" name="L405" href="#L405">405</a>         integ.integrate(<strong class="jxr_keyword">new</strong> FieldExpandableODE&lt;T&gt;(pb), pb.getInitialState(), pb.getFinalTime());
<a class="jxr_linenumber" name="L406" href="#L406">406</a> 
<a class="jxr_linenumber" name="L407" href="#L407">407</a>         Assert.assertEquals(0, handler.getLastError().getReal(),         epsilonLast);
<a class="jxr_linenumber" name="L408" href="#L408">408</a>         Assert.assertEquals(0, handler.getMaximalValueError().getReal(), epsilonMaxValue);
<a class="jxr_linenumber" name="L409" href="#L409">409</a>         Assert.assertEquals(0, handler.getMaximalTimeError().getReal(),  epsilonMaxTime);
<a class="jxr_linenumber" name="L410" href="#L410">410</a>         Assert.assertEquals(name, integ.getName());
<a class="jxr_linenumber" name="L411" href="#L411">411</a> 
<a class="jxr_linenumber" name="L412" href="#L412">412</a>     }
<a class="jxr_linenumber" name="L413" href="#L413">413</a> 
<a class="jxr_linenumber" name="L414" href="#L414">414</a>     @Test
<a class="jxr_linenumber" name="L415" href="#L415">415</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">abstract</strong> <strong class="jxr_keyword">void</strong> testKepler();
<a class="jxr_linenumber" name="L416" href="#L416">416</a> 
<a class="jxr_linenumber" name="L417" href="#L417">417</a>     <strong class="jxr_keyword">protected</strong> &lt;T <strong class="jxr_keyword">extends</strong> RealFieldElement&lt;T&gt;&gt; <strong class="jxr_keyword">void</strong> doTestKepler(Field&lt;T&gt; field, <strong class="jxr_keyword">double</strong> epsilon) {
<a class="jxr_linenumber" name="L418" href="#L418">418</a> 
<a class="jxr_linenumber" name="L419" href="#L419">419</a>         <strong class="jxr_keyword">final</strong> TestFieldProblem3&lt;T&gt; pb  = <strong class="jxr_keyword">new</strong> TestFieldProblem3&lt;T&gt;(field, field.getZero().add(0.9));
<a class="jxr_linenumber" name="L420" href="#L420">420</a>         <strong class="jxr_keyword">double</strong> minStep = 0;
<a class="jxr_linenumber" name="L421" href="#L421">421</a>         <strong class="jxr_keyword">double</strong> maxStep = pb.getFinalTime().subtract(pb.getInitialState().getTime()).getReal();
<a class="jxr_linenumber" name="L422" href="#L422">422</a>         <strong class="jxr_keyword">double</strong>[] vecAbsoluteTolerance = { 1.0e-8, 1.0e-8, 1.0e-10, 1.0e-10 };
<a class="jxr_linenumber" name="L423" href="#L423">423</a>         <strong class="jxr_keyword">double</strong>[] vecRelativeTolerance = { 1.0e-10, 1.0e-10, 1.0e-8, 1.0e-8 };
<a class="jxr_linenumber" name="L424" href="#L424">424</a> 
<a class="jxr_linenumber" name="L425" href="#L425">425</a>         FirstOrderFieldIntegrator&lt;T&gt; integ = createIntegrator(field, minStep, maxStep,
<a class="jxr_linenumber" name="L426" href="#L426">426</a>                                                               vecAbsoluteTolerance, vecRelativeTolerance);
<a class="jxr_linenumber" name="L427" href="#L427">427</a>         integ.addStepHandler(<strong class="jxr_keyword">new</strong> KeplerHandler&lt;T&gt;(pb, epsilon));
<a class="jxr_linenumber" name="L428" href="#L428">428</a>         integ.integrate(<strong class="jxr_keyword">new</strong> FieldExpandableODE&lt;T&gt;(pb), pb.getInitialState(), pb.getFinalTime());
<a class="jxr_linenumber" name="L429" href="#L429">429</a>     }
<a class="jxr_linenumber" name="L430" href="#L430">430</a> 
<a class="jxr_linenumber" name="L431" href="#L431">431</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">class</strong> KeplerHandler&lt;T <strong class="jxr_keyword">extends</strong> RealFieldElement&lt;T&gt;&gt; <strong class="jxr_keyword">implements</strong> FieldStepHandler&lt;T&gt; {
<a class="jxr_linenumber" name="L432" href="#L432">432</a>         <strong class="jxr_keyword">private</strong> T maxError;
<a class="jxr_linenumber" name="L433" href="#L433">433</a>         <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> TestFieldProblem3&lt;T&gt; pb;
<a class="jxr_linenumber" name="L434" href="#L434">434</a>         <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> epsilon;
<a class="jxr_linenumber" name="L435" href="#L435">435</a>         <strong class="jxr_keyword">public</strong> <a href="../../../../../../org/apache/commons/math3/ode/nonstiff/ThreeEighthesIntegratorTest.html">KeplerHandler</a>(TestFieldProblem3&lt;T&gt; pb, <strong class="jxr_keyword">double</strong> epsilon) {
<a class="jxr_linenumber" name="L436" href="#L436">436</a>             <strong class="jxr_keyword">this</strong>.pb      = pb;
<a class="jxr_linenumber" name="L437" href="#L437">437</a>             <strong class="jxr_keyword">this</strong>.epsilon = epsilon;
<a class="jxr_linenumber" name="L438" href="#L438">438</a>             maxError = pb.getField().getZero();
<a class="jxr_linenumber" name="L439" href="#L439">439</a>         }
<a class="jxr_linenumber" name="L440" href="#L440">440</a>         <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> init(FieldODEStateAndDerivative&lt;T&gt; state0, T t) {
<a class="jxr_linenumber" name="L441" href="#L441">441</a>             maxError = pb.getField().getZero();
<a class="jxr_linenumber" name="L442" href="#L442">442</a>         }
<a class="jxr_linenumber" name="L443" href="#L443">443</a>         <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> handleStep(FieldStepInterpolator&lt;T&gt; interpolator, <strong class="jxr_keyword">boolean</strong> isLast)
<a class="jxr_linenumber" name="L444" href="#L444">444</a>                         <strong class="jxr_keyword">throws</strong> MaxCountExceededException {
<a class="jxr_linenumber" name="L445" href="#L445">445</a> 
<a class="jxr_linenumber" name="L446" href="#L446">446</a>             FieldODEStateAndDerivative&lt;T&gt; current = interpolator.getCurrentState();
<a class="jxr_linenumber" name="L447" href="#L447">447</a>             T[] theoreticalY  = pb.computeTheoreticalState(current.getTime());
<a class="jxr_linenumber" name="L448" href="#L448">448</a>             T dx = current.getState()[0].subtract(theoreticalY[0]);
<a class="jxr_linenumber" name="L449" href="#L449">449</a>             T dy = current.getState()[1].subtract(theoreticalY[1]);
<a class="jxr_linenumber" name="L450" href="#L450">450</a>             T error = dx.multiply(dx).add(dy.multiply(dy));
<a class="jxr_linenumber" name="L451" href="#L451">451</a>             <strong class="jxr_keyword">if</strong> (error.subtract(maxError).getReal() &gt; 0) {
<a class="jxr_linenumber" name="L452" href="#L452">452</a>                 maxError = error;
<a class="jxr_linenumber" name="L453" href="#L453">453</a>             }
<a class="jxr_linenumber" name="L454" href="#L454">454</a>             <strong class="jxr_keyword">if</strong> (isLast) {
<a class="jxr_linenumber" name="L455" href="#L455">455</a>                 Assert.assertEquals(0.0, maxError.getReal(), epsilon);
<a class="jxr_linenumber" name="L456" href="#L456">456</a>             }
<a class="jxr_linenumber" name="L457" href="#L457">457</a>         }
<a class="jxr_linenumber" name="L458" href="#L458">458</a>     }
<a class="jxr_linenumber" name="L459" href="#L459">459</a> 
<a class="jxr_linenumber" name="L460" href="#L460">460</a>     @Test
<a class="jxr_linenumber" name="L461" href="#L461">461</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">abstract</strong> <strong class="jxr_keyword">void</strong> testPartialDerivatives();
<a class="jxr_linenumber" name="L462" href="#L462">462</a> 
<a class="jxr_linenumber" name="L463" href="#L463">463</a>     <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">void</strong> doTestPartialDerivatives(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> epsilonY,
<a class="jxr_linenumber" name="L464" href="#L464">464</a>                                             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] epsilonPartials) {
<a class="jxr_linenumber" name="L465" href="#L465">465</a> 
<a class="jxr_linenumber" name="L466" href="#L466">466</a>         <em class="jxr_comment">// parameters indices</em>
<a class="jxr_linenumber" name="L467" href="#L467">467</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> parameters = 5;
<a class="jxr_linenumber" name="L468" href="#L468">468</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> order      = 1;
<a class="jxr_linenumber" name="L469" href="#L469">469</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> parOmega   = 0;
<a class="jxr_linenumber" name="L470" href="#L470">470</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> parTO      = 1;
<a class="jxr_linenumber" name="L471" href="#L471">471</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> parY00     = 2;
<a class="jxr_linenumber" name="L472" href="#L472">472</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> parY01     = 3;
<a class="jxr_linenumber" name="L473" href="#L473">473</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> parT       = 4;
<a class="jxr_linenumber" name="L474" href="#L474">474</a> 
<a class="jxr_linenumber" name="L475" href="#L475">475</a>         DerivativeStructure omega = <strong class="jxr_keyword">new</strong> DerivativeStructure(parameters, order, parOmega, 1.3);
<a class="jxr_linenumber" name="L476" href="#L476">476</a>         DerivativeStructure t0    = <strong class="jxr_keyword">new</strong> DerivativeStructure(parameters, order, parTO, 1.3);
<a class="jxr_linenumber" name="L477" href="#L477">477</a>         DerivativeStructure[] y0  = <strong class="jxr_keyword">new</strong> DerivativeStructure[] {
<a class="jxr_linenumber" name="L478" href="#L478">478</a>             <strong class="jxr_keyword">new</strong> DerivativeStructure(parameters, order, parY00, 3.0),
<a class="jxr_linenumber" name="L479" href="#L479">479</a>             <strong class="jxr_keyword">new</strong> DerivativeStructure(parameters, order, parY01, 4.0)
<a class="jxr_linenumber" name="L480" href="#L480">480</a>         };
<a class="jxr_linenumber" name="L481" href="#L481">481</a>         DerivativeStructure t     = <strong class="jxr_keyword">new</strong> DerivativeStructure(parameters, order, parT, 6.0);
<a class="jxr_linenumber" name="L482" href="#L482">482</a>         <a href="../../../../../../org/apache/commons/math3/ode/nonstiff/RungeKuttaFieldStepInterpolatorAbstractTest.html">SinCos</a> sinCos = <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/ode/nonstiff/RungeKuttaFieldStepInterpolatorAbstractTest.html">SinCos</a>(omega);
<a class="jxr_linenumber" name="L483" href="#L483">483</a> 
<a class="jxr_linenumber" name="L484" href="#L484">484</a>         EmbeddedRungeKuttaFieldIntegrator&lt;DerivativeStructure&gt; integrator =
<a class="jxr_linenumber" name="L485" href="#L485">485</a>                         createIntegrator(omega.getField(),
<a class="jxr_linenumber" name="L486" href="#L486">486</a>                                          t.subtract(t0).multiply(0.001).getReal(), t.subtract(t0).getReal(),
<a class="jxr_linenumber" name="L487" href="#L487">487</a>                                          1.0e-12, 1.0e-12);
<a class="jxr_linenumber" name="L488" href="#L488">488</a>         FieldODEStateAndDerivative&lt;DerivativeStructure&gt; result =
<a class="jxr_linenumber" name="L489" href="#L489">489</a>                         integrator.integrate(<strong class="jxr_keyword">new</strong> FieldExpandableODE&lt;DerivativeStructure&gt;(sinCos),
<a class="jxr_linenumber" name="L490" href="#L490">490</a>                                              <strong class="jxr_keyword">new</strong> FieldODEState&lt;DerivativeStructure&gt;(t0, y0),
<a class="jxr_linenumber" name="L491" href="#L491">491</a>                                              t);
<a class="jxr_linenumber" name="L492" href="#L492">492</a> 
<a class="jxr_linenumber" name="L493" href="#L493">493</a>         <em class="jxr_comment">// check values</em>
<a class="jxr_linenumber" name="L494" href="#L494">494</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; sinCos.getDimension(); ++i) {
<a class="jxr_linenumber" name="L495" href="#L495">495</a>             Assert.assertEquals(sinCos.theoreticalY(t.getReal())[i], result.getState()[i].getValue(), epsilonY);
<a class="jxr_linenumber" name="L496" href="#L496">496</a>         }
<a class="jxr_linenumber" name="L497" href="#L497">497</a> 
<a class="jxr_linenumber" name="L498" href="#L498">498</a>         <em class="jxr_comment">// check derivatives</em>
<a class="jxr_linenumber" name="L499" href="#L499">499</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[][] derivatives = sinCos.getDerivatives(t.getReal());
<a class="jxr_linenumber" name="L500" href="#L500">500</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; sinCos.getDimension(); ++i) {
<a class="jxr_linenumber" name="L501" href="#L501">501</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> parameter = 0; parameter &lt; parameters; ++parameter) {
<a class="jxr_linenumber" name="L502" href="#L502">502</a>                 Assert.assertEquals(derivatives[i][parameter], dYdP(result.getState()[i], parameter), epsilonPartials[parameter]);
<a class="jxr_linenumber" name="L503" href="#L503">503</a>             }
<a class="jxr_linenumber" name="L504" href="#L504">504</a>         }
<a class="jxr_linenumber" name="L505" href="#L505">505</a> 
<a class="jxr_linenumber" name="L506" href="#L506">506</a>     }
<a class="jxr_linenumber" name="L507" href="#L507">507</a> 
<a class="jxr_linenumber" name="L508" href="#L508">508</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">double</strong> dYdP(<strong class="jxr_keyword">final</strong> DerivativeStructure y, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> parameter) {
<a class="jxr_linenumber" name="L509" href="#L509">509</a>         <strong class="jxr_keyword">int</strong>[] orders = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">int</strong>[y.getFreeParameters()];
<a class="jxr_linenumber" name="L510" href="#L510">510</a>         orders[parameter] = 1;
<a class="jxr_linenumber" name="L511" href="#L511">511</a>         <strong class="jxr_keyword">return</strong> y.getPartialDerivative(orders);
<a class="jxr_linenumber" name="L512" href="#L512">512</a>     }
<a class="jxr_linenumber" name="L513" href="#L513">513</a> 
<a class="jxr_linenumber" name="L514" href="#L514">514</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../../org/apache/commons/math3/ode/nonstiff/RungeKuttaFieldStepInterpolatorAbstractTest.html">SinCos</a> <strong class="jxr_keyword">implements</strong> FirstOrderFieldDifferentialEquations&lt;DerivativeStructure&gt; {
<a class="jxr_linenumber" name="L515" href="#L515">515</a> 
<a class="jxr_linenumber" name="L516" href="#L516">516</a>         <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> DerivativeStructure omega;
<a class="jxr_linenumber" name="L517" href="#L517">517</a>         <strong class="jxr_keyword">private</strong>       DerivativeStructure r;
<a class="jxr_linenumber" name="L518" href="#L518">518</a>         <strong class="jxr_keyword">private</strong>       DerivativeStructure alpha;
<a class="jxr_linenumber" name="L519" href="#L519">519</a> 
<a class="jxr_linenumber" name="L520" href="#L520">520</a>         <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">double</strong> dRdY00;
<a class="jxr_linenumber" name="L521" href="#L521">521</a>         <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">double</strong> dRdY01;
<a class="jxr_linenumber" name="L522" href="#L522">522</a>         <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">double</strong> dAlphadOmega;
<a class="jxr_linenumber" name="L523" href="#L523">523</a>         <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">double</strong> dAlphadT0;
<a class="jxr_linenumber" name="L524" href="#L524">524</a>         <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">double</strong> dAlphadY00;
<a class="jxr_linenumber" name="L525" href="#L525">525</a>         <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">double</strong> dAlphadY01;
<a class="jxr_linenumber" name="L526" href="#L526">526</a> 
<a class="jxr_linenumber" name="L527" href="#L527">527</a>         <strong class="jxr_keyword">protected</strong> <a href="../../../../../../org/apache/commons/math3/ode/nonstiff/RungeKuttaFieldStepInterpolatorAbstractTest.html">SinCos</a>(<strong class="jxr_keyword">final</strong> DerivativeStructure omega) {
<a class="jxr_linenumber" name="L528" href="#L528">528</a>             <strong class="jxr_keyword">this</strong>.omega = omega;
<a class="jxr_linenumber" name="L529" href="#L529">529</a>         }
<a class="jxr_linenumber" name="L530" href="#L530">530</a> 
<a class="jxr_linenumber" name="L531" href="#L531">531</a>         <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">int</strong> getDimension() {
<a class="jxr_linenumber" name="L532" href="#L532">532</a>             <strong class="jxr_keyword">return</strong> 2;
<a class="jxr_linenumber" name="L533" href="#L533">533</a>         }
<a class="jxr_linenumber" name="L534" href="#L534">534</a> 
<a class="jxr_linenumber" name="L535" href="#L535">535</a>         <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> init(<strong class="jxr_keyword">final</strong> DerivativeStructure t0, <strong class="jxr_keyword">final</strong> DerivativeStructure[] y0,
<a class="jxr_linenumber" name="L536" href="#L536">536</a>                          <strong class="jxr_keyword">final</strong> DerivativeStructure finalTime) {
<a class="jxr_linenumber" name="L537" href="#L537">537</a> 
<a class="jxr_linenumber" name="L538" href="#L538">538</a>             <em class="jxr_comment">// theoretical solution is y(t) = { r * sin(omega * t + alpha), r * cos(omega * t + alpha) }</em>
<a class="jxr_linenumber" name="L539" href="#L539">539</a>             <em class="jxr_comment">// so we retrieve alpha by identification from the initial state</em>
<a class="jxr_linenumber" name="L540" href="#L540">540</a>             <strong class="jxr_keyword">final</strong> DerivativeStructure r2 = y0[0].multiply(y0[0]).add(y0[1].multiply(y0[1]));
<a class="jxr_linenumber" name="L541" href="#L541">541</a> 
<a class="jxr_linenumber" name="L542" href="#L542">542</a>             <strong class="jxr_keyword">this</strong>.r            = r2.sqrt();
<a class="jxr_linenumber" name="L543" href="#L543">543</a>             <strong class="jxr_keyword">this</strong>.dRdY00       = y0[0].divide(r).getReal();
<a class="jxr_linenumber" name="L544" href="#L544">544</a>             <strong class="jxr_keyword">this</strong>.dRdY01       = y0[1].divide(r).getReal();
<a class="jxr_linenumber" name="L545" href="#L545">545</a> 
<a class="jxr_linenumber" name="L546" href="#L546">546</a>             <strong class="jxr_keyword">this</strong>.alpha        = y0[0].atan2(y0[1]).subtract(t0.multiply(omega));
<a class="jxr_linenumber" name="L547" href="#L547">547</a>             <strong class="jxr_keyword">this</strong>.dAlphadOmega = -t0.getReal();
<a class="jxr_linenumber" name="L548" href="#L548">548</a>             <strong class="jxr_keyword">this</strong>.dAlphadT0    = -omega.getReal();
<a class="jxr_linenumber" name="L549" href="#L549">549</a>             <strong class="jxr_keyword">this</strong>.dAlphadY00   = y0[1].divide(r2).getReal();
<a class="jxr_linenumber" name="L550" href="#L550">550</a>             <strong class="jxr_keyword">this</strong>.dAlphadY01   = y0[0].negate().divide(r2).getReal();
<a class="jxr_linenumber" name="L551" href="#L551">551</a> 
<a class="jxr_linenumber" name="L552" href="#L552">552</a>         }
<a class="jxr_linenumber" name="L553" href="#L553">553</a> 
<a class="jxr_linenumber" name="L554" href="#L554">554</a>         <strong class="jxr_keyword">public</strong> DerivativeStructure[] computeDerivatives(<strong class="jxr_keyword">final</strong> DerivativeStructure t, <strong class="jxr_keyword">final</strong> DerivativeStructure[] y) {
<a class="jxr_linenumber" name="L555" href="#L555">555</a>             <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> DerivativeStructure[] {
<a class="jxr_linenumber" name="L556" href="#L556">556</a>                 omega.multiply(y[1]),
<a class="jxr_linenumber" name="L557" href="#L557">557</a>                 omega.multiply(y[0]).negate()
<a class="jxr_linenumber" name="L558" href="#L558">558</a>             };
<a class="jxr_linenumber" name="L559" href="#L559">559</a>         }
<a class="jxr_linenumber" name="L560" href="#L560">560</a> 
<a class="jxr_linenumber" name="L561" href="#L561">561</a>         <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">double</strong>[] theoreticalY(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> t) {
<a class="jxr_linenumber" name="L562" href="#L562">562</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> theta = omega.getReal() * t + alpha.getReal();
<a class="jxr_linenumber" name="L563" href="#L563">563</a>             <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {
<a class="jxr_linenumber" name="L564" href="#L564">564</a>                 r.getReal() * FastMath.sin(theta), r.getReal() * FastMath.cos(theta)
<a class="jxr_linenumber" name="L565" href="#L565">565</a>             };
<a class="jxr_linenumber" name="L566" href="#L566">566</a>         }
<a class="jxr_linenumber" name="L567" href="#L567">567</a> 
<a class="jxr_linenumber" name="L568" href="#L568">568</a>         <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">double</strong>[][] getDerivatives(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> t) {
<a class="jxr_linenumber" name="L569" href="#L569">569</a> 
<a class="jxr_linenumber" name="L570" href="#L570">570</a>             <em class="jxr_comment">// intermediate angle and state</em>
<a class="jxr_linenumber" name="L571" href="#L571">571</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> theta        = omega.getReal() * t + alpha.getReal();
<a class="jxr_linenumber" name="L572" href="#L572">572</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> sin          = FastMath.sin(theta);
<a class="jxr_linenumber" name="L573" href="#L573">573</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> cos          = FastMath.cos(theta);
<a class="jxr_linenumber" name="L574" href="#L574">574</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> y0           = r.getReal() * sin;
<a class="jxr_linenumber" name="L575" href="#L575">575</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> y1           = r.getReal() * cos;
<a class="jxr_linenumber" name="L576" href="#L576">576</a> 
<a class="jxr_linenumber" name="L577" href="#L577">577</a>             <em class="jxr_comment">// partial derivatives of the state first component</em>
<a class="jxr_linenumber" name="L578" href="#L578">578</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> dY0dOmega    =                y1 * (t + dAlphadOmega);
<a class="jxr_linenumber" name="L579" href="#L579">579</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> dY0dT0       =                y1 * dAlphadT0;
<a class="jxr_linenumber" name="L580" href="#L580">580</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> dY0dY00      = dRdY00 * sin + y1 * dAlphadY00;
<a class="jxr_linenumber" name="L581" href="#L581">581</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> dY0dY01      = dRdY01 * sin + y1 * dAlphadY01;
<a class="jxr_linenumber" name="L582" href="#L582">582</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> dY0dT        =                y1 * omega.getReal();
<a class="jxr_linenumber" name="L583" href="#L583">583</a> 
<a class="jxr_linenumber" name="L584" href="#L584">584</a>             <em class="jxr_comment">// partial derivatives of the state second component</em>
<a class="jxr_linenumber" name="L585" href="#L585">585</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> dY1dOmega    =              - y0 * (t + dAlphadOmega);
<a class="jxr_linenumber" name="L586" href="#L586">586</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> dY1dT0       =              - y0 * dAlphadT0;
<a class="jxr_linenumber" name="L587" href="#L587">587</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> dY1dY00      = dRdY00 * cos - y0 * dAlphadY00;
<a class="jxr_linenumber" name="L588" href="#L588">588</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> dY1dY01      = dRdY01 * cos - y0 * dAlphadY01;
<a class="jxr_linenumber" name="L589" href="#L589">589</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> dY1dT        =              - y0 * omega.getReal();
<a class="jxr_linenumber" name="L590" href="#L590">590</a> 
<a class="jxr_linenumber" name="L591" href="#L591">591</a>             <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[][] {
<a class="jxr_linenumber" name="L592" href="#L592">592</a>                 { dY0dOmega, dY0dT0, dY0dY00, dY0dY01, dY0dT },
<a class="jxr_linenumber" name="L593" href="#L593">593</a>                 { dY1dOmega, dY1dT0, dY1dY00, dY1dY01, dY1dT }
<a class="jxr_linenumber" name="L594" href="#L594">594</a>             };
<a class="jxr_linenumber" name="L595" href="#L595">595</a> 
<a class="jxr_linenumber" name="L596" href="#L596">596</a>         }
<a class="jxr_linenumber" name="L597" href="#L597">597</a> 
<a class="jxr_linenumber" name="L598" href="#L598">598</a>     }
<a class="jxr_linenumber" name="L599" href="#L599">599</a> 
<a class="jxr_linenumber" name="L600" href="#L600">600</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2003&#x2013;2016 <a href="http://www.apache.org/">The Apache Software Foundation</a>. All rights reserved.</div>
</body>
</html>
