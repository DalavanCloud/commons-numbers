<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span><a name="line.17"></a>
<span class="sourceLineNo">018</span>package org.apache.commons.math3.linear;<a name="line.18"></a>
<span class="sourceLineNo">019</span><a name="line.19"></a>
<span class="sourceLineNo">020</span>import org.junit.Test;<a name="line.20"></a>
<span class="sourceLineNo">021</span>import org.junit.Assert;<a name="line.21"></a>
<span class="sourceLineNo">022</span><a name="line.22"></a>
<span class="sourceLineNo">023</span>public class LUDecompositionTest {<a name="line.23"></a>
<span class="sourceLineNo">024</span>    private double[][] testData = {<a name="line.24"></a>
<span class="sourceLineNo">025</span>            { 1.0, 2.0, 3.0},<a name="line.25"></a>
<span class="sourceLineNo">026</span>            { 2.0, 5.0, 3.0},<a name="line.26"></a>
<span class="sourceLineNo">027</span>            { 1.0, 0.0, 8.0}<a name="line.27"></a>
<span class="sourceLineNo">028</span>    };<a name="line.28"></a>
<span class="sourceLineNo">029</span>    private double[][] testDataMinus = {<a name="line.29"></a>
<span class="sourceLineNo">030</span>            { -1.0, -2.0, -3.0},<a name="line.30"></a>
<span class="sourceLineNo">031</span>            { -2.0, -5.0, -3.0},<a name="line.31"></a>
<span class="sourceLineNo">032</span>            { -1.0,  0.0, -8.0}<a name="line.32"></a>
<span class="sourceLineNo">033</span>    };<a name="line.33"></a>
<span class="sourceLineNo">034</span>    private double[][] luData = {<a name="line.34"></a>
<span class="sourceLineNo">035</span>            { 2.0, 3.0, 3.0 },<a name="line.35"></a>
<span class="sourceLineNo">036</span>            { 0.0, 5.0, 7.0 },<a name="line.36"></a>
<span class="sourceLineNo">037</span>            { 6.0, 9.0, 8.0 }<a name="line.37"></a>
<span class="sourceLineNo">038</span>    };<a name="line.38"></a>
<span class="sourceLineNo">039</span><a name="line.39"></a>
<span class="sourceLineNo">040</span>    // singular matrices<a name="line.40"></a>
<span class="sourceLineNo">041</span>    private double[][] singular = {<a name="line.41"></a>
<span class="sourceLineNo">042</span>            { 2.0, 3.0 },<a name="line.42"></a>
<span class="sourceLineNo">043</span>            { 2.0, 3.0 }<a name="line.43"></a>
<span class="sourceLineNo">044</span>    };<a name="line.44"></a>
<span class="sourceLineNo">045</span>    private double[][] bigSingular = {<a name="line.45"></a>
<span class="sourceLineNo">046</span>            { 1.0, 2.0,   3.0,    4.0 },<a name="line.46"></a>
<span class="sourceLineNo">047</span>            { 2.0, 5.0,   3.0,    4.0 },<a name="line.47"></a>
<span class="sourceLineNo">048</span>            { 7.0, 3.0, 256.0, 1930.0 },<a name="line.48"></a>
<span class="sourceLineNo">049</span>            { 3.0, 7.0,   6.0,    8.0 }<a name="line.49"></a>
<span class="sourceLineNo">050</span>    }; // 4th row = 1st + 2nd<a name="line.50"></a>
<span class="sourceLineNo">051</span><a name="line.51"></a>
<span class="sourceLineNo">052</span>    private static final double entryTolerance = 10e-16;<a name="line.52"></a>
<span class="sourceLineNo">053</span><a name="line.53"></a>
<span class="sourceLineNo">054</span>    private static final double normTolerance = 10e-14;<a name="line.54"></a>
<span class="sourceLineNo">055</span><a name="line.55"></a>
<span class="sourceLineNo">056</span>    /** test dimensions */<a name="line.56"></a>
<span class="sourceLineNo">057</span>    @Test<a name="line.57"></a>
<span class="sourceLineNo">058</span>    public void testDimensions() {<a name="line.58"></a>
<span class="sourceLineNo">059</span>        RealMatrix matrix = MatrixUtils.createRealMatrix(testData);<a name="line.59"></a>
<span class="sourceLineNo">060</span>        LUDecomposition LU = new LUDecomposition(matrix);<a name="line.60"></a>
<span class="sourceLineNo">061</span>        Assert.assertEquals(testData.length, LU.getL().getRowDimension());<a name="line.61"></a>
<span class="sourceLineNo">062</span>        Assert.assertEquals(testData.length, LU.getL().getColumnDimension());<a name="line.62"></a>
<span class="sourceLineNo">063</span>        Assert.assertEquals(testData.length, LU.getU().getRowDimension());<a name="line.63"></a>
<span class="sourceLineNo">064</span>        Assert.assertEquals(testData.length, LU.getU().getColumnDimension());<a name="line.64"></a>
<span class="sourceLineNo">065</span>        Assert.assertEquals(testData.length, LU.getP().getRowDimension());<a name="line.65"></a>
<span class="sourceLineNo">066</span>        Assert.assertEquals(testData.length, LU.getP().getColumnDimension());<a name="line.66"></a>
<span class="sourceLineNo">067</span><a name="line.67"></a>
<span class="sourceLineNo">068</span>    }<a name="line.68"></a>
<span class="sourceLineNo">069</span><a name="line.69"></a>
<span class="sourceLineNo">070</span>    /** test non-square matrix */<a name="line.70"></a>
<span class="sourceLineNo">071</span>    @Test<a name="line.71"></a>
<span class="sourceLineNo">072</span>    public void testNonSquare() {<a name="line.72"></a>
<span class="sourceLineNo">073</span>        try {<a name="line.73"></a>
<span class="sourceLineNo">074</span>            new LUDecomposition(MatrixUtils.createRealMatrix(new double[3][2]));<a name="line.74"></a>
<span class="sourceLineNo">075</span>            Assert.fail("Expecting NonSquareMatrixException");<a name="line.75"></a>
<span class="sourceLineNo">076</span>        } catch (NonSquareMatrixException ime) {<a name="line.76"></a>
<span class="sourceLineNo">077</span>            // expected behavior<a name="line.77"></a>
<span class="sourceLineNo">078</span>        }<a name="line.78"></a>
<span class="sourceLineNo">079</span>    }<a name="line.79"></a>
<span class="sourceLineNo">080</span><a name="line.80"></a>
<span class="sourceLineNo">081</span>    /** test PA = LU */<a name="line.81"></a>
<span class="sourceLineNo">082</span>    @Test<a name="line.82"></a>
<span class="sourceLineNo">083</span>    public void testPAEqualLU() {<a name="line.83"></a>
<span class="sourceLineNo">084</span>        RealMatrix matrix = MatrixUtils.createRealMatrix(testData);<a name="line.84"></a>
<span class="sourceLineNo">085</span>        LUDecomposition lu = new LUDecomposition(matrix);<a name="line.85"></a>
<span class="sourceLineNo">086</span>        RealMatrix l = lu.getL();<a name="line.86"></a>
<span class="sourceLineNo">087</span>        RealMatrix u = lu.getU();<a name="line.87"></a>
<span class="sourceLineNo">088</span>        RealMatrix p = lu.getP();<a name="line.88"></a>
<span class="sourceLineNo">089</span>        double norm = l.multiply(u).subtract(p.multiply(matrix)).getNorm();<a name="line.89"></a>
<span class="sourceLineNo">090</span>        Assert.assertEquals(0, norm, normTolerance);<a name="line.90"></a>
<span class="sourceLineNo">091</span><a name="line.91"></a>
<span class="sourceLineNo">092</span>        matrix = MatrixUtils.createRealMatrix(testDataMinus);<a name="line.92"></a>
<span class="sourceLineNo">093</span>        lu = new LUDecomposition(matrix);<a name="line.93"></a>
<span class="sourceLineNo">094</span>        l = lu.getL();<a name="line.94"></a>
<span class="sourceLineNo">095</span>        u = lu.getU();<a name="line.95"></a>
<span class="sourceLineNo">096</span>        p = lu.getP();<a name="line.96"></a>
<span class="sourceLineNo">097</span>        norm = l.multiply(u).subtract(p.multiply(matrix)).getNorm();<a name="line.97"></a>
<span class="sourceLineNo">098</span>        Assert.assertEquals(0, norm, normTolerance);<a name="line.98"></a>
<span class="sourceLineNo">099</span><a name="line.99"></a>
<span class="sourceLineNo">100</span>        matrix = MatrixUtils.createRealIdentityMatrix(17);<a name="line.100"></a>
<span class="sourceLineNo">101</span>        lu = new LUDecomposition(matrix);<a name="line.101"></a>
<span class="sourceLineNo">102</span>        l = lu.getL();<a name="line.102"></a>
<span class="sourceLineNo">103</span>        u = lu.getU();<a name="line.103"></a>
<span class="sourceLineNo">104</span>        p = lu.getP();<a name="line.104"></a>
<span class="sourceLineNo">105</span>        norm = l.multiply(u).subtract(p.multiply(matrix)).getNorm();<a name="line.105"></a>
<span class="sourceLineNo">106</span>        Assert.assertEquals(0, norm, normTolerance);<a name="line.106"></a>
<span class="sourceLineNo">107</span><a name="line.107"></a>
<span class="sourceLineNo">108</span>        matrix = MatrixUtils.createRealMatrix(singular);<a name="line.108"></a>
<span class="sourceLineNo">109</span>        lu = new LUDecomposition(matrix);<a name="line.109"></a>
<span class="sourceLineNo">110</span>        Assert.assertFalse(lu.getSolver().isNonSingular());<a name="line.110"></a>
<span class="sourceLineNo">111</span>        Assert.assertNull(lu.getL());<a name="line.111"></a>
<span class="sourceLineNo">112</span>        Assert.assertNull(lu.getU());<a name="line.112"></a>
<span class="sourceLineNo">113</span>        Assert.assertNull(lu.getP());<a name="line.113"></a>
<span class="sourceLineNo">114</span><a name="line.114"></a>
<span class="sourceLineNo">115</span>        matrix = MatrixUtils.createRealMatrix(bigSingular);<a name="line.115"></a>
<span class="sourceLineNo">116</span>        lu = new LUDecomposition(matrix);<a name="line.116"></a>
<span class="sourceLineNo">117</span>        Assert.assertFalse(lu.getSolver().isNonSingular());<a name="line.117"></a>
<span class="sourceLineNo">118</span>        Assert.assertNull(lu.getL());<a name="line.118"></a>
<span class="sourceLineNo">119</span>        Assert.assertNull(lu.getU());<a name="line.119"></a>
<span class="sourceLineNo">120</span>        Assert.assertNull(lu.getP());<a name="line.120"></a>
<span class="sourceLineNo">121</span><a name="line.121"></a>
<span class="sourceLineNo">122</span>    }<a name="line.122"></a>
<span class="sourceLineNo">123</span><a name="line.123"></a>
<span class="sourceLineNo">124</span>    /** test that L is lower triangular with unit diagonal */<a name="line.124"></a>
<span class="sourceLineNo">125</span>    @Test<a name="line.125"></a>
<span class="sourceLineNo">126</span>    public void testLLowerTriangular() {<a name="line.126"></a>
<span class="sourceLineNo">127</span>        RealMatrix matrix = MatrixUtils.createRealMatrix(testData);<a name="line.127"></a>
<span class="sourceLineNo">128</span>        RealMatrix l = new LUDecomposition(matrix).getL();<a name="line.128"></a>
<span class="sourceLineNo">129</span>        for (int i = 0; i &lt; l.getRowDimension(); i++) {<a name="line.129"></a>
<span class="sourceLineNo">130</span>            Assert.assertEquals(l.getEntry(i, i), 1, entryTolerance);<a name="line.130"></a>
<span class="sourceLineNo">131</span>            for (int j = i + 1; j &lt; l.getColumnDimension(); j++) {<a name="line.131"></a>
<span class="sourceLineNo">132</span>                Assert.assertEquals(l.getEntry(i, j), 0, entryTolerance);<a name="line.132"></a>
<span class="sourceLineNo">133</span>            }<a name="line.133"></a>
<span class="sourceLineNo">134</span>        }<a name="line.134"></a>
<span class="sourceLineNo">135</span>    }<a name="line.135"></a>
<span class="sourceLineNo">136</span><a name="line.136"></a>
<span class="sourceLineNo">137</span>    /** test that U is upper triangular */<a name="line.137"></a>
<span class="sourceLineNo">138</span>    @Test<a name="line.138"></a>
<span class="sourceLineNo">139</span>    public void testUUpperTriangular() {<a name="line.139"></a>
<span class="sourceLineNo">140</span>        RealMatrix matrix = MatrixUtils.createRealMatrix(testData);<a name="line.140"></a>
<span class="sourceLineNo">141</span>        RealMatrix u = new LUDecomposition(matrix).getU();<a name="line.141"></a>
<span class="sourceLineNo">142</span>        for (int i = 0; i &lt; u.getRowDimension(); i++) {<a name="line.142"></a>
<span class="sourceLineNo">143</span>            for (int j = 0; j &lt; i; j++) {<a name="line.143"></a>
<span class="sourceLineNo">144</span>                Assert.assertEquals(u.getEntry(i, j), 0, entryTolerance);<a name="line.144"></a>
<span class="sourceLineNo">145</span>            }<a name="line.145"></a>
<span class="sourceLineNo">146</span>        }<a name="line.146"></a>
<span class="sourceLineNo">147</span>    }<a name="line.147"></a>
<span class="sourceLineNo">148</span><a name="line.148"></a>
<span class="sourceLineNo">149</span>    /** test that P is a permutation matrix */<a name="line.149"></a>
<span class="sourceLineNo">150</span>    @Test<a name="line.150"></a>
<span class="sourceLineNo">151</span>    public void testPPermutation() {<a name="line.151"></a>
<span class="sourceLineNo">152</span>        RealMatrix matrix = MatrixUtils.createRealMatrix(testData);<a name="line.152"></a>
<span class="sourceLineNo">153</span>        RealMatrix p   = new LUDecomposition(matrix).getP();<a name="line.153"></a>
<span class="sourceLineNo">154</span><a name="line.154"></a>
<span class="sourceLineNo">155</span>        RealMatrix ppT = p.multiply(p.transpose());<a name="line.155"></a>
<span class="sourceLineNo">156</span>        RealMatrix id  = MatrixUtils.createRealIdentityMatrix(p.getRowDimension());<a name="line.156"></a>
<span class="sourceLineNo">157</span>        Assert.assertEquals(0, ppT.subtract(id).getNorm(), normTolerance);<a name="line.157"></a>
<span class="sourceLineNo">158</span><a name="line.158"></a>
<span class="sourceLineNo">159</span>        for (int i = 0; i &lt; p.getRowDimension(); i++) {<a name="line.159"></a>
<span class="sourceLineNo">160</span>            int zeroCount  = 0;<a name="line.160"></a>
<span class="sourceLineNo">161</span>            int oneCount   = 0;<a name="line.161"></a>
<span class="sourceLineNo">162</span>            int otherCount = 0;<a name="line.162"></a>
<span class="sourceLineNo">163</span>            for (int j = 0; j &lt; p.getColumnDimension(); j++) {<a name="line.163"></a>
<span class="sourceLineNo">164</span>                final double e = p.getEntry(i, j);<a name="line.164"></a>
<span class="sourceLineNo">165</span>                if (e == 0) {<a name="line.165"></a>
<span class="sourceLineNo">166</span>                    ++zeroCount;<a name="line.166"></a>
<span class="sourceLineNo">167</span>                } else if (e == 1) {<a name="line.167"></a>
<span class="sourceLineNo">168</span>                    ++oneCount;<a name="line.168"></a>
<span class="sourceLineNo">169</span>                } else {<a name="line.169"></a>
<span class="sourceLineNo">170</span>                    ++otherCount;<a name="line.170"></a>
<span class="sourceLineNo">171</span>                }<a name="line.171"></a>
<span class="sourceLineNo">172</span>            }<a name="line.172"></a>
<span class="sourceLineNo">173</span>            Assert.assertEquals(p.getColumnDimension() - 1, zeroCount);<a name="line.173"></a>
<span class="sourceLineNo">174</span>            Assert.assertEquals(1, oneCount);<a name="line.174"></a>
<span class="sourceLineNo">175</span>            Assert.assertEquals(0, otherCount);<a name="line.175"></a>
<span class="sourceLineNo">176</span>        }<a name="line.176"></a>
<span class="sourceLineNo">177</span><a name="line.177"></a>
<span class="sourceLineNo">178</span>        for (int j = 0; j &lt; p.getColumnDimension(); j++) {<a name="line.178"></a>
<span class="sourceLineNo">179</span>            int zeroCount  = 0;<a name="line.179"></a>
<span class="sourceLineNo">180</span>            int oneCount   = 0;<a name="line.180"></a>
<span class="sourceLineNo">181</span>            int otherCount = 0;<a name="line.181"></a>
<span class="sourceLineNo">182</span>            for (int i = 0; i &lt; p.getRowDimension(); i++) {<a name="line.182"></a>
<span class="sourceLineNo">183</span>                final double e = p.getEntry(i, j);<a name="line.183"></a>
<span class="sourceLineNo">184</span>                if (e == 0) {<a name="line.184"></a>
<span class="sourceLineNo">185</span>                    ++zeroCount;<a name="line.185"></a>
<span class="sourceLineNo">186</span>                } else if (e == 1) {<a name="line.186"></a>
<span class="sourceLineNo">187</span>                    ++oneCount;<a name="line.187"></a>
<span class="sourceLineNo">188</span>                } else {<a name="line.188"></a>
<span class="sourceLineNo">189</span>                    ++otherCount;<a name="line.189"></a>
<span class="sourceLineNo">190</span>                }<a name="line.190"></a>
<span class="sourceLineNo">191</span>            }<a name="line.191"></a>
<span class="sourceLineNo">192</span>            Assert.assertEquals(p.getRowDimension() - 1, zeroCount);<a name="line.192"></a>
<span class="sourceLineNo">193</span>            Assert.assertEquals(1, oneCount);<a name="line.193"></a>
<span class="sourceLineNo">194</span>            Assert.assertEquals(0, otherCount);<a name="line.194"></a>
<span class="sourceLineNo">195</span>        }<a name="line.195"></a>
<span class="sourceLineNo">196</span><a name="line.196"></a>
<span class="sourceLineNo">197</span>    }<a name="line.197"></a>
<span class="sourceLineNo">198</span><a name="line.198"></a>
<span class="sourceLineNo">199</span>    /** test singular */<a name="line.199"></a>
<span class="sourceLineNo">200</span>    @Test<a name="line.200"></a>
<span class="sourceLineNo">201</span>    public void testSingular() {<a name="line.201"></a>
<span class="sourceLineNo">202</span>        LUDecomposition lu =<a name="line.202"></a>
<span class="sourceLineNo">203</span>            new LUDecomposition(MatrixUtils.createRealMatrix(testData));<a name="line.203"></a>
<span class="sourceLineNo">204</span>        Assert.assertTrue(lu.getSolver().isNonSingular());<a name="line.204"></a>
<span class="sourceLineNo">205</span>        lu = new LUDecomposition(MatrixUtils.createRealMatrix(singular));<a name="line.205"></a>
<span class="sourceLineNo">206</span>        Assert.assertFalse(lu.getSolver().isNonSingular());<a name="line.206"></a>
<span class="sourceLineNo">207</span>        lu = new LUDecomposition(MatrixUtils.createRealMatrix(bigSingular));<a name="line.207"></a>
<span class="sourceLineNo">208</span>        Assert.assertFalse(lu.getSolver().isNonSingular());<a name="line.208"></a>
<span class="sourceLineNo">209</span>    }<a name="line.209"></a>
<span class="sourceLineNo">210</span><a name="line.210"></a>
<span class="sourceLineNo">211</span>    /** test matrices values */<a name="line.211"></a>
<span class="sourceLineNo">212</span>    @Test<a name="line.212"></a>
<span class="sourceLineNo">213</span>    public void testMatricesValues1() {<a name="line.213"></a>
<span class="sourceLineNo">214</span>       LUDecomposition lu =<a name="line.214"></a>
<span class="sourceLineNo">215</span>            new LUDecomposition(MatrixUtils.createRealMatrix(testData));<a name="line.215"></a>
<span class="sourceLineNo">216</span>        RealMatrix lRef = MatrixUtils.createRealMatrix(new double[][] {<a name="line.216"></a>
<span class="sourceLineNo">217</span>                { 1.0, 0.0, 0.0 },<a name="line.217"></a>
<span class="sourceLineNo">218</span>                { 0.5, 1.0, 0.0 },<a name="line.218"></a>
<span class="sourceLineNo">219</span>                { 0.5, 0.2, 1.0 }<a name="line.219"></a>
<span class="sourceLineNo">220</span>        });<a name="line.220"></a>
<span class="sourceLineNo">221</span>        RealMatrix uRef = MatrixUtils.createRealMatrix(new double[][] {<a name="line.221"></a>
<span class="sourceLineNo">222</span>                { 2.0,  5.0, 3.0 },<a name="line.222"></a>
<span class="sourceLineNo">223</span>                { 0.0, -2.5, 6.5 },<a name="line.223"></a>
<span class="sourceLineNo">224</span>                { 0.0,  0.0, 0.2 }<a name="line.224"></a>
<span class="sourceLineNo">225</span>        });<a name="line.225"></a>
<span class="sourceLineNo">226</span>        RealMatrix pRef = MatrixUtils.createRealMatrix(new double[][] {<a name="line.226"></a>
<span class="sourceLineNo">227</span>                { 0.0, 1.0, 0.0 },<a name="line.227"></a>
<span class="sourceLineNo">228</span>                { 0.0, 0.0, 1.0 },<a name="line.228"></a>
<span class="sourceLineNo">229</span>                { 1.0, 0.0, 0.0 }<a name="line.229"></a>
<span class="sourceLineNo">230</span>        });<a name="line.230"></a>
<span class="sourceLineNo">231</span>        int[] pivotRef = { 1, 2, 0 };<a name="line.231"></a>
<span class="sourceLineNo">232</span><a name="line.232"></a>
<span class="sourceLineNo">233</span>        // check values against known references<a name="line.233"></a>
<span class="sourceLineNo">234</span>        RealMatrix l = lu.getL();<a name="line.234"></a>
<span class="sourceLineNo">235</span>        Assert.assertEquals(0, l.subtract(lRef).getNorm(), 1.0e-13);<a name="line.235"></a>
<span class="sourceLineNo">236</span>        RealMatrix u = lu.getU();<a name="line.236"></a>
<span class="sourceLineNo">237</span>        Assert.assertEquals(0, u.subtract(uRef).getNorm(), 1.0e-13);<a name="line.237"></a>
<span class="sourceLineNo">238</span>        RealMatrix p = lu.getP();<a name="line.238"></a>
<span class="sourceLineNo">239</span>        Assert.assertEquals(0, p.subtract(pRef).getNorm(), 1.0e-13);<a name="line.239"></a>
<span class="sourceLineNo">240</span>        int[] pivot = lu.getPivot();<a name="line.240"></a>
<span class="sourceLineNo">241</span>        for (int i = 0; i &lt; pivotRef.length; ++i) {<a name="line.241"></a>
<span class="sourceLineNo">242</span>            Assert.assertEquals(pivotRef[i], pivot[i]);<a name="line.242"></a>
<span class="sourceLineNo">243</span>        }<a name="line.243"></a>
<span class="sourceLineNo">244</span><a name="line.244"></a>
<span class="sourceLineNo">245</span>        // check the same cached instance is returned the second time<a name="line.245"></a>
<span class="sourceLineNo">246</span>        Assert.assertTrue(l == lu.getL());<a name="line.246"></a>
<span class="sourceLineNo">247</span>        Assert.assertTrue(u == lu.getU());<a name="line.247"></a>
<span class="sourceLineNo">248</span>        Assert.assertTrue(p == lu.getP());<a name="line.248"></a>
<span class="sourceLineNo">249</span><a name="line.249"></a>
<span class="sourceLineNo">250</span>    }<a name="line.250"></a>
<span class="sourceLineNo">251</span><a name="line.251"></a>
<span class="sourceLineNo">252</span>    /** test matrices values */<a name="line.252"></a>
<span class="sourceLineNo">253</span>    @Test<a name="line.253"></a>
<span class="sourceLineNo">254</span>    public void testMatricesValues2() {<a name="line.254"></a>
<span class="sourceLineNo">255</span>       LUDecomposition lu =<a name="line.255"></a>
<span class="sourceLineNo">256</span>            new LUDecomposition(MatrixUtils.createRealMatrix(luData));<a name="line.256"></a>
<span class="sourceLineNo">257</span>        RealMatrix lRef = MatrixUtils.createRealMatrix(new double[][] {<a name="line.257"></a>
<span class="sourceLineNo">258</span>                {    1.0,    0.0, 0.0 },<a name="line.258"></a>
<span class="sourceLineNo">259</span>                {    0.0,    1.0, 0.0 },<a name="line.259"></a>
<span class="sourceLineNo">260</span>                { 1.0 / 3.0, 0.0, 1.0 }<a name="line.260"></a>
<span class="sourceLineNo">261</span>        });<a name="line.261"></a>
<span class="sourceLineNo">262</span>        RealMatrix uRef = MatrixUtils.createRealMatrix(new double[][] {<a name="line.262"></a>
<span class="sourceLineNo">263</span>                { 6.0, 9.0,    8.0    },<a name="line.263"></a>
<span class="sourceLineNo">264</span>                { 0.0, 5.0,    7.0    },<a name="line.264"></a>
<span class="sourceLineNo">265</span>                { 0.0, 0.0, 1.0 / 3.0 }<a name="line.265"></a>
<span class="sourceLineNo">266</span>        });<a name="line.266"></a>
<span class="sourceLineNo">267</span>        RealMatrix pRef = MatrixUtils.createRealMatrix(new double[][] {<a name="line.267"></a>
<span class="sourceLineNo">268</span>                { 0.0, 0.0, 1.0 },<a name="line.268"></a>
<span class="sourceLineNo">269</span>                { 0.0, 1.0, 0.0 },<a name="line.269"></a>
<span class="sourceLineNo">270</span>                { 1.0, 0.0, 0.0 }<a name="line.270"></a>
<span class="sourceLineNo">271</span>        });<a name="line.271"></a>
<span class="sourceLineNo">272</span>        int[] pivotRef = { 2, 1, 0 };<a name="line.272"></a>
<span class="sourceLineNo">273</span><a name="line.273"></a>
<span class="sourceLineNo">274</span>        // check values against known references<a name="line.274"></a>
<span class="sourceLineNo">275</span>        RealMatrix l = lu.getL();<a name="line.275"></a>
<span class="sourceLineNo">276</span>        Assert.assertEquals(0, l.subtract(lRef).getNorm(), 1.0e-13);<a name="line.276"></a>
<span class="sourceLineNo">277</span>        RealMatrix u = lu.getU();<a name="line.277"></a>
<span class="sourceLineNo">278</span>        Assert.assertEquals(0, u.subtract(uRef).getNorm(), 1.0e-13);<a name="line.278"></a>
<span class="sourceLineNo">279</span>        RealMatrix p = lu.getP();<a name="line.279"></a>
<span class="sourceLineNo">280</span>        Assert.assertEquals(0, p.subtract(pRef).getNorm(), 1.0e-13);<a name="line.280"></a>
<span class="sourceLineNo">281</span>        int[] pivot = lu.getPivot();<a name="line.281"></a>
<span class="sourceLineNo">282</span>        for (int i = 0; i &lt; pivotRef.length; ++i) {<a name="line.282"></a>
<span class="sourceLineNo">283</span>            Assert.assertEquals(pivotRef[i], pivot[i]);<a name="line.283"></a>
<span class="sourceLineNo">284</span>        }<a name="line.284"></a>
<span class="sourceLineNo">285</span><a name="line.285"></a>
<span class="sourceLineNo">286</span>        // check the same cached instance is returned the second time<a name="line.286"></a>
<span class="sourceLineNo">287</span>        Assert.assertTrue(l == lu.getL());<a name="line.287"></a>
<span class="sourceLineNo">288</span>        Assert.assertTrue(u == lu.getU());<a name="line.288"></a>
<span class="sourceLineNo">289</span>        Assert.assertTrue(p == lu.getP());<a name="line.289"></a>
<span class="sourceLineNo">290</span>    }<a name="line.290"></a>
<span class="sourceLineNo">291</span>}<a name="line.291"></a>




























































</pre>
</div>
</body>
</html>
