<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>AbstractCurveFitter xref</title>
<link type="text/css" rel="stylesheet" href="../../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../apidocs/org/apache/commons/math3/fitting/AbstractCurveFitter.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Licensed to the Apache Software Foundation (ASF) under one or more</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> * contributor license agreements.  See the NOTICE file distributed with</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * this work for additional information regarding copyright ownership.</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * The ASF licenses this file to You under the Apache License, Version 2.0</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * (the "License"); you may not use this file except in compliance with</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> * the License.  You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *      <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">package</strong> org.apache.commons.math3.fitting;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <strong class="jxr_keyword">import</strong> java.util.Collection;
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.analysis.MultivariateVectorFunction;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.analysis.MultivariateMatrixFunction;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.analysis.ParametricUnivariateFunction;
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.fitting.leastsquares.LeastSquaresOptimizer;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <em class="jxr_javadoccomment"> * Base class that contains common code for fitting parametric univariate</em>
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <em class="jxr_javadoccomment"> * real functions &lt;code&gt;y = f(p&lt;sub&gt;i&lt;/sub&gt;;x)&lt;/code&gt;, where {@code x} is</em>
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <em class="jxr_javadoccomment"> * the independent variable and the &lt;code&gt;p&lt;sub&gt;i&lt;/sub&gt;&lt;/code&gt; are the</em>
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <em class="jxr_javadoccomment"> * &lt;em&gt;parameters&lt;/em&gt;.</em>
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <em class="jxr_javadoccomment"> * &lt;br/&gt;</em>
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <em class="jxr_javadoccomment"> * A fitter will find the optimal values of the parameters by</em>
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  <em class="jxr_javadoccomment"> * &lt;em&gt;fitting&lt;/em&gt; the curve so it remains very close to a set of</em>
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  <em class="jxr_javadoccomment"> * {@code N} observed points &lt;code&gt;(x&lt;sub&gt;k&lt;/sub&gt;, y&lt;sub&gt;k&lt;/sub&gt;)&lt;/code&gt;,</em>
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  <em class="jxr_javadoccomment"> * {@code 0 &lt;= k &lt; N}.</em>
<a class="jxr_linenumber" name="L38" href="#L38">38</a>  <em class="jxr_javadoccomment"> * &lt;br/&gt;</em>
<a class="jxr_linenumber" name="L39" href="#L39">39</a>  <em class="jxr_javadoccomment"> * An algorithm usually performs the fit by finding the parameter</em>
<a class="jxr_linenumber" name="L40" href="#L40">40</a>  <em class="jxr_javadoccomment"> * values that minimizes the objective function</em>
<a class="jxr_linenumber" name="L41" href="#L41">41</a>  <em class="jxr_javadoccomment"> * &lt;pre&gt;&lt;code&gt;</em>
<a class="jxr_linenumber" name="L42" href="#L42">42</a>  <em class="jxr_javadoccomment"> *  &amp;sum;y&lt;sub&gt;k&lt;/sub&gt; - f(x&lt;sub&gt;k&lt;/sub&gt;)&lt;sup&gt;2&lt;/sup&gt;,</em>
<a class="jxr_linenumber" name="L43" href="#L43">43</a>  <em class="jxr_javadoccomment"> * &lt;/code&gt;&lt;/pre&gt;</em>
<a class="jxr_linenumber" name="L44" href="#L44">44</a>  <em class="jxr_javadoccomment"> * which is actually a least-squares problem.</em>
<a class="jxr_linenumber" name="L45" href="#L45">45</a>  <em class="jxr_javadoccomment"> * This class contains boilerplate code for calling the</em>
<a class="jxr_linenumber" name="L46" href="#L46">46</a>  <em class="jxr_javadoccomment"> * {@link #fit(Collection)} method for obtaining the parameters.</em>
<a class="jxr_linenumber" name="L47" href="#L47">47</a>  <em class="jxr_javadoccomment"> * The problem setup, such as the choice of optimization algorithm</em>
<a class="jxr_linenumber" name="L48" href="#L48">48</a>  <em class="jxr_javadoccomment"> * for fitting a specific function is delegated to subclasses.</em>
<a class="jxr_linenumber" name="L49" href="#L49">49</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L50" href="#L50">50</a>  <em class="jxr_javadoccomment"> * @since 3.3</em>
<a class="jxr_linenumber" name="L51" href="#L51">51</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L52" href="#L52">52</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">abstract</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../org/apache/commons/math3/fitting/AbstractCurveFitter.html">AbstractCurveFitter</a> {
<a class="jxr_linenumber" name="L53" href="#L53">53</a>      <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L54" href="#L54">54</a>  <em class="jxr_javadoccomment">     * Fits a curve.</em>
<a class="jxr_linenumber" name="L55" href="#L55">55</a>  <em class="jxr_javadoccomment">     * This method computes the coefficients of the curve that best</em>
<a class="jxr_linenumber" name="L56" href="#L56">56</a>  <em class="jxr_javadoccomment">     * fit the sample of observed points.</em>
<a class="jxr_linenumber" name="L57" href="#L57">57</a>  <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L58" href="#L58">58</a>  <em class="jxr_javadoccomment">     * @param points Observations.</em>
<a class="jxr_linenumber" name="L59" href="#L59">59</a>  <em class="jxr_javadoccomment">     * @return the fitted parameters.</em>
<a class="jxr_linenumber" name="L60" href="#L60">60</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L61" href="#L61">61</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">double</strong>[] fit(Collection&lt;WeightedObservedPoint&gt; points) {
<a class="jxr_linenumber" name="L62" href="#L62">62</a>          <em class="jxr_comment">// Perform the fit.</em>
<a class="jxr_linenumber" name="L63" href="#L63">63</a>          <strong class="jxr_keyword">return</strong> getOptimizer().optimize(getProblem(points)).getPoint().toArray();
<a class="jxr_linenumber" name="L64" href="#L64">64</a>      }
<a class="jxr_linenumber" name="L65" href="#L65">65</a>  
<a class="jxr_linenumber" name="L66" href="#L66">66</a>      <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L67" href="#L67">67</a>  <em class="jxr_javadoccomment">     * Creates an optimizer set up to fit the appropriate curve.</em>
<a class="jxr_linenumber" name="L68" href="#L68">68</a>  <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L69" href="#L69">69</a>  <em class="jxr_javadoccomment">     * The default implementation uses a {@link LevenbergMarquardtOptimizer</em>
<a class="jxr_linenumber" name="L70" href="#L70">70</a>  <em class="jxr_javadoccomment">     * Levenberg-Marquardt} optimizer.</em>
<a class="jxr_linenumber" name="L71" href="#L71">71</a>  <em class="jxr_javadoccomment">     * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L72" href="#L72">72</a>  <em class="jxr_javadoccomment">     * @return the optimizer to use for fitting the curve to the</em>
<a class="jxr_linenumber" name="L73" href="#L73">73</a>  <em class="jxr_javadoccomment">     * given {@code points}.</em>
<a class="jxr_linenumber" name="L74" href="#L74">74</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L75" href="#L75">75</a>      <strong class="jxr_keyword">protected</strong> <a href="../../../../../org/apache/commons/math3/fitting/leastsquares/LeastSquaresOptimizer.html">LeastSquaresOptimizer</a> getOptimizer() {
<a class="jxr_linenumber" name="L76" href="#L76">76</a>          <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.html">LevenbergMarquardtOptimizer</a>();
<a class="jxr_linenumber" name="L77" href="#L77">77</a>      }
<a class="jxr_linenumber" name="L78" href="#L78">78</a>  
<a class="jxr_linenumber" name="L79" href="#L79">79</a>      <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L80" href="#L80">80</a>  <em class="jxr_javadoccomment">     * Creates a least squares problem corresponding to the appropriate curve.</em>
<a class="jxr_linenumber" name="L81" href="#L81">81</a>  <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L82" href="#L82">82</a>  <em class="jxr_javadoccomment">     * @param points Sample points.</em>
<a class="jxr_linenumber" name="L83" href="#L83">83</a>  <em class="jxr_javadoccomment">     * @return the least squares problem to use for fitting the curve to the</em>
<a class="jxr_linenumber" name="L84" href="#L84">84</a>  <em class="jxr_javadoccomment">     * given {@code points}.</em>
<a class="jxr_linenumber" name="L85" href="#L85">85</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L86" href="#L86">86</a>      <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">abstract</strong> <a href="../../../../../org/apache/commons/math3/fitting/leastsquares/LeastSquaresProblem.html">LeastSquaresProblem</a> getProblem(Collection&lt;WeightedObservedPoint&gt; points);
<a class="jxr_linenumber" name="L87" href="#L87">87</a>  
<a class="jxr_linenumber" name="L88" href="#L88">88</a>      <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L89" href="#L89">89</a>  <em class="jxr_javadoccomment">     * Vector function for computing function theoretical values.</em>
<a class="jxr_linenumber" name="L90" href="#L90">90</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L91" href="#L91">91</a>      <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../org/apache/commons/math3/fitting/AbstractCurveFitter.html">TheoreticalValuesFunction</a> {
<a class="jxr_linenumber" name="L92" href="#L92">92</a>          <em class="jxr_javadoccomment">/** Function to fit. */</em>
<a class="jxr_linenumber" name="L93" href="#L93">93</a>          <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> <a href="../../../../../org/apache/commons/math3/analysis/ParametricUnivariateFunction.html">ParametricUnivariateFunction</a> f;
<a class="jxr_linenumber" name="L94" href="#L94">94</a>          <em class="jxr_javadoccomment">/** Observations. */</em>
<a class="jxr_linenumber" name="L95" href="#L95">95</a>          <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] points;
<a class="jxr_linenumber" name="L96" href="#L96">96</a>  
<a class="jxr_linenumber" name="L97" href="#L97">97</a>          <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L98" href="#L98">98</a>  <em class="jxr_javadoccomment">         * @param f function to fit.</em>
<a class="jxr_linenumber" name="L99" href="#L99">99</a>  <em class="jxr_javadoccomment">         * @param observations Observations.</em>
<a class="jxr_linenumber" name="L100" href="#L100">100</a> <em class="jxr_javadoccomment">         */</em>
<a class="jxr_linenumber" name="L101" href="#L101">101</a>         <strong class="jxr_keyword">public</strong> <a href="../../../../../org/apache/commons/math3/fitting/AbstractCurveFitter.html">TheoreticalValuesFunction</a>(<strong class="jxr_keyword">final</strong> <a href="../../../../../org/apache/commons/math3/analysis/ParametricUnivariateFunction.html">ParametricUnivariateFunction</a> f,
<a class="jxr_linenumber" name="L102" href="#L102">102</a>                                          <strong class="jxr_keyword">final</strong> Collection&lt;WeightedObservedPoint&gt; observations) {
<a class="jxr_linenumber" name="L103" href="#L103">103</a>             <strong class="jxr_keyword">this</strong>.f = f;
<a class="jxr_linenumber" name="L104" href="#L104">104</a> 
<a class="jxr_linenumber" name="L105" href="#L105">105</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> len = observations.size();
<a class="jxr_linenumber" name="L106" href="#L106">106</a>             <strong class="jxr_keyword">this</strong>.points = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[len];
<a class="jxr_linenumber" name="L107" href="#L107">107</a>             <strong class="jxr_keyword">int</strong> i = 0;
<a class="jxr_linenumber" name="L108" href="#L108">108</a>             <strong class="jxr_keyword">for</strong> (WeightedObservedPoint obs : observations) {
<a class="jxr_linenumber" name="L109" href="#L109">109</a>                 <strong class="jxr_keyword">this</strong>.points[i++] = obs.getX();
<a class="jxr_linenumber" name="L110" href="#L110">110</a>             }
<a class="jxr_linenumber" name="L111" href="#L111">111</a>         }
<a class="jxr_linenumber" name="L112" href="#L112">112</a> 
<a class="jxr_linenumber" name="L113" href="#L113">113</a>         <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L114" href="#L114">114</a> <em class="jxr_javadoccomment">         * @return the model function values.</em>
<a class="jxr_linenumber" name="L115" href="#L115">115</a> <em class="jxr_javadoccomment">         */</em>
<a class="jxr_linenumber" name="L116" href="#L116">116</a>         <strong class="jxr_keyword">public</strong> <a href="../../../../../org/apache/commons/math3/analysis/MultivariateVectorFunction.html">MultivariateVectorFunction</a> getModelFunction() {
<a class="jxr_linenumber" name="L117" href="#L117">117</a>             <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../org/apache/commons/math3/analysis/MultivariateVectorFunction.html">MultivariateVectorFunction</a>() {
<a class="jxr_linenumber" name="L118" href="#L118">118</a>                 <em class="jxr_javadoccomment">/** {@inheritDoc} */</em>
<a class="jxr_linenumber" name="L119" href="#L119">119</a>                 <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">double</strong>[] value(<strong class="jxr_keyword">double</strong>[] p) {
<a class="jxr_linenumber" name="L120" href="#L120">120</a>                     <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> len = points.length;
<a class="jxr_linenumber" name="L121" href="#L121">121</a>                     <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] values = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[len];
<a class="jxr_linenumber" name="L122" href="#L122">122</a>                     <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; len; i++) {
<a class="jxr_linenumber" name="L123" href="#L123">123</a>                         values[i] = f.value(points[i], p);
<a class="jxr_linenumber" name="L124" href="#L124">124</a>                     }
<a class="jxr_linenumber" name="L125" href="#L125">125</a> 
<a class="jxr_linenumber" name="L126" href="#L126">126</a>                     <strong class="jxr_keyword">return</strong> values;
<a class="jxr_linenumber" name="L127" href="#L127">127</a>                 }
<a class="jxr_linenumber" name="L128" href="#L128">128</a>             };
<a class="jxr_linenumber" name="L129" href="#L129">129</a>         }
<a class="jxr_linenumber" name="L130" href="#L130">130</a> 
<a class="jxr_linenumber" name="L131" href="#L131">131</a>         <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L132" href="#L132">132</a> <em class="jxr_javadoccomment">         * @return the model function Jacobian.</em>
<a class="jxr_linenumber" name="L133" href="#L133">133</a> <em class="jxr_javadoccomment">         */</em>
<a class="jxr_linenumber" name="L134" href="#L134">134</a>         <strong class="jxr_keyword">public</strong> <a href="../../../../../org/apache/commons/math3/analysis/MultivariateMatrixFunction.html">MultivariateMatrixFunction</a> getModelFunctionJacobian() {
<a class="jxr_linenumber" name="L135" href="#L135">135</a>             <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../org/apache/commons/math3/analysis/MultivariateMatrixFunction.html">MultivariateMatrixFunction</a>() {
<a class="jxr_linenumber" name="L136" href="#L136">136</a>                 <em class="jxr_javadoccomment">/** {@inheritDoc} */</em>
<a class="jxr_linenumber" name="L137" href="#L137">137</a>                 <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">double</strong>[][] value(<strong class="jxr_keyword">double</strong>[] p) {
<a class="jxr_linenumber" name="L138" href="#L138">138</a>                     <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> len = points.length;
<a class="jxr_linenumber" name="L139" href="#L139">139</a>                     <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[][] jacobian = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[len][];
<a class="jxr_linenumber" name="L140" href="#L140">140</a>                     <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; len; i++) {
<a class="jxr_linenumber" name="L141" href="#L141">141</a>                         jacobian[i] = f.gradient(points[i], p);
<a class="jxr_linenumber" name="L142" href="#L142">142</a>                     }
<a class="jxr_linenumber" name="L143" href="#L143">143</a>                     <strong class="jxr_keyword">return</strong> jacobian;
<a class="jxr_linenumber" name="L144" href="#L144">144</a>                 }
<a class="jxr_linenumber" name="L145" href="#L145">145</a>             };
<a class="jxr_linenumber" name="L146" href="#L146">146</a>         }
<a class="jxr_linenumber" name="L147" href="#L147">147</a>     }
<a class="jxr_linenumber" name="L148" href="#L148">148</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2003&#x2013;2016 <a href="http://www.apache.org/">The Apache Software Foundation</a>. All rights reserved.</div>
</body>
</html>
