<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span>package org.apache.commons.math3.stat.inference;<a name="line.17"></a>
<span class="sourceLineNo">018</span><a name="line.18"></a>
<span class="sourceLineNo">019</span>import org.apache.commons.math3.exception.DimensionMismatchException;<a name="line.19"></a>
<span class="sourceLineNo">020</span>import org.apache.commons.math3.exception.NotPositiveException;<a name="line.20"></a>
<span class="sourceLineNo">021</span>import org.apache.commons.math3.exception.NotStrictlyPositiveException;<a name="line.21"></a>
<span class="sourceLineNo">022</span>import org.apache.commons.math3.exception.OutOfRangeException;<a name="line.22"></a>
<span class="sourceLineNo">023</span>import org.apache.commons.math3.exception.ZeroException;<a name="line.23"></a>
<span class="sourceLineNo">024</span>import org.apache.commons.math3.util.FastMath;<a name="line.24"></a>
<span class="sourceLineNo">025</span>import org.junit.Assert;<a name="line.25"></a>
<span class="sourceLineNo">026</span>import org.junit.Test;<a name="line.26"></a>
<span class="sourceLineNo">027</span><a name="line.27"></a>
<span class="sourceLineNo">028</span>/**<a name="line.28"></a>
<span class="sourceLineNo">029</span> * Test cases for the GTest class.<a name="line.29"></a>
<span class="sourceLineNo">030</span> *<a name="line.30"></a>
<span class="sourceLineNo">031</span> * Data for the tests are from p64-69 in: McDonald, J.H. 2009. Handbook of<a name="line.31"></a>
<span class="sourceLineNo">032</span> * Biological Statistics (2nd ed.). Sparky House Publishing, Baltimore,<a name="line.32"></a>
<span class="sourceLineNo">033</span> * Maryland.<a name="line.33"></a>
<span class="sourceLineNo">034</span> *<a name="line.34"></a>
<span class="sourceLineNo">035</span> */<a name="line.35"></a>
<span class="sourceLineNo">036</span>public class GTestTest {<a name="line.36"></a>
<span class="sourceLineNo">037</span><a name="line.37"></a>
<span class="sourceLineNo">038</span>    protected GTest testStatistic = new GTest();<a name="line.38"></a>
<span class="sourceLineNo">039</span><a name="line.39"></a>
<span class="sourceLineNo">040</span>    @Test<a name="line.40"></a>
<span class="sourceLineNo">041</span>    public void testGTestGoodnesOfFit1() throws Exception {<a name="line.41"></a>
<span class="sourceLineNo">042</span>        final double[] exp = new double[]{<a name="line.42"></a>
<span class="sourceLineNo">043</span>            3d, 1d<a name="line.43"></a>
<span class="sourceLineNo">044</span>        };<a name="line.44"></a>
<span class="sourceLineNo">045</span><a name="line.45"></a>
<span class="sourceLineNo">046</span>        final long[] obs = new long[]{<a name="line.46"></a>
<span class="sourceLineNo">047</span>            423, 133<a name="line.47"></a>
<span class="sourceLineNo">048</span>        };<a name="line.48"></a>
<span class="sourceLineNo">049</span><a name="line.49"></a>
<span class="sourceLineNo">050</span>        Assert.assertEquals("G test statistic",<a name="line.50"></a>
<span class="sourceLineNo">051</span>                0.348721, testStatistic.g(exp, obs), 1E-6);<a name="line.51"></a>
<span class="sourceLineNo">052</span>        final double p_gtgf = testStatistic.gTest(exp, obs);<a name="line.52"></a>
<span class="sourceLineNo">053</span>        Assert.assertEquals("g-Test p-value", 0.55483, p_gtgf, 1E-5);<a name="line.53"></a>
<span class="sourceLineNo">054</span><a name="line.54"></a>
<span class="sourceLineNo">055</span>        Assert.assertFalse(testStatistic.gTest(exp, obs, 0.05));<a name="line.55"></a>
<span class="sourceLineNo">056</span>    }<a name="line.56"></a>
<span class="sourceLineNo">057</span><a name="line.57"></a>
<span class="sourceLineNo">058</span>    @Test<a name="line.58"></a>
<span class="sourceLineNo">059</span>    public void testGTestGoodnesOfFit2() throws Exception {<a name="line.59"></a>
<span class="sourceLineNo">060</span>        final double[] exp = new double[]{<a name="line.60"></a>
<span class="sourceLineNo">061</span>            0.54d, 0.40d, 0.05d, 0.01d<a name="line.61"></a>
<span class="sourceLineNo">062</span>        };<a name="line.62"></a>
<span class="sourceLineNo">063</span><a name="line.63"></a>
<span class="sourceLineNo">064</span>        final long[] obs = new long[]{<a name="line.64"></a>
<span class="sourceLineNo">065</span>            70, 79, 3, 4<a name="line.65"></a>
<span class="sourceLineNo">066</span>        };<a name="line.66"></a>
<span class="sourceLineNo">067</span>        Assert.assertEquals("G test statistic",<a name="line.67"></a>
<span class="sourceLineNo">068</span>                13.144799, testStatistic.g(exp, obs), 1E-6);<a name="line.68"></a>
<span class="sourceLineNo">069</span>        final double p_gtgf = testStatistic.gTest(exp, obs);<a name="line.69"></a>
<span class="sourceLineNo">070</span>        Assert.assertEquals("g-Test p-value", 0.004333, p_gtgf, 1E-5);<a name="line.70"></a>
<span class="sourceLineNo">071</span><a name="line.71"></a>
<span class="sourceLineNo">072</span>        Assert.assertTrue(testStatistic.gTest(exp, obs, 0.05));<a name="line.72"></a>
<span class="sourceLineNo">073</span>    }<a name="line.73"></a>
<span class="sourceLineNo">074</span><a name="line.74"></a>
<span class="sourceLineNo">075</span>    @Test<a name="line.75"></a>
<span class="sourceLineNo">076</span>    public void testGTestGoodnesOfFit3() throws Exception {<a name="line.76"></a>
<span class="sourceLineNo">077</span>        final double[] exp = new double[]{<a name="line.77"></a>
<span class="sourceLineNo">078</span>            0.167d, 0.483d, 0.350d<a name="line.78"></a>
<span class="sourceLineNo">079</span>        };<a name="line.79"></a>
<span class="sourceLineNo">080</span><a name="line.80"></a>
<span class="sourceLineNo">081</span>        final long[] obs = new long[]{<a name="line.81"></a>
<span class="sourceLineNo">082</span>            14, 21, 25<a name="line.82"></a>
<span class="sourceLineNo">083</span>        };<a name="line.83"></a>
<span class="sourceLineNo">084</span><a name="line.84"></a>
<span class="sourceLineNo">085</span>        Assert.assertEquals("G test statistic",<a name="line.85"></a>
<span class="sourceLineNo">086</span>                4.5554, testStatistic.g(exp, obs), 1E-4);<a name="line.86"></a>
<span class="sourceLineNo">087</span>        // Intrinisic (Hardy-Weinberg proportions) P-Value should be 0.033<a name="line.87"></a>
<span class="sourceLineNo">088</span>        final double p_gtgf = testStatistic.gTestIntrinsic(exp, obs);<a name="line.88"></a>
<span class="sourceLineNo">089</span>        Assert.assertEquals("g-Test p-value", 0.0328, p_gtgf, 1E-4);<a name="line.89"></a>
<span class="sourceLineNo">090</span><a name="line.90"></a>
<span class="sourceLineNo">091</span>        Assert.assertFalse(testStatistic.gTest(exp, obs, 0.05));<a name="line.91"></a>
<span class="sourceLineNo">092</span>    }<a name="line.92"></a>
<span class="sourceLineNo">093</span><a name="line.93"></a>
<span class="sourceLineNo">094</span>    @Test<a name="line.94"></a>
<span class="sourceLineNo">095</span>    public void testGTestIndependance1() throws Exception {<a name="line.95"></a>
<span class="sourceLineNo">096</span>        final long[] obs1 = new long[]{<a name="line.96"></a>
<span class="sourceLineNo">097</span>            268, 199, 42<a name="line.97"></a>
<span class="sourceLineNo">098</span>        };<a name="line.98"></a>
<span class="sourceLineNo">099</span><a name="line.99"></a>
<span class="sourceLineNo">100</span>        final long[] obs2 = new long[]{<a name="line.100"></a>
<span class="sourceLineNo">101</span>            807, 759, 184<a name="line.101"></a>
<span class="sourceLineNo">102</span>        };<a name="line.102"></a>
<span class="sourceLineNo">103</span><a name="line.103"></a>
<span class="sourceLineNo">104</span>        final double g = testStatistic.gDataSetsComparison(obs1, obs2);<a name="line.104"></a>
<span class="sourceLineNo">105</span><a name="line.105"></a>
<span class="sourceLineNo">106</span>        Assert.assertEquals("G test statistic",<a name="line.106"></a>
<span class="sourceLineNo">107</span>                7.3008170, g, 1E-6);<a name="line.107"></a>
<span class="sourceLineNo">108</span>        final double p_gti = testStatistic.gTestDataSetsComparison(obs1, obs2);<a name="line.108"></a>
<span class="sourceLineNo">109</span><a name="line.109"></a>
<span class="sourceLineNo">110</span>        Assert.assertEquals("g-Test p-value", 0.0259805, p_gti, 1E-6);<a name="line.110"></a>
<span class="sourceLineNo">111</span>        Assert.assertTrue(testStatistic.gTestDataSetsComparison(obs1, obs2, 0.05));<a name="line.111"></a>
<span class="sourceLineNo">112</span>    }<a name="line.112"></a>
<span class="sourceLineNo">113</span><a name="line.113"></a>
<span class="sourceLineNo">114</span>    @Test<a name="line.114"></a>
<span class="sourceLineNo">115</span>    public void testGTestIndependance2() throws Exception {<a name="line.115"></a>
<span class="sourceLineNo">116</span>        final long[] obs1 = new long[]{<a name="line.116"></a>
<span class="sourceLineNo">117</span>            127, 99, 264<a name="line.117"></a>
<span class="sourceLineNo">118</span>        };<a name="line.118"></a>
<span class="sourceLineNo">119</span><a name="line.119"></a>
<span class="sourceLineNo">120</span>        final long[] obs2 = new long[]{<a name="line.120"></a>
<span class="sourceLineNo">121</span>            116, 67, 161<a name="line.121"></a>
<span class="sourceLineNo">122</span>        };<a name="line.122"></a>
<span class="sourceLineNo">123</span><a name="line.123"></a>
<span class="sourceLineNo">124</span>        final double g = testStatistic.gDataSetsComparison(obs1, obs2);<a name="line.124"></a>
<span class="sourceLineNo">125</span><a name="line.125"></a>
<span class="sourceLineNo">126</span>        Assert.assertEquals("G test statistic",<a name="line.126"></a>
<span class="sourceLineNo">127</span>                6.227288, g, 1E-6);<a name="line.127"></a>
<span class="sourceLineNo">128</span>        final double p_gti = testStatistic.gTestDataSetsComparison(obs1, obs2);<a name="line.128"></a>
<span class="sourceLineNo">129</span><a name="line.129"></a>
<span class="sourceLineNo">130</span>        Assert.assertEquals("g-Test p-value", 0.04443, p_gti, 1E-5);<a name="line.130"></a>
<span class="sourceLineNo">131</span>        Assert.assertTrue(testStatistic.gTestDataSetsComparison(obs1, obs2, 0.05));<a name="line.131"></a>
<span class="sourceLineNo">132</span>    }<a name="line.132"></a>
<span class="sourceLineNo">133</span><a name="line.133"></a>
<span class="sourceLineNo">134</span>    @Test<a name="line.134"></a>
<span class="sourceLineNo">135</span>    public void testGTestIndependance3() throws Exception {<a name="line.135"></a>
<span class="sourceLineNo">136</span>        final long[] obs1 = new long[]{<a name="line.136"></a>
<span class="sourceLineNo">137</span>            190, 149<a name="line.137"></a>
<span class="sourceLineNo">138</span>        };<a name="line.138"></a>
<span class="sourceLineNo">139</span><a name="line.139"></a>
<span class="sourceLineNo">140</span>        final long[] obs2 = new long[]{<a name="line.140"></a>
<span class="sourceLineNo">141</span>            42, 49<a name="line.141"></a>
<span class="sourceLineNo">142</span>        };<a name="line.142"></a>
<span class="sourceLineNo">143</span><a name="line.143"></a>
<span class="sourceLineNo">144</span>        final double g = testStatistic.gDataSetsComparison(obs1, obs2);<a name="line.144"></a>
<span class="sourceLineNo">145</span>        Assert.assertEquals("G test statistic",<a name="line.145"></a>
<span class="sourceLineNo">146</span>                2.8187, g, 1E-4);<a name="line.146"></a>
<span class="sourceLineNo">147</span>        final double p_gti = testStatistic.gTestDataSetsComparison(obs1, obs2);<a name="line.147"></a>
<span class="sourceLineNo">148</span>        Assert.assertEquals("g-Test p-value", 0.09317325, p_gti, 1E-6);<a name="line.148"></a>
<span class="sourceLineNo">149</span><a name="line.149"></a>
<span class="sourceLineNo">150</span>        Assert.assertFalse(testStatistic.gTestDataSetsComparison(obs1, obs2, 0.05));<a name="line.150"></a>
<span class="sourceLineNo">151</span>    }<a name="line.151"></a>
<span class="sourceLineNo">152</span><a name="line.152"></a>
<span class="sourceLineNo">153</span>    @Test<a name="line.153"></a>
<span class="sourceLineNo">154</span>    public void testGTestSetsComparisonBadCounts() {<a name="line.154"></a>
<span class="sourceLineNo">155</span>        long[] observed1 = {10, -1, 12, 10, 15};<a name="line.155"></a>
<span class="sourceLineNo">156</span>        long[] observed2 = {15, 10, 10, 15, 5};<a name="line.156"></a>
<span class="sourceLineNo">157</span>        try {<a name="line.157"></a>
<span class="sourceLineNo">158</span>            testStatistic.gTestDataSetsComparison(<a name="line.158"></a>
<span class="sourceLineNo">159</span>                    observed1, observed2);<a name="line.159"></a>
<span class="sourceLineNo">160</span>            Assert.fail("Expecting NotPositiveException - negative count");<a name="line.160"></a>
<span class="sourceLineNo">161</span>        } catch (NotPositiveException ex) {<a name="line.161"></a>
<span class="sourceLineNo">162</span>            // expected<a name="line.162"></a>
<span class="sourceLineNo">163</span>        }<a name="line.163"></a>
<span class="sourceLineNo">164</span>        long[] observed3 = {10, 0, 12, 10, 15};<a name="line.164"></a>
<span class="sourceLineNo">165</span>        long[] observed4 = {15, 0, 10, 15, 5};<a name="line.165"></a>
<span class="sourceLineNo">166</span>        try {<a name="line.166"></a>
<span class="sourceLineNo">167</span>            testStatistic.gTestDataSetsComparison(<a name="line.167"></a>
<span class="sourceLineNo">168</span>                    observed3, observed4);<a name="line.168"></a>
<span class="sourceLineNo">169</span>            Assert.fail("Expecting ZeroException - double 0's");<a name="line.169"></a>
<span class="sourceLineNo">170</span>        } catch (ZeroException ex) {<a name="line.170"></a>
<span class="sourceLineNo">171</span>            // expected<a name="line.171"></a>
<span class="sourceLineNo">172</span>        }<a name="line.172"></a>
<span class="sourceLineNo">173</span>        long[] observed5 = {10, 10, 12, 10, 15};<a name="line.173"></a>
<span class="sourceLineNo">174</span>        long[] observed6 = {0, 0, 0, 0, 0};<a name="line.174"></a>
<span class="sourceLineNo">175</span>        try {<a name="line.175"></a>
<span class="sourceLineNo">176</span>            testStatistic.gTestDataSetsComparison(<a name="line.176"></a>
<span class="sourceLineNo">177</span>                    observed5, observed6);<a name="line.177"></a>
<span class="sourceLineNo">178</span>            Assert.fail("Expecting ZeroException - vanishing counts");<a name="line.178"></a>
<span class="sourceLineNo">179</span>        } catch (ZeroException ex) {<a name="line.179"></a>
<span class="sourceLineNo">180</span>            // expected<a name="line.180"></a>
<span class="sourceLineNo">181</span>        }<a name="line.181"></a>
<span class="sourceLineNo">182</span>    }<a name="line.182"></a>
<span class="sourceLineNo">183</span>    <a name="line.183"></a>
<span class="sourceLineNo">184</span>    @Test<a name="line.184"></a>
<span class="sourceLineNo">185</span>    public void testUnmatchedArrays() {<a name="line.185"></a>
<span class="sourceLineNo">186</span>        final long[] observed = { 0, 1, 2, 3 };<a name="line.186"></a>
<span class="sourceLineNo">187</span>        final double[] expected = { 1, 1, 2 };<a name="line.187"></a>
<span class="sourceLineNo">188</span>        final long[] observed2 = {3, 4};<a name="line.188"></a>
<span class="sourceLineNo">189</span>        try {<a name="line.189"></a>
<span class="sourceLineNo">190</span>            testStatistic.gTest(expected, observed);<a name="line.190"></a>
<span class="sourceLineNo">191</span>            Assert.fail("arrays have different lengths, DimensionMismatchException expected");<a name="line.191"></a>
<span class="sourceLineNo">192</span>        } catch (DimensionMismatchException ex) {<a name="line.192"></a>
<span class="sourceLineNo">193</span>            // expected<a name="line.193"></a>
<span class="sourceLineNo">194</span>        }<a name="line.194"></a>
<span class="sourceLineNo">195</span>        try {<a name="line.195"></a>
<span class="sourceLineNo">196</span>            testStatistic.gTestDataSetsComparison(observed, observed2);<a name="line.196"></a>
<span class="sourceLineNo">197</span>            Assert.fail("arrays have different lengths, DimensionMismatchException expected");<a name="line.197"></a>
<span class="sourceLineNo">198</span>        } catch (DimensionMismatchException ex) {<a name="line.198"></a>
<span class="sourceLineNo">199</span>            // expected<a name="line.199"></a>
<span class="sourceLineNo">200</span>        }<a name="line.200"></a>
<span class="sourceLineNo">201</span>    }<a name="line.201"></a>
<span class="sourceLineNo">202</span>    <a name="line.202"></a>
<span class="sourceLineNo">203</span>    @Test<a name="line.203"></a>
<span class="sourceLineNo">204</span>    public void testNegativeObservedCounts() {<a name="line.204"></a>
<span class="sourceLineNo">205</span>        final long[] observed = { 0, 1, 2, -3 };<a name="line.205"></a>
<span class="sourceLineNo">206</span>        final double[] expected = { 1, 1, 2, 3};<a name="line.206"></a>
<span class="sourceLineNo">207</span>        final long[] observed2 = {3, 4, 5, 0};<a name="line.207"></a>
<span class="sourceLineNo">208</span>        try {<a name="line.208"></a>
<span class="sourceLineNo">209</span>            testStatistic.gTest(expected, observed);<a name="line.209"></a>
<span class="sourceLineNo">210</span>            Assert.fail("negative observed count, NotPositiveException expected");<a name="line.210"></a>
<span class="sourceLineNo">211</span>        } catch (NotPositiveException ex) {<a name="line.211"></a>
<span class="sourceLineNo">212</span>            // expected<a name="line.212"></a>
<span class="sourceLineNo">213</span>        }<a name="line.213"></a>
<span class="sourceLineNo">214</span>        try {<a name="line.214"></a>
<span class="sourceLineNo">215</span>            testStatistic.gTestDataSetsComparison(observed, observed2);<a name="line.215"></a>
<span class="sourceLineNo">216</span>            Assert.fail("negative observed count, NotPositiveException expected");<a name="line.216"></a>
<span class="sourceLineNo">217</span>        } catch (NotPositiveException ex) {<a name="line.217"></a>
<span class="sourceLineNo">218</span>            // expected<a name="line.218"></a>
<span class="sourceLineNo">219</span>        } <a name="line.219"></a>
<span class="sourceLineNo">220</span>    }<a name="line.220"></a>
<span class="sourceLineNo">221</span>    <a name="line.221"></a>
<span class="sourceLineNo">222</span>    @Test<a name="line.222"></a>
<span class="sourceLineNo">223</span>    public void testZeroExpectedCounts() {<a name="line.223"></a>
<span class="sourceLineNo">224</span>        final long[] observed = { 0, 1, 2, -3 };<a name="line.224"></a>
<span class="sourceLineNo">225</span>        final double[] expected = { 1, 0, 2, 3};<a name="line.225"></a>
<span class="sourceLineNo">226</span>        try {<a name="line.226"></a>
<span class="sourceLineNo">227</span>            testStatistic.gTest(expected, observed);<a name="line.227"></a>
<span class="sourceLineNo">228</span>            Assert.fail("zero expected count, NotStrictlyPositiveException expected");<a name="line.228"></a>
<span class="sourceLineNo">229</span>        } catch (NotStrictlyPositiveException ex) {<a name="line.229"></a>
<span class="sourceLineNo">230</span>            // expected<a name="line.230"></a>
<span class="sourceLineNo">231</span>        }<a name="line.231"></a>
<span class="sourceLineNo">232</span>    }<a name="line.232"></a>
<span class="sourceLineNo">233</span>    <a name="line.233"></a>
<span class="sourceLineNo">234</span>    @Test<a name="line.234"></a>
<span class="sourceLineNo">235</span>    public void testBadAlpha() {<a name="line.235"></a>
<span class="sourceLineNo">236</span>        final long[] observed = { 0, 1, 2, 3 };<a name="line.236"></a>
<span class="sourceLineNo">237</span>        final double[] expected = { 1, 2, 2, 3};<a name="line.237"></a>
<span class="sourceLineNo">238</span>        final long[] observed2 = { 0, 2, 2, 3 };<a name="line.238"></a>
<span class="sourceLineNo">239</span>        try {<a name="line.239"></a>
<span class="sourceLineNo">240</span>            testStatistic.gTest(expected, observed, 0.8);<a name="line.240"></a>
<span class="sourceLineNo">241</span>            Assert.fail("zero expected count, NotStrictlyPositiveException expected");<a name="line.241"></a>
<span class="sourceLineNo">242</span>        } catch (OutOfRangeException ex) {<a name="line.242"></a>
<span class="sourceLineNo">243</span>            // expected<a name="line.243"></a>
<span class="sourceLineNo">244</span>        }<a name="line.244"></a>
<span class="sourceLineNo">245</span>        try {<a name="line.245"></a>
<span class="sourceLineNo">246</span>            testStatistic.gTestDataSetsComparison(observed, observed2, -0.5);<a name="line.246"></a>
<span class="sourceLineNo">247</span>            Assert.fail("zero expected count, NotStrictlyPositiveException expected");<a name="line.247"></a>
<span class="sourceLineNo">248</span>        } catch (OutOfRangeException ex) {<a name="line.248"></a>
<span class="sourceLineNo">249</span>            // expected<a name="line.249"></a>
<span class="sourceLineNo">250</span>        }  <a name="line.250"></a>
<span class="sourceLineNo">251</span>    }<a name="line.251"></a>
<span class="sourceLineNo">252</span>    <a name="line.252"></a>
<span class="sourceLineNo">253</span>    @Test<a name="line.253"></a>
<span class="sourceLineNo">254</span>    public void testScaling() {<a name="line.254"></a>
<span class="sourceLineNo">255</span>      final long[] observed = {9, 11, 10, 8, 12};<a name="line.255"></a>
<span class="sourceLineNo">256</span>      final double[] expected1 = {10, 10, 10, 10, 10};<a name="line.256"></a>
<span class="sourceLineNo">257</span>      final double[] expected2 = {1000, 1000, 1000, 1000, 1000};<a name="line.257"></a>
<span class="sourceLineNo">258</span>      final double[] expected3 = {1, 1, 1, 1, 1};<a name="line.258"></a>
<span class="sourceLineNo">259</span>      final double tol = 1E-15;<a name="line.259"></a>
<span class="sourceLineNo">260</span>      Assert.assertEquals(<a name="line.260"></a>
<span class="sourceLineNo">261</span>              testStatistic.gTest(expected1, observed),<a name="line.261"></a>
<span class="sourceLineNo">262</span>              testStatistic.gTest(expected2, observed),<a name="line.262"></a>
<span class="sourceLineNo">263</span>              tol);<a name="line.263"></a>
<span class="sourceLineNo">264</span>      Assert.assertEquals(<a name="line.264"></a>
<span class="sourceLineNo">265</span>              testStatistic.gTest(expected1, observed),<a name="line.265"></a>
<span class="sourceLineNo">266</span>              testStatistic.gTest(expected3, observed),<a name="line.266"></a>
<span class="sourceLineNo">267</span>              tol);<a name="line.267"></a>
<span class="sourceLineNo">268</span>    }<a name="line.268"></a>
<span class="sourceLineNo">269</span><a name="line.269"></a>
<span class="sourceLineNo">270</span>    @Test<a name="line.270"></a>
<span class="sourceLineNo">271</span>    public void testRootLogLikelihood() {<a name="line.271"></a>
<span class="sourceLineNo">272</span>        // positive where k11 is bigger than expected.<a name="line.272"></a>
<span class="sourceLineNo">273</span>        Assert.assertTrue(testStatistic.rootLogLikelihoodRatio(904, 21060, 1144, 283012) &gt; 0.0);<a name="line.273"></a>
<span class="sourceLineNo">274</span><a name="line.274"></a>
<span class="sourceLineNo">275</span>        // negative because k11 is lower than expected<a name="line.275"></a>
<span class="sourceLineNo">276</span>        Assert.assertTrue(testStatistic.rootLogLikelihoodRatio(36, 21928, 60280, 623876) &lt; 0.0);<a name="line.276"></a>
<span class="sourceLineNo">277</span><a name="line.277"></a>
<span class="sourceLineNo">278</span>        Assert.assertEquals(FastMath.sqrt(2.772589), testStatistic.rootLogLikelihoodRatio(1, 0, 0, 1), 0.000001);<a name="line.278"></a>
<span class="sourceLineNo">279</span>        Assert.assertEquals(-FastMath.sqrt(2.772589), testStatistic.rootLogLikelihoodRatio(0, 1, 1, 0), 0.000001);<a name="line.279"></a>
<span class="sourceLineNo">280</span>        Assert.assertEquals(FastMath.sqrt(27.72589), testStatistic.rootLogLikelihoodRatio(10, 0, 0, 10), 0.00001);<a name="line.280"></a>
<span class="sourceLineNo">281</span><a name="line.281"></a>
<span class="sourceLineNo">282</span>        Assert.assertEquals(FastMath.sqrt(39.33052), testStatistic.rootLogLikelihoodRatio(5, 1995, 0, 100000), 0.00001);<a name="line.282"></a>
<span class="sourceLineNo">283</span>        Assert.assertEquals(-FastMath.sqrt(39.33052), testStatistic.rootLogLikelihoodRatio(0, 100000, 5, 1995), 0.00001);<a name="line.283"></a>
<span class="sourceLineNo">284</span><a name="line.284"></a>
<span class="sourceLineNo">285</span>        Assert.assertEquals(FastMath.sqrt(4730.737), testStatistic.rootLogLikelihoodRatio(1000, 1995, 1000, 100000), 0.001);<a name="line.285"></a>
<span class="sourceLineNo">286</span>        Assert.assertEquals(-FastMath.sqrt(4730.737), testStatistic.rootLogLikelihoodRatio(1000, 100000, 1000, 1995), 0.001);<a name="line.286"></a>
<span class="sourceLineNo">287</span><a name="line.287"></a>
<span class="sourceLineNo">288</span>        Assert.assertEquals(FastMath.sqrt(5734.343), testStatistic.rootLogLikelihoodRatio(1000, 1000, 1000, 100000), 0.001);<a name="line.288"></a>
<span class="sourceLineNo">289</span>        Assert.assertEquals(FastMath.sqrt(5714.932), testStatistic.rootLogLikelihoodRatio(1000, 1000, 1000, 99000), 0.001);<a name="line.289"></a>
<span class="sourceLineNo">290</span>    }<a name="line.290"></a>
<span class="sourceLineNo">291</span>}<a name="line.291"></a>




























































</pre>
</div>
</body>
</html>
