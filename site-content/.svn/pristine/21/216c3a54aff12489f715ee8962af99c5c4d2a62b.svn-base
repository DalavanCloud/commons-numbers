<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements. See the NOTICE file distributed with this<a name="line.3"></a>
<span class="sourceLineNo">004</span> * work for additional information regarding copyright ownership. The ASF<a name="line.4"></a>
<span class="sourceLineNo">005</span> * licenses this file to You under the Apache License, Version 2.0 (the<a name="line.5"></a>
<span class="sourceLineNo">006</span> * "License"); you may not use this file except in compliance with the License.<a name="line.6"></a>
<span class="sourceLineNo">007</span> * You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law<a name="line.8"></a>
<span class="sourceLineNo">009</span> * or agreed to in writing, software distributed under the License is<a name="line.9"></a>
<span class="sourceLineNo">010</span> * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY<a name="line.10"></a>
<span class="sourceLineNo">011</span> * KIND, either express or implied. See the License for the specific language<a name="line.11"></a>
<span class="sourceLineNo">012</span> * governing permissions and limitations under the License.<a name="line.12"></a>
<span class="sourceLineNo">013</span> */<a name="line.13"></a>
<span class="sourceLineNo">014</span>package org.apache.commons.math3.optim.nonlinear.vector.jacobian;<a name="line.14"></a>
<span class="sourceLineNo">015</span><a name="line.15"></a>
<span class="sourceLineNo">016</span>import java.io.IOException;<a name="line.16"></a>
<span class="sourceLineNo">017</span>import java.util.Arrays;<a name="line.17"></a>
<span class="sourceLineNo">018</span><a name="line.18"></a>
<span class="sourceLineNo">019</span>import org.apache.commons.math3.optim.PointVectorValuePair;<a name="line.19"></a>
<span class="sourceLineNo">020</span>import org.apache.commons.math3.optim.InitialGuess;<a name="line.20"></a>
<span class="sourceLineNo">021</span>import org.apache.commons.math3.optim.MaxEval;<a name="line.21"></a>
<span class="sourceLineNo">022</span>import org.apache.commons.math3.optim.nonlinear.vector.Target;<a name="line.22"></a>
<span class="sourceLineNo">023</span>import org.apache.commons.math3.optim.nonlinear.vector.Weight;<a name="line.23"></a>
<span class="sourceLineNo">024</span>import org.apache.commons.math3.util.FastMath;<a name="line.24"></a>
<span class="sourceLineNo">025</span>import org.junit.Test;<a name="line.25"></a>
<span class="sourceLineNo">026</span>import org.junit.Assert;<a name="line.26"></a>
<span class="sourceLineNo">027</span><a name="line.27"></a>
<span class="sourceLineNo">028</span>@Deprecated<a name="line.28"></a>
<span class="sourceLineNo">029</span>public class AbstractLeastSquaresOptimizerTest {<a name="line.29"></a>
<span class="sourceLineNo">030</span><a name="line.30"></a>
<span class="sourceLineNo">031</span>    public static AbstractLeastSquaresOptimizer createOptimizer() {<a name="line.31"></a>
<span class="sourceLineNo">032</span>        return new AbstractLeastSquaresOptimizer(null) {<a name="line.32"></a>
<span class="sourceLineNo">033</span><a name="line.33"></a>
<span class="sourceLineNo">034</span>            @Override<a name="line.34"></a>
<span class="sourceLineNo">035</span>            protected PointVectorValuePair doOptimize() {<a name="line.35"></a>
<span class="sourceLineNo">036</span>                final double[] params = getStartPoint();<a name="line.36"></a>
<span class="sourceLineNo">037</span>                final double[] res = computeResiduals(computeObjectiveValue(params));<a name="line.37"></a>
<span class="sourceLineNo">038</span>                setCost(computeCost(res));<a name="line.38"></a>
<span class="sourceLineNo">039</span>                return new PointVectorValuePair(params, null);<a name="line.39"></a>
<span class="sourceLineNo">040</span>            }<a name="line.40"></a>
<span class="sourceLineNo">041</span>        };<a name="line.41"></a>
<span class="sourceLineNo">042</span>    }<a name="line.42"></a>
<span class="sourceLineNo">043</span><a name="line.43"></a>
<span class="sourceLineNo">044</span>    @Test<a name="line.44"></a>
<span class="sourceLineNo">045</span>    public void testGetChiSquare() throws IOException {<a name="line.45"></a>
<span class="sourceLineNo">046</span>        final StatisticalReferenceDataset dataset<a name="line.46"></a>
<span class="sourceLineNo">047</span>            = StatisticalReferenceDatasetFactory.createKirby2();<a name="line.47"></a>
<span class="sourceLineNo">048</span>        final AbstractLeastSquaresOptimizer optimizer = createOptimizer();<a name="line.48"></a>
<span class="sourceLineNo">049</span>        final double[] a = dataset.getParameters();<a name="line.49"></a>
<span class="sourceLineNo">050</span>        final double[] y = dataset.getData()[1];<a name="line.50"></a>
<span class="sourceLineNo">051</span>        final double[] w = new double[y.length];<a name="line.51"></a>
<span class="sourceLineNo">052</span>        Arrays.fill(w, 1.0);<a name="line.52"></a>
<span class="sourceLineNo">053</span><a name="line.53"></a>
<span class="sourceLineNo">054</span>        StatisticalReferenceDataset.LeastSquaresProblem problem<a name="line.54"></a>
<span class="sourceLineNo">055</span>            = dataset.getLeastSquaresProblem();<a name="line.55"></a>
<span class="sourceLineNo">056</span><a name="line.56"></a>
<span class="sourceLineNo">057</span>        optimizer.optimize(new MaxEval(1),<a name="line.57"></a>
<span class="sourceLineNo">058</span>                           problem.getModelFunction(),<a name="line.58"></a>
<span class="sourceLineNo">059</span>                           problem.getModelFunctionJacobian(),<a name="line.59"></a>
<span class="sourceLineNo">060</span>                           new Target(y),<a name="line.60"></a>
<span class="sourceLineNo">061</span>                           new Weight(w),<a name="line.61"></a>
<span class="sourceLineNo">062</span>                           new InitialGuess(a));<a name="line.62"></a>
<span class="sourceLineNo">063</span>        final double expected = dataset.getResidualSumOfSquares();<a name="line.63"></a>
<span class="sourceLineNo">064</span>        final double actual = optimizer.getChiSquare();<a name="line.64"></a>
<span class="sourceLineNo">065</span>        Assert.assertEquals(dataset.getName(), expected, actual,<a name="line.65"></a>
<span class="sourceLineNo">066</span>                            1E-11 * expected);<a name="line.66"></a>
<span class="sourceLineNo">067</span>    }<a name="line.67"></a>
<span class="sourceLineNo">068</span><a name="line.68"></a>
<span class="sourceLineNo">069</span>    @Test<a name="line.69"></a>
<span class="sourceLineNo">070</span>    public void testGetRMS() throws IOException {<a name="line.70"></a>
<span class="sourceLineNo">071</span>        final StatisticalReferenceDataset dataset<a name="line.71"></a>
<span class="sourceLineNo">072</span>            = StatisticalReferenceDatasetFactory.createKirby2();<a name="line.72"></a>
<span class="sourceLineNo">073</span>        final AbstractLeastSquaresOptimizer optimizer = createOptimizer();<a name="line.73"></a>
<span class="sourceLineNo">074</span>        final double[] a = dataset.getParameters();<a name="line.74"></a>
<span class="sourceLineNo">075</span>        final double[] y = dataset.getData()[1];<a name="line.75"></a>
<span class="sourceLineNo">076</span>        final double[] w = new double[y.length];<a name="line.76"></a>
<span class="sourceLineNo">077</span>        Arrays.fill(w, 1);<a name="line.77"></a>
<span class="sourceLineNo">078</span><a name="line.78"></a>
<span class="sourceLineNo">079</span>        StatisticalReferenceDataset.LeastSquaresProblem problem<a name="line.79"></a>
<span class="sourceLineNo">080</span>            = dataset.getLeastSquaresProblem();<a name="line.80"></a>
<span class="sourceLineNo">081</span><a name="line.81"></a>
<span class="sourceLineNo">082</span>        optimizer.optimize(new MaxEval(1),<a name="line.82"></a>
<span class="sourceLineNo">083</span>                           problem.getModelFunction(),<a name="line.83"></a>
<span class="sourceLineNo">084</span>                           problem.getModelFunctionJacobian(),<a name="line.84"></a>
<span class="sourceLineNo">085</span>                           new Target(y),<a name="line.85"></a>
<span class="sourceLineNo">086</span>                           new Weight(w),<a name="line.86"></a>
<span class="sourceLineNo">087</span>                           new InitialGuess(a));<a name="line.87"></a>
<span class="sourceLineNo">088</span><a name="line.88"></a>
<span class="sourceLineNo">089</span>        final double expected = FastMath<a name="line.89"></a>
<span class="sourceLineNo">090</span>            .sqrt(dataset.getResidualSumOfSquares() /<a name="line.90"></a>
<span class="sourceLineNo">091</span>                  dataset.getNumObservations());<a name="line.91"></a>
<span class="sourceLineNo">092</span>        final double actual = optimizer.getRMS();<a name="line.92"></a>
<span class="sourceLineNo">093</span>        Assert.assertEquals(dataset.getName(), expected, actual,<a name="line.93"></a>
<span class="sourceLineNo">094</span>                            1E-11 * expected);<a name="line.94"></a>
<span class="sourceLineNo">095</span>    }<a name="line.95"></a>
<span class="sourceLineNo">096</span><a name="line.96"></a>
<span class="sourceLineNo">097</span>    @Test<a name="line.97"></a>
<span class="sourceLineNo">098</span>    public void testComputeSigma() throws IOException {<a name="line.98"></a>
<span class="sourceLineNo">099</span>        final StatisticalReferenceDataset dataset<a name="line.99"></a>
<span class="sourceLineNo">100</span>            = StatisticalReferenceDatasetFactory.createKirby2();<a name="line.100"></a>
<span class="sourceLineNo">101</span>        final AbstractLeastSquaresOptimizer optimizer = createOptimizer();<a name="line.101"></a>
<span class="sourceLineNo">102</span>        final double[] a = dataset.getParameters();<a name="line.102"></a>
<span class="sourceLineNo">103</span>        final double[] y = dataset.getData()[1];<a name="line.103"></a>
<span class="sourceLineNo">104</span>        final double[] w = new double[y.length];<a name="line.104"></a>
<span class="sourceLineNo">105</span>        Arrays.fill(w, 1);<a name="line.105"></a>
<span class="sourceLineNo">106</span><a name="line.106"></a>
<span class="sourceLineNo">107</span>        StatisticalReferenceDataset.LeastSquaresProblem problem<a name="line.107"></a>
<span class="sourceLineNo">108</span>            = dataset.getLeastSquaresProblem();<a name="line.108"></a>
<span class="sourceLineNo">109</span><a name="line.109"></a>
<span class="sourceLineNo">110</span>        final PointVectorValuePair optimum<a name="line.110"></a>
<span class="sourceLineNo">111</span>            = optimizer.optimize(new MaxEval(1),<a name="line.111"></a>
<span class="sourceLineNo">112</span>                                 problem.getModelFunction(),<a name="line.112"></a>
<span class="sourceLineNo">113</span>                                 problem.getModelFunctionJacobian(),<a name="line.113"></a>
<span class="sourceLineNo">114</span>                                 new Target(y),<a name="line.114"></a>
<span class="sourceLineNo">115</span>                                 new Weight(w),<a name="line.115"></a>
<span class="sourceLineNo">116</span>                                 new InitialGuess(a));<a name="line.116"></a>
<span class="sourceLineNo">117</span><a name="line.117"></a>
<span class="sourceLineNo">118</span>        final double[] sig = optimizer.computeSigma(optimum.getPoint(), 1e-14);<a name="line.118"></a>
<span class="sourceLineNo">119</span><a name="line.119"></a>
<span class="sourceLineNo">120</span>        final int dof = y.length - a.length;<a name="line.120"></a>
<span class="sourceLineNo">121</span>        final double[] expected = dataset.getParametersStandardDeviations();<a name="line.121"></a>
<span class="sourceLineNo">122</span>        for (int i = 0; i &lt; sig.length; i++) {<a name="line.122"></a>
<span class="sourceLineNo">123</span>            final double actual = FastMath.sqrt(optimizer.getChiSquare() / dof) * sig[i];<a name="line.123"></a>
<span class="sourceLineNo">124</span>            Assert.assertEquals(dataset.getName() + ", parameter #" + i,<a name="line.124"></a>
<span class="sourceLineNo">125</span>                                expected[i], actual, 1e-6 * expected[i]);<a name="line.125"></a>
<span class="sourceLineNo">126</span>        }<a name="line.126"></a>
<span class="sourceLineNo">127</span>    }<a name="line.127"></a>
<span class="sourceLineNo">128</span>}<a name="line.128"></a>




























































</pre>
</div>
</body>
</html>
