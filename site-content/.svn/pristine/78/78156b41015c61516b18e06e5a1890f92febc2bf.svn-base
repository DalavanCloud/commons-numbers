<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements. See the NOTICE file distributed with this<a name="line.3"></a>
<span class="sourceLineNo">004</span> * work for additional information regarding copyright ownership. The ASF<a name="line.4"></a>
<span class="sourceLineNo">005</span> * licenses this file to You under the Apache License, Version 2.0 (the<a name="line.5"></a>
<span class="sourceLineNo">006</span> * "License"); you may not use this file except in compliance with the License.<a name="line.6"></a>
<span class="sourceLineNo">007</span> * You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law<a name="line.8"></a>
<span class="sourceLineNo">009</span> * or agreed to in writing, software distributed under the License is<a name="line.9"></a>
<span class="sourceLineNo">010</span> * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY<a name="line.10"></a>
<span class="sourceLineNo">011</span> * KIND, either express or implied. See the License for the specific language<a name="line.11"></a>
<span class="sourceLineNo">012</span> * governing permissions and limitations under the License.<a name="line.12"></a>
<span class="sourceLineNo">013</span> */<a name="line.13"></a>
<span class="sourceLineNo">014</span>package org.apache.commons.math3.distribution;<a name="line.14"></a>
<span class="sourceLineNo">015</span><a name="line.15"></a>
<span class="sourceLineNo">016</span>import org.junit.Assert;<a name="line.16"></a>
<span class="sourceLineNo">017</span>import org.junit.Test;<a name="line.17"></a>
<span class="sourceLineNo">018</span><a name="line.18"></a>
<span class="sourceLineNo">019</span>/**<a name="line.19"></a>
<span class="sourceLineNo">020</span> * Test cases for BinomialDistribution. Extends IntegerDistributionAbstractTest.<a name="line.20"></a>
<span class="sourceLineNo">021</span> * See class javadoc for IntegerDistributionAbstractTest for details.<a name="line.21"></a>
<span class="sourceLineNo">022</span> *<a name="line.22"></a>
<span class="sourceLineNo">023</span> */<a name="line.23"></a>
<span class="sourceLineNo">024</span>public class BinomialDistributionTest extends IntegerDistributionAbstractTest {<a name="line.24"></a>
<span class="sourceLineNo">025</span><a name="line.25"></a>
<span class="sourceLineNo">026</span>    /**<a name="line.26"></a>
<span class="sourceLineNo">027</span>     * Constructor to override default tolerance.<a name="line.27"></a>
<span class="sourceLineNo">028</span>     */<a name="line.28"></a>
<span class="sourceLineNo">029</span>    public BinomialDistributionTest() {<a name="line.29"></a>
<span class="sourceLineNo">030</span>        setTolerance(1e-12);<a name="line.30"></a>
<span class="sourceLineNo">031</span>    }<a name="line.31"></a>
<span class="sourceLineNo">032</span>    <a name="line.32"></a>
<span class="sourceLineNo">033</span>    // -------------- Implementations for abstract methods<a name="line.33"></a>
<span class="sourceLineNo">034</span>    // -----------------------<a name="line.34"></a>
<span class="sourceLineNo">035</span><a name="line.35"></a>
<span class="sourceLineNo">036</span>    /** Creates the default discrete distribution instance to use in tests. */<a name="line.36"></a>
<span class="sourceLineNo">037</span>    @Override<a name="line.37"></a>
<span class="sourceLineNo">038</span>    public IntegerDistribution makeDistribution() {<a name="line.38"></a>
<span class="sourceLineNo">039</span>        return new BinomialDistribution(10, 0.70);<a name="line.39"></a>
<span class="sourceLineNo">040</span>    }<a name="line.40"></a>
<span class="sourceLineNo">041</span><a name="line.41"></a>
<span class="sourceLineNo">042</span>    /** Creates the default probability density test input values. */<a name="line.42"></a>
<span class="sourceLineNo">043</span>    @Override<a name="line.43"></a>
<span class="sourceLineNo">044</span>    public int[] makeDensityTestPoints() {<a name="line.44"></a>
<span class="sourceLineNo">045</span>        return new int[] { -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 };<a name="line.45"></a>
<span class="sourceLineNo">046</span>    }<a name="line.46"></a>
<span class="sourceLineNo">047</span><a name="line.47"></a>
<span class="sourceLineNo">048</span>    /** <a name="line.48"></a>
<span class="sourceLineNo">049</span>     * Creates the default probability density test expected values.<a name="line.49"></a>
<span class="sourceLineNo">050</span>     * Reference values are from R, version 2.15.3.<a name="line.50"></a>
<span class="sourceLineNo">051</span>     */<a name="line.51"></a>
<span class="sourceLineNo">052</span>    @Override<a name="line.52"></a>
<span class="sourceLineNo">053</span>    public double[] makeDensityTestValues() {<a name="line.53"></a>
<span class="sourceLineNo">054</span>        return new double[] { 0d, 0.0000059049d, 0.000137781d, 0.0014467005,<a name="line.54"></a>
<span class="sourceLineNo">055</span>            0.009001692, 0.036756909, 0.1029193452, 0.200120949, 0.266827932,<a name="line.55"></a>
<span class="sourceLineNo">056</span>            0.2334744405, 0.121060821, 0.0282475249, 0d };<a name="line.56"></a>
<span class="sourceLineNo">057</span>    }<a name="line.57"></a>
<span class="sourceLineNo">058</span><a name="line.58"></a>
<span class="sourceLineNo">059</span>    /** Creates the default cumulative probability density test input values */<a name="line.59"></a>
<span class="sourceLineNo">060</span>    @Override<a name="line.60"></a>
<span class="sourceLineNo">061</span>    public int[] makeCumulativeTestPoints() {<a name="line.61"></a>
<span class="sourceLineNo">062</span>        return makeDensityTestPoints();<a name="line.62"></a>
<span class="sourceLineNo">063</span>    }<a name="line.63"></a>
<span class="sourceLineNo">064</span><a name="line.64"></a>
<span class="sourceLineNo">065</span>    /**<a name="line.65"></a>
<span class="sourceLineNo">066</span>     * Creates the default cumulative probability density test expected values.<a name="line.66"></a>
<span class="sourceLineNo">067</span>     * Reference values are from R, version 2.15.3.<a name="line.67"></a>
<span class="sourceLineNo">068</span>     */<a name="line.68"></a>
<span class="sourceLineNo">069</span>    @Override<a name="line.69"></a>
<span class="sourceLineNo">070</span>    public double[] makeCumulativeTestValues() {<a name="line.70"></a>
<span class="sourceLineNo">071</span>        return new double[] { 0d, 5.9049e-06, 0.0001436859, 0.0015903864, 0.0105920784,  0.0473489874,<a name="line.71"></a>
<span class="sourceLineNo">072</span>            0.1502683326, 0.3503892816, 0.6172172136, 0.8506916541, 0.9717524751, 1d, 1d };<a name="line.72"></a>
<span class="sourceLineNo">073</span>    }<a name="line.73"></a>
<span class="sourceLineNo">074</span><a name="line.74"></a>
<span class="sourceLineNo">075</span>    /** Creates the default inverse cumulative probability test input values */<a name="line.75"></a>
<span class="sourceLineNo">076</span>    @Override<a name="line.76"></a>
<span class="sourceLineNo">077</span>    public double[] makeInverseCumulativeTestPoints() {<a name="line.77"></a>
<span class="sourceLineNo">078</span>        return new double[] { 0, 0.001d, 0.010d, 0.025d, 0.050d, 0.100d,<a name="line.78"></a>
<span class="sourceLineNo">079</span>                0.999d, 0.990d, 0.975d, 0.950d, 0.900d, 1 };<a name="line.79"></a>
<span class="sourceLineNo">080</span>    }<a name="line.80"></a>
<span class="sourceLineNo">081</span><a name="line.81"></a>
<span class="sourceLineNo">082</span>    /**<a name="line.82"></a>
<span class="sourceLineNo">083</span>     * Creates the default inverse cumulative probability density test expected<a name="line.83"></a>
<span class="sourceLineNo">084</span>     * values<a name="line.84"></a>
<span class="sourceLineNo">085</span>     */<a name="line.85"></a>
<span class="sourceLineNo">086</span>    @Override<a name="line.86"></a>
<span class="sourceLineNo">087</span>    public int[] makeInverseCumulativeTestValues() {<a name="line.87"></a>
<span class="sourceLineNo">088</span>        return new int[] { 0, 2, 3, 4, 5, 5, 10, 10, 10, 9, 9, 10 };<a name="line.88"></a>
<span class="sourceLineNo">089</span>    }<a name="line.89"></a>
<span class="sourceLineNo">090</span><a name="line.90"></a>
<span class="sourceLineNo">091</span>    // ----------------- Additional test cases ---------------------------------<a name="line.91"></a>
<span class="sourceLineNo">092</span><a name="line.92"></a>
<span class="sourceLineNo">093</span>    /** Test degenerate case p = 0 */<a name="line.93"></a>
<span class="sourceLineNo">094</span>    @Test<a name="line.94"></a>
<span class="sourceLineNo">095</span>    public void testDegenerate0() {<a name="line.95"></a>
<span class="sourceLineNo">096</span>        BinomialDistribution dist = new BinomialDistribution(5, 0.0d);<a name="line.96"></a>
<span class="sourceLineNo">097</span>        setDistribution(dist);<a name="line.97"></a>
<span class="sourceLineNo">098</span>        setCumulativeTestPoints(new int[] { -1, 0, 1, 5, 10 });<a name="line.98"></a>
<span class="sourceLineNo">099</span>        setCumulativeTestValues(new double[] { 0d, 1d, 1d, 1d, 1d });<a name="line.99"></a>
<span class="sourceLineNo">100</span>        setDensityTestPoints(new int[] { -1, 0, 1, 10, 11 });<a name="line.100"></a>
<span class="sourceLineNo">101</span>        setDensityTestValues(new double[] { 0d, 1d, 0d, 0d, 0d });<a name="line.101"></a>
<span class="sourceLineNo">102</span>        setInverseCumulativeTestPoints(new double[] { 0.1d, 0.5d });<a name="line.102"></a>
<span class="sourceLineNo">103</span>        setInverseCumulativeTestValues(new int[] { 0, 0 });<a name="line.103"></a>
<span class="sourceLineNo">104</span>        verifyDensities();<a name="line.104"></a>
<span class="sourceLineNo">105</span>        verifyCumulativeProbabilities();<a name="line.105"></a>
<span class="sourceLineNo">106</span>        verifyInverseCumulativeProbabilities();<a name="line.106"></a>
<span class="sourceLineNo">107</span>        Assert.assertEquals(dist.getSupportLowerBound(), 0);<a name="line.107"></a>
<span class="sourceLineNo">108</span>        Assert.assertEquals(dist.getSupportUpperBound(), 0);<a name="line.108"></a>
<span class="sourceLineNo">109</span>    }<a name="line.109"></a>
<span class="sourceLineNo">110</span><a name="line.110"></a>
<span class="sourceLineNo">111</span>    /** Test degenerate case p = 1 */<a name="line.111"></a>
<span class="sourceLineNo">112</span>    @Test<a name="line.112"></a>
<span class="sourceLineNo">113</span>    public void testDegenerate1() {<a name="line.113"></a>
<span class="sourceLineNo">114</span>        BinomialDistribution dist = new BinomialDistribution(5, 1.0d);<a name="line.114"></a>
<span class="sourceLineNo">115</span>        setDistribution(dist);<a name="line.115"></a>
<span class="sourceLineNo">116</span>        setCumulativeTestPoints(new int[] { -1, 0, 1, 2, 5, 10 });<a name="line.116"></a>
<span class="sourceLineNo">117</span>        setCumulativeTestValues(new double[] { 0d, 0d, 0d, 0d, 1d, 1d });<a name="line.117"></a>
<span class="sourceLineNo">118</span>        setDensityTestPoints(new int[] { -1, 0, 1, 2, 5, 10 });<a name="line.118"></a>
<span class="sourceLineNo">119</span>        setDensityTestValues(new double[] { 0d, 0d, 0d, 0d, 1d, 0d });<a name="line.119"></a>
<span class="sourceLineNo">120</span>        setInverseCumulativeTestPoints(new double[] { 0.1d, 0.5d });<a name="line.120"></a>
<span class="sourceLineNo">121</span>        setInverseCumulativeTestValues(new int[] { 5, 5 });<a name="line.121"></a>
<span class="sourceLineNo">122</span>        verifyDensities();<a name="line.122"></a>
<span class="sourceLineNo">123</span>        verifyCumulativeProbabilities();<a name="line.123"></a>
<span class="sourceLineNo">124</span>        verifyInverseCumulativeProbabilities();<a name="line.124"></a>
<span class="sourceLineNo">125</span>        Assert.assertEquals(dist.getSupportLowerBound(), 5);<a name="line.125"></a>
<span class="sourceLineNo">126</span>        Assert.assertEquals(dist.getSupportUpperBound(), 5);<a name="line.126"></a>
<span class="sourceLineNo">127</span>    }<a name="line.127"></a>
<span class="sourceLineNo">128</span><a name="line.128"></a>
<span class="sourceLineNo">129</span>    /** Test degenerate case n = 0 */<a name="line.129"></a>
<span class="sourceLineNo">130</span>    @Test<a name="line.130"></a>
<span class="sourceLineNo">131</span>    public void testDegenerate2() {<a name="line.131"></a>
<span class="sourceLineNo">132</span>        BinomialDistribution dist = new BinomialDistribution(0, 0.01d);<a name="line.132"></a>
<span class="sourceLineNo">133</span>        setDistribution(dist);<a name="line.133"></a>
<span class="sourceLineNo">134</span>        setCumulativeTestPoints(new int[] { -1, 0, 1, 2, 5, 10 });<a name="line.134"></a>
<span class="sourceLineNo">135</span>        setCumulativeTestValues(new double[] { 0d, 1d, 1d, 1d, 1d, 1d });<a name="line.135"></a>
<span class="sourceLineNo">136</span>        setDensityTestPoints(new int[] { -1, 0, 1, 2, 5, 10 });<a name="line.136"></a>
<span class="sourceLineNo">137</span>        setDensityTestValues(new double[] { 0d, 1d, 0d, 0d, 0d, 0d });<a name="line.137"></a>
<span class="sourceLineNo">138</span>        setInverseCumulativeTestPoints(new double[] { 0.1d, 0.5d });<a name="line.138"></a>
<span class="sourceLineNo">139</span>        setInverseCumulativeTestValues(new int[] { 0, 0 });<a name="line.139"></a>
<span class="sourceLineNo">140</span>        verifyDensities();<a name="line.140"></a>
<span class="sourceLineNo">141</span>        verifyCumulativeProbabilities();<a name="line.141"></a>
<span class="sourceLineNo">142</span>        verifyInverseCumulativeProbabilities();<a name="line.142"></a>
<span class="sourceLineNo">143</span>        Assert.assertEquals(dist.getSupportLowerBound(), 0);<a name="line.143"></a>
<span class="sourceLineNo">144</span>        Assert.assertEquals(dist.getSupportUpperBound(), 0);<a name="line.144"></a>
<span class="sourceLineNo">145</span>    }<a name="line.145"></a>
<span class="sourceLineNo">146</span><a name="line.146"></a>
<span class="sourceLineNo">147</span>    @Test<a name="line.147"></a>
<span class="sourceLineNo">148</span>    public void testMoments() {<a name="line.148"></a>
<span class="sourceLineNo">149</span>        final double tol = 1e-9;<a name="line.149"></a>
<span class="sourceLineNo">150</span>        BinomialDistribution dist;<a name="line.150"></a>
<span class="sourceLineNo">151</span><a name="line.151"></a>
<span class="sourceLineNo">152</span>        dist = new BinomialDistribution(10, 0.5);<a name="line.152"></a>
<span class="sourceLineNo">153</span>        Assert.assertEquals(dist.getNumericalMean(), 10d * 0.5d, tol);<a name="line.153"></a>
<span class="sourceLineNo">154</span>        Assert.assertEquals(dist.getNumericalVariance(), 10d * 0.5d * 0.5d, tol);<a name="line.154"></a>
<span class="sourceLineNo">155</span><a name="line.155"></a>
<span class="sourceLineNo">156</span>        dist = new BinomialDistribution(30, 0.3);<a name="line.156"></a>
<span class="sourceLineNo">157</span>        Assert.assertEquals(dist.getNumericalMean(), 30d * 0.3d, tol);<a name="line.157"></a>
<span class="sourceLineNo">158</span>        Assert.assertEquals(dist.getNumericalVariance(), 30d * 0.3d * (1d - 0.3d), tol);<a name="line.158"></a>
<span class="sourceLineNo">159</span>    }<a name="line.159"></a>
<span class="sourceLineNo">160</span><a name="line.160"></a>
<span class="sourceLineNo">161</span>    @Test<a name="line.161"></a>
<span class="sourceLineNo">162</span>    public void testMath718() {<a name="line.162"></a>
<span class="sourceLineNo">163</span>        // for large trials the evaluation of ContinuedFraction was inaccurate<a name="line.163"></a>
<span class="sourceLineNo">164</span>        // do a sweep over several large trials to test if the current implementation is<a name="line.164"></a>
<span class="sourceLineNo">165</span>        // numerically stable.<a name="line.165"></a>
<span class="sourceLineNo">166</span><a name="line.166"></a>
<span class="sourceLineNo">167</span>        for (int trials = 500000; trials &lt; 20000000; trials += 100000) {<a name="line.167"></a>
<span class="sourceLineNo">168</span>            BinomialDistribution dist = new BinomialDistribution(trials, 0.5);<a name="line.168"></a>
<span class="sourceLineNo">169</span>            int p = dist.inverseCumulativeProbability(0.5);<a name="line.169"></a>
<span class="sourceLineNo">170</span>            Assert.assertEquals(trials / 2, p);<a name="line.170"></a>
<span class="sourceLineNo">171</span>        }<a name="line.171"></a>
<span class="sourceLineNo">172</span>    }<a name="line.172"></a>
<span class="sourceLineNo">173</span>}<a name="line.173"></a>




























































</pre>
</div>
</body>
</html>
