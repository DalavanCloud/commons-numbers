<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> *  contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> *  this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> *  The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> *  (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> *  the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *     http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> *  Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> *  distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> *  See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> *  limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span><a name="line.17"></a>
<span class="sourceLineNo">018</span>package org.apache.commons.math3.special;<a name="line.18"></a>
<span class="sourceLineNo">019</span><a name="line.19"></a>
<span class="sourceLineNo">020</span>import org.apache.commons.math3.TestUtils;<a name="line.20"></a>
<span class="sourceLineNo">021</span>import org.apache.commons.math3.util.FastMath;<a name="line.21"></a>
<span class="sourceLineNo">022</span><a name="line.22"></a>
<span class="sourceLineNo">023</span>import org.junit.Test;<a name="line.23"></a>
<span class="sourceLineNo">024</span>import org.junit.Assert;<a name="line.24"></a>
<span class="sourceLineNo">025</span><a name="line.25"></a>
<span class="sourceLineNo">026</span>/**<a name="line.26"></a>
<span class="sourceLineNo">027</span> */<a name="line.27"></a>
<span class="sourceLineNo">028</span>public class ErfTest {<a name="line.28"></a>
<span class="sourceLineNo">029</span>    @Test<a name="line.29"></a>
<span class="sourceLineNo">030</span>    public void testErf0() {<a name="line.30"></a>
<span class="sourceLineNo">031</span>        double actual = Erf.erf(0.0);<a name="line.31"></a>
<span class="sourceLineNo">032</span>        double expected = 0.0;<a name="line.32"></a>
<span class="sourceLineNo">033</span>        Assert.assertEquals(expected, actual, 1.0e-15);<a name="line.33"></a>
<span class="sourceLineNo">034</span>        Assert.assertEquals(1 - expected, Erf.erfc(0.0), 1.0e-15);<a name="line.34"></a>
<span class="sourceLineNo">035</span>    }<a name="line.35"></a>
<span class="sourceLineNo">036</span><a name="line.36"></a>
<span class="sourceLineNo">037</span>    @Test<a name="line.37"></a>
<span class="sourceLineNo">038</span>    public void testErf1960() {<a name="line.38"></a>
<span class="sourceLineNo">039</span>        double x = 1.960 / FastMath.sqrt(2.0);<a name="line.39"></a>
<span class="sourceLineNo">040</span>        double actual = Erf.erf(x);<a name="line.40"></a>
<span class="sourceLineNo">041</span>        double expected = 0.95;<a name="line.41"></a>
<span class="sourceLineNo">042</span>        Assert.assertEquals(expected, actual, 1.0e-5);<a name="line.42"></a>
<span class="sourceLineNo">043</span>        Assert.assertEquals(1 - actual, Erf.erfc(x), 1.0e-15);<a name="line.43"></a>
<span class="sourceLineNo">044</span><a name="line.44"></a>
<span class="sourceLineNo">045</span>        actual = Erf.erf(-x);<a name="line.45"></a>
<span class="sourceLineNo">046</span>        expected = -expected;<a name="line.46"></a>
<span class="sourceLineNo">047</span>        Assert.assertEquals(expected, actual, 1.0e-5);<a name="line.47"></a>
<span class="sourceLineNo">048</span>        Assert.assertEquals(1 - actual, Erf.erfc(-x), 1.0e-15);<a name="line.48"></a>
<span class="sourceLineNo">049</span>    }<a name="line.49"></a>
<span class="sourceLineNo">050</span><a name="line.50"></a>
<span class="sourceLineNo">051</span>    @Test<a name="line.51"></a>
<span class="sourceLineNo">052</span>    public void testErf2576() {<a name="line.52"></a>
<span class="sourceLineNo">053</span>        double x = 2.576 / FastMath.sqrt(2.0);<a name="line.53"></a>
<span class="sourceLineNo">054</span>        double actual = Erf.erf(x);<a name="line.54"></a>
<span class="sourceLineNo">055</span>        double expected = 0.99;<a name="line.55"></a>
<span class="sourceLineNo">056</span>        Assert.assertEquals(expected, actual, 1.0e-5);<a name="line.56"></a>
<span class="sourceLineNo">057</span>        Assert.assertEquals(1 - actual, Erf.erfc(x), 1e-15);<a name="line.57"></a>
<span class="sourceLineNo">058</span><a name="line.58"></a>
<span class="sourceLineNo">059</span>        actual = Erf.erf(-x);<a name="line.59"></a>
<span class="sourceLineNo">060</span>        expected = -expected;<a name="line.60"></a>
<span class="sourceLineNo">061</span>        Assert.assertEquals(expected, actual, 1.0e-5);<a name="line.61"></a>
<span class="sourceLineNo">062</span>        Assert.assertEquals(1 - actual, Erf.erfc(-x), 1.0e-15);<a name="line.62"></a>
<span class="sourceLineNo">063</span>    }<a name="line.63"></a>
<span class="sourceLineNo">064</span><a name="line.64"></a>
<span class="sourceLineNo">065</span>    @Test<a name="line.65"></a>
<span class="sourceLineNo">066</span>    public void testErf2807() {<a name="line.66"></a>
<span class="sourceLineNo">067</span>        double x = 2.807 / FastMath.sqrt(2.0);<a name="line.67"></a>
<span class="sourceLineNo">068</span>        double actual = Erf.erf(x);<a name="line.68"></a>
<span class="sourceLineNo">069</span>        double expected = 0.995;<a name="line.69"></a>
<span class="sourceLineNo">070</span>        Assert.assertEquals(expected, actual, 1.0e-5);<a name="line.70"></a>
<span class="sourceLineNo">071</span>        Assert.assertEquals(1 - actual, Erf.erfc(x), 1.0e-15);<a name="line.71"></a>
<span class="sourceLineNo">072</span><a name="line.72"></a>
<span class="sourceLineNo">073</span>        actual = Erf.erf(-x);<a name="line.73"></a>
<span class="sourceLineNo">074</span>        expected = -expected;<a name="line.74"></a>
<span class="sourceLineNo">075</span>        Assert.assertEquals(expected, actual, 1.0e-5);<a name="line.75"></a>
<span class="sourceLineNo">076</span>        Assert.assertEquals(1 - actual, Erf.erfc(-x), 1.0e-15);<a name="line.76"></a>
<span class="sourceLineNo">077</span>    }<a name="line.77"></a>
<span class="sourceLineNo">078</span><a name="line.78"></a>
<span class="sourceLineNo">079</span>    @Test<a name="line.79"></a>
<span class="sourceLineNo">080</span>    public void testErf3291() {<a name="line.80"></a>
<span class="sourceLineNo">081</span>        double x = 3.291 / FastMath.sqrt(2.0);<a name="line.81"></a>
<span class="sourceLineNo">082</span>        double actual = Erf.erf(x);<a name="line.82"></a>
<span class="sourceLineNo">083</span>        double expected = 0.999;<a name="line.83"></a>
<span class="sourceLineNo">084</span>        Assert.assertEquals(expected, actual, 1.0e-5);<a name="line.84"></a>
<span class="sourceLineNo">085</span>        Assert.assertEquals(1 - expected, Erf.erfc(x), 1.0e-5);<a name="line.85"></a>
<span class="sourceLineNo">086</span><a name="line.86"></a>
<span class="sourceLineNo">087</span>        actual = Erf.erf(-x);<a name="line.87"></a>
<span class="sourceLineNo">088</span>        expected = -expected;<a name="line.88"></a>
<span class="sourceLineNo">089</span>        Assert.assertEquals(expected, actual, 1.0e-5);<a name="line.89"></a>
<span class="sourceLineNo">090</span>        Assert.assertEquals(1 - expected, Erf.erfc(-x), 1.0e-5);<a name="line.90"></a>
<span class="sourceLineNo">091</span>    }<a name="line.91"></a>
<span class="sourceLineNo">092</span>    <a name="line.92"></a>
<span class="sourceLineNo">093</span>    /**<a name="line.93"></a>
<span class="sourceLineNo">094</span>     * MATH-301, MATH-456<a name="line.94"></a>
<span class="sourceLineNo">095</span>     */<a name="line.95"></a>
<span class="sourceLineNo">096</span>    @Test<a name="line.96"></a>
<span class="sourceLineNo">097</span>    public void testLargeValues() {<a name="line.97"></a>
<span class="sourceLineNo">098</span>        for (int i = 1; i &lt; 200; i*=10) {<a name="line.98"></a>
<span class="sourceLineNo">099</span>            double result = Erf.erf(i);<a name="line.99"></a>
<span class="sourceLineNo">100</span>            Assert.assertFalse(Double.isNaN(result));<a name="line.100"></a>
<span class="sourceLineNo">101</span>            Assert.assertTrue(result &gt; 0 &amp;&amp; result &lt;= 1);<a name="line.101"></a>
<span class="sourceLineNo">102</span>            result = Erf.erf(-i);<a name="line.102"></a>
<span class="sourceLineNo">103</span>            Assert.assertFalse(Double.isNaN(result));<a name="line.103"></a>
<span class="sourceLineNo">104</span>            Assert.assertTrue(result &gt;= -1 &amp;&amp; result &lt; 0);<a name="line.104"></a>
<span class="sourceLineNo">105</span>            result = Erf.erfc(i);<a name="line.105"></a>
<span class="sourceLineNo">106</span>            Assert.assertFalse(Double.isNaN(result));<a name="line.106"></a>
<span class="sourceLineNo">107</span>            Assert.assertTrue(result &gt;= 0 &amp;&amp; result &lt; 1);<a name="line.107"></a>
<span class="sourceLineNo">108</span>            result = Erf.erfc(-i);<a name="line.108"></a>
<span class="sourceLineNo">109</span>            Assert.assertFalse(Double.isNaN(result));<a name="line.109"></a>
<span class="sourceLineNo">110</span>            Assert.assertTrue(result &gt;= 1 &amp;&amp; result &lt;= 2);    <a name="line.110"></a>
<span class="sourceLineNo">111</span>        }<a name="line.111"></a>
<span class="sourceLineNo">112</span>        Assert.assertEquals(-1, Erf.erf(Double.NEGATIVE_INFINITY), 0);<a name="line.112"></a>
<span class="sourceLineNo">113</span>        Assert.assertEquals(1, Erf.erf(Double.POSITIVE_INFINITY), 0);<a name="line.113"></a>
<span class="sourceLineNo">114</span>        Assert.assertEquals(2, Erf.erfc(Double.NEGATIVE_INFINITY), 0);<a name="line.114"></a>
<span class="sourceLineNo">115</span>        Assert.assertEquals(0, Erf.erfc(Double.POSITIVE_INFINITY), 0);<a name="line.115"></a>
<span class="sourceLineNo">116</span>    }<a name="line.116"></a>
<span class="sourceLineNo">117</span>    <a name="line.117"></a>
<span class="sourceLineNo">118</span>    /**<a name="line.118"></a>
<span class="sourceLineNo">119</span>     * Compare Erf.erf against reference values computed using GCC 4.2.1 (Apple OSX packaged version)<a name="line.119"></a>
<span class="sourceLineNo">120</span>     * erfl (extended precision erf).<a name="line.120"></a>
<span class="sourceLineNo">121</span>     */<a name="line.121"></a>
<span class="sourceLineNo">122</span>    @Test<a name="line.122"></a>
<span class="sourceLineNo">123</span>    public void testErfGnu() {<a name="line.123"></a>
<span class="sourceLineNo">124</span>        final double tol = 1E-15;<a name="line.124"></a>
<span class="sourceLineNo">125</span>        final double[] gnuValues = new double[] {-1, -1, -1, -1, -1, <a name="line.125"></a>
<span class="sourceLineNo">126</span>        -1, -1, -1, -0.99999999999999997848, <a name="line.126"></a>
<span class="sourceLineNo">127</span>        -0.99999999999999264217, -0.99999999999846254017, -0.99999999980338395581, -0.99999998458274209971, <a name="line.127"></a>
<span class="sourceLineNo">128</span>        -0.9999992569016276586, -0.99997790950300141459, -0.99959304798255504108, -0.99532226501895273415, <a name="line.128"></a>
<span class="sourceLineNo">129</span>        -0.96610514647531072711, -0.84270079294971486948, -0.52049987781304653809,  0, <a name="line.129"></a>
<span class="sourceLineNo">130</span>         0.52049987781304653809, 0.84270079294971486948, 0.96610514647531072711, 0.99532226501895273415, <a name="line.130"></a>
<span class="sourceLineNo">131</span>         0.99959304798255504108, 0.99997790950300141459, 0.9999992569016276586, 0.99999998458274209971, <a name="line.131"></a>
<span class="sourceLineNo">132</span>         0.99999999980338395581, 0.99999999999846254017, 0.99999999999999264217, 0.99999999999999997848, <a name="line.132"></a>
<span class="sourceLineNo">133</span>         1,  1,  1,  1, <a name="line.133"></a>
<span class="sourceLineNo">134</span>         1,  1,  1,  1};<a name="line.134"></a>
<span class="sourceLineNo">135</span>        double x = -10d;<a name="line.135"></a>
<span class="sourceLineNo">136</span>        for (int i = 0; i &lt; 41; i++) {<a name="line.136"></a>
<span class="sourceLineNo">137</span>            Assert.assertEquals(gnuValues[i], Erf.erf(x), tol);<a name="line.137"></a>
<span class="sourceLineNo">138</span>            x += 0.5d;<a name="line.138"></a>
<span class="sourceLineNo">139</span>        }<a name="line.139"></a>
<span class="sourceLineNo">140</span>    }<a name="line.140"></a>
<span class="sourceLineNo">141</span>    <a name="line.141"></a>
<span class="sourceLineNo">142</span>    /**<a name="line.142"></a>
<span class="sourceLineNo">143</span>     * Compare Erf.erfc against reference values computed using GCC 4.2.1 (Apple OSX packaged version)<a name="line.143"></a>
<span class="sourceLineNo">144</span>     * erfcl (extended precision erfc).<a name="line.144"></a>
<span class="sourceLineNo">145</span>     */<a name="line.145"></a>
<span class="sourceLineNo">146</span>    @Test<a name="line.146"></a>
<span class="sourceLineNo">147</span>    public void testErfcGnu() {<a name="line.147"></a>
<span class="sourceLineNo">148</span>        final double tol = 1E-15;<a name="line.148"></a>
<span class="sourceLineNo">149</span>        final double[] gnuValues = new double[] { 2,  2,  2,  2,  2, <a name="line.149"></a>
<span class="sourceLineNo">150</span>        2,  2,  2, 1.9999999999999999785, <a name="line.150"></a>
<span class="sourceLineNo">151</span>        1.9999999999999926422, 1.9999999999984625402, 1.9999999998033839558, 1.9999999845827420998, <a name="line.151"></a>
<span class="sourceLineNo">152</span>        1.9999992569016276586, 1.9999779095030014146, 1.9995930479825550411, 1.9953222650189527342, <a name="line.152"></a>
<span class="sourceLineNo">153</span>        1.9661051464753107271, 1.8427007929497148695, 1.5204998778130465381,  1, <a name="line.153"></a>
<span class="sourceLineNo">154</span>        0.47950012218695346194, 0.15729920705028513051, 0.033894853524689272893, 0.0046777349810472658333, <a name="line.154"></a>
<span class="sourceLineNo">155</span>        0.00040695201744495893941, 2.2090496998585441366E-05, 7.4309837234141274516E-07, 1.5417257900280018858E-08, <a name="line.155"></a>
<span class="sourceLineNo">156</span>        1.966160441542887477E-10, 1.5374597944280348501E-12, 7.3578479179743980661E-15, 2.1519736712498913103E-17, <a name="line.156"></a>
<span class="sourceLineNo">157</span>        3.8421483271206474691E-20, 4.1838256077794144006E-23, 2.7766493860305691016E-26, 1.1224297172982927079E-29, <a name="line.157"></a>
<span class="sourceLineNo">158</span>        2.7623240713337714448E-33, 4.1370317465138102353E-37, 3.7692144856548799402E-41, 2.0884875837625447567E-45};<a name="line.158"></a>
<span class="sourceLineNo">159</span>        double x = -10d;<a name="line.159"></a>
<span class="sourceLineNo">160</span>        for (int i = 0; i &lt; 41; i++) {<a name="line.160"></a>
<span class="sourceLineNo">161</span>            Assert.assertEquals(gnuValues[i], Erf.erfc(x), tol);<a name="line.161"></a>
<span class="sourceLineNo">162</span>            x += 0.5d;<a name="line.162"></a>
<span class="sourceLineNo">163</span>        }<a name="line.163"></a>
<span class="sourceLineNo">164</span>    }<a name="line.164"></a>
<span class="sourceLineNo">165</span>    <a name="line.165"></a>
<span class="sourceLineNo">166</span>    /**<a name="line.166"></a>
<span class="sourceLineNo">167</span>     * Tests erfc against reference data computed using Maple reported in Marsaglia, G,, <a name="line.167"></a>
<span class="sourceLineNo">168</span>     * "Evaluating the Normal Distribution," Journal of Statistical Software, July, 2004.<a name="line.168"></a>
<span class="sourceLineNo">169</span>     * http//www.jstatsoft.org/v11/a05/paper<a name="line.169"></a>
<span class="sourceLineNo">170</span>     */<a name="line.170"></a>
<span class="sourceLineNo">171</span>    @Test<a name="line.171"></a>
<span class="sourceLineNo">172</span>    public void testErfcMaple() {<a name="line.172"></a>
<span class="sourceLineNo">173</span>        double[][] ref = new double[][]<a name="line.173"></a>
<span class="sourceLineNo">174</span>                        {{0.1, 4.60172162722971e-01},<a name="line.174"></a>
<span class="sourceLineNo">175</span>                         {1.2, 1.15069670221708e-01},<a name="line.175"></a>
<span class="sourceLineNo">176</span>                         {2.3, 1.07241100216758e-02},<a name="line.176"></a>
<span class="sourceLineNo">177</span>                         {3.4, 3.36929265676881e-04},<a name="line.177"></a>
<span class="sourceLineNo">178</span>                         {4.5, 3.39767312473006e-06},<a name="line.178"></a>
<span class="sourceLineNo">179</span>                         {5.6, 1.07175902583109e-08}, <a name="line.179"></a>
<span class="sourceLineNo">180</span>                         {6.7, 1.04209769879652e-11},<a name="line.180"></a>
<span class="sourceLineNo">181</span>                         {7.8, 3.09535877195870e-15},<a name="line.181"></a>
<span class="sourceLineNo">182</span>                         {8.9, 2.79233437493966e-19},<a name="line.182"></a>
<span class="sourceLineNo">183</span>                         {10.0, 7.61985302416053e-24},<a name="line.183"></a>
<span class="sourceLineNo">184</span>                         {11.1, 6.27219439321703e-29},<a name="line.184"></a>
<span class="sourceLineNo">185</span>                         {12.2, 1.55411978638959e-34}, <a name="line.185"></a>
<span class="sourceLineNo">186</span>                         {13.3, 1.15734162836904e-40},<a name="line.186"></a>
<span class="sourceLineNo">187</span>                         {14.4, 2.58717592540226e-47},<a name="line.187"></a>
<span class="sourceLineNo">188</span>                         {15.5, 1.73446079179387e-54},<a name="line.188"></a>
<span class="sourceLineNo">189</span>                         {16.6, 3.48454651995041e-62}<a name="line.189"></a>
<span class="sourceLineNo">190</span>        };<a name="line.190"></a>
<span class="sourceLineNo">191</span>        for (int i = 0; i &lt; 15; i++) {<a name="line.191"></a>
<span class="sourceLineNo">192</span>            final double result = 0.5*Erf.erfc(ref[i][0]/FastMath.sqrt(2));<a name="line.192"></a>
<span class="sourceLineNo">193</span>            Assert.assertEquals(ref[i][1], result, 1E-15);<a name="line.193"></a>
<span class="sourceLineNo">194</span>            TestUtils.assertRelativelyEquals(ref[i][1], result, 1E-13);<a name="line.194"></a>
<span class="sourceLineNo">195</span>        }<a name="line.195"></a>
<span class="sourceLineNo">196</span>    }<a name="line.196"></a>
<span class="sourceLineNo">197</span>    <a name="line.197"></a>
<span class="sourceLineNo">198</span>    /**<a name="line.198"></a>
<span class="sourceLineNo">199</span>     * Test the implementation of Erf.erf(double, double) for consistency with results<a name="line.199"></a>
<span class="sourceLineNo">200</span>     * obtained from Erf.erf(double) and Erf.erfc(double).<a name="line.200"></a>
<span class="sourceLineNo">201</span>     */<a name="line.201"></a>
<span class="sourceLineNo">202</span>    @Test<a name="line.202"></a>
<span class="sourceLineNo">203</span>    public void testTwoArgumentErf() {<a name="line.203"></a>
<span class="sourceLineNo">204</span>        double[] xi = new double[]{-2.0, -1.0, -0.9, -0.1, 0.0, 0.1, 0.9, 1.0, 2.0};<a name="line.204"></a>
<span class="sourceLineNo">205</span>        for(double x1 : xi) {<a name="line.205"></a>
<span class="sourceLineNo">206</span>            for(double x2 : xi) {<a name="line.206"></a>
<span class="sourceLineNo">207</span>                double a = Erf.erf(x1, x2);<a name="line.207"></a>
<span class="sourceLineNo">208</span>                double b = Erf.erf(x2) - Erf.erf(x1);<a name="line.208"></a>
<span class="sourceLineNo">209</span>                double c = Erf.erfc(x1) - Erf.erfc(x2);<a name="line.209"></a>
<span class="sourceLineNo">210</span>                Assert.assertEquals(a, b, 1E-15);<a name="line.210"></a>
<span class="sourceLineNo">211</span>                Assert.assertEquals(a, c, 1E-15);<a name="line.211"></a>
<span class="sourceLineNo">212</span>            }<a name="line.212"></a>
<span class="sourceLineNo">213</span>        }<a name="line.213"></a>
<span class="sourceLineNo">214</span>    }<a name="line.214"></a>
<span class="sourceLineNo">215</span><a name="line.215"></a>
<span class="sourceLineNo">216</span>    @Test<a name="line.216"></a>
<span class="sourceLineNo">217</span>    public void testErfInvNaN() {<a name="line.217"></a>
<span class="sourceLineNo">218</span>        Assert.assertTrue(Double.isNaN(Erf.erfInv(-1.001)));<a name="line.218"></a>
<span class="sourceLineNo">219</span>        Assert.assertTrue(Double.isNaN(Erf.erfInv(+1.001)));<a name="line.219"></a>
<span class="sourceLineNo">220</span>    }<a name="line.220"></a>
<span class="sourceLineNo">221</span><a name="line.221"></a>
<span class="sourceLineNo">222</span>    @Test<a name="line.222"></a>
<span class="sourceLineNo">223</span>    public void testErfInvInfinite() {<a name="line.223"></a>
<span class="sourceLineNo">224</span>        Assert.assertTrue(Double.isInfinite(Erf.erfInv(-1)));<a name="line.224"></a>
<span class="sourceLineNo">225</span>        Assert.assertTrue(Erf.erfInv(-1) &lt; 0);<a name="line.225"></a>
<span class="sourceLineNo">226</span>        Assert.assertTrue(Double.isInfinite(Erf.erfInv(+1)));<a name="line.226"></a>
<span class="sourceLineNo">227</span>        Assert.assertTrue(Erf.erfInv(+1) &gt; 0);<a name="line.227"></a>
<span class="sourceLineNo">228</span>    }<a name="line.228"></a>
<span class="sourceLineNo">229</span><a name="line.229"></a>
<span class="sourceLineNo">230</span>    @Test<a name="line.230"></a>
<span class="sourceLineNo">231</span>    public void testErfInv() {<a name="line.231"></a>
<span class="sourceLineNo">232</span>        for (double x = -5.9; x &lt; 5.9; x += 0.01) {<a name="line.232"></a>
<span class="sourceLineNo">233</span>            final double y = Erf.erf(x);<a name="line.233"></a>
<span class="sourceLineNo">234</span>            final double dydx = 2 * FastMath.exp(-x * x) / FastMath.sqrt(FastMath.PI);<a name="line.234"></a>
<span class="sourceLineNo">235</span>            Assert.assertEquals(x, Erf.erfInv(y), 1.0e-15 / dydx);<a name="line.235"></a>
<span class="sourceLineNo">236</span>        }<a name="line.236"></a>
<span class="sourceLineNo">237</span>    }<a name="line.237"></a>
<span class="sourceLineNo">238</span><a name="line.238"></a>
<span class="sourceLineNo">239</span>    @Test<a name="line.239"></a>
<span class="sourceLineNo">240</span>    public void testErfcInvNaN() {<a name="line.240"></a>
<span class="sourceLineNo">241</span>        Assert.assertTrue(Double.isNaN(Erf.erfcInv(-0.001)));<a name="line.241"></a>
<span class="sourceLineNo">242</span>        Assert.assertTrue(Double.isNaN(Erf.erfcInv(+2.001)));<a name="line.242"></a>
<span class="sourceLineNo">243</span>    }<a name="line.243"></a>
<span class="sourceLineNo">244</span><a name="line.244"></a>
<span class="sourceLineNo">245</span>    @Test<a name="line.245"></a>
<span class="sourceLineNo">246</span>    public void testErfcInvInfinite() {<a name="line.246"></a>
<span class="sourceLineNo">247</span>        Assert.assertTrue(Double.isInfinite(Erf.erfcInv(-0)));<a name="line.247"></a>
<span class="sourceLineNo">248</span>        Assert.assertTrue(Erf.erfcInv( 0) &gt; 0);<a name="line.248"></a>
<span class="sourceLineNo">249</span>        Assert.assertTrue(Double.isInfinite(Erf.erfcInv(+2)));<a name="line.249"></a>
<span class="sourceLineNo">250</span>        Assert.assertTrue(Erf.erfcInv(+2) &lt; 0);<a name="line.250"></a>
<span class="sourceLineNo">251</span>    }<a name="line.251"></a>
<span class="sourceLineNo">252</span><a name="line.252"></a>
<span class="sourceLineNo">253</span>    @Test<a name="line.253"></a>
<span class="sourceLineNo">254</span>    public void testErfcInv() {<a name="line.254"></a>
<span class="sourceLineNo">255</span>        for (double x = -5.85; x &lt; 5.9; x += 0.01) {<a name="line.255"></a>
<span class="sourceLineNo">256</span>            final double y = Erf.erfc(x);<a name="line.256"></a>
<span class="sourceLineNo">257</span>            final double dydxAbs = 2 * FastMath.exp(-x * x) / FastMath.sqrt(FastMath.PI);<a name="line.257"></a>
<span class="sourceLineNo">258</span>            Assert.assertEquals(x, Erf.erfcInv(y), 1.0e-15 / dydxAbs);<a name="line.258"></a>
<span class="sourceLineNo">259</span>        }<a name="line.259"></a>
<span class="sourceLineNo">260</span>    }<a name="line.260"></a>
<span class="sourceLineNo">261</span>}<a name="line.261"></a>




























































</pre>
</div>
</body>
</html>
