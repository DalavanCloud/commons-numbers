<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span><a name="line.17"></a>
<span class="sourceLineNo">018</span>package org.apache.commons.math3.geometry.euclidean.threed;<a name="line.18"></a>
<span class="sourceLineNo">019</span><a name="line.19"></a>
<span class="sourceLineNo">020</span>import java.text.DecimalFormat;<a name="line.20"></a>
<span class="sourceLineNo">021</span>import java.text.DecimalFormatSymbols;<a name="line.21"></a>
<span class="sourceLineNo">022</span>import java.text.NumberFormat;<a name="line.22"></a>
<span class="sourceLineNo">023</span>import java.util.Locale;<a name="line.23"></a>
<span class="sourceLineNo">024</span><a name="line.24"></a>
<span class="sourceLineNo">025</span>import org.apache.commons.math3.TestUtils;<a name="line.25"></a>
<span class="sourceLineNo">026</span>import org.apache.commons.math3.exception.DimensionMismatchException;<a name="line.26"></a>
<span class="sourceLineNo">027</span>import org.apache.commons.math3.exception.MathArithmeticException;<a name="line.27"></a>
<span class="sourceLineNo">028</span>import org.apache.commons.math3.geometry.Space;<a name="line.28"></a>
<span class="sourceLineNo">029</span>import org.apache.commons.math3.random.Well1024a;<a name="line.29"></a>
<span class="sourceLineNo">030</span>import org.apache.commons.math3.util.FastMath;<a name="line.30"></a>
<span class="sourceLineNo">031</span>import org.apache.commons.math3.util.Precision;<a name="line.31"></a>
<span class="sourceLineNo">032</span>import org.junit.Assert;<a name="line.32"></a>
<span class="sourceLineNo">033</span>import org.junit.Test;<a name="line.33"></a>
<span class="sourceLineNo">034</span><a name="line.34"></a>
<span class="sourceLineNo">035</span>public class Vector3DTest {<a name="line.35"></a>
<span class="sourceLineNo">036</span>    @Test<a name="line.36"></a>
<span class="sourceLineNo">037</span>    public void testConstructors() throws DimensionMismatchException {<a name="line.37"></a>
<span class="sourceLineNo">038</span>        double r = FastMath.sqrt(2) /2;<a name="line.38"></a>
<span class="sourceLineNo">039</span>        checkVector(new Vector3D(2, new Vector3D(FastMath.PI / 3, -FastMath.PI / 4)),<a name="line.39"></a>
<span class="sourceLineNo">040</span>                    r, r * FastMath.sqrt(3), -2 * r);<a name="line.40"></a>
<span class="sourceLineNo">041</span>        checkVector(new Vector3D(2, Vector3D.PLUS_I,<a name="line.41"></a>
<span class="sourceLineNo">042</span>                                 -3, Vector3D.MINUS_K),<a name="line.42"></a>
<span class="sourceLineNo">043</span>                    2, 0, 3);<a name="line.43"></a>
<span class="sourceLineNo">044</span>        checkVector(new Vector3D(2, Vector3D.PLUS_I,<a name="line.44"></a>
<span class="sourceLineNo">045</span>                                 5, Vector3D.PLUS_J,<a name="line.45"></a>
<span class="sourceLineNo">046</span>                                 -3, Vector3D.MINUS_K),<a name="line.46"></a>
<span class="sourceLineNo">047</span>                    2, 5, 3);<a name="line.47"></a>
<span class="sourceLineNo">048</span>        checkVector(new Vector3D(2, Vector3D.PLUS_I,<a name="line.48"></a>
<span class="sourceLineNo">049</span>                                 5, Vector3D.PLUS_J,<a name="line.49"></a>
<span class="sourceLineNo">050</span>                                 5, Vector3D.MINUS_J,<a name="line.50"></a>
<span class="sourceLineNo">051</span>                                 -3, Vector3D.MINUS_K),<a name="line.51"></a>
<span class="sourceLineNo">052</span>                    2, 0, 3);<a name="line.52"></a>
<span class="sourceLineNo">053</span>        checkVector(new Vector3D(new double[] { 2,  5,  -3 }),<a name="line.53"></a>
<span class="sourceLineNo">054</span>                    2, 5, -3);<a name="line.54"></a>
<span class="sourceLineNo">055</span>    }<a name="line.55"></a>
<span class="sourceLineNo">056</span><a name="line.56"></a>
<span class="sourceLineNo">057</span>    @Test<a name="line.57"></a>
<span class="sourceLineNo">058</span>    public void testSpace() {<a name="line.58"></a>
<span class="sourceLineNo">059</span>        Space space = new Vector3D(1, 2, 2).getSpace();<a name="line.59"></a>
<span class="sourceLineNo">060</span>        Assert.assertEquals(3, space.getDimension());<a name="line.60"></a>
<span class="sourceLineNo">061</span>        Assert.assertEquals(2, space.getSubSpace().getDimension());<a name="line.61"></a>
<span class="sourceLineNo">062</span>        Space deserialized = (Space) TestUtils.serializeAndRecover(space);<a name="line.62"></a>
<span class="sourceLineNo">063</span>        Assert.assertTrue(space == deserialized);<a name="line.63"></a>
<span class="sourceLineNo">064</span>    }<a name="line.64"></a>
<span class="sourceLineNo">065</span><a name="line.65"></a>
<span class="sourceLineNo">066</span>    @Test<a name="line.66"></a>
<span class="sourceLineNo">067</span>    public void testZero() {<a name="line.67"></a>
<span class="sourceLineNo">068</span>        Assert.assertEquals(0, new Vector3D(1, 2, 2).getZero().getNorm(), 1.0e-15);<a name="line.68"></a>
<span class="sourceLineNo">069</span>    }<a name="line.69"></a>
<span class="sourceLineNo">070</span><a name="line.70"></a>
<span class="sourceLineNo">071</span>    @Test<a name="line.71"></a>
<span class="sourceLineNo">072</span>    public void testEquals() {<a name="line.72"></a>
<span class="sourceLineNo">073</span>        Vector3D u1 = new Vector3D(1, 2, 3);<a name="line.73"></a>
<span class="sourceLineNo">074</span>        Vector3D u2 = new Vector3D(1, 2, 3);<a name="line.74"></a>
<span class="sourceLineNo">075</span>        Assert.assertTrue(u1.equals(u1));<a name="line.75"></a>
<span class="sourceLineNo">076</span>        Assert.assertTrue(u1.equals(u2));<a name="line.76"></a>
<span class="sourceLineNo">077</span>        Assert.assertFalse(u1.equals(new Rotation(1, 0, 0, 0, false)));<a name="line.77"></a>
<span class="sourceLineNo">078</span>        Assert.assertFalse(u1.equals(new Vector3D(1, 2, 3 + 10 * Precision.EPSILON)));<a name="line.78"></a>
<span class="sourceLineNo">079</span>        Assert.assertFalse(u1.equals(new Vector3D(1, 2 + 10 * Precision.EPSILON, 3)));<a name="line.79"></a>
<span class="sourceLineNo">080</span>        Assert.assertFalse(u1.equals(new Vector3D(1 + 10 * Precision.EPSILON, 2, 3)));<a name="line.80"></a>
<span class="sourceLineNo">081</span>        Assert.assertTrue(new Vector3D(0, Double.NaN, 0).equals(new Vector3D(0, 0, Double.NaN)));<a name="line.81"></a>
<span class="sourceLineNo">082</span>    }<a name="line.82"></a>
<span class="sourceLineNo">083</span><a name="line.83"></a>
<span class="sourceLineNo">084</span>    @Test<a name="line.84"></a>
<span class="sourceLineNo">085</span>    public void testHash() {<a name="line.85"></a>
<span class="sourceLineNo">086</span>        Assert.assertEquals(new Vector3D(0, Double.NaN, 0).hashCode(), new Vector3D(0, 0, Double.NaN).hashCode());<a name="line.86"></a>
<span class="sourceLineNo">087</span>        Vector3D u = new Vector3D(1, 2, 3);<a name="line.87"></a>
<span class="sourceLineNo">088</span>        Vector3D v = new Vector3D(1, 2, 3 + 10 * Precision.EPSILON);<a name="line.88"></a>
<span class="sourceLineNo">089</span>        Assert.assertTrue(u.hashCode() != v.hashCode());<a name="line.89"></a>
<span class="sourceLineNo">090</span>    }<a name="line.90"></a>
<span class="sourceLineNo">091</span><a name="line.91"></a>
<span class="sourceLineNo">092</span>    @Test<a name="line.92"></a>
<span class="sourceLineNo">093</span>    public void testInfinite() {<a name="line.93"></a>
<span class="sourceLineNo">094</span>        Assert.assertTrue(new Vector3D(1, 1, Double.NEGATIVE_INFINITY).isInfinite());<a name="line.94"></a>
<span class="sourceLineNo">095</span>        Assert.assertTrue(new Vector3D(1, Double.NEGATIVE_INFINITY, 1).isInfinite());<a name="line.95"></a>
<span class="sourceLineNo">096</span>        Assert.assertTrue(new Vector3D(Double.NEGATIVE_INFINITY, 1, 1).isInfinite());<a name="line.96"></a>
<span class="sourceLineNo">097</span>        Assert.assertFalse(new Vector3D(1, 1, 2).isInfinite());<a name="line.97"></a>
<span class="sourceLineNo">098</span>        Assert.assertFalse(new Vector3D(1, Double.NaN, Double.NEGATIVE_INFINITY).isInfinite());<a name="line.98"></a>
<span class="sourceLineNo">099</span>    }<a name="line.99"></a>
<span class="sourceLineNo">100</span><a name="line.100"></a>
<span class="sourceLineNo">101</span>    @Test<a name="line.101"></a>
<span class="sourceLineNo">102</span>    public void testNaN() {<a name="line.102"></a>
<span class="sourceLineNo">103</span>        Assert.assertTrue(new Vector3D(1, 1, Double.NaN).isNaN());<a name="line.103"></a>
<span class="sourceLineNo">104</span>        Assert.assertTrue(new Vector3D(1, Double.NaN, 1).isNaN());<a name="line.104"></a>
<span class="sourceLineNo">105</span>        Assert.assertTrue(new Vector3D(Double.NaN, 1, 1).isNaN());<a name="line.105"></a>
<span class="sourceLineNo">106</span>        Assert.assertFalse(new Vector3D(1, 1, 2).isNaN());<a name="line.106"></a>
<span class="sourceLineNo">107</span>        Assert.assertFalse(new Vector3D(1, 1, Double.NEGATIVE_INFINITY).isNaN());<a name="line.107"></a>
<span class="sourceLineNo">108</span>    }<a name="line.108"></a>
<span class="sourceLineNo">109</span><a name="line.109"></a>
<span class="sourceLineNo">110</span>    @Test<a name="line.110"></a>
<span class="sourceLineNo">111</span>    public void testToString() {<a name="line.111"></a>
<span class="sourceLineNo">112</span>        Assert.assertEquals("{3; 2; 1}", new Vector3D(3, 2, 1).toString());<a name="line.112"></a>
<span class="sourceLineNo">113</span>        NumberFormat format = new DecimalFormat("0.000", new DecimalFormatSymbols(Locale.US));<a name="line.113"></a>
<span class="sourceLineNo">114</span>        Assert.assertEquals("{3.000; 2.000; 1.000}", new Vector3D(3, 2, 1).toString(format));<a name="line.114"></a>
<span class="sourceLineNo">115</span>    }<a name="line.115"></a>
<span class="sourceLineNo">116</span><a name="line.116"></a>
<span class="sourceLineNo">117</span>    @Test(expected=DimensionMismatchException.class)<a name="line.117"></a>
<span class="sourceLineNo">118</span>    public void testWrongDimension() throws DimensionMismatchException {<a name="line.118"></a>
<span class="sourceLineNo">119</span>        new Vector3D(new double[] { 2,  5 });<a name="line.119"></a>
<span class="sourceLineNo">120</span>    }<a name="line.120"></a>
<span class="sourceLineNo">121</span><a name="line.121"></a>
<span class="sourceLineNo">122</span>    @Test<a name="line.122"></a>
<span class="sourceLineNo">123</span>    public void testCoordinates() {<a name="line.123"></a>
<span class="sourceLineNo">124</span>        Vector3D v = new Vector3D(1, 2, 3);<a name="line.124"></a>
<span class="sourceLineNo">125</span>        Assert.assertTrue(FastMath.abs(v.getX() - 1) &lt; 1.0e-12);<a name="line.125"></a>
<span class="sourceLineNo">126</span>        Assert.assertTrue(FastMath.abs(v.getY() - 2) &lt; 1.0e-12);<a name="line.126"></a>
<span class="sourceLineNo">127</span>        Assert.assertTrue(FastMath.abs(v.getZ() - 3) &lt; 1.0e-12);<a name="line.127"></a>
<span class="sourceLineNo">128</span>        double[] coordinates = v.toArray();<a name="line.128"></a>
<span class="sourceLineNo">129</span>        Assert.assertTrue(FastMath.abs(coordinates[0] - 1) &lt; 1.0e-12);<a name="line.129"></a>
<span class="sourceLineNo">130</span>        Assert.assertTrue(FastMath.abs(coordinates[1] - 2) &lt; 1.0e-12);<a name="line.130"></a>
<span class="sourceLineNo">131</span>        Assert.assertTrue(FastMath.abs(coordinates[2] - 3) &lt; 1.0e-12);<a name="line.131"></a>
<span class="sourceLineNo">132</span>    }<a name="line.132"></a>
<span class="sourceLineNo">133</span><a name="line.133"></a>
<span class="sourceLineNo">134</span>    @Test<a name="line.134"></a>
<span class="sourceLineNo">135</span>    public void testNorm1() {<a name="line.135"></a>
<span class="sourceLineNo">136</span>        Assert.assertEquals(0.0, Vector3D.ZERO.getNorm1(), 0);<a name="line.136"></a>
<span class="sourceLineNo">137</span>        Assert.assertEquals(6.0, new Vector3D(1, -2, 3).getNorm1(), 0);<a name="line.137"></a>
<span class="sourceLineNo">138</span>    }<a name="line.138"></a>
<span class="sourceLineNo">139</span><a name="line.139"></a>
<span class="sourceLineNo">140</span>    @Test<a name="line.140"></a>
<span class="sourceLineNo">141</span>    public void testNorm() {<a name="line.141"></a>
<span class="sourceLineNo">142</span>        Assert.assertEquals(0.0, Vector3D.ZERO.getNorm(), 0);<a name="line.142"></a>
<span class="sourceLineNo">143</span>        Assert.assertEquals(FastMath.sqrt(14), new Vector3D(1, 2, 3).getNorm(), 1.0e-12);<a name="line.143"></a>
<span class="sourceLineNo">144</span>    }<a name="line.144"></a>
<span class="sourceLineNo">145</span><a name="line.145"></a>
<span class="sourceLineNo">146</span>    @Test<a name="line.146"></a>
<span class="sourceLineNo">147</span>    public void testNormSq() {<a name="line.147"></a>
<span class="sourceLineNo">148</span>        Assert.assertEquals(0.0, new Vector3D(0, 0, 0).getNormSq(), 0);<a name="line.148"></a>
<span class="sourceLineNo">149</span>        Assert.assertEquals(14, new Vector3D(1, 2, 3).getNormSq(), 1.0e-12);<a name="line.149"></a>
<span class="sourceLineNo">150</span>    }<a name="line.150"></a>
<span class="sourceLineNo">151</span><a name="line.151"></a>
<span class="sourceLineNo">152</span>    @Test<a name="line.152"></a>
<span class="sourceLineNo">153</span>    public void testNormInf() {<a name="line.153"></a>
<span class="sourceLineNo">154</span>        Assert.assertEquals(0.0, Vector3D.ZERO.getNormInf(), 0);<a name="line.154"></a>
<span class="sourceLineNo">155</span>        Assert.assertEquals(3.0, new Vector3D(1, -2, 3).getNormInf(), 0);<a name="line.155"></a>
<span class="sourceLineNo">156</span>    }<a name="line.156"></a>
<span class="sourceLineNo">157</span><a name="line.157"></a>
<span class="sourceLineNo">158</span>    @Test<a name="line.158"></a>
<span class="sourceLineNo">159</span>    public void testDistance1() {<a name="line.159"></a>
<span class="sourceLineNo">160</span>        Vector3D v1 = new Vector3D(1, -2, 3);<a name="line.160"></a>
<span class="sourceLineNo">161</span>        Vector3D v2 = new Vector3D(-4, 2, 0);<a name="line.161"></a>
<span class="sourceLineNo">162</span>        Assert.assertEquals(0.0, Vector3D.distance1(Vector3D.MINUS_I, Vector3D.MINUS_I), 0);<a name="line.162"></a>
<span class="sourceLineNo">163</span>        Assert.assertEquals(12.0, Vector3D.distance1(v1, v2), 1.0e-12);<a name="line.163"></a>
<span class="sourceLineNo">164</span>        Assert.assertEquals(v1.subtract(v2).getNorm1(), Vector3D.distance1(v1, v2), 1.0e-12);<a name="line.164"></a>
<span class="sourceLineNo">165</span>    }<a name="line.165"></a>
<span class="sourceLineNo">166</span><a name="line.166"></a>
<span class="sourceLineNo">167</span>    @Test<a name="line.167"></a>
<span class="sourceLineNo">168</span>    public void testDistance() {<a name="line.168"></a>
<span class="sourceLineNo">169</span>        Vector3D v1 = new Vector3D(1, -2, 3);<a name="line.169"></a>
<span class="sourceLineNo">170</span>        Vector3D v2 = new Vector3D(-4, 2, 0);<a name="line.170"></a>
<span class="sourceLineNo">171</span>        Assert.assertEquals(0.0, Vector3D.distance(Vector3D.MINUS_I, Vector3D.MINUS_I), 0);<a name="line.171"></a>
<span class="sourceLineNo">172</span>        Assert.assertEquals(FastMath.sqrt(50), Vector3D.distance(v1, v2), 1.0e-12);<a name="line.172"></a>
<span class="sourceLineNo">173</span>        Assert.assertEquals(v1.subtract(v2).getNorm(), Vector3D.distance(v1, v2), 1.0e-12);<a name="line.173"></a>
<span class="sourceLineNo">174</span>    }<a name="line.174"></a>
<span class="sourceLineNo">175</span><a name="line.175"></a>
<span class="sourceLineNo">176</span>    @Test<a name="line.176"></a>
<span class="sourceLineNo">177</span>    public void testDistanceSq() {<a name="line.177"></a>
<span class="sourceLineNo">178</span>        Vector3D v1 = new Vector3D(1, -2, 3);<a name="line.178"></a>
<span class="sourceLineNo">179</span>        Vector3D v2 = new Vector3D(-4, 2, 0);<a name="line.179"></a>
<span class="sourceLineNo">180</span>        Assert.assertEquals(0.0, Vector3D.distanceSq(Vector3D.MINUS_I, Vector3D.MINUS_I), 0);<a name="line.180"></a>
<span class="sourceLineNo">181</span>        Assert.assertEquals(50.0, Vector3D.distanceSq(v1, v2), 1.0e-12);<a name="line.181"></a>
<span class="sourceLineNo">182</span>        Assert.assertEquals(Vector3D.distance(v1, v2) * Vector3D.distance(v1, v2),<a name="line.182"></a>
<span class="sourceLineNo">183</span>                            Vector3D.distanceSq(v1, v2), 1.0e-12);<a name="line.183"></a>
<span class="sourceLineNo">184</span>  }<a name="line.184"></a>
<span class="sourceLineNo">185</span><a name="line.185"></a>
<span class="sourceLineNo">186</span>    @Test<a name="line.186"></a>
<span class="sourceLineNo">187</span>    public void testDistanceInf() {<a name="line.187"></a>
<span class="sourceLineNo">188</span>        Vector3D v1 = new Vector3D(1, -2, 3);<a name="line.188"></a>
<span class="sourceLineNo">189</span>        Vector3D v2 = new Vector3D(-4, 2, 0);<a name="line.189"></a>
<span class="sourceLineNo">190</span>        Assert.assertEquals(0.0, Vector3D.distanceInf(Vector3D.MINUS_I, Vector3D.MINUS_I), 0);<a name="line.190"></a>
<span class="sourceLineNo">191</span>        Assert.assertEquals(5.0, Vector3D.distanceInf(v1, v2), 1.0e-12);<a name="line.191"></a>
<span class="sourceLineNo">192</span>        Assert.assertEquals(v1.subtract(v2).getNormInf(), Vector3D.distanceInf(v1, v2), 1.0e-12);<a name="line.192"></a>
<span class="sourceLineNo">193</span>    }<a name="line.193"></a>
<span class="sourceLineNo">194</span><a name="line.194"></a>
<span class="sourceLineNo">195</span>    @Test<a name="line.195"></a>
<span class="sourceLineNo">196</span>    public void testSubtract() {<a name="line.196"></a>
<span class="sourceLineNo">197</span>        Vector3D v1 = new Vector3D(1, 2, 3);<a name="line.197"></a>
<span class="sourceLineNo">198</span>        Vector3D v2 = new Vector3D(-3, -2, -1);<a name="line.198"></a>
<span class="sourceLineNo">199</span>        v1 = v1.subtract(v2);<a name="line.199"></a>
<span class="sourceLineNo">200</span>        checkVector(v1, 4, 4, 4);<a name="line.200"></a>
<span class="sourceLineNo">201</span><a name="line.201"></a>
<span class="sourceLineNo">202</span>        checkVector(v2.subtract(v1), -7, -6, -5);<a name="line.202"></a>
<span class="sourceLineNo">203</span>        checkVector(v2.subtract(3, v1), -15, -14, -13);<a name="line.203"></a>
<span class="sourceLineNo">204</span>    }<a name="line.204"></a>
<span class="sourceLineNo">205</span><a name="line.205"></a>
<span class="sourceLineNo">206</span>    @Test<a name="line.206"></a>
<span class="sourceLineNo">207</span>    public void testAdd() {<a name="line.207"></a>
<span class="sourceLineNo">208</span>        Vector3D v1 = new Vector3D(1, 2, 3);<a name="line.208"></a>
<span class="sourceLineNo">209</span>        Vector3D v2 = new Vector3D(-3, -2, -1);<a name="line.209"></a>
<span class="sourceLineNo">210</span>        v1 = v1.add(v2);<a name="line.210"></a>
<span class="sourceLineNo">211</span>        checkVector(v1, -2, 0, 2);<a name="line.211"></a>
<span class="sourceLineNo">212</span><a name="line.212"></a>
<span class="sourceLineNo">213</span>        checkVector(v2.add(v1), -5, -2, 1);<a name="line.213"></a>
<span class="sourceLineNo">214</span>        checkVector(v2.add(3, v1), -9, -2, 5);<a name="line.214"></a>
<span class="sourceLineNo">215</span>    }<a name="line.215"></a>
<span class="sourceLineNo">216</span><a name="line.216"></a>
<span class="sourceLineNo">217</span>    @Test<a name="line.217"></a>
<span class="sourceLineNo">218</span>    public void testScalarProduct() {<a name="line.218"></a>
<span class="sourceLineNo">219</span>        Vector3D v = new Vector3D(1, 2, 3);<a name="line.219"></a>
<span class="sourceLineNo">220</span>        v = v.scalarMultiply(3);<a name="line.220"></a>
<span class="sourceLineNo">221</span>        checkVector(v, 3, 6, 9);<a name="line.221"></a>
<span class="sourceLineNo">222</span><a name="line.222"></a>
<span class="sourceLineNo">223</span>        checkVector(v.scalarMultiply(0.5), 1.5, 3, 4.5);<a name="line.223"></a>
<span class="sourceLineNo">224</span>    }<a name="line.224"></a>
<span class="sourceLineNo">225</span><a name="line.225"></a>
<span class="sourceLineNo">226</span>    @Test<a name="line.226"></a>
<span class="sourceLineNo">227</span>    public void testVectorialProducts() {<a name="line.227"></a>
<span class="sourceLineNo">228</span>        Vector3D v1 = new Vector3D(2, 1, -4);<a name="line.228"></a>
<span class="sourceLineNo">229</span>        Vector3D v2 = new Vector3D(3, 1, -1);<a name="line.229"></a>
<span class="sourceLineNo">230</span><a name="line.230"></a>
<span class="sourceLineNo">231</span>        Assert.assertTrue(FastMath.abs(Vector3D.dotProduct(v1, v2) - 11) &lt; 1.0e-12);<a name="line.231"></a>
<span class="sourceLineNo">232</span><a name="line.232"></a>
<span class="sourceLineNo">233</span>        Vector3D v3 = Vector3D.crossProduct(v1, v2);<a name="line.233"></a>
<span class="sourceLineNo">234</span>        checkVector(v3, 3, -10, -1);<a name="line.234"></a>
<span class="sourceLineNo">235</span><a name="line.235"></a>
<span class="sourceLineNo">236</span>        Assert.assertTrue(FastMath.abs(Vector3D.dotProduct(v1, v3)) &lt; 1.0e-12);<a name="line.236"></a>
<span class="sourceLineNo">237</span>        Assert.assertTrue(FastMath.abs(Vector3D.dotProduct(v2, v3)) &lt; 1.0e-12);<a name="line.237"></a>
<span class="sourceLineNo">238</span>    }<a name="line.238"></a>
<span class="sourceLineNo">239</span><a name="line.239"></a>
<span class="sourceLineNo">240</span>    @Test<a name="line.240"></a>
<span class="sourceLineNo">241</span>    public void testCrossProductCancellation() {<a name="line.241"></a>
<span class="sourceLineNo">242</span>        Vector3D v1 = new Vector3D(9070467121.0, 4535233560.0, 1);<a name="line.242"></a>
<span class="sourceLineNo">243</span>        Vector3D v2 = new Vector3D(9070467123.0, 4535233561.0, 1);<a name="line.243"></a>
<span class="sourceLineNo">244</span>        checkVector(Vector3D.crossProduct(v1, v2), -1, 2, 1);<a name="line.244"></a>
<span class="sourceLineNo">245</span><a name="line.245"></a>
<span class="sourceLineNo">246</span>        double scale    = FastMath.scalb(1.0, 100);<a name="line.246"></a>
<span class="sourceLineNo">247</span>        Vector3D big1   = new Vector3D(scale, v1);<a name="line.247"></a>
<span class="sourceLineNo">248</span>        Vector3D small2 = new Vector3D(1 / scale, v2);<a name="line.248"></a>
<span class="sourceLineNo">249</span>        checkVector(Vector3D.crossProduct(big1, small2), -1, 2, 1);<a name="line.249"></a>
<span class="sourceLineNo">250</span><a name="line.250"></a>
<span class="sourceLineNo">251</span>    }<a name="line.251"></a>
<span class="sourceLineNo">252</span><a name="line.252"></a>
<span class="sourceLineNo">253</span>    @Test<a name="line.253"></a>
<span class="sourceLineNo">254</span>    public void testAngular() {<a name="line.254"></a>
<span class="sourceLineNo">255</span>        Assert.assertEquals(0,           Vector3D.PLUS_I.getAlpha(), 1.0e-10);<a name="line.255"></a>
<span class="sourceLineNo">256</span>        Assert.assertEquals(0,           Vector3D.PLUS_I.getDelta(), 1.0e-10);<a name="line.256"></a>
<span class="sourceLineNo">257</span>        Assert.assertEquals(FastMath.PI / 2, Vector3D.PLUS_J.getAlpha(), 1.0e-10);<a name="line.257"></a>
<span class="sourceLineNo">258</span>        Assert.assertEquals(0,           Vector3D.PLUS_J.getDelta(), 1.0e-10);<a name="line.258"></a>
<span class="sourceLineNo">259</span>        Assert.assertEquals(0,           Vector3D.PLUS_K.getAlpha(), 1.0e-10);<a name="line.259"></a>
<span class="sourceLineNo">260</span>        Assert.assertEquals(FastMath.PI / 2, Vector3D.PLUS_K.getDelta(), 1.0e-10);<a name="line.260"></a>
<span class="sourceLineNo">261</span>      <a name="line.261"></a>
<span class="sourceLineNo">262</span>        Vector3D u = new Vector3D(-1, 1, -1);<a name="line.262"></a>
<span class="sourceLineNo">263</span>        Assert.assertEquals(3 * FastMath.PI /4, u.getAlpha(), 1.0e-10);<a name="line.263"></a>
<span class="sourceLineNo">264</span>        Assert.assertEquals(-1.0 / FastMath.sqrt(3), FastMath.sin(u.getDelta()), 1.0e-10);<a name="line.264"></a>
<span class="sourceLineNo">265</span>    }<a name="line.265"></a>
<span class="sourceLineNo">266</span><a name="line.266"></a>
<span class="sourceLineNo">267</span>    @Test<a name="line.267"></a>
<span class="sourceLineNo">268</span>    public void testAngularSeparation() throws MathArithmeticException {<a name="line.268"></a>
<span class="sourceLineNo">269</span>        Vector3D v1 = new Vector3D(2, -1, 4);<a name="line.269"></a>
<span class="sourceLineNo">270</span><a name="line.270"></a>
<span class="sourceLineNo">271</span>        Vector3D  k = v1.normalize();<a name="line.271"></a>
<span class="sourceLineNo">272</span>        Vector3D  i = k.orthogonal();<a name="line.272"></a>
<span class="sourceLineNo">273</span>        Vector3D v2 = k.scalarMultiply(FastMath.cos(1.2)).add(i.scalarMultiply(FastMath.sin(1.2)));<a name="line.273"></a>
<span class="sourceLineNo">274</span><a name="line.274"></a>
<span class="sourceLineNo">275</span>        Assert.assertTrue(FastMath.abs(Vector3D.angle(v1, v2) - 1.2) &lt; 1.0e-12);<a name="line.275"></a>
<span class="sourceLineNo">276</span>  }<a name="line.276"></a>
<span class="sourceLineNo">277</span><a name="line.277"></a>
<span class="sourceLineNo">278</span>    @Test<a name="line.278"></a>
<span class="sourceLineNo">279</span>    public void testNormalize() throws MathArithmeticException {<a name="line.279"></a>
<span class="sourceLineNo">280</span>        Assert.assertEquals(1.0, new Vector3D(5, -4, 2).normalize().getNorm(), 1.0e-12);<a name="line.280"></a>
<span class="sourceLineNo">281</span>        try {<a name="line.281"></a>
<span class="sourceLineNo">282</span>            Vector3D.ZERO.normalize();<a name="line.282"></a>
<span class="sourceLineNo">283</span>            Assert.fail("an exception should have been thrown");<a name="line.283"></a>
<span class="sourceLineNo">284</span>        } catch (MathArithmeticException ae) {<a name="line.284"></a>
<span class="sourceLineNo">285</span>            // expected behavior<a name="line.285"></a>
<span class="sourceLineNo">286</span>        }<a name="line.286"></a>
<span class="sourceLineNo">287</span>    }<a name="line.287"></a>
<span class="sourceLineNo">288</span><a name="line.288"></a>
<span class="sourceLineNo">289</span>    @Test<a name="line.289"></a>
<span class="sourceLineNo">290</span>    public void testNegate() {<a name="line.290"></a>
<span class="sourceLineNo">291</span>        checkVector(new Vector3D(0.1, 2.5, 1.3).negate(), -0.1, -2.5, -1.3);<a name="line.291"></a>
<span class="sourceLineNo">292</span>    }<a name="line.292"></a>
<span class="sourceLineNo">293</span><a name="line.293"></a>
<span class="sourceLineNo">294</span>    @Test<a name="line.294"></a>
<span class="sourceLineNo">295</span>    public void testOrthogonal() throws MathArithmeticException {<a name="line.295"></a>
<span class="sourceLineNo">296</span>        Vector3D v1 = new Vector3D(0.1, 2.5, 1.3);<a name="line.296"></a>
<span class="sourceLineNo">297</span>        Assert.assertEquals(0.0, Vector3D.dotProduct(v1, v1.orthogonal()), 1.0e-12);<a name="line.297"></a>
<span class="sourceLineNo">298</span>        Vector3D v2 = new Vector3D(2.3, -0.003, 7.6);<a name="line.298"></a>
<span class="sourceLineNo">299</span>        Assert.assertEquals(0.0, Vector3D.dotProduct(v2, v2.orthogonal()), 1.0e-12);<a name="line.299"></a>
<span class="sourceLineNo">300</span>        Vector3D v3 = new Vector3D(-1.7, 1.4, 0.2);<a name="line.300"></a>
<span class="sourceLineNo">301</span>        Assert.assertEquals(0.0, Vector3D.dotProduct(v3, v3.orthogonal()), 1.0e-12);<a name="line.301"></a>
<span class="sourceLineNo">302</span>        Vector3D v4 = new Vector3D(4.2, 0.1, -1.8);<a name="line.302"></a>
<span class="sourceLineNo">303</span>        Assert.assertEquals(0.0, Vector3D.dotProduct(v4, v4.orthogonal()), 1.0e-12);<a name="line.303"></a>
<span class="sourceLineNo">304</span>        try {<a name="line.304"></a>
<span class="sourceLineNo">305</span>            new Vector3D(0, 0, 0).orthogonal();<a name="line.305"></a>
<span class="sourceLineNo">306</span>            Assert.fail("an exception should have been thrown");<a name="line.306"></a>
<span class="sourceLineNo">307</span>        } catch (MathArithmeticException ae) {<a name="line.307"></a>
<span class="sourceLineNo">308</span>            // expected behavior<a name="line.308"></a>
<span class="sourceLineNo">309</span>        }<a name="line.309"></a>
<span class="sourceLineNo">310</span>    }<a name="line.310"></a>
<span class="sourceLineNo">311</span>    @Test<a name="line.311"></a>
<span class="sourceLineNo">312</span>    public void testAngle() throws MathArithmeticException {<a name="line.312"></a>
<span class="sourceLineNo">313</span>        Assert.assertEquals(0.22572612855273393616,<a name="line.313"></a>
<span class="sourceLineNo">314</span>                            Vector3D.angle(new Vector3D(1, 2, 3), new Vector3D(4, 5, 6)),<a name="line.314"></a>
<span class="sourceLineNo">315</span>                            1.0e-12);<a name="line.315"></a>
<span class="sourceLineNo">316</span>        Assert.assertEquals(7.98595620686106654517199e-8,<a name="line.316"></a>
<span class="sourceLineNo">317</span>                            Vector3D.angle(new Vector3D(1, 2, 3), new Vector3D(2, 4, 6.000001)),<a name="line.317"></a>
<span class="sourceLineNo">318</span>                            1.0e-12);<a name="line.318"></a>
<span class="sourceLineNo">319</span>        Assert.assertEquals(3.14159257373023116985197793156,<a name="line.319"></a>
<span class="sourceLineNo">320</span>                            Vector3D.angle(new Vector3D(1, 2, 3), new Vector3D(-2, -4, -6.000001)),<a name="line.320"></a>
<span class="sourceLineNo">321</span>                            1.0e-12);<a name="line.321"></a>
<span class="sourceLineNo">322</span>        try {<a name="line.322"></a>
<span class="sourceLineNo">323</span>            Vector3D.angle(Vector3D.ZERO, Vector3D.PLUS_I);<a name="line.323"></a>
<span class="sourceLineNo">324</span>            Assert.fail("an exception should have been thrown");<a name="line.324"></a>
<span class="sourceLineNo">325</span>        } catch (MathArithmeticException ae) {<a name="line.325"></a>
<span class="sourceLineNo">326</span>            // expected behavior<a name="line.326"></a>
<span class="sourceLineNo">327</span>        }<a name="line.327"></a>
<span class="sourceLineNo">328</span>    }<a name="line.328"></a>
<span class="sourceLineNo">329</span><a name="line.329"></a>
<span class="sourceLineNo">330</span>    @Test<a name="line.330"></a>
<span class="sourceLineNo">331</span>    public void testAccurateDotProduct() {<a name="line.331"></a>
<span class="sourceLineNo">332</span>        // the following two vectors are nearly but not exactly orthogonal<a name="line.332"></a>
<span class="sourceLineNo">333</span>        // naive dot product (i.e. computing u1.x * u2.x + u1.y * u2.y + u1.z * u2.z<a name="line.333"></a>
<span class="sourceLineNo">334</span>        // leads to a result of 0.0, instead of the correct -1.855129...<a name="line.334"></a>
<span class="sourceLineNo">335</span>        Vector3D u1 = new Vector3D(-1321008684645961.0 /  268435456.0,<a name="line.335"></a>
<span class="sourceLineNo">336</span>                                   -5774608829631843.0 /  268435456.0,<a name="line.336"></a>
<span class="sourceLineNo">337</span>                                   -7645843051051357.0 / 8589934592.0);<a name="line.337"></a>
<span class="sourceLineNo">338</span>        Vector3D u2 = new Vector3D(-5712344449280879.0 /    2097152.0,<a name="line.338"></a>
<span class="sourceLineNo">339</span>                                   -4550117129121957.0 /    2097152.0,<a name="line.339"></a>
<span class="sourceLineNo">340</span>                                    8846951984510141.0 /     131072.0);<a name="line.340"></a>
<span class="sourceLineNo">341</span>        double sNaive = u1.getX() * u2.getX() + u1.getY() * u2.getY() + u1.getZ() * u2.getZ();<a name="line.341"></a>
<span class="sourceLineNo">342</span>        double sAccurate = u1.dotProduct(u2);<a name="line.342"></a>
<span class="sourceLineNo">343</span>        Assert.assertEquals(0.0, sNaive, 1.0e-30);<a name="line.343"></a>
<span class="sourceLineNo">344</span>        Assert.assertEquals(-2088690039198397.0 / 1125899906842624.0, sAccurate, 1.0e-16);<a name="line.344"></a>
<span class="sourceLineNo">345</span>    }<a name="line.345"></a>
<span class="sourceLineNo">346</span><a name="line.346"></a>
<span class="sourceLineNo">347</span>    @Test<a name="line.347"></a>
<span class="sourceLineNo">348</span>    public void testDotProduct() {<a name="line.348"></a>
<span class="sourceLineNo">349</span>        // we compare accurate versus naive dot product implementations<a name="line.349"></a>
<span class="sourceLineNo">350</span>        // on regular vectors (i.e. not extreme cases like in the previous test)<a name="line.350"></a>
<span class="sourceLineNo">351</span>        Well1024a random = new Well1024a(553267312521321234l);<a name="line.351"></a>
<span class="sourceLineNo">352</span>        for (int i = 0; i &lt; 10000; ++i) {<a name="line.352"></a>
<span class="sourceLineNo">353</span>            double ux = 10000 * random.nextDouble();<a name="line.353"></a>
<span class="sourceLineNo">354</span>            double uy = 10000 * random.nextDouble();<a name="line.354"></a>
<span class="sourceLineNo">355</span>            double uz = 10000 * random.nextDouble();<a name="line.355"></a>
<span class="sourceLineNo">356</span>            double vx = 10000 * random.nextDouble();<a name="line.356"></a>
<span class="sourceLineNo">357</span>            double vy = 10000 * random.nextDouble();<a name="line.357"></a>
<span class="sourceLineNo">358</span>            double vz = 10000 * random.nextDouble();<a name="line.358"></a>
<span class="sourceLineNo">359</span>            double sNaive = ux * vx + uy * vy + uz * vz;<a name="line.359"></a>
<span class="sourceLineNo">360</span>            double sAccurate = new Vector3D(ux, uy, uz).dotProduct(new Vector3D(vx, vy, vz));<a name="line.360"></a>
<span class="sourceLineNo">361</span>            Assert.assertEquals(sNaive, sAccurate, 2.5e-16 * sAccurate);<a name="line.361"></a>
<span class="sourceLineNo">362</span>        }<a name="line.362"></a>
<span class="sourceLineNo">363</span>    }<a name="line.363"></a>
<span class="sourceLineNo">364</span><a name="line.364"></a>
<span class="sourceLineNo">365</span>    @Test<a name="line.365"></a>
<span class="sourceLineNo">366</span>    public void testAccurateCrossProduct() {<a name="line.366"></a>
<span class="sourceLineNo">367</span>        // the vectors u1 and u2 are nearly but not exactly anti-parallel<a name="line.367"></a>
<span class="sourceLineNo">368</span>        // (7.31e-16 degrees from 180 degrees) naive cross product (i.e.<a name="line.368"></a>
<span class="sourceLineNo">369</span>        // computing u1.x * u2.x + u1.y * u2.y + u1.z * u2.z<a name="line.369"></a>
<span class="sourceLineNo">370</span>        // leads to a result of   [0.0009765, -0.0001220, -0.0039062],<a name="line.370"></a>
<span class="sourceLineNo">371</span>        // instead of the correct [0.0006913, -0.0001254, -0.0007909]<a name="line.371"></a>
<span class="sourceLineNo">372</span>        final Vector3D u1 = new Vector3D(-1321008684645961.0 /   268435456.0,<a name="line.372"></a>
<span class="sourceLineNo">373</span>                                         -5774608829631843.0 /   268435456.0,<a name="line.373"></a>
<span class="sourceLineNo">374</span>                                         -7645843051051357.0 /  8589934592.0);<a name="line.374"></a>
<span class="sourceLineNo">375</span>        final Vector3D u2 = new Vector3D( 1796571811118507.0 /  2147483648.0,<a name="line.375"></a>
<span class="sourceLineNo">376</span>                                          7853468008299307.0 /  2147483648.0,<a name="line.376"></a>
<span class="sourceLineNo">377</span>                                          2599586637357461.0 / 17179869184.0);<a name="line.377"></a>
<span class="sourceLineNo">378</span>        final Vector3D u3 = new Vector3D(12753243807587107.0 / 18446744073709551616.0, <a name="line.378"></a>
<span class="sourceLineNo">379</span>                                         -2313766922703915.0 / 18446744073709551616.0, <a name="line.379"></a>
<span class="sourceLineNo">380</span>                                          -227970081415313.0 /   288230376151711744.0);<a name="line.380"></a>
<span class="sourceLineNo">381</span>        Vector3D cNaive = new Vector3D(u1.getY() * u2.getZ() - u1.getZ() * u2.getY(),<a name="line.381"></a>
<span class="sourceLineNo">382</span>                                       u1.getZ() * u2.getX() - u1.getX() * u2.getZ(),<a name="line.382"></a>
<span class="sourceLineNo">383</span>                                       u1.getX() * u2.getY() - u1.getY() * u2.getX());<a name="line.383"></a>
<span class="sourceLineNo">384</span>        Vector3D cAccurate = u1.crossProduct(u2);<a name="line.384"></a>
<span class="sourceLineNo">385</span>        Assert.assertTrue(u3.distance(cNaive) &gt; 2.9 * u3.getNorm());<a name="line.385"></a>
<span class="sourceLineNo">386</span>        Assert.assertEquals(0.0, u3.distance(cAccurate), 1.0e-30 * cAccurate.getNorm());<a name="line.386"></a>
<span class="sourceLineNo">387</span>    }<a name="line.387"></a>
<span class="sourceLineNo">388</span><a name="line.388"></a>
<span class="sourceLineNo">389</span>    @Test<a name="line.389"></a>
<span class="sourceLineNo">390</span>    public void testCrossProduct() {<a name="line.390"></a>
<span class="sourceLineNo">391</span>        // we compare accurate versus naive cross product implementations<a name="line.391"></a>
<span class="sourceLineNo">392</span>        // on regular vectors (i.e. not extreme cases like in the previous test)<a name="line.392"></a>
<span class="sourceLineNo">393</span>        Well1024a random = new Well1024a(885362227452043214l);<a name="line.393"></a>
<span class="sourceLineNo">394</span>        for (int i = 0; i &lt; 10000; ++i) {<a name="line.394"></a>
<span class="sourceLineNo">395</span>            double ux = 10000 * random.nextDouble();<a name="line.395"></a>
<span class="sourceLineNo">396</span>            double uy = 10000 * random.nextDouble();<a name="line.396"></a>
<span class="sourceLineNo">397</span>            double uz = 10000 * random.nextDouble();<a name="line.397"></a>
<span class="sourceLineNo">398</span>            double vx = 10000 * random.nextDouble();<a name="line.398"></a>
<span class="sourceLineNo">399</span>            double vy = 10000 * random.nextDouble();<a name="line.399"></a>
<span class="sourceLineNo">400</span>            double vz = 10000 * random.nextDouble();<a name="line.400"></a>
<span class="sourceLineNo">401</span>            Vector3D cNaive = new Vector3D(uy * vz - uz * vy, uz * vx - ux * vz, ux * vy - uy * vx);<a name="line.401"></a>
<span class="sourceLineNo">402</span>            Vector3D cAccurate = new Vector3D(ux, uy, uz).crossProduct(new Vector3D(vx, vy, vz));<a name="line.402"></a>
<span class="sourceLineNo">403</span>            Assert.assertEquals(0.0, cAccurate.distance(cNaive), 6.0e-15 * cAccurate.getNorm());<a name="line.403"></a>
<span class="sourceLineNo">404</span>        }<a name="line.404"></a>
<span class="sourceLineNo">405</span>    }<a name="line.405"></a>
<span class="sourceLineNo">406</span><a name="line.406"></a>
<span class="sourceLineNo">407</span>    private void checkVector(Vector3D v, double x, double y, double z) {<a name="line.407"></a>
<span class="sourceLineNo">408</span>        Assert.assertEquals(x, v.getX(), 1.0e-12);<a name="line.408"></a>
<span class="sourceLineNo">409</span>        Assert.assertEquals(y, v.getY(), 1.0e-12);<a name="line.409"></a>
<span class="sourceLineNo">410</span>        Assert.assertEquals(z, v.getZ(), 1.0e-12);<a name="line.410"></a>
<span class="sourceLineNo">411</span>    }<a name="line.411"></a>
<span class="sourceLineNo">412</span>}<a name="line.412"></a>




























































</pre>
</div>
</body>
</html>
