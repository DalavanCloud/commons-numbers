<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span><a name="line.17"></a>
<span class="sourceLineNo">018</span>package org.apache.commons.math3.stat.inference;<a name="line.18"></a>
<span class="sourceLineNo">019</span><a name="line.19"></a>
<span class="sourceLineNo">020</span>import org.apache.commons.math3.distribution.NormalDistribution;<a name="line.20"></a>
<span class="sourceLineNo">021</span>import org.apache.commons.math3.distribution.UniformRealDistribution;<a name="line.21"></a>
<span class="sourceLineNo">022</span>import org.apache.commons.math3.random.Well19937c;<a name="line.22"></a>
<span class="sourceLineNo">023</span>import org.apache.commons.math3.util.FastMath;<a name="line.23"></a>
<span class="sourceLineNo">024</span>import org.junit.Assert;<a name="line.24"></a>
<span class="sourceLineNo">025</span>import org.junit.Test;<a name="line.25"></a>
<span class="sourceLineNo">026</span><a name="line.26"></a>
<span class="sourceLineNo">027</span>/**<a name="line.27"></a>
<span class="sourceLineNo">028</span> * Test cases for {@link KolmogorovSmirnovTest}.<a name="line.28"></a>
<span class="sourceLineNo">029</span> * <a name="line.29"></a>
<span class="sourceLineNo">030</span> * @since 3.3<a name="line.30"></a>
<span class="sourceLineNo">031</span> */<a name="line.31"></a>
<span class="sourceLineNo">032</span>public class KolmogorovSmirnovTestTest {<a name="line.32"></a>
<span class="sourceLineNo">033</span><a name="line.33"></a>
<span class="sourceLineNo">034</span>    protected static final double TOLERANCE = 10e-10;<a name="line.34"></a>
<span class="sourceLineNo">035</span><a name="line.35"></a>
<span class="sourceLineNo">036</span>    // Random N(0,1) values generated using R rnorm<a name="line.36"></a>
<span class="sourceLineNo">037</span>    protected static final double[] gaussian = {<a name="line.37"></a>
<span class="sourceLineNo">038</span>        0.26055895, -0.63665233, 1.51221323, 0.61246988, -0.03013003, -1.73025682, -0.51435805, 0.70494168, 0.18242945,<a name="line.38"></a>
<span class="sourceLineNo">039</span>        0.94734336, -0.04286604, -0.37931719, -1.07026403, -2.05861425, 0.11201862, 0.71400136, -0.52122185,<a name="line.39"></a>
<span class="sourceLineNo">040</span>        -0.02478725, -1.86811649, -1.79907688, 0.15046279, 1.32390193, 1.55889719, 1.83149171, -0.03948003,<a name="line.40"></a>
<span class="sourceLineNo">041</span>        -0.98579207, -0.76790540, 0.89080682, 0.19532153, 0.40692841, 0.15047336, -0.58546562, -0.39865469, 0.77604271,<a name="line.41"></a>
<span class="sourceLineNo">042</span>        -0.65188221, -1.80368554, 0.65273365, -0.75283102, -1.91022150, -0.07640869, -1.08681188, -0.89270600,<a name="line.42"></a>
<span class="sourceLineNo">043</span>        2.09017508, 0.43907981, 0.10744033, -0.70961218, 1.15707300, 0.44560525, -2.04593349, 0.53816843, -0.08366640,<a name="line.43"></a>
<span class="sourceLineNo">044</span>        0.24652218, 1.80549401, -0.99220707, -1.14589408, -0.27170290, -0.49696855, 0.00968353, -1.87113545,<a name="line.44"></a>
<span class="sourceLineNo">045</span>        -1.91116529, 0.97151891, -0.73576115, -0.59437029, 0.72148436, 0.01747695, -0.62601157, -1.00971538,<a name="line.45"></a>
<span class="sourceLineNo">046</span>        -1.42691397, 1.03250131, -0.30672627, -0.15353992, -1.19976069, -0.68364218, 0.37525652, -0.46592881,<a name="line.46"></a>
<span class="sourceLineNo">047</span>        -0.52116168, -0.17162202, 1.04679215, 0.25165971, -0.04125231, -0.23756244, -0.93389975, 0.75551407,<a name="line.47"></a>
<span class="sourceLineNo">048</span>        0.08347445, -0.27482228, -0.4717632, -0.1867746, -0.1166976, 0.5763333, 0.1307952, 0.7630584, -0.3616248,<a name="line.48"></a>
<span class="sourceLineNo">049</span>        2.1383790, -0.7946630, 0.0231885, 0.7919195, 1.6057144, -0.3802508, 0.1229078, 1.5252901, -0.8543149, 0.3025040<a name="line.49"></a>
<span class="sourceLineNo">050</span>    };<a name="line.50"></a>
<span class="sourceLineNo">051</span><a name="line.51"></a>
<span class="sourceLineNo">052</span>    // Random N(0, 1.6) values generated using R rnorm<a name="line.52"></a>
<span class="sourceLineNo">053</span>    protected static final double[] gaussian2 = {<a name="line.53"></a>
<span class="sourceLineNo">054</span>        2.88041498038308, -0.632349445671017, 0.402121295225571, 0.692626364613243, 1.30693446815426,<a name="line.54"></a>
<span class="sourceLineNo">055</span>        -0.714176317131286, -0.233169206599583, 1.09113298322107, -1.53149079994305, 1.23259966205809,<a name="line.55"></a>
<span class="sourceLineNo">056</span>        1.01389927412503, 0.0143898711497477, -0.512813545447559, 2.79364360835469, 0.662008875538092,<a name="line.56"></a>
<span class="sourceLineNo">057</span>        1.04861546834788, -0.321280099931466, 0.250296656278743, 1.75820367603736, -2.31433523590905,<a name="line.57"></a>
<span class="sourceLineNo">058</span>        -0.462694696086403, 0.187725700950191, -2.24410950019152, 2.83473751105445, 0.252460174391016,<a name="line.58"></a>
<span class="sourceLineNo">059</span>        1.39051945380281, -1.56270144203134, 0.998522814471644, -1.50147469080896, 0.145307533554146,<a name="line.59"></a>
<span class="sourceLineNo">060</span>        0.469089457043406, -0.0914780723809334, -0.123446939266548, -0.610513388160565, -3.71548343891957,<a name="line.60"></a>
<span class="sourceLineNo">061</span>        -0.329577317349478, -0.312973794075871, 2.02051909758923, 2.85214308266271, 0.0193222002327237,<a name="line.61"></a>
<span class="sourceLineNo">062</span>        -0.0322422268266562, 0.514736012106768, 0.231484953375887, -2.22468798953629, 1.42197716075595,<a name="line.62"></a>
<span class="sourceLineNo">063</span>        2.69988043856357, 0.0443757119128293, 0.721536984407798, -0.0445688839903234, -0.294372724550705,<a name="line.63"></a>
<span class="sourceLineNo">064</span>        0.234041580912698, -0.868973119365727, 1.3524893453845, -0.931054600134503, -0.263514296006792,<a name="line.64"></a>
<span class="sourceLineNo">065</span>        0.540949457402918, -0.882544288773685, -0.34148675747989, 1.56664494810034, 2.19850536566584,<a name="line.65"></a>
<span class="sourceLineNo">066</span>        -0.667972122928022, -0.70889669526203, -0.00251758193079668, 2.39527162977682, -2.7559594317269,<a name="line.66"></a>
<span class="sourceLineNo">067</span>        -0.547393502656671, -2.62144031572617, 2.81504147017922, -1.02036850201042, -1.00713927602786,<a name="line.67"></a>
<span class="sourceLineNo">068</span>        -0.520197775122254, 1.00625480138649, 2.46756916531313, 1.64364743727799, 0.704545210648595,<a name="line.68"></a>
<span class="sourceLineNo">069</span>        -0.425885789416992, -1.78387854908546, -0.286783886710481, 0.404183648369076, -0.369324280845769,<a name="line.69"></a>
<span class="sourceLineNo">070</span>        -0.0391185138840443, 2.41257787857293, 2.49744281317859, -0.826964496939021, -0.792555379958975,<a name="line.70"></a>
<span class="sourceLineNo">071</span>        1.81097685787403, -0.475014580016638, 1.23387615291805, 0.646615294802053, 1.88496377454523, 1.20390698380814,<a name="line.71"></a>
<span class="sourceLineNo">072</span>        -0.27812153371728, 2.50149494533101, 0.406964323253817, -1.72253451309982, 1.98432494184332, 2.2223658560333,<a name="line.72"></a>
<span class="sourceLineNo">073</span>        0.393086362404685, -0.504073151377089, -0.0484610869883821<a name="line.73"></a>
<span class="sourceLineNo">074</span>    };<a name="line.74"></a>
<span class="sourceLineNo">075</span><a name="line.75"></a>
<span class="sourceLineNo">076</span>    // Random uniform (0, 1) generated using R runif<a name="line.76"></a>
<span class="sourceLineNo">077</span>    protected static final double[] uniform = {<a name="line.77"></a>
<span class="sourceLineNo">078</span>        0.7930305, 0.6424382, 0.8747699, 0.7156518, 0.1845909, 0.2022326, 0.4877206, 0.8928752, 0.2293062, 0.4222006,<a name="line.78"></a>
<span class="sourceLineNo">079</span>        0.1610459, 0.2830535, 0.9946345, 0.7329499, 0.26411126, 0.87958133, 0.29827437, 0.39185988, 0.38351185,<a name="line.79"></a>
<span class="sourceLineNo">080</span>        0.36359611, 0.48646472, 0.05577866, 0.56152250, 0.52672013, 0.13171783, 0.95864085, 0.03060207, 0.33514887,<a name="line.80"></a>
<span class="sourceLineNo">081</span>        0.72508148, 0.38901437, 0.9978665, 0.5981300, 0.1065388, 0.7036991, 0.1071584, 0.4423963, 0.1107071, 0.6437221,<a name="line.81"></a>
<span class="sourceLineNo">082</span>        0.58523872, 0.05044634, 0.65999539, 0.37367260, 0.73270024, 0.47473755, 0.74661163, 0.50765549, 0.05377347,<a name="line.82"></a>
<span class="sourceLineNo">083</span>        0.40998009, 0.55235182, 0.21361998, 0.63117971, 0.18109222, 0.89153510, 0.23203248, 0.6177106, 0.6856418,<a name="line.83"></a>
<span class="sourceLineNo">084</span>        0.2158557, 0.9870501, 0.2036914, 0.2100311, 0.9065020, 0.7459159, 0.56631790, 0.06753629, 0.39684629,<a name="line.84"></a>
<span class="sourceLineNo">085</span>        0.52504615, 0.14199103, 0.78551120, 0.90503321, 0.80452362, 0.9960115, 0.8172592, 0.5831134, 0.8794187,<a name="line.85"></a>
<span class="sourceLineNo">086</span>        0.2021501, 0.2923505, 0.9561824, 0.8792248, 0.85201008, 0.02945562, 0.26200374, 0.11382818, 0.17238856,<a name="line.86"></a>
<span class="sourceLineNo">087</span>        0.36449473, 0.69688273, 0.96216330, 0.4859432, 0.4503438, 0.1917656, 0.8357845, 0.9957812, 0.4633570,<a name="line.87"></a>
<span class="sourceLineNo">088</span>        0.8654599, 0.4597996, 0.68190289, 0.58887855, 0.09359396, 0.98081979, 0.73659533, 0.89344777, 0.18903099,<a name="line.88"></a>
<span class="sourceLineNo">089</span>        0.97660425<a name="line.89"></a>
<span class="sourceLineNo">090</span>    };<a name="line.90"></a>
<span class="sourceLineNo">091</span><a name="line.91"></a>
<span class="sourceLineNo">092</span>    /** Unit normal distribution, unit normal data */<a name="line.92"></a>
<span class="sourceLineNo">093</span>    @Test<a name="line.93"></a>
<span class="sourceLineNo">094</span>    public void testOneSampleGaussianGaussian() {<a name="line.94"></a>
<span class="sourceLineNo">095</span>        final KolmogorovSmirnovTest test = new KolmogorovSmirnovTest();<a name="line.95"></a>
<span class="sourceLineNo">096</span>        final NormalDistribution unitNormal = new NormalDistribution(0d, 1d);<a name="line.96"></a>
<span class="sourceLineNo">097</span>        // Uncomment to run exact test - takes about a minute. Same value is used in R tests and for<a name="line.97"></a>
<span class="sourceLineNo">098</span>        // approx.<a name="line.98"></a>
<span class="sourceLineNo">099</span>        // Assert.assertEquals(0.3172069207622391, test.kolmogorovSmirnovTest(unitNormal, gaussian,<a name="line.99"></a>
<span class="sourceLineNo">100</span>        // true), TOLERANCE);<a name="line.100"></a>
<span class="sourceLineNo">101</span>        Assert.assertEquals(0.3172069207622391, test.kolmogorovSmirnovTest(unitNormal, gaussian, false), TOLERANCE);<a name="line.101"></a>
<span class="sourceLineNo">102</span>        Assert.assertFalse(test.kolmogorovSmirnovTest(unitNormal, gaussian, 0.05));<a name="line.102"></a>
<span class="sourceLineNo">103</span>        Assert.assertEquals(0.0932947561266756, test.kolmogorovSmirnovStatistic(unitNormal, gaussian), TOLERANCE);<a name="line.103"></a>
<span class="sourceLineNo">104</span>    }<a name="line.104"></a>
<span class="sourceLineNo">105</span><a name="line.105"></a>
<span class="sourceLineNo">106</span>    /** Unit normal distribution, unit normal data, small dataset */<a name="line.106"></a>
<span class="sourceLineNo">107</span>    @Test<a name="line.107"></a>
<span class="sourceLineNo">108</span>    public void testOneSampleGaussianGaussianSmallSample() {<a name="line.108"></a>
<span class="sourceLineNo">109</span>        final KolmogorovSmirnovTest test = new KolmogorovSmirnovTest();<a name="line.109"></a>
<span class="sourceLineNo">110</span>        final NormalDistribution unitNormal = new NormalDistribution(0d, 1d);<a name="line.110"></a>
<span class="sourceLineNo">111</span>        final double[] shortGaussian = new double[50];<a name="line.111"></a>
<span class="sourceLineNo">112</span>        System.arraycopy(gaussian, 0, shortGaussian, 0, 50);<a name="line.112"></a>
<span class="sourceLineNo">113</span>        Assert.assertEquals(0.683736463728347, test.kolmogorovSmirnovTest(unitNormal, shortGaussian, false), TOLERANCE);<a name="line.113"></a>
<span class="sourceLineNo">114</span>        Assert.assertFalse(test.kolmogorovSmirnovTest(unitNormal, gaussian, 0.05));<a name="line.114"></a>
<span class="sourceLineNo">115</span>        Assert.assertEquals(0.09820779969463278, test.kolmogorovSmirnovStatistic(unitNormal, shortGaussian), TOLERANCE);<a name="line.115"></a>
<span class="sourceLineNo">116</span>    }<a name="line.116"></a>
<span class="sourceLineNo">117</span><a name="line.117"></a>
<span class="sourceLineNo">118</span>    /** Unit normal distribution, uniform data */<a name="line.118"></a>
<span class="sourceLineNo">119</span>    @Test<a name="line.119"></a>
<span class="sourceLineNo">120</span>    public void testOneSampleGaussianUniform() {<a name="line.120"></a>
<span class="sourceLineNo">121</span>        final KolmogorovSmirnovTest test = new KolmogorovSmirnovTest();<a name="line.121"></a>
<span class="sourceLineNo">122</span>        final NormalDistribution unitNormal = new NormalDistribution(0d, 1d);<a name="line.122"></a>
<span class="sourceLineNo">123</span>        // Uncomment to run exact test - takes a long time. Same value is used in R tests and for<a name="line.123"></a>
<span class="sourceLineNo">124</span>        // approx.<a name="line.124"></a>
<span class="sourceLineNo">125</span>        // Assert.assertEquals(0.3172069207622391, test.kolmogorovSmirnovTest(unitNormal, uniform,<a name="line.125"></a>
<span class="sourceLineNo">126</span>        // true), TOLERANCE);<a name="line.126"></a>
<span class="sourceLineNo">127</span>        Assert.assertEquals(8.881784197001252E-16, test.kolmogorovSmirnovTest(unitNormal, uniform, false), TOLERANCE);<a name="line.127"></a>
<span class="sourceLineNo">128</span>        Assert.assertFalse(test.kolmogorovSmirnovTest(unitNormal, gaussian, 0.05));<a name="line.128"></a>
<span class="sourceLineNo">129</span>        Assert.assertEquals(0.5117493931609258, test.kolmogorovSmirnovStatistic(unitNormal, uniform), TOLERANCE);<a name="line.129"></a>
<span class="sourceLineNo">130</span>    }<a name="line.130"></a>
<span class="sourceLineNo">131</span><a name="line.131"></a>
<span class="sourceLineNo">132</span>    /** Uniform distribution, uniform data */<a name="line.132"></a>
<span class="sourceLineNo">133</span>    // @Test - takes about 6 seconds, uncomment for<a name="line.133"></a>
<span class="sourceLineNo">134</span>    public void testOneSampleUniformUniform() {<a name="line.134"></a>
<span class="sourceLineNo">135</span>        final KolmogorovSmirnovTest test = new KolmogorovSmirnovTest();<a name="line.135"></a>
<span class="sourceLineNo">136</span>        final UniformRealDistribution unif = new UniformRealDistribution(-0.5, 0.5);<a name="line.136"></a>
<span class="sourceLineNo">137</span>        Assert.assertEquals(8.881784197001252E-16, test.kolmogorovSmirnovTest(unif, uniform, false), TOLERANCE);<a name="line.137"></a>
<span class="sourceLineNo">138</span>        Assert.assertTrue(test.kolmogorovSmirnovTest(unif, uniform, 0.05));<a name="line.138"></a>
<span class="sourceLineNo">139</span>        Assert.assertEquals(0.5400666982352942, test.kolmogorovSmirnovStatistic(unif, uniform), TOLERANCE);<a name="line.139"></a>
<span class="sourceLineNo">140</span>    }<a name="line.140"></a>
<span class="sourceLineNo">141</span><a name="line.141"></a>
<span class="sourceLineNo">142</span>    /** Uniform distribution, uniform data, small dataset */<a name="line.142"></a>
<span class="sourceLineNo">143</span>    @Test<a name="line.143"></a>
<span class="sourceLineNo">144</span>    public void testOneSampleUniformUniformSmallSample() {<a name="line.144"></a>
<span class="sourceLineNo">145</span>        final KolmogorovSmirnovTest test = new KolmogorovSmirnovTest();<a name="line.145"></a>
<span class="sourceLineNo">146</span>        final UniformRealDistribution unif = new UniformRealDistribution(-0.5, 0.5);<a name="line.146"></a>
<span class="sourceLineNo">147</span>        final double[] shortUniform = new double[20];<a name="line.147"></a>
<span class="sourceLineNo">148</span>        System.arraycopy(uniform, 0, shortUniform, 0, 20);<a name="line.148"></a>
<span class="sourceLineNo">149</span>        Assert.assertEquals(4.117594598618268E-9, test.kolmogorovSmirnovTest(unif, shortUniform, false), TOLERANCE);<a name="line.149"></a>
<span class="sourceLineNo">150</span>        Assert.assertTrue(test.kolmogorovSmirnovTest(unif, shortUniform, 0.05));<a name="line.150"></a>
<span class="sourceLineNo">151</span>        Assert.assertEquals(0.6610459, test.kolmogorovSmirnovStatistic(unif, shortUniform), TOLERANCE);<a name="line.151"></a>
<span class="sourceLineNo">152</span>    }<a name="line.152"></a>
<span class="sourceLineNo">153</span><a name="line.153"></a>
<span class="sourceLineNo">154</span>    /** Uniform distribution, unit normal dataset */<a name="line.154"></a>
<span class="sourceLineNo">155</span>    @Test<a name="line.155"></a>
<span class="sourceLineNo">156</span>    public void testOneSampleUniformGaussian() {<a name="line.156"></a>
<span class="sourceLineNo">157</span>        final KolmogorovSmirnovTest test = new KolmogorovSmirnovTest();<a name="line.157"></a>
<span class="sourceLineNo">158</span>        final UniformRealDistribution unif = new UniformRealDistribution(-0.5, 0.5);<a name="line.158"></a>
<span class="sourceLineNo">159</span>        // Value was obtained via exact test, validated against R. Running exact test takes a long<a name="line.159"></a>
<span class="sourceLineNo">160</span>        // time.<a name="line.160"></a>
<span class="sourceLineNo">161</span>        Assert.assertEquals(4.9405812774239166E-11, test.kolmogorovSmirnovTest(unif, gaussian, false), TOLERANCE);<a name="line.161"></a>
<span class="sourceLineNo">162</span>        Assert.assertTrue(test.kolmogorovSmirnovTest(unif, gaussian, 0.05));<a name="line.162"></a>
<span class="sourceLineNo">163</span>        Assert.assertEquals(0.3401058049019608, test.kolmogorovSmirnovStatistic(unif, gaussian), TOLERANCE);<a name="line.163"></a>
<span class="sourceLineNo">164</span>    }<a name="line.164"></a>
<span class="sourceLineNo">165</span><a name="line.165"></a>
<span class="sourceLineNo">166</span>    /** Small samples - exact p-value, checked against R */<a name="line.166"></a>
<span class="sourceLineNo">167</span>    @Test<a name="line.167"></a>
<span class="sourceLineNo">168</span>    public void testTwoSampleSmallSampleExact() {<a name="line.168"></a>
<span class="sourceLineNo">169</span>        final KolmogorovSmirnovTest test = new KolmogorovSmirnovTest();<a name="line.169"></a>
<span class="sourceLineNo">170</span>        final double[] smallSample1 = {<a name="line.170"></a>
<span class="sourceLineNo">171</span>            6, 7, 9, 13, 19, 21, 22, 23, 24<a name="line.171"></a>
<span class="sourceLineNo">172</span>        };<a name="line.172"></a>
<span class="sourceLineNo">173</span>        final double[] smallSample2 = {<a name="line.173"></a>
<span class="sourceLineNo">174</span>            10, 11, 12, 16, 20, 27, 28, 32, 44, 54<a name="line.174"></a>
<span class="sourceLineNo">175</span>        };<a name="line.175"></a>
<span class="sourceLineNo">176</span>        // Reference values from R, version 2.15.3 - R uses non-strict inequality in null hypothesis<a name="line.176"></a>
<span class="sourceLineNo">177</span>        Assert<a name="line.177"></a>
<span class="sourceLineNo">178</span>            .assertEquals(0.105577085453247, test.kolmogorovSmirnovTest(smallSample1, smallSample2, false), TOLERANCE);<a name="line.178"></a>
<span class="sourceLineNo">179</span>        Assert.assertEquals(0.5, test.kolmogorovSmirnovStatistic(smallSample1, smallSample2), TOLERANCE);<a name="line.179"></a>
<span class="sourceLineNo">180</span>    }<a name="line.180"></a>
<span class="sourceLineNo">181</span><a name="line.181"></a>
<span class="sourceLineNo">182</span>    /**<a name="line.182"></a>
<span class="sourceLineNo">183</span>     * Checks exact p-value computations using critical values from Table 9 in V.K Rohatgi, An<a name="line.183"></a>
<span class="sourceLineNo">184</span>     * Introduction to Probability and Mathematical Statistics, Wiley, 1976, ISBN 0-471-73135-8.<a name="line.184"></a>
<span class="sourceLineNo">185</span>     */<a name="line.185"></a>
<span class="sourceLineNo">186</span>    @Test<a name="line.186"></a>
<span class="sourceLineNo">187</span>    public void testTwoSampleExactP() {<a name="line.187"></a>
<span class="sourceLineNo">188</span>        checkExactTable(4, 6, 5d / 6d, 0.01d);<a name="line.188"></a>
<span class="sourceLineNo">189</span>        checkExactTable(4, 7, 17d / 28d, 0.2d);<a name="line.189"></a>
<span class="sourceLineNo">190</span>        checkExactTable(6, 7, 29d / 42d, 0.05d);<a name="line.190"></a>
<span class="sourceLineNo">191</span>        checkExactTable(4, 10, 7d / 10d, 0.05d);<a name="line.191"></a>
<span class="sourceLineNo">192</span>        checkExactTable(5, 15, 11d / 15d, 0.02d);<a name="line.192"></a>
<span class="sourceLineNo">193</span>        checkExactTable(9, 10, 31d / 45d, 0.01d);<a name="line.193"></a>
<span class="sourceLineNo">194</span>        checkExactTable(7, 10, 43d / 70d, 0.05d);<a name="line.194"></a>
<span class="sourceLineNo">195</span>    }<a name="line.195"></a>
<span class="sourceLineNo">196</span><a name="line.196"></a>
<span class="sourceLineNo">197</span>    @Test<a name="line.197"></a>
<span class="sourceLineNo">198</span>    public void testTwoSampleApproximateCritialValues() {<a name="line.198"></a>
<span class="sourceLineNo">199</span>        final double tol = .01;<a name="line.199"></a>
<span class="sourceLineNo">200</span>        final double[] alpha = {<a name="line.200"></a>
<span class="sourceLineNo">201</span>            0.10, 0.05, 0.025, 0.01, 0.005, 0.001<a name="line.201"></a>
<span class="sourceLineNo">202</span>        };<a name="line.202"></a>
<span class="sourceLineNo">203</span>        // From Wikipedia KS article - TODO: get (and test) more precise values<a name="line.203"></a>
<span class="sourceLineNo">204</span>        final double[] c = {<a name="line.204"></a>
<span class="sourceLineNo">205</span>            1.22, 1.36, 1.48, 1.63, 1.73, 1.95<a name="line.205"></a>
<span class="sourceLineNo">206</span>        };<a name="line.206"></a>
<span class="sourceLineNo">207</span>        final int k[] = {<a name="line.207"></a>
<span class="sourceLineNo">208</span>            60, 100, 500<a name="line.208"></a>
<span class="sourceLineNo">209</span>        };<a name="line.209"></a>
<span class="sourceLineNo">210</span>        double n;<a name="line.210"></a>
<span class="sourceLineNo">211</span>        double m;<a name="line.211"></a>
<span class="sourceLineNo">212</span>        for (int i = 0; i &lt; k.length; i++) {<a name="line.212"></a>
<span class="sourceLineNo">213</span>            for (int j = 0; j &lt; i; j++) {<a name="line.213"></a>
<span class="sourceLineNo">214</span>                n = k[i];<a name="line.214"></a>
<span class="sourceLineNo">215</span>                m = k[j];<a name="line.215"></a>
<span class="sourceLineNo">216</span>                for (int l = 0; l &lt; alpha.length; l++) {<a name="line.216"></a>
<span class="sourceLineNo">217</span>                    final double dCrit = c[l] * FastMath.sqrt((n + m) / (n * m));<a name="line.217"></a>
<span class="sourceLineNo">218</span>                    checkApproximateTable(k[i], k[j], dCrit, alpha[l], tol);<a name="line.218"></a>
<span class="sourceLineNo">219</span>                }<a name="line.219"></a>
<span class="sourceLineNo">220</span>            }<a name="line.220"></a>
<span class="sourceLineNo">221</span>        }<a name="line.221"></a>
<span class="sourceLineNo">222</span>    }<a name="line.222"></a>
<span class="sourceLineNo">223</span>    <a name="line.223"></a>
<span class="sourceLineNo">224</span>    @Test<a name="line.224"></a>
<span class="sourceLineNo">225</span>    public void testPelzGoodApproximation() {<a name="line.225"></a>
<span class="sourceLineNo">226</span>        KolmogorovSmirnovTest ksTest = new KolmogorovSmirnovTest();<a name="line.226"></a>
<span class="sourceLineNo">227</span>        final double d[] = {0.15, 0.20, 0.25, 0.3, 0.35, 0.4};<a name="line.227"></a>
<span class="sourceLineNo">228</span>        final int n[] = {141, 150, 180, 220, 1000};<a name="line.228"></a>
<span class="sourceLineNo">229</span>        // Reference values computed using the Pelz method from<a name="line.229"></a>
<span class="sourceLineNo">230</span>        // http://simul.iro.umontreal.ca/ksdir/KolmogorovSmirnovDist.java<a name="line.230"></a>
<span class="sourceLineNo">231</span>        final double ref[] = {<a name="line.231"></a>
<span class="sourceLineNo">232</span>            0.9968940168727819, 0.9979326624184857, 0.9994677598604506, 0.9999128354780209, 0.9999999999998661,<a name="line.232"></a>
<span class="sourceLineNo">233</span>            0.9999797514476236, 0.9999902122242081, 0.9999991327060908, 0.9999999657681911, 0.9999999999977929,<a name="line.233"></a>
<span class="sourceLineNo">234</span>            0.9999999706444976, 0.9999999906571532, 0.9999999997949596, 0.999999999998745, 0.9999999999993876,<a name="line.234"></a>
<span class="sourceLineNo">235</span>            0.9999999999916627, 0.9999999999984447, 0.9999999999999936, 0.999999999999341, 0.9999999999971508,<a name="line.235"></a>
<span class="sourceLineNo">236</span>            0.9999999999999877, 0.9999999999999191, 0.9999999999999254, 0.9999999999998178, 0.9999999999917788,<a name="line.236"></a>
<span class="sourceLineNo">237</span>            0.9999999999998556, 0.9999999999992014, 0.9999999999988859, 0.9999999999999325, 0.9999999999821726<a name="line.237"></a>
<span class="sourceLineNo">238</span>        };<a name="line.238"></a>
<span class="sourceLineNo">239</span>        <a name="line.239"></a>
<span class="sourceLineNo">240</span>        final double tol = 10e-15;<a name="line.240"></a>
<span class="sourceLineNo">241</span>        int k = 0;<a name="line.241"></a>
<span class="sourceLineNo">242</span>        for (int i = 0; i &lt; 6; i++) {<a name="line.242"></a>
<span class="sourceLineNo">243</span>            for (int j = 0; j &lt; 5; j++, k++) {<a name="line.243"></a>
<span class="sourceLineNo">244</span>                Assert.assertEquals(ref[k], ksTest.pelzGood(d[i], n[j]), tol);<a name="line.244"></a>
<span class="sourceLineNo">245</span>            }<a name="line.245"></a>
<span class="sourceLineNo">246</span>        }<a name="line.246"></a>
<span class="sourceLineNo">247</span>    }<a name="line.247"></a>
<span class="sourceLineNo">248</span><a name="line.248"></a>
<span class="sourceLineNo">249</span>    /** Verifies large sample approximate p values against R */<a name="line.249"></a>
<span class="sourceLineNo">250</span>    @Test<a name="line.250"></a>
<span class="sourceLineNo">251</span>    public void testTwoSampleApproximateP() {<a name="line.251"></a>
<span class="sourceLineNo">252</span>        final KolmogorovSmirnovTest test = new KolmogorovSmirnovTest();<a name="line.252"></a>
<span class="sourceLineNo">253</span>        // Reference values from R, version 2.15.3<a name="line.253"></a>
<span class="sourceLineNo">254</span>        Assert.assertEquals(0.0319983962391632, test.kolmogorovSmirnovTest(gaussian, gaussian2), TOLERANCE);<a name="line.254"></a>
<span class="sourceLineNo">255</span>        Assert.assertEquals(0.202352941176471, test.kolmogorovSmirnovStatistic(gaussian, gaussian2), TOLERANCE);<a name="line.255"></a>
<span class="sourceLineNo">256</span>    }<a name="line.256"></a>
<span class="sourceLineNo">257</span>    <a name="line.257"></a>
<span class="sourceLineNo">258</span>    /** <a name="line.258"></a>
<span class="sourceLineNo">259</span>     * MATH-1181<a name="line.259"></a>
<span class="sourceLineNo">260</span>     * Verify that large sample method is selected for sample product &gt; Integer.MAX_VALUE<a name="line.260"></a>
<span class="sourceLineNo">261</span>     * (integer overflow in sample product)<a name="line.261"></a>
<span class="sourceLineNo">262</span>     */<a name="line.262"></a>
<span class="sourceLineNo">263</span>    @Test(timeout=5000)<a name="line.263"></a>
<span class="sourceLineNo">264</span>    public void testTwoSampleProductSizeOverflow() {<a name="line.264"></a>
<span class="sourceLineNo">265</span>        final int n = 50000;<a name="line.265"></a>
<span class="sourceLineNo">266</span>        Assert.assertTrue(n * n &lt; 0);<a name="line.266"></a>
<span class="sourceLineNo">267</span>        double[] x = new double[n];<a name="line.267"></a>
<span class="sourceLineNo">268</span>        double[] y = new double[n];<a name="line.268"></a>
<span class="sourceLineNo">269</span>        final KolmogorovSmirnovTest test = new KolmogorovSmirnovTest();<a name="line.269"></a>
<span class="sourceLineNo">270</span>        Assert.assertFalse(Double.isNaN(test.kolmogorovSmirnovTest(x, y)));<a name="line.270"></a>
<span class="sourceLineNo">271</span>    }<a name="line.271"></a>
<span class="sourceLineNo">272</span>    <a name="line.272"></a>
<span class="sourceLineNo">273</span><a name="line.273"></a>
<span class="sourceLineNo">274</span>    /**<a name="line.274"></a>
<span class="sourceLineNo">275</span>     * Verifies that Monte Carlo simulation gives results close to exact p values. This test is a<a name="line.275"></a>
<span class="sourceLineNo">276</span>     * little long-running (more than two minutes on a fast machine), so is disabled by default.<a name="line.276"></a>
<span class="sourceLineNo">277</span>     */<a name="line.277"></a>
<span class="sourceLineNo">278</span>    // @Test<a name="line.278"></a>
<span class="sourceLineNo">279</span>    public void testTwoSampleMonteCarlo() {<a name="line.279"></a>
<span class="sourceLineNo">280</span>        final KolmogorovSmirnovTest test = new KolmogorovSmirnovTest(new Well19937c(1000));<a name="line.280"></a>
<span class="sourceLineNo">281</span>        final int sampleSize = 14;<a name="line.281"></a>
<span class="sourceLineNo">282</span>        final double tol = .001;<a name="line.282"></a>
<span class="sourceLineNo">283</span>        final double[] shortUniform = new double[sampleSize];<a name="line.283"></a>
<span class="sourceLineNo">284</span>        System.arraycopy(uniform, 0, shortUniform, 0, sampleSize);<a name="line.284"></a>
<span class="sourceLineNo">285</span>        final double[] shortGaussian = new double[sampleSize];<a name="line.285"></a>
<span class="sourceLineNo">286</span>        final double[] shortGaussian2 = new double[sampleSize];<a name="line.286"></a>
<span class="sourceLineNo">287</span>        System.arraycopy(gaussian, 0, shortGaussian, 0, sampleSize);<a name="line.287"></a>
<span class="sourceLineNo">288</span>        System.arraycopy(gaussian, 10, shortGaussian2, 0, sampleSize);<a name="line.288"></a>
<span class="sourceLineNo">289</span>        final double[] d = {<a name="line.289"></a>
<span class="sourceLineNo">290</span>            test.kolmogorovSmirnovStatistic(shortGaussian, shortUniform),<a name="line.290"></a>
<span class="sourceLineNo">291</span>            test.kolmogorovSmirnovStatistic(shortGaussian2, shortGaussian)<a name="line.291"></a>
<span class="sourceLineNo">292</span>        };<a name="line.292"></a>
<span class="sourceLineNo">293</span>        for (double dv : d) {<a name="line.293"></a>
<span class="sourceLineNo">294</span>            double exactPStrict = test.exactP(dv, sampleSize, sampleSize, true);<a name="line.294"></a>
<span class="sourceLineNo">295</span>            double exactPNonStrict = test.exactP(dv, sampleSize, sampleSize, false);<a name="line.295"></a>
<span class="sourceLineNo">296</span>            double montePStrict = test.monteCarloP(dv, sampleSize, sampleSize, true,<a name="line.296"></a>
<span class="sourceLineNo">297</span>                                                   KolmogorovSmirnovTest.MONTE_CARLO_ITERATIONS);<a name="line.297"></a>
<span class="sourceLineNo">298</span>            double montePNonStrict = test.monteCarloP(dv, sampleSize, sampleSize, false,<a name="line.298"></a>
<span class="sourceLineNo">299</span>                                                      KolmogorovSmirnovTest.MONTE_CARLO_ITERATIONS);<a name="line.299"></a>
<span class="sourceLineNo">300</span>            Assert.assertEquals(exactPStrict, montePStrict, tol);<a name="line.300"></a>
<span class="sourceLineNo">301</span>            Assert.assertEquals(exactPNonStrict, montePNonStrict, tol);<a name="line.301"></a>
<span class="sourceLineNo">302</span>        }<a name="line.302"></a>
<span class="sourceLineNo">303</span>    }<a name="line.303"></a>
<span class="sourceLineNo">304</span><a name="line.304"></a>
<span class="sourceLineNo">305</span>    /**<a name="line.305"></a>
<span class="sourceLineNo">306</span>     * Verifies the inequality exactP(criticalValue, n, m, true) &lt; alpha &lt; exactP(criticalValue, n,<a name="line.306"></a>
<span class="sourceLineNo">307</span>     * m, false).<a name="line.307"></a>
<span class="sourceLineNo">308</span>     * <a name="line.308"></a>
<span class="sourceLineNo">309</span>     * Note that the validity of this check depends on the fact that alpha lies strictly between two<a name="line.309"></a>
<span class="sourceLineNo">310</span>     * attained values of the distribution and that criticalValue is one of the attained values. The<a name="line.310"></a>
<span class="sourceLineNo">311</span>     * critical value table (reference below) uses attained values. This test therefore also<a name="line.311"></a>
<span class="sourceLineNo">312</span>     * verifies that criticalValue is attained.<a name="line.312"></a>
<span class="sourceLineNo">313</span>     * <a name="line.313"></a>
<span class="sourceLineNo">314</span>     * @param n first sample size<a name="line.314"></a>
<span class="sourceLineNo">315</span>     * @param m second sample size<a name="line.315"></a>
<span class="sourceLineNo">316</span>     * @param criticalValue critical value<a name="line.316"></a>
<span class="sourceLineNo">317</span>     * @param alpha significance level<a name="line.317"></a>
<span class="sourceLineNo">318</span>     */<a name="line.318"></a>
<span class="sourceLineNo">319</span>    private void checkExactTable(int n, int m, double criticalValue, double alpha) {<a name="line.319"></a>
<span class="sourceLineNo">320</span>        final KolmogorovSmirnovTest test = new KolmogorovSmirnovTest();<a name="line.320"></a>
<span class="sourceLineNo">321</span>        Assert.assertTrue(test.exactP(criticalValue, n, m, true) &lt; alpha);<a name="line.321"></a>
<span class="sourceLineNo">322</span>        Assert.assertTrue(test.exactP(criticalValue, n, m, false) &gt; alpha);<a name="line.322"></a>
<span class="sourceLineNo">323</span>    }<a name="line.323"></a>
<span class="sourceLineNo">324</span><a name="line.324"></a>
<span class="sourceLineNo">325</span>    /**<a name="line.325"></a>
<span class="sourceLineNo">326</span>     * Verifies that approximateP(criticalValue, n, m) is within epsilon of alpha.<a name="line.326"></a>
<span class="sourceLineNo">327</span>     * <a name="line.327"></a>
<span class="sourceLineNo">328</span>     * @param n first sample size<a name="line.328"></a>
<span class="sourceLineNo">329</span>     * @param m second sample size<a name="line.329"></a>
<span class="sourceLineNo">330</span>     * @param criticalValue critical value (from table)<a name="line.330"></a>
<span class="sourceLineNo">331</span>     * @param alpha significance level<a name="line.331"></a>
<span class="sourceLineNo">332</span>     * @param epsilon tolerance<a name="line.332"></a>
<span class="sourceLineNo">333</span>     */<a name="line.333"></a>
<span class="sourceLineNo">334</span>    private void checkApproximateTable(int n, int m, double criticalValue, double alpha, double epsilon) {<a name="line.334"></a>
<span class="sourceLineNo">335</span>        final KolmogorovSmirnovTest test = new KolmogorovSmirnovTest();<a name="line.335"></a>
<span class="sourceLineNo">336</span>        Assert.assertEquals(alpha, test.approximateP(criticalValue, n, m), epsilon);<a name="line.336"></a>
<span class="sourceLineNo">337</span>    }<a name="line.337"></a>
<span class="sourceLineNo">338</span>    <a name="line.338"></a>
<span class="sourceLineNo">339</span>}<a name="line.339"></a>




























































</pre>
</div>
</body>
</html>
