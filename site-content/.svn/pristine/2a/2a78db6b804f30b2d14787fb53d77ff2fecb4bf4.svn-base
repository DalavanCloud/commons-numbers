<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span><a name="line.17"></a>
<span class="sourceLineNo">018</span>package org.apache.commons.math3.optimization;<a name="line.18"></a>
<span class="sourceLineNo">019</span><a name="line.19"></a>
<span class="sourceLineNo">020</span><a name="line.20"></a>
<span class="sourceLineNo">021</span>import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;<a name="line.21"></a>
<span class="sourceLineNo">022</span>import org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction;<a name="line.22"></a>
<span class="sourceLineNo">023</span>import org.apache.commons.math3.exception.MathIllegalStateException;<a name="line.23"></a>
<span class="sourceLineNo">024</span>import org.apache.commons.math3.linear.BlockRealMatrix;<a name="line.24"></a>
<span class="sourceLineNo">025</span>import org.apache.commons.math3.linear.RealMatrix;<a name="line.25"></a>
<span class="sourceLineNo">026</span>import org.apache.commons.math3.optimization.general.GaussNewtonOptimizer;<a name="line.26"></a>
<span class="sourceLineNo">027</span>import org.apache.commons.math3.random.GaussianRandomGenerator;<a name="line.27"></a>
<span class="sourceLineNo">028</span>import org.apache.commons.math3.random.JDKRandomGenerator;<a name="line.28"></a>
<span class="sourceLineNo">029</span>import org.apache.commons.math3.random.RandomVectorGenerator;<a name="line.29"></a>
<span class="sourceLineNo">030</span>import org.apache.commons.math3.random.UncorrelatedRandomVectorGenerator;<a name="line.30"></a>
<span class="sourceLineNo">031</span>import org.junit.Assert;<a name="line.31"></a>
<span class="sourceLineNo">032</span>import org.junit.Test;<a name="line.32"></a>
<span class="sourceLineNo">033</span><a name="line.33"></a>
<span class="sourceLineNo">034</span>/**<a name="line.34"></a>
<span class="sourceLineNo">035</span> * &lt;p&gt;Some of the unit tests are re-implementations of the MINPACK &lt;a<a name="line.35"></a>
<span class="sourceLineNo">036</span> * href="http://www.netlib.org/minpack/ex/file17"&gt;file17&lt;/a&gt; and &lt;a<a name="line.36"></a>
<span class="sourceLineNo">037</span> * href="http://www.netlib.org/minpack/ex/file22"&gt;file22&lt;/a&gt; test files.<a name="line.37"></a>
<span class="sourceLineNo">038</span> * The redistribution policy for MINPACK is available &lt;a<a name="line.38"></a>
<span class="sourceLineNo">039</span> * href="http://www.netlib.org/minpack/disclaimer"&gt;here&lt;/a&gt;, for<a name="line.39"></a>
<span class="sourceLineNo">040</span> * convenience, it is reproduced below.&lt;/p&gt;<a name="line.40"></a>
<span class="sourceLineNo">041</span><a name="line.41"></a>
<span class="sourceLineNo">042</span> * &lt;table border="0" width="80%" cellpadding="10" align="center" bgcolor="#E0E0E0"&gt;<a name="line.42"></a>
<span class="sourceLineNo">043</span> * &lt;tr&gt;&lt;td&gt;<a name="line.43"></a>
<span class="sourceLineNo">044</span> *    Minpack Copyright Notice (1999) University of Chicago.<a name="line.44"></a>
<span class="sourceLineNo">045</span> *    All rights reserved<a name="line.45"></a>
<span class="sourceLineNo">046</span> * &lt;/td&gt;&lt;/tr&gt;<a name="line.46"></a>
<span class="sourceLineNo">047</span> * &lt;tr&gt;&lt;td&gt;<a name="line.47"></a>
<span class="sourceLineNo">048</span> * Redistribution and use in source and binary forms, with or without<a name="line.48"></a>
<span class="sourceLineNo">049</span> * modification, are permitted provided that the following conditions<a name="line.49"></a>
<span class="sourceLineNo">050</span> * are met:<a name="line.50"></a>
<span class="sourceLineNo">051</span> * &lt;ol&gt;<a name="line.51"></a>
<span class="sourceLineNo">052</span> *  &lt;li&gt;Redistributions of source code must retain the above copyright<a name="line.52"></a>
<span class="sourceLineNo">053</span> *      notice, this list of conditions and the following disclaimer.&lt;/li&gt;<a name="line.53"></a>
<span class="sourceLineNo">054</span> * &lt;li&gt;Redistributions in binary form must reproduce the above<a name="line.54"></a>
<span class="sourceLineNo">055</span> *     copyright notice, this list of conditions and the following<a name="line.55"></a>
<span class="sourceLineNo">056</span> *     disclaimer in the documentation and/or other materials provided<a name="line.56"></a>
<span class="sourceLineNo">057</span> *     with the distribution.&lt;/li&gt;<a name="line.57"></a>
<span class="sourceLineNo">058</span> * &lt;li&gt;The end-user documentation included with the redistribution, if any,<a name="line.58"></a>
<span class="sourceLineNo">059</span> *     must include the following acknowledgment:<a name="line.59"></a>
<span class="sourceLineNo">060</span> *     &lt;code&gt;This product includes software developed by the University of<a name="line.60"></a>
<span class="sourceLineNo">061</span> *           Chicago, as Operator of Argonne National Laboratory.&lt;/code&gt;<a name="line.61"></a>
<span class="sourceLineNo">062</span> *     Alternately, this acknowledgment may appear in the software itself,<a name="line.62"></a>
<span class="sourceLineNo">063</span> *     if and wherever such third-party acknowledgments normally appear.&lt;/li&gt;<a name="line.63"></a>
<span class="sourceLineNo">064</span> * &lt;li&gt;&lt;strong&gt;WARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED "AS IS"<a name="line.64"></a>
<span class="sourceLineNo">065</span> *     WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE<a name="line.65"></a>
<span class="sourceLineNo">066</span> *     UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND<a name="line.66"></a>
<span class="sourceLineNo">067</span> *     THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR<a name="line.67"></a>
<span class="sourceLineNo">068</span> *     IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES<a name="line.68"></a>
<span class="sourceLineNo">069</span> *     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE<a name="line.69"></a>
<span class="sourceLineNo">070</span> *     OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY<a name="line.70"></a>
<span class="sourceLineNo">071</span> *     OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR<a name="line.71"></a>
<span class="sourceLineNo">072</span> *     USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF<a name="line.72"></a>
<span class="sourceLineNo">073</span> *     THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)<a name="line.73"></a>
<span class="sourceLineNo">074</span> *     DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION<a name="line.74"></a>
<span class="sourceLineNo">075</span> *     UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL<a name="line.75"></a>
<span class="sourceLineNo">076</span> *     BE CORRECTED.&lt;/strong&gt;&lt;/li&gt;<a name="line.76"></a>
<span class="sourceLineNo">077</span> * &lt;li&gt;&lt;strong&gt;LIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT<a name="line.77"></a>
<span class="sourceLineNo">078</span> *     HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF<a name="line.78"></a>
<span class="sourceLineNo">079</span> *     ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,<a name="line.79"></a>
<span class="sourceLineNo">080</span> *     INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF<a name="line.80"></a>
<span class="sourceLineNo">081</span> *     ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF<a name="line.81"></a>
<span class="sourceLineNo">082</span> *     PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER<a name="line.82"></a>
<span class="sourceLineNo">083</span> *     SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT<a name="line.83"></a>
<span class="sourceLineNo">084</span> *     (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,<a name="line.84"></a>
<span class="sourceLineNo">085</span> *     EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE<a name="line.85"></a>
<span class="sourceLineNo">086</span> *     POSSIBILITY OF SUCH LOSS OR DAMAGES.&lt;/strong&gt;&lt;/li&gt;<a name="line.86"></a>
<span class="sourceLineNo">087</span> * &lt;ol&gt;&lt;/td&gt;&lt;/tr&gt;<a name="line.87"></a>
<span class="sourceLineNo">088</span> * &lt;/table&gt;<a name="line.88"></a>
<span class="sourceLineNo">089</span><a name="line.89"></a>
<span class="sourceLineNo">090</span> * @author Argonne National Laboratory. MINPACK project. March 1980 (original fortran minpack tests)<a name="line.90"></a>
<span class="sourceLineNo">091</span> * @author Burton S. Garbow (original fortran minpack tests)<a name="line.91"></a>
<span class="sourceLineNo">092</span> * @author Kenneth E. Hillstrom (original fortran minpack tests)<a name="line.92"></a>
<span class="sourceLineNo">093</span> * @author Jorge J. More (original fortran minpack tests)<a name="line.93"></a>
<span class="sourceLineNo">094</span> * @author Luc Maisonobe (non-minpack tests and minpack tests Java translation)<a name="line.94"></a>
<span class="sourceLineNo">095</span> */<a name="line.95"></a>
<span class="sourceLineNo">096</span>@Deprecated<a name="line.96"></a>
<span class="sourceLineNo">097</span>public class MultivariateDifferentiableVectorMultiStartOptimizerTest {<a name="line.97"></a>
<span class="sourceLineNo">098</span><a name="line.98"></a>
<span class="sourceLineNo">099</span>    @Test<a name="line.99"></a>
<span class="sourceLineNo">100</span>    public void testTrivial() {<a name="line.100"></a>
<span class="sourceLineNo">101</span>        LinearProblem problem =<a name="line.101"></a>
<span class="sourceLineNo">102</span>            new LinearProblem(new double[][] { { 2 } }, new double[] { 3 });<a name="line.102"></a>
<span class="sourceLineNo">103</span>        // TODO: the wrapper around GaussNewtonOptimizer is a temporary hack for<a name="line.103"></a>
<span class="sourceLineNo">104</span>        // version 3.1 of the library. It should be removed when GaussNewtonOptimizer<a name="line.104"></a>
<span class="sourceLineNo">105</span>        // will officialy be declared as implementing MultivariateDifferentiableVectorOptimizer<a name="line.105"></a>
<span class="sourceLineNo">106</span>        MultivariateDifferentiableVectorOptimizer underlyingOptimizer =<a name="line.106"></a>
<span class="sourceLineNo">107</span>                new MultivariateDifferentiableVectorOptimizer() {<a name="line.107"></a>
<span class="sourceLineNo">108</span>            private GaussNewtonOptimizer gn =<a name="line.108"></a>
<span class="sourceLineNo">109</span>                    new GaussNewtonOptimizer(true,<a name="line.109"></a>
<span class="sourceLineNo">110</span>                                             new SimpleVectorValueChecker(1.0e-6, 1.0e-6));<a name="line.110"></a>
<span class="sourceLineNo">111</span><a name="line.111"></a>
<span class="sourceLineNo">112</span>            public PointVectorValuePair optimize(int maxEval,<a name="line.112"></a>
<span class="sourceLineNo">113</span>                                                 MultivariateDifferentiableVectorFunction f,<a name="line.113"></a>
<span class="sourceLineNo">114</span>                                                 double[] target,<a name="line.114"></a>
<span class="sourceLineNo">115</span>                                                 double[] weight,<a name="line.115"></a>
<span class="sourceLineNo">116</span>                                                 double[] startPoint) {<a name="line.116"></a>
<span class="sourceLineNo">117</span>                return gn.optimize(maxEval, f, target, weight, startPoint);<a name="line.117"></a>
<span class="sourceLineNo">118</span>            }<a name="line.118"></a>
<span class="sourceLineNo">119</span><a name="line.119"></a>
<span class="sourceLineNo">120</span>            public int getMaxEvaluations() {<a name="line.120"></a>
<span class="sourceLineNo">121</span>                return gn.getMaxEvaluations();<a name="line.121"></a>
<span class="sourceLineNo">122</span>            }<a name="line.122"></a>
<span class="sourceLineNo">123</span><a name="line.123"></a>
<span class="sourceLineNo">124</span>            public int getEvaluations() {<a name="line.124"></a>
<span class="sourceLineNo">125</span>                return gn.getEvaluations();<a name="line.125"></a>
<span class="sourceLineNo">126</span>            }<a name="line.126"></a>
<span class="sourceLineNo">127</span><a name="line.127"></a>
<span class="sourceLineNo">128</span>            public ConvergenceChecker&lt;PointVectorValuePair&gt; getConvergenceChecker() {<a name="line.128"></a>
<span class="sourceLineNo">129</span>                return gn.getConvergenceChecker();<a name="line.129"></a>
<span class="sourceLineNo">130</span>            }<a name="line.130"></a>
<span class="sourceLineNo">131</span>        };<a name="line.131"></a>
<span class="sourceLineNo">132</span>        JDKRandomGenerator g = new JDKRandomGenerator();<a name="line.132"></a>
<span class="sourceLineNo">133</span>        g.setSeed(16069223052l);<a name="line.133"></a>
<span class="sourceLineNo">134</span>        RandomVectorGenerator generator =<a name="line.134"></a>
<span class="sourceLineNo">135</span>            new UncorrelatedRandomVectorGenerator(1, new GaussianRandomGenerator(g));<a name="line.135"></a>
<span class="sourceLineNo">136</span>        MultivariateDifferentiableVectorMultiStartOptimizer optimizer =<a name="line.136"></a>
<span class="sourceLineNo">137</span>            new MultivariateDifferentiableVectorMultiStartOptimizer(underlyingOptimizer,<a name="line.137"></a>
<span class="sourceLineNo">138</span>                                                                       10, generator);<a name="line.138"></a>
<span class="sourceLineNo">139</span><a name="line.139"></a>
<span class="sourceLineNo">140</span>        // no optima before first optimization attempt<a name="line.140"></a>
<span class="sourceLineNo">141</span>        try {<a name="line.141"></a>
<span class="sourceLineNo">142</span>            optimizer.getOptima();<a name="line.142"></a>
<span class="sourceLineNo">143</span>            Assert.fail("an exception should have been thrown");<a name="line.143"></a>
<span class="sourceLineNo">144</span>        } catch (MathIllegalStateException ise) {<a name="line.144"></a>
<span class="sourceLineNo">145</span>            // expected<a name="line.145"></a>
<span class="sourceLineNo">146</span>        }<a name="line.146"></a>
<span class="sourceLineNo">147</span>        PointVectorValuePair optimum =<a name="line.147"></a>
<span class="sourceLineNo">148</span>            optimizer.optimize(100, problem, problem.target, new double[] { 1 }, new double[] { 0 });<a name="line.148"></a>
<span class="sourceLineNo">149</span>        Assert.assertEquals(1.5, optimum.getPoint()[0], 1.0e-10);<a name="line.149"></a>
<span class="sourceLineNo">150</span>        Assert.assertEquals(3.0, optimum.getValue()[0], 1.0e-10);<a name="line.150"></a>
<span class="sourceLineNo">151</span>        PointVectorValuePair[] optima = optimizer.getOptima();<a name="line.151"></a>
<span class="sourceLineNo">152</span>        Assert.assertEquals(10, optima.length);<a name="line.152"></a>
<span class="sourceLineNo">153</span>        for (int i = 0; i &lt; optima.length; ++i) {<a name="line.153"></a>
<span class="sourceLineNo">154</span>            Assert.assertEquals(1.5, optima[i].getPoint()[0], 1.0e-10);<a name="line.154"></a>
<span class="sourceLineNo">155</span>            Assert.assertEquals(3.0, optima[i].getValue()[0], 1.0e-10);<a name="line.155"></a>
<span class="sourceLineNo">156</span>        }<a name="line.156"></a>
<span class="sourceLineNo">157</span>        Assert.assertTrue(optimizer.getEvaluations() &gt; 20);<a name="line.157"></a>
<span class="sourceLineNo">158</span>        Assert.assertTrue(optimizer.getEvaluations() &lt; 50);<a name="line.158"></a>
<span class="sourceLineNo">159</span>        Assert.assertEquals(100, optimizer.getMaxEvaluations());<a name="line.159"></a>
<span class="sourceLineNo">160</span>    }<a name="line.160"></a>
<span class="sourceLineNo">161</span><a name="line.161"></a>
<span class="sourceLineNo">162</span>    @Test(expected=TestException.class)<a name="line.162"></a>
<span class="sourceLineNo">163</span>    public void testNoOptimum() {<a name="line.163"></a>
<span class="sourceLineNo">164</span><a name="line.164"></a>
<span class="sourceLineNo">165</span>        // TODO: the wrapper around GaussNewtonOptimizer is a temporary hack for<a name="line.165"></a>
<span class="sourceLineNo">166</span>        // version 3.1 of the library. It should be removed when GaussNewtonOptimizer<a name="line.166"></a>
<span class="sourceLineNo">167</span>        // will officialy be declared as implementing MultivariateDifferentiableVectorOptimizer<a name="line.167"></a>
<span class="sourceLineNo">168</span>        MultivariateDifferentiableVectorOptimizer underlyingOptimizer =<a name="line.168"></a>
<span class="sourceLineNo">169</span>                new MultivariateDifferentiableVectorOptimizer() {<a name="line.169"></a>
<span class="sourceLineNo">170</span>            private GaussNewtonOptimizer gn =<a name="line.170"></a>
<span class="sourceLineNo">171</span>                    new GaussNewtonOptimizer(true,<a name="line.171"></a>
<span class="sourceLineNo">172</span>                                             new SimpleVectorValueChecker(1.0e-6, 1.0e-6));<a name="line.172"></a>
<span class="sourceLineNo">173</span><a name="line.173"></a>
<span class="sourceLineNo">174</span>            public PointVectorValuePair optimize(int maxEval,<a name="line.174"></a>
<span class="sourceLineNo">175</span>                                                 MultivariateDifferentiableVectorFunction f,<a name="line.175"></a>
<span class="sourceLineNo">176</span>                                                 double[] target,<a name="line.176"></a>
<span class="sourceLineNo">177</span>                                                 double[] weight,<a name="line.177"></a>
<span class="sourceLineNo">178</span>                                                 double[] startPoint) {<a name="line.178"></a>
<span class="sourceLineNo">179</span>                return gn.optimize(maxEval, f, target, weight, startPoint);<a name="line.179"></a>
<span class="sourceLineNo">180</span>            }<a name="line.180"></a>
<span class="sourceLineNo">181</span><a name="line.181"></a>
<span class="sourceLineNo">182</span>            public int getMaxEvaluations() {<a name="line.182"></a>
<span class="sourceLineNo">183</span>                return gn.getMaxEvaluations();<a name="line.183"></a>
<span class="sourceLineNo">184</span>            }<a name="line.184"></a>
<span class="sourceLineNo">185</span><a name="line.185"></a>
<span class="sourceLineNo">186</span>            public int getEvaluations() {<a name="line.186"></a>
<span class="sourceLineNo">187</span>                return gn.getEvaluations();<a name="line.187"></a>
<span class="sourceLineNo">188</span>            }<a name="line.188"></a>
<span class="sourceLineNo">189</span><a name="line.189"></a>
<span class="sourceLineNo">190</span>            public ConvergenceChecker&lt;PointVectorValuePair&gt; getConvergenceChecker() {<a name="line.190"></a>
<span class="sourceLineNo">191</span>                return gn.getConvergenceChecker();<a name="line.191"></a>
<span class="sourceLineNo">192</span>            }<a name="line.192"></a>
<span class="sourceLineNo">193</span>        };<a name="line.193"></a>
<span class="sourceLineNo">194</span>        JDKRandomGenerator g = new JDKRandomGenerator();<a name="line.194"></a>
<span class="sourceLineNo">195</span>        g.setSeed(12373523445l);<a name="line.195"></a>
<span class="sourceLineNo">196</span>        RandomVectorGenerator generator =<a name="line.196"></a>
<span class="sourceLineNo">197</span>            new UncorrelatedRandomVectorGenerator(1, new GaussianRandomGenerator(g));<a name="line.197"></a>
<span class="sourceLineNo">198</span>        MultivariateDifferentiableVectorMultiStartOptimizer optimizer =<a name="line.198"></a>
<span class="sourceLineNo">199</span>            new MultivariateDifferentiableVectorMultiStartOptimizer(underlyingOptimizer,<a name="line.199"></a>
<span class="sourceLineNo">200</span>                                                                       10, generator);<a name="line.200"></a>
<span class="sourceLineNo">201</span>        optimizer.optimize(100, new MultivariateDifferentiableVectorFunction() {<a name="line.201"></a>
<span class="sourceLineNo">202</span>            public double[] value(double[] point) {<a name="line.202"></a>
<span class="sourceLineNo">203</span>                throw new TestException();<a name="line.203"></a>
<span class="sourceLineNo">204</span>            }<a name="line.204"></a>
<span class="sourceLineNo">205</span>            public DerivativeStructure[] value(DerivativeStructure[] point) {<a name="line.205"></a>
<span class="sourceLineNo">206</span>                return point;<a name="line.206"></a>
<span class="sourceLineNo">207</span>            }<a name="line.207"></a>
<span class="sourceLineNo">208</span>            }, new double[] { 2 }, new double[] { 1 }, new double[] { 0 });<a name="line.208"></a>
<span class="sourceLineNo">209</span>    }<a name="line.209"></a>
<span class="sourceLineNo">210</span><a name="line.210"></a>
<span class="sourceLineNo">211</span>    private static class TestException extends RuntimeException {<a name="line.211"></a>
<span class="sourceLineNo">212</span>        private static final long serialVersionUID = -7809988995389067683L;<a name="line.212"></a>
<span class="sourceLineNo">213</span>    }<a name="line.213"></a>
<span class="sourceLineNo">214</span><a name="line.214"></a>
<span class="sourceLineNo">215</span>    private static class LinearProblem implements MultivariateDifferentiableVectorFunction {<a name="line.215"></a>
<span class="sourceLineNo">216</span><a name="line.216"></a>
<span class="sourceLineNo">217</span>        final RealMatrix factors;<a name="line.217"></a>
<span class="sourceLineNo">218</span>        final double[] target;<a name="line.218"></a>
<span class="sourceLineNo">219</span>        public LinearProblem(double[][] factors, double[] target) {<a name="line.219"></a>
<span class="sourceLineNo">220</span>            this.factors = new BlockRealMatrix(factors);<a name="line.220"></a>
<span class="sourceLineNo">221</span>            this.target  = target;<a name="line.221"></a>
<span class="sourceLineNo">222</span>        }<a name="line.222"></a>
<span class="sourceLineNo">223</span><a name="line.223"></a>
<span class="sourceLineNo">224</span>        public double[] value(double[] variables) {<a name="line.224"></a>
<span class="sourceLineNo">225</span>            return factors.operate(variables);<a name="line.225"></a>
<span class="sourceLineNo">226</span>        }<a name="line.226"></a>
<span class="sourceLineNo">227</span><a name="line.227"></a>
<span class="sourceLineNo">228</span>        public DerivativeStructure[] value(DerivativeStructure[] variables) {<a name="line.228"></a>
<span class="sourceLineNo">229</span>            DerivativeStructure[] y = new DerivativeStructure[factors.getRowDimension()];<a name="line.229"></a>
<span class="sourceLineNo">230</span>            for (int i = 0; i &lt; y.length; ++i) {<a name="line.230"></a>
<span class="sourceLineNo">231</span>                y[i] = variables[0].getField().getZero();<a name="line.231"></a>
<span class="sourceLineNo">232</span>                for (int j = 0; j &lt; factors.getColumnDimension(); ++j) {<a name="line.232"></a>
<span class="sourceLineNo">233</span>                    y[i] = y[i].add(variables[j].multiply(factors.getEntry(i, j)));<a name="line.233"></a>
<span class="sourceLineNo">234</span>                }<a name="line.234"></a>
<span class="sourceLineNo">235</span>            }<a name="line.235"></a>
<span class="sourceLineNo">236</span>            return y;<a name="line.236"></a>
<span class="sourceLineNo">237</span>        }<a name="line.237"></a>
<span class="sourceLineNo">238</span><a name="line.238"></a>
<span class="sourceLineNo">239</span>    }<a name="line.239"></a>
<span class="sourceLineNo">240</span><a name="line.240"></a>
<span class="sourceLineNo">241</span>}<a name="line.241"></a>




























































</pre>
</div>
</body>
</html>
