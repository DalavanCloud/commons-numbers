<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span><a name="line.17"></a>
<span class="sourceLineNo">018</span>package org.apache.commons.math3;<a name="line.18"></a>
<span class="sourceLineNo">019</span><a name="line.19"></a>
<span class="sourceLineNo">020</span>import java.io.ByteArrayInputStream;<a name="line.20"></a>
<span class="sourceLineNo">021</span>import java.io.ByteArrayOutputStream;<a name="line.21"></a>
<span class="sourceLineNo">022</span>import java.io.IOException;<a name="line.22"></a>
<span class="sourceLineNo">023</span>import java.io.ObjectInputStream;<a name="line.23"></a>
<span class="sourceLineNo">024</span>import java.io.ObjectOutputStream;<a name="line.24"></a>
<span class="sourceLineNo">025</span>import java.text.DecimalFormat;<a name="line.25"></a>
<span class="sourceLineNo">026</span><a name="line.26"></a>
<span class="sourceLineNo">027</span><a name="line.27"></a>
<span class="sourceLineNo">028</span>import org.apache.commons.math3.complex.Complex;<a name="line.28"></a>
<span class="sourceLineNo">029</span>import org.apache.commons.math3.complex.ComplexFormat;<a name="line.29"></a>
<span class="sourceLineNo">030</span>import org.apache.commons.math3.distribution.RealDistribution;<a name="line.30"></a>
<span class="sourceLineNo">031</span>import org.apache.commons.math3.linear.FieldMatrix;<a name="line.31"></a>
<span class="sourceLineNo">032</span>import org.apache.commons.math3.linear.RealMatrix;<a name="line.32"></a>
<span class="sourceLineNo">033</span>import org.apache.commons.math3.linear.RealVector;<a name="line.33"></a>
<span class="sourceLineNo">034</span>import org.apache.commons.math3.stat.inference.ChiSquareTest;<a name="line.34"></a>
<span class="sourceLineNo">035</span>import org.apache.commons.math3.util.FastMath;<a name="line.35"></a>
<span class="sourceLineNo">036</span>import org.apache.commons.math3.util.Precision;<a name="line.36"></a>
<span class="sourceLineNo">037</span>import org.junit.Assert;<a name="line.37"></a>
<span class="sourceLineNo">038</span><a name="line.38"></a>
<span class="sourceLineNo">039</span>/**<a name="line.39"></a>
<span class="sourceLineNo">040</span> */<a name="line.40"></a>
<span class="sourceLineNo">041</span>public class TestUtils {<a name="line.41"></a>
<span class="sourceLineNo">042</span>    /**<a name="line.42"></a>
<span class="sourceLineNo">043</span>     * Collection of static methods used in math unit tests.<a name="line.43"></a>
<span class="sourceLineNo">044</span>     */<a name="line.44"></a>
<span class="sourceLineNo">045</span>    private TestUtils() {<a name="line.45"></a>
<span class="sourceLineNo">046</span>        super();<a name="line.46"></a>
<span class="sourceLineNo">047</span>    }<a name="line.47"></a>
<span class="sourceLineNo">048</span><a name="line.48"></a>
<span class="sourceLineNo">049</span>    /**<a name="line.49"></a>
<span class="sourceLineNo">050</span>     * Verifies that expected and actual are within delta, or are both NaN or<a name="line.50"></a>
<span class="sourceLineNo">051</span>     * infinities of the same sign.<a name="line.51"></a>
<span class="sourceLineNo">052</span>     */<a name="line.52"></a>
<span class="sourceLineNo">053</span>    public static void assertEquals(double expected, double actual, double delta) {<a name="line.53"></a>
<span class="sourceLineNo">054</span>        Assert.assertEquals(null, expected, actual, delta);<a name="line.54"></a>
<span class="sourceLineNo">055</span>    }<a name="line.55"></a>
<span class="sourceLineNo">056</span><a name="line.56"></a>
<span class="sourceLineNo">057</span>    /**<a name="line.57"></a>
<span class="sourceLineNo">058</span>     * Verifies that expected and actual are within delta, or are both NaN or<a name="line.58"></a>
<span class="sourceLineNo">059</span>     * infinities of the same sign.<a name="line.59"></a>
<span class="sourceLineNo">060</span>     */<a name="line.60"></a>
<span class="sourceLineNo">061</span>    public static void assertEquals(String msg, double expected, double actual, double delta) {<a name="line.61"></a>
<span class="sourceLineNo">062</span>        // check for NaN<a name="line.62"></a>
<span class="sourceLineNo">063</span>        if(Double.isNaN(expected)){<a name="line.63"></a>
<span class="sourceLineNo">064</span>            Assert.assertTrue("" + actual + " is not NaN.",<a name="line.64"></a>
<span class="sourceLineNo">065</span>                Double.isNaN(actual));<a name="line.65"></a>
<span class="sourceLineNo">066</span>        } else {<a name="line.66"></a>
<span class="sourceLineNo">067</span>            Assert.assertEquals(msg, expected, actual, delta);<a name="line.67"></a>
<span class="sourceLineNo">068</span>        }<a name="line.68"></a>
<span class="sourceLineNo">069</span>    }<a name="line.69"></a>
<span class="sourceLineNo">070</span><a name="line.70"></a>
<span class="sourceLineNo">071</span>    /**<a name="line.71"></a>
<span class="sourceLineNo">072</span>     * Verifies that the two arguments are exactly the same, either<a name="line.72"></a>
<span class="sourceLineNo">073</span>     * both NaN or infinities of same sign, or identical floating point values.<a name="line.73"></a>
<span class="sourceLineNo">074</span>     */<a name="line.74"></a>
<span class="sourceLineNo">075</span>    public static void assertSame(double expected, double actual) {<a name="line.75"></a>
<span class="sourceLineNo">076</span>     Assert.assertEquals(expected, actual, 0);<a name="line.76"></a>
<span class="sourceLineNo">077</span>    }<a name="line.77"></a>
<span class="sourceLineNo">078</span><a name="line.78"></a>
<span class="sourceLineNo">079</span>    /**<a name="line.79"></a>
<span class="sourceLineNo">080</span>     * Verifies that real and imaginary parts of the two complex arguments<a name="line.80"></a>
<span class="sourceLineNo">081</span>     * are exactly the same.  Also ensures that NaN / infinite components match.<a name="line.81"></a>
<span class="sourceLineNo">082</span>     */<a name="line.82"></a>
<span class="sourceLineNo">083</span>    public static void assertSame(Complex expected, Complex actual) {<a name="line.83"></a>
<span class="sourceLineNo">084</span>        assertSame(expected.getReal(), actual.getReal());<a name="line.84"></a>
<span class="sourceLineNo">085</span>        assertSame(expected.getImaginary(), actual.getImaginary());<a name="line.85"></a>
<span class="sourceLineNo">086</span>    }<a name="line.86"></a>
<span class="sourceLineNo">087</span><a name="line.87"></a>
<span class="sourceLineNo">088</span>    /**<a name="line.88"></a>
<span class="sourceLineNo">089</span>     * Verifies that real and imaginary parts of the two complex arguments<a name="line.89"></a>
<span class="sourceLineNo">090</span>     * differ by at most delta.  Also ensures that NaN / infinite components match.<a name="line.90"></a>
<span class="sourceLineNo">091</span>     */<a name="line.91"></a>
<span class="sourceLineNo">092</span>    public static void assertEquals(Complex expected, Complex actual, double delta) {<a name="line.92"></a>
<span class="sourceLineNo">093</span>        Assert.assertEquals(expected.getReal(), actual.getReal(), delta);<a name="line.93"></a>
<span class="sourceLineNo">094</span>        Assert.assertEquals(expected.getImaginary(), actual.getImaginary(), delta);<a name="line.94"></a>
<span class="sourceLineNo">095</span>    }<a name="line.95"></a>
<span class="sourceLineNo">096</span><a name="line.96"></a>
<span class="sourceLineNo">097</span>    /**<a name="line.97"></a>
<span class="sourceLineNo">098</span>     * Verifies that two double arrays have equal entries, up to tolerance<a name="line.98"></a>
<span class="sourceLineNo">099</span>     */<a name="line.99"></a>
<span class="sourceLineNo">100</span>    public static void assertEquals(double expected[], double observed[], double tolerance) {<a name="line.100"></a>
<span class="sourceLineNo">101</span>        assertEquals("Array comparison failure", expected, observed, tolerance);<a name="line.101"></a>
<span class="sourceLineNo">102</span>    }<a name="line.102"></a>
<span class="sourceLineNo">103</span><a name="line.103"></a>
<span class="sourceLineNo">104</span>    /**<a name="line.104"></a>
<span class="sourceLineNo">105</span>     * Serializes an object to a bytes array and then recovers the object from the bytes array.<a name="line.105"></a>
<span class="sourceLineNo">106</span>     * Returns the deserialized object.<a name="line.106"></a>
<span class="sourceLineNo">107</span>     *<a name="line.107"></a>
<span class="sourceLineNo">108</span>     * @param o  object to serialize and recover<a name="line.108"></a>
<span class="sourceLineNo">109</span>     * @return  the recovered, deserialized object<a name="line.109"></a>
<span class="sourceLineNo">110</span>     */<a name="line.110"></a>
<span class="sourceLineNo">111</span>    public static Object serializeAndRecover(Object o) {<a name="line.111"></a>
<span class="sourceLineNo">112</span>        try {<a name="line.112"></a>
<span class="sourceLineNo">113</span>            // serialize the Object<a name="line.113"></a>
<span class="sourceLineNo">114</span>            ByteArrayOutputStream bos = new ByteArrayOutputStream();<a name="line.114"></a>
<span class="sourceLineNo">115</span>            ObjectOutputStream so = new ObjectOutputStream(bos);<a name="line.115"></a>
<span class="sourceLineNo">116</span>            so.writeObject(o);<a name="line.116"></a>
<span class="sourceLineNo">117</span><a name="line.117"></a>
<span class="sourceLineNo">118</span>            // deserialize the Object<a name="line.118"></a>
<span class="sourceLineNo">119</span>            ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray());<a name="line.119"></a>
<span class="sourceLineNo">120</span>            ObjectInputStream si = new ObjectInputStream(bis);<a name="line.120"></a>
<span class="sourceLineNo">121</span>            return si.readObject();<a name="line.121"></a>
<span class="sourceLineNo">122</span>        } catch (IOException ioe) {<a name="line.122"></a>
<span class="sourceLineNo">123</span>            return null;<a name="line.123"></a>
<span class="sourceLineNo">124</span>        } catch (ClassNotFoundException cnfe) {<a name="line.124"></a>
<span class="sourceLineNo">125</span>            return null;<a name="line.125"></a>
<span class="sourceLineNo">126</span>        }<a name="line.126"></a>
<span class="sourceLineNo">127</span>    }<a name="line.127"></a>
<span class="sourceLineNo">128</span><a name="line.128"></a>
<span class="sourceLineNo">129</span>    /**<a name="line.129"></a>
<span class="sourceLineNo">130</span>     * Verifies that serialization preserves equals and hashCode.<a name="line.130"></a>
<span class="sourceLineNo">131</span>     * Serializes the object, then recovers it and checks equals and hash code.<a name="line.131"></a>
<span class="sourceLineNo">132</span>     *<a name="line.132"></a>
<span class="sourceLineNo">133</span>     * @param object  the object to serialize and recover<a name="line.133"></a>
<span class="sourceLineNo">134</span>     */<a name="line.134"></a>
<span class="sourceLineNo">135</span>    public static void checkSerializedEquality(Object object) {<a name="line.135"></a>
<span class="sourceLineNo">136</span>        Object object2 = serializeAndRecover(object);<a name="line.136"></a>
<span class="sourceLineNo">137</span>        Assert.assertEquals("Equals check", object, object2);<a name="line.137"></a>
<span class="sourceLineNo">138</span>        Assert.assertEquals("HashCode check", object.hashCode(), object2.hashCode());<a name="line.138"></a>
<span class="sourceLineNo">139</span>    }<a name="line.139"></a>
<span class="sourceLineNo">140</span><a name="line.140"></a>
<span class="sourceLineNo">141</span>    /**<a name="line.141"></a>
<span class="sourceLineNo">142</span>     * Verifies that the relative error in actual vs. expected is less than or<a name="line.142"></a>
<span class="sourceLineNo">143</span>     * equal to relativeError.  If expected is infinite or NaN, actual must be<a name="line.143"></a>
<span class="sourceLineNo">144</span>     * the same (NaN or infinity of the same sign).<a name="line.144"></a>
<span class="sourceLineNo">145</span>     *<a name="line.145"></a>
<span class="sourceLineNo">146</span>     * @param expected expected value<a name="line.146"></a>
<span class="sourceLineNo">147</span>     * @param actual  observed value<a name="line.147"></a>
<span class="sourceLineNo">148</span>     * @param relativeError  maximum allowable relative error<a name="line.148"></a>
<span class="sourceLineNo">149</span>     */<a name="line.149"></a>
<span class="sourceLineNo">150</span>    public static void assertRelativelyEquals(double expected, double actual,<a name="line.150"></a>
<span class="sourceLineNo">151</span>            double relativeError) {<a name="line.151"></a>
<span class="sourceLineNo">152</span>        assertRelativelyEquals(null, expected, actual, relativeError);<a name="line.152"></a>
<span class="sourceLineNo">153</span>    }<a name="line.153"></a>
<span class="sourceLineNo">154</span><a name="line.154"></a>
<span class="sourceLineNo">155</span>    /**<a name="line.155"></a>
<span class="sourceLineNo">156</span>     * Verifies that the relative error in actual vs. expected is less than or<a name="line.156"></a>
<span class="sourceLineNo">157</span>     * equal to relativeError.  If expected is infinite or NaN, actual must be<a name="line.157"></a>
<span class="sourceLineNo">158</span>     * the same (NaN or infinity of the same sign).<a name="line.158"></a>
<span class="sourceLineNo">159</span>     *<a name="line.159"></a>
<span class="sourceLineNo">160</span>     * @param msg  message to return with failure<a name="line.160"></a>
<span class="sourceLineNo">161</span>     * @param expected expected value<a name="line.161"></a>
<span class="sourceLineNo">162</span>     * @param actual  observed value<a name="line.162"></a>
<span class="sourceLineNo">163</span>     * @param relativeError  maximum allowable relative error<a name="line.163"></a>
<span class="sourceLineNo">164</span>     */<a name="line.164"></a>
<span class="sourceLineNo">165</span>    public static void assertRelativelyEquals(String msg, double expected,<a name="line.165"></a>
<span class="sourceLineNo">166</span>            double actual, double relativeError) {<a name="line.166"></a>
<span class="sourceLineNo">167</span>        if (Double.isNaN(expected)) {<a name="line.167"></a>
<span class="sourceLineNo">168</span>            Assert.assertTrue(msg, Double.isNaN(actual));<a name="line.168"></a>
<span class="sourceLineNo">169</span>        } else if (Double.isNaN(actual)) {<a name="line.169"></a>
<span class="sourceLineNo">170</span>            Assert.assertTrue(msg, Double.isNaN(expected));<a name="line.170"></a>
<span class="sourceLineNo">171</span>        } else if (Double.isInfinite(actual) || Double.isInfinite(expected)) {<a name="line.171"></a>
<span class="sourceLineNo">172</span>            Assert.assertEquals(expected, actual, relativeError);<a name="line.172"></a>
<span class="sourceLineNo">173</span>        } else if (expected == 0.0) {<a name="line.173"></a>
<span class="sourceLineNo">174</span>            Assert.assertEquals(msg, actual, expected, relativeError);<a name="line.174"></a>
<span class="sourceLineNo">175</span>        } else {<a name="line.175"></a>
<span class="sourceLineNo">176</span>            double absError = FastMath.abs(expected) * relativeError;<a name="line.176"></a>
<span class="sourceLineNo">177</span>            Assert.assertEquals(msg, expected, actual, absError);<a name="line.177"></a>
<span class="sourceLineNo">178</span>        }<a name="line.178"></a>
<span class="sourceLineNo">179</span>    }<a name="line.179"></a>
<span class="sourceLineNo">180</span><a name="line.180"></a>
<span class="sourceLineNo">181</span>    /**<a name="line.181"></a>
<span class="sourceLineNo">182</span>     * Fails iff values does not contain a number within epsilon of z.<a name="line.182"></a>
<span class="sourceLineNo">183</span>     *<a name="line.183"></a>
<span class="sourceLineNo">184</span>     * @param msg  message to return with failure<a name="line.184"></a>
<span class="sourceLineNo">185</span>     * @param values complex array to search<a name="line.185"></a>
<span class="sourceLineNo">186</span>     * @param z  value sought<a name="line.186"></a>
<span class="sourceLineNo">187</span>     * @param epsilon  tolerance<a name="line.187"></a>
<span class="sourceLineNo">188</span>     */<a name="line.188"></a>
<span class="sourceLineNo">189</span>    public static void assertContains(String msg, Complex[] values,<a name="line.189"></a>
<span class="sourceLineNo">190</span>                                      Complex z, double epsilon) {<a name="line.190"></a>
<span class="sourceLineNo">191</span>        for (Complex value : values) {<a name="line.191"></a>
<span class="sourceLineNo">192</span>            if (Precision.equals(value.getReal(), z.getReal(), epsilon) &amp;&amp;<a name="line.192"></a>
<span class="sourceLineNo">193</span>                Precision.equals(value.getImaginary(), z.getImaginary(), epsilon)) {<a name="line.193"></a>
<span class="sourceLineNo">194</span>                return;<a name="line.194"></a>
<span class="sourceLineNo">195</span>            }<a name="line.195"></a>
<span class="sourceLineNo">196</span>        }<a name="line.196"></a>
<span class="sourceLineNo">197</span>        Assert.fail(msg + " Unable to find " + (new ComplexFormat()).format(z));<a name="line.197"></a>
<span class="sourceLineNo">198</span>    }<a name="line.198"></a>
<span class="sourceLineNo">199</span><a name="line.199"></a>
<span class="sourceLineNo">200</span>    /**<a name="line.200"></a>
<span class="sourceLineNo">201</span>     * Fails iff values does not contain a number within epsilon of z.<a name="line.201"></a>
<span class="sourceLineNo">202</span>     *<a name="line.202"></a>
<span class="sourceLineNo">203</span>     * @param values complex array to search<a name="line.203"></a>
<span class="sourceLineNo">204</span>     * @param z  value sought<a name="line.204"></a>
<span class="sourceLineNo">205</span>     * @param epsilon  tolerance<a name="line.205"></a>
<span class="sourceLineNo">206</span>     */<a name="line.206"></a>
<span class="sourceLineNo">207</span>    public static void assertContains(Complex[] values,<a name="line.207"></a>
<span class="sourceLineNo">208</span>            Complex z, double epsilon) {<a name="line.208"></a>
<span class="sourceLineNo">209</span>        assertContains(null, values, z, epsilon);<a name="line.209"></a>
<span class="sourceLineNo">210</span>    }<a name="line.210"></a>
<span class="sourceLineNo">211</span><a name="line.211"></a>
<span class="sourceLineNo">212</span>    /**<a name="line.212"></a>
<span class="sourceLineNo">213</span>     * Fails iff values does not contain a number within epsilon of x.<a name="line.213"></a>
<span class="sourceLineNo">214</span>     *<a name="line.214"></a>
<span class="sourceLineNo">215</span>     * @param msg  message to return with failure<a name="line.215"></a>
<span class="sourceLineNo">216</span>     * @param values double array to search<a name="line.216"></a>
<span class="sourceLineNo">217</span>     * @param x value sought<a name="line.217"></a>
<span class="sourceLineNo">218</span>     * @param epsilon  tolerance<a name="line.218"></a>
<span class="sourceLineNo">219</span>     */<a name="line.219"></a>
<span class="sourceLineNo">220</span>    public static void assertContains(String msg, double[] values,<a name="line.220"></a>
<span class="sourceLineNo">221</span>            double x, double epsilon) {<a name="line.221"></a>
<span class="sourceLineNo">222</span>        for (double value : values) {<a name="line.222"></a>
<span class="sourceLineNo">223</span>            if (Precision.equals(value, x, epsilon)) {<a name="line.223"></a>
<span class="sourceLineNo">224</span>                return;<a name="line.224"></a>
<span class="sourceLineNo">225</span>            }<a name="line.225"></a>
<span class="sourceLineNo">226</span>        }<a name="line.226"></a>
<span class="sourceLineNo">227</span>        Assert.fail(msg + " Unable to find " + x);<a name="line.227"></a>
<span class="sourceLineNo">228</span>    }<a name="line.228"></a>
<span class="sourceLineNo">229</span><a name="line.229"></a>
<span class="sourceLineNo">230</span>    /**<a name="line.230"></a>
<span class="sourceLineNo">231</span>     * Fails iff values does not contain a number within epsilon of x.<a name="line.231"></a>
<span class="sourceLineNo">232</span>     *<a name="line.232"></a>
<span class="sourceLineNo">233</span>     * @param values double array to search<a name="line.233"></a>
<span class="sourceLineNo">234</span>     * @param x value sought<a name="line.234"></a>
<span class="sourceLineNo">235</span>     * @param epsilon  tolerance<a name="line.235"></a>
<span class="sourceLineNo">236</span>     */<a name="line.236"></a>
<span class="sourceLineNo">237</span>    public static void assertContains(double[] values, double x,<a name="line.237"></a>
<span class="sourceLineNo">238</span>            double epsilon) {<a name="line.238"></a>
<span class="sourceLineNo">239</span>       assertContains(null, values, x, epsilon);<a name="line.239"></a>
<span class="sourceLineNo">240</span>    }<a name="line.240"></a>
<span class="sourceLineNo">241</span><a name="line.241"></a>
<span class="sourceLineNo">242</span>    /**<a name="line.242"></a>
<span class="sourceLineNo">243</span>     * Asserts that all entries of the specified vectors are equal to within a<a name="line.243"></a>
<span class="sourceLineNo">244</span>     * positive {@code delta}.<a name="line.244"></a>
<span class="sourceLineNo">245</span>     *<a name="line.245"></a>
<span class="sourceLineNo">246</span>     * @param message the identifying message for the assertion error (can be<a name="line.246"></a>
<span class="sourceLineNo">247</span>     * {@code null})<a name="line.247"></a>
<span class="sourceLineNo">248</span>     * @param expected expected value<a name="line.248"></a>
<span class="sourceLineNo">249</span>     * @param actual actual value<a name="line.249"></a>
<span class="sourceLineNo">250</span>     * @param delta the maximum difference between the entries of the expected<a name="line.250"></a>
<span class="sourceLineNo">251</span>     * and actual vectors for which both entries are still considered equal<a name="line.251"></a>
<span class="sourceLineNo">252</span>     */<a name="line.252"></a>
<span class="sourceLineNo">253</span>    public static void assertEquals(final String message,<a name="line.253"></a>
<span class="sourceLineNo">254</span>        final double[] expected, final RealVector actual, final double delta) {<a name="line.254"></a>
<span class="sourceLineNo">255</span>        final String msgAndSep = message.equals("") ? "" : message + ", ";<a name="line.255"></a>
<span class="sourceLineNo">256</span>        Assert.assertEquals(msgAndSep + "dimension", expected.length,<a name="line.256"></a>
<span class="sourceLineNo">257</span>            actual.getDimension());<a name="line.257"></a>
<span class="sourceLineNo">258</span>        for (int i = 0; i &lt; expected.length; i++) {<a name="line.258"></a>
<span class="sourceLineNo">259</span>            Assert.assertEquals(msgAndSep + "entry #" + i, expected[i],<a name="line.259"></a>
<span class="sourceLineNo">260</span>                actual.getEntry(i), delta);<a name="line.260"></a>
<span class="sourceLineNo">261</span>        }<a name="line.261"></a>
<span class="sourceLineNo">262</span>    }<a name="line.262"></a>
<span class="sourceLineNo">263</span><a name="line.263"></a>
<span class="sourceLineNo">264</span>    /**<a name="line.264"></a>
<span class="sourceLineNo">265</span>     * Asserts that all entries of the specified vectors are equal to within a<a name="line.265"></a>
<span class="sourceLineNo">266</span>     * positive {@code delta}.<a name="line.266"></a>
<span class="sourceLineNo">267</span>     *<a name="line.267"></a>
<span class="sourceLineNo">268</span>     * @param message the identifying message for the assertion error (can be<a name="line.268"></a>
<span class="sourceLineNo">269</span>     * {@code null})<a name="line.269"></a>
<span class="sourceLineNo">270</span>     * @param expected expected value<a name="line.270"></a>
<span class="sourceLineNo">271</span>     * @param actual actual value<a name="line.271"></a>
<span class="sourceLineNo">272</span>     * @param delta the maximum difference between the entries of the expected<a name="line.272"></a>
<span class="sourceLineNo">273</span>     * and actual vectors for which both entries are still considered equal<a name="line.273"></a>
<span class="sourceLineNo">274</span>     */<a name="line.274"></a>
<span class="sourceLineNo">275</span>    public static void assertEquals(final String message,<a name="line.275"></a>
<span class="sourceLineNo">276</span>        final RealVector expected, final RealVector actual, final double delta) {<a name="line.276"></a>
<span class="sourceLineNo">277</span>        final String msgAndSep = message.equals("") ? "" : message + ", ";<a name="line.277"></a>
<span class="sourceLineNo">278</span>        Assert.assertEquals(msgAndSep + "dimension", expected.getDimension(),<a name="line.278"></a>
<span class="sourceLineNo">279</span>            actual.getDimension());<a name="line.279"></a>
<span class="sourceLineNo">280</span>        final int dim = expected.getDimension();<a name="line.280"></a>
<span class="sourceLineNo">281</span>        for (int i = 0; i &lt; dim; i++) {<a name="line.281"></a>
<span class="sourceLineNo">282</span>            Assert.assertEquals(msgAndSep + "entry #" + i,<a name="line.282"></a>
<span class="sourceLineNo">283</span>                expected.getEntry(i), actual.getEntry(i), delta);<a name="line.283"></a>
<span class="sourceLineNo">284</span>        }<a name="line.284"></a>
<span class="sourceLineNo">285</span>    }<a name="line.285"></a>
<span class="sourceLineNo">286</span><a name="line.286"></a>
<span class="sourceLineNo">287</span>    /** verifies that two matrices are close (1-norm) */<a name="line.287"></a>
<span class="sourceLineNo">288</span>    public static void assertEquals(String msg, RealMatrix expected, RealMatrix observed, double tolerance) {<a name="line.288"></a>
<span class="sourceLineNo">289</span><a name="line.289"></a>
<span class="sourceLineNo">290</span>        Assert.assertNotNull(msg + "\nObserved should not be null",observed);<a name="line.290"></a>
<span class="sourceLineNo">291</span><a name="line.291"></a>
<span class="sourceLineNo">292</span>        if (expected.getColumnDimension() != observed.getColumnDimension() ||<a name="line.292"></a>
<span class="sourceLineNo">293</span>                expected.getRowDimension() != observed.getRowDimension()) {<a name="line.293"></a>
<span class="sourceLineNo">294</span>            StringBuilder messageBuffer = new StringBuilder(msg);<a name="line.294"></a>
<span class="sourceLineNo">295</span>            messageBuffer.append("\nObserved has incorrect dimensions.");<a name="line.295"></a>
<span class="sourceLineNo">296</span>            messageBuffer.append("\nobserved is " + observed.getRowDimension() +<a name="line.296"></a>
<span class="sourceLineNo">297</span>                    " x " + observed.getColumnDimension());<a name="line.297"></a>
<span class="sourceLineNo">298</span>            messageBuffer.append("\nexpected " + expected.getRowDimension() +<a name="line.298"></a>
<span class="sourceLineNo">299</span>                    " x " + expected.getColumnDimension());<a name="line.299"></a>
<span class="sourceLineNo">300</span>            Assert.fail(messageBuffer.toString());<a name="line.300"></a>
<span class="sourceLineNo">301</span>        }<a name="line.301"></a>
<span class="sourceLineNo">302</span><a name="line.302"></a>
<span class="sourceLineNo">303</span>        RealMatrix delta = expected.subtract(observed);<a name="line.303"></a>
<span class="sourceLineNo">304</span>        if (delta.getNorm() &gt;= tolerance) {<a name="line.304"></a>
<span class="sourceLineNo">305</span>            StringBuilder messageBuffer = new StringBuilder(msg);<a name="line.305"></a>
<span class="sourceLineNo">306</span>            messageBuffer.append("\nExpected: " + expected);<a name="line.306"></a>
<span class="sourceLineNo">307</span>            messageBuffer.append("\nObserved: " + observed);<a name="line.307"></a>
<span class="sourceLineNo">308</span>            messageBuffer.append("\nexpected - observed: " + delta);<a name="line.308"></a>
<span class="sourceLineNo">309</span>            Assert.fail(messageBuffer.toString());<a name="line.309"></a>
<span class="sourceLineNo">310</span>        }<a name="line.310"></a>
<span class="sourceLineNo">311</span>    }<a name="line.311"></a>
<span class="sourceLineNo">312</span><a name="line.312"></a>
<span class="sourceLineNo">313</span>    /** verifies that two matrices are equal */<a name="line.313"></a>
<span class="sourceLineNo">314</span>    public static void assertEquals(FieldMatrix&lt;? extends FieldElement&lt;?&gt;&gt; expected,<a name="line.314"></a>
<span class="sourceLineNo">315</span>                                    FieldMatrix&lt;? extends FieldElement&lt;?&gt;&gt; observed) {<a name="line.315"></a>
<span class="sourceLineNo">316</span><a name="line.316"></a>
<span class="sourceLineNo">317</span>        Assert.assertNotNull("Observed should not be null",observed);<a name="line.317"></a>
<span class="sourceLineNo">318</span><a name="line.318"></a>
<span class="sourceLineNo">319</span>        if (expected.getColumnDimension() != observed.getColumnDimension() ||<a name="line.319"></a>
<span class="sourceLineNo">320</span>                expected.getRowDimension() != observed.getRowDimension()) {<a name="line.320"></a>
<span class="sourceLineNo">321</span>            StringBuilder messageBuffer = new StringBuilder();<a name="line.321"></a>
<span class="sourceLineNo">322</span>            messageBuffer.append("Observed has incorrect dimensions.");<a name="line.322"></a>
<span class="sourceLineNo">323</span>            messageBuffer.append("\nobserved is " + observed.getRowDimension() +<a name="line.323"></a>
<span class="sourceLineNo">324</span>                    " x " + observed.getColumnDimension());<a name="line.324"></a>
<span class="sourceLineNo">325</span>            messageBuffer.append("\nexpected " + expected.getRowDimension() +<a name="line.325"></a>
<span class="sourceLineNo">326</span>                    " x " + expected.getColumnDimension());<a name="line.326"></a>
<span class="sourceLineNo">327</span>            Assert.fail(messageBuffer.toString());<a name="line.327"></a>
<span class="sourceLineNo">328</span>        }<a name="line.328"></a>
<span class="sourceLineNo">329</span><a name="line.329"></a>
<span class="sourceLineNo">330</span>        for (int i = 0; i &lt; expected.getRowDimension(); ++i) {<a name="line.330"></a>
<span class="sourceLineNo">331</span>            for (int j = 0; j &lt; expected.getColumnDimension(); ++j) {<a name="line.331"></a>
<span class="sourceLineNo">332</span>                FieldElement&lt;?&gt; eij = expected.getEntry(i, j);<a name="line.332"></a>
<span class="sourceLineNo">333</span>                FieldElement&lt;?&gt; oij = observed.getEntry(i, j);<a name="line.333"></a>
<span class="sourceLineNo">334</span>                Assert.assertEquals(eij, oij);<a name="line.334"></a>
<span class="sourceLineNo">335</span>            }<a name="line.335"></a>
<span class="sourceLineNo">336</span>        }<a name="line.336"></a>
<span class="sourceLineNo">337</span>    }<a name="line.337"></a>
<span class="sourceLineNo">338</span><a name="line.338"></a>
<span class="sourceLineNo">339</span>    /** verifies that two arrays are close (sup norm) */<a name="line.339"></a>
<span class="sourceLineNo">340</span>    public static void assertEquals(String msg, double[] expected, double[] observed, double tolerance) {<a name="line.340"></a>
<span class="sourceLineNo">341</span>        StringBuilder out = new StringBuilder(msg);<a name="line.341"></a>
<span class="sourceLineNo">342</span>        if (expected.length != observed.length) {<a name="line.342"></a>
<span class="sourceLineNo">343</span>            out.append("\n Arrays not same length. \n");<a name="line.343"></a>
<span class="sourceLineNo">344</span>            out.append("expected has length ");<a name="line.344"></a>
<span class="sourceLineNo">345</span>            out.append(expected.length);<a name="line.345"></a>
<span class="sourceLineNo">346</span>            out.append(" observed length = ");<a name="line.346"></a>
<span class="sourceLineNo">347</span>            out.append(observed.length);<a name="line.347"></a>
<span class="sourceLineNo">348</span>            Assert.fail(out.toString());<a name="line.348"></a>
<span class="sourceLineNo">349</span>        }<a name="line.349"></a>
<span class="sourceLineNo">350</span>        boolean failure = false;<a name="line.350"></a>
<span class="sourceLineNo">351</span>        for (int i=0; i &lt; expected.length; i++) {<a name="line.351"></a>
<span class="sourceLineNo">352</span>            if (!Precision.equalsIncludingNaN(expected[i], observed[i], tolerance)) {<a name="line.352"></a>
<span class="sourceLineNo">353</span>                failure = true;<a name="line.353"></a>
<span class="sourceLineNo">354</span>                out.append("\n Elements at index ");<a name="line.354"></a>
<span class="sourceLineNo">355</span>                out.append(i);<a name="line.355"></a>
<span class="sourceLineNo">356</span>                out.append(" differ. ");<a name="line.356"></a>
<span class="sourceLineNo">357</span>                out.append(" expected = ");<a name="line.357"></a>
<span class="sourceLineNo">358</span>                out.append(expected[i]);<a name="line.358"></a>
<span class="sourceLineNo">359</span>                out.append(" observed = ");<a name="line.359"></a>
<span class="sourceLineNo">360</span>                out.append(observed[i]);<a name="line.360"></a>
<span class="sourceLineNo">361</span>            }<a name="line.361"></a>
<span class="sourceLineNo">362</span>        }<a name="line.362"></a>
<span class="sourceLineNo">363</span>        if (failure) {<a name="line.363"></a>
<span class="sourceLineNo">364</span>            Assert.fail(out.toString());<a name="line.364"></a>
<span class="sourceLineNo">365</span>        }<a name="line.365"></a>
<span class="sourceLineNo">366</span>    }<a name="line.366"></a>
<span class="sourceLineNo">367</span><a name="line.367"></a>
<span class="sourceLineNo">368</span>    /** verifies that two arrays are equal */<a name="line.368"></a>
<span class="sourceLineNo">369</span>    public static &lt;T extends FieldElement&lt;T&gt;&gt; void assertEquals(T[] m, T[] n) {<a name="line.369"></a>
<span class="sourceLineNo">370</span>        if (m.length != n.length) {<a name="line.370"></a>
<span class="sourceLineNo">371</span>            Assert.fail("vectors not same length");<a name="line.371"></a>
<span class="sourceLineNo">372</span>        }<a name="line.372"></a>
<span class="sourceLineNo">373</span>        for (int i = 0; i &lt; m.length; i++) {<a name="line.373"></a>
<span class="sourceLineNo">374</span>            Assert.assertEquals(m[i],n[i]);<a name="line.374"></a>
<span class="sourceLineNo">375</span>        }<a name="line.375"></a>
<span class="sourceLineNo">376</span>    }<a name="line.376"></a>
<span class="sourceLineNo">377</span><a name="line.377"></a>
<span class="sourceLineNo">378</span>    /**<a name="line.378"></a>
<span class="sourceLineNo">379</span>     * Computes the sum of squared deviations of &lt;values&gt; from &lt;target&gt;<a name="line.379"></a>
<span class="sourceLineNo">380</span>     * @param values array of deviates<a name="line.380"></a>
<span class="sourceLineNo">381</span>     * @param target value to compute deviations from<a name="line.381"></a>
<span class="sourceLineNo">382</span>     *<a name="line.382"></a>
<span class="sourceLineNo">383</span>     * @return sum of squared deviations<a name="line.383"></a>
<span class="sourceLineNo">384</span>     */<a name="line.384"></a>
<span class="sourceLineNo">385</span>    public static double sumSquareDev(double[] values, double target) {<a name="line.385"></a>
<span class="sourceLineNo">386</span>        double sumsq = 0d;<a name="line.386"></a>
<span class="sourceLineNo">387</span>        for (int i = 0; i &lt; values.length; i++) {<a name="line.387"></a>
<span class="sourceLineNo">388</span>            final double dev = values[i] - target;<a name="line.388"></a>
<span class="sourceLineNo">389</span>            sumsq += (dev * dev);<a name="line.389"></a>
<span class="sourceLineNo">390</span>        }<a name="line.390"></a>
<span class="sourceLineNo">391</span>        return sumsq;<a name="line.391"></a>
<span class="sourceLineNo">392</span>    }<a name="line.392"></a>
<span class="sourceLineNo">393</span><a name="line.393"></a>
<span class="sourceLineNo">394</span>    /**<a name="line.394"></a>
<span class="sourceLineNo">395</span>     * Asserts the null hypothesis for a ChiSquare test.  Fails and dumps arguments and test<a name="line.395"></a>
<span class="sourceLineNo">396</span>     * statistics if the null hypothesis can be rejected with confidence 100 * (1 - alpha)%<a name="line.396"></a>
<span class="sourceLineNo">397</span>     *<a name="line.397"></a>
<span class="sourceLineNo">398</span>     * @param valueLabels labels for the values of the discrete distribution under test<a name="line.398"></a>
<span class="sourceLineNo">399</span>     * @param expected expected counts<a name="line.399"></a>
<span class="sourceLineNo">400</span>     * @param observed observed counts<a name="line.400"></a>
<span class="sourceLineNo">401</span>     * @param alpha significance level of the test<a name="line.401"></a>
<span class="sourceLineNo">402</span>     */<a name="line.402"></a>
<span class="sourceLineNo">403</span>    public static void assertChiSquareAccept(String[] valueLabels, double[] expected, long[] observed, double alpha) {<a name="line.403"></a>
<span class="sourceLineNo">404</span>        ChiSquareTest chiSquareTest = new ChiSquareTest();<a name="line.404"></a>
<span class="sourceLineNo">405</span><a name="line.405"></a>
<span class="sourceLineNo">406</span>        // Fail if we can reject null hypothesis that distributions are the same<a name="line.406"></a>
<span class="sourceLineNo">407</span>        if (chiSquareTest.chiSquareTest(expected, observed, alpha)) {<a name="line.407"></a>
<span class="sourceLineNo">408</span>            StringBuilder msgBuffer = new StringBuilder();<a name="line.408"></a>
<span class="sourceLineNo">409</span>            DecimalFormat df = new DecimalFormat("#.##");<a name="line.409"></a>
<span class="sourceLineNo">410</span>            msgBuffer.append("Chisquare test failed");<a name="line.410"></a>
<span class="sourceLineNo">411</span>            msgBuffer.append(" p-value = ");<a name="line.411"></a>
<span class="sourceLineNo">412</span>            msgBuffer.append(chiSquareTest.chiSquareTest(expected, observed));<a name="line.412"></a>
<span class="sourceLineNo">413</span>            msgBuffer.append(" chisquare statistic = ");<a name="line.413"></a>
<span class="sourceLineNo">414</span>            msgBuffer.append(chiSquareTest.chiSquare(expected, observed));<a name="line.414"></a>
<span class="sourceLineNo">415</span>            msgBuffer.append(". \n");<a name="line.415"></a>
<span class="sourceLineNo">416</span>            msgBuffer.append("value\texpected\tobserved\n");<a name="line.416"></a>
<span class="sourceLineNo">417</span>            for (int i = 0; i &lt; expected.length; i++) {<a name="line.417"></a>
<span class="sourceLineNo">418</span>                msgBuffer.append(valueLabels[i]);<a name="line.418"></a>
<span class="sourceLineNo">419</span>                msgBuffer.append("\t");<a name="line.419"></a>
<span class="sourceLineNo">420</span>                msgBuffer.append(df.format(expected[i]));<a name="line.420"></a>
<span class="sourceLineNo">421</span>                msgBuffer.append("\t\t");<a name="line.421"></a>
<span class="sourceLineNo">422</span>                msgBuffer.append(observed[i]);<a name="line.422"></a>
<span class="sourceLineNo">423</span>                msgBuffer.append("\n");<a name="line.423"></a>
<span class="sourceLineNo">424</span>            }<a name="line.424"></a>
<span class="sourceLineNo">425</span>            msgBuffer.append("This test can fail randomly due to sampling error with probability ");<a name="line.425"></a>
<span class="sourceLineNo">426</span>            msgBuffer.append(alpha);<a name="line.426"></a>
<span class="sourceLineNo">427</span>            msgBuffer.append(".");<a name="line.427"></a>
<span class="sourceLineNo">428</span>            Assert.fail(msgBuffer.toString());<a name="line.428"></a>
<span class="sourceLineNo">429</span>        }<a name="line.429"></a>
<span class="sourceLineNo">430</span>    }<a name="line.430"></a>
<span class="sourceLineNo">431</span><a name="line.431"></a>
<span class="sourceLineNo">432</span>    /**<a name="line.432"></a>
<span class="sourceLineNo">433</span>     * Asserts the null hypothesis for a ChiSquare test.  Fails and dumps arguments and test<a name="line.433"></a>
<span class="sourceLineNo">434</span>     * statistics if the null hypothesis can be rejected with confidence 100 * (1 - alpha)%<a name="line.434"></a>
<span class="sourceLineNo">435</span>     *<a name="line.435"></a>
<span class="sourceLineNo">436</span>     * @param values integer values whose observed and expected counts are being compared<a name="line.436"></a>
<span class="sourceLineNo">437</span>     * @param expected expected counts<a name="line.437"></a>
<span class="sourceLineNo">438</span>     * @param observed observed counts<a name="line.438"></a>
<span class="sourceLineNo">439</span>     * @param alpha significance level of the test<a name="line.439"></a>
<span class="sourceLineNo">440</span>     */<a name="line.440"></a>
<span class="sourceLineNo">441</span>    public static void assertChiSquareAccept(int[] values, double[] expected, long[] observed, double alpha) {<a name="line.441"></a>
<span class="sourceLineNo">442</span>        String[] labels = new String[values.length];<a name="line.442"></a>
<span class="sourceLineNo">443</span>        for (int i = 0; i &lt; values.length; i++) {<a name="line.443"></a>
<span class="sourceLineNo">444</span>            labels[i] = Integer.toString(values[i]);<a name="line.444"></a>
<span class="sourceLineNo">445</span>        }<a name="line.445"></a>
<span class="sourceLineNo">446</span>        assertChiSquareAccept(labels, expected, observed, alpha);<a name="line.446"></a>
<span class="sourceLineNo">447</span>    }<a name="line.447"></a>
<span class="sourceLineNo">448</span><a name="line.448"></a>
<span class="sourceLineNo">449</span>    /**<a name="line.449"></a>
<span class="sourceLineNo">450</span>     * Asserts the null hypothesis for a ChiSquare test.  Fails and dumps arguments and test<a name="line.450"></a>
<span class="sourceLineNo">451</span>     * statistics if the null hypothesis can be rejected with confidence 100 * (1 - alpha)%<a name="line.451"></a>
<span class="sourceLineNo">452</span>     *<a name="line.452"></a>
<span class="sourceLineNo">453</span>     * @param expected expected counts<a name="line.453"></a>
<span class="sourceLineNo">454</span>     * @param observed observed counts<a name="line.454"></a>
<span class="sourceLineNo">455</span>     * @param alpha significance level of the test<a name="line.455"></a>
<span class="sourceLineNo">456</span>     */<a name="line.456"></a>
<span class="sourceLineNo">457</span>    public static void assertChiSquareAccept(double[] expected, long[] observed, double alpha) {<a name="line.457"></a>
<span class="sourceLineNo">458</span>        String[] labels = new String[expected.length];<a name="line.458"></a>
<span class="sourceLineNo">459</span>        for (int i = 0; i &lt; labels.length; i++) {<a name="line.459"></a>
<span class="sourceLineNo">460</span>            labels[i] = Integer.toString(i + 1);<a name="line.460"></a>
<span class="sourceLineNo">461</span>        }<a name="line.461"></a>
<span class="sourceLineNo">462</span>        assertChiSquareAccept(labels, expected, observed, alpha);<a name="line.462"></a>
<span class="sourceLineNo">463</span>    }<a name="line.463"></a>
<span class="sourceLineNo">464</span><a name="line.464"></a>
<span class="sourceLineNo">465</span>    /**<a name="line.465"></a>
<span class="sourceLineNo">466</span>     * Computes the 25th, 50th and 75th percentiles of the given distribution and returns<a name="line.466"></a>
<span class="sourceLineNo">467</span>     * these values in an array.<a name="line.467"></a>
<span class="sourceLineNo">468</span>     */<a name="line.468"></a>
<span class="sourceLineNo">469</span>    public static double[] getDistributionQuartiles(RealDistribution distribution) {<a name="line.469"></a>
<span class="sourceLineNo">470</span>        double[] quantiles = new double[3];<a name="line.470"></a>
<span class="sourceLineNo">471</span>        quantiles[0] = distribution.inverseCumulativeProbability(0.25d);<a name="line.471"></a>
<span class="sourceLineNo">472</span>        quantiles[1] = distribution.inverseCumulativeProbability(0.5d);<a name="line.472"></a>
<span class="sourceLineNo">473</span>        quantiles[2] = distribution.inverseCumulativeProbability(0.75d);<a name="line.473"></a>
<span class="sourceLineNo">474</span>        return quantiles;<a name="line.474"></a>
<span class="sourceLineNo">475</span>    }<a name="line.475"></a>
<span class="sourceLineNo">476</span><a name="line.476"></a>
<span class="sourceLineNo">477</span>    /**<a name="line.477"></a>
<span class="sourceLineNo">478</span>     * Updates observed counts of values in quartiles.<a name="line.478"></a>
<span class="sourceLineNo">479</span>     * counts[0] &lt;-&gt; 1st quartile ... counts[3] &lt;-&gt; top quartile<a name="line.479"></a>
<span class="sourceLineNo">480</span>     */<a name="line.480"></a>
<span class="sourceLineNo">481</span>    public static void updateCounts(double value, long[] counts, double[] quartiles) {<a name="line.481"></a>
<span class="sourceLineNo">482</span>        if (value &lt; quartiles[0]) {<a name="line.482"></a>
<span class="sourceLineNo">483</span>            counts[0]++;<a name="line.483"></a>
<span class="sourceLineNo">484</span>        } else if (value &gt; quartiles[2]) {<a name="line.484"></a>
<span class="sourceLineNo">485</span>            counts[3]++;<a name="line.485"></a>
<span class="sourceLineNo">486</span>        } else if (value &gt; quartiles[1]) {<a name="line.486"></a>
<span class="sourceLineNo">487</span>            counts[2]++;<a name="line.487"></a>
<span class="sourceLineNo">488</span>        } else {<a name="line.488"></a>
<span class="sourceLineNo">489</span>            counts[1]++;<a name="line.489"></a>
<span class="sourceLineNo">490</span>        }<a name="line.490"></a>
<span class="sourceLineNo">491</span>    }<a name="line.491"></a>
<span class="sourceLineNo">492</span><a name="line.492"></a>
<span class="sourceLineNo">493</span>    /**<a name="line.493"></a>
<span class="sourceLineNo">494</span>     * Eliminates points with zero mass from densityPoints and densityValues parallel<a name="line.494"></a>
<span class="sourceLineNo">495</span>     * arrays.  Returns the number of positive mass points and collapses the arrays so<a name="line.495"></a>
<span class="sourceLineNo">496</span>     * that the first &lt;returned value&gt; elements of the input arrays represent the positive<a name="line.496"></a>
<span class="sourceLineNo">497</span>     * mass points.<a name="line.497"></a>
<span class="sourceLineNo">498</span>     */<a name="line.498"></a>
<span class="sourceLineNo">499</span>    public static int eliminateZeroMassPoints(int[] densityPoints, double[] densityValues) {<a name="line.499"></a>
<span class="sourceLineNo">500</span>        int positiveMassCount = 0;<a name="line.500"></a>
<span class="sourceLineNo">501</span>        for (int i = 0; i &lt; densityValues.length; i++) {<a name="line.501"></a>
<span class="sourceLineNo">502</span>            if (densityValues[i] &gt; 0) {<a name="line.502"></a>
<span class="sourceLineNo">503</span>                positiveMassCount++;<a name="line.503"></a>
<span class="sourceLineNo">504</span>            }<a name="line.504"></a>
<span class="sourceLineNo">505</span>        }<a name="line.505"></a>
<span class="sourceLineNo">506</span>        if (positiveMassCount &lt; densityValues.length) {<a name="line.506"></a>
<span class="sourceLineNo">507</span>            int[] newPoints = new int[positiveMassCount];<a name="line.507"></a>
<span class="sourceLineNo">508</span>            double[] newValues = new double[positiveMassCount];<a name="line.508"></a>
<span class="sourceLineNo">509</span>            int j = 0;<a name="line.509"></a>
<span class="sourceLineNo">510</span>            for (int i = 0; i &lt; densityValues.length; i++) {<a name="line.510"></a>
<span class="sourceLineNo">511</span>                if (densityValues[i] &gt; 0) {<a name="line.511"></a>
<span class="sourceLineNo">512</span>                    newPoints[j] = densityPoints[i];<a name="line.512"></a>
<span class="sourceLineNo">513</span>                    newValues[j] = densityValues[i];<a name="line.513"></a>
<span class="sourceLineNo">514</span>                    j++;<a name="line.514"></a>
<span class="sourceLineNo">515</span>                }<a name="line.515"></a>
<span class="sourceLineNo">516</span>            }<a name="line.516"></a>
<span class="sourceLineNo">517</span>            System.arraycopy(newPoints,0,densityPoints,0,positiveMassCount);<a name="line.517"></a>
<span class="sourceLineNo">518</span>            System.arraycopy(newValues,0,densityValues,0,positiveMassCount);<a name="line.518"></a>
<span class="sourceLineNo">519</span>        }<a name="line.519"></a>
<span class="sourceLineNo">520</span>        return positiveMassCount;<a name="line.520"></a>
<span class="sourceLineNo">521</span>    }<a name="line.521"></a>
<span class="sourceLineNo">522</span>}<a name="line.522"></a>




























































</pre>
</div>
</body>
</html>
