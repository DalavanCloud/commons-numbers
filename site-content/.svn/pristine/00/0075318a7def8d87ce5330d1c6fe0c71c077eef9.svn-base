<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements. See the NOTICE file distributed with this<a name="line.3"></a>
<span class="sourceLineNo">004</span> * work for additional information regarding copyright ownership. The ASF<a name="line.4"></a>
<span class="sourceLineNo">005</span> * licenses this file to You under the Apache License, Version 2.0 (the<a name="line.5"></a>
<span class="sourceLineNo">006</span> * "License"); you may not use this file except in compliance with the License.<a name="line.6"></a>
<span class="sourceLineNo">007</span> * You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law<a name="line.8"></a>
<span class="sourceLineNo">009</span> * or agreed to in writing, software distributed under the License is<a name="line.9"></a>
<span class="sourceLineNo">010</span> * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY<a name="line.10"></a>
<span class="sourceLineNo">011</span> * KIND, either express or implied. See the License for the specific language<a name="line.11"></a>
<span class="sourceLineNo">012</span> * governing permissions and limitations under the License.<a name="line.12"></a>
<span class="sourceLineNo">013</span> */<a name="line.13"></a>
<span class="sourceLineNo">014</span>package org.apache.commons.math3.distribution;<a name="line.14"></a>
<span class="sourceLineNo">015</span><a name="line.15"></a>
<span class="sourceLineNo">016</span>import org.junit.Assert;<a name="line.16"></a>
<span class="sourceLineNo">017</span>import org.junit.Test;<a name="line.17"></a>
<span class="sourceLineNo">018</span><a name="line.18"></a>
<span class="sourceLineNo">019</span>/**<a name="line.19"></a>
<span class="sourceLineNo">020</span> * Test cases for GeometricDistribution.<a name="line.20"></a>
<span class="sourceLineNo">021</span> * &lt;p&gt;<a name="line.21"></a>
<span class="sourceLineNo">022</span> * See class javadoc for IntegerDistributionAbstractTest for details.<a name="line.22"></a>
<span class="sourceLineNo">023</span> *<a name="line.23"></a>
<span class="sourceLineNo">024</span> * @since 3.3<a name="line.24"></a>
<span class="sourceLineNo">025</span> */<a name="line.25"></a>
<span class="sourceLineNo">026</span>public class GeometricDistributionTest extends IntegerDistributionAbstractTest {<a name="line.26"></a>
<span class="sourceLineNo">027</span><a name="line.27"></a>
<span class="sourceLineNo">028</span>    /**<a name="line.28"></a>
<span class="sourceLineNo">029</span>     * Constructor to override default tolerance.<a name="line.29"></a>
<span class="sourceLineNo">030</span>     */<a name="line.30"></a>
<span class="sourceLineNo">031</span>    public GeometricDistributionTest() {<a name="line.31"></a>
<span class="sourceLineNo">032</span>        setTolerance(1e-12);<a name="line.32"></a>
<span class="sourceLineNo">033</span>    }<a name="line.33"></a>
<span class="sourceLineNo">034</span>    <a name="line.34"></a>
<span class="sourceLineNo">035</span>    // -------------- Implementations for abstract methods --------------------<a name="line.35"></a>
<span class="sourceLineNo">036</span><a name="line.36"></a>
<span class="sourceLineNo">037</span>    /** Creates the default discrete distribution instance to use in tests. */<a name="line.37"></a>
<span class="sourceLineNo">038</span>    @Override<a name="line.38"></a>
<span class="sourceLineNo">039</span>    public IntegerDistribution makeDistribution() {<a name="line.39"></a>
<span class="sourceLineNo">040</span>        return new GeometricDistribution(0.40);<a name="line.40"></a>
<span class="sourceLineNo">041</span>    }<a name="line.41"></a>
<span class="sourceLineNo">042</span><a name="line.42"></a>
<span class="sourceLineNo">043</span>    /** Creates the default probability density test input values */<a name="line.43"></a>
<span class="sourceLineNo">044</span>    @Override<a name="line.44"></a>
<span class="sourceLineNo">045</span>    public int[] makeDensityTestPoints() {<a name="line.45"></a>
<span class="sourceLineNo">046</span>        return new int[] { -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,<a name="line.46"></a>
<span class="sourceLineNo">047</span>                            9, 10, 11, 12, 13, 14, 15, 16, 17, 18,<a name="line.47"></a>
<span class="sourceLineNo">048</span>                           19, 20, 21, 22, 23, 24, 25, 26, 27, 28 };<a name="line.48"></a>
<span class="sourceLineNo">049</span>    }<a name="line.49"></a>
<span class="sourceLineNo">050</span><a name="line.50"></a>
<span class="sourceLineNo">051</span>    /**<a name="line.51"></a>
<span class="sourceLineNo">052</span>     * Creates the default probability density test expected values.<a name="line.52"></a>
<span class="sourceLineNo">053</span>     * Reference values are from R, version version 2.15.3.<a name="line.53"></a>
<span class="sourceLineNo">054</span>     */<a name="line.54"></a>
<span class="sourceLineNo">055</span>    @Override<a name="line.55"></a>
<span class="sourceLineNo">056</span>    public double[] makeDensityTestValues() {<a name="line.56"></a>
<span class="sourceLineNo">057</span>        return new double[] {<a name="line.57"></a>
<span class="sourceLineNo">058</span>            0d, 0.4, 0.24, 0.144, 0.0864, 0.05184, 0.031104, 0.0186624,<a name="line.58"></a>
<span class="sourceLineNo">059</span>            0.01119744, 0.006718464, 0.0040310784, 0.00241864704,<a name="line.59"></a>
<span class="sourceLineNo">060</span>            0.001451188224,0.0008707129344, 0.00052242776064, 0.000313456656384,<a name="line.60"></a>
<span class="sourceLineNo">061</span>            0.00018807399383, 0.000112844396298, 6.77066377789e-05, 4.06239826674e-05,<a name="line.61"></a>
<span class="sourceLineNo">062</span>            2.43743896004e-05, 1.46246337603e-05, 8.77478025615e-06, 5.26486815369e-06,<a name="line.62"></a>
<span class="sourceLineNo">063</span>            3.15892089221e-06, 1.89535253533e-06, 1.1372115212e-06, 6.82326912718e-07,<a name="line.63"></a>
<span class="sourceLineNo">064</span>            4.09396147631e-07, 2.45637688579e-07<a name="line.64"></a>
<span class="sourceLineNo">065</span>        };<a name="line.65"></a>
<span class="sourceLineNo">066</span>    }<a name="line.66"></a>
<span class="sourceLineNo">067</span><a name="line.67"></a>
<span class="sourceLineNo">068</span>    /**<a name="line.68"></a>
<span class="sourceLineNo">069</span>     * Creates the default log probability density test expected values.<a name="line.69"></a>
<span class="sourceLineNo">070</span>     * Reference values are from R, version version 2.14.1.<a name="line.70"></a>
<span class="sourceLineNo">071</span>     */<a name="line.71"></a>
<span class="sourceLineNo">072</span>    @Override<a name="line.72"></a>
<span class="sourceLineNo">073</span>    public double[] makeLogDensityTestValues() {<a name="line.73"></a>
<span class="sourceLineNo">074</span>        return new double[] {<a name="line.74"></a>
<span class="sourceLineNo">075</span>            Double.NEGATIVE_INFINITY, -0.916290731874155, -1.42711635564015, -1.93794197940614,<a name="line.75"></a>
<span class="sourceLineNo">076</span>            -2.44876760317213, -2.95959322693812, -3.47041885070411, -3.9812444744701,<a name="line.76"></a>
<span class="sourceLineNo">077</span>            -4.49207009823609, -5.00289572200208, -5.51372134576807, -6.02454696953406,<a name="line.77"></a>
<span class="sourceLineNo">078</span>            -6.53537259330005, -7.04619821706604, -7.55702384083203, -8.06784946459802,<a name="line.78"></a>
<span class="sourceLineNo">079</span>            -8.57867508836402, -9.08950071213001, -9.600326335896, -10.111151959662,<a name="line.79"></a>
<span class="sourceLineNo">080</span>            -10.621977583428, -11.132803207194, -11.64362883096, -12.154454454726,<a name="line.80"></a>
<span class="sourceLineNo">081</span>            -12.6652800784919, -13.1761057022579, -13.6869313260239, -14.1977569497899,<a name="line.81"></a>
<span class="sourceLineNo">082</span>            -14.7085825735559, -15.2194081973219<a name="line.82"></a>
<span class="sourceLineNo">083</span>        };<a name="line.83"></a>
<span class="sourceLineNo">084</span>    }<a name="line.84"></a>
<span class="sourceLineNo">085</span><a name="line.85"></a>
<span class="sourceLineNo">086</span>    /** Creates the default cumulative probability density test input values */<a name="line.86"></a>
<span class="sourceLineNo">087</span>    @Override<a name="line.87"></a>
<span class="sourceLineNo">088</span>    public int[] makeCumulativeTestPoints() {<a name="line.88"></a>
<span class="sourceLineNo">089</span>        return makeDensityTestPoints();<a name="line.89"></a>
<span class="sourceLineNo">090</span>    }<a name="line.90"></a>
<span class="sourceLineNo">091</span><a name="line.91"></a>
<span class="sourceLineNo">092</span>    /** Creates the default cumulative probability density test expected values */<a name="line.92"></a>
<span class="sourceLineNo">093</span>    @Override<a name="line.93"></a>
<span class="sourceLineNo">094</span>    public double[] makeCumulativeTestValues() {<a name="line.94"></a>
<span class="sourceLineNo">095</span>        final double[] densities = makeDensityTestValues();<a name="line.95"></a>
<span class="sourceLineNo">096</span>        final int n = densities.length;<a name="line.96"></a>
<span class="sourceLineNo">097</span>        final double[] ret = new double[n];<a name="line.97"></a>
<span class="sourceLineNo">098</span>        ret[0] = densities[0];<a name="line.98"></a>
<span class="sourceLineNo">099</span>        for (int i = 1; i &lt; n; i++) {<a name="line.99"></a>
<span class="sourceLineNo">100</span>            ret[i] = ret[i - 1] + densities[i];<a name="line.100"></a>
<span class="sourceLineNo">101</span>        }<a name="line.101"></a>
<span class="sourceLineNo">102</span>        return ret;<a name="line.102"></a>
<span class="sourceLineNo">103</span>    }<a name="line.103"></a>
<span class="sourceLineNo">104</span><a name="line.104"></a>
<span class="sourceLineNo">105</span>    /** Creates the default inverse cumulative probability test input values */<a name="line.105"></a>
<span class="sourceLineNo">106</span>    @Override<a name="line.106"></a>
<span class="sourceLineNo">107</span>    public double[] makeInverseCumulativeTestPoints() {<a name="line.107"></a>
<span class="sourceLineNo">108</span>        return new double[] {<a name="line.108"></a>
<span class="sourceLineNo">109</span>            0.000, 0.005, 0.010, 0.015, 0.020, 0.025, 0.030, 0.035, 0.040,<a name="line.109"></a>
<span class="sourceLineNo">110</span>            0.045, 0.050, 0.055, 0.060, 0.065, 0.070, 0.075, 0.080, 0.085,<a name="line.110"></a>
<span class="sourceLineNo">111</span>            0.090, 0.095, 0.100, 0.105, 0.110, 0.115, 0.120, 0.125, 0.130,<a name="line.111"></a>
<span class="sourceLineNo">112</span>            0.135, 0.140, 0.145, 0.150, 0.155, 0.160, 0.165, 0.170, 0.175,<a name="line.112"></a>
<span class="sourceLineNo">113</span>            0.180, 0.185, 0.190, 0.195, 0.200, 0.205, 0.210, 0.215, 0.220,<a name="line.113"></a>
<span class="sourceLineNo">114</span>            0.225, 0.230, 0.235, 0.240, 0.245, 0.250, 0.255, 0.260, 0.265,<a name="line.114"></a>
<span class="sourceLineNo">115</span>            0.270, 0.275, 0.280, 0.285, 0.290, 0.295, 0.300, 0.305, 0.310,<a name="line.115"></a>
<span class="sourceLineNo">116</span>            0.315, 0.320, 0.325, 0.330, 0.335, 0.340, 0.345, 0.350, 0.355,<a name="line.116"></a>
<span class="sourceLineNo">117</span>            0.360, 0.365, 0.370, 0.375, 0.380, 0.385, 0.390, 0.395, 0.400,<a name="line.117"></a>
<span class="sourceLineNo">118</span>            0.405, 0.410, 0.415, 0.420, 0.425, 0.430, 0.435, 0.440, 0.445,<a name="line.118"></a>
<span class="sourceLineNo">119</span>            0.450, 0.455, 0.460, 0.465, 0.470, 0.475, 0.480, 0.485, 0.490,<a name="line.119"></a>
<span class="sourceLineNo">120</span>            0.495, 0.500, 0.505, 0.510, 0.515, 0.520, 0.525, 0.530, 0.535,<a name="line.120"></a>
<span class="sourceLineNo">121</span>            0.540, 0.545, 0.550, 0.555, 0.560, 0.565, 0.570, 0.575, 0.580,<a name="line.121"></a>
<span class="sourceLineNo">122</span>            0.585, 0.590, 0.595, 0.600, 0.605, 0.610, 0.615, 0.620, 0.625,<a name="line.122"></a>
<span class="sourceLineNo">123</span>            0.630, 0.635, 0.640, 0.645, 0.650, 0.655, 0.660, 0.665, 0.670,<a name="line.123"></a>
<span class="sourceLineNo">124</span>            0.675, 0.680, 0.685, 0.690, 0.695, 0.700, 0.705, 0.710, 0.715,<a name="line.124"></a>
<span class="sourceLineNo">125</span>            0.720, 0.725, 0.730, 0.735, 0.740, 0.745, 0.750, 0.755, 0.760,<a name="line.125"></a>
<span class="sourceLineNo">126</span>            0.765, 0.770, 0.775, 0.780, 0.785, 0.790, 0.795, 0.800, 0.805,<a name="line.126"></a>
<span class="sourceLineNo">127</span>            0.810, 0.815, 0.820, 0.825, 0.830, 0.835, 0.840, 0.845, 0.850,<a name="line.127"></a>
<span class="sourceLineNo">128</span>            0.855, 0.860, 0.865, 0.870, 0.875, 0.880, 0.885, 0.890, 0.895,<a name="line.128"></a>
<span class="sourceLineNo">129</span>            0.900, 0.905, 0.910, 0.915, 0.920, 0.925, 0.930, 0.935, 0.940,<a name="line.129"></a>
<span class="sourceLineNo">130</span>            0.945, 0.950, 0.955, 0.960, 0.965, 0.970, 0.975, 0.980, 0.985,<a name="line.130"></a>
<span class="sourceLineNo">131</span>            0.990, 0.995<a name="line.131"></a>
<span class="sourceLineNo">132</span>        };<a name="line.132"></a>
<span class="sourceLineNo">133</span>    }<a name="line.133"></a>
<span class="sourceLineNo">134</span><a name="line.134"></a>
<span class="sourceLineNo">135</span>    /**<a name="line.135"></a>
<span class="sourceLineNo">136</span>     * Creates the default inverse cumulative probability density test expected<a name="line.136"></a>
<span class="sourceLineNo">137</span>     * values<a name="line.137"></a>
<span class="sourceLineNo">138</span>     */<a name="line.138"></a>
<span class="sourceLineNo">139</span>    @Override<a name="line.139"></a>
<span class="sourceLineNo">140</span>    public int[] makeInverseCumulativeTestValues() {<a name="line.140"></a>
<span class="sourceLineNo">141</span>        return new int[] {<a name="line.141"></a>
<span class="sourceLineNo">142</span>            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,<a name="line.142"></a>
<span class="sourceLineNo">143</span>            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,<a name="line.143"></a>
<span class="sourceLineNo">144</span>            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,<a name="line.144"></a>
<span class="sourceLineNo">145</span>            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1,<a name="line.145"></a>
<span class="sourceLineNo">146</span>            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,<a name="line.146"></a>
<span class="sourceLineNo">147</span>            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,<a name="line.147"></a>
<span class="sourceLineNo">148</span>            1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,<a name="line.148"></a>
<span class="sourceLineNo">149</span>            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,<a name="line.149"></a>
<span class="sourceLineNo">150</span>            3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5,<a name="line.150"></a>
<span class="sourceLineNo">151</span>            5, 5, 6, 6, 6, 6, 7, 7, 8, 9, 10<a name="line.151"></a>
<span class="sourceLineNo">152</span>        };<a name="line.152"></a>
<span class="sourceLineNo">153</span>    }<a name="line.153"></a>
<span class="sourceLineNo">154</span><a name="line.154"></a>
<span class="sourceLineNo">155</span>    // ----------------- Additional test cases ---------------------------------<a name="line.155"></a>
<span class="sourceLineNo">156</span><a name="line.156"></a>
<span class="sourceLineNo">157</span>    @Test<a name="line.157"></a>
<span class="sourceLineNo">158</span>    public void testMoments() {<a name="line.158"></a>
<span class="sourceLineNo">159</span>        final double tol = 1e-9;<a name="line.159"></a>
<span class="sourceLineNo">160</span>        GeometricDistribution dist;<a name="line.160"></a>
<span class="sourceLineNo">161</span><a name="line.161"></a>
<span class="sourceLineNo">162</span>        dist = new GeometricDistribution(0.5);<a name="line.162"></a>
<span class="sourceLineNo">163</span>        Assert.assertEquals(dist.getNumericalMean(), (1.0d - 0.5d) / 0.5d, tol);<a name="line.163"></a>
<span class="sourceLineNo">164</span>        Assert.assertEquals(dist.getNumericalVariance(), (1.0d - 0.5d) / (0.5d * 0.5d), tol);<a name="line.164"></a>
<span class="sourceLineNo">165</span><a name="line.165"></a>
<span class="sourceLineNo">166</span>        dist = new GeometricDistribution(0.3);<a name="line.166"></a>
<span class="sourceLineNo">167</span>        Assert.assertEquals(dist.getNumericalMean(), (1.0d - 0.3d) / 0.3d, tol);<a name="line.167"></a>
<span class="sourceLineNo">168</span>        Assert.assertEquals(dist.getNumericalVariance(), (1.0d - 0.3d) / (0.3d * 0.3d), tol);<a name="line.168"></a>
<span class="sourceLineNo">169</span>    }<a name="line.169"></a>
<span class="sourceLineNo">170</span>}<a name="line.170"></a>




























































</pre>
</div>
</body>
</html>
