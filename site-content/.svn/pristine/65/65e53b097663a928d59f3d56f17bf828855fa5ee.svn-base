<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span>package org.apache.commons.math3.ode.events;<a name="line.17"></a>
<span class="sourceLineNo">018</span><a name="line.18"></a>
<span class="sourceLineNo">019</span>import java.util.ArrayList;<a name="line.19"></a>
<span class="sourceLineNo">020</span>import java.util.List;<a name="line.20"></a>
<span class="sourceLineNo">021</span><a name="line.21"></a>
<span class="sourceLineNo">022</span>import org.apache.commons.math3.analysis.solvers.BaseSecantSolver;<a name="line.22"></a>
<span class="sourceLineNo">023</span>import org.apache.commons.math3.analysis.solvers.PegasusSolver;<a name="line.23"></a>
<span class="sourceLineNo">024</span>import org.apache.commons.math3.exception.DimensionMismatchException;<a name="line.24"></a>
<span class="sourceLineNo">025</span>import org.apache.commons.math3.exception.MaxCountExceededException;<a name="line.25"></a>
<span class="sourceLineNo">026</span>import org.apache.commons.math3.exception.NoBracketingException;<a name="line.26"></a>
<span class="sourceLineNo">027</span>import org.apache.commons.math3.exception.NumberIsTooSmallException;<a name="line.27"></a>
<span class="sourceLineNo">028</span>import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;<a name="line.28"></a>
<span class="sourceLineNo">029</span>import org.apache.commons.math3.ode.FirstOrderIntegrator;<a name="line.29"></a>
<span class="sourceLineNo">030</span>import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;<a name="line.30"></a>
<span class="sourceLineNo">031</span>import org.junit.Assert;<a name="line.31"></a>
<span class="sourceLineNo">032</span>import org.junit.Test;<a name="line.32"></a>
<span class="sourceLineNo">033</span><a name="line.33"></a>
<span class="sourceLineNo">034</span>/** Tests for overlapping state events. Also tests an event function that does<a name="line.34"></a>
<span class="sourceLineNo">035</span> * not converge to zero, but does have values of opposite sign around its root.<a name="line.35"></a>
<span class="sourceLineNo">036</span> */<a name="line.36"></a>
<span class="sourceLineNo">037</span>public class OverlappingEventsTest implements FirstOrderDifferentialEquations {<a name="line.37"></a>
<span class="sourceLineNo">038</span><a name="line.38"></a>
<span class="sourceLineNo">039</span>    /** Expected event times for first event. */<a name="line.39"></a>
<span class="sourceLineNo">040</span>    private static final double[] EVENT_TIMES1 = {1.0, 2.0, 3.0, 4.0, 5.0, 6.0,<a name="line.40"></a>
<span class="sourceLineNo">041</span>                                                  7.0, 8.0, 9.0};<a name="line.41"></a>
<span class="sourceLineNo">042</span><a name="line.42"></a>
<span class="sourceLineNo">043</span>    /** Expected event times for second event. */<a name="line.43"></a>
<span class="sourceLineNo">044</span>    private static final double[] EVENT_TIMES2 = {0.5, 1.0, 1.5, 2.0, 2.5, 3.0,<a name="line.44"></a>
<span class="sourceLineNo">045</span>                                                  3.5, 4.0, 4.5, 5.0, 5.5, 6.0,<a name="line.45"></a>
<span class="sourceLineNo">046</span>                                                  6.5, 7.0, 7.5, 8.0, 8.5, 9.0,<a name="line.46"></a>
<span class="sourceLineNo">047</span>                                                  9.5};<a name="line.47"></a>
<span class="sourceLineNo">048</span><a name="line.48"></a>
<span class="sourceLineNo">049</span>    /** Test for events that occur at the exact same time, but due to numerical<a name="line.49"></a>
<span class="sourceLineNo">050</span>     * calculations occur very close together instead. Uses event type 0. See<a name="line.50"></a>
<span class="sourceLineNo">051</span>     * {@link org.apache.commons.math3.ode.events.EventHandler#g(double, double[])<a name="line.51"></a>
<span class="sourceLineNo">052</span>     * EventHandler.g(double, double[])}.<a name="line.52"></a>
<span class="sourceLineNo">053</span>     */<a name="line.53"></a>
<span class="sourceLineNo">054</span>    @Test<a name="line.54"></a>
<span class="sourceLineNo">055</span>    public void testOverlappingEvents0()<a name="line.55"></a>
<span class="sourceLineNo">056</span>        throws DimensionMismatchException, NumberIsTooSmallException,<a name="line.56"></a>
<span class="sourceLineNo">057</span>               MaxCountExceededException, NoBracketingException {<a name="line.57"></a>
<span class="sourceLineNo">058</span>        test(0);<a name="line.58"></a>
<span class="sourceLineNo">059</span>    }<a name="line.59"></a>
<span class="sourceLineNo">060</span><a name="line.60"></a>
<span class="sourceLineNo">061</span>    /** Test for events that occur at the exact same time, but due to numerical<a name="line.61"></a>
<span class="sourceLineNo">062</span>     * calculations occur very close together instead. Uses event type 1. See<a name="line.62"></a>
<span class="sourceLineNo">063</span>     * {@link org.apache.commons.math3.ode.events.EventHandler#g(double, double[])<a name="line.63"></a>
<span class="sourceLineNo">064</span>     * EventHandler.g(double, double[])}.<a name="line.64"></a>
<span class="sourceLineNo">065</span>     */<a name="line.65"></a>
<span class="sourceLineNo">066</span>    @Test<a name="line.66"></a>
<span class="sourceLineNo">067</span>    public void testOverlappingEvents1()<a name="line.67"></a>
<span class="sourceLineNo">068</span>        throws DimensionMismatchException, NumberIsTooSmallException,<a name="line.68"></a>
<span class="sourceLineNo">069</span>               MaxCountExceededException, NoBracketingException {<a name="line.69"></a>
<span class="sourceLineNo">070</span>        test(1);<a name="line.70"></a>
<span class="sourceLineNo">071</span>    }<a name="line.71"></a>
<span class="sourceLineNo">072</span><a name="line.72"></a>
<span class="sourceLineNo">073</span>    /** Test for events that occur at the exact same time, but due to numerical<a name="line.73"></a>
<span class="sourceLineNo">074</span>     * calculations occur very close together instead.<a name="line.74"></a>
<span class="sourceLineNo">075</span>     * @param eventType the type of events to use. See<a name="line.75"></a>
<span class="sourceLineNo">076</span>     * {@link org.apache.commons.math3.ode.events.EventHandler#g(double, double[])<a name="line.76"></a>
<span class="sourceLineNo">077</span>     * EventHandler.g(double, double[])}.<a name="line.77"></a>
<span class="sourceLineNo">078</span>     */<a name="line.78"></a>
<span class="sourceLineNo">079</span>    public void test(int eventType)<a name="line.79"></a>
<span class="sourceLineNo">080</span>        throws DimensionMismatchException, NumberIsTooSmallException,<a name="line.80"></a>
<span class="sourceLineNo">081</span>               MaxCountExceededException, NoBracketingException {<a name="line.81"></a>
<span class="sourceLineNo">082</span>        double e = 1e-15;<a name="line.82"></a>
<span class="sourceLineNo">083</span>        FirstOrderIntegrator integrator = new DormandPrince853Integrator(e, 100.0, 1e-7, 1e-7);<a name="line.83"></a>
<span class="sourceLineNo">084</span>        BaseSecantSolver rootSolver = new PegasusSolver(e, e);<a name="line.84"></a>
<span class="sourceLineNo">085</span>        EventHandler evt1 = new Event(0, eventType);<a name="line.85"></a>
<span class="sourceLineNo">086</span>        EventHandler evt2 = new Event(1, eventType);<a name="line.86"></a>
<span class="sourceLineNo">087</span>        integrator.addEventHandler(evt1, 0.1, e, 999, rootSolver);<a name="line.87"></a>
<span class="sourceLineNo">088</span>        integrator.addEventHandler(evt2, 0.1, e, 999, rootSolver);<a name="line.88"></a>
<span class="sourceLineNo">089</span>        double t = 0.0;<a name="line.89"></a>
<span class="sourceLineNo">090</span>        double tEnd = 10.0;<a name="line.90"></a>
<span class="sourceLineNo">091</span>        double[] y = {0.0, 0.0};<a name="line.91"></a>
<span class="sourceLineNo">092</span>        List&lt;Double&gt; events1 = new ArrayList&lt;Double&gt;();<a name="line.92"></a>
<span class="sourceLineNo">093</span>        List&lt;Double&gt; events2 = new ArrayList&lt;Double&gt;();<a name="line.93"></a>
<span class="sourceLineNo">094</span>        while (t &lt; tEnd) {<a name="line.94"></a>
<span class="sourceLineNo">095</span>            t = integrator.integrate(this, t, y, tEnd, y);<a name="line.95"></a>
<span class="sourceLineNo">096</span>            //System.out.println("t=" + t + ",\t\ty=[" + y[0] + "," + y[1] + "]");<a name="line.96"></a>
<span class="sourceLineNo">097</span><a name="line.97"></a>
<span class="sourceLineNo">098</span>            if (y[0] &gt;= 1.0) {<a name="line.98"></a>
<span class="sourceLineNo">099</span>                y[0] = 0.0;<a name="line.99"></a>
<span class="sourceLineNo">100</span>                events1.add(t);<a name="line.100"></a>
<span class="sourceLineNo">101</span>                //System.out.println("Event 1 @ t=" + t);<a name="line.101"></a>
<span class="sourceLineNo">102</span>            }<a name="line.102"></a>
<span class="sourceLineNo">103</span>            if (y[1] &gt;= 1.0) {<a name="line.103"></a>
<span class="sourceLineNo">104</span>                y[1] = 0.0;<a name="line.104"></a>
<span class="sourceLineNo">105</span>                events2.add(t);<a name="line.105"></a>
<span class="sourceLineNo">106</span>                //System.out.println("Event 2 @ t=" + t);<a name="line.106"></a>
<span class="sourceLineNo">107</span>            }<a name="line.107"></a>
<span class="sourceLineNo">108</span>        }<a name="line.108"></a>
<span class="sourceLineNo">109</span>        Assert.assertEquals(EVENT_TIMES1.length, events1.size());<a name="line.109"></a>
<span class="sourceLineNo">110</span>        Assert.assertEquals(EVENT_TIMES2.length, events2.size());<a name="line.110"></a>
<span class="sourceLineNo">111</span>        for(int i = 0; i &lt; EVENT_TIMES1.length; i++) {<a name="line.111"></a>
<span class="sourceLineNo">112</span>            Assert.assertEquals(EVENT_TIMES1[i], events1.get(i), 1e-7);<a name="line.112"></a>
<span class="sourceLineNo">113</span>        }<a name="line.113"></a>
<span class="sourceLineNo">114</span>        for(int i = 0; i &lt; EVENT_TIMES2.length; i++) {<a name="line.114"></a>
<span class="sourceLineNo">115</span>            Assert.assertEquals(EVENT_TIMES2[i], events2.get(i), 1e-7);<a name="line.115"></a>
<span class="sourceLineNo">116</span>        }<a name="line.116"></a>
<span class="sourceLineNo">117</span>        //System.out.println();<a name="line.117"></a>
<span class="sourceLineNo">118</span>    }<a name="line.118"></a>
<span class="sourceLineNo">119</span><a name="line.119"></a>
<span class="sourceLineNo">120</span>    /** {@inheritDoc} */<a name="line.120"></a>
<span class="sourceLineNo">121</span>    public int getDimension() {<a name="line.121"></a>
<span class="sourceLineNo">122</span>        return 2;<a name="line.122"></a>
<span class="sourceLineNo">123</span>    }<a name="line.123"></a>
<span class="sourceLineNo">124</span><a name="line.124"></a>
<span class="sourceLineNo">125</span>    /** {@inheritDoc} */<a name="line.125"></a>
<span class="sourceLineNo">126</span>    public void computeDerivatives(double t, double[] y, double[] yDot) {<a name="line.126"></a>
<span class="sourceLineNo">127</span>        yDot[0] = 1.0;<a name="line.127"></a>
<span class="sourceLineNo">128</span>        yDot[1] = 2.0;<a name="line.128"></a>
<span class="sourceLineNo">129</span>    }<a name="line.129"></a>
<span class="sourceLineNo">130</span><a name="line.130"></a>
<span class="sourceLineNo">131</span>    /** State events for this unit test. */<a name="line.131"></a>
<span class="sourceLineNo">132</span>    private class Event implements EventHandler {<a name="line.132"></a>
<span class="sourceLineNo">133</span>        /** The index of the continuous variable to use. */<a name="line.133"></a>
<span class="sourceLineNo">134</span>        private final int idx;<a name="line.134"></a>
<span class="sourceLineNo">135</span><a name="line.135"></a>
<span class="sourceLineNo">136</span>        /** The event type to use. See {@link #g}. */<a name="line.136"></a>
<span class="sourceLineNo">137</span>        private final int eventType;<a name="line.137"></a>
<span class="sourceLineNo">138</span><a name="line.138"></a>
<span class="sourceLineNo">139</span>        /** Constructor for the {@link Event} class.<a name="line.139"></a>
<span class="sourceLineNo">140</span>         * @param idx the index of the continuous variable to use<a name="line.140"></a>
<span class="sourceLineNo">141</span>         * @param eventType the type of event to use. See {@link #g}<a name="line.141"></a>
<span class="sourceLineNo">142</span>         */<a name="line.142"></a>
<span class="sourceLineNo">143</span>        public Event(int idx, int eventType) {<a name="line.143"></a>
<span class="sourceLineNo">144</span>            this.idx = idx;<a name="line.144"></a>
<span class="sourceLineNo">145</span>            this.eventType = eventType;<a name="line.145"></a>
<span class="sourceLineNo">146</span>        }<a name="line.146"></a>
<span class="sourceLineNo">147</span><a name="line.147"></a>
<span class="sourceLineNo">148</span>        /** {@inheritDoc} */<a name="line.148"></a>
<span class="sourceLineNo">149</span>        public void init(double t0, double[] y0, double t) {<a name="line.149"></a>
<span class="sourceLineNo">150</span>        }<a name="line.150"></a>
<span class="sourceLineNo">151</span><a name="line.151"></a>
<span class="sourceLineNo">152</span>        /** {@inheritDoc} */<a name="line.152"></a>
<span class="sourceLineNo">153</span>        public double g(double t, double[] y) {<a name="line.153"></a>
<span class="sourceLineNo">154</span>            return (eventType == 0) ? y[idx] &gt;= 1.0 ? 1.0 : -1.0<a name="line.154"></a>
<span class="sourceLineNo">155</span>                                    : y[idx] - 1.0;<a name="line.155"></a>
<span class="sourceLineNo">156</span>        }<a name="line.156"></a>
<span class="sourceLineNo">157</span><a name="line.157"></a>
<span class="sourceLineNo">158</span>        /** {@inheritDoc} */<a name="line.158"></a>
<span class="sourceLineNo">159</span>        public Action eventOccurred(double t, double[] y, boolean increasing) {<a name="line.159"></a>
<span class="sourceLineNo">160</span>            return Action.STOP;<a name="line.160"></a>
<span class="sourceLineNo">161</span>        }<a name="line.161"></a>
<span class="sourceLineNo">162</span><a name="line.162"></a>
<span class="sourceLineNo">163</span>        /** {@inheritDoc} */<a name="line.163"></a>
<span class="sourceLineNo">164</span>        public void resetState(double t, double[] y) {<a name="line.164"></a>
<span class="sourceLineNo">165</span>            // Never called.<a name="line.165"></a>
<span class="sourceLineNo">166</span>        }<a name="line.166"></a>
<span class="sourceLineNo">167</span>    }<a name="line.167"></a>
<span class="sourceLineNo">168</span>}<a name="line.168"></a>




























































</pre>
</div>
</body>
</html>
