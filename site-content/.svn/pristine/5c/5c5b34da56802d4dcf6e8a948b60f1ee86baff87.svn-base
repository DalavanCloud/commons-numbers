<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements. See the NOTICE file distributed with this<a name="line.3"></a>
<span class="sourceLineNo">004</span> * work for additional information regarding copyright ownership. The ASF<a name="line.4"></a>
<span class="sourceLineNo">005</span> * licenses this file to You under the Apache License, Version 2.0 (the<a name="line.5"></a>
<span class="sourceLineNo">006</span> * "License"); you may not use this file except in compliance with the License.<a name="line.6"></a>
<span class="sourceLineNo">007</span> * You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law<a name="line.8"></a>
<span class="sourceLineNo">009</span> * or agreed to in writing, software distributed under the License is<a name="line.9"></a>
<span class="sourceLineNo">010</span> * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY<a name="line.10"></a>
<span class="sourceLineNo">011</span> * KIND, either express or implied. See the License for the specific language<a name="line.11"></a>
<span class="sourceLineNo">012</span> * governing permissions and limitations under the License.<a name="line.12"></a>
<span class="sourceLineNo">013</span> */<a name="line.13"></a>
<span class="sourceLineNo">014</span>package org.apache.commons.math3.util;<a name="line.14"></a>
<span class="sourceLineNo">015</span><a name="line.15"></a>
<span class="sourceLineNo">016</span>import org.junit.Assert;<a name="line.16"></a>
<span class="sourceLineNo">017</span>import org.junit.Test;<a name="line.17"></a>
<span class="sourceLineNo">018</span><a name="line.18"></a>
<span class="sourceLineNo">019</span>/**<a name="line.19"></a>
<span class="sourceLineNo">020</span> * Test for {@link Pair}.<a name="line.20"></a>
<span class="sourceLineNo">021</span> */<a name="line.21"></a>
<span class="sourceLineNo">022</span>public class PairTest {<a name="line.22"></a>
<span class="sourceLineNo">023</span><a name="line.23"></a>
<span class="sourceLineNo">024</span>    @Test<a name="line.24"></a>
<span class="sourceLineNo">025</span>    public void testAccessor() {<a name="line.25"></a>
<span class="sourceLineNo">026</span>        final Pair&lt;Integer, Double&gt; p<a name="line.26"></a>
<span class="sourceLineNo">027</span>            = new Pair&lt;Integer, Double&gt;(new Integer(1), new Double(2));<a name="line.27"></a>
<span class="sourceLineNo">028</span>        Assert.assertEquals(new Integer(1), p.getKey());<a name="line.28"></a>
<span class="sourceLineNo">029</span>        Assert.assertEquals(2, p.getValue().doubleValue(), Math.ulp(1d));<a name="line.29"></a>
<span class="sourceLineNo">030</span>    }<a name="line.30"></a>
<span class="sourceLineNo">031</span><a name="line.31"></a>
<span class="sourceLineNo">032</span>    @Test<a name="line.32"></a>
<span class="sourceLineNo">033</span>    public void testAccessor2() {<a name="line.33"></a>
<span class="sourceLineNo">034</span>        final Pair&lt;Integer, Double&gt; p<a name="line.34"></a>
<span class="sourceLineNo">035</span>            = new Pair&lt;Integer, Double&gt;(new Integer(1), new Double(2));<a name="line.35"></a>
<span class="sourceLineNo">036</span><a name="line.36"></a>
<span class="sourceLineNo">037</span>        // Check that both APIs refer to the same data.<a name="line.37"></a>
<span class="sourceLineNo">038</span><a name="line.38"></a>
<span class="sourceLineNo">039</span>        Assert.assertTrue(p.getFirst() == p.getKey());<a name="line.39"></a>
<span class="sourceLineNo">040</span>        Assert.assertTrue(p.getSecond() == p.getValue());<a name="line.40"></a>
<span class="sourceLineNo">041</span>    }<a name="line.41"></a>
<span class="sourceLineNo">042</span><a name="line.42"></a>
<span class="sourceLineNo">043</span>    @Test<a name="line.43"></a>
<span class="sourceLineNo">044</span>    public void testEquals() {<a name="line.44"></a>
<span class="sourceLineNo">045</span>        Pair&lt;Integer, Double&gt; p1 = new Pair&lt;Integer, Double&gt;(null, null);<a name="line.45"></a>
<span class="sourceLineNo">046</span>        Assert.assertFalse(p1.equals(null));<a name="line.46"></a>
<span class="sourceLineNo">047</span><a name="line.47"></a>
<span class="sourceLineNo">048</span>        Pair&lt;Integer, Double&gt; p2 = new Pair&lt;Integer, Double&gt;(null, null);<a name="line.48"></a>
<span class="sourceLineNo">049</span>        Assert.assertTrue(p1.equals(p2));<a name="line.49"></a>
<span class="sourceLineNo">050</span><a name="line.50"></a>
<span class="sourceLineNo">051</span>        p1 = new Pair&lt;Integer, Double&gt;(new Integer(1), new Double(2));<a name="line.51"></a>
<span class="sourceLineNo">052</span>        Assert.assertFalse(p1.equals(p2));<a name="line.52"></a>
<span class="sourceLineNo">053</span><a name="line.53"></a>
<span class="sourceLineNo">054</span>        p2 = new Pair&lt;Integer, Double&gt;(new Integer(1), new Double(2));<a name="line.54"></a>
<span class="sourceLineNo">055</span>        Assert.assertTrue(p1.equals(p2));<a name="line.55"></a>
<span class="sourceLineNo">056</span><a name="line.56"></a>
<span class="sourceLineNo">057</span>        Pair&lt;Integer, Float&gt; p3 = new Pair&lt;Integer, Float&gt;(new Integer(1), new Float(2));<a name="line.57"></a>
<span class="sourceLineNo">058</span>        Assert.assertFalse(p1.equals(p3));<a name="line.58"></a>
<span class="sourceLineNo">059</span>    }<a name="line.59"></a>
<span class="sourceLineNo">060</span><a name="line.60"></a>
<span class="sourceLineNo">061</span>    @Test<a name="line.61"></a>
<span class="sourceLineNo">062</span>    public void testHashCode() {<a name="line.62"></a>
<span class="sourceLineNo">063</span>        final MyInteger m1 = new MyInteger(1);<a name="line.63"></a>
<span class="sourceLineNo">064</span>        final MyInteger m2 = new MyInteger(1);<a name="line.64"></a>
<span class="sourceLineNo">065</span><a name="line.65"></a>
<span class="sourceLineNo">066</span>        final Pair&lt;MyInteger, MyInteger&gt; p1 = new Pair&lt;MyInteger, MyInteger&gt;(m1, m1);<a name="line.66"></a>
<span class="sourceLineNo">067</span>        final Pair&lt;MyInteger, MyInteger&gt; p2 = new Pair&lt;MyInteger, MyInteger&gt;(m2, m2);<a name="line.67"></a>
<span class="sourceLineNo">068</span>        // Same contents, same hash code.<a name="line.68"></a>
<span class="sourceLineNo">069</span>        Assert.assertTrue(p1.hashCode() == p2.hashCode());<a name="line.69"></a>
<span class="sourceLineNo">070</span><a name="line.70"></a>
<span class="sourceLineNo">071</span>        // Different contents, different hash codes.<a name="line.71"></a>
<span class="sourceLineNo">072</span>        m2.set(2);<a name="line.72"></a>
<span class="sourceLineNo">073</span>        Assert.assertFalse(p1.hashCode() == p2.hashCode());<a name="line.73"></a>
<span class="sourceLineNo">074</span>    }<a name="line.74"></a>
<span class="sourceLineNo">075</span><a name="line.75"></a>
<span class="sourceLineNo">076</span>    @Test<a name="line.76"></a>
<span class="sourceLineNo">077</span>    public void testToString() {<a name="line.77"></a>
<span class="sourceLineNo">078</span>        Assert.assertEquals("[null, null]", new Pair&lt;Object, Object&gt;(null, null).toString());<a name="line.78"></a>
<span class="sourceLineNo">079</span>        Assert.assertEquals("[foo, 3]", new Pair&lt;String, Integer&gt;("foo", 3).toString());<a name="line.79"></a>
<span class="sourceLineNo">080</span>    }<a name="line.80"></a>
<span class="sourceLineNo">081</span><a name="line.81"></a>
<span class="sourceLineNo">082</span>    @Test<a name="line.82"></a>
<span class="sourceLineNo">083</span>    public void testCreate() {<a name="line.83"></a>
<span class="sourceLineNo">084</span>        final Pair&lt;String, Integer&gt; p1 = Pair.create("foo", 3);<a name="line.84"></a>
<span class="sourceLineNo">085</span>        Assert.assertNotNull(p1);<a name="line.85"></a>
<span class="sourceLineNo">086</span>        final Pair&lt;String, Integer&gt; p2 = new Pair&lt;String, Integer&gt;("foo", 3);<a name="line.86"></a>
<span class="sourceLineNo">087</span>        Assert.assertEquals(p2, p1);<a name="line.87"></a>
<span class="sourceLineNo">088</span>    }<a name="line.88"></a>
<span class="sourceLineNo">089</span><a name="line.89"></a>
<span class="sourceLineNo">090</span>    /**<a name="line.90"></a>
<span class="sourceLineNo">091</span>     * A mutable integer.<a name="line.91"></a>
<span class="sourceLineNo">092</span>     */<a name="line.92"></a>
<span class="sourceLineNo">093</span>    private static class MyInteger {<a name="line.93"></a>
<span class="sourceLineNo">094</span>        private int i;<a name="line.94"></a>
<span class="sourceLineNo">095</span><a name="line.95"></a>
<span class="sourceLineNo">096</span>        public MyInteger(int i) {<a name="line.96"></a>
<span class="sourceLineNo">097</span>            this.i = i;<a name="line.97"></a>
<span class="sourceLineNo">098</span>        }<a name="line.98"></a>
<span class="sourceLineNo">099</span><a name="line.99"></a>
<span class="sourceLineNo">100</span>        public void set(int i) {<a name="line.100"></a>
<span class="sourceLineNo">101</span>            this.i = i;<a name="line.101"></a>
<span class="sourceLineNo">102</span>        }<a name="line.102"></a>
<span class="sourceLineNo">103</span><a name="line.103"></a>
<span class="sourceLineNo">104</span>        @Override<a name="line.104"></a>
<span class="sourceLineNo">105</span>        public boolean equals(Object o) {<a name="line.105"></a>
<span class="sourceLineNo">106</span>            if (!(o instanceof MyInteger)) {<a name="line.106"></a>
<span class="sourceLineNo">107</span>                return false;<a name="line.107"></a>
<span class="sourceLineNo">108</span>            } else {<a name="line.108"></a>
<span class="sourceLineNo">109</span>                return i == ((MyInteger) o).i;<a name="line.109"></a>
<span class="sourceLineNo">110</span>            }<a name="line.110"></a>
<span class="sourceLineNo">111</span>        }<a name="line.111"></a>
<span class="sourceLineNo">112</span><a name="line.112"></a>
<span class="sourceLineNo">113</span>        @Override<a name="line.113"></a>
<span class="sourceLineNo">114</span>        public int hashCode() {<a name="line.114"></a>
<span class="sourceLineNo">115</span>            return i;<a name="line.115"></a>
<span class="sourceLineNo">116</span>        }<a name="line.116"></a>
<span class="sourceLineNo">117</span>    }<a name="line.117"></a>
<span class="sourceLineNo">118</span>}<a name="line.118"></a>




























































</pre>
</div>
</body>
</html>
