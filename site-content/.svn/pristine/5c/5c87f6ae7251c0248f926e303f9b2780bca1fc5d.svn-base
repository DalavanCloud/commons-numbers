<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span><a name="line.17"></a>
<span class="sourceLineNo">018</span>package org.apache.commons.math3.distribution;<a name="line.18"></a>
<span class="sourceLineNo">019</span><a name="line.19"></a>
<span class="sourceLineNo">020</span>import org.apache.commons.math3.exception.NotStrictlyPositiveException;<a name="line.20"></a>
<span class="sourceLineNo">021</span>import org.junit.Assert;<a name="line.21"></a>
<span class="sourceLineNo">022</span>import org.junit.Test;<a name="line.22"></a>
<span class="sourceLineNo">023</span><a name="line.23"></a>
<span class="sourceLineNo">024</span>/**<a name="line.24"></a>
<span class="sourceLineNo">025</span> * Test cases for {@link LogNormalDistribution}. Extends<a name="line.25"></a>
<span class="sourceLineNo">026</span> * {@link RealDistributionAbstractTest}. See class javadoc of that class<a name="line.26"></a>
<span class="sourceLineNo">027</span> * for details.<a name="line.27"></a>
<span class="sourceLineNo">028</span> *<a name="line.28"></a>
<span class="sourceLineNo">029</span> * @since 3.0<a name="line.29"></a>
<span class="sourceLineNo">030</span> */<a name="line.30"></a>
<span class="sourceLineNo">031</span>public class LogNormalDistributionTest extends RealDistributionAbstractTest {<a name="line.31"></a>
<span class="sourceLineNo">032</span><a name="line.32"></a>
<span class="sourceLineNo">033</span>    //-------------- Implementations for abstract methods -----------------------<a name="line.33"></a>
<span class="sourceLineNo">034</span><a name="line.34"></a>
<span class="sourceLineNo">035</span>    /** Creates the default real distribution instance to use in tests. */<a name="line.35"></a>
<span class="sourceLineNo">036</span>    @Override<a name="line.36"></a>
<span class="sourceLineNo">037</span>    public LogNormalDistribution makeDistribution() {<a name="line.37"></a>
<span class="sourceLineNo">038</span>        return new LogNormalDistribution(2.1, 1.4);<a name="line.38"></a>
<span class="sourceLineNo">039</span>    }<a name="line.39"></a>
<span class="sourceLineNo">040</span><a name="line.40"></a>
<span class="sourceLineNo">041</span>    /** Creates the default cumulative probability distribution test input values */<a name="line.41"></a>
<span class="sourceLineNo">042</span>    @Override<a name="line.42"></a>
<span class="sourceLineNo">043</span>    public double[] makeCumulativeTestPoints() {<a name="line.43"></a>
<span class="sourceLineNo">044</span>        // quantiles computed using R<a name="line.44"></a>
<span class="sourceLineNo">045</span>        return new double[] { -2.226325228634938, -1.156887023657177,<a name="line.45"></a>
<span class="sourceLineNo">046</span>                              -0.643949578356075, -0.2027950777320613,<a name="line.46"></a>
<span class="sourceLineNo">047</span>                              0.305827808237559, 6.42632522863494,<a name="line.47"></a>
<span class="sourceLineNo">048</span>                              5.35688702365718, 4.843949578356074,<a name="line.48"></a>
<span class="sourceLineNo">049</span>                              4.40279507773206, 3.89417219176244 };<a name="line.49"></a>
<span class="sourceLineNo">050</span>    }<a name="line.50"></a>
<span class="sourceLineNo">051</span><a name="line.51"></a>
<span class="sourceLineNo">052</span>    /** Creates the default cumulative probability density test expected values */<a name="line.52"></a>
<span class="sourceLineNo">053</span>    @Override<a name="line.53"></a>
<span class="sourceLineNo">054</span>    public double[] makeCumulativeTestValues() {<a name="line.54"></a>
<span class="sourceLineNo">055</span>        return new double[] { 0, 0, 0, 0, 0.00948199951485, 0.432056525076,<a name="line.55"></a>
<span class="sourceLineNo">056</span>                              0.381648158697, 0.354555726206, 0.329513316888,<a name="line.56"></a>
<span class="sourceLineNo">057</span>                              0.298422824228 };<a name="line.57"></a>
<span class="sourceLineNo">058</span>    }<a name="line.58"></a>
<span class="sourceLineNo">059</span><a name="line.59"></a>
<span class="sourceLineNo">060</span>    /** Creates the default probability density test expected values */<a name="line.60"></a>
<span class="sourceLineNo">061</span>    @Override<a name="line.61"></a>
<span class="sourceLineNo">062</span>    public double[] makeDensityTestValues() {<a name="line.62"></a>
<span class="sourceLineNo">063</span>        return new double[] { 0, 0, 0, 0, 0.0594218160072, 0.0436977691036,<a name="line.63"></a>
<span class="sourceLineNo">064</span>                              0.0508364857798, 0.054873528325, 0.0587182664085,<a name="line.64"></a>
<span class="sourceLineNo">065</span>                              0.0636229042785 };<a name="line.65"></a>
<span class="sourceLineNo">066</span>    }<a name="line.66"></a>
<span class="sourceLineNo">067</span><a name="line.67"></a>
<span class="sourceLineNo">068</span>    /**<a name="line.68"></a>
<span class="sourceLineNo">069</span>     * Creates the default inverse cumulative probability distribution test<a name="line.69"></a>
<span class="sourceLineNo">070</span>     * input values.<a name="line.70"></a>
<span class="sourceLineNo">071</span>     */<a name="line.71"></a>
<span class="sourceLineNo">072</span>    @Override<a name="line.72"></a>
<span class="sourceLineNo">073</span>    public double[] makeInverseCumulativeTestPoints() {<a name="line.73"></a>
<span class="sourceLineNo">074</span>        // Exclude the test points less than zero, as they have cumulative<a name="line.74"></a>
<span class="sourceLineNo">075</span>        // probability of zero, meaning the inverse returns zero, and not the<a name="line.75"></a>
<span class="sourceLineNo">076</span>        // points less than zero.<a name="line.76"></a>
<span class="sourceLineNo">077</span>        double[] points = makeCumulativeTestValues();<a name="line.77"></a>
<span class="sourceLineNo">078</span>        double[] points2 = new double[points.length - 4];<a name="line.78"></a>
<span class="sourceLineNo">079</span>        System.arraycopy(points, 4, points2, 0, points2.length - 4);<a name="line.79"></a>
<span class="sourceLineNo">080</span>        return points2;<a name="line.80"></a>
<span class="sourceLineNo">081</span>        //return Arrays.copyOfRange(points, 4, points.length - 4);<a name="line.81"></a>
<span class="sourceLineNo">082</span>    }<a name="line.82"></a>
<span class="sourceLineNo">083</span><a name="line.83"></a>
<span class="sourceLineNo">084</span>    /**<a name="line.84"></a>
<span class="sourceLineNo">085</span>     * Creates the default inverse cumulative probability test expected<a name="line.85"></a>
<span class="sourceLineNo">086</span>     * values.<a name="line.86"></a>
<span class="sourceLineNo">087</span>     */<a name="line.87"></a>
<span class="sourceLineNo">088</span>    @Override<a name="line.88"></a>
<span class="sourceLineNo">089</span>    public double[] makeInverseCumulativeTestValues() {<a name="line.89"></a>
<span class="sourceLineNo">090</span>        // Exclude the test points less than zero, as they have cumulative<a name="line.90"></a>
<span class="sourceLineNo">091</span>        // probability of zero, meaning the inverse returns zero, and not the<a name="line.91"></a>
<span class="sourceLineNo">092</span>        // points less than zero.<a name="line.92"></a>
<span class="sourceLineNo">093</span>        double[] points = makeCumulativeTestPoints();<a name="line.93"></a>
<span class="sourceLineNo">094</span>        double[] points2 = new double[points.length - 4];<a name="line.94"></a>
<span class="sourceLineNo">095</span>        System.arraycopy(points, 4, points2, 0, points2.length - 4);<a name="line.95"></a>
<span class="sourceLineNo">096</span>        return points2;<a name="line.96"></a>
<span class="sourceLineNo">097</span>        //return Arrays.copyOfRange(points, 1, points.length - 4);<a name="line.97"></a>
<span class="sourceLineNo">098</span>    }<a name="line.98"></a>
<span class="sourceLineNo">099</span><a name="line.99"></a>
<span class="sourceLineNo">100</span>    // --------------------- Override tolerance  --------------<a name="line.100"></a>
<span class="sourceLineNo">101</span>    @Override<a name="line.101"></a>
<span class="sourceLineNo">102</span>    public void setUp() {<a name="line.102"></a>
<span class="sourceLineNo">103</span>        super.setUp();<a name="line.103"></a>
<span class="sourceLineNo">104</span>        setTolerance(LogNormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);<a name="line.104"></a>
<span class="sourceLineNo">105</span>    }<a name="line.105"></a>
<span class="sourceLineNo">106</span><a name="line.106"></a>
<span class="sourceLineNo">107</span>    //---------------------------- Additional test cases -------------------------<a name="line.107"></a>
<span class="sourceLineNo">108</span><a name="line.108"></a>
<span class="sourceLineNo">109</span>    private void verifyQuantiles() {<a name="line.109"></a>
<span class="sourceLineNo">110</span>        LogNormalDistribution distribution = (LogNormalDistribution)getDistribution();<a name="line.110"></a>
<span class="sourceLineNo">111</span>        double mu = distribution.getScale();<a name="line.111"></a>
<span class="sourceLineNo">112</span>        double sigma = distribution.getShape();<a name="line.112"></a>
<span class="sourceLineNo">113</span>        setCumulativeTestPoints( new double[] { mu - 2 *sigma, mu - sigma,<a name="line.113"></a>
<span class="sourceLineNo">114</span>                                                mu, mu + sigma, mu + 2 * sigma,<a name="line.114"></a>
<span class="sourceLineNo">115</span>                                                mu + 3 * sigma,mu + 4 * sigma,<a name="line.115"></a>
<span class="sourceLineNo">116</span>                                                mu + 5 * sigma });<a name="line.116"></a>
<span class="sourceLineNo">117</span>        verifyCumulativeProbabilities();<a name="line.117"></a>
<span class="sourceLineNo">118</span>    }<a name="line.118"></a>
<span class="sourceLineNo">119</span><a name="line.119"></a>
<span class="sourceLineNo">120</span>    @Test<a name="line.120"></a>
<span class="sourceLineNo">121</span>    public void testQuantiles() {<a name="line.121"></a>
<span class="sourceLineNo">122</span>        setCumulativeTestValues(new double[] {0, 0.0396495152787,<a name="line.122"></a>
<span class="sourceLineNo">123</span>                                              0.16601209243, 0.272533253269,<a name="line.123"></a>
<span class="sourceLineNo">124</span>                                              0.357618409638, 0.426488363093,<a name="line.124"></a>
<span class="sourceLineNo">125</span>                                              0.483255136841, 0.530823013877});<a name="line.125"></a>
<span class="sourceLineNo">126</span>        setDensityTestValues(new double[] {0, 0.0873055825147, 0.0847676303432,<a name="line.126"></a>
<span class="sourceLineNo">127</span>                                           0.0677935186237, 0.0544105523058,<a name="line.127"></a>
<span class="sourceLineNo">128</span>                                           0.0444614628804, 0.0369750288945,<a name="line.128"></a>
<span class="sourceLineNo">129</span>                                           0.0312206409653});<a name="line.129"></a>
<span class="sourceLineNo">130</span>        verifyQuantiles();<a name="line.130"></a>
<span class="sourceLineNo">131</span>        verifyDensities();<a name="line.131"></a>
<span class="sourceLineNo">132</span><a name="line.132"></a>
<span class="sourceLineNo">133</span>        setDistribution(new LogNormalDistribution(0, 1));<a name="line.133"></a>
<span class="sourceLineNo">134</span>        setCumulativeTestValues(new double[] {0, 0, 0, 0.5, 0.755891404214,<a name="line.134"></a>
<span class="sourceLineNo">135</span>                                              0.864031392359, 0.917171480998,<a name="line.135"></a>
<span class="sourceLineNo">136</span>                                              0.946239689548});<a name="line.136"></a>
<span class="sourceLineNo">137</span>        setDensityTestValues(new double[] {0, 0, 0, 0.398942280401,<a name="line.137"></a>
<span class="sourceLineNo">138</span>                                           0.156874019279, 0.07272825614,<a name="line.138"></a>
<span class="sourceLineNo">139</span>                                           0.0381534565119, 0.0218507148303});<a name="line.139"></a>
<span class="sourceLineNo">140</span>        verifyQuantiles();<a name="line.140"></a>
<span class="sourceLineNo">141</span>        verifyDensities();<a name="line.141"></a>
<span class="sourceLineNo">142</span><a name="line.142"></a>
<span class="sourceLineNo">143</span>        setDistribution(new LogNormalDistribution(0, 0.1));<a name="line.143"></a>
<span class="sourceLineNo">144</span>        setCumulativeTestValues(new double[] {0, 0, 0, 1.28417563064e-117,<a name="line.144"></a>
<span class="sourceLineNo">145</span>                                              1.39679883412e-58,<a name="line.145"></a>
<span class="sourceLineNo">146</span>                                              1.09839325447e-33,<a name="line.146"></a>
<span class="sourceLineNo">147</span>                                              2.52587961726e-20,<a name="line.147"></a>
<span class="sourceLineNo">148</span>                                              2.0824223487e-12});<a name="line.148"></a>
<span class="sourceLineNo">149</span>        setDensityTestValues(new double[] {0, 0, 0, 2.96247992535e-114,<a name="line.149"></a>
<span class="sourceLineNo">150</span>                                           1.1283370232e-55, 4.43812313223e-31,<a name="line.150"></a>
<span class="sourceLineNo">151</span>                                           5.85346445002e-18,<a name="line.151"></a>
<span class="sourceLineNo">152</span>                                           2.9446618076e-10});<a name="line.152"></a>
<span class="sourceLineNo">153</span>        verifyQuantiles();<a name="line.153"></a>
<span class="sourceLineNo">154</span>        verifyDensities();<a name="line.154"></a>
<span class="sourceLineNo">155</span>    }<a name="line.155"></a>
<span class="sourceLineNo">156</span><a name="line.156"></a>
<span class="sourceLineNo">157</span>    @Test<a name="line.157"></a>
<span class="sourceLineNo">158</span>    public void testInverseCumulativeProbabilityExtremes() {<a name="line.158"></a>
<span class="sourceLineNo">159</span>        setInverseCumulativeTestPoints(new double[] {0, 1});<a name="line.159"></a>
<span class="sourceLineNo">160</span>        setInverseCumulativeTestValues(<a name="line.160"></a>
<span class="sourceLineNo">161</span>                new double[] {0, Double.POSITIVE_INFINITY});<a name="line.161"></a>
<span class="sourceLineNo">162</span>        verifyInverseCumulativeProbabilities();<a name="line.162"></a>
<span class="sourceLineNo">163</span>    }<a name="line.163"></a>
<span class="sourceLineNo">164</span><a name="line.164"></a>
<span class="sourceLineNo">165</span>    @Test<a name="line.165"></a>
<span class="sourceLineNo">166</span>    public void testGetScale() {<a name="line.166"></a>
<span class="sourceLineNo">167</span>        LogNormalDistribution distribution = (LogNormalDistribution)getDistribution();<a name="line.167"></a>
<span class="sourceLineNo">168</span>        Assert.assertEquals(2.1, distribution.getScale(), 0);<a name="line.168"></a>
<span class="sourceLineNo">169</span>    }<a name="line.169"></a>
<span class="sourceLineNo">170</span><a name="line.170"></a>
<span class="sourceLineNo">171</span>    @Test<a name="line.171"></a>
<span class="sourceLineNo">172</span>    public void testGetShape() {<a name="line.172"></a>
<span class="sourceLineNo">173</span>        LogNormalDistribution distribution = (LogNormalDistribution)getDistribution();<a name="line.173"></a>
<span class="sourceLineNo">174</span>        Assert.assertEquals(1.4, distribution.getShape(), 0);<a name="line.174"></a>
<span class="sourceLineNo">175</span>    }<a name="line.175"></a>
<span class="sourceLineNo">176</span><a name="line.176"></a>
<span class="sourceLineNo">177</span>    @Test(expected=NotStrictlyPositiveException.class)<a name="line.177"></a>
<span class="sourceLineNo">178</span>    public void testPreconditions() {<a name="line.178"></a>
<span class="sourceLineNo">179</span>        new LogNormalDistribution(1, 0);<a name="line.179"></a>
<span class="sourceLineNo">180</span>    }<a name="line.180"></a>
<span class="sourceLineNo">181</span><a name="line.181"></a>
<span class="sourceLineNo">182</span>    @Test<a name="line.182"></a>
<span class="sourceLineNo">183</span>    public void testDensity() {<a name="line.183"></a>
<span class="sourceLineNo">184</span>        double [] x = new double[]{-2, -1, 0, 1, 2};<a name="line.184"></a>
<span class="sourceLineNo">185</span>        // R 2.13: print(dlnorm(c(-2,-1,0,1,2)), digits=10)<a name="line.185"></a>
<span class="sourceLineNo">186</span>        checkDensity(0, 1, x, new double[] { 0.0000000000, 0.0000000000,<a name="line.186"></a>
<span class="sourceLineNo">187</span>                                             0.0000000000, 0.3989422804,<a name="line.187"></a>
<span class="sourceLineNo">188</span>                                             0.1568740193 });<a name="line.188"></a>
<span class="sourceLineNo">189</span>        // R 2.13: print(dlnorm(c(-2,-1,0,1,2), mean=1.1), digits=10)<a name="line.189"></a>
<span class="sourceLineNo">190</span>        checkDensity(1.1, 1, x, new double[] { 0.0000000000, 0.0000000000,<a name="line.190"></a>
<span class="sourceLineNo">191</span>                                               0.0000000000, 0.2178521770,<a name="line.191"></a>
<span class="sourceLineNo">192</span>                                               0.1836267118});<a name="line.192"></a>
<span class="sourceLineNo">193</span>    }<a name="line.193"></a>
<span class="sourceLineNo">194</span><a name="line.194"></a>
<span class="sourceLineNo">195</span>    private void checkDensity(double scale, double shape, double[] x,<a name="line.195"></a>
<span class="sourceLineNo">196</span>        double[] expected) {<a name="line.196"></a>
<span class="sourceLineNo">197</span>        LogNormalDistribution d = new LogNormalDistribution(scale, shape);<a name="line.197"></a>
<span class="sourceLineNo">198</span>        for (int i = 0; i &lt; x.length; i++) {<a name="line.198"></a>
<span class="sourceLineNo">199</span>            Assert.assertEquals(expected[i], d.density(x[i]), 1e-9);<a name="line.199"></a>
<span class="sourceLineNo">200</span>        }<a name="line.200"></a>
<span class="sourceLineNo">201</span>    }<a name="line.201"></a>
<span class="sourceLineNo">202</span><a name="line.202"></a>
<span class="sourceLineNo">203</span>    /**<a name="line.203"></a>
<span class="sourceLineNo">204</span>     * Check to make sure top-coding of extreme values works correctly.<a name="line.204"></a>
<span class="sourceLineNo">205</span>     * Verifies fixes for JIRA MATH-167, MATH-414<a name="line.205"></a>
<span class="sourceLineNo">206</span>     */<a name="line.206"></a>
<span class="sourceLineNo">207</span>    @Test<a name="line.207"></a>
<span class="sourceLineNo">208</span>    public void testExtremeValues() {<a name="line.208"></a>
<span class="sourceLineNo">209</span>        LogNormalDistribution d = new LogNormalDistribution(0, 1);<a name="line.209"></a>
<span class="sourceLineNo">210</span>        for (int i = 0; i &lt; 1e5; i++) { // make sure no convergence exception<a name="line.210"></a>
<span class="sourceLineNo">211</span>            double upperTail = d.cumulativeProbability(i);<a name="line.211"></a>
<span class="sourceLineNo">212</span>            if (i &lt;= 72) { // make sure not top-coded<a name="line.212"></a>
<span class="sourceLineNo">213</span>                Assert.assertTrue(upperTail &lt; 1.0d);<a name="line.213"></a>
<span class="sourceLineNo">214</span>            }<a name="line.214"></a>
<span class="sourceLineNo">215</span>            else { // make sure top coding not reversed<a name="line.215"></a>
<span class="sourceLineNo">216</span>                Assert.assertTrue(upperTail &gt; 0.99999);<a name="line.216"></a>
<span class="sourceLineNo">217</span>            }<a name="line.217"></a>
<span class="sourceLineNo">218</span>        }<a name="line.218"></a>
<span class="sourceLineNo">219</span><a name="line.219"></a>
<span class="sourceLineNo">220</span>        Assert.assertEquals(d.cumulativeProbability(Double.MAX_VALUE), 1, 0);<a name="line.220"></a>
<span class="sourceLineNo">221</span>        Assert.assertEquals(d.cumulativeProbability(-Double.MAX_VALUE), 0, 0);<a name="line.221"></a>
<span class="sourceLineNo">222</span>        Assert.assertEquals(d.cumulativeProbability(Double.POSITIVE_INFINITY), 1, 0);<a name="line.222"></a>
<span class="sourceLineNo">223</span>        Assert.assertEquals(d.cumulativeProbability(Double.NEGATIVE_INFINITY), 0, 0);<a name="line.223"></a>
<span class="sourceLineNo">224</span>    }<a name="line.224"></a>
<span class="sourceLineNo">225</span><a name="line.225"></a>
<span class="sourceLineNo">226</span>    @Test<a name="line.226"></a>
<span class="sourceLineNo">227</span>    public void testMeanVariance() {<a name="line.227"></a>
<span class="sourceLineNo">228</span>        final double tol = 1e-9;<a name="line.228"></a>
<span class="sourceLineNo">229</span>        LogNormalDistribution dist;<a name="line.229"></a>
<span class="sourceLineNo">230</span><a name="line.230"></a>
<span class="sourceLineNo">231</span>        dist = new LogNormalDistribution(0, 1);<a name="line.231"></a>
<span class="sourceLineNo">232</span>        Assert.assertEquals(dist.getNumericalMean(), 1.6487212707001282, tol);<a name="line.232"></a>
<span class="sourceLineNo">233</span>        Assert.assertEquals(dist.getNumericalVariance(),<a name="line.233"></a>
<span class="sourceLineNo">234</span>                            4.670774270471604, tol);<a name="line.234"></a>
<span class="sourceLineNo">235</span><a name="line.235"></a>
<span class="sourceLineNo">236</span>        dist = new LogNormalDistribution(2.2, 1.4);<a name="line.236"></a>
<span class="sourceLineNo">237</span>        Assert.assertEquals(dist.getNumericalMean(), 24.046753552064498, tol);<a name="line.237"></a>
<span class="sourceLineNo">238</span>        Assert.assertEquals(dist.getNumericalVariance(),<a name="line.238"></a>
<span class="sourceLineNo">239</span>                            3526.913651880464, tol);<a name="line.239"></a>
<span class="sourceLineNo">240</span><a name="line.240"></a>
<span class="sourceLineNo">241</span>        dist = new LogNormalDistribution(-2000.9, 10.4);<a name="line.241"></a>
<span class="sourceLineNo">242</span>        Assert.assertEquals(dist.getNumericalMean(), 0.0, tol);<a name="line.242"></a>
<span class="sourceLineNo">243</span>        Assert.assertEquals(dist.getNumericalVariance(), 0.0, tol);<a name="line.243"></a>
<span class="sourceLineNo">244</span>    }<a name="line.244"></a>
<span class="sourceLineNo">245</span><a name="line.245"></a>
<span class="sourceLineNo">246</span>    @Test<a name="line.246"></a>
<span class="sourceLineNo">247</span>    public void testTinyVariance() {<a name="line.247"></a>
<span class="sourceLineNo">248</span>        LogNormalDistribution dist = new LogNormalDistribution(0, 1e-9);<a name="line.248"></a>
<span class="sourceLineNo">249</span>        double t = dist.getNumericalVariance();<a name="line.249"></a>
<span class="sourceLineNo">250</span>        Assert.assertEquals(1e-18, t, 1e-20);<a name="line.250"></a>
<span class="sourceLineNo">251</span>    }<a name="line.251"></a>
<span class="sourceLineNo">252</span><a name="line.252"></a>
<span class="sourceLineNo">253</span>}<a name="line.253"></a>




























































</pre>
</div>
</body>
</html>
