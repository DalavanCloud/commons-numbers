<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span>package org.apache.commons.math3.fitting;<a name="line.17"></a>
<span class="sourceLineNo">018</span><a name="line.18"></a>
<span class="sourceLineNo">019</span>import java.util.Random;<a name="line.19"></a>
<span class="sourceLineNo">020</span><a name="line.20"></a>
<span class="sourceLineNo">021</span>import org.apache.commons.math3.TestUtils;<a name="line.21"></a>
<span class="sourceLineNo">022</span>import org.apache.commons.math3.analysis.polynomials.PolynomialFunction;<a name="line.22"></a>
<span class="sourceLineNo">023</span>import org.apache.commons.math3.distribution.RealDistribution;<a name="line.23"></a>
<span class="sourceLineNo">024</span>import org.apache.commons.math3.distribution.UniformRealDistribution;<a name="line.24"></a>
<span class="sourceLineNo">025</span>import org.apache.commons.math3.exception.ConvergenceException;<a name="line.25"></a>
<span class="sourceLineNo">026</span>import org.apache.commons.math3.util.FastMath;<a name="line.26"></a>
<span class="sourceLineNo">027</span>import org.junit.Assert;<a name="line.27"></a>
<span class="sourceLineNo">028</span>import org.junit.Test;<a name="line.28"></a>
<span class="sourceLineNo">029</span><a name="line.29"></a>
<span class="sourceLineNo">030</span>/**<a name="line.30"></a>
<span class="sourceLineNo">031</span> * Test for class {@link PolynomialCurveFitter}.<a name="line.31"></a>
<span class="sourceLineNo">032</span> */<a name="line.32"></a>
<span class="sourceLineNo">033</span>public class PolynomialCurveFitterTest {<a name="line.33"></a>
<span class="sourceLineNo">034</span>    @Test<a name="line.34"></a>
<span class="sourceLineNo">035</span>    public void testFit() {<a name="line.35"></a>
<span class="sourceLineNo">036</span>        final RealDistribution rng = new UniformRealDistribution(-100, 100);<a name="line.36"></a>
<span class="sourceLineNo">037</span>        rng.reseedRandomGenerator(64925784252L);<a name="line.37"></a>
<span class="sourceLineNo">038</span><a name="line.38"></a>
<span class="sourceLineNo">039</span>        final double[] coeff = { 12.9, -3.4, 2.1 }; // 12.9 - 3.4 x + 2.1 x^2<a name="line.39"></a>
<span class="sourceLineNo">040</span>        final PolynomialFunction f = new PolynomialFunction(coeff);<a name="line.40"></a>
<span class="sourceLineNo">041</span><a name="line.41"></a>
<span class="sourceLineNo">042</span>        // Collect data from a known polynomial.<a name="line.42"></a>
<span class="sourceLineNo">043</span>        final WeightedObservedPoints obs = new WeightedObservedPoints();<a name="line.43"></a>
<span class="sourceLineNo">044</span>        for (int i = 0; i &lt; 100; i++) {<a name="line.44"></a>
<span class="sourceLineNo">045</span>            final double x = rng.sample();<a name="line.45"></a>
<span class="sourceLineNo">046</span>            obs.add(x, f.value(x));<a name="line.46"></a>
<span class="sourceLineNo">047</span>        }<a name="line.47"></a>
<span class="sourceLineNo">048</span><a name="line.48"></a>
<span class="sourceLineNo">049</span>        // Start fit from initial guesses that are far from the optimal values.<a name="line.49"></a>
<span class="sourceLineNo">050</span>        final PolynomialCurveFitter fitter<a name="line.50"></a>
<span class="sourceLineNo">051</span>            = PolynomialCurveFitter.create(0).withStartPoint(new double[] { -1e-20, 3e15, -5e25 });<a name="line.51"></a>
<span class="sourceLineNo">052</span>        final double[] best = fitter.fit(obs.toList());<a name="line.52"></a>
<span class="sourceLineNo">053</span><a name="line.53"></a>
<span class="sourceLineNo">054</span>        TestUtils.assertEquals("best != coeff", coeff, best, 1e-12);<a name="line.54"></a>
<span class="sourceLineNo">055</span>    }<a name="line.55"></a>
<span class="sourceLineNo">056</span><a name="line.56"></a>
<span class="sourceLineNo">057</span>    @Test<a name="line.57"></a>
<span class="sourceLineNo">058</span>    public void testNoError() {<a name="line.58"></a>
<span class="sourceLineNo">059</span>        final Random randomizer = new Random(64925784252l);<a name="line.59"></a>
<span class="sourceLineNo">060</span>        for (int degree = 1; degree &lt; 10; ++degree) {<a name="line.60"></a>
<span class="sourceLineNo">061</span>            final PolynomialFunction p = buildRandomPolynomial(degree, randomizer);<a name="line.61"></a>
<span class="sourceLineNo">062</span>            final PolynomialCurveFitter fitter = PolynomialCurveFitter.create(degree);<a name="line.62"></a>
<span class="sourceLineNo">063</span><a name="line.63"></a>
<span class="sourceLineNo">064</span>            final WeightedObservedPoints obs = new WeightedObservedPoints();<a name="line.64"></a>
<span class="sourceLineNo">065</span>            for (int i = 0; i &lt;= degree; ++i) {<a name="line.65"></a>
<span class="sourceLineNo">066</span>                obs.add(1.0, i, p.value(i));<a name="line.66"></a>
<span class="sourceLineNo">067</span>            }<a name="line.67"></a>
<span class="sourceLineNo">068</span><a name="line.68"></a>
<span class="sourceLineNo">069</span>            final PolynomialFunction fitted = new PolynomialFunction(fitter.fit(obs.toList()));<a name="line.69"></a>
<span class="sourceLineNo">070</span><a name="line.70"></a>
<span class="sourceLineNo">071</span>            for (double x = -1.0; x &lt; 1.0; x += 0.01) {<a name="line.71"></a>
<span class="sourceLineNo">072</span>                final double error = FastMath.abs(p.value(x) - fitted.value(x)) /<a name="line.72"></a>
<span class="sourceLineNo">073</span>                    (1.0 + FastMath.abs(p.value(x)));<a name="line.73"></a>
<span class="sourceLineNo">074</span>                Assert.assertEquals(0.0, error, 1.0e-6);<a name="line.74"></a>
<span class="sourceLineNo">075</span>            }<a name="line.75"></a>
<span class="sourceLineNo">076</span>        }<a name="line.76"></a>
<span class="sourceLineNo">077</span>    }<a name="line.77"></a>
<span class="sourceLineNo">078</span><a name="line.78"></a>
<span class="sourceLineNo">079</span>    @Test<a name="line.79"></a>
<span class="sourceLineNo">080</span>    public void testSmallError() {<a name="line.80"></a>
<span class="sourceLineNo">081</span>        final Random randomizer = new Random(53882150042l);<a name="line.81"></a>
<span class="sourceLineNo">082</span>        double maxError = 0;<a name="line.82"></a>
<span class="sourceLineNo">083</span>        for (int degree = 0; degree &lt; 10; ++degree) {<a name="line.83"></a>
<span class="sourceLineNo">084</span>            final PolynomialFunction p = buildRandomPolynomial(degree, randomizer);<a name="line.84"></a>
<span class="sourceLineNo">085</span>            final PolynomialCurveFitter fitter = PolynomialCurveFitter.create(degree);<a name="line.85"></a>
<span class="sourceLineNo">086</span><a name="line.86"></a>
<span class="sourceLineNo">087</span>            final WeightedObservedPoints obs = new WeightedObservedPoints();<a name="line.87"></a>
<span class="sourceLineNo">088</span>            for (double x = -1.0; x &lt; 1.0; x += 0.01) {<a name="line.88"></a>
<span class="sourceLineNo">089</span>                obs.add(1.0, x, p.value(x) + 0.1 * randomizer.nextGaussian());<a name="line.89"></a>
<span class="sourceLineNo">090</span>            }<a name="line.90"></a>
<span class="sourceLineNo">091</span><a name="line.91"></a>
<span class="sourceLineNo">092</span>            final PolynomialFunction fitted = new PolynomialFunction(fitter.fit(obs.toList()));<a name="line.92"></a>
<span class="sourceLineNo">093</span><a name="line.93"></a>
<span class="sourceLineNo">094</span>            for (double x = -1.0; x &lt; 1.0; x += 0.01) {<a name="line.94"></a>
<span class="sourceLineNo">095</span>                final double error = FastMath.abs(p.value(x) - fitted.value(x)) /<a name="line.95"></a>
<span class="sourceLineNo">096</span>                    (1.0 + FastMath.abs(p.value(x)));<a name="line.96"></a>
<span class="sourceLineNo">097</span>                maxError = FastMath.max(maxError, error);<a name="line.97"></a>
<span class="sourceLineNo">098</span>                Assert.assertTrue(FastMath.abs(error) &lt; 0.1);<a name="line.98"></a>
<span class="sourceLineNo">099</span>            }<a name="line.99"></a>
<span class="sourceLineNo">100</span>        }<a name="line.100"></a>
<span class="sourceLineNo">101</span>        Assert.assertTrue(maxError &gt; 0.01);<a name="line.101"></a>
<span class="sourceLineNo">102</span>    }<a name="line.102"></a>
<span class="sourceLineNo">103</span><a name="line.103"></a>
<span class="sourceLineNo">104</span>    @Test<a name="line.104"></a>
<span class="sourceLineNo">105</span>    public void testRedundantSolvable() {<a name="line.105"></a>
<span class="sourceLineNo">106</span>        // Levenberg-Marquardt should handle redundant information gracefully<a name="line.106"></a>
<span class="sourceLineNo">107</span>        checkUnsolvableProblem(true);<a name="line.107"></a>
<span class="sourceLineNo">108</span>    }<a name="line.108"></a>
<span class="sourceLineNo">109</span><a name="line.109"></a>
<span class="sourceLineNo">110</span>    @Test<a name="line.110"></a>
<span class="sourceLineNo">111</span>    public void testLargeSample() {<a name="line.111"></a>
<span class="sourceLineNo">112</span>        final Random randomizer = new Random(0x5551480dca5b369bl);<a name="line.112"></a>
<span class="sourceLineNo">113</span>        double maxError = 0;<a name="line.113"></a>
<span class="sourceLineNo">114</span>        for (int degree = 0; degree &lt; 10; ++degree) {<a name="line.114"></a>
<span class="sourceLineNo">115</span>            final PolynomialFunction p = buildRandomPolynomial(degree, randomizer);<a name="line.115"></a>
<span class="sourceLineNo">116</span>            final PolynomialCurveFitter fitter = PolynomialCurveFitter.create(degree);<a name="line.116"></a>
<span class="sourceLineNo">117</span> <a name="line.117"></a>
<span class="sourceLineNo">118</span>            final WeightedObservedPoints obs = new WeightedObservedPoints();<a name="line.118"></a>
<span class="sourceLineNo">119</span>            for (int i = 0; i &lt; 40000; ++i) {<a name="line.119"></a>
<span class="sourceLineNo">120</span>                final double x = -1.0 + i / 20000.0;<a name="line.120"></a>
<span class="sourceLineNo">121</span>                obs.add(1.0, x, p.value(x) + 0.1 * randomizer.nextGaussian());<a name="line.121"></a>
<span class="sourceLineNo">122</span>            }<a name="line.122"></a>
<span class="sourceLineNo">123</span><a name="line.123"></a>
<span class="sourceLineNo">124</span>            final PolynomialFunction fitted = new PolynomialFunction(fitter.fit(obs.toList()));<a name="line.124"></a>
<span class="sourceLineNo">125</span>            for (double x = -1.0; x &lt; 1.0; x += 0.01) {<a name="line.125"></a>
<span class="sourceLineNo">126</span>                final double error = FastMath.abs(p.value(x) - fitted.value(x)) /<a name="line.126"></a>
<span class="sourceLineNo">127</span>                    (1.0 + FastMath.abs(p.value(x)));<a name="line.127"></a>
<span class="sourceLineNo">128</span>                maxError = FastMath.max(maxError, error);<a name="line.128"></a>
<span class="sourceLineNo">129</span>                Assert.assertTrue(FastMath.abs(error) &lt; 0.01);<a name="line.129"></a>
<span class="sourceLineNo">130</span>            }<a name="line.130"></a>
<span class="sourceLineNo">131</span>        }<a name="line.131"></a>
<span class="sourceLineNo">132</span>        Assert.assertTrue(maxError &gt; 0.001);<a name="line.132"></a>
<span class="sourceLineNo">133</span>    }<a name="line.133"></a>
<span class="sourceLineNo">134</span><a name="line.134"></a>
<span class="sourceLineNo">135</span>    private void checkUnsolvableProblem(boolean solvable) {<a name="line.135"></a>
<span class="sourceLineNo">136</span>        final Random randomizer = new Random(1248788532l);<a name="line.136"></a>
<span class="sourceLineNo">137</span><a name="line.137"></a>
<span class="sourceLineNo">138</span>        for (int degree = 0; degree &lt; 10; ++degree) {<a name="line.138"></a>
<span class="sourceLineNo">139</span>            final PolynomialFunction p = buildRandomPolynomial(degree, randomizer);<a name="line.139"></a>
<span class="sourceLineNo">140</span>            final PolynomialCurveFitter fitter = PolynomialCurveFitter.create(degree);<a name="line.140"></a>
<span class="sourceLineNo">141</span>            final WeightedObservedPoints obs = new WeightedObservedPoints();<a name="line.141"></a>
<span class="sourceLineNo">142</span>            // reusing the same point over and over again does not bring<a name="line.142"></a>
<span class="sourceLineNo">143</span>            // information, the problem cannot be solved in this case for<a name="line.143"></a>
<span class="sourceLineNo">144</span>            // degrees greater than 1 (but one point is sufficient for<a name="line.144"></a>
<span class="sourceLineNo">145</span>            // degree 0)<a name="line.145"></a>
<span class="sourceLineNo">146</span>            for (double x = -1.0; x &lt; 1.0; x += 0.01) {<a name="line.146"></a>
<span class="sourceLineNo">147</span>                obs.add(1.0, 0.0, p.value(0.0));<a name="line.147"></a>
<span class="sourceLineNo">148</span>            }<a name="line.148"></a>
<span class="sourceLineNo">149</span><a name="line.149"></a>
<span class="sourceLineNo">150</span>            try {<a name="line.150"></a>
<span class="sourceLineNo">151</span>                fitter.fit(obs.toList());<a name="line.151"></a>
<span class="sourceLineNo">152</span>                Assert.assertTrue(solvable || (degree == 0));<a name="line.152"></a>
<span class="sourceLineNo">153</span>            } catch(ConvergenceException e) {<a name="line.153"></a>
<span class="sourceLineNo">154</span>                Assert.assertTrue((! solvable) &amp;&amp; (degree &gt; 0));<a name="line.154"></a>
<span class="sourceLineNo">155</span>            }<a name="line.155"></a>
<span class="sourceLineNo">156</span>        }<a name="line.156"></a>
<span class="sourceLineNo">157</span>    }<a name="line.157"></a>
<span class="sourceLineNo">158</span><a name="line.158"></a>
<span class="sourceLineNo">159</span>    private PolynomialFunction buildRandomPolynomial(int degree, Random randomizer) {<a name="line.159"></a>
<span class="sourceLineNo">160</span>        final double[] coefficients = new double[degree + 1];<a name="line.160"></a>
<span class="sourceLineNo">161</span>        for (int i = 0; i &lt;= degree; ++i) {<a name="line.161"></a>
<span class="sourceLineNo">162</span>            coefficients[i] = randomizer.nextGaussian();<a name="line.162"></a>
<span class="sourceLineNo">163</span>        }<a name="line.163"></a>
<span class="sourceLineNo">164</span>        return new PolynomialFunction(coefficients);<a name="line.164"></a>
<span class="sourceLineNo">165</span>    }<a name="line.165"></a>
<span class="sourceLineNo">166</span>}<a name="line.166"></a>




























































</pre>
</div>
</body>
</html>
