<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span><a name="line.17"></a>
<span class="sourceLineNo">018</span>package org.apache.commons.math3.ode.sampling;<a name="line.18"></a>
<span class="sourceLineNo">019</span><a name="line.19"></a>
<span class="sourceLineNo">020</span>import java.io.IOException;<a name="line.20"></a>
<span class="sourceLineNo">021</span>import java.io.ObjectInput;<a name="line.21"></a>
<span class="sourceLineNo">022</span>import java.io.ObjectOutput;<a name="line.22"></a>
<span class="sourceLineNo">023</span><a name="line.23"></a>
<span class="sourceLineNo">024</span>import org.apache.commons.math3.ode.EquationsMapper;<a name="line.24"></a>
<span class="sourceLineNo">025</span><a name="line.25"></a>
<span class="sourceLineNo">026</span>/** This class is a step interpolator that does nothing.<a name="line.26"></a>
<span class="sourceLineNo">027</span> *<a name="line.27"></a>
<span class="sourceLineNo">028</span> * &lt;p&gt;This class is used when the {@link StepHandler "step handler"}<a name="line.28"></a>
<span class="sourceLineNo">029</span> * set up by the user does not need step interpolation. It does not<a name="line.29"></a>
<span class="sourceLineNo">030</span> * recompute the state when {@link AbstractStepInterpolator#setInterpolatedTime<a name="line.30"></a>
<span class="sourceLineNo">031</span> * setInterpolatedTime} is called. This implies the interpolated state<a name="line.31"></a>
<span class="sourceLineNo">032</span> * is always the state at the end of the current step.&lt;/p&gt;<a name="line.32"></a>
<span class="sourceLineNo">033</span> *<a name="line.33"></a>
<span class="sourceLineNo">034</span> * @see StepHandler<a name="line.34"></a>
<span class="sourceLineNo">035</span> *<a name="line.35"></a>
<span class="sourceLineNo">036</span> * @since 1.2<a name="line.36"></a>
<span class="sourceLineNo">037</span> */<a name="line.37"></a>
<span class="sourceLineNo">038</span><a name="line.38"></a>
<span class="sourceLineNo">039</span>public class DummyStepInterpolator<a name="line.39"></a>
<span class="sourceLineNo">040</span>  extends AbstractStepInterpolator {<a name="line.40"></a>
<span class="sourceLineNo">041</span><a name="line.41"></a>
<span class="sourceLineNo">042</span>  /** Serializable version identifier. */<a name="line.42"></a>
<span class="sourceLineNo">043</span>  private static final long serialVersionUID = 1708010296707839488L;<a name="line.43"></a>
<span class="sourceLineNo">044</span><a name="line.44"></a>
<span class="sourceLineNo">045</span>  /** Current derivative. */<a name="line.45"></a>
<span class="sourceLineNo">046</span>  private double[] currentDerivative;<a name="line.46"></a>
<span class="sourceLineNo">047</span><a name="line.47"></a>
<span class="sourceLineNo">048</span>  /** Simple constructor.<a name="line.48"></a>
<span class="sourceLineNo">049</span>   * This constructor builds an instance that is not usable yet, the<a name="line.49"></a>
<span class="sourceLineNo">050</span>   * &lt;code&gt;AbstractStepInterpolator.reinitialize&lt;/code&gt; protected method<a name="line.50"></a>
<span class="sourceLineNo">051</span>   * should be called before using the instance in order to initialize<a name="line.51"></a>
<span class="sourceLineNo">052</span>   * the internal arrays. This constructor is used only in order to delay<a name="line.52"></a>
<span class="sourceLineNo">053</span>   * the initialization in some cases. As an example, the {@link<a name="line.53"></a>
<span class="sourceLineNo">054</span>   * org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator} uses<a name="line.54"></a>
<span class="sourceLineNo">055</span>   * the prototyping design pattern to create the step interpolators by<a name="line.55"></a>
<span class="sourceLineNo">056</span>   * cloning an uninitialized model and latter initializing the copy.<a name="line.56"></a>
<span class="sourceLineNo">057</span>   */<a name="line.57"></a>
<span class="sourceLineNo">058</span>  public DummyStepInterpolator() {<a name="line.58"></a>
<span class="sourceLineNo">059</span>    super();<a name="line.59"></a>
<span class="sourceLineNo">060</span>    currentDerivative = null;<a name="line.60"></a>
<span class="sourceLineNo">061</span>  }<a name="line.61"></a>
<span class="sourceLineNo">062</span><a name="line.62"></a>
<span class="sourceLineNo">063</span>  /** Simple constructor.<a name="line.63"></a>
<span class="sourceLineNo">064</span>   * @param y reference to the integrator array holding the state at<a name="line.64"></a>
<span class="sourceLineNo">065</span>   * the end of the step<a name="line.65"></a>
<span class="sourceLineNo">066</span>   * @param yDot reference to the integrator array holding the state<a name="line.66"></a>
<span class="sourceLineNo">067</span>   * derivative at some arbitrary point within the step<a name="line.67"></a>
<span class="sourceLineNo">068</span>   * @param forward integration direction indicator<a name="line.68"></a>
<span class="sourceLineNo">069</span>   */<a name="line.69"></a>
<span class="sourceLineNo">070</span>  public DummyStepInterpolator(final double[] y, final double[] yDot, final boolean forward) {<a name="line.70"></a>
<span class="sourceLineNo">071</span>    super(y, forward, new EquationsMapper(0, y.length), new EquationsMapper[0]);<a name="line.71"></a>
<span class="sourceLineNo">072</span>    currentDerivative = yDot;<a name="line.72"></a>
<span class="sourceLineNo">073</span>  }<a name="line.73"></a>
<span class="sourceLineNo">074</span><a name="line.74"></a>
<span class="sourceLineNo">075</span>  /** Copy constructor.<a name="line.75"></a>
<span class="sourceLineNo">076</span>   * @param interpolator interpolator to copy from. The copy is a deep<a name="line.76"></a>
<span class="sourceLineNo">077</span>   * copy: its arrays are separated from the original arrays of the<a name="line.77"></a>
<span class="sourceLineNo">078</span>   * instance<a name="line.78"></a>
<span class="sourceLineNo">079</span>   */<a name="line.79"></a>
<span class="sourceLineNo">080</span>  public DummyStepInterpolator(final DummyStepInterpolator interpolator) {<a name="line.80"></a>
<span class="sourceLineNo">081</span>    super(interpolator);<a name="line.81"></a>
<span class="sourceLineNo">082</span>    if (interpolator.currentDerivative != null) {<a name="line.82"></a>
<span class="sourceLineNo">083</span>        currentDerivative = interpolator.currentDerivative.clone();<a name="line.83"></a>
<span class="sourceLineNo">084</span>    }<a name="line.84"></a>
<span class="sourceLineNo">085</span>  }<a name="line.85"></a>
<span class="sourceLineNo">086</span><a name="line.86"></a>
<span class="sourceLineNo">087</span>  /** Really copy the finalized instance.<a name="line.87"></a>
<span class="sourceLineNo">088</span>   * @return a copy of the finalized instance<a name="line.88"></a>
<span class="sourceLineNo">089</span>   */<a name="line.89"></a>
<span class="sourceLineNo">090</span>  @Override<a name="line.90"></a>
<span class="sourceLineNo">091</span>  protected StepInterpolator doCopy() {<a name="line.91"></a>
<span class="sourceLineNo">092</span>    return new DummyStepInterpolator(this);<a name="line.92"></a>
<span class="sourceLineNo">093</span>  }<a name="line.93"></a>
<span class="sourceLineNo">094</span><a name="line.94"></a>
<span class="sourceLineNo">095</span>  /** Compute the state at the interpolated time.<a name="line.95"></a>
<span class="sourceLineNo">096</span>   * In this class, this method does nothing: the interpolated state<a name="line.96"></a>
<span class="sourceLineNo">097</span>   * is always the state at the end of the current step.<a name="line.97"></a>
<span class="sourceLineNo">098</span>   * @param theta normalized interpolation abscissa within the step<a name="line.98"></a>
<span class="sourceLineNo">099</span>   * (theta is zero at the previous time step and one at the current time step)<a name="line.99"></a>
<span class="sourceLineNo">100</span>   * @param oneMinusThetaH time gap between the interpolated time and<a name="line.100"></a>
<span class="sourceLineNo">101</span>   * the current time<a name="line.101"></a>
<span class="sourceLineNo">102</span>   */<a name="line.102"></a>
<span class="sourceLineNo">103</span>  @Override<a name="line.103"></a>
<span class="sourceLineNo">104</span>  protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH) {<a name="line.104"></a>
<span class="sourceLineNo">105</span>      System.arraycopy(currentState,      0, interpolatedState,       0, currentState.length);<a name="line.105"></a>
<span class="sourceLineNo">106</span>      System.arraycopy(currentDerivative, 0, interpolatedDerivatives, 0, currentDerivative.length);<a name="line.106"></a>
<span class="sourceLineNo">107</span>  }<a name="line.107"></a>
<span class="sourceLineNo">108</span><a name="line.108"></a>
<span class="sourceLineNo">109</span>  /** Write the instance to an output channel.<a name="line.109"></a>
<span class="sourceLineNo">110</span>   * @param out output channel<a name="line.110"></a>
<span class="sourceLineNo">111</span>   * @exception IOException if the instance cannot be written<a name="line.111"></a>
<span class="sourceLineNo">112</span>   */<a name="line.112"></a>
<span class="sourceLineNo">113</span>  @Override<a name="line.113"></a>
<span class="sourceLineNo">114</span>  public void writeExternal(final ObjectOutput out)<a name="line.114"></a>
<span class="sourceLineNo">115</span>    throws IOException {<a name="line.115"></a>
<span class="sourceLineNo">116</span><a name="line.116"></a>
<span class="sourceLineNo">117</span>      // save the state of the base class<a name="line.117"></a>
<span class="sourceLineNo">118</span>    writeBaseExternal(out);<a name="line.118"></a>
<span class="sourceLineNo">119</span><a name="line.119"></a>
<span class="sourceLineNo">120</span>    if (currentDerivative != null) {<a name="line.120"></a>
<span class="sourceLineNo">121</span>        for (int i = 0; i &lt; currentDerivative.length; ++i) {<a name="line.121"></a>
<span class="sourceLineNo">122</span>            out.writeDouble(currentDerivative[i]);<a name="line.122"></a>
<span class="sourceLineNo">123</span>        }<a name="line.123"></a>
<span class="sourceLineNo">124</span>    }<a name="line.124"></a>
<span class="sourceLineNo">125</span><a name="line.125"></a>
<span class="sourceLineNo">126</span>  }<a name="line.126"></a>
<span class="sourceLineNo">127</span><a name="line.127"></a>
<span class="sourceLineNo">128</span>  /** Read the instance from an input channel.<a name="line.128"></a>
<span class="sourceLineNo">129</span>   * @param in input channel<a name="line.129"></a>
<span class="sourceLineNo">130</span>   * @exception IOException if the instance cannot be read<a name="line.130"></a>
<span class="sourceLineNo">131</span>   */<a name="line.131"></a>
<span class="sourceLineNo">132</span>  @Override<a name="line.132"></a>
<span class="sourceLineNo">133</span>  public void readExternal(final ObjectInput in)<a name="line.133"></a>
<span class="sourceLineNo">134</span>    throws IOException, ClassNotFoundException {<a name="line.134"></a>
<span class="sourceLineNo">135</span><a name="line.135"></a>
<span class="sourceLineNo">136</span>    // read the base class<a name="line.136"></a>
<span class="sourceLineNo">137</span>    final double t = readBaseExternal(in);<a name="line.137"></a>
<span class="sourceLineNo">138</span><a name="line.138"></a>
<span class="sourceLineNo">139</span>    if (currentState == null) {<a name="line.139"></a>
<span class="sourceLineNo">140</span>        currentDerivative = null;<a name="line.140"></a>
<span class="sourceLineNo">141</span>    } else {<a name="line.141"></a>
<span class="sourceLineNo">142</span>        currentDerivative  = new double[currentState.length];<a name="line.142"></a>
<span class="sourceLineNo">143</span>        for (int i = 0; i &lt; currentDerivative.length; ++i) {<a name="line.143"></a>
<span class="sourceLineNo">144</span>            currentDerivative[i] = in.readDouble();<a name="line.144"></a>
<span class="sourceLineNo">145</span>        }<a name="line.145"></a>
<span class="sourceLineNo">146</span>    }<a name="line.146"></a>
<span class="sourceLineNo">147</span><a name="line.147"></a>
<span class="sourceLineNo">148</span>    // we can now set the interpolated time and state<a name="line.148"></a>
<span class="sourceLineNo">149</span>    setInterpolatedTime(t);<a name="line.149"></a>
<span class="sourceLineNo">150</span><a name="line.150"></a>
<span class="sourceLineNo">151</span>  }<a name="line.151"></a>
<span class="sourceLineNo">152</span><a name="line.152"></a>
<span class="sourceLineNo">153</span>}<a name="line.153"></a>




























































</pre>
</div>
</body>
</html>
