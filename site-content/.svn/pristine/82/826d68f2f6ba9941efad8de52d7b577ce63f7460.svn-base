<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>KolmogorovSmirnovTest xref</title>
<link type="text/css" rel="stylesheet" href="../../../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../apidocs/org/apache/commons/math3/stat/inference/KolmogorovSmirnovTest.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Licensed to the Apache Software Foundation (ASF) under one or more</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> * contributor license agreements.  See the NOTICE file distributed with</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * this work for additional information regarding copyright ownership.</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * The ASF licenses this file to You under the Apache License, Version 2.0</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * (the "License"); you may not use this file except in compliance with</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> * the License.  You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *      <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  <strong class="jxr_keyword">package</strong> org.apache.commons.math3.stat.inference;
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> java.math.BigDecimal;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> java.util.Arrays;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> java.util.HashSet;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.distribution.EnumeratedRealDistribution;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.distribution.RealDistribution;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.distribution.UniformRealDistribution;
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.InsufficientDataException;
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.MathArithmeticException;
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.MathInternalError;
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.NullArgumentException;
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.NumberIsTooLargeException;
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.OutOfRangeException;
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.TooManyIterationsException;
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.util.LocalizedFormats;
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.fraction.BigFraction;
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.fraction.BigFractionField;
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.fraction.FractionConversionException;
<a class="jxr_linenumber" name="L38" href="#L38">38</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.linear.Array2DRowFieldMatrix;
<a class="jxr_linenumber" name="L39" href="#L39">39</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.linear.FieldMatrix;
<a class="jxr_linenumber" name="L40" href="#L40">40</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.linear.MatrixUtils;
<a class="jxr_linenumber" name="L41" href="#L41">41</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.linear.RealMatrix;
<a class="jxr_linenumber" name="L42" href="#L42">42</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.random.JDKRandomGenerator;
<a class="jxr_linenumber" name="L43" href="#L43">43</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.random.RandomGenerator;
<a class="jxr_linenumber" name="L44" href="#L44">44</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.random.Well19937c;
<a class="jxr_linenumber" name="L45" href="#L45">45</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.util.CombinatoricsUtils;
<a class="jxr_linenumber" name="L46" href="#L46">46</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.util.FastMath;
<a class="jxr_linenumber" name="L47" href="#L47">47</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.util.MathArrays;
<a class="jxr_linenumber" name="L48" href="#L48">48</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.util.MathUtils;
<a class="jxr_linenumber" name="L49" href="#L49">49</a>  
<a class="jxr_linenumber" name="L50" href="#L50">50</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L51" href="#L51">51</a>  <em class="jxr_javadoccomment"> * Implementation of the &lt;a href="<a href="http://en.wikipedia.org/wiki/Kolmogorov-Smirnov_test" target="alexandria_uri">http://en.wikipedia.org/wiki/Kolmogorov-Smirnov_test</a>"&gt;</em>
<a class="jxr_linenumber" name="L52" href="#L52">52</a>  <em class="jxr_javadoccomment"> * Kolmogorov-Smirnov (K-S) test&lt;/a&gt; for equality of continuous distributions.</em>
<a class="jxr_linenumber" name="L53" href="#L53">53</a>  <em class="jxr_javadoccomment"> * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L54" href="#L54">54</a>  <em class="jxr_javadoccomment"> * The K-S test uses a statistic based on the maximum deviation of the empirical distribution of</em>
<a class="jxr_linenumber" name="L55" href="#L55">55</a>  <em class="jxr_javadoccomment"> * sample data points from the distribution expected under the null hypothesis. For one-sample tests</em>
<a class="jxr_linenumber" name="L56" href="#L56">56</a>  <em class="jxr_javadoccomment"> * evaluating the null hypothesis that a set of sample data points follow a given distribution, the</em>
<a class="jxr_linenumber" name="L57" href="#L57">57</a>  <em class="jxr_javadoccomment"> * test statistic is \(D_n=\sup_x |F_n(x)-F(x)|\), where \(F\) is the expected distribution and</em>
<a class="jxr_linenumber" name="L58" href="#L58">58</a>  <em class="jxr_javadoccomment"> * \(F_n\) is the empirical distribution of the \(n\) sample data points. The distribution of</em>
<a class="jxr_linenumber" name="L59" href="#L59">59</a>  <em class="jxr_javadoccomment"> * \(D_n\) is estimated using a method based on [1] with certain quick decisions for extreme values</em>
<a class="jxr_linenumber" name="L60" href="#L60">60</a>  <em class="jxr_javadoccomment"> * given in [2].</em>
<a class="jxr_linenumber" name="L61" href="#L61">61</a>  <em class="jxr_javadoccomment"> * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L62" href="#L62">62</a>  <em class="jxr_javadoccomment"> * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L63" href="#L63">63</a>  <em class="jxr_javadoccomment"> * Two-sample tests are also supported, evaluating the null hypothesis that the two samples</em>
<a class="jxr_linenumber" name="L64" href="#L64">64</a>  <em class="jxr_javadoccomment"> * {@code x} and {@code y} come from the same underlying distribution. In this case, the test</em>
<a class="jxr_linenumber" name="L65" href="#L65">65</a>  <em class="jxr_javadoccomment"> * statistic is \(D_{n,m}=\sup_t | F_n(t)-F_m(t)|\) where \(n\) is the length of {@code x}, \(m\) is</em>
<a class="jxr_linenumber" name="L66" href="#L66">66</a>  <em class="jxr_javadoccomment"> * the length of {@code y}, \(F_n\) is the empirical distribution that puts mass \(1/n\) at each of</em>
<a class="jxr_linenumber" name="L67" href="#L67">67</a>  <em class="jxr_javadoccomment"> * the values in {@code x} and \(F_m\) is the empirical distribution of the {@code y} values. The</em>
<a class="jxr_linenumber" name="L68" href="#L68">68</a>  <em class="jxr_javadoccomment"> * default 2-sample test method, {@link #kolmogorovSmirnovTest(double[], double[])} works as</em>
<a class="jxr_linenumber" name="L69" href="#L69">69</a>  <em class="jxr_javadoccomment"> * follows:</em>
<a class="jxr_linenumber" name="L70" href="#L70">70</a>  <em class="jxr_javadoccomment"> * &lt;ul&gt;</em>
<a class="jxr_linenumber" name="L71" href="#L71">71</a>  <em class="jxr_javadoccomment"> * &lt;li&gt;For small samples (where the product of the sample sizes is less than</em>
<a class="jxr_linenumber" name="L72" href="#L72">72</a>  <em class="jxr_javadoccomment"> * {@value #LARGE_SAMPLE_PRODUCT}), the method presented in [4] is used to compute the</em>
<a class="jxr_linenumber" name="L73" href="#L73">73</a>  <em class="jxr_javadoccomment"> * exact p-value for the 2-sample test.&lt;/li&gt;</em>
<a class="jxr_linenumber" name="L74" href="#L74">74</a>  <em class="jxr_javadoccomment"> * &lt;li&gt;When the product of the sample sizes exceeds {@value #LARGE_SAMPLE_PRODUCT}, the asymptotic</em>
<a class="jxr_linenumber" name="L75" href="#L75">75</a>  <em class="jxr_javadoccomment"> * distribution of \(D_{n,m}\) is used. See {@link #approximateP(double, int, int)} for details on</em>
<a class="jxr_linenumber" name="L76" href="#L76">76</a>  <em class="jxr_javadoccomment"> * the approximation.&lt;/li&gt;</em>
<a class="jxr_linenumber" name="L77" href="#L77">77</a>  <em class="jxr_javadoccomment"> * &lt;/ul&gt;&lt;/p&gt;&lt;p&gt;</em>
<a class="jxr_linenumber" name="L78" href="#L78">78</a>  <em class="jxr_javadoccomment"> * If the product of the sample sizes is less than {@value #LARGE_SAMPLE_PRODUCT} and the sample</em>
<a class="jxr_linenumber" name="L79" href="#L79">79</a>  <em class="jxr_javadoccomment"> * data contains ties, random jitter is added to the sample data to break ties before applying</em>
<a class="jxr_linenumber" name="L80" href="#L80">80</a>  <em class="jxr_javadoccomment"> * the algorithm above. Alternatively, the {@link #bootstrap(double[], double[], int, boolean)}</em>
<a class="jxr_linenumber" name="L81" href="#L81">81</a>  <em class="jxr_javadoccomment"> * method, modeled after &lt;a href="<a href="http://sekhon.berkeley.edu/matching/ks.boot.html" target="alexandria_uri">http://sekhon.berkeley.edu/matching/ks.boot.html</a>"&gt;ks.boot&lt;/a&gt;</em>
<a class="jxr_linenumber" name="L82" href="#L82">82</a>  <em class="jxr_javadoccomment"> * in the R Matching package [3], can be used if ties are known to be present in the data.</em>
<a class="jxr_linenumber" name="L83" href="#L83">83</a>  <em class="jxr_javadoccomment"> * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L84" href="#L84">84</a>  <em class="jxr_javadoccomment"> * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L85" href="#L85">85</a>  <em class="jxr_javadoccomment"> * In the two-sample case, \(D_{n,m}\) has a discrete distribution. This makes the p-value</em>
<a class="jxr_linenumber" name="L86" href="#L86">86</a>  <em class="jxr_javadoccomment"> * associated with the null hypothesis \(H_0 : D_{n,m} \ge d \) differ from \(H_0 : D_{n,m} &gt; d \)</em>
<a class="jxr_linenumber" name="L87" href="#L87">87</a>  <em class="jxr_javadoccomment"> * by the mass of the observed value \(d\). To distinguish these, the two-sample tests use a boolean</em>
<a class="jxr_linenumber" name="L88" href="#L88">88</a>  <em class="jxr_javadoccomment"> * {@code strict} parameter. This parameter is ignored for large samples.</em>
<a class="jxr_linenumber" name="L89" href="#L89">89</a>  <em class="jxr_javadoccomment"> * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L90" href="#L90">90</a>  <em class="jxr_javadoccomment"> * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L91" href="#L91">91</a>  <em class="jxr_javadoccomment"> * The methods used by the 2-sample default implementation are also exposed directly:</em>
<a class="jxr_linenumber" name="L92" href="#L92">92</a>  <em class="jxr_javadoccomment"> * &lt;ul&gt;</em>
<a class="jxr_linenumber" name="L93" href="#L93">93</a>  <em class="jxr_javadoccomment"> * &lt;li&gt;{@link #exactP(double, int, int, boolean)} computes exact 2-sample p-values&lt;/li&gt;</em>
<a class="jxr_linenumber" name="L94" href="#L94">94</a>  <em class="jxr_javadoccomment"> * &lt;li&gt;{@link #approximateP(double, int, int)} uses the asymptotic distribution The {@code boolean}</em>
<a class="jxr_linenumber" name="L95" href="#L95">95</a>  <em class="jxr_javadoccomment"> * arguments in the first two methods allow the probability used to estimate the p-value to be</em>
<a class="jxr_linenumber" name="L96" href="#L96">96</a>  <em class="jxr_javadoccomment"> * expressed using strict or non-strict inequality. See</em>
<a class="jxr_linenumber" name="L97" href="#L97">97</a>  <em class="jxr_javadoccomment"> * {@link #kolmogorovSmirnovTest(double[], double[], boolean)}.&lt;/li&gt;</em>
<a class="jxr_linenumber" name="L98" href="#L98">98</a>  <em class="jxr_javadoccomment"> * &lt;/ul&gt;</em>
<a class="jxr_linenumber" name="L99" href="#L99">99</a>  <em class="jxr_javadoccomment"> * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L100" href="#L100">100</a> <em class="jxr_javadoccomment"> * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L101" href="#L101">101</a> <em class="jxr_javadoccomment"> * References:</em>
<a class="jxr_linenumber" name="L102" href="#L102">102</a> <em class="jxr_javadoccomment"> * &lt;ul&gt;</em>
<a class="jxr_linenumber" name="L103" href="#L103">103</a> <em class="jxr_javadoccomment"> * &lt;li&gt;[1] &lt;a href="<a href="http://www.jstatsoft.org/v08/i18/" target="alexandria_uri">http://www.jstatsoft.org/v08/i18/</a>"&gt; Evaluating Kolmogorov's Distribution&lt;/a&gt; by</em>
<a class="jxr_linenumber" name="L104" href="#L104">104</a> <em class="jxr_javadoccomment"> * George Marsaglia, Wai Wan Tsang, and Jingbo Wang&lt;/li&gt;</em>
<a class="jxr_linenumber" name="L105" href="#L105">105</a> <em class="jxr_javadoccomment"> * &lt;li&gt;[2] &lt;a href="<a href="http://www.jstatsoft.org/v39/i11/" target="alexandria_uri">http://www.jstatsoft.org/v39/i11/</a>"&gt; Computing the Two-Sided Kolmogorov-Smirnov</em>
<a class="jxr_linenumber" name="L106" href="#L106">106</a> <em class="jxr_javadoccomment"> * Distribution&lt;/a&gt; by Richard Simard and Pierre L'Ecuyer&lt;/li&gt;</em>
<a class="jxr_linenumber" name="L107" href="#L107">107</a> <em class="jxr_javadoccomment"> * &lt;li&gt;[3] Jasjeet S. Sekhon. 2011. &lt;a href="<a href="http://www.jstatsoft.org/article/view/v042i07" target="alexandria_uri">http://www.jstatsoft.org/article/view/v042i07</a>"&gt;</em>
<a class="jxr_linenumber" name="L108" href="#L108">108</a> <em class="jxr_javadoccomment"> * Multivariate and Propensity Score Matching Software with Automated Balance Optimization:</em>
<a class="jxr_linenumber" name="L109" href="#L109">109</a> <em class="jxr_javadoccomment"> * The Matching package for R&lt;/a&gt; Journal of Statistical Software, 42(7): 1-52.&lt;/li&gt;</em>
<a class="jxr_linenumber" name="L110" href="#L110">110</a> <em class="jxr_javadoccomment"> * &lt;li&gt;[4] Wilcox, Rand. 2012. Introduction to Robust Estimation and Hypothesis Testing,</em>
<a class="jxr_linenumber" name="L111" href="#L111">111</a> <em class="jxr_javadoccomment"> * Chapter 5, 3rd Ed. Academic Press.&lt;/li&gt;</em>
<a class="jxr_linenumber" name="L112" href="#L112">112</a> <em class="jxr_javadoccomment"> * &lt;/ul&gt;</em>
<a class="jxr_linenumber" name="L113" href="#L113">113</a> <em class="jxr_javadoccomment"> * &lt;br/&gt;</em>
<a class="jxr_linenumber" name="L114" href="#L114">114</a> <em class="jxr_javadoccomment"> * Note that [1] contains an error in computing h, refer to &lt;a</em>
<a class="jxr_linenumber" name="L115" href="#L115">115</a> <em class="jxr_javadoccomment"> * href="https://issues.apache.org/jira/browse/MATH-437"&gt;MATH-437&lt;/a&gt; for details.</em>
<a class="jxr_linenumber" name="L116" href="#L116">116</a> <em class="jxr_javadoccomment"> * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L117" href="#L117">117</a> <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L118" href="#L118">118</a> <em class="jxr_javadoccomment"> * @since 3.3</em>
<a class="jxr_linenumber" name="L119" href="#L119">119</a> <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L120" href="#L120">120</a> <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../../org/apache/commons/math3/stat/inference/KolmogorovSmirnovTest.html">KolmogorovSmirnovTest</a> {
<a class="jxr_linenumber" name="L121" href="#L121">121</a> 
<a class="jxr_linenumber" name="L122" href="#L122">122</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L123" href="#L123">123</a> <em class="jxr_javadoccomment">     * Bound on the number of partial sums in {@link #ksSum(double, double, int)}</em>
<a class="jxr_linenumber" name="L124" href="#L124">124</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L125" href="#L125">125</a>     <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> MAXIMUM_PARTIAL_SUM_COUNT = 100000;
<a class="jxr_linenumber" name="L126" href="#L126">126</a> 
<a class="jxr_linenumber" name="L127" href="#L127">127</a>     <em class="jxr_javadoccomment">/** Convergence criterion for {@link #ksSum(double, double, int)} */</em>
<a class="jxr_linenumber" name="L128" href="#L128">128</a>     <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> KS_SUM_CAUCHY_CRITERION = 1E-20;
<a class="jxr_linenumber" name="L129" href="#L129">129</a> 
<a class="jxr_linenumber" name="L130" href="#L130">130</a>     <em class="jxr_javadoccomment">/** Convergence criterion for the sums in #pelzGood(double, double, int)} */</em>
<a class="jxr_linenumber" name="L131" href="#L131">131</a>     <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> PG_SUM_RELATIVE_ERROR = 1.0e-10;
<a class="jxr_linenumber" name="L132" href="#L132">132</a> 
<a class="jxr_linenumber" name="L133" href="#L133">133</a>     <em class="jxr_javadoccomment">/** No longer used. */</em>
<a class="jxr_linenumber" name="L134" href="#L134">134</a>     @Deprecated
<a class="jxr_linenumber" name="L135" href="#L135">135</a>     <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> SMALL_SAMPLE_PRODUCT = 200;
<a class="jxr_linenumber" name="L136" href="#L136">136</a> 
<a class="jxr_linenumber" name="L137" href="#L137">137</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L138" href="#L138">138</a> <em class="jxr_javadoccomment">     * When product of sample sizes exceeds this value, 2-sample K-S test uses asymptotic</em>
<a class="jxr_linenumber" name="L139" href="#L139">139</a> <em class="jxr_javadoccomment">     * distribution to compute the p-value.</em>
<a class="jxr_linenumber" name="L140" href="#L140">140</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L141" href="#L141">141</a>     <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> LARGE_SAMPLE_PRODUCT = 10000;
<a class="jxr_linenumber" name="L142" href="#L142">142</a> 
<a class="jxr_linenumber" name="L143" href="#L143">143</a>     <em class="jxr_javadoccomment">/** Default number of iterations used by {@link #monteCarloP(double, int, int, boolean, int)}.</em>
<a class="jxr_linenumber" name="L144" href="#L144">144</a> <em class="jxr_javadoccomment">     *  Deprecated as of version 3.6, as this method is no longer needed. */</em>
<a class="jxr_linenumber" name="L145" href="#L145">145</a>     @Deprecated
<a class="jxr_linenumber" name="L146" href="#L146">146</a>     <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> MONTE_CARLO_ITERATIONS = 1000000;
<a class="jxr_linenumber" name="L147" href="#L147">147</a> 
<a class="jxr_linenumber" name="L148" href="#L148">148</a>     <em class="jxr_javadoccomment">/** Random data generator used by {@link #monteCarloP(double, int, int, boolean, int)} */</em>
<a class="jxr_linenumber" name="L149" href="#L149">149</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> <a href="../../../../../../org/apache/commons/math3/random/RandomGenerator.html">RandomGenerator</a> rng;
<a class="jxr_linenumber" name="L150" href="#L150">150</a> 
<a class="jxr_linenumber" name="L151" href="#L151">151</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L152" href="#L152">152</a> <em class="jxr_javadoccomment">     * Construct a KolmogorovSmirnovTest instance with a default random data generator.</em>
<a class="jxr_linenumber" name="L153" href="#L153">153</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L154" href="#L154">154</a>     <strong class="jxr_keyword">public</strong> <a href="../../../../../../org/apache/commons/math3/stat/inference/KolmogorovSmirnovTest.html">KolmogorovSmirnovTest</a>() {
<a class="jxr_linenumber" name="L155" href="#L155">155</a>         rng = <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/random/Well19937c.html">Well19937c</a>();
<a class="jxr_linenumber" name="L156" href="#L156">156</a>     }
<a class="jxr_linenumber" name="L157" href="#L157">157</a> 
<a class="jxr_linenumber" name="L158" href="#L158">158</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L159" href="#L159">159</a> <em class="jxr_javadoccomment">     * Construct a KolmogorovSmirnovTest with the provided random data generator.</em>
<a class="jxr_linenumber" name="L160" href="#L160">160</a> <em class="jxr_javadoccomment">     * The #monteCarloP(double, int, int, boolean, int) that uses the generator supplied to this</em>
<a class="jxr_linenumber" name="L161" href="#L161">161</a> <em class="jxr_javadoccomment">     * constructor is deprecated as of version 3.6.</em>
<a class="jxr_linenumber" name="L162" href="#L162">162</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L163" href="#L163">163</a> <em class="jxr_javadoccomment">     * @param rng random data generator used by {@link #monteCarloP(double, int, int, boolean, int)}</em>
<a class="jxr_linenumber" name="L164" href="#L164">164</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L165" href="#L165">165</a>     @Deprecated
<a class="jxr_linenumber" name="L166" href="#L166">166</a>     <strong class="jxr_keyword">public</strong> <a href="../../../../../../org/apache/commons/math3/stat/inference/KolmogorovSmirnovTest.html">KolmogorovSmirnovTest</a>(<a href="../../../../../../org/apache/commons/math3/random/RandomGenerator.html">RandomGenerator</a> rng) {
<a class="jxr_linenumber" name="L167" href="#L167">167</a>         <strong class="jxr_keyword">this</strong>.rng = rng;
<a class="jxr_linenumber" name="L168" href="#L168">168</a>     }
<a class="jxr_linenumber" name="L169" href="#L169">169</a> 
<a class="jxr_linenumber" name="L170" href="#L170">170</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L171" href="#L171">171</a> <em class="jxr_javadoccomment">     * Computes the &lt;i&gt;p-value&lt;/i&gt;, or &lt;i&gt;observed significance level&lt;/i&gt;, of a one-sample &lt;a</em>
<a class="jxr_linenumber" name="L172" href="#L172">172</a> <em class="jxr_javadoccomment">     * href="<a href="http://en.wikipedia.org/wiki/Kolmogorov-Smirnov_test" target="alexandria_uri">http://en.wikipedia.org/wiki/Kolmogorov-Smirnov_test</a>"&gt; Kolmogorov-Smirnov test&lt;/a&gt;</em>
<a class="jxr_linenumber" name="L173" href="#L173">173</a> <em class="jxr_javadoccomment">     * evaluating the null hypothesis that {@code data} conforms to {@code distribution}. If</em>
<a class="jxr_linenumber" name="L174" href="#L174">174</a> <em class="jxr_javadoccomment">     * {@code exact} is true, the distribution used to compute the p-value is computed using</em>
<a class="jxr_linenumber" name="L175" href="#L175">175</a> <em class="jxr_javadoccomment">     * extended precision. See {@link #cdfExact(double, int)}.</em>
<a class="jxr_linenumber" name="L176" href="#L176">176</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L177" href="#L177">177</a> <em class="jxr_javadoccomment">     * @param distribution reference distribution</em>
<a class="jxr_linenumber" name="L178" href="#L178">178</a> <em class="jxr_javadoccomment">     * @param data sample being being evaluated</em>
<a class="jxr_linenumber" name="L179" href="#L179">179</a> <em class="jxr_javadoccomment">     * @param exact whether or not to force exact computation of the p-value</em>
<a class="jxr_linenumber" name="L180" href="#L180">180</a> <em class="jxr_javadoccomment">     * @return the p-value associated with the null hypothesis that {@code data} is a sample from</em>
<a class="jxr_linenumber" name="L181" href="#L181">181</a> <em class="jxr_javadoccomment">     *         {@code distribution}</em>
<a class="jxr_linenumber" name="L182" href="#L182">182</a> <em class="jxr_javadoccomment">     * @throws InsufficientDataException if {@code data} does not have length at least 2</em>
<a class="jxr_linenumber" name="L183" href="#L183">183</a> <em class="jxr_javadoccomment">     * @throws NullArgumentException if {@code data} is null</em>
<a class="jxr_linenumber" name="L184" href="#L184">184</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L185" href="#L185">185</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">double</strong> kolmogorovSmirnovTest(<a href="../../../../../../org/apache/commons/math3/distribution/RealDistribution.html">RealDistribution</a> distribution, <strong class="jxr_keyword">double</strong>[] data, <strong class="jxr_keyword">boolean</strong> exact) {
<a class="jxr_linenumber" name="L186" href="#L186">186</a>         <strong class="jxr_keyword">return</strong> 1d - cdf(kolmogorovSmirnovStatistic(distribution, data), data.length, exact);
<a class="jxr_linenumber" name="L187" href="#L187">187</a>     }
<a class="jxr_linenumber" name="L188" href="#L188">188</a> 
<a class="jxr_linenumber" name="L189" href="#L189">189</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L190" href="#L190">190</a> <em class="jxr_javadoccomment">     * Computes the one-sample Kolmogorov-Smirnov test statistic, \(D_n=\sup_x |F_n(x)-F(x)|\) where</em>
<a class="jxr_linenumber" name="L191" href="#L191">191</a> <em class="jxr_javadoccomment">     * \(F\) is the distribution (cdf) function associated with {@code distribution}, \(n\) is the</em>
<a class="jxr_linenumber" name="L192" href="#L192">192</a> <em class="jxr_javadoccomment">     * length of {@code data} and \(F_n\) is the empirical distribution that puts mass \(1/n\) at</em>
<a class="jxr_linenumber" name="L193" href="#L193">193</a> <em class="jxr_javadoccomment">     * each of the values in {@code data}.</em>
<a class="jxr_linenumber" name="L194" href="#L194">194</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L195" href="#L195">195</a> <em class="jxr_javadoccomment">     * @param distribution reference distribution</em>
<a class="jxr_linenumber" name="L196" href="#L196">196</a> <em class="jxr_javadoccomment">     * @param data sample being evaluated</em>
<a class="jxr_linenumber" name="L197" href="#L197">197</a> <em class="jxr_javadoccomment">     * @return Kolmogorov-Smirnov statistic \(D_n\)</em>
<a class="jxr_linenumber" name="L198" href="#L198">198</a> <em class="jxr_javadoccomment">     * @throws InsufficientDataException if {@code data} does not have length at least 2</em>
<a class="jxr_linenumber" name="L199" href="#L199">199</a> <em class="jxr_javadoccomment">     * @throws NullArgumentException if {@code data} is null</em>
<a class="jxr_linenumber" name="L200" href="#L200">200</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L201" href="#L201">201</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">double</strong> kolmogorovSmirnovStatistic(<a href="../../../../../../org/apache/commons/math3/distribution/RealDistribution.html">RealDistribution</a> distribution, <strong class="jxr_keyword">double</strong>[] data) {
<a class="jxr_linenumber" name="L202" href="#L202">202</a>         checkArray(data);
<a class="jxr_linenumber" name="L203" href="#L203">203</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> n = data.length;
<a class="jxr_linenumber" name="L204" href="#L204">204</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> nd = n;
<a class="jxr_linenumber" name="L205" href="#L205">205</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] dataCopy = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[n];
<a class="jxr_linenumber" name="L206" href="#L206">206</a>         System.arraycopy(data, 0, dataCopy, 0, n);
<a class="jxr_linenumber" name="L207" href="#L207">207</a>         Arrays.sort(dataCopy);
<a class="jxr_linenumber" name="L208" href="#L208">208</a>         <strong class="jxr_keyword">double</strong> d = 0d;
<a class="jxr_linenumber" name="L209" href="#L209">209</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 1; i &lt;= n; i++) {
<a class="jxr_linenumber" name="L210" href="#L210">210</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> yi = distribution.cumulativeProbability(dataCopy[i - 1]);
<a class="jxr_linenumber" name="L211" href="#L211">211</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> currD = FastMath.max(yi - (i - 1) / nd, i / nd - yi);
<a class="jxr_linenumber" name="L212" href="#L212">212</a>             <strong class="jxr_keyword">if</strong> (currD &gt; d) {
<a class="jxr_linenumber" name="L213" href="#L213">213</a>                 d = currD;
<a class="jxr_linenumber" name="L214" href="#L214">214</a>             }
<a class="jxr_linenumber" name="L215" href="#L215">215</a>         }
<a class="jxr_linenumber" name="L216" href="#L216">216</a>         <strong class="jxr_keyword">return</strong> d;
<a class="jxr_linenumber" name="L217" href="#L217">217</a>     }
<a class="jxr_linenumber" name="L218" href="#L218">218</a> 
<a class="jxr_linenumber" name="L219" href="#L219">219</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L220" href="#L220">220</a> <em class="jxr_javadoccomment">     * Computes the &lt;i&gt;p-value&lt;/i&gt;, or &lt;i&gt;observed significance level&lt;/i&gt;, of a two-sample &lt;a</em>
<a class="jxr_linenumber" name="L221" href="#L221">221</a> <em class="jxr_javadoccomment">     * href="<a href="http://en.wikipedia.org/wiki/Kolmogorov-Smirnov_test" target="alexandria_uri">http://en.wikipedia.org/wiki/Kolmogorov-Smirnov_test</a>"&gt; Kolmogorov-Smirnov test&lt;/a&gt;</em>
<a class="jxr_linenumber" name="L222" href="#L222">222</a> <em class="jxr_javadoccomment">     * evaluating the null hypothesis that {@code x} and {@code y} are samples drawn from the same</em>
<a class="jxr_linenumber" name="L223" href="#L223">223</a> <em class="jxr_javadoccomment">     * probability distribution. Specifically, what is returned is an estimate of the probability</em>
<a class="jxr_linenumber" name="L224" href="#L224">224</a> <em class="jxr_javadoccomment">     * that the {@link #kolmogorovSmirnovStatistic(double[], double[])} associated with a randomly</em>
<a class="jxr_linenumber" name="L225" href="#L225">225</a> <em class="jxr_javadoccomment">     * selected partition of the combined sample into subsamples of sizes {@code x.length} and</em>
<a class="jxr_linenumber" name="L226" href="#L226">226</a> <em class="jxr_javadoccomment">     * {@code y.length} will strictly exceed (if {@code strict} is {@code true}) or be at least as</em>
<a class="jxr_linenumber" name="L227" href="#L227">227</a> <em class="jxr_javadoccomment">     * large as {@code strict = false}) as {@code kolmogorovSmirnovStatistic(x, y)}.</em>
<a class="jxr_linenumber" name="L228" href="#L228">228</a> <em class="jxr_javadoccomment">     * &lt;ul&gt;</em>
<a class="jxr_linenumber" name="L229" href="#L229">229</a> <em class="jxr_javadoccomment">     * &lt;li&gt;For small samples (where the product of the sample sizes is less than</em>
<a class="jxr_linenumber" name="L230" href="#L230">230</a> <em class="jxr_javadoccomment">     * {@value #LARGE_SAMPLE_PRODUCT}), the exact p-value is computed using the method presented</em>
<a class="jxr_linenumber" name="L231" href="#L231">231</a> <em class="jxr_javadoccomment">     * in [4], implemented in {@link #exactP(double, int, int, boolean)}. &lt;/li&gt;</em>
<a class="jxr_linenumber" name="L232" href="#L232">232</a> <em class="jxr_javadoccomment">     * &lt;li&gt;When the product of the sample sizes exceeds {@value #LARGE_SAMPLE_PRODUCT}, the</em>
<a class="jxr_linenumber" name="L233" href="#L233">233</a> <em class="jxr_javadoccomment">     * asymptotic distribution of \(D_{n,m}\) is used. See {@link #approximateP(double, int, int)}</em>
<a class="jxr_linenumber" name="L234" href="#L234">234</a> <em class="jxr_javadoccomment">     * for details on the approximation.&lt;/li&gt;</em>
<a class="jxr_linenumber" name="L235" href="#L235">235</a> <em class="jxr_javadoccomment">     * &lt;/ul&gt;&lt;p&gt;</em>
<a class="jxr_linenumber" name="L236" href="#L236">236</a> <em class="jxr_javadoccomment">     * If {@code x.length * y.length} &lt; {@value #LARGE_SAMPLE_PRODUCT} and the combined set of values in</em>
<a class="jxr_linenumber" name="L237" href="#L237">237</a> <em class="jxr_javadoccomment">     * {@code x} and {@code y} contains ties, random jitter is added to {@code x} and {@code y} to</em>
<a class="jxr_linenumber" name="L238" href="#L238">238</a> <em class="jxr_javadoccomment">     * break ties before computing \(D_{n,m}\) and the p-value. The jitter is uniformly distributed</em>
<a class="jxr_linenumber" name="L239" href="#L239">239</a> <em class="jxr_javadoccomment">     * on (-minDelta / 2, minDelta / 2) where minDelta is the smallest pairwise difference between</em>
<a class="jxr_linenumber" name="L240" href="#L240">240</a> <em class="jxr_javadoccomment">     * values in the combined sample.&lt;/p&gt;</em>
<a class="jxr_linenumber" name="L241" href="#L241">241</a> <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L242" href="#L242">242</a> <em class="jxr_javadoccomment">     * If ties are known to be present in the data, {@link #bootstrap(double[], double[], int, boolean)}</em>
<a class="jxr_linenumber" name="L243" href="#L243">243</a> <em class="jxr_javadoccomment">     * may be used as an alternative method for estimating the p-value.&lt;/p&gt;</em>
<a class="jxr_linenumber" name="L244" href="#L244">244</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L245" href="#L245">245</a> <em class="jxr_javadoccomment">     * @param x first sample dataset</em>
<a class="jxr_linenumber" name="L246" href="#L246">246</a> <em class="jxr_javadoccomment">     * @param y second sample dataset</em>
<a class="jxr_linenumber" name="L247" href="#L247">247</a> <em class="jxr_javadoccomment">     * @param strict whether or not the probability to compute is expressed as a strict inequality</em>
<a class="jxr_linenumber" name="L248" href="#L248">248</a> <em class="jxr_javadoccomment">     *        (ignored for large samples)</em>
<a class="jxr_linenumber" name="L249" href="#L249">249</a> <em class="jxr_javadoccomment">     * @return p-value associated with the null hypothesis that {@code x} and {@code y} represent</em>
<a class="jxr_linenumber" name="L250" href="#L250">250</a> <em class="jxr_javadoccomment">     *         samples from the same distribution</em>
<a class="jxr_linenumber" name="L251" href="#L251">251</a> <em class="jxr_javadoccomment">     * @throws InsufficientDataException if either {@code x} or {@code y} does not have length at</em>
<a class="jxr_linenumber" name="L252" href="#L252">252</a> <em class="jxr_javadoccomment">     *         least 2</em>
<a class="jxr_linenumber" name="L253" href="#L253">253</a> <em class="jxr_javadoccomment">     * @throws NullArgumentException if either {@code x} or {@code y} is null</em>
<a class="jxr_linenumber" name="L254" href="#L254">254</a> <em class="jxr_javadoccomment">     * @see #bootstrap(double[], double[], int, boolean)</em>
<a class="jxr_linenumber" name="L255" href="#L255">255</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L256" href="#L256">256</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">double</strong> kolmogorovSmirnovTest(<strong class="jxr_keyword">double</strong>[] x, <strong class="jxr_keyword">double</strong>[] y, <strong class="jxr_keyword">boolean</strong> strict) {
<a class="jxr_linenumber" name="L257" href="#L257">257</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">long</strong> lengthProduct = (<strong class="jxr_keyword">long</strong>) x.length * y.length;
<a class="jxr_linenumber" name="L258" href="#L258">258</a>         <strong class="jxr_keyword">double</strong>[] xa = <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L259" href="#L259">259</a>         <strong class="jxr_keyword">double</strong>[] ya = <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L260" href="#L260">260</a>         <strong class="jxr_keyword">if</strong> (lengthProduct &lt; LARGE_SAMPLE_PRODUCT &amp;&amp; hasTies(x,y)) {
<a class="jxr_linenumber" name="L261" href="#L261">261</a>             xa = MathArrays.copyOf(x);
<a class="jxr_linenumber" name="L262" href="#L262">262</a>             ya = MathArrays.copyOf(y);
<a class="jxr_linenumber" name="L263" href="#L263">263</a>             fixTies(xa, ya);
<a class="jxr_linenumber" name="L264" href="#L264">264</a>         } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L265" href="#L265">265</a>             xa = x;
<a class="jxr_linenumber" name="L266" href="#L266">266</a>             ya = y;
<a class="jxr_linenumber" name="L267" href="#L267">267</a>         }
<a class="jxr_linenumber" name="L268" href="#L268">268</a>         <strong class="jxr_keyword">if</strong> (lengthProduct &lt; LARGE_SAMPLE_PRODUCT) {
<a class="jxr_linenumber" name="L269" href="#L269">269</a>             <strong class="jxr_keyword">return</strong> exactP(kolmogorovSmirnovStatistic(xa, ya), x.length, y.length, strict);
<a class="jxr_linenumber" name="L270" href="#L270">270</a>         }
<a class="jxr_linenumber" name="L271" href="#L271">271</a>         <strong class="jxr_keyword">return</strong> approximateP(kolmogorovSmirnovStatistic(x, y), x.length, y.length);
<a class="jxr_linenumber" name="L272" href="#L272">272</a>     }
<a class="jxr_linenumber" name="L273" href="#L273">273</a> 
<a class="jxr_linenumber" name="L274" href="#L274">274</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L275" href="#L275">275</a> <em class="jxr_javadoccomment">     * Computes the &lt;i&gt;p-value&lt;/i&gt;, or &lt;i&gt;observed significance level&lt;/i&gt;, of a two-sample &lt;a</em>
<a class="jxr_linenumber" name="L276" href="#L276">276</a> <em class="jxr_javadoccomment">     * href="<a href="http://en.wikipedia.org/wiki/Kolmogorov-Smirnov_test" target="alexandria_uri">http://en.wikipedia.org/wiki/Kolmogorov-Smirnov_test</a>"&gt; Kolmogorov-Smirnov test&lt;/a&gt;</em>
<a class="jxr_linenumber" name="L277" href="#L277">277</a> <em class="jxr_javadoccomment">     * evaluating the null hypothesis that {@code x} and {@code y} are samples drawn from the same</em>
<a class="jxr_linenumber" name="L278" href="#L278">278</a> <em class="jxr_javadoccomment">     * probability distribution. Assumes the strict form of the inequality used to compute the</em>
<a class="jxr_linenumber" name="L279" href="#L279">279</a> <em class="jxr_javadoccomment">     * p-value. See {@link #kolmogorovSmirnovTest(RealDistribution, double[], boolean)}.</em>
<a class="jxr_linenumber" name="L280" href="#L280">280</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L281" href="#L281">281</a> <em class="jxr_javadoccomment">     * @param x first sample dataset</em>
<a class="jxr_linenumber" name="L282" href="#L282">282</a> <em class="jxr_javadoccomment">     * @param y second sample dataset</em>
<a class="jxr_linenumber" name="L283" href="#L283">283</a> <em class="jxr_javadoccomment">     * @return p-value associated with the null hypothesis that {@code x} and {@code y} represent</em>
<a class="jxr_linenumber" name="L284" href="#L284">284</a> <em class="jxr_javadoccomment">     *         samples from the same distribution</em>
<a class="jxr_linenumber" name="L285" href="#L285">285</a> <em class="jxr_javadoccomment">     * @throws InsufficientDataException if either {@code x} or {@code y} does not have length at</em>
<a class="jxr_linenumber" name="L286" href="#L286">286</a> <em class="jxr_javadoccomment">     *         least 2</em>
<a class="jxr_linenumber" name="L287" href="#L287">287</a> <em class="jxr_javadoccomment">     * @throws NullArgumentException if either {@code x} or {@code y} is null</em>
<a class="jxr_linenumber" name="L288" href="#L288">288</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L289" href="#L289">289</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">double</strong> kolmogorovSmirnovTest(<strong class="jxr_keyword">double</strong>[] x, <strong class="jxr_keyword">double</strong>[] y) {
<a class="jxr_linenumber" name="L290" href="#L290">290</a>         <strong class="jxr_keyword">return</strong> kolmogorovSmirnovTest(x, y, <strong class="jxr_keyword">true</strong>);
<a class="jxr_linenumber" name="L291" href="#L291">291</a>     }
<a class="jxr_linenumber" name="L292" href="#L292">292</a> 
<a class="jxr_linenumber" name="L293" href="#L293">293</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L294" href="#L294">294</a> <em class="jxr_javadoccomment">     * Computes the two-sample Kolmogorov-Smirnov test statistic, \(D_{n,m}=\sup_x |F_n(x)-F_m(x)|\)</em>
<a class="jxr_linenumber" name="L295" href="#L295">295</a> <em class="jxr_javadoccomment">     * where \(n\) is the length of {@code x}, \(m\) is the length of {@code y}, \(F_n\) is the</em>
<a class="jxr_linenumber" name="L296" href="#L296">296</a> <em class="jxr_javadoccomment">     * empirical distribution that puts mass \(1/n\) at each of the values in {@code x} and \(F_m\)</em>
<a class="jxr_linenumber" name="L297" href="#L297">297</a> <em class="jxr_javadoccomment">     * is the empirical distribution of the {@code y} values.</em>
<a class="jxr_linenumber" name="L298" href="#L298">298</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L299" href="#L299">299</a> <em class="jxr_javadoccomment">     * @param x first sample</em>
<a class="jxr_linenumber" name="L300" href="#L300">300</a> <em class="jxr_javadoccomment">     * @param y second sample</em>
<a class="jxr_linenumber" name="L301" href="#L301">301</a> <em class="jxr_javadoccomment">     * @return test statistic \(D_{n,m}\) used to evaluate the null hypothesis that {@code x} and</em>
<a class="jxr_linenumber" name="L302" href="#L302">302</a> <em class="jxr_javadoccomment">     *         {@code y} represent samples from the same underlying distribution</em>
<a class="jxr_linenumber" name="L303" href="#L303">303</a> <em class="jxr_javadoccomment">     * @throws InsufficientDataException if either {@code x} or {@code y} does not have length at</em>
<a class="jxr_linenumber" name="L304" href="#L304">304</a> <em class="jxr_javadoccomment">     *         least 2</em>
<a class="jxr_linenumber" name="L305" href="#L305">305</a> <em class="jxr_javadoccomment">     * @throws NullArgumentException if either {@code x} or {@code y} is null</em>
<a class="jxr_linenumber" name="L306" href="#L306">306</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L307" href="#L307">307</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">double</strong> kolmogorovSmirnovStatistic(<strong class="jxr_keyword">double</strong>[] x, <strong class="jxr_keyword">double</strong>[] y) {
<a class="jxr_linenumber" name="L308" href="#L308">308</a>         <strong class="jxr_keyword">return</strong> integralKolmogorovSmirnovStatistic(x, y)/((<strong class="jxr_keyword">double</strong>)(x.length * (<strong class="jxr_keyword">long</strong>)y.length));
<a class="jxr_linenumber" name="L309" href="#L309">309</a>     }
<a class="jxr_linenumber" name="L310" href="#L310">310</a> 
<a class="jxr_linenumber" name="L311" href="#L311">311</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L312" href="#L312">312</a> <em class="jxr_javadoccomment">     * Computes the two-sample Kolmogorov-Smirnov test statistic, \(D_{n,m}=\sup_x |F_n(x)-F_m(x)|\)</em>
<a class="jxr_linenumber" name="L313" href="#L313">313</a> <em class="jxr_javadoccomment">     * where \(n\) is the length of {@code x}, \(m\) is the length of {@code y}, \(F_n\) is the</em>
<a class="jxr_linenumber" name="L314" href="#L314">314</a> <em class="jxr_javadoccomment">     * empirical distribution that puts mass \(1/n\) at each of the values in {@code x} and \(F_m\)</em>
<a class="jxr_linenumber" name="L315" href="#L315">315</a> <em class="jxr_javadoccomment">     * is the empirical distribution of the {@code y} values. Finally \(n m D_{n,m}\) is returned</em>
<a class="jxr_linenumber" name="L316" href="#L316">316</a> <em class="jxr_javadoccomment">     * as long value.</em>
<a class="jxr_linenumber" name="L317" href="#L317">317</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L318" href="#L318">318</a> <em class="jxr_javadoccomment">     * @param x first sample</em>
<a class="jxr_linenumber" name="L319" href="#L319">319</a> <em class="jxr_javadoccomment">     * @param y second sample</em>
<a class="jxr_linenumber" name="L320" href="#L320">320</a> <em class="jxr_javadoccomment">     * @return test statistic \(n m D_{n,m}\) used to evaluate the null hypothesis that {@code x} and</em>
<a class="jxr_linenumber" name="L321" href="#L321">321</a> <em class="jxr_javadoccomment">     *         {@code y} represent samples from the same underlying distribution</em>
<a class="jxr_linenumber" name="L322" href="#L322">322</a> <em class="jxr_javadoccomment">     * @throws InsufficientDataException if either {@code x} or {@code y} does not have length at</em>
<a class="jxr_linenumber" name="L323" href="#L323">323</a> <em class="jxr_javadoccomment">     *         least 2</em>
<a class="jxr_linenumber" name="L324" href="#L324">324</a> <em class="jxr_javadoccomment">     * @throws NullArgumentException if either {@code x} or {@code y} is null</em>
<a class="jxr_linenumber" name="L325" href="#L325">325</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L326" href="#L326">326</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">long</strong> integralKolmogorovSmirnovStatistic(<strong class="jxr_keyword">double</strong>[] x, <strong class="jxr_keyword">double</strong>[] y) {
<a class="jxr_linenumber" name="L327" href="#L327">327</a>         checkArray(x);
<a class="jxr_linenumber" name="L328" href="#L328">328</a>         checkArray(y);
<a class="jxr_linenumber" name="L329" href="#L329">329</a>         <em class="jxr_comment">// Copy and sort the sample arrays</em>
<a class="jxr_linenumber" name="L330" href="#L330">330</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] sx = MathArrays.copyOf(x);
<a class="jxr_linenumber" name="L331" href="#L331">331</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] sy = MathArrays.copyOf(y);
<a class="jxr_linenumber" name="L332" href="#L332">332</a>         Arrays.sort(sx);
<a class="jxr_linenumber" name="L333" href="#L333">333</a>         Arrays.sort(sy);
<a class="jxr_linenumber" name="L334" href="#L334">334</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> n = sx.length;
<a class="jxr_linenumber" name="L335" href="#L335">335</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> m = sy.length;
<a class="jxr_linenumber" name="L336" href="#L336">336</a> 
<a class="jxr_linenumber" name="L337" href="#L337">337</a>         <strong class="jxr_keyword">int</strong> rankX = 0;
<a class="jxr_linenumber" name="L338" href="#L338">338</a>         <strong class="jxr_keyword">int</strong> rankY = 0;
<a class="jxr_linenumber" name="L339" href="#L339">339</a>         <strong class="jxr_keyword">long</strong> curD = 0l;
<a class="jxr_linenumber" name="L340" href="#L340">340</a> 
<a class="jxr_linenumber" name="L341" href="#L341">341</a>         <em class="jxr_comment">// Find the max difference between cdf_x and cdf_y</em>
<a class="jxr_linenumber" name="L342" href="#L342">342</a>         <strong class="jxr_keyword">long</strong> supD = 0l;
<a class="jxr_linenumber" name="L343" href="#L343">343</a>         <strong class="jxr_keyword">do</strong> {
<a class="jxr_linenumber" name="L344" href="#L344">344</a>             <strong class="jxr_keyword">double</strong> z = Double.compare(sx[rankX], sy[rankY]) &lt;= 0 ? sx[rankX] : sy[rankY];
<a class="jxr_linenumber" name="L345" href="#L345">345</a>             <strong class="jxr_keyword">while</strong>(rankX &lt; n &amp;&amp; Double.compare(sx[rankX], z) == 0) {
<a class="jxr_linenumber" name="L346" href="#L346">346</a>                 rankX += 1;
<a class="jxr_linenumber" name="L347" href="#L347">347</a>                 curD += m;
<a class="jxr_linenumber" name="L348" href="#L348">348</a>             }
<a class="jxr_linenumber" name="L349" href="#L349">349</a>             <strong class="jxr_keyword">while</strong>(rankY &lt; m &amp;&amp; Double.compare(sy[rankY], z) == 0) {
<a class="jxr_linenumber" name="L350" href="#L350">350</a>                 rankY += 1;
<a class="jxr_linenumber" name="L351" href="#L351">351</a>                 curD -= n;
<a class="jxr_linenumber" name="L352" href="#L352">352</a>             }
<a class="jxr_linenumber" name="L353" href="#L353">353</a>             <strong class="jxr_keyword">if</strong> (curD &gt; supD) {
<a class="jxr_linenumber" name="L354" href="#L354">354</a>                 supD = curD;
<a class="jxr_linenumber" name="L355" href="#L355">355</a>             }
<a class="jxr_linenumber" name="L356" href="#L356">356</a>             <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (-curD &gt; supD) {
<a class="jxr_linenumber" name="L357" href="#L357">357</a>                 supD = -curD;
<a class="jxr_linenumber" name="L358" href="#L358">358</a>             }
<a class="jxr_linenumber" name="L359" href="#L359">359</a>         } <strong class="jxr_keyword">while</strong>(rankX &lt; n &amp;&amp; rankY &lt; m);
<a class="jxr_linenumber" name="L360" href="#L360">360</a>         <strong class="jxr_keyword">return</strong> supD;
<a class="jxr_linenumber" name="L361" href="#L361">361</a>     }
<a class="jxr_linenumber" name="L362" href="#L362">362</a> 
<a class="jxr_linenumber" name="L363" href="#L363">363</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L364" href="#L364">364</a> <em class="jxr_javadoccomment">     * Computes the &lt;i&gt;p-value&lt;/i&gt;, or &lt;i&gt;observed significance level&lt;/i&gt;, of a one-sample &lt;a</em>
<a class="jxr_linenumber" name="L365" href="#L365">365</a> <em class="jxr_javadoccomment">     * href="<a href="http://en.wikipedia.org/wiki/Kolmogorov-Smirnov_test" target="alexandria_uri">http://en.wikipedia.org/wiki/Kolmogorov-Smirnov_test</a>"&gt; Kolmogorov-Smirnov test&lt;/a&gt;</em>
<a class="jxr_linenumber" name="L366" href="#L366">366</a> <em class="jxr_javadoccomment">     * evaluating the null hypothesis that {@code data} conforms to {@code distribution}.</em>
<a class="jxr_linenumber" name="L367" href="#L367">367</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L368" href="#L368">368</a> <em class="jxr_javadoccomment">     * @param distribution reference distribution</em>
<a class="jxr_linenumber" name="L369" href="#L369">369</a> <em class="jxr_javadoccomment">     * @param data sample being being evaluated</em>
<a class="jxr_linenumber" name="L370" href="#L370">370</a> <em class="jxr_javadoccomment">     * @return the p-value associated with the null hypothesis that {@code data} is a sample from</em>
<a class="jxr_linenumber" name="L371" href="#L371">371</a> <em class="jxr_javadoccomment">     *         {@code distribution}</em>
<a class="jxr_linenumber" name="L372" href="#L372">372</a> <em class="jxr_javadoccomment">     * @throws InsufficientDataException if {@code data} does not have length at least 2</em>
<a class="jxr_linenumber" name="L373" href="#L373">373</a> <em class="jxr_javadoccomment">     * @throws NullArgumentException if {@code data} is null</em>
<a class="jxr_linenumber" name="L374" href="#L374">374</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L375" href="#L375">375</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">double</strong> kolmogorovSmirnovTest(<a href="../../../../../../org/apache/commons/math3/distribution/RealDistribution.html">RealDistribution</a> distribution, <strong class="jxr_keyword">double</strong>[] data) {
<a class="jxr_linenumber" name="L376" href="#L376">376</a>         <strong class="jxr_keyword">return</strong> kolmogorovSmirnovTest(distribution, data, false);
<a class="jxr_linenumber" name="L377" href="#L377">377</a>     }
<a class="jxr_linenumber" name="L378" href="#L378">378</a> 
<a class="jxr_linenumber" name="L379" href="#L379">379</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L380" href="#L380">380</a> <em class="jxr_javadoccomment">     * Performs a &lt;a href="<a href="http://en.wikipedia.org/wiki/Kolmogorov-Smirnov_test" target="alexandria_uri">http://en.wikipedia.org/wiki/Kolmogorov-Smirnov_test</a>"&gt; Kolmogorov-Smirnov</em>
<a class="jxr_linenumber" name="L381" href="#L381">381</a> <em class="jxr_javadoccomment">     * test&lt;/a&gt; evaluating the null hypothesis that {@code data} conforms to {@code distribution}.</em>
<a class="jxr_linenumber" name="L382" href="#L382">382</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L383" href="#L383">383</a> <em class="jxr_javadoccomment">     * @param distribution reference distribution</em>
<a class="jxr_linenumber" name="L384" href="#L384">384</a> <em class="jxr_javadoccomment">     * @param data sample being being evaluated</em>
<a class="jxr_linenumber" name="L385" href="#L385">385</a> <em class="jxr_javadoccomment">     * @param alpha significance level of the test</em>
<a class="jxr_linenumber" name="L386" href="#L386">386</a> <em class="jxr_javadoccomment">     * @return true iff the null hypothesis that {@code data} is a sample from {@code distribution}</em>
<a class="jxr_linenumber" name="L387" href="#L387">387</a> <em class="jxr_javadoccomment">     *         can be rejected with confidence 1 - {@code alpha}</em>
<a class="jxr_linenumber" name="L388" href="#L388">388</a> <em class="jxr_javadoccomment">     * @throws InsufficientDataException if {@code data} does not have length at least 2</em>
<a class="jxr_linenumber" name="L389" href="#L389">389</a> <em class="jxr_javadoccomment">     * @throws NullArgumentException if {@code data} is null</em>
<a class="jxr_linenumber" name="L390" href="#L390">390</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L391" href="#L391">391</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">boolean</strong> kolmogorovSmirnovTest(<a href="../../../../../../org/apache/commons/math3/distribution/RealDistribution.html">RealDistribution</a> distribution, <strong class="jxr_keyword">double</strong>[] data, <strong class="jxr_keyword">double</strong> alpha) {
<a class="jxr_linenumber" name="L392" href="#L392">392</a>         <strong class="jxr_keyword">if</strong> ((alpha &lt;= 0) || (alpha &gt; 0.5)) {
<a class="jxr_linenumber" name="L393" href="#L393">393</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/exception/OutOfRangeException.html">OutOfRangeException</a>(LocalizedFormats.OUT_OF_BOUND_SIGNIFICANCE_LEVEL, alpha, 0, 0.5);
<a class="jxr_linenumber" name="L394" href="#L394">394</a>         }
<a class="jxr_linenumber" name="L395" href="#L395">395</a>         <strong class="jxr_keyword">return</strong> kolmogorovSmirnovTest(distribution, data) &lt; alpha;
<a class="jxr_linenumber" name="L396" href="#L396">396</a>     }
<a class="jxr_linenumber" name="L397" href="#L397">397</a> 
<a class="jxr_linenumber" name="L398" href="#L398">398</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L399" href="#L399">399</a> <em class="jxr_javadoccomment">     * Estimates the &lt;i&gt;p-value&lt;/i&gt; of a two-sample</em>
<a class="jxr_linenumber" name="L400" href="#L400">400</a> <em class="jxr_javadoccomment">     * &lt;a href="<a href="http://en.wikipedia.org/wiki/Kolmogorov-Smirnov_test" target="alexandria_uri">http://en.wikipedia.org/wiki/Kolmogorov-Smirnov_test</a>"&gt; Kolmogorov-Smirnov test&lt;/a&gt;</em>
<a class="jxr_linenumber" name="L401" href="#L401">401</a> <em class="jxr_javadoccomment">     * evaluating the null hypothesis that {@code x} and {@code y} are samples drawn from the same</em>
<a class="jxr_linenumber" name="L402" href="#L402">402</a> <em class="jxr_javadoccomment">     * probability distribution. This method estimates the p-value by repeatedly sampling sets of size</em>
<a class="jxr_linenumber" name="L403" href="#L403">403</a> <em class="jxr_javadoccomment">     * {@code x.length} and {@code y.length} from the empirical distribution of the combined sample.</em>
<a class="jxr_linenumber" name="L404" href="#L404">404</a> <em class="jxr_javadoccomment">     * When {@code strict} is true, this is equivalent to the algorithm implemented in the R function</em>
<a class="jxr_linenumber" name="L405" href="#L405">405</a> <em class="jxr_javadoccomment">     * {@code ks.boot}, described in &lt;pre&gt;</em>
<a class="jxr_linenumber" name="L406" href="#L406">406</a> <em class="jxr_javadoccomment">     * Jasjeet S. Sekhon. 2011. 'Multivariate and Propensity Score Matching</em>
<a class="jxr_linenumber" name="L407" href="#L407">407</a> <em class="jxr_javadoccomment">     * Software with Automated Balance Optimization: The Matching package for R.'</em>
<a class="jxr_linenumber" name="L408" href="#L408">408</a> <em class="jxr_javadoccomment">     * Journal of Statistical Software, 42(7): 1-52.</em>
<a class="jxr_linenumber" name="L409" href="#L409">409</a> <em class="jxr_javadoccomment">     * &lt;/pre&gt;</em>
<a class="jxr_linenumber" name="L410" href="#L410">410</a> <em class="jxr_javadoccomment">     * @param x first sample</em>
<a class="jxr_linenumber" name="L411" href="#L411">411</a> <em class="jxr_javadoccomment">     * @param y second sample</em>
<a class="jxr_linenumber" name="L412" href="#L412">412</a> <em class="jxr_javadoccomment">     * @param iterations number of bootstrap resampling iterations</em>
<a class="jxr_linenumber" name="L413" href="#L413">413</a> <em class="jxr_javadoccomment">     * @param strict whether or not the null hypothesis is expressed as a strict inequality</em>
<a class="jxr_linenumber" name="L414" href="#L414">414</a> <em class="jxr_javadoccomment">     * @return estimated p-value</em>
<a class="jxr_linenumber" name="L415" href="#L415">415</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L416" href="#L416">416</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">double</strong> bootstrap(<strong class="jxr_keyword">double</strong>[] x, <strong class="jxr_keyword">double</strong>[] y, <strong class="jxr_keyword">int</strong> iterations, <strong class="jxr_keyword">boolean</strong> strict) {
<a class="jxr_linenumber" name="L417" href="#L417">417</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> xLength = x.length;
<a class="jxr_linenumber" name="L418" href="#L418">418</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> yLength = y.length;
<a class="jxr_linenumber" name="L419" href="#L419">419</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] combined = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[xLength + yLength];
<a class="jxr_linenumber" name="L420" href="#L420">420</a>         System.arraycopy(x, 0, combined, 0, xLength);
<a class="jxr_linenumber" name="L421" href="#L421">421</a>         System.arraycopy(y, 0, combined, xLength, yLength);
<a class="jxr_linenumber" name="L422" href="#L422">422</a>         <strong class="jxr_keyword">final</strong> <a href="../../../../../../org/apache/commons/math3/distribution/EnumeratedRealDistribution.html">EnumeratedRealDistribution</a> dist = <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/distribution/EnumeratedRealDistribution.html">EnumeratedRealDistribution</a>(rng, combined);
<a class="jxr_linenumber" name="L423" href="#L423">423</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">long</strong> d = integralKolmogorovSmirnovStatistic(x, y);
<a class="jxr_linenumber" name="L424" href="#L424">424</a>         <strong class="jxr_keyword">int</strong> greaterCount = 0;
<a class="jxr_linenumber" name="L425" href="#L425">425</a>         <strong class="jxr_keyword">int</strong> equalCount = 0;
<a class="jxr_linenumber" name="L426" href="#L426">426</a>         <strong class="jxr_keyword">double</strong>[] curX;
<a class="jxr_linenumber" name="L427" href="#L427">427</a>         <strong class="jxr_keyword">double</strong>[] curY;
<a class="jxr_linenumber" name="L428" href="#L428">428</a>         <strong class="jxr_keyword">long</strong> curD;
<a class="jxr_linenumber" name="L429" href="#L429">429</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; iterations; i++) {
<a class="jxr_linenumber" name="L430" href="#L430">430</a>             curX = dist.sample(xLength);
<a class="jxr_linenumber" name="L431" href="#L431">431</a>             curY = dist.sample(yLength);
<a class="jxr_linenumber" name="L432" href="#L432">432</a>             curD = integralKolmogorovSmirnovStatistic(curX, curY);
<a class="jxr_linenumber" name="L433" href="#L433">433</a>             <strong class="jxr_keyword">if</strong> (curD &gt; d) {
<a class="jxr_linenumber" name="L434" href="#L434">434</a>                 greaterCount++;
<a class="jxr_linenumber" name="L435" href="#L435">435</a>             } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (curD == d) {
<a class="jxr_linenumber" name="L436" href="#L436">436</a>                 equalCount++;
<a class="jxr_linenumber" name="L437" href="#L437">437</a>             }
<a class="jxr_linenumber" name="L438" href="#L438">438</a>         }
<a class="jxr_linenumber" name="L439" href="#L439">439</a>         <strong class="jxr_keyword">return</strong> strict ? greaterCount / (<strong class="jxr_keyword">double</strong>) iterations :
<a class="jxr_linenumber" name="L440" href="#L440">440</a>             (greaterCount + equalCount) / (<strong class="jxr_keyword">double</strong>) iterations;
<a class="jxr_linenumber" name="L441" href="#L441">441</a>     }
<a class="jxr_linenumber" name="L442" href="#L442">442</a> 
<a class="jxr_linenumber" name="L443" href="#L443">443</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L444" href="#L444">444</a> <em class="jxr_javadoccomment">     * Computes {@code bootstrap(x, y, iterations, true)}.</em>
<a class="jxr_linenumber" name="L445" href="#L445">445</a> <em class="jxr_javadoccomment">     * This is equivalent to ks.boot(x,y, nboots=iterations) using the R Matching</em>
<a class="jxr_linenumber" name="L446" href="#L446">446</a> <em class="jxr_javadoccomment">     * package function. See #bootstrap(double[], double[], int, boolean).</em>
<a class="jxr_linenumber" name="L447" href="#L447">447</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L448" href="#L448">448</a> <em class="jxr_javadoccomment">     * @param x first sample</em>
<a class="jxr_linenumber" name="L449" href="#L449">449</a> <em class="jxr_javadoccomment">     * @param y second sample</em>
<a class="jxr_linenumber" name="L450" href="#L450">450</a> <em class="jxr_javadoccomment">     * @param iterations number of bootstrap resampling iterations</em>
<a class="jxr_linenumber" name="L451" href="#L451">451</a> <em class="jxr_javadoccomment">     * @return estimated p-value</em>
<a class="jxr_linenumber" name="L452" href="#L452">452</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L453" href="#L453">453</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">double</strong> bootstrap(<strong class="jxr_keyword">double</strong>[] x, <strong class="jxr_keyword">double</strong>[] y, <strong class="jxr_keyword">int</strong> iterations) {
<a class="jxr_linenumber" name="L454" href="#L454">454</a>         <strong class="jxr_keyword">return</strong> bootstrap(x, y, iterations, <strong class="jxr_keyword">true</strong>);
<a class="jxr_linenumber" name="L455" href="#L455">455</a>     }
<a class="jxr_linenumber" name="L456" href="#L456">456</a> 
<a class="jxr_linenumber" name="L457" href="#L457">457</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L458" href="#L458">458</a> <em class="jxr_javadoccomment">     * Calculates \(P(D_n &lt; d)\) using the method described in [1] with quick decisions for extreme</em>
<a class="jxr_linenumber" name="L459" href="#L459">459</a> <em class="jxr_javadoccomment">     * values given in [2] (see above). The result is not exact as with</em>
<a class="jxr_linenumber" name="L460" href="#L460">460</a> <em class="jxr_javadoccomment">     * {@link #cdfExact(double, int)} because calculations are based on</em>
<a class="jxr_linenumber" name="L461" href="#L461">461</a> <em class="jxr_javadoccomment">     * {@code double} rather than {@link org.apache.commons.math3.fraction.BigFraction}.</em>
<a class="jxr_linenumber" name="L462" href="#L462">462</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L463" href="#L463">463</a> <em class="jxr_javadoccomment">     * @param d statistic</em>
<a class="jxr_linenumber" name="L464" href="#L464">464</a> <em class="jxr_javadoccomment">     * @param n sample size</em>
<a class="jxr_linenumber" name="L465" href="#L465">465</a> <em class="jxr_javadoccomment">     * @return \(P(D_n &lt; d)\)</em>
<a class="jxr_linenumber" name="L466" href="#L466">466</a> <em class="jxr_javadoccomment">     * @throws MathArithmeticException if algorithm fails to convert {@code h} to a</em>
<a class="jxr_linenumber" name="L467" href="#L467">467</a> <em class="jxr_javadoccomment">     *         {@link org.apache.commons.math3.fraction.BigFraction} in expressing {@code d} as \((k</em>
<a class="jxr_linenumber" name="L468" href="#L468">468</a> <em class="jxr_javadoccomment">     *         - h) / m\) for integer {@code k, m} and \(0 \le h &lt; 1\)</em>
<a class="jxr_linenumber" name="L469" href="#L469">469</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L470" href="#L470">470</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">double</strong> cdf(<strong class="jxr_keyword">double</strong> d, <strong class="jxr_keyword">int</strong> n)
<a class="jxr_linenumber" name="L471" href="#L471">471</a>         <strong class="jxr_keyword">throws</strong> <a href="../../../../../../org/apache/commons/math3/exception/MathArithmeticException.html">MathArithmeticException</a> {
<a class="jxr_linenumber" name="L472" href="#L472">472</a>         <strong class="jxr_keyword">return</strong> cdf(d, n, false);
<a class="jxr_linenumber" name="L473" href="#L473">473</a>     }
<a class="jxr_linenumber" name="L474" href="#L474">474</a> 
<a class="jxr_linenumber" name="L475" href="#L475">475</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L476" href="#L476">476</a> <em class="jxr_javadoccomment">     * Calculates {@code P(D_n &lt; d)}. The result is exact in the sense that BigFraction/BigReal is</em>
<a class="jxr_linenumber" name="L477" href="#L477">477</a> <em class="jxr_javadoccomment">     * used everywhere at the expense of very slow execution time. Almost never choose this in real</em>
<a class="jxr_linenumber" name="L478" href="#L478">478</a> <em class="jxr_javadoccomment">     * applications unless you are very sure; this is almost solely for verification purposes.</em>
<a class="jxr_linenumber" name="L479" href="#L479">479</a> <em class="jxr_javadoccomment">     * Normally, you would choose {@link #cdf(double, int)}. See the class</em>
<a class="jxr_linenumber" name="L480" href="#L480">480</a> <em class="jxr_javadoccomment">     * javadoc for definitions and algorithm description.</em>
<a class="jxr_linenumber" name="L481" href="#L481">481</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L482" href="#L482">482</a> <em class="jxr_javadoccomment">     * @param d statistic</em>
<a class="jxr_linenumber" name="L483" href="#L483">483</a> <em class="jxr_javadoccomment">     * @param n sample size</em>
<a class="jxr_linenumber" name="L484" href="#L484">484</a> <em class="jxr_javadoccomment">     * @return \(P(D_n &lt; d)\)</em>
<a class="jxr_linenumber" name="L485" href="#L485">485</a> <em class="jxr_javadoccomment">     * @throws MathArithmeticException if the algorithm fails to convert {@code h} to a</em>
<a class="jxr_linenumber" name="L486" href="#L486">486</a> <em class="jxr_javadoccomment">     *         {@link org.apache.commons.math3.fraction.BigFraction} in expressing {@code d} as \((k</em>
<a class="jxr_linenumber" name="L487" href="#L487">487</a> <em class="jxr_javadoccomment">     *         - h) / m\) for integer {@code k, m} and \(0 \le h &lt; 1\)</em>
<a class="jxr_linenumber" name="L488" href="#L488">488</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L489" href="#L489">489</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">double</strong> cdfExact(<strong class="jxr_keyword">double</strong> d, <strong class="jxr_keyword">int</strong> n)
<a class="jxr_linenumber" name="L490" href="#L490">490</a>         <strong class="jxr_keyword">throws</strong> <a href="../../../../../../org/apache/commons/math3/exception/MathArithmeticException.html">MathArithmeticException</a> {
<a class="jxr_linenumber" name="L491" href="#L491">491</a>         <strong class="jxr_keyword">return</strong> cdf(d, n, <strong class="jxr_keyword">true</strong>);
<a class="jxr_linenumber" name="L492" href="#L492">492</a>     }
<a class="jxr_linenumber" name="L493" href="#L493">493</a> 
<a class="jxr_linenumber" name="L494" href="#L494">494</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L495" href="#L495">495</a> <em class="jxr_javadoccomment">     * Calculates {@code P(D_n &lt; d)} using method described in [1] with quick decisions for extreme</em>
<a class="jxr_linenumber" name="L496" href="#L496">496</a> <em class="jxr_javadoccomment">     * values given in [2] (see above).</em>
<a class="jxr_linenumber" name="L497" href="#L497">497</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L498" href="#L498">498</a> <em class="jxr_javadoccomment">     * @param d statistic</em>
<a class="jxr_linenumber" name="L499" href="#L499">499</a> <em class="jxr_javadoccomment">     * @param n sample size</em>
<a class="jxr_linenumber" name="L500" href="#L500">500</a> <em class="jxr_javadoccomment">     * @param exact whether the probability should be calculated exact using</em>
<a class="jxr_linenumber" name="L501" href="#L501">501</a> <em class="jxr_javadoccomment">     *        {@link org.apache.commons.math3.fraction.BigFraction} everywhere at the expense of</em>
<a class="jxr_linenumber" name="L502" href="#L502">502</a> <em class="jxr_javadoccomment">     *        very slow execution time, or if {@code double} should be used convenient places to</em>
<a class="jxr_linenumber" name="L503" href="#L503">503</a> <em class="jxr_javadoccomment">     *        gain speed. Almost never choose {@code true} in real applications unless you are very</em>
<a class="jxr_linenumber" name="L504" href="#L504">504</a> <em class="jxr_javadoccomment">     *        sure; {@code true} is almost solely for verification purposes.</em>
<a class="jxr_linenumber" name="L505" href="#L505">505</a> <em class="jxr_javadoccomment">     * @return \(P(D_n &lt; d)\)</em>
<a class="jxr_linenumber" name="L506" href="#L506">506</a> <em class="jxr_javadoccomment">     * @throws MathArithmeticException if algorithm fails to convert {@code h} to a</em>
<a class="jxr_linenumber" name="L507" href="#L507">507</a> <em class="jxr_javadoccomment">     *         {@link org.apache.commons.math3.fraction.BigFraction} in expressing {@code d} as \((k</em>
<a class="jxr_linenumber" name="L508" href="#L508">508</a> <em class="jxr_javadoccomment">     *         - h) / m\) for integer {@code k, m} and \(0 \le h &lt; 1\).</em>
<a class="jxr_linenumber" name="L509" href="#L509">509</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L510" href="#L510">510</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">double</strong> cdf(<strong class="jxr_keyword">double</strong> d, <strong class="jxr_keyword">int</strong> n, <strong class="jxr_keyword">boolean</strong> exact)
<a class="jxr_linenumber" name="L511" href="#L511">511</a>         <strong class="jxr_keyword">throws</strong> <a href="../../../../../../org/apache/commons/math3/exception/MathArithmeticException.html">MathArithmeticException</a> {
<a class="jxr_linenumber" name="L512" href="#L512">512</a> 
<a class="jxr_linenumber" name="L513" href="#L513">513</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> ninv = 1 / ((<strong class="jxr_keyword">double</strong>) n);
<a class="jxr_linenumber" name="L514" href="#L514">514</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> ninvhalf = 0.5 * ninv;
<a class="jxr_linenumber" name="L515" href="#L515">515</a> 
<a class="jxr_linenumber" name="L516" href="#L516">516</a>         <strong class="jxr_keyword">if</strong> (d &lt;= ninvhalf) {
<a class="jxr_linenumber" name="L517" href="#L517">517</a>             <strong class="jxr_keyword">return</strong> 0;
<a class="jxr_linenumber" name="L518" href="#L518">518</a>         } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (ninvhalf &lt; d &amp;&amp; d &lt;= ninv) {
<a class="jxr_linenumber" name="L519" href="#L519">519</a>             <strong class="jxr_keyword">double</strong> res = 1;
<a class="jxr_linenumber" name="L520" href="#L520">520</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> f = 2 * d - ninv;
<a class="jxr_linenumber" name="L521" href="#L521">521</a>             <em class="jxr_comment">// n! f^n = n*f * (n-1)*f * ... * 1*x</em>
<a class="jxr_linenumber" name="L522" href="#L522">522</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 1; i &lt;= n; ++i) {
<a class="jxr_linenumber" name="L523" href="#L523">523</a>                 res *= i * f;
<a class="jxr_linenumber" name="L524" href="#L524">524</a>             }
<a class="jxr_linenumber" name="L525" href="#L525">525</a>             <strong class="jxr_keyword">return</strong> res;
<a class="jxr_linenumber" name="L526" href="#L526">526</a>         } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (1 - ninv &lt;= d &amp;&amp; d &lt; 1) {
<a class="jxr_linenumber" name="L527" href="#L527">527</a>             <strong class="jxr_keyword">return</strong> 1 - 2 * Math.pow(1 - d, n);
<a class="jxr_linenumber" name="L528" href="#L528">528</a>         } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (1 &lt;= d) {
<a class="jxr_linenumber" name="L529" href="#L529">529</a>             <strong class="jxr_keyword">return</strong> 1;
<a class="jxr_linenumber" name="L530" href="#L530">530</a>         }
<a class="jxr_linenumber" name="L531" href="#L531">531</a>         <strong class="jxr_keyword">if</strong> (exact) {
<a class="jxr_linenumber" name="L532" href="#L532">532</a>             <strong class="jxr_keyword">return</strong> exactK(d, n);
<a class="jxr_linenumber" name="L533" href="#L533">533</a>         }
<a class="jxr_linenumber" name="L534" href="#L534">534</a>         <strong class="jxr_keyword">if</strong> (n &lt;= 140) {
<a class="jxr_linenumber" name="L535" href="#L535">535</a>             <strong class="jxr_keyword">return</strong> roundedK(d, n);
<a class="jxr_linenumber" name="L536" href="#L536">536</a>         }
<a class="jxr_linenumber" name="L537" href="#L537">537</a>         <strong class="jxr_keyword">return</strong> pelzGood(d, n);
<a class="jxr_linenumber" name="L538" href="#L538">538</a>     }
<a class="jxr_linenumber" name="L539" href="#L539">539</a> 
<a class="jxr_linenumber" name="L540" href="#L540">540</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L541" href="#L541">541</a> <em class="jxr_javadoccomment">     * Calculates the exact value of {@code P(D_n &lt; d)} using the method described in [1] (reference</em>
<a class="jxr_linenumber" name="L542" href="#L542">542</a> <em class="jxr_javadoccomment">     * in class javadoc above) and {@link org.apache.commons.math3.fraction.BigFraction} (see</em>
<a class="jxr_linenumber" name="L543" href="#L543">543</a> <em class="jxr_javadoccomment">     * above).</em>
<a class="jxr_linenumber" name="L544" href="#L544">544</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L545" href="#L545">545</a> <em class="jxr_javadoccomment">     * @param d statistic</em>
<a class="jxr_linenumber" name="L546" href="#L546">546</a> <em class="jxr_javadoccomment">     * @param n sample size</em>
<a class="jxr_linenumber" name="L547" href="#L547">547</a> <em class="jxr_javadoccomment">     * @return the two-sided probability of \(P(D_n &lt; d)\)</em>
<a class="jxr_linenumber" name="L548" href="#L548">548</a> <em class="jxr_javadoccomment">     * @throws MathArithmeticException if algorithm fails to convert {@code h} to a</em>
<a class="jxr_linenumber" name="L549" href="#L549">549</a> <em class="jxr_javadoccomment">     *         {@link org.apache.commons.math3.fraction.BigFraction} in expressing {@code d} as \((k</em>
<a class="jxr_linenumber" name="L550" href="#L550">550</a> <em class="jxr_javadoccomment">     *         - h) / m\) for integer {@code k, m} and \(0 \le h &lt; 1\).</em>
<a class="jxr_linenumber" name="L551" href="#L551">551</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L552" href="#L552">552</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">double</strong> exactK(<strong class="jxr_keyword">double</strong> d, <strong class="jxr_keyword">int</strong> n)
<a class="jxr_linenumber" name="L553" href="#L553">553</a>         <strong class="jxr_keyword">throws</strong> <a href="../../../../../../org/apache/commons/math3/exception/MathArithmeticException.html">MathArithmeticException</a> {
<a class="jxr_linenumber" name="L554" href="#L554">554</a> 
<a class="jxr_linenumber" name="L555" href="#L555">555</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> k = (<strong class="jxr_keyword">int</strong>) Math.ceil(n * d);
<a class="jxr_linenumber" name="L556" href="#L556">556</a> 
<a class="jxr_linenumber" name="L557" href="#L557">557</a>         <strong class="jxr_keyword">final</strong> FieldMatrix&lt;BigFraction&gt; H = <strong class="jxr_keyword">this</strong>.createExactH(d, n);
<a class="jxr_linenumber" name="L558" href="#L558">558</a>         <strong class="jxr_keyword">final</strong> FieldMatrix&lt;BigFraction&gt; Hpower = H.power(n);
<a class="jxr_linenumber" name="L559" href="#L559">559</a> 
<a class="jxr_linenumber" name="L560" href="#L560">560</a>         <a href="../../../../../../org/apache/commons/math3/fraction/BigFraction.html">BigFraction</a> pFrac = Hpower.getEntry(k - 1, k - 1);
<a class="jxr_linenumber" name="L561" href="#L561">561</a> 
<a class="jxr_linenumber" name="L562" href="#L562">562</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 1; i &lt;= n; ++i) {
<a class="jxr_linenumber" name="L563" href="#L563">563</a>             pFrac = pFrac.multiply(i).divide(n);
<a class="jxr_linenumber" name="L564" href="#L564">564</a>         }
<a class="jxr_linenumber" name="L565" href="#L565">565</a> 
<a class="jxr_linenumber" name="L566" href="#L566">566</a>         <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L567" href="#L567">567</a> <em class="jxr_comment">         * BigFraction.doubleValue converts numerator to double and the denominator to double and</em>
<a class="jxr_linenumber" name="L568" href="#L568">568</a> <em class="jxr_comment">         * divides afterwards. That gives NaN quite easy. This does not (scale is the number of</em>
<a class="jxr_linenumber" name="L569" href="#L569">569</a> <em class="jxr_comment">         * digits):</em>
<a class="jxr_linenumber" name="L570" href="#L570">570</a> <em class="jxr_comment">         */</em>
<a class="jxr_linenumber" name="L571" href="#L571">571</a>         <strong class="jxr_keyword">return</strong> pFrac.bigDecimalValue(20, BigDecimal.ROUND_HALF_UP).doubleValue();
<a class="jxr_linenumber" name="L572" href="#L572">572</a>     }
<a class="jxr_linenumber" name="L573" href="#L573">573</a> 
<a class="jxr_linenumber" name="L574" href="#L574">574</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L575" href="#L575">575</a> <em class="jxr_javadoccomment">     * Calculates {@code P(D_n &lt; d)} using method described in [1] and doubles (see above).</em>
<a class="jxr_linenumber" name="L576" href="#L576">576</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L577" href="#L577">577</a> <em class="jxr_javadoccomment">     * @param d statistic</em>
<a class="jxr_linenumber" name="L578" href="#L578">578</a> <em class="jxr_javadoccomment">     * @param n sample size</em>
<a class="jxr_linenumber" name="L579" href="#L579">579</a> <em class="jxr_javadoccomment">     * @return \(P(D_n &lt; d)\)</em>
<a class="jxr_linenumber" name="L580" href="#L580">580</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L581" href="#L581">581</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">double</strong> roundedK(<strong class="jxr_keyword">double</strong> d, <strong class="jxr_keyword">int</strong> n) {
<a class="jxr_linenumber" name="L582" href="#L582">582</a> 
<a class="jxr_linenumber" name="L583" href="#L583">583</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> k = (<strong class="jxr_keyword">int</strong>) Math.ceil(n * d);
<a class="jxr_linenumber" name="L584" href="#L584">584</a>         <strong class="jxr_keyword">final</strong> <a href="../../../../../../org/apache/commons/math3/linear/RealMatrix.html">RealMatrix</a> H = <strong class="jxr_keyword">this</strong>.createRoundedH(d, n);
<a class="jxr_linenumber" name="L585" href="#L585">585</a>         <strong class="jxr_keyword">final</strong> <a href="../../../../../../org/apache/commons/math3/linear/RealMatrix.html">RealMatrix</a> Hpower = H.power(n);
<a class="jxr_linenumber" name="L586" href="#L586">586</a> 
<a class="jxr_linenumber" name="L587" href="#L587">587</a>         <strong class="jxr_keyword">double</strong> pFrac = Hpower.getEntry(k - 1, k - 1);
<a class="jxr_linenumber" name="L588" href="#L588">588</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 1; i &lt;= n; ++i) {
<a class="jxr_linenumber" name="L589" href="#L589">589</a>             pFrac *= (<strong class="jxr_keyword">double</strong>) i / (<strong class="jxr_keyword">double</strong>) n;
<a class="jxr_linenumber" name="L590" href="#L590">590</a>         }
<a class="jxr_linenumber" name="L591" href="#L591">591</a> 
<a class="jxr_linenumber" name="L592" href="#L592">592</a>         <strong class="jxr_keyword">return</strong> pFrac;
<a class="jxr_linenumber" name="L593" href="#L593">593</a>     }
<a class="jxr_linenumber" name="L594" href="#L594">594</a> 
<a class="jxr_linenumber" name="L595" href="#L595">595</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L596" href="#L596">596</a> <em class="jxr_javadoccomment">     * Computes the Pelz-Good approximation for \(P(D_n &lt; d)\) as described in [2] in the class javadoc.</em>
<a class="jxr_linenumber" name="L597" href="#L597">597</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L598" href="#L598">598</a> <em class="jxr_javadoccomment">     * @param d value of d-statistic (x in [2])</em>
<a class="jxr_linenumber" name="L599" href="#L599">599</a> <em class="jxr_javadoccomment">     * @param n sample size</em>
<a class="jxr_linenumber" name="L600" href="#L600">600</a> <em class="jxr_javadoccomment">     * @return \(P(D_n &lt; d)\)</em>
<a class="jxr_linenumber" name="L601" href="#L601">601</a> <em class="jxr_javadoccomment">     * @since 3.4</em>
<a class="jxr_linenumber" name="L602" href="#L602">602</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L603" href="#L603">603</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">double</strong> pelzGood(<strong class="jxr_keyword">double</strong> d, <strong class="jxr_keyword">int</strong> n) {
<a class="jxr_linenumber" name="L604" href="#L604">604</a>         <em class="jxr_comment">// Change the variable since approximation is for the distribution evaluated at d / sqrt(n)</em>
<a class="jxr_linenumber" name="L605" href="#L605">605</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> sqrtN = FastMath.sqrt(n);
<a class="jxr_linenumber" name="L606" href="#L606">606</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> z = d * sqrtN;
<a class="jxr_linenumber" name="L607" href="#L607">607</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> z2 = d * d * n;
<a class="jxr_linenumber" name="L608" href="#L608">608</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> z4 = z2 * z2;
<a class="jxr_linenumber" name="L609" href="#L609">609</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> z6 = z4 * z2;
<a class="jxr_linenumber" name="L610" href="#L610">610</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> z8 = z4 * z4;
<a class="jxr_linenumber" name="L611" href="#L611">611</a> 
<a class="jxr_linenumber" name="L612" href="#L612">612</a>         <em class="jxr_comment">// Eventual return value</em>
<a class="jxr_linenumber" name="L613" href="#L613">613</a>         <strong class="jxr_keyword">double</strong> ret = 0;
<a class="jxr_linenumber" name="L614" href="#L614">614</a> 
<a class="jxr_linenumber" name="L615" href="#L615">615</a>         <em class="jxr_comment">// Compute K_0(z)</em>
<a class="jxr_linenumber" name="L616" href="#L616">616</a>         <strong class="jxr_keyword">double</strong> sum = 0;
<a class="jxr_linenumber" name="L617" href="#L617">617</a>         <strong class="jxr_keyword">double</strong> increment = 0;
<a class="jxr_linenumber" name="L618" href="#L618">618</a>         <strong class="jxr_keyword">double</strong> kTerm = 0;
<a class="jxr_linenumber" name="L619" href="#L619">619</a>         <strong class="jxr_keyword">double</strong> z2Term = MathUtils.PI_SQUARED / (8 * z2);
<a class="jxr_linenumber" name="L620" href="#L620">620</a>         <strong class="jxr_keyword">int</strong> k = 1;
<a class="jxr_linenumber" name="L621" href="#L621">621</a>         <strong class="jxr_keyword">for</strong> (; k &lt; MAXIMUM_PARTIAL_SUM_COUNT; k++) {
<a class="jxr_linenumber" name="L622" href="#L622">622</a>             kTerm = 2 * k - 1;
<a class="jxr_linenumber" name="L623" href="#L623">623</a>             increment = FastMath.exp(-z2Term * kTerm * kTerm);
<a class="jxr_linenumber" name="L624" href="#L624">624</a>             sum += increment;
<a class="jxr_linenumber" name="L625" href="#L625">625</a>             <strong class="jxr_keyword">if</strong> (increment &lt;= PG_SUM_RELATIVE_ERROR * sum) {
<a class="jxr_linenumber" name="L626" href="#L626">626</a>                 <strong class="jxr_keyword">break</strong>;
<a class="jxr_linenumber" name="L627" href="#L627">627</a>             }
<a class="jxr_linenumber" name="L628" href="#L628">628</a>         }
<a class="jxr_linenumber" name="L629" href="#L629">629</a>         <strong class="jxr_keyword">if</strong> (k == MAXIMUM_PARTIAL_SUM_COUNT) {
<a class="jxr_linenumber" name="L630" href="#L630">630</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/exception/TooManyIterationsException.html">TooManyIterationsException</a>(MAXIMUM_PARTIAL_SUM_COUNT);
<a class="jxr_linenumber" name="L631" href="#L631">631</a>         }
<a class="jxr_linenumber" name="L632" href="#L632">632</a>         ret = sum * FastMath.sqrt(2 * FastMath.PI) / z;
<a class="jxr_linenumber" name="L633" href="#L633">633</a> 
<a class="jxr_linenumber" name="L634" href="#L634">634</a>         <em class="jxr_comment">// K_1(z)</em>
<a class="jxr_linenumber" name="L635" href="#L635">635</a>         <em class="jxr_comment">// Sum is -inf to inf, but k term is always (k + 1/2) ^ 2, so really have</em>
<a class="jxr_linenumber" name="L636" href="#L636">636</a>         <em class="jxr_comment">// twice the sum from k = 0 to inf (k = -1 is same as 0, -2 same as 1, ...)</em>
<a class="jxr_linenumber" name="L637" href="#L637">637</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> twoZ2 = 2 * z2;
<a class="jxr_linenumber" name="L638" href="#L638">638</a>         sum = 0;
<a class="jxr_linenumber" name="L639" href="#L639">639</a>         kTerm = 0;
<a class="jxr_linenumber" name="L640" href="#L640">640</a>         <strong class="jxr_keyword">double</strong> kTerm2 = 0;
<a class="jxr_linenumber" name="L641" href="#L641">641</a>         <strong class="jxr_keyword">for</strong> (k = 0; k &lt; MAXIMUM_PARTIAL_SUM_COUNT; k++) {
<a class="jxr_linenumber" name="L642" href="#L642">642</a>             kTerm = k + 0.5;
<a class="jxr_linenumber" name="L643" href="#L643">643</a>             kTerm2 = kTerm * kTerm;
<a class="jxr_linenumber" name="L644" href="#L644">644</a>             increment = (MathUtils.PI_SQUARED * kTerm2 - z2) * FastMath.exp(-MathUtils.PI_SQUARED * kTerm2 / twoZ2);
<a class="jxr_linenumber" name="L645" href="#L645">645</a>             sum += increment;
<a class="jxr_linenumber" name="L646" href="#L646">646</a>             <strong class="jxr_keyword">if</strong> (FastMath.abs(increment) &lt; PG_SUM_RELATIVE_ERROR * FastMath.abs(sum)) {
<a class="jxr_linenumber" name="L647" href="#L647">647</a>                 <strong class="jxr_keyword">break</strong>;
<a class="jxr_linenumber" name="L648" href="#L648">648</a>             }
<a class="jxr_linenumber" name="L649" href="#L649">649</a>         }
<a class="jxr_linenumber" name="L650" href="#L650">650</a>         <strong class="jxr_keyword">if</strong> (k == MAXIMUM_PARTIAL_SUM_COUNT) {
<a class="jxr_linenumber" name="L651" href="#L651">651</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/exception/TooManyIterationsException.html">TooManyIterationsException</a>(MAXIMUM_PARTIAL_SUM_COUNT);
<a class="jxr_linenumber" name="L652" href="#L652">652</a>         }
<a class="jxr_linenumber" name="L653" href="#L653">653</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> sqrtHalfPi = FastMath.sqrt(FastMath.PI / 2);
<a class="jxr_linenumber" name="L654" href="#L654">654</a>         <em class="jxr_comment">// Instead of doubling sum, divide by 3 instead of 6</em>
<a class="jxr_linenumber" name="L655" href="#L655">655</a>         ret += sum * sqrtHalfPi / (3 * z4 * sqrtN);
<a class="jxr_linenumber" name="L656" href="#L656">656</a> 
<a class="jxr_linenumber" name="L657" href="#L657">657</a>         <em class="jxr_comment">// K_2(z)</em>
<a class="jxr_linenumber" name="L658" href="#L658">658</a>         <em class="jxr_comment">// Same drill as K_1, but with two doubly infinite sums, all k terms are even powers.</em>
<a class="jxr_linenumber" name="L659" href="#L659">659</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> z4Term = 2 * z4;
<a class="jxr_linenumber" name="L660" href="#L660">660</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> z6Term = 6 * z6;
<a class="jxr_linenumber" name="L661" href="#L661">661</a>         z2Term = 5 * z2;
<a class="jxr_linenumber" name="L662" href="#L662">662</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> pi4 = MathUtils.PI_SQUARED * MathUtils.PI_SQUARED;
<a class="jxr_linenumber" name="L663" href="#L663">663</a>         sum = 0;
<a class="jxr_linenumber" name="L664" href="#L664">664</a>         kTerm = 0;
<a class="jxr_linenumber" name="L665" href="#L665">665</a>         kTerm2 = 0;
<a class="jxr_linenumber" name="L666" href="#L666">666</a>         <strong class="jxr_keyword">for</strong> (k = 0; k &lt; MAXIMUM_PARTIAL_SUM_COUNT; k++) {
<a class="jxr_linenumber" name="L667" href="#L667">667</a>             kTerm = k + 0.5;
<a class="jxr_linenumber" name="L668" href="#L668">668</a>             kTerm2 = kTerm * kTerm;
<a class="jxr_linenumber" name="L669" href="#L669">669</a>             increment =  (z6Term + z4Term + MathUtils.PI_SQUARED * (z4Term - z2Term) * kTerm2 +
<a class="jxr_linenumber" name="L670" href="#L670">670</a>                     pi4 * (1 - twoZ2) * kTerm2 * kTerm2) * FastMath.exp(-MathUtils.PI_SQUARED * kTerm2 / twoZ2);
<a class="jxr_linenumber" name="L671" href="#L671">671</a>             sum += increment;
<a class="jxr_linenumber" name="L672" href="#L672">672</a>             <strong class="jxr_keyword">if</strong> (FastMath.abs(increment) &lt; PG_SUM_RELATIVE_ERROR * FastMath.abs(sum)) {
<a class="jxr_linenumber" name="L673" href="#L673">673</a>                 <strong class="jxr_keyword">break</strong>;
<a class="jxr_linenumber" name="L674" href="#L674">674</a>             }
<a class="jxr_linenumber" name="L675" href="#L675">675</a>         }
<a class="jxr_linenumber" name="L676" href="#L676">676</a>         <strong class="jxr_keyword">if</strong> (k == MAXIMUM_PARTIAL_SUM_COUNT) {
<a class="jxr_linenumber" name="L677" href="#L677">677</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/exception/TooManyIterationsException.html">TooManyIterationsException</a>(MAXIMUM_PARTIAL_SUM_COUNT);
<a class="jxr_linenumber" name="L678" href="#L678">678</a>         }
<a class="jxr_linenumber" name="L679" href="#L679">679</a>         <strong class="jxr_keyword">double</strong> sum2 = 0;
<a class="jxr_linenumber" name="L680" href="#L680">680</a>         kTerm2 = 0;
<a class="jxr_linenumber" name="L681" href="#L681">681</a>         <strong class="jxr_keyword">for</strong> (k = 1; k &lt; MAXIMUM_PARTIAL_SUM_COUNT; k++) {
<a class="jxr_linenumber" name="L682" href="#L682">682</a>             kTerm2 = k * k;
<a class="jxr_linenumber" name="L683" href="#L683">683</a>             increment = MathUtils.PI_SQUARED * kTerm2 * FastMath.exp(-MathUtils.PI_SQUARED * kTerm2 / twoZ2);
<a class="jxr_linenumber" name="L684" href="#L684">684</a>             sum2 += increment;
<a class="jxr_linenumber" name="L685" href="#L685">685</a>             <strong class="jxr_keyword">if</strong> (FastMath.abs(increment) &lt; PG_SUM_RELATIVE_ERROR * FastMath.abs(sum2)) {
<a class="jxr_linenumber" name="L686" href="#L686">686</a>                 <strong class="jxr_keyword">break</strong>;
<a class="jxr_linenumber" name="L687" href="#L687">687</a>             }
<a class="jxr_linenumber" name="L688" href="#L688">688</a>         }
<a class="jxr_linenumber" name="L689" href="#L689">689</a>         <strong class="jxr_keyword">if</strong> (k == MAXIMUM_PARTIAL_SUM_COUNT) {
<a class="jxr_linenumber" name="L690" href="#L690">690</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/exception/TooManyIterationsException.html">TooManyIterationsException</a>(MAXIMUM_PARTIAL_SUM_COUNT);
<a class="jxr_linenumber" name="L691" href="#L691">691</a>         }
<a class="jxr_linenumber" name="L692" href="#L692">692</a>         <em class="jxr_comment">// Again, adjust coefficients instead of doubling sum, sum2</em>
<a class="jxr_linenumber" name="L693" href="#L693">693</a>         ret += (sqrtHalfPi / n) * (sum / (36 * z2 * z2 * z2 * z) - sum2 / (18 * z2 * z));
<a class="jxr_linenumber" name="L694" href="#L694">694</a> 
<a class="jxr_linenumber" name="L695" href="#L695">695</a>         <em class="jxr_comment">// K_3(z) One more time with feeling - two doubly infinite sums, all k powers even.</em>
<a class="jxr_linenumber" name="L696" href="#L696">696</a>         <em class="jxr_comment">// Multiply coefficient denominators by 2, so omit doubling sums.</em>
<a class="jxr_linenumber" name="L697" href="#L697">697</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> pi6 = pi4 * MathUtils.PI_SQUARED;
<a class="jxr_linenumber" name="L698" href="#L698">698</a>         sum = 0;
<a class="jxr_linenumber" name="L699" href="#L699">699</a>         <strong class="jxr_keyword">double</strong> kTerm4 = 0;
<a class="jxr_linenumber" name="L700" href="#L700">700</a>         <strong class="jxr_keyword">double</strong> kTerm6 = 0;
<a class="jxr_linenumber" name="L701" href="#L701">701</a>         <strong class="jxr_keyword">for</strong> (k = 0; k &lt; MAXIMUM_PARTIAL_SUM_COUNT; k++) {
<a class="jxr_linenumber" name="L702" href="#L702">702</a>             kTerm = k + 0.5;
<a class="jxr_linenumber" name="L703" href="#L703">703</a>             kTerm2 = kTerm * kTerm;
<a class="jxr_linenumber" name="L704" href="#L704">704</a>             kTerm4 = kTerm2 * kTerm2;
<a class="jxr_linenumber" name="L705" href="#L705">705</a>             kTerm6 = kTerm4 * kTerm2;
<a class="jxr_linenumber" name="L706" href="#L706">706</a>             increment = (pi6 * kTerm6 * (5 - 30 * z2) + pi4 * kTerm4 * (-60 * z2 + 212 * z4) +
<a class="jxr_linenumber" name="L707" href="#L707">707</a>                             MathUtils.PI_SQUARED * kTerm2 * (135 * z4 - 96 * z6) - 30 * z6 - 90 * z8) *
<a class="jxr_linenumber" name="L708" href="#L708">708</a>                     FastMath.exp(-MathUtils.PI_SQUARED * kTerm2 / twoZ2);
<a class="jxr_linenumber" name="L709" href="#L709">709</a>             sum += increment;
<a class="jxr_linenumber" name="L710" href="#L710">710</a>             <strong class="jxr_keyword">if</strong> (FastMath.abs(increment) &lt; PG_SUM_RELATIVE_ERROR * FastMath.abs(sum)) {
<a class="jxr_linenumber" name="L711" href="#L711">711</a>                 <strong class="jxr_keyword">break</strong>;
<a class="jxr_linenumber" name="L712" href="#L712">712</a>             }
<a class="jxr_linenumber" name="L713" href="#L713">713</a>         }
<a class="jxr_linenumber" name="L714" href="#L714">714</a>         <strong class="jxr_keyword">if</strong> (k == MAXIMUM_PARTIAL_SUM_COUNT) {
<a class="jxr_linenumber" name="L715" href="#L715">715</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/exception/TooManyIterationsException.html">TooManyIterationsException</a>(MAXIMUM_PARTIAL_SUM_COUNT);
<a class="jxr_linenumber" name="L716" href="#L716">716</a>         }
<a class="jxr_linenumber" name="L717" href="#L717">717</a>         sum2 = 0;
<a class="jxr_linenumber" name="L718" href="#L718">718</a>         <strong class="jxr_keyword">for</strong> (k = 1; k &lt; MAXIMUM_PARTIAL_SUM_COUNT; k++) {
<a class="jxr_linenumber" name="L719" href="#L719">719</a>             kTerm2 = k * k;
<a class="jxr_linenumber" name="L720" href="#L720">720</a>             kTerm4 = kTerm2 * kTerm2;
<a class="jxr_linenumber" name="L721" href="#L721">721</a>             increment = (-pi4 * kTerm4 + 3 * MathUtils.PI_SQUARED * kTerm2 * z2) *
<a class="jxr_linenumber" name="L722" href="#L722">722</a>                     FastMath.exp(-MathUtils.PI_SQUARED * kTerm2 / twoZ2);
<a class="jxr_linenumber" name="L723" href="#L723">723</a>             sum2 += increment;
<a class="jxr_linenumber" name="L724" href="#L724">724</a>             <strong class="jxr_keyword">if</strong> (FastMath.abs(increment) &lt; PG_SUM_RELATIVE_ERROR * FastMath.abs(sum2)) {
<a class="jxr_linenumber" name="L725" href="#L725">725</a>                 <strong class="jxr_keyword">break</strong>;
<a class="jxr_linenumber" name="L726" href="#L726">726</a>             }
<a class="jxr_linenumber" name="L727" href="#L727">727</a>         }
<a class="jxr_linenumber" name="L728" href="#L728">728</a>         <strong class="jxr_keyword">if</strong> (k == MAXIMUM_PARTIAL_SUM_COUNT) {
<a class="jxr_linenumber" name="L729" href="#L729">729</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/exception/TooManyIterationsException.html">TooManyIterationsException</a>(MAXIMUM_PARTIAL_SUM_COUNT);
<a class="jxr_linenumber" name="L730" href="#L730">730</a>         }
<a class="jxr_linenumber" name="L731" href="#L731">731</a>         <strong class="jxr_keyword">return</strong> ret + (sqrtHalfPi / (sqrtN * n)) * (sum / (3240 * z6 * z4) +
<a class="jxr_linenumber" name="L732" href="#L732">732</a>                 + sum2 / (108 * z6));
<a class="jxr_linenumber" name="L733" href="#L733">733</a> 
<a class="jxr_linenumber" name="L734" href="#L734">734</a>     }
<a class="jxr_linenumber" name="L735" href="#L735">735</a> 
<a class="jxr_linenumber" name="L736" href="#L736">736</a>     <em class="jxr_javadoccomment">/***</em>
<a class="jxr_linenumber" name="L737" href="#L737">737</a> <em class="jxr_javadoccomment">     * Creates {@code H} of size {@code m x m} as described in [1] (see above).</em>
<a class="jxr_linenumber" name="L738" href="#L738">738</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L739" href="#L739">739</a> <em class="jxr_javadoccomment">     * @param d statistic</em>
<a class="jxr_linenumber" name="L740" href="#L740">740</a> <em class="jxr_javadoccomment">     * @param n sample size</em>
<a class="jxr_linenumber" name="L741" href="#L741">741</a> <em class="jxr_javadoccomment">     * @return H matrix</em>
<a class="jxr_linenumber" name="L742" href="#L742">742</a> <em class="jxr_javadoccomment">     * @throws NumberIsTooLargeException if fractional part is greater than 1</em>
<a class="jxr_linenumber" name="L743" href="#L743">743</a> <em class="jxr_javadoccomment">     * @throws FractionConversionException if algorithm fails to convert {@code h} to a</em>
<a class="jxr_linenumber" name="L744" href="#L744">744</a> <em class="jxr_javadoccomment">     *         {@link org.apache.commons.math3.fraction.BigFraction} in expressing {@code d} as \((k</em>
<a class="jxr_linenumber" name="L745" href="#L745">745</a> <em class="jxr_javadoccomment">     *         - h) / m\) for integer {@code k, m} and \(0 &lt;= h &lt; 1\).</em>
<a class="jxr_linenumber" name="L746" href="#L746">746</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L747" href="#L747">747</a>     <strong class="jxr_keyword">private</strong> FieldMatrix&lt;BigFraction&gt; createExactH(<strong class="jxr_keyword">double</strong> d, <strong class="jxr_keyword">int</strong> n)
<a class="jxr_linenumber" name="L748" href="#L748">748</a>         <strong class="jxr_keyword">throws</strong> NumberIsTooLargeException, <a href="../../../../../../org/apache/commons/math3/fraction/FractionConversionException.html">FractionConversionException</a> {
<a class="jxr_linenumber" name="L749" href="#L749">749</a> 
<a class="jxr_linenumber" name="L750" href="#L750">750</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> k = (<strong class="jxr_keyword">int</strong>) Math.ceil(n * d);
<a class="jxr_linenumber" name="L751" href="#L751">751</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> m = 2 * k - 1;
<a class="jxr_linenumber" name="L752" href="#L752">752</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> hDouble = k - n * d;
<a class="jxr_linenumber" name="L753" href="#L753">753</a>         <strong class="jxr_keyword">if</strong> (hDouble &gt;= 1) {
<a class="jxr_linenumber" name="L754" href="#L754">754</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/exception/NumberIsTooLargeException.html">NumberIsTooLargeException</a>(hDouble, 1.0, false);
<a class="jxr_linenumber" name="L755" href="#L755">755</a>         }
<a class="jxr_linenumber" name="L756" href="#L756">756</a>         <a href="../../../../../../org/apache/commons/math3/fraction/BigFraction.html">BigFraction</a> h = <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L757" href="#L757">757</a>         <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L758" href="#L758">758</a>             h = <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/fraction/BigFraction.html">BigFraction</a>(hDouble, 1.0e-20, 10000);
<a class="jxr_linenumber" name="L759" href="#L759">759</a>         } <strong class="jxr_keyword">catch</strong> (<strong class="jxr_keyword">final</strong> FractionConversionException e1) {
<a class="jxr_linenumber" name="L760" href="#L760">760</a>             <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L761" href="#L761">761</a>                 h = <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/fraction/BigFraction.html">BigFraction</a>(hDouble, 1.0e-10, 10000);
<a class="jxr_linenumber" name="L762" href="#L762">762</a>             } <strong class="jxr_keyword">catch</strong> (<strong class="jxr_keyword">final</strong> FractionConversionException e2) {
<a class="jxr_linenumber" name="L763" href="#L763">763</a>                 h = <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/fraction/BigFraction.html">BigFraction</a>(hDouble, 1.0e-5, 10000);
<a class="jxr_linenumber" name="L764" href="#L764">764</a>             }
<a class="jxr_linenumber" name="L765" href="#L765">765</a>         }
<a class="jxr_linenumber" name="L766" href="#L766">766</a>         <strong class="jxr_keyword">final</strong> <a href="../../../../../../org/apache/commons/math3/fraction/BigFraction.html">BigFraction</a>[][] Hdata = <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/fraction/BigFraction.html">BigFraction</a>[m][m];
<a class="jxr_linenumber" name="L767" href="#L767">767</a> 
<a class="jxr_linenumber" name="L768" href="#L768">768</a>         <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L769" href="#L769">769</a> <em class="jxr_comment">         * Start by filling everything with either 0 or 1.</em>
<a class="jxr_linenumber" name="L770" href="#L770">770</a> <em class="jxr_comment">         */</em>
<a class="jxr_linenumber" name="L771" href="#L771">771</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; m; ++i) {
<a class="jxr_linenumber" name="L772" href="#L772">772</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = 0; j &lt; m; ++j) {
<a class="jxr_linenumber" name="L773" href="#L773">773</a>                 <strong class="jxr_keyword">if</strong> (i - j + 1 &lt; 0) {
<a class="jxr_linenumber" name="L774" href="#L774">774</a>                     Hdata[i][j] = BigFraction.ZERO;
<a class="jxr_linenumber" name="L775" href="#L775">775</a>                 } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L776" href="#L776">776</a>                     Hdata[i][j] = BigFraction.ONE;
<a class="jxr_linenumber" name="L777" href="#L777">777</a>                 }
<a class="jxr_linenumber" name="L778" href="#L778">778</a>             }
<a class="jxr_linenumber" name="L779" href="#L779">779</a>         }
<a class="jxr_linenumber" name="L780" href="#L780">780</a> 
<a class="jxr_linenumber" name="L781" href="#L781">781</a>         <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L782" href="#L782">782</a> <em class="jxr_comment">         * Setting up power-array to avoid calculating the same value twice: hPowers[0] = h^1 ...</em>
<a class="jxr_linenumber" name="L783" href="#L783">783</a> <em class="jxr_comment">         * hPowers[m-1] = h^m</em>
<a class="jxr_linenumber" name="L784" href="#L784">784</a> <em class="jxr_comment">         */</em>
<a class="jxr_linenumber" name="L785" href="#L785">785</a>         <strong class="jxr_keyword">final</strong> <a href="../../../../../../org/apache/commons/math3/fraction/BigFraction.html">BigFraction</a>[] hPowers = <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/fraction/BigFraction.html">BigFraction</a>[m];
<a class="jxr_linenumber" name="L786" href="#L786">786</a>         hPowers[0] = h;
<a class="jxr_linenumber" name="L787" href="#L787">787</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 1; i &lt; m; ++i) {
<a class="jxr_linenumber" name="L788" href="#L788">788</a>             hPowers[i] = h.multiply(hPowers[i - 1]);
<a class="jxr_linenumber" name="L789" href="#L789">789</a>         }
<a class="jxr_linenumber" name="L790" href="#L790">790</a> 
<a class="jxr_linenumber" name="L791" href="#L791">791</a>         <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L792" href="#L792">792</a> <em class="jxr_comment">         * First column and last row has special values (each other reversed).</em>
<a class="jxr_linenumber" name="L793" href="#L793">793</a> <em class="jxr_comment">         */</em>
<a class="jxr_linenumber" name="L794" href="#L794">794</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; m; ++i) {
<a class="jxr_linenumber" name="L795" href="#L795">795</a>             Hdata[i][0] = Hdata[i][0].subtract(hPowers[i]);
<a class="jxr_linenumber" name="L796" href="#L796">796</a>             Hdata[m - 1][i] = Hdata[m - 1][i].subtract(hPowers[m - i - 1]);
<a class="jxr_linenumber" name="L797" href="#L797">797</a>         }
<a class="jxr_linenumber" name="L798" href="#L798">798</a> 
<a class="jxr_linenumber" name="L799" href="#L799">799</a>         <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L800" href="#L800">800</a> <em class="jxr_comment">         * [1] states: "For 1/2 &lt; h &lt; 1 the bottom left element of the matrix should be (1 - 2*h^m +</em>
<a class="jxr_linenumber" name="L801" href="#L801">801</a> <em class="jxr_comment">         * (2h - 1)^m )/m!" Since 0 &lt;= h &lt; 1, then if h &gt; 1/2 is sufficient to check:</em>
<a class="jxr_linenumber" name="L802" href="#L802">802</a> <em class="jxr_comment">         */</em>
<a class="jxr_linenumber" name="L803" href="#L803">803</a>         <strong class="jxr_keyword">if</strong> (h.compareTo(BigFraction.ONE_HALF) == 1) {
<a class="jxr_linenumber" name="L804" href="#L804">804</a>             Hdata[m - 1][0] = Hdata[m - 1][0].add(h.multiply(2).subtract(1).pow(m));
<a class="jxr_linenumber" name="L805" href="#L805">805</a>         }
<a class="jxr_linenumber" name="L806" href="#L806">806</a> 
<a class="jxr_linenumber" name="L807" href="#L807">807</a>         <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L808" href="#L808">808</a> <em class="jxr_comment">         * Aside from the first column and last row, the (i, j)-th element is 1/(i - j + 1)! if i -</em>
<a class="jxr_linenumber" name="L809" href="#L809">809</a> <em class="jxr_comment">         * j + 1 &gt;= 0, else 0. 1's and 0's are already put, so only division with (i - j + 1)! is</em>
<a class="jxr_linenumber" name="L810" href="#L810">810</a> <em class="jxr_comment">         * needed in the elements that have 1's. There is no need to calculate (i - j + 1)! and then</em>
<a class="jxr_linenumber" name="L811" href="#L811">811</a> <em class="jxr_comment">         * divide - small steps avoid overflows. Note that i - j + 1 &gt; 0 &lt;=&gt; i + 1 &gt; j instead of</em>
<a class="jxr_linenumber" name="L812" href="#L812">812</a> <em class="jxr_comment">         * j'ing all the way to m. Also note that it is started at g = 2 because dividing by 1 isn't</em>
<a class="jxr_linenumber" name="L813" href="#L813">813</a> <em class="jxr_comment">         * really necessary.</em>
<a class="jxr_linenumber" name="L814" href="#L814">814</a> <em class="jxr_comment">         */</em>
<a class="jxr_linenumber" name="L815" href="#L815">815</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; m; ++i) {
<a class="jxr_linenumber" name="L816" href="#L816">816</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = 0; j &lt; i + 1; ++j) {
<a class="jxr_linenumber" name="L817" href="#L817">817</a>                 <strong class="jxr_keyword">if</strong> (i - j + 1 &gt; 0) {
<a class="jxr_linenumber" name="L818" href="#L818">818</a>                     <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> g = 2; g &lt;= i - j + 1; ++g) {
<a class="jxr_linenumber" name="L819" href="#L819">819</a>                         Hdata[i][j] = Hdata[i][j].divide(g);
<a class="jxr_linenumber" name="L820" href="#L820">820</a>                     }
<a class="jxr_linenumber" name="L821" href="#L821">821</a>                 }
<a class="jxr_linenumber" name="L822" href="#L822">822</a>             }
<a class="jxr_linenumber" name="L823" href="#L823">823</a>         }
<a class="jxr_linenumber" name="L824" href="#L824">824</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> Array2DRowFieldMatrix&lt;BigFraction&gt;(BigFractionField.getInstance(), Hdata);
<a class="jxr_linenumber" name="L825" href="#L825">825</a>     }
<a class="jxr_linenumber" name="L826" href="#L826">826</a> 
<a class="jxr_linenumber" name="L827" href="#L827">827</a>     <em class="jxr_javadoccomment">/***</em>
<a class="jxr_linenumber" name="L828" href="#L828">828</a> <em class="jxr_javadoccomment">     * Creates {@code H} of size {@code m x m} as described in [1] (see above)</em>
<a class="jxr_linenumber" name="L829" href="#L829">829</a> <em class="jxr_javadoccomment">     * using double-precision.</em>
<a class="jxr_linenumber" name="L830" href="#L830">830</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L831" href="#L831">831</a> <em class="jxr_javadoccomment">     * @param d statistic</em>
<a class="jxr_linenumber" name="L832" href="#L832">832</a> <em class="jxr_javadoccomment">     * @param n sample size</em>
<a class="jxr_linenumber" name="L833" href="#L833">833</a> <em class="jxr_javadoccomment">     * @return H matrix</em>
<a class="jxr_linenumber" name="L834" href="#L834">834</a> <em class="jxr_javadoccomment">     * @throws NumberIsTooLargeException if fractional part is greater than 1</em>
<a class="jxr_linenumber" name="L835" href="#L835">835</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L836" href="#L836">836</a>     <strong class="jxr_keyword">private</strong> <a href="../../../../../../org/apache/commons/math3/linear/RealMatrix.html">RealMatrix</a> createRoundedH(<strong class="jxr_keyword">double</strong> d, <strong class="jxr_keyword">int</strong> n)
<a class="jxr_linenumber" name="L837" href="#L837">837</a>         <strong class="jxr_keyword">throws</strong> <a href="../../../../../../org/apache/commons/math3/exception/NumberIsTooLargeException.html">NumberIsTooLargeException</a> {
<a class="jxr_linenumber" name="L838" href="#L838">838</a> 
<a class="jxr_linenumber" name="L839" href="#L839">839</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> k = (<strong class="jxr_keyword">int</strong>) Math.ceil(n * d);
<a class="jxr_linenumber" name="L840" href="#L840">840</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> m = 2 * k - 1;
<a class="jxr_linenumber" name="L841" href="#L841">841</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> h = k - n * d;
<a class="jxr_linenumber" name="L842" href="#L842">842</a>         <strong class="jxr_keyword">if</strong> (h &gt;= 1) {
<a class="jxr_linenumber" name="L843" href="#L843">843</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/exception/NumberIsTooLargeException.html">NumberIsTooLargeException</a>(h, 1.0, false);
<a class="jxr_linenumber" name="L844" href="#L844">844</a>         }
<a class="jxr_linenumber" name="L845" href="#L845">845</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[][] Hdata = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[m][m];
<a class="jxr_linenumber" name="L846" href="#L846">846</a> 
<a class="jxr_linenumber" name="L847" href="#L847">847</a>         <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L848" href="#L848">848</a> <em class="jxr_comment">         * Start by filling everything with either 0 or 1.</em>
<a class="jxr_linenumber" name="L849" href="#L849">849</a> <em class="jxr_comment">         */</em>
<a class="jxr_linenumber" name="L850" href="#L850">850</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; m; ++i) {
<a class="jxr_linenumber" name="L851" href="#L851">851</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = 0; j &lt; m; ++j) {
<a class="jxr_linenumber" name="L852" href="#L852">852</a>                 <strong class="jxr_keyword">if</strong> (i - j + 1 &lt; 0) {
<a class="jxr_linenumber" name="L853" href="#L853">853</a>                     Hdata[i][j] = 0;
<a class="jxr_linenumber" name="L854" href="#L854">854</a>                 } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L855" href="#L855">855</a>                     Hdata[i][j] = 1;
<a class="jxr_linenumber" name="L856" href="#L856">856</a>                 }
<a class="jxr_linenumber" name="L857" href="#L857">857</a>             }
<a class="jxr_linenumber" name="L858" href="#L858">858</a>         }
<a class="jxr_linenumber" name="L859" href="#L859">859</a> 
<a class="jxr_linenumber" name="L860" href="#L860">860</a>         <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L861" href="#L861">861</a> <em class="jxr_comment">         * Setting up power-array to avoid calculating the same value twice: hPowers[0] = h^1 ...</em>
<a class="jxr_linenumber" name="L862" href="#L862">862</a> <em class="jxr_comment">         * hPowers[m-1] = h^m</em>
<a class="jxr_linenumber" name="L863" href="#L863">863</a> <em class="jxr_comment">         */</em>
<a class="jxr_linenumber" name="L864" href="#L864">864</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] hPowers = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[m];
<a class="jxr_linenumber" name="L865" href="#L865">865</a>         hPowers[0] = h;
<a class="jxr_linenumber" name="L866" href="#L866">866</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 1; i &lt; m; ++i) {
<a class="jxr_linenumber" name="L867" href="#L867">867</a>             hPowers[i] = h * hPowers[i - 1];
<a class="jxr_linenumber" name="L868" href="#L868">868</a>         }
<a class="jxr_linenumber" name="L869" href="#L869">869</a> 
<a class="jxr_linenumber" name="L870" href="#L870">870</a>         <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L871" href="#L871">871</a> <em class="jxr_comment">         * First column and last row has special values (each other reversed).</em>
<a class="jxr_linenumber" name="L872" href="#L872">872</a> <em class="jxr_comment">         */</em>
<a class="jxr_linenumber" name="L873" href="#L873">873</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; m; ++i) {
<a class="jxr_linenumber" name="L874" href="#L874">874</a>             Hdata[i][0] = Hdata[i][0] - hPowers[i];
<a class="jxr_linenumber" name="L875" href="#L875">875</a>             Hdata[m - 1][i] -= hPowers[m - i - 1];
<a class="jxr_linenumber" name="L876" href="#L876">876</a>         }
<a class="jxr_linenumber" name="L877" href="#L877">877</a> 
<a class="jxr_linenumber" name="L878" href="#L878">878</a>         <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L879" href="#L879">879</a> <em class="jxr_comment">         * [1] states: "For 1/2 &lt; h &lt; 1 the bottom left element of the matrix should be (1 - 2*h^m +</em>
<a class="jxr_linenumber" name="L880" href="#L880">880</a> <em class="jxr_comment">         * (2h - 1)^m )/m!" Since 0 &lt;= h &lt; 1, then if h &gt; 1/2 is sufficient to check:</em>
<a class="jxr_linenumber" name="L881" href="#L881">881</a> <em class="jxr_comment">         */</em>
<a class="jxr_linenumber" name="L882" href="#L882">882</a>         <strong class="jxr_keyword">if</strong> (Double.compare(h, 0.5) &gt; 0) {
<a class="jxr_linenumber" name="L883" href="#L883">883</a>             Hdata[m - 1][0] += FastMath.pow(2 * h - 1, m);
<a class="jxr_linenumber" name="L884" href="#L884">884</a>         }
<a class="jxr_linenumber" name="L885" href="#L885">885</a> 
<a class="jxr_linenumber" name="L886" href="#L886">886</a>         <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L887" href="#L887">887</a> <em class="jxr_comment">         * Aside from the first column and last row, the (i, j)-th element is 1/(i - j + 1)! if i -</em>
<a class="jxr_linenumber" name="L888" href="#L888">888</a> <em class="jxr_comment">         * j + 1 &gt;= 0, else 0. 1's and 0's are already put, so only division with (i - j + 1)! is</em>
<a class="jxr_linenumber" name="L889" href="#L889">889</a> <em class="jxr_comment">         * needed in the elements that have 1's. There is no need to calculate (i - j + 1)! and then</em>
<a class="jxr_linenumber" name="L890" href="#L890">890</a> <em class="jxr_comment">         * divide - small steps avoid overflows. Note that i - j + 1 &gt; 0 &lt;=&gt; i + 1 &gt; j instead of</em>
<a class="jxr_linenumber" name="L891" href="#L891">891</a> <em class="jxr_comment">         * j'ing all the way to m. Also note that it is started at g = 2 because dividing by 1 isn't</em>
<a class="jxr_linenumber" name="L892" href="#L892">892</a> <em class="jxr_comment">         * really necessary.</em>
<a class="jxr_linenumber" name="L893" href="#L893">893</a> <em class="jxr_comment">         */</em>
<a class="jxr_linenumber" name="L894" href="#L894">894</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; m; ++i) {
<a class="jxr_linenumber" name="L895" href="#L895">895</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = 0; j &lt; i + 1; ++j) {
<a class="jxr_linenumber" name="L896" href="#L896">896</a>                 <strong class="jxr_keyword">if</strong> (i - j + 1 &gt; 0) {
<a class="jxr_linenumber" name="L897" href="#L897">897</a>                     <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> g = 2; g &lt;= i - j + 1; ++g) {
<a class="jxr_linenumber" name="L898" href="#L898">898</a>                         Hdata[i][j] /= g;
<a class="jxr_linenumber" name="L899" href="#L899">899</a>                     }
<a class="jxr_linenumber" name="L900" href="#L900">900</a>                 }
<a class="jxr_linenumber" name="L901" href="#L901">901</a>             }
<a class="jxr_linenumber" name="L902" href="#L902">902</a>         }
<a class="jxr_linenumber" name="L903" href="#L903">903</a>         <strong class="jxr_keyword">return</strong> MatrixUtils.createRealMatrix(Hdata);
<a class="jxr_linenumber" name="L904" href="#L904">904</a>     }
<a class="jxr_linenumber" name="L905" href="#L905">905</a> 
<a class="jxr_linenumber" name="L906" href="#L906">906</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L907" href="#L907">907</a> <em class="jxr_javadoccomment">     * Verifies that {@code array} has length at least 2.</em>
<a class="jxr_linenumber" name="L908" href="#L908">908</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L909" href="#L909">909</a> <em class="jxr_javadoccomment">     * @param array array to test</em>
<a class="jxr_linenumber" name="L910" href="#L910">910</a> <em class="jxr_javadoccomment">     * @throws NullArgumentException if array is null</em>
<a class="jxr_linenumber" name="L911" href="#L911">911</a> <em class="jxr_javadoccomment">     * @throws InsufficientDataException if array is too short</em>
<a class="jxr_linenumber" name="L912" href="#L912">912</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L913" href="#L913">913</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">void</strong> checkArray(<strong class="jxr_keyword">double</strong>[] array) {
<a class="jxr_linenumber" name="L914" href="#L914">914</a>         <strong class="jxr_keyword">if</strong> (array == <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L915" href="#L915">915</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/exception/NullArgumentException.html">NullArgumentException</a>(LocalizedFormats.NULL_NOT_ALLOWED);
<a class="jxr_linenumber" name="L916" href="#L916">916</a>         }
<a class="jxr_linenumber" name="L917" href="#L917">917</a>         <strong class="jxr_keyword">if</strong> (array.length &lt; 2) {
<a class="jxr_linenumber" name="L918" href="#L918">918</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/exception/InsufficientDataException.html">InsufficientDataException</a>(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE, array.length,
<a class="jxr_linenumber" name="L919" href="#L919">919</a>                                                 2);
<a class="jxr_linenumber" name="L920" href="#L920">920</a>         }
<a class="jxr_linenumber" name="L921" href="#L921">921</a>     }
<a class="jxr_linenumber" name="L922" href="#L922">922</a> 
<a class="jxr_linenumber" name="L923" href="#L923">923</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L924" href="#L924">924</a> <em class="jxr_javadoccomment">     * Computes \( 1 + 2 \sum_{i=1}^\infty (-1)^i e^{-2 i^2 t^2} \) stopping when successive partial</em>
<a class="jxr_linenumber" name="L925" href="#L925">925</a> <em class="jxr_javadoccomment">     * sums are within {@code tolerance} of one another, or when {@code maxIterations} partial sums</em>
<a class="jxr_linenumber" name="L926" href="#L926">926</a> <em class="jxr_javadoccomment">     * have been computed. If the sum does not converge before {@code maxIterations} iterations a</em>
<a class="jxr_linenumber" name="L927" href="#L927">927</a> <em class="jxr_javadoccomment">     * {@link TooManyIterationsException} is thrown.</em>
<a class="jxr_linenumber" name="L928" href="#L928">928</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L929" href="#L929">929</a> <em class="jxr_javadoccomment">     * @param t argument</em>
<a class="jxr_linenumber" name="L930" href="#L930">930</a> <em class="jxr_javadoccomment">     * @param tolerance Cauchy criterion for partial sums</em>
<a class="jxr_linenumber" name="L931" href="#L931">931</a> <em class="jxr_javadoccomment">     * @param maxIterations maximum number of partial sums to compute</em>
<a class="jxr_linenumber" name="L932" href="#L932">932</a> <em class="jxr_javadoccomment">     * @return Kolmogorov sum evaluated at t</em>
<a class="jxr_linenumber" name="L933" href="#L933">933</a> <em class="jxr_javadoccomment">     * @throws TooManyIterationsException if the series does not converge</em>
<a class="jxr_linenumber" name="L934" href="#L934">934</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L935" href="#L935">935</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">double</strong> ksSum(<strong class="jxr_keyword">double</strong> t, <strong class="jxr_keyword">double</strong> tolerance, <strong class="jxr_keyword">int</strong> maxIterations) {
<a class="jxr_linenumber" name="L936" href="#L936">936</a>         <strong class="jxr_keyword">if</strong> (t == 0.0) {
<a class="jxr_linenumber" name="L937" href="#L937">937</a>             <strong class="jxr_keyword">return</strong> 0.0;
<a class="jxr_linenumber" name="L938" href="#L938">938</a>         }
<a class="jxr_linenumber" name="L939" href="#L939">939</a> 
<a class="jxr_linenumber" name="L940" href="#L940">940</a>         <em class="jxr_comment">// TODO: for small t (say less than 1), the alternative expansion in part 3 of [1]</em>
<a class="jxr_linenumber" name="L941" href="#L941">941</a>         <em class="jxr_comment">// from class javadoc should be used.</em>
<a class="jxr_linenumber" name="L942" href="#L942">942</a> 
<a class="jxr_linenumber" name="L943" href="#L943">943</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> x = -2 * t * t;
<a class="jxr_linenumber" name="L944" href="#L944">944</a>         <strong class="jxr_keyword">int</strong> sign = -1;
<a class="jxr_linenumber" name="L945" href="#L945">945</a>         <strong class="jxr_keyword">long</strong> i = 1;
<a class="jxr_linenumber" name="L946" href="#L946">946</a>         <strong class="jxr_keyword">double</strong> partialSum = 0.5d;
<a class="jxr_linenumber" name="L947" href="#L947">947</a>         <strong class="jxr_keyword">double</strong> delta = 1;
<a class="jxr_linenumber" name="L948" href="#L948">948</a>         <strong class="jxr_keyword">while</strong> (delta &gt; tolerance &amp;&amp; i &lt; maxIterations) {
<a class="jxr_linenumber" name="L949" href="#L949">949</a>             delta = FastMath.exp(x * i * i);
<a class="jxr_linenumber" name="L950" href="#L950">950</a>             partialSum += sign * delta;
<a class="jxr_linenumber" name="L951" href="#L951">951</a>             sign *= -1;
<a class="jxr_linenumber" name="L952" href="#L952">952</a>             i++;
<a class="jxr_linenumber" name="L953" href="#L953">953</a>         }
<a class="jxr_linenumber" name="L954" href="#L954">954</a>         <strong class="jxr_keyword">if</strong> (i == maxIterations) {
<a class="jxr_linenumber" name="L955" href="#L955">955</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/exception/TooManyIterationsException.html">TooManyIterationsException</a>(maxIterations);
<a class="jxr_linenumber" name="L956" href="#L956">956</a>         }
<a class="jxr_linenumber" name="L957" href="#L957">957</a>         <strong class="jxr_keyword">return</strong> partialSum * 2;
<a class="jxr_linenumber" name="L958" href="#L958">958</a>     }
<a class="jxr_linenumber" name="L959" href="#L959">959</a> 
<a class="jxr_linenumber" name="L960" href="#L960">960</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L961" href="#L961">961</a> <em class="jxr_javadoccomment">     * Given a d-statistic in the range [0, 1] and the two sample sizes n and m,</em>
<a class="jxr_linenumber" name="L962" href="#L962">962</a> <em class="jxr_javadoccomment">     * an integral d-statistic in the range [0, n*m] is calculated, that can be used for</em>
<a class="jxr_linenumber" name="L963" href="#L963">963</a> <em class="jxr_javadoccomment">     * comparison with other integral d-statistics. Depending whether {@code strict} is</em>
<a class="jxr_linenumber" name="L964" href="#L964">964</a> <em class="jxr_javadoccomment">     * {@code true} or not, the returned value divided by (n*m) is greater than</em>
<a class="jxr_linenumber" name="L965" href="#L965">965</a> <em class="jxr_javadoccomment">     * (resp greater than or equal to) the given d value (allowing some tolerance).</em>
<a class="jxr_linenumber" name="L966" href="#L966">966</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L967" href="#L967">967</a> <em class="jxr_javadoccomment">     * @param d a d-statistic in the range [0, 1]</em>
<a class="jxr_linenumber" name="L968" href="#L968">968</a> <em class="jxr_javadoccomment">     * @param n first sample size</em>
<a class="jxr_linenumber" name="L969" href="#L969">969</a> <em class="jxr_javadoccomment">     * @param m second sample size</em>
<a class="jxr_linenumber" name="L970" href="#L970">970</a> <em class="jxr_javadoccomment">     * @param strict whether the returned value divided by (n*m) is allowed to be equal to d</em>
<a class="jxr_linenumber" name="L971" href="#L971">971</a> <em class="jxr_javadoccomment">     * @return the integral d-statistic in the range [0, n*m]</em>
<a class="jxr_linenumber" name="L972" href="#L972">972</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L973" href="#L973">973</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">long</strong> calculateIntegralD(<strong class="jxr_keyword">double</strong> d, <strong class="jxr_keyword">int</strong> n, <strong class="jxr_keyword">int</strong> m, <strong class="jxr_keyword">boolean</strong> strict) {
<a class="jxr_linenumber" name="L974" href="#L974">974</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> tol = 1e-12;  <em class="jxr_comment">// d-values within tol of one another are considered equal</em>
<a class="jxr_linenumber" name="L975" href="#L975">975</a>         <strong class="jxr_keyword">long</strong> nm = n * (<strong class="jxr_keyword">long</strong>)m;
<a class="jxr_linenumber" name="L976" href="#L976">976</a>         <strong class="jxr_keyword">long</strong> upperBound = (<strong class="jxr_keyword">long</strong>)FastMath.ceil((d - tol) * nm);
<a class="jxr_linenumber" name="L977" href="#L977">977</a>         <strong class="jxr_keyword">long</strong> lowerBound = (<strong class="jxr_keyword">long</strong>)FastMath.floor((d + tol) * nm);
<a class="jxr_linenumber" name="L978" href="#L978">978</a>         <strong class="jxr_keyword">if</strong> (strict &amp;&amp; lowerBound == upperBound) {
<a class="jxr_linenumber" name="L979" href="#L979">979</a>             <strong class="jxr_keyword">return</strong> upperBound + 1l;
<a class="jxr_linenumber" name="L980" href="#L980">980</a>         }
<a class="jxr_linenumber" name="L981" href="#L981">981</a>         <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L982" href="#L982">982</a>             <strong class="jxr_keyword">return</strong> upperBound;
<a class="jxr_linenumber" name="L983" href="#L983">983</a>         }
<a class="jxr_linenumber" name="L984" href="#L984">984</a>     }
<a class="jxr_linenumber" name="L985" href="#L985">985</a> 
<a class="jxr_linenumber" name="L986" href="#L986">986</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L987" href="#L987">987</a> <em class="jxr_javadoccomment">     * Computes \(P(D_{n,m} &gt; d)\) if {@code strict} is {@code true}; otherwise \(P(D_{n,m} \ge</em>
<a class="jxr_linenumber" name="L988" href="#L988">988</a> <em class="jxr_javadoccomment">     * d)\), where \(D_{n,m}\) is the 2-sample Kolmogorov-Smirnov statistic. See</em>
<a class="jxr_linenumber" name="L989" href="#L989">989</a> <em class="jxr_javadoccomment">     * {@link #kolmogorovSmirnovStatistic(double[], double[])} for the definition of \(D_{n,m}\).</em>
<a class="jxr_linenumber" name="L990" href="#L990">990</a> <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L991" href="#L991">991</a> <em class="jxr_javadoccomment">     * The returned probability is exact, implemented by unwinding the recursive function</em>
<a class="jxr_linenumber" name="L992" href="#L992">992</a> <em class="jxr_javadoccomment">     * definitions presented in [4] (class javadoc).</em>
<a class="jxr_linenumber" name="L993" href="#L993">993</a> <em class="jxr_javadoccomment">     * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L994" href="#L994">994</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L995" href="#L995">995</a> <em class="jxr_javadoccomment">     * @param d D-statistic value</em>
<a class="jxr_linenumber" name="L996" href="#L996">996</a> <em class="jxr_javadoccomment">     * @param n first sample size</em>
<a class="jxr_linenumber" name="L997" href="#L997">997</a> <em class="jxr_javadoccomment">     * @param m second sample size</em>
<a class="jxr_linenumber" name="L998" href="#L998">998</a> <em class="jxr_javadoccomment">     * @param strict whether or not the probability to compute is expressed as a strict inequality</em>
<a class="jxr_linenumber" name="L999" href="#L999">999</a> <em class="jxr_javadoccomment">     * @return probability that a randomly selected m-n partition of m + n generates \(D_{n,m}\)</em>
<a class="jxr_linenumber" name="L1000" href="#L1000">1000</a> <em class="jxr_javadoccomment">     *         greater than (resp. greater than or equal to) {@code d}</em>
<a class="jxr_linenumber" name="L1001" href="#L1001">1001</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L1002" href="#L1002">1002</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">double</strong> exactP(<strong class="jxr_keyword">double</strong> d, <strong class="jxr_keyword">int</strong> n, <strong class="jxr_keyword">int</strong> m, <strong class="jxr_keyword">boolean</strong> strict) {
<a class="jxr_linenumber" name="L1003" href="#L1003">1003</a>        <strong class="jxr_keyword">return</strong> 1 - n(m, n, m, n, calculateIntegralD(d, m, n, strict), strict) /
<a class="jxr_linenumber" name="L1004" href="#L1004">1004</a>                CombinatoricsUtils.binomialCoefficientDouble(n + m, m);
<a class="jxr_linenumber" name="L1005" href="#L1005">1005</a>     }
<a class="jxr_linenumber" name="L1006" href="#L1006">1006</a> 
<a class="jxr_linenumber" name="L1007" href="#L1007">1007</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L1008" href="#L1008">1008</a> <em class="jxr_javadoccomment">     * Uses the Kolmogorov-Smirnov distribution to approximate \(P(D_{n,m} &gt; d)\) where \(D_{n,m}\)</em>
<a class="jxr_linenumber" name="L1009" href="#L1009">1009</a> <em class="jxr_javadoccomment">     * is the 2-sample Kolmogorov-Smirnov statistic. See</em>
<a class="jxr_linenumber" name="L1010" href="#L1010">1010</a> <em class="jxr_javadoccomment">     * {@link #kolmogorovSmirnovStatistic(double[], double[])} for the definition of \(D_{n,m}\).</em>
<a class="jxr_linenumber" name="L1011" href="#L1011">1011</a> <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L1012" href="#L1012">1012</a> <em class="jxr_javadoccomment">     * Specifically, what is returned is \(1 - k(d \sqrt{mn / (m + n)})\) where \(k(t) = 1 + 2</em>
<a class="jxr_linenumber" name="L1013" href="#L1013">1013</a> <em class="jxr_javadoccomment">     * \sum_{i=1}^\infty (-1)^i e^{-2 i^2 t^2}\). See {@link #ksSum(double, double, int)} for</em>
<a class="jxr_linenumber" name="L1014" href="#L1014">1014</a> <em class="jxr_javadoccomment">     * details on how convergence of the sum is determined. This implementation passes {@code ksSum}</em>
<a class="jxr_linenumber" name="L1015" href="#L1015">1015</a> <em class="jxr_javadoccomment">     * {@value #KS_SUM_CAUCHY_CRITERION} as {@code tolerance} and</em>
<a class="jxr_linenumber" name="L1016" href="#L1016">1016</a> <em class="jxr_javadoccomment">     * {@value #MAXIMUM_PARTIAL_SUM_COUNT} as {@code maxIterations}.</em>
<a class="jxr_linenumber" name="L1017" href="#L1017">1017</a> <em class="jxr_javadoccomment">     * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L1018" href="#L1018">1018</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L1019" href="#L1019">1019</a> <em class="jxr_javadoccomment">     * @param d D-statistic value</em>
<a class="jxr_linenumber" name="L1020" href="#L1020">1020</a> <em class="jxr_javadoccomment">     * @param n first sample size</em>
<a class="jxr_linenumber" name="L1021" href="#L1021">1021</a> <em class="jxr_javadoccomment">     * @param m second sample size</em>
<a class="jxr_linenumber" name="L1022" href="#L1022">1022</a> <em class="jxr_javadoccomment">     * @return approximate probability that a randomly selected m-n partition of m + n generates</em>
<a class="jxr_linenumber" name="L1023" href="#L1023">1023</a> <em class="jxr_javadoccomment">     *         \(D_{n,m}\) greater than {@code d}</em>
<a class="jxr_linenumber" name="L1024" href="#L1024">1024</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L1025" href="#L1025">1025</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">double</strong> approximateP(<strong class="jxr_keyword">double</strong> d, <strong class="jxr_keyword">int</strong> n, <strong class="jxr_keyword">int</strong> m) {
<a class="jxr_linenumber" name="L1026" href="#L1026">1026</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> dm = m;
<a class="jxr_linenumber" name="L1027" href="#L1027">1027</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> dn = n;
<a class="jxr_linenumber" name="L1028" href="#L1028">1028</a>         <strong class="jxr_keyword">return</strong> 1 - ksSum(d * FastMath.sqrt((dm * dn) / (dm + dn)),
<a class="jxr_linenumber" name="L1029" href="#L1029">1029</a>                          KS_SUM_CAUCHY_CRITERION, MAXIMUM_PARTIAL_SUM_COUNT);
<a class="jxr_linenumber" name="L1030" href="#L1030">1030</a>     }
<a class="jxr_linenumber" name="L1031" href="#L1031">1031</a> 
<a class="jxr_linenumber" name="L1032" href="#L1032">1032</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L1033" href="#L1033">1033</a> <em class="jxr_javadoccomment">     * Fills a boolean array randomly with a fixed number of {@code true} values.</em>
<a class="jxr_linenumber" name="L1034" href="#L1034">1034</a> <em class="jxr_javadoccomment">     * The method uses a simplified version of the Fisher-Yates shuffle algorithm.</em>
<a class="jxr_linenumber" name="L1035" href="#L1035">1035</a> <em class="jxr_javadoccomment">     * By processing first the {@code true} values followed by the remaining {@code false} values</em>
<a class="jxr_linenumber" name="L1036" href="#L1036">1036</a> <em class="jxr_javadoccomment">     * less random numbers need to be generated. The method is optimized for the case</em>
<a class="jxr_linenumber" name="L1037" href="#L1037">1037</a> <em class="jxr_javadoccomment">     * that the number of {@code true} values is larger than or equal to the number of</em>
<a class="jxr_linenumber" name="L1038" href="#L1038">1038</a> <em class="jxr_javadoccomment">     * {@code false} values.</em>
<a class="jxr_linenumber" name="L1039" href="#L1039">1039</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L1040" href="#L1040">1040</a> <em class="jxr_javadoccomment">     * @param b boolean array</em>
<a class="jxr_linenumber" name="L1041" href="#L1041">1041</a> <em class="jxr_javadoccomment">     * @param numberOfTrueValues number of {@code true} values the boolean array should finally have</em>
<a class="jxr_linenumber" name="L1042" href="#L1042">1042</a> <em class="jxr_javadoccomment">     * @param rng random data generator</em>
<a class="jxr_linenumber" name="L1043" href="#L1043">1043</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L1044" href="#L1044">1044</a>     <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">void</strong> fillBooleanArrayRandomlyWithFixedNumberTrueValues(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">boolean</strong>[] b, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> numberOfTrueValues, <strong class="jxr_keyword">final</strong> <a href="../../../../../../org/apache/commons/math3/random/RandomGenerator.html">RandomGenerator</a> rng) {
<a class="jxr_linenumber" name="L1045" href="#L1045">1045</a>         Arrays.fill(b, <strong class="jxr_keyword">true</strong>);
<a class="jxr_linenumber" name="L1046" href="#L1046">1046</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> k = numberOfTrueValues; k &lt; b.length; k++) {
<a class="jxr_linenumber" name="L1047" href="#L1047">1047</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> r = rng.nextInt(k + 1);
<a class="jxr_linenumber" name="L1048" href="#L1048">1048</a>             b[(b[r]) ? r : k] = false;
<a class="jxr_linenumber" name="L1049" href="#L1049">1049</a>         }
<a class="jxr_linenumber" name="L1050" href="#L1050">1050</a>     }
<a class="jxr_linenumber" name="L1051" href="#L1051">1051</a> 
<a class="jxr_linenumber" name="L1052" href="#L1052">1052</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L1053" href="#L1053">1053</a> <em class="jxr_javadoccomment">     * Uses Monte Carlo simulation to approximate \(P(D_{n,m} &gt; d)\) where \(D_{n,m}\) is the</em>
<a class="jxr_linenumber" name="L1054" href="#L1054">1054</a> <em class="jxr_javadoccomment">     * 2-sample Kolmogorov-Smirnov statistic. See</em>
<a class="jxr_linenumber" name="L1055" href="#L1055">1055</a> <em class="jxr_javadoccomment">     * {@link #kolmogorovSmirnovStatistic(double[], double[])} for the definition of \(D_{n,m}\).</em>
<a class="jxr_linenumber" name="L1056" href="#L1056">1056</a> <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L1057" href="#L1057">1057</a> <em class="jxr_javadoccomment">     * The simulation generates {@code iterations} random partitions of {@code m + n} into an</em>
<a class="jxr_linenumber" name="L1058" href="#L1058">1058</a> <em class="jxr_javadoccomment">     * {@code n} set and an {@code m} set, computing \(D_{n,m}\) for each partition and returning</em>
<a class="jxr_linenumber" name="L1059" href="#L1059">1059</a> <em class="jxr_javadoccomment">     * the proportion of values that are greater than {@code d}, or greater than or equal to</em>
<a class="jxr_linenumber" name="L1060" href="#L1060">1060</a> <em class="jxr_javadoccomment">     * {@code d} if {@code strict} is {@code false}.</em>
<a class="jxr_linenumber" name="L1061" href="#L1061">1061</a> <em class="jxr_javadoccomment">     * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L1062" href="#L1062">1062</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L1063" href="#L1063">1063</a> <em class="jxr_javadoccomment">     * @param d D-statistic value</em>
<a class="jxr_linenumber" name="L1064" href="#L1064">1064</a> <em class="jxr_javadoccomment">     * @param n first sample size</em>
<a class="jxr_linenumber" name="L1065" href="#L1065">1065</a> <em class="jxr_javadoccomment">     * @param m second sample size</em>
<a class="jxr_linenumber" name="L1066" href="#L1066">1066</a> <em class="jxr_javadoccomment">     * @param iterations number of random partitions to generate</em>
<a class="jxr_linenumber" name="L1067" href="#L1067">1067</a> <em class="jxr_javadoccomment">     * @param strict whether or not the probability to compute is expressed as a strict inequality</em>
<a class="jxr_linenumber" name="L1068" href="#L1068">1068</a> <em class="jxr_javadoccomment">     * @return proportion of randomly generated m-n partitions of m + n that result in \(D_{n,m}\)</em>
<a class="jxr_linenumber" name="L1069" href="#L1069">1069</a> <em class="jxr_javadoccomment">     *         greater than (resp. greater than or equal to) {@code d}</em>
<a class="jxr_linenumber" name="L1070" href="#L1070">1070</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L1071" href="#L1071">1071</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">double</strong> monteCarloP(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> d, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> n, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> m, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">boolean</strong> strict,
<a class="jxr_linenumber" name="L1072" href="#L1072">1072</a>                               <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> iterations) {
<a class="jxr_linenumber" name="L1073" href="#L1073">1073</a>         <strong class="jxr_keyword">return</strong> integralMonteCarloP(calculateIntegralD(d, n, m, strict), n, m, iterations);
<a class="jxr_linenumber" name="L1074" href="#L1074">1074</a>     }
<a class="jxr_linenumber" name="L1075" href="#L1075">1075</a> 
<a class="jxr_linenumber" name="L1076" href="#L1076">1076</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L1077" href="#L1077">1077</a> <em class="jxr_javadoccomment">     * Uses Monte Carlo simulation to approximate \(P(D_{n,m} &gt;= d/(n*m))\) where \(D_{n,m}\) is the</em>
<a class="jxr_linenumber" name="L1078" href="#L1078">1078</a> <em class="jxr_javadoccomment">     * 2-sample Kolmogorov-Smirnov statistic.</em>
<a class="jxr_linenumber" name="L1079" href="#L1079">1079</a> <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L1080" href="#L1080">1080</a> <em class="jxr_javadoccomment">     * Here d is the D-statistic represented as long value.</em>
<a class="jxr_linenumber" name="L1081" href="#L1081">1081</a> <em class="jxr_javadoccomment">     * The real D-statistic is obtained by dividing d by n*m.</em>
<a class="jxr_linenumber" name="L1082" href="#L1082">1082</a> <em class="jxr_javadoccomment">     * See also {@link #monteCarloP(double, int, int, boolean, int)}.</em>
<a class="jxr_linenumber" name="L1083" href="#L1083">1083</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L1084" href="#L1084">1084</a> <em class="jxr_javadoccomment">     * @param d integral D-statistic</em>
<a class="jxr_linenumber" name="L1085" href="#L1085">1085</a> <em class="jxr_javadoccomment">     * @param n first sample size</em>
<a class="jxr_linenumber" name="L1086" href="#L1086">1086</a> <em class="jxr_javadoccomment">     * @param m second sample size</em>
<a class="jxr_linenumber" name="L1087" href="#L1087">1087</a> <em class="jxr_javadoccomment">     * @param iterations number of random partitions to generate</em>
<a class="jxr_linenumber" name="L1088" href="#L1088">1088</a> <em class="jxr_javadoccomment">     * @return proportion of randomly generated m-n partitions of m + n that result in \(D_{n,m}\)</em>
<a class="jxr_linenumber" name="L1089" href="#L1089">1089</a> <em class="jxr_javadoccomment">     *         greater than or equal to {@code d/(n*m))}</em>
<a class="jxr_linenumber" name="L1090" href="#L1090">1090</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L1091" href="#L1091">1091</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">double</strong> integralMonteCarloP(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">long</strong> d, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> n, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> m, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> iterations) {
<a class="jxr_linenumber" name="L1092" href="#L1092">1092</a> 
<a class="jxr_linenumber" name="L1093" href="#L1093">1093</a>         <em class="jxr_comment">// ensure that nn is always the max of (n, m) to require fewer random numbers</em>
<a class="jxr_linenumber" name="L1094" href="#L1094">1094</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> nn = FastMath.max(n, m);
<a class="jxr_linenumber" name="L1095" href="#L1095">1095</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> mm = FastMath.min(n, m);
<a class="jxr_linenumber" name="L1096" href="#L1096">1096</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> sum = nn + mm;
<a class="jxr_linenumber" name="L1097" href="#L1097">1097</a> 
<a class="jxr_linenumber" name="L1098" href="#L1098">1098</a>         <strong class="jxr_keyword">int</strong> tail = 0;
<a class="jxr_linenumber" name="L1099" href="#L1099">1099</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">boolean</strong> b[] = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">boolean</strong>[sum];
<a class="jxr_linenumber" name="L1100" href="#L1100">1100</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; iterations; i++) {
<a class="jxr_linenumber" name="L1101" href="#L1101">1101</a>             fillBooleanArrayRandomlyWithFixedNumberTrueValues(b, nn, rng);
<a class="jxr_linenumber" name="L1102" href="#L1102">1102</a>             <strong class="jxr_keyword">long</strong> curD = 0l;
<a class="jxr_linenumber" name="L1103" href="#L1103">1103</a>             <strong class="jxr_keyword">for</strong>(<strong class="jxr_keyword">int</strong> j = 0; j &lt; b.length; ++j) {
<a class="jxr_linenumber" name="L1104" href="#L1104">1104</a>                 <strong class="jxr_keyword">if</strong> (b[j]) {
<a class="jxr_linenumber" name="L1105" href="#L1105">1105</a>                     curD += mm;
<a class="jxr_linenumber" name="L1106" href="#L1106">1106</a>                     <strong class="jxr_keyword">if</strong> (curD &gt;= d) {
<a class="jxr_linenumber" name="L1107" href="#L1107">1107</a>                         tail++;
<a class="jxr_linenumber" name="L1108" href="#L1108">1108</a>                         <strong class="jxr_keyword">break</strong>;
<a class="jxr_linenumber" name="L1109" href="#L1109">1109</a>                     }
<a class="jxr_linenumber" name="L1110" href="#L1110">1110</a>                 } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L1111" href="#L1111">1111</a>                     curD -= nn;
<a class="jxr_linenumber" name="L1112" href="#L1112">1112</a>                     <strong class="jxr_keyword">if</strong> (curD &lt;= -d) {
<a class="jxr_linenumber" name="L1113" href="#L1113">1113</a>                         tail++;
<a class="jxr_linenumber" name="L1114" href="#L1114">1114</a>                         <strong class="jxr_keyword">break</strong>;
<a class="jxr_linenumber" name="L1115" href="#L1115">1115</a>                     }
<a class="jxr_linenumber" name="L1116" href="#L1116">1116</a>                 }
<a class="jxr_linenumber" name="L1117" href="#L1117">1117</a>             }
<a class="jxr_linenumber" name="L1118" href="#L1118">1118</a>         }
<a class="jxr_linenumber" name="L1119" href="#L1119">1119</a>         <strong class="jxr_keyword">return</strong> (<strong class="jxr_keyword">double</strong>) tail / iterations;
<a class="jxr_linenumber" name="L1120" href="#L1120">1120</a>     }
<a class="jxr_linenumber" name="L1121" href="#L1121">1121</a> 
<a class="jxr_linenumber" name="L1122" href="#L1122">1122</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L1123" href="#L1123">1123</a> <em class="jxr_javadoccomment">     * If there are no ties in the combined dataset formed from x and y, this</em>
<a class="jxr_linenumber" name="L1124" href="#L1124">1124</a> <em class="jxr_javadoccomment">     * method is a no-op.  If there are ties, a uniform random deviate in</em>
<a class="jxr_linenumber" name="L1125" href="#L1125">1125</a> <em class="jxr_javadoccomment">     * (-minDelta / 2, minDelta / 2) - {0} is added to each value in x and y, where</em>
<a class="jxr_linenumber" name="L1126" href="#L1126">1126</a> <em class="jxr_javadoccomment">     * minDelta is the minimum difference between unequal values in the combined</em>
<a class="jxr_linenumber" name="L1127" href="#L1127">1127</a> <em class="jxr_javadoccomment">     * sample.  A fixed seed is used to generate the jitter, so repeated activations</em>
<a class="jxr_linenumber" name="L1128" href="#L1128">1128</a> <em class="jxr_javadoccomment">     * with the same input arrays result in the same values.</em>
<a class="jxr_linenumber" name="L1129" href="#L1129">1129</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L1130" href="#L1130">1130</a> <em class="jxr_javadoccomment">     * NOTE: if there are ties in the data, this method overwrites the data in</em>
<a class="jxr_linenumber" name="L1131" href="#L1131">1131</a> <em class="jxr_javadoccomment">     * x and y with the jittered values.</em>
<a class="jxr_linenumber" name="L1132" href="#L1132">1132</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L1133" href="#L1133">1133</a> <em class="jxr_javadoccomment">     * @param x first sample</em>
<a class="jxr_linenumber" name="L1134" href="#L1134">1134</a> <em class="jxr_javadoccomment">     * @param y second sample</em>
<a class="jxr_linenumber" name="L1135" href="#L1135">1135</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L1136" href="#L1136">1136</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">void</strong> fixTies(<strong class="jxr_keyword">double</strong>[] x, <strong class="jxr_keyword">double</strong>[] y) {
<a class="jxr_linenumber" name="L1137" href="#L1137">1137</a>        <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] values = MathArrays.unique(MathArrays.concatenate(x,y));
<a class="jxr_linenumber" name="L1138" href="#L1138">1138</a>        <strong class="jxr_keyword">if</strong> (values.length == x.length + y.length) {
<a class="jxr_linenumber" name="L1139" href="#L1139">1139</a>            <strong class="jxr_keyword">return</strong>;  <em class="jxr_comment">// There are no ties</em>
<a class="jxr_linenumber" name="L1140" href="#L1140">1140</a>        }
<a class="jxr_linenumber" name="L1141" href="#L1141">1141</a> 
<a class="jxr_linenumber" name="L1142" href="#L1142">1142</a>        <em class="jxr_comment">// Find the smallest difference between values, or 1 if all values are the same</em>
<a class="jxr_linenumber" name="L1143" href="#L1143">1143</a>        <strong class="jxr_keyword">double</strong> minDelta = 1;
<a class="jxr_linenumber" name="L1144" href="#L1144">1144</a>        <strong class="jxr_keyword">double</strong> prev = values[0];
<a class="jxr_linenumber" name="L1145" href="#L1145">1145</a>        <strong class="jxr_keyword">double</strong> delta = 1;
<a class="jxr_linenumber" name="L1146" href="#L1146">1146</a>        <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 1; i &lt; values.length; i++) {
<a class="jxr_linenumber" name="L1147" href="#L1147">1147</a>           delta = prev - values[i];
<a class="jxr_linenumber" name="L1148" href="#L1148">1148</a>           <strong class="jxr_keyword">if</strong> (delta &lt; minDelta) {
<a class="jxr_linenumber" name="L1149" href="#L1149">1149</a>               minDelta = delta;
<a class="jxr_linenumber" name="L1150" href="#L1150">1150</a>           }
<a class="jxr_linenumber" name="L1151" href="#L1151">1151</a>           prev = values[i];
<a class="jxr_linenumber" name="L1152" href="#L1152">1152</a>        }
<a class="jxr_linenumber" name="L1153" href="#L1153">1153</a>        minDelta /= 2;
<a class="jxr_linenumber" name="L1154" href="#L1154">1154</a> 
<a class="jxr_linenumber" name="L1155" href="#L1155">1155</a>        <em class="jxr_comment">// Add jitter using a fixed seed (so same arguments always give same results),</em>
<a class="jxr_linenumber" name="L1156" href="#L1156">1156</a>        <em class="jxr_comment">// low-initialization-overhead generator</em>
<a class="jxr_linenumber" name="L1157" href="#L1157">1157</a>        <strong class="jxr_keyword">final</strong> <a href="../../../../../../org/apache/commons/math3/distribution/RealDistribution.html">RealDistribution</a> dist =
<a class="jxr_linenumber" name="L1158" href="#L1158">1158</a>                <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/distribution/UniformRealDistribution.html">UniformRealDistribution</a>(<strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/random/JDKRandomGenerator.html">JDKRandomGenerator</a>(100), -minDelta, minDelta);
<a class="jxr_linenumber" name="L1159" href="#L1159">1159</a> 
<a class="jxr_linenumber" name="L1160" href="#L1160">1160</a>        <em class="jxr_comment">// It is theoretically possible that jitter does not break ties, so repeat</em>
<a class="jxr_linenumber" name="L1161" href="#L1161">1161</a>        <em class="jxr_comment">// until all ties are gone.  Bound the loop and throw MIE if bound is exceeded.</em>
<a class="jxr_linenumber" name="L1162" href="#L1162">1162</a>        <strong class="jxr_keyword">int</strong> ct = 0;
<a class="jxr_linenumber" name="L1163" href="#L1163">1163</a>        <strong class="jxr_keyword">boolean</strong> ties = <strong class="jxr_keyword">true</strong>;
<a class="jxr_linenumber" name="L1164" href="#L1164">1164</a>        <strong class="jxr_keyword">do</strong> {
<a class="jxr_linenumber" name="L1165" href="#L1165">1165</a>            jitter(x, dist);
<a class="jxr_linenumber" name="L1166" href="#L1166">1166</a>            jitter(y, dist);
<a class="jxr_linenumber" name="L1167" href="#L1167">1167</a>            ties = hasTies(x, y);
<a class="jxr_linenumber" name="L1168" href="#L1168">1168</a>            ct++;
<a class="jxr_linenumber" name="L1169" href="#L1169">1169</a>        } <strong class="jxr_keyword">while</strong> (ties &amp;&amp; ct &lt; 1000);
<a class="jxr_linenumber" name="L1170" href="#L1170">1170</a>        <strong class="jxr_keyword">if</strong> (ties) {
<a class="jxr_linenumber" name="L1171" href="#L1171">1171</a>            <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/exception/MathInternalError.html">MathInternalError</a>(); <em class="jxr_comment">// Should never happen</em>
<a class="jxr_linenumber" name="L1172" href="#L1172">1172</a>        }
<a class="jxr_linenumber" name="L1173" href="#L1173">1173</a>     }
<a class="jxr_linenumber" name="L1174" href="#L1174">1174</a> 
<a class="jxr_linenumber" name="L1175" href="#L1175">1175</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L1176" href="#L1176">1176</a> <em class="jxr_javadoccomment">     * Returns true iff there are ties in the combined sample</em>
<a class="jxr_linenumber" name="L1177" href="#L1177">1177</a> <em class="jxr_javadoccomment">     * formed from x and y.</em>
<a class="jxr_linenumber" name="L1178" href="#L1178">1178</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L1179" href="#L1179">1179</a> <em class="jxr_javadoccomment">     * @param x first sample</em>
<a class="jxr_linenumber" name="L1180" href="#L1180">1180</a> <em class="jxr_javadoccomment">     * @param y second sample</em>
<a class="jxr_linenumber" name="L1181" href="#L1181">1181</a> <em class="jxr_javadoccomment">     * @return true if x and y together contain ties</em>
<a class="jxr_linenumber" name="L1182" href="#L1182">1182</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L1183" href="#L1183">1183</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">boolean</strong> hasTies(<strong class="jxr_keyword">double</strong>[] x, <strong class="jxr_keyword">double</strong>[] y) {
<a class="jxr_linenumber" name="L1184" href="#L1184">1184</a>         <strong class="jxr_keyword">final</strong> HashSet&lt;Double&gt; values = <strong class="jxr_keyword">new</strong> HashSet&lt;Double&gt;();
<a class="jxr_linenumber" name="L1185" href="#L1185">1185</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; x.length; i++) {
<a class="jxr_linenumber" name="L1186" href="#L1186">1186</a>                 <strong class="jxr_keyword">if</strong> (!values.add(x[i])) {
<a class="jxr_linenumber" name="L1187" href="#L1187">1187</a>                     <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">true</strong>;
<a class="jxr_linenumber" name="L1188" href="#L1188">1188</a>                 }
<a class="jxr_linenumber" name="L1189" href="#L1189">1189</a>             }
<a class="jxr_linenumber" name="L1190" href="#L1190">1190</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; y.length; i++) {
<a class="jxr_linenumber" name="L1191" href="#L1191">1191</a>                 <strong class="jxr_keyword">if</strong> (!values.add(y[i])) {
<a class="jxr_linenumber" name="L1192" href="#L1192">1192</a>                     <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">true</strong>;
<a class="jxr_linenumber" name="L1193" href="#L1193">1193</a>                 }
<a class="jxr_linenumber" name="L1194" href="#L1194">1194</a>             }
<a class="jxr_linenumber" name="L1195" href="#L1195">1195</a>         <strong class="jxr_keyword">return</strong> false;
<a class="jxr_linenumber" name="L1196" href="#L1196">1196</a>     }
<a class="jxr_linenumber" name="L1197" href="#L1197">1197</a> 
<a class="jxr_linenumber" name="L1198" href="#L1198">1198</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L1199" href="#L1199">1199</a> <em class="jxr_javadoccomment">     * Adds random jitter to {@code data} using deviates sampled from {@code dist}.</em>
<a class="jxr_linenumber" name="L1200" href="#L1200">1200</a> <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L1201" href="#L1201">1201</a> <em class="jxr_javadoccomment">     * Note that jitter is applied in-place - i.e., the array</em>
<a class="jxr_linenumber" name="L1202" href="#L1202">1202</a> <em class="jxr_javadoccomment">     * values are overwritten with the result of applying jitter.&lt;/p&gt;</em>
<a class="jxr_linenumber" name="L1203" href="#L1203">1203</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L1204" href="#L1204">1204</a> <em class="jxr_javadoccomment">     * @param data input/output data array - entries overwritten by the method</em>
<a class="jxr_linenumber" name="L1205" href="#L1205">1205</a> <em class="jxr_javadoccomment">     * @param dist probability distribution to sample for jitter values</em>
<a class="jxr_linenumber" name="L1206" href="#L1206">1206</a> <em class="jxr_javadoccomment">     * @throws NullPointerException if either of the parameters is null</em>
<a class="jxr_linenumber" name="L1207" href="#L1207">1207</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L1208" href="#L1208">1208</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">void</strong> jitter(<strong class="jxr_keyword">double</strong>[] data, <a href="../../../../../../org/apache/commons/math3/distribution/RealDistribution.html">RealDistribution</a> dist) {
<a class="jxr_linenumber" name="L1209" href="#L1209">1209</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; data.length; i++) {
<a class="jxr_linenumber" name="L1210" href="#L1210">1210</a>             data[i] += dist.sample();
<a class="jxr_linenumber" name="L1211" href="#L1211">1211</a>         }
<a class="jxr_linenumber" name="L1212" href="#L1212">1212</a>     }
<a class="jxr_linenumber" name="L1213" href="#L1213">1213</a> 
<a class="jxr_linenumber" name="L1214" href="#L1214">1214</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L1215" href="#L1215">1215</a> <em class="jxr_javadoccomment">     * The function C(i, j) defined in [4] (class javadoc), formula (5.5).</em>
<a class="jxr_linenumber" name="L1216" href="#L1216">1216</a> <em class="jxr_javadoccomment">     * defined to return 1 if |i/n - j/m| &lt;= c; 0 otherwise. Here c is scaled up</em>
<a class="jxr_linenumber" name="L1217" href="#L1217">1217</a> <em class="jxr_javadoccomment">     * and recoded as a long to avoid rounding errors in comparison tests, so what</em>
<a class="jxr_linenumber" name="L1218" href="#L1218">1218</a> <em class="jxr_javadoccomment">     * is actually tested is |im - jn| &lt;= cmn.</em>
<a class="jxr_linenumber" name="L1219" href="#L1219">1219</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L1220" href="#L1220">1220</a> <em class="jxr_javadoccomment">     * @param i first path parameter</em>
<a class="jxr_linenumber" name="L1221" href="#L1221">1221</a> <em class="jxr_javadoccomment">     * @param j second path paramter</em>
<a class="jxr_linenumber" name="L1222" href="#L1222">1222</a> <em class="jxr_javadoccomment">     * @param m first sample size</em>
<a class="jxr_linenumber" name="L1223" href="#L1223">1223</a> <em class="jxr_javadoccomment">     * @param n second sample size</em>
<a class="jxr_linenumber" name="L1224" href="#L1224">1224</a> <em class="jxr_javadoccomment">     * @param cmn integral D-statistic (see {@link #calculateIntegralD(double, int, int, boolean)})</em>
<a class="jxr_linenumber" name="L1225" href="#L1225">1225</a> <em class="jxr_javadoccomment">     * @param strict whether or not the null hypothesis uses strict inequality</em>
<a class="jxr_linenumber" name="L1226" href="#L1226">1226</a> <em class="jxr_javadoccomment">     * @return C(i,j) for given m, n, c</em>
<a class="jxr_linenumber" name="L1227" href="#L1227">1227</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L1228" href="#L1228">1228</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">int</strong> c(<strong class="jxr_keyword">int</strong> i, <strong class="jxr_keyword">int</strong> j, <strong class="jxr_keyword">int</strong> m, <strong class="jxr_keyword">int</strong> n, <strong class="jxr_keyword">long</strong> cmn, <strong class="jxr_keyword">boolean</strong> strict) {
<a class="jxr_linenumber" name="L1229" href="#L1229">1229</a>         <strong class="jxr_keyword">if</strong> (strict) {
<a class="jxr_linenumber" name="L1230" href="#L1230">1230</a>             <strong class="jxr_keyword">return</strong> FastMath.abs(i*(<strong class="jxr_keyword">long</strong>)n - j*(<strong class="jxr_keyword">long</strong>)m) &lt;= cmn ? 1 : 0;
<a class="jxr_linenumber" name="L1231" href="#L1231">1231</a>         }
<a class="jxr_linenumber" name="L1232" href="#L1232">1232</a>         <strong class="jxr_keyword">return</strong> FastMath.abs(i*(<strong class="jxr_keyword">long</strong>)n - j*(<strong class="jxr_keyword">long</strong>)m) &lt; cmn ? 1 : 0;
<a class="jxr_linenumber" name="L1233" href="#L1233">1233</a>     }
<a class="jxr_linenumber" name="L1234" href="#L1234">1234</a> 
<a class="jxr_linenumber" name="L1235" href="#L1235">1235</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L1236" href="#L1236">1236</a> <em class="jxr_javadoccomment">     * The function N(i, j) defined in [4] (class javadoc).</em>
<a class="jxr_linenumber" name="L1237" href="#L1237">1237</a> <em class="jxr_javadoccomment">     * Returns the number of paths over the lattice {(i,j) : 0 &lt;= i &lt;= n, 0 &lt;= j &lt;= m}</em>
<a class="jxr_linenumber" name="L1238" href="#L1238">1238</a> <em class="jxr_javadoccomment">     * from (0,0) to (i,j) satisfying C(h,k, m, n, c) = 1 for each (h,k) on the path.</em>
<a class="jxr_linenumber" name="L1239" href="#L1239">1239</a> <em class="jxr_javadoccomment">     * The return value is integral, but subject to overflow, so it is maintained and</em>
<a class="jxr_linenumber" name="L1240" href="#L1240">1240</a> <em class="jxr_javadoccomment">     * returned as a double.</em>
<a class="jxr_linenumber" name="L1241" href="#L1241">1241</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L1242" href="#L1242">1242</a> <em class="jxr_javadoccomment">     * @param i first path parameter</em>
<a class="jxr_linenumber" name="L1243" href="#L1243">1243</a> <em class="jxr_javadoccomment">     * @param j second path parameter</em>
<a class="jxr_linenumber" name="L1244" href="#L1244">1244</a> <em class="jxr_javadoccomment">     * @param m first sample size</em>
<a class="jxr_linenumber" name="L1245" href="#L1245">1245</a> <em class="jxr_javadoccomment">     * @param n second sample size</em>
<a class="jxr_linenumber" name="L1246" href="#L1246">1246</a> <em class="jxr_javadoccomment">     * @param cnm integral D-statistic (see {@link #calculateIntegralD(double, int, int, boolean)})</em>
<a class="jxr_linenumber" name="L1247" href="#L1247">1247</a> <em class="jxr_javadoccomment">     * @param strict whether or not the null hypothesis uses strict inequality</em>
<a class="jxr_linenumber" name="L1248" href="#L1248">1248</a> <em class="jxr_javadoccomment">     * @return number or paths to (i, j) from (0,0) representing D-values as large as c for given m, n</em>
<a class="jxr_linenumber" name="L1249" href="#L1249">1249</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L1250" href="#L1250">1250</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">double</strong> n(<strong class="jxr_keyword">int</strong> i, <strong class="jxr_keyword">int</strong> j, <strong class="jxr_keyword">int</strong> m, <strong class="jxr_keyword">int</strong> n, <strong class="jxr_keyword">long</strong> cnm, <strong class="jxr_keyword">boolean</strong> strict) {
<a class="jxr_linenumber" name="L1251" href="#L1251">1251</a>         <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L1252" href="#L1252">1252</a> <em class="jxr_comment">         * Unwind the recursive definition given in [4].</em>
<a class="jxr_linenumber" name="L1253" href="#L1253">1253</a> <em class="jxr_comment">         * Compute n(1,1), n(1,2)...n(2,1), n(2,2)... up to n(i,j), one row at a time.</em>
<a class="jxr_linenumber" name="L1254" href="#L1254">1254</a> <em class="jxr_comment">         * When n(i,*) are being computed, lag[] holds the values of n(i - 1, *).</em>
<a class="jxr_linenumber" name="L1255" href="#L1255">1255</a> <em class="jxr_comment">         */</em>
<a class="jxr_linenumber" name="L1256" href="#L1256">1256</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] lag = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[n];
<a class="jxr_linenumber" name="L1257" href="#L1257">1257</a>         <strong class="jxr_keyword">double</strong> last = 0;
<a class="jxr_linenumber" name="L1258" href="#L1258">1258</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> k = 0; k &lt; n; k++) {
<a class="jxr_linenumber" name="L1259" href="#L1259">1259</a>             lag[k] = c(0, k + 1, m, n, cnm, strict);
<a class="jxr_linenumber" name="L1260" href="#L1260">1260</a>         }
<a class="jxr_linenumber" name="L1261" href="#L1261">1261</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> k = 1; k &lt;= i; k++) {
<a class="jxr_linenumber" name="L1262" href="#L1262">1262</a>             last = c(k, 0, m, n, cnm, strict);
<a class="jxr_linenumber" name="L1263" href="#L1263">1263</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> l = 1; l &lt;= j; l++) {
<a class="jxr_linenumber" name="L1264" href="#L1264">1264</a>                 lag[l - 1] = c(k, l, m, n, cnm, strict) * (last + lag[l - 1]);
<a class="jxr_linenumber" name="L1265" href="#L1265">1265</a>                 last = lag[l - 1];
<a class="jxr_linenumber" name="L1266" href="#L1266">1266</a>             }
<a class="jxr_linenumber" name="L1267" href="#L1267">1267</a>         }
<a class="jxr_linenumber" name="L1268" href="#L1268">1268</a>         <strong class="jxr_keyword">return</strong> last;
<a class="jxr_linenumber" name="L1269" href="#L1269">1269</a>     }
<a class="jxr_linenumber" name="L1270" href="#L1270">1270</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2003&#x2013;2016 <a href="http://www.apache.org/">The Apache Software Foundation</a>. All rights reserved.</div>
</body>
</html>
