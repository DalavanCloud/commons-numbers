<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span>package org.apache.commons.math3.stat.descriptive;<a name="line.17"></a>
<span class="sourceLineNo">018</span><a name="line.18"></a>
<span class="sourceLineNo">019</span>import org.apache.commons.math3.TestUtils;<a name="line.19"></a>
<span class="sourceLineNo">020</span>import org.apache.commons.math3.stat.descriptive.moment.SecondMoment;<a name="line.20"></a>
<span class="sourceLineNo">021</span>import org.apache.commons.math3.util.FastMath;<a name="line.21"></a>
<span class="sourceLineNo">022</span>import org.junit.Assert;<a name="line.22"></a>
<span class="sourceLineNo">023</span>import org.junit.Test;<a name="line.23"></a>
<span class="sourceLineNo">024</span><a name="line.24"></a>
<span class="sourceLineNo">025</span>/**<a name="line.25"></a>
<span class="sourceLineNo">026</span> * Test cases for {@link StorelessUnivariateStatistic} classes.<a name="line.26"></a>
<span class="sourceLineNo">027</span> */<a name="line.27"></a>
<span class="sourceLineNo">028</span>public abstract class StorelessUnivariateStatisticAbstractTest<a name="line.28"></a>
<span class="sourceLineNo">029</span>    extends UnivariateStatisticAbstractTest {<a name="line.29"></a>
<span class="sourceLineNo">030</span><a name="line.30"></a>
<span class="sourceLineNo">031</span>    /** Small sample arrays */<a name="line.31"></a>
<span class="sourceLineNo">032</span>    protected double[][] smallSamples = {{}, {1}, {1,2}, {1,2,3}, {1,2,3,4}};<a name="line.32"></a>
<span class="sourceLineNo">033</span><a name="line.33"></a>
<span class="sourceLineNo">034</span>    /** Return a new instance of the statistic */<a name="line.34"></a>
<span class="sourceLineNo">035</span>    @Override<a name="line.35"></a>
<span class="sourceLineNo">036</span>    public abstract UnivariateStatistic getUnivariateStatistic();<a name="line.36"></a>
<span class="sourceLineNo">037</span><a name="line.37"></a>
<span class="sourceLineNo">038</span>    /**Expected value for  the testArray defined in UnivariateStatisticAbstractTest */<a name="line.38"></a>
<span class="sourceLineNo">039</span>    @Override<a name="line.39"></a>
<span class="sourceLineNo">040</span>    public abstract double expectedValue();<a name="line.40"></a>
<span class="sourceLineNo">041</span><a name="line.41"></a>
<span class="sourceLineNo">042</span>    /**<a name="line.42"></a>
<span class="sourceLineNo">043</span>     *  Verifies that increment() and incrementAll work properly.<a name="line.43"></a>
<span class="sourceLineNo">044</span>     */<a name="line.44"></a>
<span class="sourceLineNo">045</span>    @Test<a name="line.45"></a>
<span class="sourceLineNo">046</span>    public void testIncrementation() {<a name="line.46"></a>
<span class="sourceLineNo">047</span><a name="line.47"></a>
<span class="sourceLineNo">048</span>        StorelessUnivariateStatistic statistic =<a name="line.48"></a>
<span class="sourceLineNo">049</span>            (StorelessUnivariateStatistic) getUnivariateStatistic();<a name="line.49"></a>
<span class="sourceLineNo">050</span><a name="line.50"></a>
<span class="sourceLineNo">051</span>        // Add testArray one value at a time and check result<a name="line.51"></a>
<span class="sourceLineNo">052</span>        for (int i = 0; i &lt; testArray.length; i++) {<a name="line.52"></a>
<span class="sourceLineNo">053</span>            statistic.increment(testArray[i]);<a name="line.53"></a>
<span class="sourceLineNo">054</span>        }<a name="line.54"></a>
<span class="sourceLineNo">055</span><a name="line.55"></a>
<span class="sourceLineNo">056</span>        Assert.assertEquals(expectedValue(), statistic.getResult(), getTolerance());<a name="line.56"></a>
<span class="sourceLineNo">057</span>        Assert.assertEquals(testArray.length, statistic.getN());<a name="line.57"></a>
<span class="sourceLineNo">058</span><a name="line.58"></a>
<span class="sourceLineNo">059</span>        statistic.clear();<a name="line.59"></a>
<span class="sourceLineNo">060</span><a name="line.60"></a>
<span class="sourceLineNo">061</span>        // Add testArray all at once and check again<a name="line.61"></a>
<span class="sourceLineNo">062</span>        statistic.incrementAll(testArray);<a name="line.62"></a>
<span class="sourceLineNo">063</span>        Assert.assertEquals(expectedValue(), statistic.getResult(), getTolerance());<a name="line.63"></a>
<span class="sourceLineNo">064</span>        Assert.assertEquals(testArray.length, statistic.getN());<a name="line.64"></a>
<span class="sourceLineNo">065</span><a name="line.65"></a>
<span class="sourceLineNo">066</span>        statistic.clear();<a name="line.66"></a>
<span class="sourceLineNo">067</span><a name="line.67"></a>
<span class="sourceLineNo">068</span>        // Cleared<a name="line.68"></a>
<span class="sourceLineNo">069</span>        checkClearValue(statistic);<a name="line.69"></a>
<span class="sourceLineNo">070</span>        Assert.assertEquals(0, statistic.getN());<a name="line.70"></a>
<span class="sourceLineNo">071</span><a name="line.71"></a>
<span class="sourceLineNo">072</span>    }<a name="line.72"></a>
<span class="sourceLineNo">073</span><a name="line.73"></a>
<span class="sourceLineNo">074</span>    protected void checkClearValue(StorelessUnivariateStatistic statistic){<a name="line.74"></a>
<span class="sourceLineNo">075</span>        Assert.assertTrue(Double.isNaN(statistic.getResult()));<a name="line.75"></a>
<span class="sourceLineNo">076</span>    }<a name="line.76"></a>
<span class="sourceLineNo">077</span>    <a name="line.77"></a>
<span class="sourceLineNo">078</span>    @Test<a name="line.78"></a>
<span class="sourceLineNo">079</span>    public void testSerialization() {<a name="line.79"></a>
<span class="sourceLineNo">080</span><a name="line.80"></a>
<span class="sourceLineNo">081</span>        StorelessUnivariateStatistic statistic =<a name="line.81"></a>
<span class="sourceLineNo">082</span>            (StorelessUnivariateStatistic) getUnivariateStatistic();<a name="line.82"></a>
<span class="sourceLineNo">083</span><a name="line.83"></a>
<span class="sourceLineNo">084</span>        TestUtils.checkSerializedEquality(statistic);<a name="line.84"></a>
<span class="sourceLineNo">085</span><a name="line.85"></a>
<span class="sourceLineNo">086</span>        statistic.clear();<a name="line.86"></a>
<span class="sourceLineNo">087</span><a name="line.87"></a>
<span class="sourceLineNo">088</span>        for (int i = 0; i &lt; testArray.length; i++) {<a name="line.88"></a>
<span class="sourceLineNo">089</span>            statistic.increment(testArray[i]);<a name="line.89"></a>
<span class="sourceLineNo">090</span>            if(i % 5 == 0)<a name="line.90"></a>
<span class="sourceLineNo">091</span>                statistic = (StorelessUnivariateStatistic)TestUtils.serializeAndRecover(statistic);<a name="line.91"></a>
<span class="sourceLineNo">092</span>        }<a name="line.92"></a>
<span class="sourceLineNo">093</span><a name="line.93"></a>
<span class="sourceLineNo">094</span>        TestUtils.checkSerializedEquality(statistic);<a name="line.94"></a>
<span class="sourceLineNo">095</span><a name="line.95"></a>
<span class="sourceLineNo">096</span>        Assert.assertEquals(expectedValue(), statistic.getResult(), getTolerance());<a name="line.96"></a>
<span class="sourceLineNo">097</span><a name="line.97"></a>
<span class="sourceLineNo">098</span>        statistic.clear();<a name="line.98"></a>
<span class="sourceLineNo">099</span><a name="line.99"></a>
<span class="sourceLineNo">100</span>        checkClearValue(statistic);<a name="line.100"></a>
<span class="sourceLineNo">101</span><a name="line.101"></a>
<span class="sourceLineNo">102</span>    }<a name="line.102"></a>
<span class="sourceLineNo">103</span><a name="line.103"></a>
<span class="sourceLineNo">104</span>    @Test<a name="line.104"></a>
<span class="sourceLineNo">105</span>    public void testEqualsAndHashCode() {<a name="line.105"></a>
<span class="sourceLineNo">106</span>        StorelessUnivariateStatistic statistic =<a name="line.106"></a>
<span class="sourceLineNo">107</span>            (StorelessUnivariateStatistic) getUnivariateStatistic();<a name="line.107"></a>
<span class="sourceLineNo">108</span>        StorelessUnivariateStatistic statistic2 = null;<a name="line.108"></a>
<span class="sourceLineNo">109</span><a name="line.109"></a>
<span class="sourceLineNo">110</span>        Assert.assertTrue("non-null, compared to null", !statistic.equals(statistic2));<a name="line.110"></a>
<span class="sourceLineNo">111</span>        Assert.assertTrue("reflexive, non-null", statistic.equals(statistic));<a name="line.111"></a>
<span class="sourceLineNo">112</span><a name="line.112"></a>
<span class="sourceLineNo">113</span>        int emptyHash = statistic.hashCode();<a name="line.113"></a>
<span class="sourceLineNo">114</span>        statistic2 = (StorelessUnivariateStatistic) getUnivariateStatistic();<a name="line.114"></a>
<span class="sourceLineNo">115</span>        Assert.assertTrue("empty stats should be equal", statistic.equals(statistic2));<a name="line.115"></a>
<span class="sourceLineNo">116</span>        Assert.assertEquals("empty stats should have the same hashcode",<a name="line.116"></a>
<span class="sourceLineNo">117</span>                emptyHash, statistic2.hashCode());<a name="line.117"></a>
<span class="sourceLineNo">118</span><a name="line.118"></a>
<span class="sourceLineNo">119</span>        statistic.increment(1d);<a name="line.119"></a>
<span class="sourceLineNo">120</span>        Assert.assertTrue("reflexive, non-empty", statistic.equals(statistic));<a name="line.120"></a>
<span class="sourceLineNo">121</span>        Assert.assertTrue("non-empty, compared to empty", !statistic.equals(statistic2));<a name="line.121"></a>
<span class="sourceLineNo">122</span>        Assert.assertTrue("non-empty, compared to empty", !statistic2.equals(statistic));<a name="line.122"></a>
<span class="sourceLineNo">123</span>        Assert.assertTrue("non-empty stat should have different hashcode from empty stat",<a name="line.123"></a>
<span class="sourceLineNo">124</span>                statistic.hashCode() != emptyHash);<a name="line.124"></a>
<span class="sourceLineNo">125</span><a name="line.125"></a>
<span class="sourceLineNo">126</span>        statistic2.increment(1d);<a name="line.126"></a>
<span class="sourceLineNo">127</span>        Assert.assertTrue("stats with same data should be equal", statistic.equals(statistic2));<a name="line.127"></a>
<span class="sourceLineNo">128</span>        Assert.assertEquals("stats with same data should have the same hashcode",<a name="line.128"></a>
<span class="sourceLineNo">129</span>                statistic.hashCode(), statistic2.hashCode());<a name="line.129"></a>
<span class="sourceLineNo">130</span><a name="line.130"></a>
<span class="sourceLineNo">131</span>        statistic.increment(Double.POSITIVE_INFINITY);<a name="line.131"></a>
<span class="sourceLineNo">132</span>        Assert.assertTrue("stats with different n's should not be equal", !statistic2.equals(statistic));<a name="line.132"></a>
<span class="sourceLineNo">133</span>        Assert.assertTrue("stats with different n's should have different hashcodes",<a name="line.133"></a>
<span class="sourceLineNo">134</span>                statistic.hashCode() != statistic2.hashCode());<a name="line.134"></a>
<span class="sourceLineNo">135</span><a name="line.135"></a>
<span class="sourceLineNo">136</span>        statistic2.increment(Double.POSITIVE_INFINITY);<a name="line.136"></a>
<span class="sourceLineNo">137</span>        Assert.assertTrue("stats with same data should be equal", statistic.equals(statistic2));<a name="line.137"></a>
<span class="sourceLineNo">138</span>        Assert.assertEquals("stats with same data should have the same hashcode",<a name="line.138"></a>
<span class="sourceLineNo">139</span>                statistic.hashCode(), statistic2.hashCode());<a name="line.139"></a>
<span class="sourceLineNo">140</span><a name="line.140"></a>
<span class="sourceLineNo">141</span>        statistic.clear();<a name="line.141"></a>
<span class="sourceLineNo">142</span>        statistic2.clear();<a name="line.142"></a>
<span class="sourceLineNo">143</span>        Assert.assertTrue("cleared stats should be equal", statistic.equals(statistic2));<a name="line.143"></a>
<span class="sourceLineNo">144</span>        Assert.assertEquals("cleared stats should have thashcode of empty stat",<a name="line.144"></a>
<span class="sourceLineNo">145</span>                emptyHash, statistic2.hashCode());<a name="line.145"></a>
<span class="sourceLineNo">146</span>        Assert.assertEquals("cleared stats should have thashcode of empty stat",<a name="line.146"></a>
<span class="sourceLineNo">147</span>                emptyHash, statistic.hashCode());<a name="line.147"></a>
<span class="sourceLineNo">148</span><a name="line.148"></a>
<span class="sourceLineNo">149</span>    }<a name="line.149"></a>
<span class="sourceLineNo">150</span><a name="line.150"></a>
<span class="sourceLineNo">151</span>    @Test<a name="line.151"></a>
<span class="sourceLineNo">152</span>    public void testMomentSmallSamples() {<a name="line.152"></a>
<span class="sourceLineNo">153</span>        UnivariateStatistic stat = getUnivariateStatistic();<a name="line.153"></a>
<span class="sourceLineNo">154</span>        if (stat instanceof SecondMoment) {<a name="line.154"></a>
<span class="sourceLineNo">155</span>            SecondMoment moment = (SecondMoment) getUnivariateStatistic();<a name="line.155"></a>
<span class="sourceLineNo">156</span>            Assert.assertTrue(Double.isNaN(moment.getResult()));<a name="line.156"></a>
<span class="sourceLineNo">157</span>            moment.increment(1d);<a name="line.157"></a>
<span class="sourceLineNo">158</span>            Assert.assertEquals(0d, moment.getResult(), 0);<a name="line.158"></a>
<span class="sourceLineNo">159</span>        }<a name="line.159"></a>
<span class="sourceLineNo">160</span>    }<a name="line.160"></a>
<span class="sourceLineNo">161</span><a name="line.161"></a>
<span class="sourceLineNo">162</span>    /**<a name="line.162"></a>
<span class="sourceLineNo">163</span>     * Make sure that evaluate(double[]) and inrementAll(double[]),<a name="line.163"></a>
<span class="sourceLineNo">164</span>     * getResult() give same results.<a name="line.164"></a>
<span class="sourceLineNo">165</span>     */<a name="line.165"></a>
<span class="sourceLineNo">166</span>    @Test<a name="line.166"></a>
<span class="sourceLineNo">167</span>    public void testConsistency() {<a name="line.167"></a>
<span class="sourceLineNo">168</span>        StorelessUnivariateStatistic stat = (StorelessUnivariateStatistic) getUnivariateStatistic();<a name="line.168"></a>
<span class="sourceLineNo">169</span>        stat.incrementAll(testArray);<a name="line.169"></a>
<span class="sourceLineNo">170</span>        Assert.assertEquals(stat.getResult(), stat.evaluate(testArray), getTolerance());<a name="line.170"></a>
<span class="sourceLineNo">171</span>        for (int i = 0; i &lt; smallSamples.length; i++) {<a name="line.171"></a>
<span class="sourceLineNo">172</span>            stat.clear();<a name="line.172"></a>
<span class="sourceLineNo">173</span>            for (int j =0; j &lt; smallSamples[i].length; j++) {<a name="line.173"></a>
<span class="sourceLineNo">174</span>                stat.increment(smallSamples[i][j]);<a name="line.174"></a>
<span class="sourceLineNo">175</span>            }<a name="line.175"></a>
<span class="sourceLineNo">176</span>            TestUtils.assertEquals(stat.getResult(), stat.evaluate(smallSamples[i]), getTolerance());<a name="line.176"></a>
<span class="sourceLineNo">177</span>        }<a name="line.177"></a>
<span class="sourceLineNo">178</span>    }<a name="line.178"></a>
<span class="sourceLineNo">179</span><a name="line.179"></a>
<span class="sourceLineNo">180</span>    /**<a name="line.180"></a>
<span class="sourceLineNo">181</span>     * Verifies that copied statistics remain equal to originals when<a name="line.181"></a>
<span class="sourceLineNo">182</span>     * incremented the same way.<a name="line.182"></a>
<span class="sourceLineNo">183</span>     *<a name="line.183"></a>
<span class="sourceLineNo">184</span>     */<a name="line.184"></a>
<span class="sourceLineNo">185</span>    @Test<a name="line.185"></a>
<span class="sourceLineNo">186</span>    public void testCopyConsistency() {<a name="line.186"></a>
<span class="sourceLineNo">187</span><a name="line.187"></a>
<span class="sourceLineNo">188</span>        StorelessUnivariateStatistic master =<a name="line.188"></a>
<span class="sourceLineNo">189</span>            (StorelessUnivariateStatistic) getUnivariateStatistic();<a name="line.189"></a>
<span class="sourceLineNo">190</span><a name="line.190"></a>
<span class="sourceLineNo">191</span>        StorelessUnivariateStatistic replica = null;<a name="line.191"></a>
<span class="sourceLineNo">192</span><a name="line.192"></a>
<span class="sourceLineNo">193</span>        // Randomly select a portion of testArray to load first<a name="line.193"></a>
<span class="sourceLineNo">194</span>        long index = FastMath.round((FastMath.random()) * testArray.length);<a name="line.194"></a>
<span class="sourceLineNo">195</span><a name="line.195"></a>
<span class="sourceLineNo">196</span>        // Put first half in master and copy master to replica<a name="line.196"></a>
<span class="sourceLineNo">197</span>        master.incrementAll(testArray, 0, (int) index);<a name="line.197"></a>
<span class="sourceLineNo">198</span>        replica = master.copy();<a name="line.198"></a>
<span class="sourceLineNo">199</span><a name="line.199"></a>
<span class="sourceLineNo">200</span>        // Check same<a name="line.200"></a>
<span class="sourceLineNo">201</span>        Assert.assertTrue(replica.equals(master));<a name="line.201"></a>
<span class="sourceLineNo">202</span>        Assert.assertTrue(master.equals(replica));<a name="line.202"></a>
<span class="sourceLineNo">203</span><a name="line.203"></a>
<span class="sourceLineNo">204</span>        // Now add second part to both and check again<a name="line.204"></a>
<span class="sourceLineNo">205</span>        master.incrementAll(testArray,<a name="line.205"></a>
<span class="sourceLineNo">206</span>                (int) index, (int) (testArray.length - index));<a name="line.206"></a>
<span class="sourceLineNo">207</span>        replica.incrementAll(testArray,<a name="line.207"></a>
<span class="sourceLineNo">208</span>                (int) index, (int) (testArray.length - index));<a name="line.208"></a>
<span class="sourceLineNo">209</span>        Assert.assertTrue(replica.equals(master));<a name="line.209"></a>
<span class="sourceLineNo">210</span>        Assert.assertTrue(master.equals(replica));<a name="line.210"></a>
<span class="sourceLineNo">211</span>    }<a name="line.211"></a>
<span class="sourceLineNo">212</span><a name="line.212"></a>
<span class="sourceLineNo">213</span>    @Test<a name="line.213"></a>
<span class="sourceLineNo">214</span>    public void testSerial() {<a name="line.214"></a>
<span class="sourceLineNo">215</span>        StorelessUnivariateStatistic s =<a name="line.215"></a>
<span class="sourceLineNo">216</span>            (StorelessUnivariateStatistic) getUnivariateStatistic();<a name="line.216"></a>
<span class="sourceLineNo">217</span>        Assert.assertEquals(s, TestUtils.serializeAndRecover(s));<a name="line.217"></a>
<span class="sourceLineNo">218</span>    }<a name="line.218"></a>
<span class="sourceLineNo">219</span>}<a name="line.219"></a>




























































</pre>
</div>
</body>
</html>
