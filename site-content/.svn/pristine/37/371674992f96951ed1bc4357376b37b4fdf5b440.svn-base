<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>AbstractLeastSquaresOptimizerAbstractTest xref</title>
<link type="text/css" rel="stylesheet" href="../../../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../testapidocs/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Licensed to the Apache Software Foundation (ASF) under one or more</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> * contributor license agreements.  See the NOTICE file distributed with</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * this work for additional information regarding copyright ownership.</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * The ASF licenses this file to You under the Apache License, Version 2.0</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * (the "License"); you may not use this file except in compliance with</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> * the License.  You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *      <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">package</strong> org.apache.commons.math3.fitting.leastsquares;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.analysis.MultivariateMatrixFunction;
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.analysis.MultivariateVectorFunction;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.ConvergenceException;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.DimensionMismatchException;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.fitting.leastsquares.LeastSquaresOptimizer.Optimum;
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem.Evaluation;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.linear.Array2DRowRealMatrix;
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.linear.ArrayRealVector;
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.linear.BlockRealMatrix;
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.linear.DiagonalMatrix;
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.linear.RealMatrix;
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.linear.RealVector;
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.optim.ConvergenceChecker;
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.optim.SimpleVectorValueChecker;
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.util.FastMath;
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.util.Pair;
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  <strong class="jxr_keyword">import</strong> org.junit.Assert;
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  <strong class="jxr_keyword">import</strong> org.junit.Test;
<a class="jxr_linenumber" name="L38" href="#L38">38</a>  
<a class="jxr_linenumber" name="L39" href="#L39">39</a>  <strong class="jxr_keyword">import</strong> java.io.IOException;
<a class="jxr_linenumber" name="L40" href="#L40">40</a>  <strong class="jxr_keyword">import</strong> java.util.Arrays;
<a class="jxr_linenumber" name="L41" href="#L41">41</a>  
<a class="jxr_linenumber" name="L42" href="#L42">42</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> org.hamcrest.CoreMatchers.is;
<a class="jxr_linenumber" name="L43" href="#L43">43</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> org.hamcrest.CoreMatchers.not;
<a class="jxr_linenumber" name="L44" href="#L44">44</a>  <strong class="jxr_keyword">import</strong> <strong class="jxr_keyword">static</strong> org.hamcrest.CoreMatchers.sameInstance;
<a class="jxr_linenumber" name="L45" href="#L45">45</a>  
<a class="jxr_linenumber" name="L46" href="#L46">46</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L47" href="#L47">47</a>  <em class="jxr_javadoccomment"> * Some of the unit tests are re-implementations of the MINPACK &lt;a</em>
<a class="jxr_linenumber" name="L48" href="#L48">48</a>  <em class="jxr_javadoccomment"> * href="<a href="http://www.netlib.org/minpack/ex/file17" target="alexandria_uri">http://www.netlib.org/minpack/ex/file17</a>"&gt;file17&lt;/a&gt; and &lt;a</em>
<a class="jxr_linenumber" name="L49" href="#L49">49</a>  <em class="jxr_javadoccomment"> * href="<a href="http://www.netlib.org/minpack/ex/file22" target="alexandria_uri">http://www.netlib.org/minpack/ex/file22</a>"&gt;file22&lt;/a&gt; test files. The</em>
<a class="jxr_linenumber" name="L50" href="#L50">50</a>  <em class="jxr_javadoccomment"> * redistribution policy for MINPACK is available &lt;a href="<a href="http://www.netlib.org/minpack/disclaimer" target="alexandria_uri">http://www.netlib.org/minpack/disclaimer</a>"&gt;here&lt;/a&gt;.</em>
<a class="jxr_linenumber" name="L51" href="#L51">51</a>  <em class="jxr_javadoccomment"> * &lt;p/&gt;</em>
<a class="jxr_linenumber" name="L52" href="#L52">52</a>  <em class="jxr_javadoccomment"> * &lt;T&gt; Concrete implementation of an optimizer.</em>
<a class="jxr_linenumber" name="L53" href="#L53">53</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L54" href="#L54">54</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L55" href="#L55">55</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">abstract</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../../org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.html">AbstractLeastSquaresOptimizerAbstractTest</a> {
<a class="jxr_linenumber" name="L56" href="#L56">56</a>  
<a class="jxr_linenumber" name="L57" href="#L57">57</a>      <em class="jxr_javadoccomment">/** default absolute tolerance of comparisons */</em>
<a class="jxr_linenumber" name="L58" href="#L58">58</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> TOl = 1e-10;
<a class="jxr_linenumber" name="L59" href="#L59">59</a>  
<a class="jxr_linenumber" name="L60" href="#L60">60</a>      <strong class="jxr_keyword">public</strong> LeastSquaresBuilder base() {
<a class="jxr_linenumber" name="L61" href="#L61">61</a>          <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> LeastSquaresBuilder()
<a class="jxr_linenumber" name="L62" href="#L62">62</a>                  .checkerPair(<strong class="jxr_keyword">new</strong> SimpleVectorValueChecker(1e-6, 1e-6))
<a class="jxr_linenumber" name="L63" href="#L63">63</a>                  .maxEvaluations(100)
<a class="jxr_linenumber" name="L64" href="#L64">64</a>                  .maxIterations(getMaxIterations());
<a class="jxr_linenumber" name="L65" href="#L65">65</a>      }
<a class="jxr_linenumber" name="L66" href="#L66">66</a>  
<a class="jxr_linenumber" name="L67" href="#L67">67</a>      <strong class="jxr_keyword">public</strong> LeastSquaresBuilder builder(<a href="../../../../../../org/apache/commons/math3/fitting/leastsquares/CircleVectorial.html">CircleVectorial</a> c) {
<a class="jxr_linenumber" name="L68" href="#L68">68</a>          <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] weights = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[c.getN()];
<a class="jxr_linenumber" name="L69" href="#L69">69</a>          Arrays.fill(weights, 1.0);
<a class="jxr_linenumber" name="L70" href="#L70">70</a>          <strong class="jxr_keyword">return</strong> base()
<a class="jxr_linenumber" name="L71" href="#L71">71</a>                  .model(c.getModelFunction(), c.getModelFunctionJacobian())
<a class="jxr_linenumber" name="L72" href="#L72">72</a>                  .target(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[c.getN()])
<a class="jxr_linenumber" name="L73" href="#L73">73</a>                  .weight(<strong class="jxr_keyword">new</strong> DiagonalMatrix(weights));
<a class="jxr_linenumber" name="L74" href="#L74">74</a>      }
<a class="jxr_linenumber" name="L75" href="#L75">75</a>  
<a class="jxr_linenumber" name="L76" href="#L76">76</a>      <strong class="jxr_keyword">public</strong> LeastSquaresBuilder builder(<a href="../../../../../../org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.html">StatisticalReferenceDataset</a> dataset) {
<a class="jxr_linenumber" name="L77" href="#L77">77</a>          StatisticalReferenceDataset.LeastSquaresProblem problem
<a class="jxr_linenumber" name="L78" href="#L78">78</a>                  = dataset.getLeastSquaresProblem();
<a class="jxr_linenumber" name="L79" href="#L79">79</a>          <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] weights = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[dataset.getNumObservations()];
<a class="jxr_linenumber" name="L80" href="#L80">80</a>          Arrays.fill(weights, 1.0);
<a class="jxr_linenumber" name="L81" href="#L81">81</a>          <strong class="jxr_keyword">return</strong> base()
<a class="jxr_linenumber" name="L82" href="#L82">82</a>                  .model(problem.getModelFunction(), problem.getModelFunctionJacobian())
<a class="jxr_linenumber" name="L83" href="#L83">83</a>                  .target(dataset.getData()[1])
<a class="jxr_linenumber" name="L84" href="#L84">84</a>                  .weight(<strong class="jxr_keyword">new</strong> DiagonalMatrix(weights))
<a class="jxr_linenumber" name="L85" href="#L85">85</a>                  .start(dataset.getStartingPoint(0));
<a class="jxr_linenumber" name="L86" href="#L86">86</a>      }
<a class="jxr_linenumber" name="L87" href="#L87">87</a>  
<a class="jxr_linenumber" name="L88" href="#L88">88</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> fail(LeastSquaresOptimizer optimizer) {
<a class="jxr_linenumber" name="L89" href="#L89">89</a>          Assert.fail(<span class="jxr_string">"Expected Exception from: "</span> + optimizer.toString());
<a class="jxr_linenumber" name="L90" href="#L90">90</a>      }
<a class="jxr_linenumber" name="L91" href="#L91">91</a>  
<a class="jxr_linenumber" name="L92" href="#L92">92</a>      <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L93" href="#L93">93</a>  <em class="jxr_javadoccomment">     * Check the value of a vector.</em>
<a class="jxr_linenumber" name="L94" href="#L94">94</a>  <em class="jxr_javadoccomment">     * @param tolerance the absolute tolerance of comparisons</em>
<a class="jxr_linenumber" name="L95" href="#L95">95</a>  <em class="jxr_javadoccomment">     * @param actual the vector to test</em>
<a class="jxr_linenumber" name="L96" href="#L96">96</a>  <em class="jxr_javadoccomment">     * @param expected the expected values</em>
<a class="jxr_linenumber" name="L97" href="#L97">97</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L98" href="#L98">98</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> assertEquals(<strong class="jxr_keyword">double</strong> tolerance, RealVector actual, <strong class="jxr_keyword">double</strong>... expected){
<a class="jxr_linenumber" name="L99" href="#L99">99</a>          <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; expected.length; i++) {
<a class="jxr_linenumber" name="L100" href="#L100">100</a>             Assert.assertEquals(expected[i], actual.getEntry(i), tolerance);
<a class="jxr_linenumber" name="L101" href="#L101">101</a>         }
<a class="jxr_linenumber" name="L102" href="#L102">102</a>         Assert.assertEquals(expected.length, actual.getDimension());
<a class="jxr_linenumber" name="L103" href="#L103">103</a>     }
<a class="jxr_linenumber" name="L104" href="#L104">104</a> 
<a class="jxr_linenumber" name="L105" href="#L105">105</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L106" href="#L106">106</a> <em class="jxr_javadoccomment">     * @return the default number of allowed iterations (which will be used when not</em>
<a class="jxr_linenumber" name="L107" href="#L107">107</a> <em class="jxr_javadoccomment">     *         specified otherwise).</em>
<a class="jxr_linenumber" name="L108" href="#L108">108</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L109" href="#L109">109</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">abstract</strong> <strong class="jxr_keyword">int</strong> getMaxIterations();
<a class="jxr_linenumber" name="L110" href="#L110">110</a> 
<a class="jxr_linenumber" name="L111" href="#L111">111</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L112" href="#L112">112</a> <em class="jxr_javadoccomment">     * Get an instance of the optimizer under test.</em>
<a class="jxr_linenumber" name="L113" href="#L113">113</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L114" href="#L114">114</a> <em class="jxr_javadoccomment">     * @return the subject under test.</em>
<a class="jxr_linenumber" name="L115" href="#L115">115</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L116" href="#L116">116</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">abstract</strong> LeastSquaresOptimizer getOptimizer();
<a class="jxr_linenumber" name="L117" href="#L117">117</a> 
<a class="jxr_linenumber" name="L118" href="#L118">118</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L119" href="#L119">119</a> <em class="jxr_javadoccomment">     * The subject under test.</em>
<a class="jxr_linenumber" name="L120" href="#L120">120</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L121" href="#L121">121</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">final</strong> LeastSquaresOptimizer optimizer = <strong class="jxr_keyword">this</strong>.getOptimizer();
<a class="jxr_linenumber" name="L122" href="#L122">122</a> 
<a class="jxr_linenumber" name="L123" href="#L123">123</a>     @Test
<a class="jxr_linenumber" name="L124" href="#L124">124</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testGetIterations() {
<a class="jxr_linenumber" name="L125" href="#L125">125</a>         <a href="../../../../../../org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.html">LeastSquaresProblem</a> lsp = base()
<a class="jxr_linenumber" name="L126" href="#L126">126</a>                 .target(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{1})
<a class="jxr_linenumber" name="L127" href="#L127">127</a>                 .weight(<strong class="jxr_keyword">new</strong> DiagonalMatrix(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{1}))
<a class="jxr_linenumber" name="L128" href="#L128">128</a>                 .start(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{3})
<a class="jxr_linenumber" name="L129" href="#L129">129</a>                 .model(<strong class="jxr_keyword">new</strong> MultivariateJacobianFunction() {
<a class="jxr_linenumber" name="L130" href="#L130">130</a>                     <strong class="jxr_keyword">public</strong> Pair&lt;RealVector, RealMatrix&gt; value(<strong class="jxr_keyword">final</strong> RealVector point) {
<a class="jxr_linenumber" name="L131" href="#L131">131</a>                         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> Pair&lt;RealVector, RealMatrix&gt;(
<a class="jxr_linenumber" name="L132" href="#L132">132</a>                                 <strong class="jxr_keyword">new</strong> ArrayRealVector(
<a class="jxr_linenumber" name="L133" href="#L133">133</a>                                         <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{
<a class="jxr_linenumber" name="L134" href="#L134">134</a>                                                 FastMath.pow(point.getEntry(0), 4)
<a class="jxr_linenumber" name="L135" href="#L135">135</a>                                         },
<a class="jxr_linenumber" name="L136" href="#L136">136</a>                                         false),
<a class="jxr_linenumber" name="L137" href="#L137">137</a>                                 <strong class="jxr_keyword">new</strong> Array2DRowRealMatrix(
<a class="jxr_linenumber" name="L138" href="#L138">138</a>                                         <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[][]{
<a class="jxr_linenumber" name="L139" href="#L139">139</a>                                                 {0.25 * FastMath.pow(point.getEntry(0), 3)}
<a class="jxr_linenumber" name="L140" href="#L140">140</a>                                         },
<a class="jxr_linenumber" name="L141" href="#L141">141</a>                                         false)
<a class="jxr_linenumber" name="L142" href="#L142">142</a>                         );
<a class="jxr_linenumber" name="L143" href="#L143">143</a>                     }
<a class="jxr_linenumber" name="L144" href="#L144">144</a>                 })
<a class="jxr_linenumber" name="L145" href="#L145">145</a>                 .build();
<a class="jxr_linenumber" name="L146" href="#L146">146</a> 
<a class="jxr_linenumber" name="L147" href="#L147">147</a>         Optimum optimum = optimizer.optimize(lsp);
<a class="jxr_linenumber" name="L148" href="#L148">148</a> 
<a class="jxr_linenumber" name="L149" href="#L149">149</a>         <em class="jxr_comment">//TODO more specific test? could pass with 'return 1;'</em>
<a class="jxr_linenumber" name="L150" href="#L150">150</a>         Assert.assertTrue(optimum.getIterations() &gt; 0);
<a class="jxr_linenumber" name="L151" href="#L151">151</a>     }
<a class="jxr_linenumber" name="L152" href="#L152">152</a> 
<a class="jxr_linenumber" name="L153" href="#L153">153</a>     @Test
<a class="jxr_linenumber" name="L154" href="#L154">154</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testTrivial() {
<a class="jxr_linenumber" name="L155" href="#L155">155</a>         <a href="../../../../../../org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.html">LinearProblem</a> problem
<a class="jxr_linenumber" name="L156" href="#L156">156</a>                 = <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.html">LinearProblem</a>(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[][]{{2}},
<a class="jxr_linenumber" name="L157" href="#L157">157</a>                 <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{3});
<a class="jxr_linenumber" name="L158" href="#L158">158</a>         <a href="../../../../../../org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.html">LeastSquaresProblem</a> ls = problem.getBuilder().build();
<a class="jxr_linenumber" name="L159" href="#L159">159</a> 
<a class="jxr_linenumber" name="L160" href="#L160">160</a>         Optimum optimum = optimizer.optimize(ls);
<a class="jxr_linenumber" name="L161" href="#L161">161</a> 
<a class="jxr_linenumber" name="L162" href="#L162">162</a>         Assert.assertEquals(0, optimum.getRMS(), TOl);
<a class="jxr_linenumber" name="L163" href="#L163">163</a>         assertEquals(TOl, optimum.getPoint(), 1.5);
<a class="jxr_linenumber" name="L164" href="#L164">164</a>         Assert.assertEquals(0.0, optimum.getResiduals().getEntry(0), TOl);
<a class="jxr_linenumber" name="L165" href="#L165">165</a>     }
<a class="jxr_linenumber" name="L166" href="#L166">166</a> 
<a class="jxr_linenumber" name="L167" href="#L167">167</a>     @Test
<a class="jxr_linenumber" name="L168" href="#L168">168</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testQRColumnsPermutation() {
<a class="jxr_linenumber" name="L169" href="#L169">169</a>         <a href="../../../../../../org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.html">LinearProblem</a> problem
<a class="jxr_linenumber" name="L170" href="#L170">170</a>                 = <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.html">LinearProblem</a>(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[][]{{1, -1}, {0, 2}, {1, -2}},
<a class="jxr_linenumber" name="L171" href="#L171">171</a>                 <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{4, 6, 1});
<a class="jxr_linenumber" name="L172" href="#L172">172</a> 
<a class="jxr_linenumber" name="L173" href="#L173">173</a>         Optimum optimum = optimizer.optimize(problem.getBuilder().build());
<a class="jxr_linenumber" name="L174" href="#L174">174</a> 
<a class="jxr_linenumber" name="L175" href="#L175">175</a>         Assert.assertEquals(0, optimum.getRMS(), TOl);
<a class="jxr_linenumber" name="L176" href="#L176">176</a>         assertEquals(TOl, optimum.getPoint(), 7, 3);
<a class="jxr_linenumber" name="L177" href="#L177">177</a>         assertEquals(TOl, optimum.getResiduals(), 0, 0, 0);
<a class="jxr_linenumber" name="L178" href="#L178">178</a>     }
<a class="jxr_linenumber" name="L179" href="#L179">179</a> 
<a class="jxr_linenumber" name="L180" href="#L180">180</a>     @Test
<a class="jxr_linenumber" name="L181" href="#L181">181</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testNoDependency() {
<a class="jxr_linenumber" name="L182" href="#L182">182</a>         <a href="../../../../../../org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.html">LinearProblem</a> problem = <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.html">LinearProblem</a>(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[][]{
<a class="jxr_linenumber" name="L183" href="#L183">183</a>                 {2, 0, 0, 0, 0, 0},
<a class="jxr_linenumber" name="L184" href="#L184">184</a>                 {0, 2, 0, 0, 0, 0},
<a class="jxr_linenumber" name="L185" href="#L185">185</a>                 {0, 0, 2, 0, 0, 0},
<a class="jxr_linenumber" name="L186" href="#L186">186</a>                 {0, 0, 0, 2, 0, 0},
<a class="jxr_linenumber" name="L187" href="#L187">187</a>                 {0, 0, 0, 0, 2, 0},
<a class="jxr_linenumber" name="L188" href="#L188">188</a>                 {0, 0, 0, 0, 0, 2}
<a class="jxr_linenumber" name="L189" href="#L189">189</a>         }, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{0, 1.1, 2.2, 3.3, 4.4, 5.5});
<a class="jxr_linenumber" name="L190" href="#L190">190</a> 
<a class="jxr_linenumber" name="L191" href="#L191">191</a>         Optimum optimum = optimizer.optimize(problem.getBuilder().build());
<a class="jxr_linenumber" name="L192" href="#L192">192</a> 
<a class="jxr_linenumber" name="L193" href="#L193">193</a>         Assert.assertEquals(0, optimum.getRMS(), TOl);
<a class="jxr_linenumber" name="L194" href="#L194">194</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; problem.target.length; ++i) {
<a class="jxr_linenumber" name="L195" href="#L195">195</a>             Assert.assertEquals(0.55 * i, optimum.getPoint().getEntry(i), TOl);
<a class="jxr_linenumber" name="L196" href="#L196">196</a>         }
<a class="jxr_linenumber" name="L197" href="#L197">197</a>     }
<a class="jxr_linenumber" name="L198" href="#L198">198</a> 
<a class="jxr_linenumber" name="L199" href="#L199">199</a>     @Test
<a class="jxr_linenumber" name="L200" href="#L200">200</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testOneSet() {
<a class="jxr_linenumber" name="L201" href="#L201">201</a>         <a href="../../../../../../org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.html">LinearProblem</a> problem = <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.html">LinearProblem</a>(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[][]{
<a class="jxr_linenumber" name="L202" href="#L202">202</a>                 {1, 0, 0},
<a class="jxr_linenumber" name="L203" href="#L203">203</a>                 {-1, 1, 0},
<a class="jxr_linenumber" name="L204" href="#L204">204</a>                 {0, -1, 1}
<a class="jxr_linenumber" name="L205" href="#L205">205</a>         }, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{1, 1, 1});
<a class="jxr_linenumber" name="L206" href="#L206">206</a> 
<a class="jxr_linenumber" name="L207" href="#L207">207</a>         Optimum optimum = optimizer.optimize(problem.getBuilder().build());
<a class="jxr_linenumber" name="L208" href="#L208">208</a> 
<a class="jxr_linenumber" name="L209" href="#L209">209</a>         Assert.assertEquals(0, optimum.getRMS(), TOl);
<a class="jxr_linenumber" name="L210" href="#L210">210</a>         assertEquals(TOl, optimum.getPoint(), 1, 2, 3);
<a class="jxr_linenumber" name="L211" href="#L211">211</a>     }
<a class="jxr_linenumber" name="L212" href="#L212">212</a> 
<a class="jxr_linenumber" name="L213" href="#L213">213</a>     @Test
<a class="jxr_linenumber" name="L214" href="#L214">214</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testTwoSets() {
<a class="jxr_linenumber" name="L215" href="#L215">215</a>         <strong class="jxr_keyword">double</strong> epsilon = 1e-7;
<a class="jxr_linenumber" name="L216" href="#L216">216</a>         <a href="../../../../../../org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.html">LinearProblem</a> problem = <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.html">LinearProblem</a>(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[][]{
<a class="jxr_linenumber" name="L217" href="#L217">217</a>                 {2, 1, 0, 4, 0, 0},
<a class="jxr_linenumber" name="L218" href="#L218">218</a>                 {-4, -2, 3, -7, 0, 0},
<a class="jxr_linenumber" name="L219" href="#L219">219</a>                 {4, 1, -2, 8, 0, 0},
<a class="jxr_linenumber" name="L220" href="#L220">220</a>                 {0, -3, -12, -1, 0, 0},
<a class="jxr_linenumber" name="L221" href="#L221">221</a>                 {0, 0, 0, 0, epsilon, 1},
<a class="jxr_linenumber" name="L222" href="#L222">222</a>                 {0, 0, 0, 0, 1, 1}
<a class="jxr_linenumber" name="L223" href="#L223">223</a>         }, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{2, -9, 2, 2, 1 + epsilon * epsilon, 2});
<a class="jxr_linenumber" name="L224" href="#L224">224</a> 
<a class="jxr_linenumber" name="L225" href="#L225">225</a>         Optimum optimum = optimizer.optimize(problem.getBuilder().build());
<a class="jxr_linenumber" name="L226" href="#L226">226</a> 
<a class="jxr_linenumber" name="L227" href="#L227">227</a>         Assert.assertEquals(0, optimum.getRMS(), TOl);
<a class="jxr_linenumber" name="L228" href="#L228">228</a>         assertEquals(TOl, optimum.getPoint(), 3, 4, -1, -2, 1 + epsilon, 1 - epsilon);
<a class="jxr_linenumber" name="L229" href="#L229">229</a>     }
<a class="jxr_linenumber" name="L230" href="#L230">230</a> 
<a class="jxr_linenumber" name="L231" href="#L231">231</a>     @Test
<a class="jxr_linenumber" name="L232" href="#L232">232</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testNonInvertible() <strong class="jxr_keyword">throws</strong> Exception {
<a class="jxr_linenumber" name="L233" href="#L233">233</a>         <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L234" href="#L234">234</a>             <a href="../../../../../../org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.html">LinearProblem</a> problem = <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.html">LinearProblem</a>(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[][]{
<a class="jxr_linenumber" name="L235" href="#L235">235</a>                     {1, 2, -3},
<a class="jxr_linenumber" name="L236" href="#L236">236</a>                     {2, 1, 3},
<a class="jxr_linenumber" name="L237" href="#L237">237</a>                     {-3, 0, -9}
<a class="jxr_linenumber" name="L238" href="#L238">238</a>             }, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{1, 1, 1});
<a class="jxr_linenumber" name="L239" href="#L239">239</a> 
<a class="jxr_linenumber" name="L240" href="#L240">240</a>             optimizer.optimize(problem.getBuilder().build());
<a class="jxr_linenumber" name="L241" href="#L241">241</a> 
<a class="jxr_linenumber" name="L242" href="#L242">242</a>             fail(optimizer);
<a class="jxr_linenumber" name="L243" href="#L243">243</a>         } <strong class="jxr_keyword">catch</strong> (ConvergenceException e) {
<a class="jxr_linenumber" name="L244" href="#L244">244</a>             <em class="jxr_comment">//expected</em>
<a class="jxr_linenumber" name="L245" href="#L245">245</a>         }
<a class="jxr_linenumber" name="L246" href="#L246">246</a>     }
<a class="jxr_linenumber" name="L247" href="#L247">247</a> 
<a class="jxr_linenumber" name="L248" href="#L248">248</a>     @Test
<a class="jxr_linenumber" name="L249" href="#L249">249</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testIllConditioned() {
<a class="jxr_linenumber" name="L250" href="#L250">250</a>         <a href="../../../../../../org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.html">LinearProblem</a> problem1 = <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.html">LinearProblem</a>(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[][]{
<a class="jxr_linenumber" name="L251" href="#L251">251</a>                 {10, 7, 8, 7},
<a class="jxr_linenumber" name="L252" href="#L252">252</a>                 {7, 5, 6, 5},
<a class="jxr_linenumber" name="L253" href="#L253">253</a>                 {8, 6, 10, 9},
<a class="jxr_linenumber" name="L254" href="#L254">254</a>                 {7, 5, 9, 10}
<a class="jxr_linenumber" name="L255" href="#L255">255</a>         }, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{32, 23, 33, 31});
<a class="jxr_linenumber" name="L256" href="#L256">256</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] start = {0, 1, 2, 3};
<a class="jxr_linenumber" name="L257" href="#L257">257</a> 
<a class="jxr_linenumber" name="L258" href="#L258">258</a>         Optimum optimum = optimizer
<a class="jxr_linenumber" name="L259" href="#L259">259</a>                 .optimize(problem1.getBuilder().start(start).build());
<a class="jxr_linenumber" name="L260" href="#L260">260</a> 
<a class="jxr_linenumber" name="L261" href="#L261">261</a>         Assert.assertEquals(0, optimum.getRMS(), TOl);
<a class="jxr_linenumber" name="L262" href="#L262">262</a>         assertEquals(TOl, optimum.getPoint(), 1, 1, 1, 1);
<a class="jxr_linenumber" name="L263" href="#L263">263</a> 
<a class="jxr_linenumber" name="L264" href="#L264">264</a>         <a href="../../../../../../org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.html">LinearProblem</a> problem2 = <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.html">LinearProblem</a>(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[][]{
<a class="jxr_linenumber" name="L265" href="#L265">265</a>                 {10.00, 7.00, 8.10, 7.20},
<a class="jxr_linenumber" name="L266" href="#L266">266</a>                 {7.08, 5.04, 6.00, 5.00},
<a class="jxr_linenumber" name="L267" href="#L267">267</a>                 {8.00, 5.98, 9.89, 9.00},
<a class="jxr_linenumber" name="L268" href="#L268">268</a>                 {6.99, 4.99, 9.00, 9.98}
<a class="jxr_linenumber" name="L269" href="#L269">269</a>         }, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{32, 23, 33, 31});
<a class="jxr_linenumber" name="L270" href="#L270">270</a> 
<a class="jxr_linenumber" name="L271" href="#L271">271</a>         optimum = optimizer.optimize(problem2.getBuilder().start(start).build());
<a class="jxr_linenumber" name="L272" href="#L272">272</a> 
<a class="jxr_linenumber" name="L273" href="#L273">273</a>         Assert.assertEquals(0, optimum.getRMS(), TOl);
<a class="jxr_linenumber" name="L274" href="#L274">274</a>         assertEquals(1e-8, optimum.getPoint(), -81, 137, -34, 22);
<a class="jxr_linenumber" name="L275" href="#L275">275</a>     }
<a class="jxr_linenumber" name="L276" href="#L276">276</a> 
<a class="jxr_linenumber" name="L277" href="#L277">277</a>     @Test
<a class="jxr_linenumber" name="L278" href="#L278">278</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testMoreEstimatedParametersSimple() {
<a class="jxr_linenumber" name="L279" href="#L279">279</a>         <a href="../../../../../../org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.html">LinearProblem</a> problem = <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.html">LinearProblem</a>(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[][]{
<a class="jxr_linenumber" name="L280" href="#L280">280</a>                 {3, 2, 0, 0},
<a class="jxr_linenumber" name="L281" href="#L281">281</a>                 {0, 1, -1, 1},
<a class="jxr_linenumber" name="L282" href="#L282">282</a>                 {2, 0, 1, 0}
<a class="jxr_linenumber" name="L283" href="#L283">283</a>         }, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{7, 3, 5});
<a class="jxr_linenumber" name="L284" href="#L284">284</a> 
<a class="jxr_linenumber" name="L285" href="#L285">285</a>         Optimum optimum = optimizer
<a class="jxr_linenumber" name="L286" href="#L286">286</a>                 .optimize(problem.getBuilder().start(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{7, 6, 5, 4}).build());
<a class="jxr_linenumber" name="L287" href="#L287">287</a> 
<a class="jxr_linenumber" name="L288" href="#L288">288</a>         Assert.assertEquals(0, optimum.getRMS(), TOl);
<a class="jxr_linenumber" name="L289" href="#L289">289</a>     }
<a class="jxr_linenumber" name="L290" href="#L290">290</a> 
<a class="jxr_linenumber" name="L291" href="#L291">291</a>     @Test
<a class="jxr_linenumber" name="L292" href="#L292">292</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testMoreEstimatedParametersUnsorted() {
<a class="jxr_linenumber" name="L293" href="#L293">293</a>         <a href="../../../../../../org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.html">LinearProblem</a> problem = <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.html">LinearProblem</a>(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[][]{
<a class="jxr_linenumber" name="L294" href="#L294">294</a>                 {1, 1, 0, 0, 0, 0},
<a class="jxr_linenumber" name="L295" href="#L295">295</a>                 {0, 0, 1, 1, 1, 0},
<a class="jxr_linenumber" name="L296" href="#L296">296</a>                 {0, 0, 0, 0, 1, -1},
<a class="jxr_linenumber" name="L297" href="#L297">297</a>                 {0, 0, -1, 1, 0, 1},
<a class="jxr_linenumber" name="L298" href="#L298">298</a>                 {0, 0, 0, -1, 1, 0}
<a class="jxr_linenumber" name="L299" href="#L299">299</a>         }, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{3, 12, -1, 7, 1});
<a class="jxr_linenumber" name="L300" href="#L300">300</a> 
<a class="jxr_linenumber" name="L301" href="#L301">301</a>         Optimum optimum = optimizer.optimize(
<a class="jxr_linenumber" name="L302" href="#L302">302</a>                 problem.getBuilder().start(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{2, 2, 2, 2, 2, 2}).build());
<a class="jxr_linenumber" name="L303" href="#L303">303</a> 
<a class="jxr_linenumber" name="L304" href="#L304">304</a>         Assert.assertEquals(0, optimum.getRMS(), TOl);
<a class="jxr_linenumber" name="L305" href="#L305">305</a>         RealVector point = optimum.getPoint();
<a class="jxr_linenumber" name="L306" href="#L306">306</a>         <em class="jxr_comment">//the first two elements are under constrained</em>
<a class="jxr_linenumber" name="L307" href="#L307">307</a>         <em class="jxr_comment">//check first two elements obey the constraint: sum to 3</em>
<a class="jxr_linenumber" name="L308" href="#L308">308</a>         Assert.assertEquals(3, point.getEntry(0) + point.getEntry(1), TOl);
<a class="jxr_linenumber" name="L309" href="#L309">309</a>         <em class="jxr_comment">//#constrains = #states fro the last 4 elements</em>
<a class="jxr_linenumber" name="L310" href="#L310">310</a>         assertEquals(TOl, point.getSubVector(2, 4), 3, 4, 5, 6);
<a class="jxr_linenumber" name="L311" href="#L311">311</a>     }
<a class="jxr_linenumber" name="L312" href="#L312">312</a> 
<a class="jxr_linenumber" name="L313" href="#L313">313</a>     @Test
<a class="jxr_linenumber" name="L314" href="#L314">314</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testRedundantEquations() {
<a class="jxr_linenumber" name="L315" href="#L315">315</a>         <a href="../../../../../../org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.html">LinearProblem</a> problem = <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.html">LinearProblem</a>(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[][]{
<a class="jxr_linenumber" name="L316" href="#L316">316</a>                 {1, 1},
<a class="jxr_linenumber" name="L317" href="#L317">317</a>                 {1, -1},
<a class="jxr_linenumber" name="L318" href="#L318">318</a>                 {1, 3}
<a class="jxr_linenumber" name="L319" href="#L319">319</a>         }, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{3, 1, 5});
<a class="jxr_linenumber" name="L320" href="#L320">320</a> 
<a class="jxr_linenumber" name="L321" href="#L321">321</a>         Optimum optimum = optimizer
<a class="jxr_linenumber" name="L322" href="#L322">322</a>                 .optimize(problem.getBuilder().start(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{1, 1}).build());
<a class="jxr_linenumber" name="L323" href="#L323">323</a> 
<a class="jxr_linenumber" name="L324" href="#L324">324</a>         Assert.assertEquals(0, optimum.getRMS(), TOl);
<a class="jxr_linenumber" name="L325" href="#L325">325</a>         assertEquals(TOl, optimum.getPoint(), 2, 1);
<a class="jxr_linenumber" name="L326" href="#L326">326</a>     }
<a class="jxr_linenumber" name="L327" href="#L327">327</a> 
<a class="jxr_linenumber" name="L328" href="#L328">328</a>     @Test
<a class="jxr_linenumber" name="L329" href="#L329">329</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testInconsistentEquations() {
<a class="jxr_linenumber" name="L330" href="#L330">330</a>         <a href="../../../../../../org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.html">LinearProblem</a> problem = <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.html">LinearProblem</a>(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[][]{
<a class="jxr_linenumber" name="L331" href="#L331">331</a>                 {1, 1},
<a class="jxr_linenumber" name="L332" href="#L332">332</a>                 {1, -1},
<a class="jxr_linenumber" name="L333" href="#L333">333</a>                 {1, 3}
<a class="jxr_linenumber" name="L334" href="#L334">334</a>         }, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{3, 1, 4});
<a class="jxr_linenumber" name="L335" href="#L335">335</a> 
<a class="jxr_linenumber" name="L336" href="#L336">336</a>         Optimum optimum = optimizer
<a class="jxr_linenumber" name="L337" href="#L337">337</a>                 .optimize(problem.getBuilder().start(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{1, 1}).build());
<a class="jxr_linenumber" name="L338" href="#L338">338</a> 
<a class="jxr_linenumber" name="L339" href="#L339">339</a>         <em class="jxr_comment">//TODO what is this actually testing?</em>
<a class="jxr_linenumber" name="L340" href="#L340">340</a>         Assert.assertTrue(optimum.getRMS() &gt; 0.1);
<a class="jxr_linenumber" name="L341" href="#L341">341</a>     }
<a class="jxr_linenumber" name="L342" href="#L342">342</a> 
<a class="jxr_linenumber" name="L343" href="#L343">343</a>     @Test
<a class="jxr_linenumber" name="L344" href="#L344">344</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testInconsistentSizes1() {
<a class="jxr_linenumber" name="L345" href="#L345">345</a>         <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L346" href="#L346">346</a>             <a href="../../../../../../org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.html">LinearProblem</a> problem
<a class="jxr_linenumber" name="L347" href="#L347">347</a>                     = <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.html">LinearProblem</a>(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[][]{{1, 0},
<a class="jxr_linenumber" name="L348" href="#L348">348</a>                     {0, 1}},
<a class="jxr_linenumber" name="L349" href="#L349">349</a>                     <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{-1, 1});
<a class="jxr_linenumber" name="L350" href="#L350">350</a> 
<a class="jxr_linenumber" name="L351" href="#L351">351</a>             <em class="jxr_comment">//TODO why is this part here? hasn't it been tested already?</em>
<a class="jxr_linenumber" name="L352" href="#L352">352</a>             Optimum optimum = optimizer.optimize(problem.getBuilder().build());
<a class="jxr_linenumber" name="L353" href="#L353">353</a> 
<a class="jxr_linenumber" name="L354" href="#L354">354</a>             Assert.assertEquals(0, optimum.getRMS(), TOl);
<a class="jxr_linenumber" name="L355" href="#L355">355</a>             assertEquals(TOl, optimum.getPoint(), -1, 1);
<a class="jxr_linenumber" name="L356" href="#L356">356</a> 
<a class="jxr_linenumber" name="L357" href="#L357">357</a>             <em class="jxr_comment">//TODO move to builder test</em>
<a class="jxr_linenumber" name="L358" href="#L358">358</a>             optimizer.optimize(
<a class="jxr_linenumber" name="L359" href="#L359">359</a>                     problem.getBuilder().weight(<strong class="jxr_keyword">new</strong> DiagonalMatrix(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{1})).build());
<a class="jxr_linenumber" name="L360" href="#L360">360</a> 
<a class="jxr_linenumber" name="L361" href="#L361">361</a>             fail(optimizer);
<a class="jxr_linenumber" name="L362" href="#L362">362</a>         } <strong class="jxr_keyword">catch</strong> (DimensionMismatchException e) {
<a class="jxr_linenumber" name="L363" href="#L363">363</a>             <em class="jxr_comment">//expected</em>
<a class="jxr_linenumber" name="L364" href="#L364">364</a>         }
<a class="jxr_linenumber" name="L365" href="#L365">365</a>     }
<a class="jxr_linenumber" name="L366" href="#L366">366</a> 
<a class="jxr_linenumber" name="L367" href="#L367">367</a>     @Test
<a class="jxr_linenumber" name="L368" href="#L368">368</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testInconsistentSizes2() {
<a class="jxr_linenumber" name="L369" href="#L369">369</a>         <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L370" href="#L370">370</a>             <a href="../../../../../../org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.html">LinearProblem</a> problem
<a class="jxr_linenumber" name="L371" href="#L371">371</a>                     = <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.html">LinearProblem</a>(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[][]{{1, 0}, {0, 1}},
<a class="jxr_linenumber" name="L372" href="#L372">372</a>                     <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{-1, 1});
<a class="jxr_linenumber" name="L373" href="#L373">373</a> 
<a class="jxr_linenumber" name="L374" href="#L374">374</a>             Optimum optimum = optimizer.optimize(problem.getBuilder().build());
<a class="jxr_linenumber" name="L375" href="#L375">375</a> 
<a class="jxr_linenumber" name="L376" href="#L376">376</a>             Assert.assertEquals(0, optimum.getRMS(), TOl);
<a class="jxr_linenumber" name="L377" href="#L377">377</a>             assertEquals(TOl, optimum.getPoint(), -1, 1);
<a class="jxr_linenumber" name="L378" href="#L378">378</a> 
<a class="jxr_linenumber" name="L379" href="#L379">379</a>             <em class="jxr_comment">//TODO move to builder test</em>
<a class="jxr_linenumber" name="L380" href="#L380">380</a>             optimizer.optimize(
<a class="jxr_linenumber" name="L381" href="#L381">381</a>                     problem.getBuilder()
<a class="jxr_linenumber" name="L382" href="#L382">382</a>                             .target(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{1})
<a class="jxr_linenumber" name="L383" href="#L383">383</a>                             .weight(<strong class="jxr_keyword">new</strong> DiagonalMatrix(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{1}))
<a class="jxr_linenumber" name="L384" href="#L384">384</a>                             .build()
<a class="jxr_linenumber" name="L385" href="#L385">385</a>             );
<a class="jxr_linenumber" name="L386" href="#L386">386</a> 
<a class="jxr_linenumber" name="L387" href="#L387">387</a>             fail(optimizer);
<a class="jxr_linenumber" name="L388" href="#L388">388</a>         } <strong class="jxr_keyword">catch</strong> (DimensionMismatchException e) {
<a class="jxr_linenumber" name="L389" href="#L389">389</a>             <em class="jxr_comment">//expected</em>
<a class="jxr_linenumber" name="L390" href="#L390">390</a>         }
<a class="jxr_linenumber" name="L391" href="#L391">391</a>     }
<a class="jxr_linenumber" name="L392" href="#L392">392</a> 
<a class="jxr_linenumber" name="L393" href="#L393">393</a>     @Test
<a class="jxr_linenumber" name="L394" href="#L394">394</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testCircleFitting() {
<a class="jxr_linenumber" name="L395" href="#L395">395</a>         <a href="../../../../../../org/apache/commons/math3/fitting/leastsquares/CircleVectorial.html">CircleVectorial</a> circle = <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/fitting/leastsquares/CircleVectorial.html">CircleVectorial</a>();
<a class="jxr_linenumber" name="L396" href="#L396">396</a>         circle.addPoint(30, 68);
<a class="jxr_linenumber" name="L397" href="#L397">397</a>         circle.addPoint(50, -6);
<a class="jxr_linenumber" name="L398" href="#L398">398</a>         circle.addPoint(110, -20);
<a class="jxr_linenumber" name="L399" href="#L399">399</a>         circle.addPoint(35, 15);
<a class="jxr_linenumber" name="L400" href="#L400">400</a>         circle.addPoint(45, 97);
<a class="jxr_linenumber" name="L401" href="#L401">401</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] start = {98.680, 47.345};
<a class="jxr_linenumber" name="L402" href="#L402">402</a> 
<a class="jxr_linenumber" name="L403" href="#L403">403</a>         Optimum optimum = optimizer.optimize(builder(circle).start(start).build());
<a class="jxr_linenumber" name="L404" href="#L404">404</a> 
<a class="jxr_linenumber" name="L405" href="#L405">405</a>         Assert.assertTrue(optimum.getEvaluations() &lt; 10);
<a class="jxr_linenumber" name="L406" href="#L406">406</a> 
<a class="jxr_linenumber" name="L407" href="#L407">407</a>         <strong class="jxr_keyword">double</strong> rms = optimum.getRMS();
<a class="jxr_linenumber" name="L408" href="#L408">408</a>         Assert.assertEquals(1.768262623567235, FastMath.sqrt(circle.getN()) * rms, TOl);
<a class="jxr_linenumber" name="L409" href="#L409">409</a> 
<a class="jxr_linenumber" name="L410" href="#L410">410</a>         Vector2D center = <strong class="jxr_keyword">new</strong> Vector2D(optimum.getPoint().getEntry(0), optimum.getPoint().getEntry(1));
<a class="jxr_linenumber" name="L411" href="#L411">411</a>         Assert.assertEquals(69.96016176931406, circle.getRadius(center), 1e-6);
<a class="jxr_linenumber" name="L412" href="#L412">412</a>         Assert.assertEquals(96.07590211815305, center.getX(), 1e-6);
<a class="jxr_linenumber" name="L413" href="#L413">413</a>         Assert.assertEquals(48.13516790438953, center.getY(), 1e-6);
<a class="jxr_linenumber" name="L414" href="#L414">414</a> 
<a class="jxr_linenumber" name="L415" href="#L415">415</a>         <strong class="jxr_keyword">double</strong>[][] cov = optimum.getCovariances(1e-14).getData();
<a class="jxr_linenumber" name="L416" href="#L416">416</a>         Assert.assertEquals(1.839, cov[0][0], 0.001);
<a class="jxr_linenumber" name="L417" href="#L417">417</a>         Assert.assertEquals(0.731, cov[0][1], 0.001);
<a class="jxr_linenumber" name="L418" href="#L418">418</a>         Assert.assertEquals(cov[0][1], cov[1][0], 1e-14);
<a class="jxr_linenumber" name="L419" href="#L419">419</a>         Assert.assertEquals(0.786, cov[1][1], 0.001);
<a class="jxr_linenumber" name="L420" href="#L420">420</a> 
<a class="jxr_linenumber" name="L421" href="#L421">421</a>         <em class="jxr_comment">// add perfect measurements and check formal errors are reduced</em>
<a class="jxr_linenumber" name="L422" href="#L422">422</a>         <strong class="jxr_keyword">double</strong> r = circle.getRadius(center);
<a class="jxr_linenumber" name="L423" href="#L423">423</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">double</strong> d = 0; d &lt; 2 * FastMath.PI; d += 0.01) {
<a class="jxr_linenumber" name="L424" href="#L424">424</a>             circle.addPoint(center.getX() + r * FastMath.cos(d), center.getY() + r * FastMath.sin(d));
<a class="jxr_linenumber" name="L425" href="#L425">425</a>         }
<a class="jxr_linenumber" name="L426" href="#L426">426</a> 
<a class="jxr_linenumber" name="L427" href="#L427">427</a>         <strong class="jxr_keyword">double</strong>[] weights = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[circle.getN()];
<a class="jxr_linenumber" name="L428" href="#L428">428</a>         Arrays.fill(weights, 2);
<a class="jxr_linenumber" name="L429" href="#L429">429</a> 
<a class="jxr_linenumber" name="L430" href="#L430">430</a>         optimum = optimizer.optimize(
<a class="jxr_linenumber" name="L431" href="#L431">431</a>                 builder(circle).weight(<strong class="jxr_keyword">new</strong> DiagonalMatrix(weights)).start(start).build());
<a class="jxr_linenumber" name="L432" href="#L432">432</a> 
<a class="jxr_linenumber" name="L433" href="#L433">433</a>         cov = optimum.getCovariances(1e-14).getData();
<a class="jxr_linenumber" name="L434" href="#L434">434</a>         Assert.assertEquals(0.0016, cov[0][0], 0.001);
<a class="jxr_linenumber" name="L435" href="#L435">435</a>         Assert.assertEquals(3.2e-7, cov[0][1], 1e-9);
<a class="jxr_linenumber" name="L436" href="#L436">436</a>         Assert.assertEquals(cov[0][1], cov[1][0], 1e-14);
<a class="jxr_linenumber" name="L437" href="#L437">437</a>         Assert.assertEquals(0.0016, cov[1][1], 0.001);
<a class="jxr_linenumber" name="L438" href="#L438">438</a>     }
<a class="jxr_linenumber" name="L439" href="#L439">439</a> 
<a class="jxr_linenumber" name="L440" href="#L440">440</a>     @Test
<a class="jxr_linenumber" name="L441" href="#L441">441</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testCircleFittingBadInit() {
<a class="jxr_linenumber" name="L442" href="#L442">442</a>         <a href="../../../../../../org/apache/commons/math3/fitting/leastsquares/CircleVectorial.html">CircleVectorial</a> circle = <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/fitting/leastsquares/CircleVectorial.html">CircleVectorial</a>();
<a class="jxr_linenumber" name="L443" href="#L443">443</a>         <strong class="jxr_keyword">double</strong>[][] points = circlePoints;
<a class="jxr_linenumber" name="L444" href="#L444">444</a>         <strong class="jxr_keyword">double</strong>[] weights = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[points.length];
<a class="jxr_linenumber" name="L445" href="#L445">445</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] start = {-12, -12};
<a class="jxr_linenumber" name="L446" href="#L446">446</a>         Arrays.fill(weights, 2);
<a class="jxr_linenumber" name="L447" href="#L447">447</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; points.length; ++i) {
<a class="jxr_linenumber" name="L448" href="#L448">448</a>             circle.addPoint(points[i][0], points[i][1]);
<a class="jxr_linenumber" name="L449" href="#L449">449</a>         }
<a class="jxr_linenumber" name="L450" href="#L450">450</a> 
<a class="jxr_linenumber" name="L451" href="#L451">451</a>         Optimum optimum = optimizer.optimize(builder(circle).weight(<strong class="jxr_keyword">new</strong> DiagonalMatrix(weights)).start(start).build());
<a class="jxr_linenumber" name="L452" href="#L452">452</a> 
<a class="jxr_linenumber" name="L453" href="#L453">453</a>         Vector2D center = <strong class="jxr_keyword">new</strong> Vector2D(optimum.getPoint().getEntry(0), optimum.getPoint().getEntry(1));
<a class="jxr_linenumber" name="L454" href="#L454">454</a>         Assert.assertTrue(optimum.getEvaluations() &lt; 25);
<a class="jxr_linenumber" name="L455" href="#L455">455</a>         Assert.assertEquals(0.043, optimum.getRMS(), 1e-3);
<a class="jxr_linenumber" name="L456" href="#L456">456</a>         Assert.assertEquals(0.292235, circle.getRadius(center), 1e-6);
<a class="jxr_linenumber" name="L457" href="#L457">457</a>         Assert.assertEquals(-0.151738, center.getX(), 1e-6);
<a class="jxr_linenumber" name="L458" href="#L458">458</a>         Assert.assertEquals(0.2075001, center.getY(), 1e-6);
<a class="jxr_linenumber" name="L459" href="#L459">459</a>     }
<a class="jxr_linenumber" name="L460" href="#L460">460</a> 
<a class="jxr_linenumber" name="L461" href="#L461">461</a>     @Test
<a class="jxr_linenumber" name="L462" href="#L462">462</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testCircleFittingGoodInit() {
<a class="jxr_linenumber" name="L463" href="#L463">463</a>         <a href="../../../../../../org/apache/commons/math3/fitting/leastsquares/CircleVectorial.html">CircleVectorial</a> circle = <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/fitting/leastsquares/CircleVectorial.html">CircleVectorial</a>();
<a class="jxr_linenumber" name="L464" href="#L464">464</a>         <strong class="jxr_keyword">double</strong>[][] points = circlePoints;
<a class="jxr_linenumber" name="L465" href="#L465">465</a>         <strong class="jxr_keyword">double</strong>[] weights = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[points.length];
<a class="jxr_linenumber" name="L466" href="#L466">466</a>         Arrays.fill(weights, 2);
<a class="jxr_linenumber" name="L467" href="#L467">467</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; points.length; ++i) {
<a class="jxr_linenumber" name="L468" href="#L468">468</a>             circle.addPoint(points[i][0], points[i][1]);
<a class="jxr_linenumber" name="L469" href="#L469">469</a>         }
<a class="jxr_linenumber" name="L470" href="#L470">470</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] start = {0, 0};
<a class="jxr_linenumber" name="L471" href="#L471">471</a> 
<a class="jxr_linenumber" name="L472" href="#L472">472</a>         Optimum optimum = optimizer.optimize(
<a class="jxr_linenumber" name="L473" href="#L473">473</a>                 builder(circle).weight(<strong class="jxr_keyword">new</strong> DiagonalMatrix(weights)).start(start).build());
<a class="jxr_linenumber" name="L474" href="#L474">474</a> 
<a class="jxr_linenumber" name="L475" href="#L475">475</a>         assertEquals(1e-6, optimum.getPoint(), -0.1517383071957963, 0.2074999736353867);
<a class="jxr_linenumber" name="L476" href="#L476">476</a>         Assert.assertEquals(0.04268731682389561, optimum.getRMS(), 1e-8);
<a class="jxr_linenumber" name="L477" href="#L477">477</a>     }
<a class="jxr_linenumber" name="L478" href="#L478">478</a> 
<a class="jxr_linenumber" name="L479" href="#L479">479</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[][] circlePoints = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[][]{
<a class="jxr_linenumber" name="L480" href="#L480">480</a>             {-0.312967, 0.072366}, {-0.339248, 0.132965}, {-0.379780, 0.202724},
<a class="jxr_linenumber" name="L481" href="#L481">481</a>             {-0.390426, 0.260487}, {-0.361212, 0.328325}, {-0.346039, 0.392619},
<a class="jxr_linenumber" name="L482" href="#L482">482</a>             {-0.280579, 0.444306}, {-0.216035, 0.470009}, {-0.149127, 0.493832},
<a class="jxr_linenumber" name="L483" href="#L483">483</a>             {-0.075133, 0.483271}, {-0.007759, 0.452680}, {0.060071, 0.410235},
<a class="jxr_linenumber" name="L484" href="#L484">484</a>             {0.103037, 0.341076}, {0.118438, 0.273884}, {0.131293, 0.192201},
<a class="jxr_linenumber" name="L485" href="#L485">485</a>             {0.115869, 0.129797}, {0.072223, 0.058396}, {0.022884, 0.000718},
<a class="jxr_linenumber" name="L486" href="#L486">486</a>             {-0.053355, -0.020405}, {-0.123584, -0.032451}, {-0.216248, -0.032862},
<a class="jxr_linenumber" name="L487" href="#L487">487</a>             {-0.278592, -0.005008}, {-0.337655, 0.056658}, {-0.385899, 0.112526},
<a class="jxr_linenumber" name="L488" href="#L488">488</a>             {-0.405517, 0.186957}, {-0.415374, 0.262071}, {-0.387482, 0.343398},
<a class="jxr_linenumber" name="L489" href="#L489">489</a>             {-0.347322, 0.397943}, {-0.287623, 0.458425}, {-0.223502, 0.475513},
<a class="jxr_linenumber" name="L490" href="#L490">490</a>             {-0.135352, 0.478186}, {-0.061221, 0.483371}, {0.003711, 0.422737},
<a class="jxr_linenumber" name="L491" href="#L491">491</a>             {0.065054, 0.375830}, {0.108108, 0.297099}, {0.123882, 0.222850},
<a class="jxr_linenumber" name="L492" href="#L492">492</a>             {0.117729, 0.134382}, {0.085195, 0.056820}, {0.029800, -0.019138},
<a class="jxr_linenumber" name="L493" href="#L493">493</a>             {-0.027520, -0.072374}, {-0.102268, -0.091555}, {-0.200299, -0.106578},
<a class="jxr_linenumber" name="L494" href="#L494">494</a>             {-0.292731, -0.091473}, {-0.356288, -0.051108}, {-0.420561, 0.014926},
<a class="jxr_linenumber" name="L495" href="#L495">495</a>             {-0.471036, 0.074716}, {-0.488638, 0.182508}, {-0.485990, 0.254068},
<a class="jxr_linenumber" name="L496" href="#L496">496</a>             {-0.463943, 0.338438}, {-0.406453, 0.404704}, {-0.334287, 0.466119},
<a class="jxr_linenumber" name="L497" href="#L497">497</a>             {-0.254244, 0.503188}, {-0.161548, 0.495769}, {-0.075733, 0.495560},
<a class="jxr_linenumber" name="L498" href="#L498">498</a>             {0.001375, 0.434937}, {0.082787, 0.385806}, {0.115490, 0.323807},
<a class="jxr_linenumber" name="L499" href="#L499">499</a>             {0.141089, 0.223450}, {0.138693, 0.131703}, {0.126415, 0.049174},
<a class="jxr_linenumber" name="L500" href="#L500">500</a>             {0.066518, -0.010217}, {-0.005184, -0.070647}, {-0.080985, -0.103635},
<a class="jxr_linenumber" name="L501" href="#L501">501</a>             {-0.177377, -0.116887}, {-0.260628, -0.100258}, {-0.335756, -0.056251},
<a class="jxr_linenumber" name="L502" href="#L502">502</a>             {-0.405195, -0.000895}, {-0.444937, 0.085456}, {-0.484357, 0.175597},
<a class="jxr_linenumber" name="L503" href="#L503">503</a>             {-0.472453, 0.248681}, {-0.438580, 0.347463}, {-0.402304, 0.422428},
<a class="jxr_linenumber" name="L504" href="#L504">504</a>             {-0.326777, 0.479438}, {-0.247797, 0.505581}, {-0.152676, 0.519380},
<a class="jxr_linenumber" name="L505" href="#L505">505</a>             {-0.071754, 0.516264}, {0.015942, 0.472802}, {0.076608, 0.419077},
<a class="jxr_linenumber" name="L506" href="#L506">506</a>             {0.127673, 0.330264}, {0.159951, 0.262150}, {0.153530, 0.172681},
<a class="jxr_linenumber" name="L507" href="#L507">507</a>             {0.140653, 0.089229}, {0.078666, 0.024981}, {0.023807, -0.037022},
<a class="jxr_linenumber" name="L508" href="#L508">508</a>             {-0.048837, -0.077056}, {-0.127729, -0.075338}, {-0.221271, -0.067526}
<a class="jxr_linenumber" name="L509" href="#L509">509</a>     };
<a class="jxr_linenumber" name="L510" href="#L510">510</a> 
<a class="jxr_linenumber" name="L511" href="#L511">511</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> doTestStRD(<strong class="jxr_keyword">final</strong> <a href="../../../../../../org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.html">StatisticalReferenceDataset</a> dataset,
<a class="jxr_linenumber" name="L512" href="#L512">512</a>                            <strong class="jxr_keyword">final</strong> LeastSquaresOptimizer optimizer,
<a class="jxr_linenumber" name="L513" href="#L513">513</a>                            <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> errParams,
<a class="jxr_linenumber" name="L514" href="#L514">514</a>                            <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> errParamsSd) {
<a class="jxr_linenumber" name="L515" href="#L515">515</a> 
<a class="jxr_linenumber" name="L516" href="#L516">516</a>         <strong class="jxr_keyword">final</strong> Optimum optimum = optimizer.optimize(builder(dataset).build());
<a class="jxr_linenumber" name="L517" href="#L517">517</a> 
<a class="jxr_linenumber" name="L518" href="#L518">518</a>         <strong class="jxr_keyword">final</strong> RealVector actual = optimum.getPoint();
<a class="jxr_linenumber" name="L519" href="#L519">519</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; actual.getDimension(); i++) {
<a class="jxr_linenumber" name="L520" href="#L520">520</a>             <strong class="jxr_keyword">double</strong> expected = dataset.getParameter(i);
<a class="jxr_linenumber" name="L521" href="#L521">521</a>             <strong class="jxr_keyword">double</strong> delta = FastMath.abs(errParams * expected);
<a class="jxr_linenumber" name="L522" href="#L522">522</a>             Assert.assertEquals(dataset.getName() + <span class="jxr_string">", param #"</span> + i,
<a class="jxr_linenumber" name="L523" href="#L523">523</a>                     expected, actual.getEntry(i), delta);
<a class="jxr_linenumber" name="L524" href="#L524">524</a>         }
<a class="jxr_linenumber" name="L525" href="#L525">525</a>     }
<a class="jxr_linenumber" name="L526" href="#L526">526</a> 
<a class="jxr_linenumber" name="L527" href="#L527">527</a>     @Test
<a class="jxr_linenumber" name="L528" href="#L528">528</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testKirby2() <strong class="jxr_keyword">throws</strong> IOException {
<a class="jxr_linenumber" name="L529" href="#L529">529</a>         doTestStRD(StatisticalReferenceDatasetFactory.createKirby2(), optimizer, 1E-7, 1E-7);
<a class="jxr_linenumber" name="L530" href="#L530">530</a>     }
<a class="jxr_linenumber" name="L531" href="#L531">531</a> 
<a class="jxr_linenumber" name="L532" href="#L532">532</a>     @Test
<a class="jxr_linenumber" name="L533" href="#L533">533</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testHahn1() <strong class="jxr_keyword">throws</strong> IOException {
<a class="jxr_linenumber" name="L534" href="#L534">534</a>         doTestStRD(StatisticalReferenceDatasetFactory.createHahn1(), optimizer, 1E-7, 1E-4);
<a class="jxr_linenumber" name="L535" href="#L535">535</a>     }
<a class="jxr_linenumber" name="L536" href="#L536">536</a> 
<a class="jxr_linenumber" name="L537" href="#L537">537</a>     @Test
<a class="jxr_linenumber" name="L538" href="#L538">538</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testPointCopy() {
<a class="jxr_linenumber" name="L539" href="#L539">539</a>         <a href="../../../../../../org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.html">LinearProblem</a> problem = <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.html">LinearProblem</a>(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[][]{
<a class="jxr_linenumber" name="L540" href="#L540">540</a>                 {1, 0, 0},
<a class="jxr_linenumber" name="L541" href="#L541">541</a>                 {-1, 1, 0},
<a class="jxr_linenumber" name="L542" href="#L542">542</a>                 {0, -1, 1}
<a class="jxr_linenumber" name="L543" href="#L543">543</a>         }, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[]{1, 1, 1});
<a class="jxr_linenumber" name="L544" href="#L544">544</a>         <em class="jxr_comment">//mutable boolean</em>
<a class="jxr_linenumber" name="L545" href="#L545">545</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">boolean</strong>[] checked = {false};
<a class="jxr_linenumber" name="L546" href="#L546">546</a> 
<a class="jxr_linenumber" name="L547" href="#L547">547</a>         <strong class="jxr_keyword">final</strong> LeastSquaresBuilder builder = problem.getBuilder()
<a class="jxr_linenumber" name="L548" href="#L548">548</a>                 .checker(<strong class="jxr_keyword">new</strong> ConvergenceChecker&lt;Evaluation&gt;() {
<a class="jxr_linenumber" name="L549" href="#L549">549</a>                     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">boolean</strong> converged(<strong class="jxr_keyword">int</strong> iteration, Evaluation previous, Evaluation current) {
<a class="jxr_linenumber" name="L550" href="#L550">550</a>                         Assert.assertThat(
<a class="jxr_linenumber" name="L551" href="#L551">551</a>                                 previous.getPoint(),
<a class="jxr_linenumber" name="L552" href="#L552">552</a>                                 not(sameInstance(current.getPoint())));
<a class="jxr_linenumber" name="L553" href="#L553">553</a>                         Assert.assertArrayEquals(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[3], previous.getPoint().toArray(), 0);
<a class="jxr_linenumber" name="L554" href="#L554">554</a>                         Assert.assertArrayEquals(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {1, 2, 3}, current.getPoint().toArray(), TOl);
<a class="jxr_linenumber" name="L555" href="#L555">555</a>                         checked[0] = <strong class="jxr_keyword">true</strong>;
<a class="jxr_linenumber" name="L556" href="#L556">556</a>                         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">true</strong>;
<a class="jxr_linenumber" name="L557" href="#L557">557</a>                     }
<a class="jxr_linenumber" name="L558" href="#L558">558</a>                 });
<a class="jxr_linenumber" name="L559" href="#L559">559</a>         optimizer.optimize(builder.build());
<a class="jxr_linenumber" name="L560" href="#L560">560</a> 
<a class="jxr_linenumber" name="L561" href="#L561">561</a>         Assert.assertThat(checked[0], is(<strong class="jxr_keyword">true</strong>));
<a class="jxr_linenumber" name="L562" href="#L562">562</a>     }
<a class="jxr_linenumber" name="L563" href="#L563">563</a> 
<a class="jxr_linenumber" name="L564" href="#L564">564</a>     <strong class="jxr_keyword">class</strong> <a href="../../../../../../org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.html">LinearProblem</a> {
<a class="jxr_linenumber" name="L565" href="#L565">565</a>         <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> RealMatrix factors;
<a class="jxr_linenumber" name="L566" href="#L566">566</a>         <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] target;
<a class="jxr_linenumber" name="L567" href="#L567">567</a> 
<a class="jxr_linenumber" name="L568" href="#L568">568</a>         <strong class="jxr_keyword">public</strong> <a href="../../../../../../org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.html">LinearProblem</a>(<strong class="jxr_keyword">double</strong>[][] factors, <strong class="jxr_keyword">double</strong>[] target) {
<a class="jxr_linenumber" name="L569" href="#L569">569</a>             <strong class="jxr_keyword">this</strong>.factors = <strong class="jxr_keyword">new</strong> BlockRealMatrix(factors);
<a class="jxr_linenumber" name="L570" href="#L570">570</a>             <strong class="jxr_keyword">this</strong>.target = target;
<a class="jxr_linenumber" name="L571" href="#L571">571</a>         }
<a class="jxr_linenumber" name="L572" href="#L572">572</a> 
<a class="jxr_linenumber" name="L573" href="#L573">573</a>         <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">double</strong>[] getTarget() {
<a class="jxr_linenumber" name="L574" href="#L574">574</a>             <strong class="jxr_keyword">return</strong> target;
<a class="jxr_linenumber" name="L575" href="#L575">575</a>         }
<a class="jxr_linenumber" name="L576" href="#L576">576</a> 
<a class="jxr_linenumber" name="L577" href="#L577">577</a>         <strong class="jxr_keyword">public</strong> MultivariateVectorFunction getModelFunction() {
<a class="jxr_linenumber" name="L578" href="#L578">578</a>             <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> MultivariateVectorFunction() {
<a class="jxr_linenumber" name="L579" href="#L579">579</a>                 <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">double</strong>[] value(<strong class="jxr_keyword">double</strong>[] params) {
<a class="jxr_linenumber" name="L580" href="#L580">580</a>                     <strong class="jxr_keyword">return</strong> factors.operate(params);
<a class="jxr_linenumber" name="L581" href="#L581">581</a>                 }
<a class="jxr_linenumber" name="L582" href="#L582">582</a>             };
<a class="jxr_linenumber" name="L583" href="#L583">583</a>         }
<a class="jxr_linenumber" name="L584" href="#L584">584</a> 
<a class="jxr_linenumber" name="L585" href="#L585">585</a>         <strong class="jxr_keyword">public</strong> MultivariateMatrixFunction getModelFunctionJacobian() {
<a class="jxr_linenumber" name="L586" href="#L586">586</a>             <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> MultivariateMatrixFunction() {
<a class="jxr_linenumber" name="L587" href="#L587">587</a>                 <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">double</strong>[][] value(<strong class="jxr_keyword">double</strong>[] params) {
<a class="jxr_linenumber" name="L588" href="#L588">588</a>                     <strong class="jxr_keyword">return</strong> factors.getData();
<a class="jxr_linenumber" name="L589" href="#L589">589</a>                 }
<a class="jxr_linenumber" name="L590" href="#L590">590</a>             };
<a class="jxr_linenumber" name="L591" href="#L591">591</a>         }
<a class="jxr_linenumber" name="L592" href="#L592">592</a> 
<a class="jxr_linenumber" name="L593" href="#L593">593</a>         <strong class="jxr_keyword">public</strong> LeastSquaresBuilder getBuilder() {
<a class="jxr_linenumber" name="L594" href="#L594">594</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] weights = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[target.length];
<a class="jxr_linenumber" name="L595" href="#L595">595</a>             Arrays.fill(weights, 1.0);
<a class="jxr_linenumber" name="L596" href="#L596">596</a>             <strong class="jxr_keyword">return</strong> base()
<a class="jxr_linenumber" name="L597" href="#L597">597</a>                     .model(getModelFunction(), getModelFunctionJacobian())
<a class="jxr_linenumber" name="L598" href="#L598">598</a>                     .target(target)
<a class="jxr_linenumber" name="L599" href="#L599">599</a>                     .weight(<strong class="jxr_keyword">new</strong> DiagonalMatrix(weights))
<a class="jxr_linenumber" name="L600" href="#L600">600</a>                     .start(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[factors.getColumnDimension()]);
<a class="jxr_linenumber" name="L601" href="#L601">601</a>         }
<a class="jxr_linenumber" name="L602" href="#L602">602</a>     }
<a class="jxr_linenumber" name="L603" href="#L603">603</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2003&#x2013;2016 <a href="http://www.apache.org/">The Apache Software Foundation</a>. All rights reserved.</div>
</body>
</html>
