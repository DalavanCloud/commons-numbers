<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>PiecewiseBicubicSplineInterpolatingFunction xref</title>
<link type="text/css" rel="stylesheet" href="../../../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../apidocs/org/apache/commons/math3/analysis/interpolation/PiecewiseBicubicSplineInterpolatingFunction.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Licensed to the Apache Software Foundation (ASF) under one or more</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> * contributor license agreements.  See the NOTICE file distributed with</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * this work for additional information regarding copyright ownership.</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * The ASF licenses this file to You under the Apache License, Version 2.0</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * (the "License"); you may not use this file except in compliance with</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> * the License.  You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *      <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">package</strong> org.apache.commons.math3.analysis.interpolation;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <strong class="jxr_keyword">import</strong> java.util.Arrays;
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.analysis.BivariateFunction;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.DimensionMismatchException;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.InsufficientDataException;
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.NoDataException;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.NullArgumentException;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.OutOfRangeException;
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.NonMonotonicSequenceException;
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.util.MathArrays;
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <em class="jxr_javadoccomment"> * Function that implements the</em>
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <em class="jxr_javadoccomment"> * &lt;a href="<a href="http://www.paulinternet.nl/?page=bicubic" target="alexandria_uri">http://www.paulinternet.nl/?page=bicubic</a>"&gt;bicubic spline&lt;/a&gt;</em>
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <em class="jxr_javadoccomment"> * interpolation.</em>
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <em class="jxr_javadoccomment"> * This implementation currently uses {@link AkimaSplineInterpolator} as the</em>
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  <em class="jxr_javadoccomment"> * underlying one-dimensional interpolator, which requires 5 sample points;</em>
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  <em class="jxr_javadoccomment"> * insufficient data will raise an exception when the</em>
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  <em class="jxr_javadoccomment"> * {@link #value(double,double) value} method is called.</em>
<a class="jxr_linenumber" name="L38" href="#L38">38</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L39" href="#L39">39</a>  <em class="jxr_javadoccomment"> * @since 3.4</em>
<a class="jxr_linenumber" name="L40" href="#L40">40</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L41" href="#L41">41</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../../org/apache/commons/math3/analysis/interpolation/PiecewiseBicubicSplineInterpolatingFunction.html">PiecewiseBicubicSplineInterpolatingFunction</a>
<a class="jxr_linenumber" name="L42" href="#L42">42</a>      <strong class="jxr_keyword">implements</strong> <a href="../../../../../../org/apache/commons/math3/analysis/BivariateFunction.html">BivariateFunction</a> {
<a class="jxr_linenumber" name="L43" href="#L43">43</a>      <em class="jxr_javadoccomment">/** The minimum number of points that are needed to compute the function. */</em>
<a class="jxr_linenumber" name="L44" href="#L44">44</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> MIN_NUM_POINTS = 5;
<a class="jxr_linenumber" name="L45" href="#L45">45</a>      <em class="jxr_javadoccomment">/** Samples x-coordinates */</em>
<a class="jxr_linenumber" name="L46" href="#L46">46</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] xval;
<a class="jxr_linenumber" name="L47" href="#L47">47</a>      <em class="jxr_javadoccomment">/** Samples y-coordinates */</em>
<a class="jxr_linenumber" name="L48" href="#L48">48</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] yval;
<a class="jxr_linenumber" name="L49" href="#L49">49</a>      <em class="jxr_javadoccomment">/** Set of cubic splines patching the whole data grid */</em>
<a class="jxr_linenumber" name="L50" href="#L50">50</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[][] fval;
<a class="jxr_linenumber" name="L51" href="#L51">51</a>  
<a class="jxr_linenumber" name="L52" href="#L52">52</a>      <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L53" href="#L53">53</a>  <em class="jxr_javadoccomment">     * @param x Sample values of the x-coordinate, in increasing order.</em>
<a class="jxr_linenumber" name="L54" href="#L54">54</a>  <em class="jxr_javadoccomment">     * @param y Sample values of the y-coordinate, in increasing order.</em>
<a class="jxr_linenumber" name="L55" href="#L55">55</a>  <em class="jxr_javadoccomment">     * @param f Values of the function on every grid point. the expected number</em>
<a class="jxr_linenumber" name="L56" href="#L56">56</a>  <em class="jxr_javadoccomment">     *        of elements.</em>
<a class="jxr_linenumber" name="L57" href="#L57">57</a>  <em class="jxr_javadoccomment">     * @throws NonMonotonicSequenceException if {@code x} or {@code y} are not</em>
<a class="jxr_linenumber" name="L58" href="#L58">58</a>  <em class="jxr_javadoccomment">     *         strictly increasing.</em>
<a class="jxr_linenumber" name="L59" href="#L59">59</a>  <em class="jxr_javadoccomment">     * @throws NullArgumentException if any of the arguments are null</em>
<a class="jxr_linenumber" name="L60" href="#L60">60</a>  <em class="jxr_javadoccomment">     * @throws NoDataException if any of the arrays has zero length.</em>
<a class="jxr_linenumber" name="L61" href="#L61">61</a>  <em class="jxr_javadoccomment">     * @throws DimensionMismatchException if the length of x and y don't match the row, column</em>
<a class="jxr_linenumber" name="L62" href="#L62">62</a>  <em class="jxr_javadoccomment">     *         height of f</em>
<a class="jxr_linenumber" name="L63" href="#L63">63</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L64" href="#L64">64</a>      <strong class="jxr_keyword">public</strong> <a href="../../../../../../org/apache/commons/math3/analysis/interpolation/PiecewiseBicubicSplineInterpolatingFunction.html">PiecewiseBicubicSplineInterpolatingFunction</a>(<strong class="jxr_keyword">double</strong>[] x,
<a class="jxr_linenumber" name="L65" href="#L65">65</a>                                                         <strong class="jxr_keyword">double</strong>[] y,
<a class="jxr_linenumber" name="L66" href="#L66">66</a>                                                         <strong class="jxr_keyword">double</strong>[][] f)
<a class="jxr_linenumber" name="L67" href="#L67">67</a>          <strong class="jxr_keyword">throws</strong> DimensionMismatchException,
<a class="jxr_linenumber" name="L68" href="#L68">68</a>                 NullArgumentException,
<a class="jxr_linenumber" name="L69" href="#L69">69</a>                 NoDataException,
<a class="jxr_linenumber" name="L70" href="#L70">70</a>                 <a href="../../../../../../org/apache/commons/math3/exception/NonMonotonicSequenceException.html">NonMonotonicSequenceException</a> {
<a class="jxr_linenumber" name="L71" href="#L71">71</a>          <strong class="jxr_keyword">if</strong> (x == <strong class="jxr_keyword">null</strong> ||
<a class="jxr_linenumber" name="L72" href="#L72">72</a>              y == <strong class="jxr_keyword">null</strong> ||
<a class="jxr_linenumber" name="L73" href="#L73">73</a>              f == <strong class="jxr_keyword">null</strong> ||
<a class="jxr_linenumber" name="L74" href="#L74">74</a>              f[0] == <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L75" href="#L75">75</a>              <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/exception/NullArgumentException.html">NullArgumentException</a>();
<a class="jxr_linenumber" name="L76" href="#L76">76</a>          }
<a class="jxr_linenumber" name="L77" href="#L77">77</a>  
<a class="jxr_linenumber" name="L78" href="#L78">78</a>          <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> xLen = x.length;
<a class="jxr_linenumber" name="L79" href="#L79">79</a>          <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> yLen = y.length;
<a class="jxr_linenumber" name="L80" href="#L80">80</a>  
<a class="jxr_linenumber" name="L81" href="#L81">81</a>          <strong class="jxr_keyword">if</strong> (xLen == 0 ||
<a class="jxr_linenumber" name="L82" href="#L82">82</a>              yLen == 0 ||
<a class="jxr_linenumber" name="L83" href="#L83">83</a>              f.length == 0 ||
<a class="jxr_linenumber" name="L84" href="#L84">84</a>              f[0].length == 0) {
<a class="jxr_linenumber" name="L85" href="#L85">85</a>              <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/exception/NoDataException.html">NoDataException</a>();
<a class="jxr_linenumber" name="L86" href="#L86">86</a>          }
<a class="jxr_linenumber" name="L87" href="#L87">87</a>  
<a class="jxr_linenumber" name="L88" href="#L88">88</a>          <strong class="jxr_keyword">if</strong> (xLen &lt; MIN_NUM_POINTS ||
<a class="jxr_linenumber" name="L89" href="#L89">89</a>              yLen &lt; MIN_NUM_POINTS ||
<a class="jxr_linenumber" name="L90" href="#L90">90</a>              f.length &lt; MIN_NUM_POINTS ||
<a class="jxr_linenumber" name="L91" href="#L91">91</a>              f[0].length &lt; MIN_NUM_POINTS) {
<a class="jxr_linenumber" name="L92" href="#L92">92</a>              <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/exception/InsufficientDataException.html">InsufficientDataException</a>();
<a class="jxr_linenumber" name="L93" href="#L93">93</a>          }
<a class="jxr_linenumber" name="L94" href="#L94">94</a>  
<a class="jxr_linenumber" name="L95" href="#L95">95</a>          <strong class="jxr_keyword">if</strong> (xLen != f.length) {
<a class="jxr_linenumber" name="L96" href="#L96">96</a>              <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/exception/DimensionMismatchException.html">DimensionMismatchException</a>(xLen, f.length);
<a class="jxr_linenumber" name="L97" href="#L97">97</a>          }
<a class="jxr_linenumber" name="L98" href="#L98">98</a>  
<a class="jxr_linenumber" name="L99" href="#L99">99</a>          <strong class="jxr_keyword">if</strong> (yLen != f[0].length) {
<a class="jxr_linenumber" name="L100" href="#L100">100</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/exception/DimensionMismatchException.html">DimensionMismatchException</a>(yLen, f[0].length);
<a class="jxr_linenumber" name="L101" href="#L101">101</a>         }
<a class="jxr_linenumber" name="L102" href="#L102">102</a> 
<a class="jxr_linenumber" name="L103" href="#L103">103</a>         MathArrays.checkOrder(x);
<a class="jxr_linenumber" name="L104" href="#L104">104</a>         MathArrays.checkOrder(y);
<a class="jxr_linenumber" name="L105" href="#L105">105</a> 
<a class="jxr_linenumber" name="L106" href="#L106">106</a>         xval = x.clone();
<a class="jxr_linenumber" name="L107" href="#L107">107</a>         yval = y.clone();
<a class="jxr_linenumber" name="L108" href="#L108">108</a>         fval = f.clone();
<a class="jxr_linenumber" name="L109" href="#L109">109</a>     }
<a class="jxr_linenumber" name="L110" href="#L110">110</a> 
<a class="jxr_linenumber" name="L111" href="#L111">111</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L112" href="#L112">112</a> <em class="jxr_javadoccomment">     * {@inheritDoc}</em>
<a class="jxr_linenumber" name="L113" href="#L113">113</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L114" href="#L114">114</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">double</strong> value(<strong class="jxr_keyword">double</strong> x,
<a class="jxr_linenumber" name="L115" href="#L115">115</a>                         <strong class="jxr_keyword">double</strong> y)
<a class="jxr_linenumber" name="L116" href="#L116">116</a>         <strong class="jxr_keyword">throws</strong> <a href="../../../../../../org/apache/commons/math3/exception/OutOfRangeException.html">OutOfRangeException</a> {
<a class="jxr_linenumber" name="L117" href="#L117">117</a>         <strong class="jxr_keyword">final</strong> <a href="../../../../../../org/apache/commons/math3/analysis/interpolation/AkimaSplineInterpolator.html">AkimaSplineInterpolator</a> interpolator = <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/analysis/interpolation/AkimaSplineInterpolator.html">AkimaSplineInterpolator</a>();
<a class="jxr_linenumber" name="L118" href="#L118">118</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> offset = 2;
<a class="jxr_linenumber" name="L119" href="#L119">119</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> count = offset + 3;
<a class="jxr_linenumber" name="L120" href="#L120">120</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> i = searchIndex(x, xval, offset, count);
<a class="jxr_linenumber" name="L121" href="#L121">121</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> j = searchIndex(y, yval, offset, count);
<a class="jxr_linenumber" name="L122" href="#L122">122</a> 
<a class="jxr_linenumber" name="L123" href="#L123">123</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> xArray[] = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[count];
<a class="jxr_linenumber" name="L124" href="#L124">124</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> yArray[] = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[count];
<a class="jxr_linenumber" name="L125" href="#L125">125</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> zArray[] = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[count];
<a class="jxr_linenumber" name="L126" href="#L126">126</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> interpArray[] = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[count];
<a class="jxr_linenumber" name="L127" href="#L127">127</a> 
<a class="jxr_linenumber" name="L128" href="#L128">128</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> index = 0; index &lt; count; index++) {
<a class="jxr_linenumber" name="L129" href="#L129">129</a>             xArray[index] = xval[i + index];
<a class="jxr_linenumber" name="L130" href="#L130">130</a>             yArray[index] = yval[j + index];
<a class="jxr_linenumber" name="L131" href="#L131">131</a>         }
<a class="jxr_linenumber" name="L132" href="#L132">132</a> 
<a class="jxr_linenumber" name="L133" href="#L133">133</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> zIndex = 0; zIndex &lt; count; zIndex++) {
<a class="jxr_linenumber" name="L134" href="#L134">134</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> index = 0; index &lt; count; index++) {
<a class="jxr_linenumber" name="L135" href="#L135">135</a>                 zArray[index] = fval[i + index][j + zIndex];
<a class="jxr_linenumber" name="L136" href="#L136">136</a>             }
<a class="jxr_linenumber" name="L137" href="#L137">137</a>             <strong class="jxr_keyword">final</strong> <a href="../../../../../../org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.html">PolynomialSplineFunction</a> spline = interpolator.interpolate(xArray, zArray);
<a class="jxr_linenumber" name="L138" href="#L138">138</a>             interpArray[zIndex] = spline.value(x);
<a class="jxr_linenumber" name="L139" href="#L139">139</a>         }
<a class="jxr_linenumber" name="L140" href="#L140">140</a> 
<a class="jxr_linenumber" name="L141" href="#L141">141</a>         <strong class="jxr_keyword">final</strong> <a href="../../../../../../org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.html">PolynomialSplineFunction</a> spline = interpolator.interpolate(yArray, interpArray);
<a class="jxr_linenumber" name="L142" href="#L142">142</a> 
<a class="jxr_linenumber" name="L143" href="#L143">143</a>         <strong class="jxr_keyword">double</strong> returnValue = spline.value(y);
<a class="jxr_linenumber" name="L144" href="#L144">144</a> 
<a class="jxr_linenumber" name="L145" href="#L145">145</a>         <strong class="jxr_keyword">return</strong> returnValue;
<a class="jxr_linenumber" name="L146" href="#L146">146</a>     }
<a class="jxr_linenumber" name="L147" href="#L147">147</a> 
<a class="jxr_linenumber" name="L148" href="#L148">148</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L149" href="#L149">149</a> <em class="jxr_javadoccomment">     * Indicates whether a point is within the interpolation range.</em>
<a class="jxr_linenumber" name="L150" href="#L150">150</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L151" href="#L151">151</a> <em class="jxr_javadoccomment">     * @param x First coordinate.</em>
<a class="jxr_linenumber" name="L152" href="#L152">152</a> <em class="jxr_javadoccomment">     * @param y Second coordinate.</em>
<a class="jxr_linenumber" name="L153" href="#L153">153</a> <em class="jxr_javadoccomment">     * @return {@code true} if (x, y) is a valid point.</em>
<a class="jxr_linenumber" name="L154" href="#L154">154</a> <em class="jxr_javadoccomment">     * @since 3.3</em>
<a class="jxr_linenumber" name="L155" href="#L155">155</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L156" href="#L156">156</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">boolean</strong> isValidPoint(<strong class="jxr_keyword">double</strong> x,
<a class="jxr_linenumber" name="L157" href="#L157">157</a>                                 <strong class="jxr_keyword">double</strong> y) {
<a class="jxr_linenumber" name="L158" href="#L158">158</a>         <strong class="jxr_keyword">if</strong> (x &lt; xval[0] ||
<a class="jxr_linenumber" name="L159" href="#L159">159</a>             x &gt; xval[xval.length - 1] ||
<a class="jxr_linenumber" name="L160" href="#L160">160</a>             y &lt; yval[0] ||
<a class="jxr_linenumber" name="L161" href="#L161">161</a>             y &gt; yval[yval.length - 1]) {
<a class="jxr_linenumber" name="L162" href="#L162">162</a>             <strong class="jxr_keyword">return</strong> false;
<a class="jxr_linenumber" name="L163" href="#L163">163</a>         } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L164" href="#L164">164</a>             <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">true</strong>;
<a class="jxr_linenumber" name="L165" href="#L165">165</a>         }
<a class="jxr_linenumber" name="L166" href="#L166">166</a>     }
<a class="jxr_linenumber" name="L167" href="#L167">167</a> 
<a class="jxr_linenumber" name="L168" href="#L168">168</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L169" href="#L169">169</a> <em class="jxr_javadoccomment">     * @param c Coordinate.</em>
<a class="jxr_linenumber" name="L170" href="#L170">170</a> <em class="jxr_javadoccomment">     * @param val Coordinate samples.</em>
<a class="jxr_linenumber" name="L171" href="#L171">171</a> <em class="jxr_javadoccomment">     * @param offset how far back from found value to offset for querying</em>
<a class="jxr_linenumber" name="L172" href="#L172">172</a> <em class="jxr_javadoccomment">     * @param count total number of elements forward from beginning that will be</em>
<a class="jxr_linenumber" name="L173" href="#L173">173</a> <em class="jxr_javadoccomment">     *        queried</em>
<a class="jxr_linenumber" name="L174" href="#L174">174</a> <em class="jxr_javadoccomment">     * @return the index in {@code val} corresponding to the interval containing</em>
<a class="jxr_linenumber" name="L175" href="#L175">175</a> <em class="jxr_javadoccomment">     *         {@code c}.</em>
<a class="jxr_linenumber" name="L176" href="#L176">176</a> <em class="jxr_javadoccomment">     * @throws OutOfRangeException if {@code c} is out of the range defined by</em>
<a class="jxr_linenumber" name="L177" href="#L177">177</a> <em class="jxr_javadoccomment">     *         the boundary values of {@code val}.</em>
<a class="jxr_linenumber" name="L178" href="#L178">178</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L179" href="#L179">179</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">int</strong> searchIndex(<strong class="jxr_keyword">double</strong> c,
<a class="jxr_linenumber" name="L180" href="#L180">180</a>                             <strong class="jxr_keyword">double</strong>[] val,
<a class="jxr_linenumber" name="L181" href="#L181">181</a>                             <strong class="jxr_keyword">int</strong> offset,
<a class="jxr_linenumber" name="L182" href="#L182">182</a>                             <strong class="jxr_keyword">int</strong> count) {
<a class="jxr_linenumber" name="L183" href="#L183">183</a>         <strong class="jxr_keyword">int</strong> r = Arrays.binarySearch(val, c);
<a class="jxr_linenumber" name="L184" href="#L184">184</a> 
<a class="jxr_linenumber" name="L185" href="#L185">185</a>         <strong class="jxr_keyword">if</strong> (r == -1 || r == -val.length - 1) {
<a class="jxr_linenumber" name="L186" href="#L186">186</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../org/apache/commons/math3/exception/OutOfRangeException.html">OutOfRangeException</a>(c, val[0], val[val.length - 1]);
<a class="jxr_linenumber" name="L187" href="#L187">187</a>         }
<a class="jxr_linenumber" name="L188" href="#L188">188</a> 
<a class="jxr_linenumber" name="L189" href="#L189">189</a>         <strong class="jxr_keyword">if</strong> (r &lt; 0) {
<a class="jxr_linenumber" name="L190" href="#L190">190</a>             <em class="jxr_comment">// "c" in within an interpolation sub-interval, which returns</em>
<a class="jxr_linenumber" name="L191" href="#L191">191</a>             <em class="jxr_comment">// negative</em>
<a class="jxr_linenumber" name="L192" href="#L192">192</a>             <em class="jxr_comment">// need to remove the negative sign for consistency</em>
<a class="jxr_linenumber" name="L193" href="#L193">193</a>             r = -r - offset - 1;
<a class="jxr_linenumber" name="L194" href="#L194">194</a>         } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L195" href="#L195">195</a>             r -= offset;
<a class="jxr_linenumber" name="L196" href="#L196">196</a>         }
<a class="jxr_linenumber" name="L197" href="#L197">197</a> 
<a class="jxr_linenumber" name="L198" href="#L198">198</a>         <strong class="jxr_keyword">if</strong> (r &lt; 0) {
<a class="jxr_linenumber" name="L199" href="#L199">199</a>             r = 0;
<a class="jxr_linenumber" name="L200" href="#L200">200</a>         }
<a class="jxr_linenumber" name="L201" href="#L201">201</a> 
<a class="jxr_linenumber" name="L202" href="#L202">202</a>         <strong class="jxr_keyword">if</strong> ((r + count) &gt;= val.length) {
<a class="jxr_linenumber" name="L203" href="#L203">203</a>             <em class="jxr_comment">// "c" is the last sample of the range: Return the index</em>
<a class="jxr_linenumber" name="L204" href="#L204">204</a>             <em class="jxr_comment">// of the sample at the lower end of the last sub-interval.</em>
<a class="jxr_linenumber" name="L205" href="#L205">205</a>             r = val.length - count;
<a class="jxr_linenumber" name="L206" href="#L206">206</a>         }
<a class="jxr_linenumber" name="L207" href="#L207">207</a> 
<a class="jxr_linenumber" name="L208" href="#L208">208</a>         <strong class="jxr_keyword">return</strong> r;
<a class="jxr_linenumber" name="L209" href="#L209">209</a>     }
<a class="jxr_linenumber" name="L210" href="#L210">210</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2003&#x2013;2016 <a href="http://www.apache.org/">The Apache Software Foundation</a>. All rights reserved.</div>
</body>
</html>
