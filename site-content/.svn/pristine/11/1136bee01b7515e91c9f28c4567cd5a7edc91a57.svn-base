<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span>package org.apache.commons.math3;<a name="line.17"></a>
<span class="sourceLineNo">018</span><a name="line.18"></a>
<span class="sourceLineNo">019</span>import java.util.Random;<a name="line.19"></a>
<span class="sourceLineNo">020</span>import java.util.concurrent.Callable;<a name="line.20"></a>
<span class="sourceLineNo">021</span>import org.apache.commons.math3.stat.descriptive.SummaryStatistics;<a name="line.21"></a>
<span class="sourceLineNo">022</span>import org.apache.commons.math3.stat.descriptive.StatisticalSummary;<a name="line.22"></a>
<span class="sourceLineNo">023</span>import org.apache.commons.math3.exception.MathIllegalStateException;<a name="line.23"></a>
<span class="sourceLineNo">024</span>import org.apache.commons.math3.exception.util.LocalizedFormats;<a name="line.24"></a>
<span class="sourceLineNo">025</span><a name="line.25"></a>
<span class="sourceLineNo">026</span>/**<a name="line.26"></a>
<span class="sourceLineNo">027</span> * Simple benchmarking utilities.<a name="line.27"></a>
<span class="sourceLineNo">028</span> */<a name="line.28"></a>
<span class="sourceLineNo">029</span>public class PerfTestUtils {<a name="line.29"></a>
<span class="sourceLineNo">030</span>    /** Nanoseconds to milliseconds conversion factor ({@value}). */<a name="line.30"></a>
<span class="sourceLineNo">031</span>    public static final double NANO_TO_MILLI = 1e-6;<a name="line.31"></a>
<span class="sourceLineNo">032</span>    /** Default number of code repeat per timed block. */<a name="line.32"></a>
<span class="sourceLineNo">033</span>    private static final int DEFAULT_REPEAT_CHUNK = 1000;<a name="line.33"></a>
<span class="sourceLineNo">034</span>    /** Default number of code repeats for computing the average run time. */<a name="line.34"></a>
<span class="sourceLineNo">035</span>    private static final int DEFAULT_REPEAT_STAT = 10000;<a name="line.35"></a>
<span class="sourceLineNo">036</span>    /** RNG. */<a name="line.36"></a>
<span class="sourceLineNo">037</span>    private static Random rng = new Random();<a name="line.37"></a>
<span class="sourceLineNo">038</span><a name="line.38"></a>
<span class="sourceLineNo">039</span>    /**<a name="line.39"></a>
<span class="sourceLineNo">040</span>     * Timing.<a name="line.40"></a>
<span class="sourceLineNo">041</span>     *<a name="line.41"></a>
<span class="sourceLineNo">042</span>     * @param repeatChunk Each timing measurement will done done for that<a name="line.42"></a>
<span class="sourceLineNo">043</span>     * number of repeats of the code.<a name="line.43"></a>
<span class="sourceLineNo">044</span>     * @param repeatStat Timing will be averaged over that number of runs.<a name="line.44"></a>
<span class="sourceLineNo">045</span>     * @param runGC Call {@code System.gc()} between each timed block. When<a name="line.45"></a>
<span class="sourceLineNo">046</span>     * set to {@code true}, the test will run much slower.<a name="line.46"></a>
<span class="sourceLineNo">047</span>     * @param methods Codes being timed.<a name="line.47"></a>
<span class="sourceLineNo">048</span>     * @return for each of the given {@code methods}, a<a name="line.48"></a>
<span class="sourceLineNo">049</span>     * {@link StatisticalSummary} of the average times (in milliseconds)<a name="line.49"></a>
<span class="sourceLineNo">050</span>     * taken by a single call to the {@code call} method (i.e. the time<a name="line.50"></a>
<span class="sourceLineNo">051</span>     * taken by each timed block divided by {@code repeatChunk}).<a name="line.51"></a>
<span class="sourceLineNo">052</span>     */<a name="line.52"></a>
<span class="sourceLineNo">053</span>    public static StatisticalSummary[] time(int repeatChunk,<a name="line.53"></a>
<span class="sourceLineNo">054</span>                                            int repeatStat,<a name="line.54"></a>
<span class="sourceLineNo">055</span>                                            boolean runGC,<a name="line.55"></a>
<span class="sourceLineNo">056</span>                                            Callable&lt;Double&gt; ... methods) {<a name="line.56"></a>
<span class="sourceLineNo">057</span>        final double[][][] times = timesAndResults(repeatChunk,<a name="line.57"></a>
<span class="sourceLineNo">058</span>                                                   repeatStat,<a name="line.58"></a>
<span class="sourceLineNo">059</span>                                                   runGC,<a name="line.59"></a>
<span class="sourceLineNo">060</span>                                                   methods);<a name="line.60"></a>
<span class="sourceLineNo">061</span><a name="line.61"></a>
<span class="sourceLineNo">062</span>        final int len = methods.length;<a name="line.62"></a>
<span class="sourceLineNo">063</span>        final StatisticalSummary[] stats = new StatisticalSummary[len];<a name="line.63"></a>
<span class="sourceLineNo">064</span>        for (int j = 0; j &lt; len; j++) {<a name="line.64"></a>
<span class="sourceLineNo">065</span>            final SummaryStatistics s = new SummaryStatistics();<a name="line.65"></a>
<span class="sourceLineNo">066</span>            for (int k = 0; k &lt; repeatStat; k++) {<a name="line.66"></a>
<span class="sourceLineNo">067</span>                s.addValue(times[j][k][0]);<a name="line.67"></a>
<span class="sourceLineNo">068</span>            }<a name="line.68"></a>
<span class="sourceLineNo">069</span>            stats[j] = s.getSummary();<a name="line.69"></a>
<span class="sourceLineNo">070</span>        }<a name="line.70"></a>
<span class="sourceLineNo">071</span><a name="line.71"></a>
<span class="sourceLineNo">072</span>        return stats;<a name="line.72"></a>
<span class="sourceLineNo">073</span>    }<a name="line.73"></a>
<span class="sourceLineNo">074</span><a name="line.74"></a>
<span class="sourceLineNo">075</span>    /**<a name="line.75"></a>
<span class="sourceLineNo">076</span>     * Timing.<a name="line.76"></a>
<span class="sourceLineNo">077</span>     *<a name="line.77"></a>
<span class="sourceLineNo">078</span>     * @param repeatChunk Each timing measurement will done done for that<a name="line.78"></a>
<span class="sourceLineNo">079</span>     * number of repeats of the code.<a name="line.79"></a>
<span class="sourceLineNo">080</span>     * @param repeatStat Timing will be averaged over that number of runs.<a name="line.80"></a>
<span class="sourceLineNo">081</span>     * @param runGC Call {@code System.gc()} between each timed block. When<a name="line.81"></a>
<span class="sourceLineNo">082</span>     * set to {@code true}, the test will run much slower.<a name="line.82"></a>
<span class="sourceLineNo">083</span>     * @param methods Codes being timed.<a name="line.83"></a>
<span class="sourceLineNo">084</span>     * @return for each of the given {@code methods} (first dimension), and<a name="line.84"></a>
<span class="sourceLineNo">085</span>     * each of the {@code repeatStat} runs (second dimension):<a name="line.85"></a>
<span class="sourceLineNo">086</span>     * &lt;ul&gt;<a name="line.86"></a>
<span class="sourceLineNo">087</span>     *  &lt;li&gt;<a name="line.87"></a>
<span class="sourceLineNo">088</span>     *   the average time (in milliseconds) taken by a single call to the<a name="line.88"></a>
<span class="sourceLineNo">089</span>     *   {@code call} method (i.e. the time taken by each timed block divided<a name="line.89"></a>
<span class="sourceLineNo">090</span>     *   by {@code repeatChunk})<a name="line.90"></a>
<span class="sourceLineNo">091</span>     *  &lt;/li&gt;<a name="line.91"></a>
<span class="sourceLineNo">092</span>     *  &lt;li&gt;<a name="line.92"></a>
<span class="sourceLineNo">093</span>     *   the result returned by the {@code call} method.<a name="line.93"></a>
<span class="sourceLineNo">094</span>     *  &lt;/li&gt;<a name="line.94"></a>
<span class="sourceLineNo">095</span>     * &lt;/ul&gt;<a name="line.95"></a>
<span class="sourceLineNo">096</span>     */<a name="line.96"></a>
<span class="sourceLineNo">097</span>    public static double[][][] timesAndResults(int repeatChunk,<a name="line.97"></a>
<span class="sourceLineNo">098</span>                                               int repeatStat,<a name="line.98"></a>
<span class="sourceLineNo">099</span>                                               boolean runGC,<a name="line.99"></a>
<span class="sourceLineNo">100</span>                                               Callable&lt;Double&gt; ... methods) {<a name="line.100"></a>
<span class="sourceLineNo">101</span>        final int numMethods = methods.length;<a name="line.101"></a>
<span class="sourceLineNo">102</span>        final double[][][] timesAndResults = new double[numMethods][repeatStat][2];<a name="line.102"></a>
<span class="sourceLineNo">103</span><a name="line.103"></a>
<span class="sourceLineNo">104</span>        try {<a name="line.104"></a>
<span class="sourceLineNo">105</span>            for (int k = 0; k &lt; repeatStat; k++) {<a name="line.105"></a>
<span class="sourceLineNo">106</span>                for (int j = 0; j &lt; numMethods; j++) {<a name="line.106"></a>
<span class="sourceLineNo">107</span>                    if (runGC) {<a name="line.107"></a>
<span class="sourceLineNo">108</span>                        // Try to perform GC outside the timed block.<a name="line.108"></a>
<span class="sourceLineNo">109</span>                        System.gc();<a name="line.109"></a>
<span class="sourceLineNo">110</span>                    }<a name="line.110"></a>
<span class="sourceLineNo">111</span><a name="line.111"></a>
<span class="sourceLineNo">112</span>                    final Callable&lt;Double&gt; r = methods[j];<a name="line.112"></a>
<span class="sourceLineNo">113</span>                    final double[] result = new double[repeatChunk];<a name="line.113"></a>
<span class="sourceLineNo">114</span><a name="line.114"></a>
<span class="sourceLineNo">115</span>                    // Timed block.<a name="line.115"></a>
<span class="sourceLineNo">116</span>                    final long start = System.nanoTime();<a name="line.116"></a>
<span class="sourceLineNo">117</span>                    for (int i = 0; i &lt; repeatChunk; i++) {<a name="line.117"></a>
<span class="sourceLineNo">118</span>                        result[i] = r.call().doubleValue();<a name="line.118"></a>
<span class="sourceLineNo">119</span>                    }<a name="line.119"></a>
<span class="sourceLineNo">120</span>                    final long stop = System.nanoTime();<a name="line.120"></a>
<span class="sourceLineNo">121</span><a name="line.121"></a>
<span class="sourceLineNo">122</span>                    // Collect run time.<a name="line.122"></a>
<span class="sourceLineNo">123</span>                    timesAndResults[j][k][0] = (stop - start) * NANO_TO_MILLI;<a name="line.123"></a>
<span class="sourceLineNo">124</span>                    // Keep track of a randomly selected result.<a name="line.124"></a>
<span class="sourceLineNo">125</span>                    timesAndResults[j][k][1] = result[rng.nextInt(repeatChunk)];<a name="line.125"></a>
<span class="sourceLineNo">126</span>                }<a name="line.126"></a>
<span class="sourceLineNo">127</span>            }<a name="line.127"></a>
<span class="sourceLineNo">128</span>        } catch (Exception e) {<a name="line.128"></a>
<span class="sourceLineNo">129</span>            // Abort benchmarking if codes throw exceptions.<a name="line.129"></a>
<span class="sourceLineNo">130</span>            throw new MathIllegalStateException(LocalizedFormats.SIMPLE_MESSAGE, e.getMessage());<a name="line.130"></a>
<span class="sourceLineNo">131</span>        }<a name="line.131"></a>
<span class="sourceLineNo">132</span><a name="line.132"></a>
<span class="sourceLineNo">133</span>        final double normFactor = 1d / repeatChunk;<a name="line.133"></a>
<span class="sourceLineNo">134</span>        for (int j = 0; j &lt; numMethods; j++) {<a name="line.134"></a>
<span class="sourceLineNo">135</span>            for (int k = 0; k &lt; repeatStat; k++) {<a name="line.135"></a>
<span class="sourceLineNo">136</span>                timesAndResults[j][k][0] *= normFactor;<a name="line.136"></a>
<span class="sourceLineNo">137</span>            }<a name="line.137"></a>
<span class="sourceLineNo">138</span>        }<a name="line.138"></a>
<span class="sourceLineNo">139</span><a name="line.139"></a>
<span class="sourceLineNo">140</span>        return timesAndResults;<a name="line.140"></a>
<span class="sourceLineNo">141</span>    }<a name="line.141"></a>
<span class="sourceLineNo">142</span><a name="line.142"></a>
<span class="sourceLineNo">143</span>    /**<a name="line.143"></a>
<span class="sourceLineNo">144</span>     * Timing and report (to standard output) the average time and standard<a name="line.144"></a>
<span class="sourceLineNo">145</span>     * deviation of a single call.<a name="line.145"></a>
<span class="sourceLineNo">146</span>     * The timing is performed by calling the<a name="line.146"></a>
<span class="sourceLineNo">147</span>     * {@link #time(int,int,boolean,Callable[]) time} method.<a name="line.147"></a>
<span class="sourceLineNo">148</span>     *<a name="line.148"></a>
<span class="sourceLineNo">149</span>     * @param title Title of the test (for the report).<a name="line.149"></a>
<span class="sourceLineNo">150</span>     * @param repeatChunk Each timing measurement will done done for that<a name="line.150"></a>
<span class="sourceLineNo">151</span>     * number of repeats of the code.<a name="line.151"></a>
<span class="sourceLineNo">152</span>     * @param repeatStat Timing will be averaged over that number of runs.<a name="line.152"></a>
<span class="sourceLineNo">153</span>     * @param runGC Call {@code System.gc()} between each timed block. When<a name="line.153"></a>
<span class="sourceLineNo">154</span>     * set to {@code true}, the test will run much slower.<a name="line.154"></a>
<span class="sourceLineNo">155</span>     * @param methods Codes being timed.<a name="line.155"></a>
<span class="sourceLineNo">156</span>     * @return for each of the given {@code methods}, a statistics of the<a name="line.156"></a>
<span class="sourceLineNo">157</span>     * average times (in milliseconds) taken by a single call to the<a name="line.157"></a>
<span class="sourceLineNo">158</span>     * {@code call} method (i.e. the time taken by each timed block divided<a name="line.158"></a>
<span class="sourceLineNo">159</span>     * by {@code repeatChunk}).<a name="line.159"></a>
<span class="sourceLineNo">160</span>     */<a name="line.160"></a>
<span class="sourceLineNo">161</span>    @SuppressWarnings("boxing")<a name="line.161"></a>
<span class="sourceLineNo">162</span>    public static StatisticalSummary[] timeAndReport(String title,<a name="line.162"></a>
<span class="sourceLineNo">163</span>                                                     int repeatChunk,<a name="line.163"></a>
<span class="sourceLineNo">164</span>                                                     int repeatStat,<a name="line.164"></a>
<span class="sourceLineNo">165</span>                                                     boolean runGC,<a name="line.165"></a>
<span class="sourceLineNo">166</span>                                                     RunTest ... methods) {<a name="line.166"></a>
<span class="sourceLineNo">167</span>        // Header format.<a name="line.167"></a>
<span class="sourceLineNo">168</span>        final String hFormat = "%s (calls per timed block: %d, timed blocks: %d, time unit: ms)";<a name="line.168"></a>
<span class="sourceLineNo">169</span><a name="line.169"></a>
<span class="sourceLineNo">170</span>        // Width of the longest name.<a name="line.170"></a>
<span class="sourceLineNo">171</span>        int nameLength = 0;<a name="line.171"></a>
<span class="sourceLineNo">172</span>        for (RunTest m : methods) {<a name="line.172"></a>
<span class="sourceLineNo">173</span>            int len = m.getName().length();<a name="line.173"></a>
<span class="sourceLineNo">174</span>            if (len &gt; nameLength) {<a name="line.174"></a>
<span class="sourceLineNo">175</span>                nameLength = len;<a name="line.175"></a>
<span class="sourceLineNo">176</span>            }<a name="line.176"></a>
<span class="sourceLineNo">177</span>        }<a name="line.177"></a>
<span class="sourceLineNo">178</span>        final String nameLengthFormat = "%" + nameLength + "s";<a name="line.178"></a>
<span class="sourceLineNo">179</span><a name="line.179"></a>
<span class="sourceLineNo">180</span>        // Column format.<a name="line.180"></a>
<span class="sourceLineNo">181</span>        final String cFormat = nameLengthFormat + " %14s %14s %10s %10s %15s";<a name="line.181"></a>
<span class="sourceLineNo">182</span>        // Result format.<a name="line.182"></a>
<span class="sourceLineNo">183</span>        final String format = nameLengthFormat + " %.8e %.8e %.4e %.4e % .8e";<a name="line.183"></a>
<span class="sourceLineNo">184</span><a name="line.184"></a>
<span class="sourceLineNo">185</span>        System.out.println(String.format(hFormat,<a name="line.185"></a>
<span class="sourceLineNo">186</span>                                         title,<a name="line.186"></a>
<span class="sourceLineNo">187</span>                                         repeatChunk,<a name="line.187"></a>
<span class="sourceLineNo">188</span>                                         repeatStat));<a name="line.188"></a>
<span class="sourceLineNo">189</span>        System.out.println(String.format(cFormat,<a name="line.189"></a>
<span class="sourceLineNo">190</span>                                         "name",<a name="line.190"></a>
<span class="sourceLineNo">191</span>                                         "time/call",<a name="line.191"></a>
<span class="sourceLineNo">192</span>                                         "std error",<a name="line.192"></a>
<span class="sourceLineNo">193</span>                                         "total time",<a name="line.193"></a>
<span class="sourceLineNo">194</span>                                         "ratio",<a name="line.194"></a>
<span class="sourceLineNo">195</span>                                         "difference"));<a name="line.195"></a>
<span class="sourceLineNo">196</span>        final StatisticalSummary[] time = time(repeatChunk,<a name="line.196"></a>
<span class="sourceLineNo">197</span>                                               repeatStat,<a name="line.197"></a>
<span class="sourceLineNo">198</span>                                               runGC,<a name="line.198"></a>
<span class="sourceLineNo">199</span>                                               methods);<a name="line.199"></a>
<span class="sourceLineNo">200</span>        final double refSum = time[0].getSum() * repeatChunk;<a name="line.200"></a>
<span class="sourceLineNo">201</span>        for (int i = 0, max = time.length; i &lt; max; i++) {<a name="line.201"></a>
<span class="sourceLineNo">202</span>            final StatisticalSummary s = time[i];<a name="line.202"></a>
<span class="sourceLineNo">203</span>            final double sum = s.getSum() * repeatChunk;<a name="line.203"></a>
<span class="sourceLineNo">204</span>            System.out.println(String.format(format,<a name="line.204"></a>
<span class="sourceLineNo">205</span>                                             methods[i].getName(),<a name="line.205"></a>
<span class="sourceLineNo">206</span>                                             s.getMean(),<a name="line.206"></a>
<span class="sourceLineNo">207</span>                                             s.getStandardDeviation(),<a name="line.207"></a>
<span class="sourceLineNo">208</span>                                             sum,<a name="line.208"></a>
<span class="sourceLineNo">209</span>                                             sum / refSum,<a name="line.209"></a>
<span class="sourceLineNo">210</span>                                             sum - refSum));<a name="line.210"></a>
<span class="sourceLineNo">211</span>        }<a name="line.211"></a>
<span class="sourceLineNo">212</span><a name="line.212"></a>
<span class="sourceLineNo">213</span>        return time;<a name="line.213"></a>
<span class="sourceLineNo">214</span>    }<a name="line.214"></a>
<span class="sourceLineNo">215</span><a name="line.215"></a>
<span class="sourceLineNo">216</span>    /**<a name="line.216"></a>
<span class="sourceLineNo">217</span>     * Timing and report (to standard output).<a name="line.217"></a>
<span class="sourceLineNo">218</span>     * This method calls {@link #timeAndReport(String,int,int,boolean,RunTest[])<a name="line.218"></a>
<span class="sourceLineNo">219</span>     * timeAndReport(title, 1000, 10000, false, methods)}.<a name="line.219"></a>
<span class="sourceLineNo">220</span>     *<a name="line.220"></a>
<span class="sourceLineNo">221</span>     * @param title Title of the test (for the report).<a name="line.221"></a>
<span class="sourceLineNo">222</span>     * @param methods Codes being timed.<a name="line.222"></a>
<span class="sourceLineNo">223</span>     * @return for each of the given {@code methods}, a statistics of the<a name="line.223"></a>
<span class="sourceLineNo">224</span>     * average times (in milliseconds) taken by a single call to the<a name="line.224"></a>
<span class="sourceLineNo">225</span>     * {@code call} method (i.e. the time taken by each timed block divided<a name="line.225"></a>
<span class="sourceLineNo">226</span>     * by {@code repeatChunk}).<a name="line.226"></a>
<span class="sourceLineNo">227</span>     */<a name="line.227"></a>
<span class="sourceLineNo">228</span>    public static StatisticalSummary[] timeAndReport(String title,<a name="line.228"></a>
<span class="sourceLineNo">229</span>                                                     RunTest ... methods) {<a name="line.229"></a>
<span class="sourceLineNo">230</span>        return timeAndReport(title,<a name="line.230"></a>
<span class="sourceLineNo">231</span>                             DEFAULT_REPEAT_CHUNK,<a name="line.231"></a>
<span class="sourceLineNo">232</span>                             DEFAULT_REPEAT_STAT,<a name="line.232"></a>
<span class="sourceLineNo">233</span>                             false,<a name="line.233"></a>
<span class="sourceLineNo">234</span>                             methods);<a name="line.234"></a>
<span class="sourceLineNo">235</span>    }<a name="line.235"></a>
<span class="sourceLineNo">236</span><a name="line.236"></a>
<span class="sourceLineNo">237</span>    /**<a name="line.237"></a>
<span class="sourceLineNo">238</span>     * Utility class for storing a test label.<a name="line.238"></a>
<span class="sourceLineNo">239</span>     */<a name="line.239"></a>
<span class="sourceLineNo">240</span>    public static abstract class RunTest implements Callable&lt;Double&gt; {<a name="line.240"></a>
<span class="sourceLineNo">241</span>        private final String name;<a name="line.241"></a>
<span class="sourceLineNo">242</span><a name="line.242"></a>
<span class="sourceLineNo">243</span>        /**<a name="line.243"></a>
<span class="sourceLineNo">244</span>         * @param name Test name.<a name="line.244"></a>
<span class="sourceLineNo">245</span>         */<a name="line.245"></a>
<span class="sourceLineNo">246</span>        public RunTest(String name) {<a name="line.246"></a>
<span class="sourceLineNo">247</span>            this.name = name;<a name="line.247"></a>
<span class="sourceLineNo">248</span>        }<a name="line.248"></a>
<span class="sourceLineNo">249</span><a name="line.249"></a>
<span class="sourceLineNo">250</span>        /**<a name="line.250"></a>
<span class="sourceLineNo">251</span>         * @return the name of this test.<a name="line.251"></a>
<span class="sourceLineNo">252</span>         */<a name="line.252"></a>
<span class="sourceLineNo">253</span>        public String getName() {<a name="line.253"></a>
<span class="sourceLineNo">254</span>            return name;<a name="line.254"></a>
<span class="sourceLineNo">255</span>        }<a name="line.255"></a>
<span class="sourceLineNo">256</span><a name="line.256"></a>
<span class="sourceLineNo">257</span>        /** {@inheritDoc} */<a name="line.257"></a>
<span class="sourceLineNo">258</span>        public abstract Double call() throws Exception;<a name="line.258"></a>
<span class="sourceLineNo">259</span>    }<a name="line.259"></a>
<span class="sourceLineNo">260</span>}<a name="line.260"></a>




























































</pre>
</div>
</body>
</html>
