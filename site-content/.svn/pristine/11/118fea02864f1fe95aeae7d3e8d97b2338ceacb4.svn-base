<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span><a name="line.17"></a>
<span class="sourceLineNo">018</span>package org.apache.commons.math3.ode.nonstiff;<a name="line.18"></a>
<span class="sourceLineNo">019</span><a name="line.19"></a>
<span class="sourceLineNo">020</span><a name="line.20"></a>
<span class="sourceLineNo">021</span>import org.apache.commons.math3.exception.DimensionMismatchException;<a name="line.21"></a>
<span class="sourceLineNo">022</span>import org.apache.commons.math3.exception.MaxCountExceededException;<a name="line.22"></a>
<span class="sourceLineNo">023</span>import org.apache.commons.math3.exception.NoBracketingException;<a name="line.23"></a>
<span class="sourceLineNo">024</span>import org.apache.commons.math3.exception.NumberIsTooSmallException;<a name="line.24"></a>
<span class="sourceLineNo">025</span>import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;<a name="line.25"></a>
<span class="sourceLineNo">026</span>import org.apache.commons.math3.ode.FirstOrderIntegrator;<a name="line.26"></a>
<span class="sourceLineNo">027</span>import org.apache.commons.math3.ode.TestProblem1;<a name="line.27"></a>
<span class="sourceLineNo">028</span>import org.apache.commons.math3.ode.TestProblem3;<a name="line.28"></a>
<span class="sourceLineNo">029</span>import org.apache.commons.math3.ode.TestProblem5;<a name="line.29"></a>
<span class="sourceLineNo">030</span>import org.apache.commons.math3.ode.TestProblemAbstract;<a name="line.30"></a>
<span class="sourceLineNo">031</span>import org.apache.commons.math3.ode.TestProblemFactory;<a name="line.31"></a>
<span class="sourceLineNo">032</span>import org.apache.commons.math3.ode.TestProblemHandler;<a name="line.32"></a>
<span class="sourceLineNo">033</span>import org.apache.commons.math3.ode.events.EventHandler;<a name="line.33"></a>
<span class="sourceLineNo">034</span>import org.apache.commons.math3.ode.sampling.StepHandler;<a name="line.34"></a>
<span class="sourceLineNo">035</span>import org.apache.commons.math3.ode.sampling.StepInterpolator;<a name="line.35"></a>
<span class="sourceLineNo">036</span>import org.apache.commons.math3.util.FastMath;<a name="line.36"></a>
<span class="sourceLineNo">037</span>import org.junit.Assert;<a name="line.37"></a>
<span class="sourceLineNo">038</span>import org.junit.Test;<a name="line.38"></a>
<span class="sourceLineNo">039</span><a name="line.39"></a>
<span class="sourceLineNo">040</span>public class ThreeEighthesIntegratorTest {<a name="line.40"></a>
<span class="sourceLineNo">041</span><a name="line.41"></a>
<span class="sourceLineNo">042</span>  @Test(expected=DimensionMismatchException.class)<a name="line.42"></a>
<span class="sourceLineNo">043</span>  public void testDimensionCheck()<a name="line.43"></a>
<span class="sourceLineNo">044</span>      throws DimensionMismatchException, NumberIsTooSmallException,<a name="line.44"></a>
<span class="sourceLineNo">045</span>             MaxCountExceededException, NoBracketingException {<a name="line.45"></a>
<span class="sourceLineNo">046</span>      TestProblem1 pb = new TestProblem1();<a name="line.46"></a>
<span class="sourceLineNo">047</span>      new ThreeEighthesIntegrator(0.01).integrate(pb,<a name="line.47"></a>
<span class="sourceLineNo">048</span>                                                  0.0, new double[pb.getDimension()+10],<a name="line.48"></a>
<span class="sourceLineNo">049</span>                                                  1.0, new double[pb.getDimension()+10]);<a name="line.49"></a>
<span class="sourceLineNo">050</span>        Assert.fail("an exception should have been thrown");<a name="line.50"></a>
<span class="sourceLineNo">051</span>  }<a name="line.51"></a>
<span class="sourceLineNo">052</span><a name="line.52"></a>
<span class="sourceLineNo">053</span>  @Test<a name="line.53"></a>
<span class="sourceLineNo">054</span>  public void testDecreasingSteps()<a name="line.54"></a>
<span class="sourceLineNo">055</span>      throws DimensionMismatchException, NumberIsTooSmallException,<a name="line.55"></a>
<span class="sourceLineNo">056</span>             MaxCountExceededException, NoBracketingException {<a name="line.56"></a>
<span class="sourceLineNo">057</span><a name="line.57"></a>
<span class="sourceLineNo">058</span>    TestProblemAbstract[] problems = TestProblemFactory.getProblems();<a name="line.58"></a>
<span class="sourceLineNo">059</span>    for (int k = 0; k &lt; problems.length; ++k) {<a name="line.59"></a>
<span class="sourceLineNo">060</span><a name="line.60"></a>
<span class="sourceLineNo">061</span>      double previousValueError = Double.NaN;<a name="line.61"></a>
<span class="sourceLineNo">062</span>      double previousTimeError = Double.NaN;<a name="line.62"></a>
<span class="sourceLineNo">063</span>      for (int i = 4; i &lt; 10; ++i) {<a name="line.63"></a>
<span class="sourceLineNo">064</span><a name="line.64"></a>
<span class="sourceLineNo">065</span>        TestProblemAbstract pb = problems[k].copy();<a name="line.65"></a>
<span class="sourceLineNo">066</span>        double step = (pb.getFinalTime() - pb.getInitialTime()) * FastMath.pow(2.0, -i);<a name="line.66"></a>
<span class="sourceLineNo">067</span><a name="line.67"></a>
<span class="sourceLineNo">068</span>        FirstOrderIntegrator integ = new ThreeEighthesIntegrator(step);<a name="line.68"></a>
<span class="sourceLineNo">069</span>        TestProblemHandler handler = new TestProblemHandler(pb, integ);<a name="line.69"></a>
<span class="sourceLineNo">070</span>        integ.addStepHandler(handler);<a name="line.70"></a>
<span class="sourceLineNo">071</span>        EventHandler[] functions = pb.getEventsHandlers();<a name="line.71"></a>
<span class="sourceLineNo">072</span>        for (int l = 0; l &lt; functions.length; ++l) {<a name="line.72"></a>
<span class="sourceLineNo">073</span>          integ.addEventHandler(functions[l],<a name="line.73"></a>
<span class="sourceLineNo">074</span>                                     Double.POSITIVE_INFINITY, 1.0e-6 * step, 1000);<a name="line.74"></a>
<span class="sourceLineNo">075</span>        }<a name="line.75"></a>
<span class="sourceLineNo">076</span>        double stopTime = integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),<a name="line.76"></a>
<span class="sourceLineNo">077</span>                                          pb.getFinalTime(), new double[pb.getDimension()]);<a name="line.77"></a>
<span class="sourceLineNo">078</span>        if (functions.length == 0) {<a name="line.78"></a>
<span class="sourceLineNo">079</span>            Assert.assertEquals(pb.getFinalTime(), stopTime, 1.0e-10);<a name="line.79"></a>
<span class="sourceLineNo">080</span>        }<a name="line.80"></a>
<span class="sourceLineNo">081</span><a name="line.81"></a>
<span class="sourceLineNo">082</span>        double error = handler.getMaximalValueError();<a name="line.82"></a>
<span class="sourceLineNo">083</span>        if (i &gt; 4) {<a name="line.83"></a>
<span class="sourceLineNo">084</span>          Assert.assertTrue(error &lt; 1.01 * FastMath.abs(previousValueError));<a name="line.84"></a>
<span class="sourceLineNo">085</span>        }<a name="line.85"></a>
<span class="sourceLineNo">086</span>        previousValueError = error;<a name="line.86"></a>
<span class="sourceLineNo">087</span><a name="line.87"></a>
<span class="sourceLineNo">088</span>        double timeError = handler.getMaximalTimeError();<a name="line.88"></a>
<span class="sourceLineNo">089</span>        if (i &gt; 4) {<a name="line.89"></a>
<span class="sourceLineNo">090</span>          Assert.assertTrue(timeError &lt;= FastMath.abs(previousTimeError));<a name="line.90"></a>
<span class="sourceLineNo">091</span>        }<a name="line.91"></a>
<span class="sourceLineNo">092</span>        previousTimeError = timeError;<a name="line.92"></a>
<span class="sourceLineNo">093</span><a name="line.93"></a>
<span class="sourceLineNo">094</span>      }<a name="line.94"></a>
<span class="sourceLineNo">095</span><a name="line.95"></a>
<span class="sourceLineNo">096</span>    }<a name="line.96"></a>
<span class="sourceLineNo">097</span><a name="line.97"></a>
<span class="sourceLineNo">098</span>  }<a name="line.98"></a>
<span class="sourceLineNo">099</span><a name="line.99"></a>
<span class="sourceLineNo">100</span> @Test<a name="line.100"></a>
<span class="sourceLineNo">101</span> public void testSmallStep()<a name="line.101"></a>
<span class="sourceLineNo">102</span>     throws DimensionMismatchException, NumberIsTooSmallException,<a name="line.102"></a>
<span class="sourceLineNo">103</span>            MaxCountExceededException, NoBracketingException {<a name="line.103"></a>
<span class="sourceLineNo">104</span><a name="line.104"></a>
<span class="sourceLineNo">105</span>    TestProblem1 pb = new TestProblem1();<a name="line.105"></a>
<span class="sourceLineNo">106</span>    double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.001;<a name="line.106"></a>
<span class="sourceLineNo">107</span><a name="line.107"></a>
<span class="sourceLineNo">108</span>    FirstOrderIntegrator integ = new ThreeEighthesIntegrator(step);<a name="line.108"></a>
<span class="sourceLineNo">109</span>    TestProblemHandler handler = new TestProblemHandler(pb, integ);<a name="line.109"></a>
<span class="sourceLineNo">110</span>    integ.addStepHandler(handler);<a name="line.110"></a>
<span class="sourceLineNo">111</span>    integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),<a name="line.111"></a>
<span class="sourceLineNo">112</span>                    pb.getFinalTime(), new double[pb.getDimension()]);<a name="line.112"></a>
<span class="sourceLineNo">113</span><a name="line.113"></a>
<span class="sourceLineNo">114</span>    Assert.assertTrue(handler.getLastError() &lt; 2.0e-13);<a name="line.114"></a>
<span class="sourceLineNo">115</span>    Assert.assertTrue(handler.getMaximalValueError() &lt; 4.0e-12);<a name="line.115"></a>
<span class="sourceLineNo">116</span>    Assert.assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);<a name="line.116"></a>
<span class="sourceLineNo">117</span>    Assert.assertEquals("3/8", integ.getName());<a name="line.117"></a>
<span class="sourceLineNo">118</span><a name="line.118"></a>
<span class="sourceLineNo">119</span>  }<a name="line.119"></a>
<span class="sourceLineNo">120</span><a name="line.120"></a>
<span class="sourceLineNo">121</span>  @Test<a name="line.121"></a>
<span class="sourceLineNo">122</span>  public void testBigStep()<a name="line.122"></a>
<span class="sourceLineNo">123</span>      throws DimensionMismatchException, NumberIsTooSmallException,<a name="line.123"></a>
<span class="sourceLineNo">124</span>             MaxCountExceededException, NoBracketingException {<a name="line.124"></a>
<span class="sourceLineNo">125</span><a name="line.125"></a>
<span class="sourceLineNo">126</span>    TestProblem1 pb = new TestProblem1();<a name="line.126"></a>
<span class="sourceLineNo">127</span>    double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.2;<a name="line.127"></a>
<span class="sourceLineNo">128</span><a name="line.128"></a>
<span class="sourceLineNo">129</span>    FirstOrderIntegrator integ = new ThreeEighthesIntegrator(step);<a name="line.129"></a>
<span class="sourceLineNo">130</span>    TestProblemHandler handler = new TestProblemHandler(pb, integ);<a name="line.130"></a>
<span class="sourceLineNo">131</span>    integ.addStepHandler(handler);<a name="line.131"></a>
<span class="sourceLineNo">132</span>    integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),<a name="line.132"></a>
<span class="sourceLineNo">133</span>                    pb.getFinalTime(), new double[pb.getDimension()]);<a name="line.133"></a>
<span class="sourceLineNo">134</span><a name="line.134"></a>
<span class="sourceLineNo">135</span>    Assert.assertTrue(handler.getLastError() &gt; 0.0004);<a name="line.135"></a>
<span class="sourceLineNo">136</span>    Assert.assertTrue(handler.getMaximalValueError() &gt; 0.005);<a name="line.136"></a>
<span class="sourceLineNo">137</span>    Assert.assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);<a name="line.137"></a>
<span class="sourceLineNo">138</span><a name="line.138"></a>
<span class="sourceLineNo">139</span>  }<a name="line.139"></a>
<span class="sourceLineNo">140</span><a name="line.140"></a>
<span class="sourceLineNo">141</span>  @Test<a name="line.141"></a>
<span class="sourceLineNo">142</span>  public void testBackward()<a name="line.142"></a>
<span class="sourceLineNo">143</span>      throws DimensionMismatchException, NumberIsTooSmallException,<a name="line.143"></a>
<span class="sourceLineNo">144</span>             MaxCountExceededException, NoBracketingException {<a name="line.144"></a>
<span class="sourceLineNo">145</span><a name="line.145"></a>
<span class="sourceLineNo">146</span>      TestProblem5 pb = new TestProblem5();<a name="line.146"></a>
<span class="sourceLineNo">147</span>      double step = FastMath.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.001;<a name="line.147"></a>
<span class="sourceLineNo">148</span><a name="line.148"></a>
<span class="sourceLineNo">149</span>      FirstOrderIntegrator integ = new ThreeEighthesIntegrator(step);<a name="line.149"></a>
<span class="sourceLineNo">150</span>      TestProblemHandler handler = new TestProblemHandler(pb, integ);<a name="line.150"></a>
<span class="sourceLineNo">151</span>      integ.addStepHandler(handler);<a name="line.151"></a>
<span class="sourceLineNo">152</span>      integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),<a name="line.152"></a>
<span class="sourceLineNo">153</span>                      pb.getFinalTime(), new double[pb.getDimension()]);<a name="line.153"></a>
<span class="sourceLineNo">154</span><a name="line.154"></a>
<span class="sourceLineNo">155</span>      Assert.assertTrue(handler.getLastError() &lt; 5.0e-10);<a name="line.155"></a>
<span class="sourceLineNo">156</span>      Assert.assertTrue(handler.getMaximalValueError() &lt; 7.0e-10);<a name="line.156"></a>
<span class="sourceLineNo">157</span>      Assert.assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);<a name="line.157"></a>
<span class="sourceLineNo">158</span>      Assert.assertEquals("3/8", integ.getName());<a name="line.158"></a>
<span class="sourceLineNo">159</span>  }<a name="line.159"></a>
<span class="sourceLineNo">160</span><a name="line.160"></a>
<span class="sourceLineNo">161</span>  @Test<a name="line.161"></a>
<span class="sourceLineNo">162</span>  public void testKepler()<a name="line.162"></a>
<span class="sourceLineNo">163</span>      throws DimensionMismatchException, NumberIsTooSmallException,<a name="line.163"></a>
<span class="sourceLineNo">164</span>             MaxCountExceededException, NoBracketingException {<a name="line.164"></a>
<span class="sourceLineNo">165</span><a name="line.165"></a>
<span class="sourceLineNo">166</span>    final TestProblem3 pb  = new TestProblem3(0.9);<a name="line.166"></a>
<span class="sourceLineNo">167</span>    double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.0003;<a name="line.167"></a>
<span class="sourceLineNo">168</span><a name="line.168"></a>
<span class="sourceLineNo">169</span>    FirstOrderIntegrator integ = new ThreeEighthesIntegrator(step);<a name="line.169"></a>
<span class="sourceLineNo">170</span>    integ.addStepHandler(new KeplerHandler(pb));<a name="line.170"></a>
<span class="sourceLineNo">171</span>    integ.integrate(pb,<a name="line.171"></a>
<span class="sourceLineNo">172</span>                    pb.getInitialTime(), pb.getInitialState(),<a name="line.172"></a>
<span class="sourceLineNo">173</span>                    pb.getFinalTime(), new double[pb.getDimension()]);<a name="line.173"></a>
<span class="sourceLineNo">174</span>  }<a name="line.174"></a>
<span class="sourceLineNo">175</span><a name="line.175"></a>
<span class="sourceLineNo">176</span>  private static class KeplerHandler implements StepHandler {<a name="line.176"></a>
<span class="sourceLineNo">177</span><a name="line.177"></a>
<span class="sourceLineNo">178</span>    public KeplerHandler(TestProblem3 pb) {<a name="line.178"></a>
<span class="sourceLineNo">179</span>      this.pb = pb;<a name="line.179"></a>
<span class="sourceLineNo">180</span>      maxError = 0;<a name="line.180"></a>
<span class="sourceLineNo">181</span>    }<a name="line.181"></a>
<span class="sourceLineNo">182</span><a name="line.182"></a>
<span class="sourceLineNo">183</span>    public void init(double t0, double[] y0, double t) {<a name="line.183"></a>
<span class="sourceLineNo">184</span>      maxError = 0;<a name="line.184"></a>
<span class="sourceLineNo">185</span>    }<a name="line.185"></a>
<span class="sourceLineNo">186</span><a name="line.186"></a>
<span class="sourceLineNo">187</span>    public void handleStep(StepInterpolator interpolator, boolean isLast)<a name="line.187"></a>
<span class="sourceLineNo">188</span>        throws MaxCountExceededException {<a name="line.188"></a>
<span class="sourceLineNo">189</span><a name="line.189"></a>
<span class="sourceLineNo">190</span>      double[] interpolatedY = interpolator.getInterpolatedState();<a name="line.190"></a>
<span class="sourceLineNo">191</span>      double[] theoreticalY  = pb.computeTheoreticalState(interpolator.getCurrentTime());<a name="line.191"></a>
<span class="sourceLineNo">192</span>      double dx = interpolatedY[0] - theoreticalY[0];<a name="line.192"></a>
<span class="sourceLineNo">193</span>      double dy = interpolatedY[1] - theoreticalY[1];<a name="line.193"></a>
<span class="sourceLineNo">194</span>      double error = dx * dx + dy * dy;<a name="line.194"></a>
<span class="sourceLineNo">195</span>      if (error &gt; maxError) {<a name="line.195"></a>
<span class="sourceLineNo">196</span>        maxError = error;<a name="line.196"></a>
<span class="sourceLineNo">197</span>      }<a name="line.197"></a>
<span class="sourceLineNo">198</span>      if (isLast) {<a name="line.198"></a>
<span class="sourceLineNo">199</span>        // even with more than 1000 evaluations per period,<a name="line.199"></a>
<span class="sourceLineNo">200</span>        // RK4 is not able to integrate such an eccentric<a name="line.200"></a>
<span class="sourceLineNo">201</span>        // orbit with a good accuracy<a name="line.201"></a>
<span class="sourceLineNo">202</span>        Assert.assertTrue(maxError &gt; 0.005);<a name="line.202"></a>
<span class="sourceLineNo">203</span>      }<a name="line.203"></a>
<span class="sourceLineNo">204</span>    }<a name="line.204"></a>
<span class="sourceLineNo">205</span><a name="line.205"></a>
<span class="sourceLineNo">206</span>    private TestProblem3 pb;<a name="line.206"></a>
<span class="sourceLineNo">207</span>    private double maxError = 0;<a name="line.207"></a>
<span class="sourceLineNo">208</span><a name="line.208"></a>
<span class="sourceLineNo">209</span>  }<a name="line.209"></a>
<span class="sourceLineNo">210</span><a name="line.210"></a>
<span class="sourceLineNo">211</span>  @Test<a name="line.211"></a>
<span class="sourceLineNo">212</span>  public void testStepSize()<a name="line.212"></a>
<span class="sourceLineNo">213</span>      throws DimensionMismatchException, NumberIsTooSmallException,<a name="line.213"></a>
<span class="sourceLineNo">214</span>             MaxCountExceededException, NoBracketingException {<a name="line.214"></a>
<span class="sourceLineNo">215</span>      final double step = 1.23456;<a name="line.215"></a>
<span class="sourceLineNo">216</span>      FirstOrderIntegrator integ = new ThreeEighthesIntegrator(step);<a name="line.216"></a>
<span class="sourceLineNo">217</span>      integ.addStepHandler(new StepHandler() {<a name="line.217"></a>
<span class="sourceLineNo">218</span>          public void handleStep(StepInterpolator interpolator, boolean isLast) {<a name="line.218"></a>
<span class="sourceLineNo">219</span>              if (! isLast) {<a name="line.219"></a>
<span class="sourceLineNo">220</span>                  Assert.assertEquals(step,<a name="line.220"></a>
<span class="sourceLineNo">221</span>                               interpolator.getCurrentTime() - interpolator.getPreviousTime(),<a name="line.221"></a>
<span class="sourceLineNo">222</span>                               1.0e-12);<a name="line.222"></a>
<span class="sourceLineNo">223</span>              }<a name="line.223"></a>
<span class="sourceLineNo">224</span>          }<a name="line.224"></a>
<span class="sourceLineNo">225</span>          public void init(double t0, double[] y0, double t) {<a name="line.225"></a>
<span class="sourceLineNo">226</span>          }<a name="line.226"></a>
<span class="sourceLineNo">227</span>      });<a name="line.227"></a>
<span class="sourceLineNo">228</span>      integ.integrate(new FirstOrderDifferentialEquations() {<a name="line.228"></a>
<span class="sourceLineNo">229</span>          public void computeDerivatives(double t, double[] y, double[] dot) {<a name="line.229"></a>
<span class="sourceLineNo">230</span>              dot[0] = 1.0;<a name="line.230"></a>
<span class="sourceLineNo">231</span>          }<a name="line.231"></a>
<span class="sourceLineNo">232</span>          public int getDimension() {<a name="line.232"></a>
<span class="sourceLineNo">233</span>              return 1;<a name="line.233"></a>
<span class="sourceLineNo">234</span>          }<a name="line.234"></a>
<span class="sourceLineNo">235</span>      }, 0.0, new double[] { 0.0 }, 5.0, new double[1]);<a name="line.235"></a>
<span class="sourceLineNo">236</span>  }<a name="line.236"></a>
<span class="sourceLineNo">237</span><a name="line.237"></a>
<span class="sourceLineNo">238</span>}<a name="line.238"></a>




























































</pre>
</div>
</body>
</html>
