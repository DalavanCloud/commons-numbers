<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span>package org.apache.commons.math3.analysis.polynomials;<a name="line.17"></a>
<span class="sourceLineNo">018</span><a name="line.18"></a>
<span class="sourceLineNo">019</span>import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;<a name="line.19"></a>
<span class="sourceLineNo">020</span>import org.apache.commons.math3.exception.MathIllegalArgumentException;<a name="line.20"></a>
<span class="sourceLineNo">021</span>import org.junit.Assert;<a name="line.21"></a>
<span class="sourceLineNo">022</span>import org.junit.Test;<a name="line.22"></a>
<span class="sourceLineNo">023</span><a name="line.23"></a>
<span class="sourceLineNo">024</span><a name="line.24"></a>
<span class="sourceLineNo">025</span>/**<a name="line.25"></a>
<span class="sourceLineNo">026</span> * Test case for Newton form of polynomial function.<a name="line.26"></a>
<span class="sourceLineNo">027</span> * &lt;p&gt;<a name="line.27"></a>
<span class="sourceLineNo">028</span> * The small tolerance number is used only to account for round-off errors.<a name="line.28"></a>
<span class="sourceLineNo">029</span> *<a name="line.29"></a>
<span class="sourceLineNo">030</span> */<a name="line.30"></a>
<span class="sourceLineNo">031</span>public final class PolynomialFunctionNewtonFormTest {<a name="line.31"></a>
<span class="sourceLineNo">032</span><a name="line.32"></a>
<span class="sourceLineNo">033</span>    /**<a name="line.33"></a>
<span class="sourceLineNo">034</span>     * Test of polynomial for the linear function.<a name="line.34"></a>
<span class="sourceLineNo">035</span>     */<a name="line.35"></a>
<span class="sourceLineNo">036</span>    @Test<a name="line.36"></a>
<span class="sourceLineNo">037</span>    public void testLinearFunction() {<a name="line.37"></a>
<span class="sourceLineNo">038</span>        PolynomialFunctionNewtonForm p;<a name="line.38"></a>
<span class="sourceLineNo">039</span>        double coefficients[], z, expected, result, tolerance = 1E-12;<a name="line.39"></a>
<span class="sourceLineNo">040</span><a name="line.40"></a>
<span class="sourceLineNo">041</span>        // p(x) = 1.5x - 4 = 2 + 1.5(x-4)<a name="line.41"></a>
<span class="sourceLineNo">042</span>        double a[] = { 2.0, 1.5 };<a name="line.42"></a>
<span class="sourceLineNo">043</span>        double c[] = { 4.0 };<a name="line.43"></a>
<span class="sourceLineNo">044</span>        p = new PolynomialFunctionNewtonForm(a, c);<a name="line.44"></a>
<span class="sourceLineNo">045</span><a name="line.45"></a>
<span class="sourceLineNo">046</span>        z = 2.0; expected = -1.0; result = p.value(z);<a name="line.46"></a>
<span class="sourceLineNo">047</span>        Assert.assertEquals(expected, result, tolerance);<a name="line.47"></a>
<span class="sourceLineNo">048</span><a name="line.48"></a>
<span class="sourceLineNo">049</span>        z = 4.5; expected = 2.75; result = p.value(z);<a name="line.49"></a>
<span class="sourceLineNo">050</span>        Assert.assertEquals(expected, result, tolerance);<a name="line.50"></a>
<span class="sourceLineNo">051</span><a name="line.51"></a>
<span class="sourceLineNo">052</span>        z = 6.0; expected = 5.0; result = p.value(z);<a name="line.52"></a>
<span class="sourceLineNo">053</span>        Assert.assertEquals(expected, result, tolerance);<a name="line.53"></a>
<span class="sourceLineNo">054</span><a name="line.54"></a>
<span class="sourceLineNo">055</span>        Assert.assertEquals(1, p.degree());<a name="line.55"></a>
<span class="sourceLineNo">056</span><a name="line.56"></a>
<span class="sourceLineNo">057</span>        coefficients = p.getCoefficients();<a name="line.57"></a>
<span class="sourceLineNo">058</span>        Assert.assertEquals(2, coefficients.length);<a name="line.58"></a>
<span class="sourceLineNo">059</span>        Assert.assertEquals(-4.0, coefficients[0], tolerance);<a name="line.59"></a>
<span class="sourceLineNo">060</span>        Assert.assertEquals(1.5, coefficients[1], tolerance);<a name="line.60"></a>
<span class="sourceLineNo">061</span>    }<a name="line.61"></a>
<span class="sourceLineNo">062</span><a name="line.62"></a>
<span class="sourceLineNo">063</span>    /**<a name="line.63"></a>
<span class="sourceLineNo">064</span>     * Test of polynomial for the quadratic function.<a name="line.64"></a>
<span class="sourceLineNo">065</span>     */<a name="line.65"></a>
<span class="sourceLineNo">066</span>    @Test<a name="line.66"></a>
<span class="sourceLineNo">067</span>    public void testQuadraticFunction() {<a name="line.67"></a>
<span class="sourceLineNo">068</span>        PolynomialFunctionNewtonForm p;<a name="line.68"></a>
<span class="sourceLineNo">069</span>        double coefficients[], z, expected, result, tolerance = 1E-12;<a name="line.69"></a>
<span class="sourceLineNo">070</span><a name="line.70"></a>
<span class="sourceLineNo">071</span>        // p(x) = 2x^2 + 5x - 3 = 4 + 3(x-1) + 2(x-1)(x+2)<a name="line.71"></a>
<span class="sourceLineNo">072</span>        double a[] = { 4.0, 3.0, 2.0 };<a name="line.72"></a>
<span class="sourceLineNo">073</span>        double c[] = { 1.0, -2.0 };<a name="line.73"></a>
<span class="sourceLineNo">074</span>        p = new PolynomialFunctionNewtonForm(a, c);<a name="line.74"></a>
<span class="sourceLineNo">075</span><a name="line.75"></a>
<span class="sourceLineNo">076</span>        z = 1.0; expected = 4.0; result = p.value(z);<a name="line.76"></a>
<span class="sourceLineNo">077</span>        Assert.assertEquals(expected, result, tolerance);<a name="line.77"></a>
<span class="sourceLineNo">078</span><a name="line.78"></a>
<span class="sourceLineNo">079</span>        z = 2.5; expected = 22.0; result = p.value(z);<a name="line.79"></a>
<span class="sourceLineNo">080</span>        Assert.assertEquals(expected, result, tolerance);<a name="line.80"></a>
<span class="sourceLineNo">081</span><a name="line.81"></a>
<span class="sourceLineNo">082</span>        z = -2.0; expected = -5.0; result = p.value(z);<a name="line.82"></a>
<span class="sourceLineNo">083</span>        Assert.assertEquals(expected, result, tolerance);<a name="line.83"></a>
<span class="sourceLineNo">084</span><a name="line.84"></a>
<span class="sourceLineNo">085</span>        Assert.assertEquals(2, p.degree());<a name="line.85"></a>
<span class="sourceLineNo">086</span><a name="line.86"></a>
<span class="sourceLineNo">087</span>        coefficients = p.getCoefficients();<a name="line.87"></a>
<span class="sourceLineNo">088</span>        Assert.assertEquals(3, coefficients.length);<a name="line.88"></a>
<span class="sourceLineNo">089</span>        Assert.assertEquals(-3.0, coefficients[0], tolerance);<a name="line.89"></a>
<span class="sourceLineNo">090</span>        Assert.assertEquals(5.0, coefficients[1], tolerance);<a name="line.90"></a>
<span class="sourceLineNo">091</span>        Assert.assertEquals(2.0, coefficients[2], tolerance);<a name="line.91"></a>
<span class="sourceLineNo">092</span>    }<a name="line.92"></a>
<span class="sourceLineNo">093</span><a name="line.93"></a>
<span class="sourceLineNo">094</span>    /**<a name="line.94"></a>
<span class="sourceLineNo">095</span>     * Test of polynomial for the quintic function.<a name="line.95"></a>
<span class="sourceLineNo">096</span>     */<a name="line.96"></a>
<span class="sourceLineNo">097</span>    @Test<a name="line.97"></a>
<span class="sourceLineNo">098</span>    public void testQuinticFunction() {<a name="line.98"></a>
<span class="sourceLineNo">099</span>        PolynomialFunctionNewtonForm p;<a name="line.99"></a>
<span class="sourceLineNo">100</span>        double coefficients[], z, expected, result, tolerance = 1E-12;<a name="line.100"></a>
<span class="sourceLineNo">101</span><a name="line.101"></a>
<span class="sourceLineNo">102</span>        // p(x) = x^5 - x^4 - 7x^3 + x^2 + 6x<a name="line.102"></a>
<span class="sourceLineNo">103</span>        //      = 6x - 6x^2 -6x^2(x-1) + x^2(x-1)(x+1) + x^2(x-1)(x+1)(x-2)<a name="line.103"></a>
<span class="sourceLineNo">104</span>        double a[] = { 0.0, 6.0, -6.0, -6.0, 1.0, 1.0 };<a name="line.104"></a>
<span class="sourceLineNo">105</span>        double c[] = { 0.0, 0.0, 1.0, -1.0, 2.0 };<a name="line.105"></a>
<span class="sourceLineNo">106</span>        p = new PolynomialFunctionNewtonForm(a, c);<a name="line.106"></a>
<span class="sourceLineNo">107</span><a name="line.107"></a>
<span class="sourceLineNo">108</span>        z = 0.0; expected = 0.0; result = p.value(z);<a name="line.108"></a>
<span class="sourceLineNo">109</span>        Assert.assertEquals(expected, result, tolerance);<a name="line.109"></a>
<span class="sourceLineNo">110</span><a name="line.110"></a>
<span class="sourceLineNo">111</span>        z = -2.0; expected = 0.0; result = p.value(z);<a name="line.111"></a>
<span class="sourceLineNo">112</span>        Assert.assertEquals(expected, result, tolerance);<a name="line.112"></a>
<span class="sourceLineNo">113</span><a name="line.113"></a>
<span class="sourceLineNo">114</span>        z = 4.0; expected = 360.0; result = p.value(z);<a name="line.114"></a>
<span class="sourceLineNo">115</span>        Assert.assertEquals(expected, result, tolerance);<a name="line.115"></a>
<span class="sourceLineNo">116</span><a name="line.116"></a>
<span class="sourceLineNo">117</span>        Assert.assertEquals(5, p.degree());<a name="line.117"></a>
<span class="sourceLineNo">118</span><a name="line.118"></a>
<span class="sourceLineNo">119</span>        coefficients = p.getCoefficients();<a name="line.119"></a>
<span class="sourceLineNo">120</span>        Assert.assertEquals(6, coefficients.length);<a name="line.120"></a>
<span class="sourceLineNo">121</span>        Assert.assertEquals(0.0, coefficients[0], tolerance);<a name="line.121"></a>
<span class="sourceLineNo">122</span>        Assert.assertEquals(6.0, coefficients[1], tolerance);<a name="line.122"></a>
<span class="sourceLineNo">123</span>        Assert.assertEquals(1.0, coefficients[2], tolerance);<a name="line.123"></a>
<span class="sourceLineNo">124</span>        Assert.assertEquals(-7.0, coefficients[3], tolerance);<a name="line.124"></a>
<span class="sourceLineNo">125</span>        Assert.assertEquals(-1.0, coefficients[4], tolerance);<a name="line.125"></a>
<span class="sourceLineNo">126</span>        Assert.assertEquals(1.0, coefficients[5], tolerance);<a name="line.126"></a>
<span class="sourceLineNo">127</span>    }<a name="line.127"></a>
<span class="sourceLineNo">128</span><a name="line.128"></a>
<span class="sourceLineNo">129</span>    /**<a name="line.129"></a>
<span class="sourceLineNo">130</span>     * Test for derivatives.<a name="line.130"></a>
<span class="sourceLineNo">131</span>     */<a name="line.131"></a>
<span class="sourceLineNo">132</span>    @Test<a name="line.132"></a>
<span class="sourceLineNo">133</span>    public void testDerivative() {<a name="line.133"></a>
<span class="sourceLineNo">134</span><a name="line.134"></a>
<span class="sourceLineNo">135</span>        // x^3 = 0 * [1] + 1 * [x] + 3 * [x(x-1)] + 1 * [x(x-1)(x-2)]<a name="line.135"></a>
<span class="sourceLineNo">136</span>        PolynomialFunctionNewtonForm p =<a name="line.136"></a>
<span class="sourceLineNo">137</span>                new PolynomialFunctionNewtonForm(new double[] { 0, 1, 3, 1 },<a name="line.137"></a>
<span class="sourceLineNo">138</span>                                                 new double[] { 0, 1, 2 });<a name="line.138"></a>
<span class="sourceLineNo">139</span><a name="line.139"></a>
<span class="sourceLineNo">140</span>        double eps = 2.0e-14;<a name="line.140"></a>
<span class="sourceLineNo">141</span>        for (double t = 0.0; t &lt; 10.0; t += 0.1) {<a name="line.141"></a>
<span class="sourceLineNo">142</span>            DerivativeStructure x = new DerivativeStructure(1, 4, 0, t);<a name="line.142"></a>
<span class="sourceLineNo">143</span>            DerivativeStructure y = p.value(x);<a name="line.143"></a>
<span class="sourceLineNo">144</span>            Assert.assertEquals(t * t * t,   y.getValue(),              eps * t * t * t);<a name="line.144"></a>
<span class="sourceLineNo">145</span>            Assert.assertEquals(3.0 * t * t, y.getPartialDerivative(1), eps * 3.0 * t * t);<a name="line.145"></a>
<span class="sourceLineNo">146</span>            Assert.assertEquals(6.0 * t,     y.getPartialDerivative(2), eps * 6.0 * t);<a name="line.146"></a>
<span class="sourceLineNo">147</span>            Assert.assertEquals(6.0,         y.getPartialDerivative(3), eps * 6.0);<a name="line.147"></a>
<span class="sourceLineNo">148</span>            Assert.assertEquals(0.0,         y.getPartialDerivative(4), eps);<a name="line.148"></a>
<span class="sourceLineNo">149</span>        }<a name="line.149"></a>
<span class="sourceLineNo">150</span><a name="line.150"></a>
<span class="sourceLineNo">151</span>    }<a name="line.151"></a>
<span class="sourceLineNo">152</span><a name="line.152"></a>
<span class="sourceLineNo">153</span>    /**<a name="line.153"></a>
<span class="sourceLineNo">154</span>     * Test of parameters for the polynomial.<a name="line.154"></a>
<span class="sourceLineNo">155</span>     */<a name="line.155"></a>
<span class="sourceLineNo">156</span>    @Test<a name="line.156"></a>
<span class="sourceLineNo">157</span>    public void testParameters() {<a name="line.157"></a>
<span class="sourceLineNo">158</span><a name="line.158"></a>
<span class="sourceLineNo">159</span>        try {<a name="line.159"></a>
<span class="sourceLineNo">160</span>            // bad input array length<a name="line.160"></a>
<span class="sourceLineNo">161</span>            double a[] = { 1.0 };<a name="line.161"></a>
<span class="sourceLineNo">162</span>            double c[] = { 2.0 };<a name="line.162"></a>
<span class="sourceLineNo">163</span>            new PolynomialFunctionNewtonForm(a, c);<a name="line.163"></a>
<span class="sourceLineNo">164</span>            Assert.fail("Expecting MathIllegalArgumentException - bad input array length");<a name="line.164"></a>
<span class="sourceLineNo">165</span>        } catch (MathIllegalArgumentException ex) {<a name="line.165"></a>
<span class="sourceLineNo">166</span>            // expected<a name="line.166"></a>
<span class="sourceLineNo">167</span>        }<a name="line.167"></a>
<span class="sourceLineNo">168</span>        try {<a name="line.168"></a>
<span class="sourceLineNo">169</span>            // mismatch input arrays<a name="line.169"></a>
<span class="sourceLineNo">170</span>            double a[] = { 1.0, 2.0, 3.0, 4.0 };<a name="line.170"></a>
<span class="sourceLineNo">171</span>            double c[] = { 4.0, 3.0, 2.0, 1.0 };<a name="line.171"></a>
<span class="sourceLineNo">172</span>            new PolynomialFunctionNewtonForm(a, c);<a name="line.172"></a>
<span class="sourceLineNo">173</span>            Assert.fail("Expecting MathIllegalArgumentException - mismatch input arrays");<a name="line.173"></a>
<span class="sourceLineNo">174</span>        } catch (MathIllegalArgumentException ex) {<a name="line.174"></a>
<span class="sourceLineNo">175</span>            // expected<a name="line.175"></a>
<span class="sourceLineNo">176</span>        }<a name="line.176"></a>
<span class="sourceLineNo">177</span>    }<a name="line.177"></a>
<span class="sourceLineNo">178</span>}<a name="line.178"></a>




























































</pre>
</div>
</body>
</html>
