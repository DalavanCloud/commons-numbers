<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>EdgesBuilder xref</title>
<link type="text/css" rel="stylesheet" href="../../../../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../../apidocs/org/apache/commons/math3/geometry/spherical/twod/EdgesBuilder.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Licensed to the Apache Software Foundation (ASF) under one or more</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> * contributor license agreements.  See the NOTICE file distributed with</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * this work for additional information regarding copyright ownership.</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * The ASF licenses this file to You under the Apache License, Version 2.0</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * (the "License"); you may not use this file except in compliance with</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> * the License.  You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *      <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">package</strong> org.apache.commons.math3.geometry.spherical.twod;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <strong class="jxr_keyword">import</strong> java.util.ArrayList;
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> java.util.IdentityHashMap;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> java.util.List;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> java.util.Map;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.MathIllegalStateException;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.util.LocalizedFormats;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.geometry.partitioning.BSPTree;
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor;
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.geometry.partitioning.BoundaryAttribute;
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.geometry.spherical.oned.Arc;
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.geometry.spherical.oned.ArcsSet;
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.geometry.spherical.oned.S1Point;
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <em class="jxr_javadoccomment">/** Visitor building edges.</em>
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  <em class="jxr_javadoccomment"> * @since 3.3</em>
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  <strong class="jxr_keyword">class</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/twod/EdgesBuilder.html">EdgesBuilder</a> <strong class="jxr_keyword">implements</strong> BSPTreeVisitor&lt;Sphere2D&gt; {
<a class="jxr_linenumber" name="L38" href="#L38">38</a>  
<a class="jxr_linenumber" name="L39" href="#L39">39</a>      <em class="jxr_javadoccomment">/** Root of the tree. */</em>
<a class="jxr_linenumber" name="L40" href="#L40">40</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> BSPTree&lt;Sphere2D&gt; root;
<a class="jxr_linenumber" name="L41" href="#L41">41</a>  
<a class="jxr_linenumber" name="L42" href="#L42">42</a>      <em class="jxr_javadoccomment">/** Tolerance below which points are consider to be identical. */</em>
<a class="jxr_linenumber" name="L43" href="#L43">43</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> tolerance;
<a class="jxr_linenumber" name="L44" href="#L44">44</a>  
<a class="jxr_linenumber" name="L45" href="#L45">45</a>      <em class="jxr_javadoccomment">/** Built edges and their associated nodes. */</em>
<a class="jxr_linenumber" name="L46" href="#L46">46</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> Map&lt;Edge, BSPTree&lt;Sphere2D&gt;&gt; edgeToNode;
<a class="jxr_linenumber" name="L47" href="#L47">47</a>  
<a class="jxr_linenumber" name="L48" href="#L48">48</a>      <em class="jxr_javadoccomment">/** Reversed map. */</em>
<a class="jxr_linenumber" name="L49" href="#L49">49</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> Map&lt;BSPTree&lt;Sphere2D&gt;, List&lt;Edge&gt;&gt; nodeToEdgesList;
<a class="jxr_linenumber" name="L50" href="#L50">50</a>  
<a class="jxr_linenumber" name="L51" href="#L51">51</a>      <em class="jxr_javadoccomment">/** Simple constructor.</em>
<a class="jxr_linenumber" name="L52" href="#L52">52</a>  <em class="jxr_javadoccomment">     * @param root tree root</em>
<a class="jxr_linenumber" name="L53" href="#L53">53</a>  <em class="jxr_javadoccomment">     * @param tolerance below which points are consider to be identical</em>
<a class="jxr_linenumber" name="L54" href="#L54">54</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L55" href="#L55">55</a>      <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/twod/EdgesBuilder.html">EdgesBuilder</a>(<strong class="jxr_keyword">final</strong> BSPTree&lt;Sphere2D&gt; root, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> tolerance) {
<a class="jxr_linenumber" name="L56" href="#L56">56</a>          <strong class="jxr_keyword">this</strong>.root            = root;
<a class="jxr_linenumber" name="L57" href="#L57">57</a>          <strong class="jxr_keyword">this</strong>.tolerance       = tolerance;
<a class="jxr_linenumber" name="L58" href="#L58">58</a>          <strong class="jxr_keyword">this</strong>.edgeToNode      = <strong class="jxr_keyword">new</strong> IdentityHashMap&lt;Edge, BSPTree&lt;Sphere2D&gt;&gt;();
<a class="jxr_linenumber" name="L59" href="#L59">59</a>          <strong class="jxr_keyword">this</strong>.nodeToEdgesList = <strong class="jxr_keyword">new</strong> IdentityHashMap&lt;BSPTree&lt;Sphere2D&gt;, List&lt;Edge&gt;&gt;();
<a class="jxr_linenumber" name="L60" href="#L60">60</a>      }
<a class="jxr_linenumber" name="L61" href="#L61">61</a>  
<a class="jxr_linenumber" name="L62" href="#L62">62</a>      <em class="jxr_javadoccomment">/** {@inheritDoc} */</em>
<a class="jxr_linenumber" name="L63" href="#L63">63</a>      <strong class="jxr_keyword">public</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/partitioning/BSPTreeVisitor.html">Order</a> visitOrder(<strong class="jxr_keyword">final</strong> BSPTree&lt;Sphere2D&gt; node) {
<a class="jxr_linenumber" name="L64" href="#L64">64</a>          <strong class="jxr_keyword">return</strong> Order.MINUS_SUB_PLUS;
<a class="jxr_linenumber" name="L65" href="#L65">65</a>      }
<a class="jxr_linenumber" name="L66" href="#L66">66</a>  
<a class="jxr_linenumber" name="L67" href="#L67">67</a>      <em class="jxr_javadoccomment">/** {@inheritDoc} */</em>
<a class="jxr_linenumber" name="L68" href="#L68">68</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> visitInternalNode(<strong class="jxr_keyword">final</strong> BSPTree&lt;Sphere2D&gt; node) {
<a class="jxr_linenumber" name="L69" href="#L69">69</a>          nodeToEdgesList.put(node, <strong class="jxr_keyword">new</strong> ArrayList&lt;Edge&gt;());
<a class="jxr_linenumber" name="L70" href="#L70">70</a>          @SuppressWarnings(<span class="jxr_string">"unchecked"</span>)
<a class="jxr_linenumber" name="L71" href="#L71">71</a>          <strong class="jxr_keyword">final</strong> BoundaryAttribute&lt;Sphere2D&gt; attribute = (BoundaryAttribute&lt;Sphere2D&gt;) node.getAttribute();
<a class="jxr_linenumber" name="L72" href="#L72">72</a>          <strong class="jxr_keyword">if</strong> (attribute.getPlusOutside() != <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L73" href="#L73">73</a>              addContribution((SubCircle) attribute.getPlusOutside(), false, node);
<a class="jxr_linenumber" name="L74" href="#L74">74</a>          }
<a class="jxr_linenumber" name="L75" href="#L75">75</a>          <strong class="jxr_keyword">if</strong> (attribute.getPlusInside() != <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L76" href="#L76">76</a>              addContribution((SubCircle) attribute.getPlusInside(), <strong class="jxr_keyword">true</strong>, node);
<a class="jxr_linenumber" name="L77" href="#L77">77</a>          }
<a class="jxr_linenumber" name="L78" href="#L78">78</a>      }
<a class="jxr_linenumber" name="L79" href="#L79">79</a>  
<a class="jxr_linenumber" name="L80" href="#L80">80</a>      <em class="jxr_javadoccomment">/** {@inheritDoc} */</em>
<a class="jxr_linenumber" name="L81" href="#L81">81</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> visitLeafNode(<strong class="jxr_keyword">final</strong> BSPTree&lt;Sphere2D&gt; node) {
<a class="jxr_linenumber" name="L82" href="#L82">82</a>      }
<a class="jxr_linenumber" name="L83" href="#L83">83</a>  
<a class="jxr_linenumber" name="L84" href="#L84">84</a>      <em class="jxr_javadoccomment">/** Add the contribution of a boundary edge.</em>
<a class="jxr_linenumber" name="L85" href="#L85">85</a>  <em class="jxr_javadoccomment">     * @param sub boundary facet</em>
<a class="jxr_linenumber" name="L86" href="#L86">86</a>  <em class="jxr_javadoccomment">     * @param reversed if true, the facet has the inside on its plus side</em>
<a class="jxr_linenumber" name="L87" href="#L87">87</a>  <em class="jxr_javadoccomment">     * @param node node to which the edge belongs</em>
<a class="jxr_linenumber" name="L88" href="#L88">88</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L89" href="#L89">89</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">void</strong> addContribution(<strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/twod/SubCircle.html">SubCircle</a> sub, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">boolean</strong> reversed,
<a class="jxr_linenumber" name="L90" href="#L90">90</a>                                   <strong class="jxr_keyword">final</strong> BSPTree&lt;Sphere2D&gt; node) {
<a class="jxr_linenumber" name="L91" href="#L91">91</a>          <strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/twod/Circle.html">Circle</a> circle  = (Circle) sub.getHyperplane();
<a class="jxr_linenumber" name="L92" href="#L92">92</a>          <strong class="jxr_keyword">final</strong> List&lt;Arc&gt; arcs = ((ArcsSet) sub.getRemainingRegion()).asList();
<a class="jxr_linenumber" name="L93" href="#L93">93</a>          <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">final</strong> Arc a : arcs) {
<a class="jxr_linenumber" name="L94" href="#L94">94</a>              <strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/twod/Vertex.html">Vertex</a> start = <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/twod/Vertex.html">Vertex</a>((S2Point) circle.toSpace(<strong class="jxr_keyword">new</strong> S1Point(a.getInf())));
<a class="jxr_linenumber" name="L95" href="#L95">95</a>              <strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/twod/Vertex.html">Vertex</a> end   = <strong class="jxr_keyword">new</strong> Vertex((S2Point) circle.toSpace(<strong class="jxr_keyword">new</strong> S1Point(a.getSup())));
<a class="jxr_linenumber" name="L96" href="#L96">96</a>              start.bindWith(circle);
<a class="jxr_linenumber" name="L97" href="#L97">97</a>              end.bindWith(circle);
<a class="jxr_linenumber" name="L98" href="#L98">98</a>              <strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/twod/Edge.html">Edge</a> edge;
<a class="jxr_linenumber" name="L99" href="#L99">99</a>              <strong class="jxr_keyword">if</strong> (reversed) {
<a class="jxr_linenumber" name="L100" href="#L100">100</a>                 edge = <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/twod/Edge.html">Edge</a>(end, start, a.getSize(), circle.getReverse());
<a class="jxr_linenumber" name="L101" href="#L101">101</a>             } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L102" href="#L102">102</a>                 edge = <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/twod/Edge.html">Edge</a>(start, end, a.getSize(), circle);
<a class="jxr_linenumber" name="L103" href="#L103">103</a>             }
<a class="jxr_linenumber" name="L104" href="#L104">104</a>             edgeToNode.put(edge, node);
<a class="jxr_linenumber" name="L105" href="#L105">105</a>             nodeToEdgesList.get(node).add(edge);
<a class="jxr_linenumber" name="L106" href="#L106">106</a>         }
<a class="jxr_linenumber" name="L107" href="#L107">107</a>     }
<a class="jxr_linenumber" name="L108" href="#L108">108</a> 
<a class="jxr_linenumber" name="L109" href="#L109">109</a>     <em class="jxr_javadoccomment">/** Get the edge that should naturally follow another one.</em>
<a class="jxr_linenumber" name="L110" href="#L110">110</a> <em class="jxr_javadoccomment">     * @param previous edge to be continued</em>
<a class="jxr_linenumber" name="L111" href="#L111">111</a> <em class="jxr_javadoccomment">     * @return other edge, starting where the previous one ends (they</em>
<a class="jxr_linenumber" name="L112" href="#L112">112</a> <em class="jxr_javadoccomment">     * have not been connected yet)</em>
<a class="jxr_linenumber" name="L113" href="#L113">113</a> <em class="jxr_javadoccomment">     * @exception MathIllegalStateException if there is not a single other edge</em>
<a class="jxr_linenumber" name="L114" href="#L114">114</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L115" href="#L115">115</a>     <strong class="jxr_keyword">private</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/twod/Edge.html">Edge</a> getFollowingEdge(<strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/twod/Edge.html">Edge</a> previous)
<a class="jxr_linenumber" name="L116" href="#L116">116</a>         <strong class="jxr_keyword">throws</strong> <a href="../../../../../../../org/apache/commons/math3/exception/MathIllegalStateException.html">MathIllegalStateException</a> {
<a class="jxr_linenumber" name="L117" href="#L117">117</a> 
<a class="jxr_linenumber" name="L118" href="#L118">118</a>         <em class="jxr_comment">// get the candidate nodes</em>
<a class="jxr_linenumber" name="L119" href="#L119">119</a>         <strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/twod/S2Point.html">S2Point</a> point = previous.getEnd().getLocation();
<a class="jxr_linenumber" name="L120" href="#L120">120</a>         <strong class="jxr_keyword">final</strong> List&lt;BSPTree&lt;Sphere2D&gt;&gt; candidates = root.getCloseCuts(point, tolerance);
<a class="jxr_linenumber" name="L121" href="#L121">121</a> 
<a class="jxr_linenumber" name="L122" href="#L122">122</a>         <em class="jxr_comment">// the following edge we are looking for must start from one of the candidates nodes</em>
<a class="jxr_linenumber" name="L123" href="#L123">123</a>         <strong class="jxr_keyword">double</strong> closest = tolerance;
<a class="jxr_linenumber" name="L124" href="#L124">124</a>         <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/twod/Edge.html">Edge</a> following = <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L125" href="#L125">125</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">final</strong> BSPTree&lt;Sphere2D&gt; node : candidates) {
<a class="jxr_linenumber" name="L126" href="#L126">126</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">final</strong> Edge edge : nodeToEdgesList.get(node)) {
<a class="jxr_linenumber" name="L127" href="#L127">127</a>                 <strong class="jxr_keyword">if</strong> (edge != previous &amp;&amp; edge.getStart().getIncoming() == <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L128" href="#L128">128</a>                     <strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/Vector3D.html">Vector3D</a> edgeStart = edge.getStart().getLocation().getVector();
<a class="jxr_linenumber" name="L129" href="#L129">129</a>                     <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> gap         = Vector3D.angle(point.getVector(), edgeStart);
<a class="jxr_linenumber" name="L130" href="#L130">130</a>                     <strong class="jxr_keyword">if</strong> (gap &lt;= closest) {
<a class="jxr_linenumber" name="L131" href="#L131">131</a>                         closest   = gap;
<a class="jxr_linenumber" name="L132" href="#L132">132</a>                         following = edge;
<a class="jxr_linenumber" name="L133" href="#L133">133</a>                     }
<a class="jxr_linenumber" name="L134" href="#L134">134</a>                 }
<a class="jxr_linenumber" name="L135" href="#L135">135</a>             }
<a class="jxr_linenumber" name="L136" href="#L136">136</a>         }
<a class="jxr_linenumber" name="L137" href="#L137">137</a> 
<a class="jxr_linenumber" name="L138" href="#L138">138</a>         <strong class="jxr_keyword">if</strong> (following == <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L139" href="#L139">139</a>             <strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/euclidean/threed/Vector3D.html">Vector3D</a> previousStart = previous.getStart().getLocation().getVector();
<a class="jxr_linenumber" name="L140" href="#L140">140</a>             <strong class="jxr_keyword">if</strong> (Vector3D.angle(point.getVector(), previousStart) &lt;= tolerance) {
<a class="jxr_linenumber" name="L141" href="#L141">141</a>                 <em class="jxr_comment">// the edge connects back to itself</em>
<a class="jxr_linenumber" name="L142" href="#L142">142</a>                 <strong class="jxr_keyword">return</strong> previous;
<a class="jxr_linenumber" name="L143" href="#L143">143</a>             }
<a class="jxr_linenumber" name="L144" href="#L144">144</a> 
<a class="jxr_linenumber" name="L145" href="#L145">145</a>             <em class="jxr_comment">// this should never happen</em>
<a class="jxr_linenumber" name="L146" href="#L146">146</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/exception/MathIllegalStateException.html">MathIllegalStateException</a>(LocalizedFormats.OUTLINE_BOUNDARY_LOOP_OPEN);
<a class="jxr_linenumber" name="L147" href="#L147">147</a> 
<a class="jxr_linenumber" name="L148" href="#L148">148</a>         }
<a class="jxr_linenumber" name="L149" href="#L149">149</a> 
<a class="jxr_linenumber" name="L150" href="#L150">150</a>         <strong class="jxr_keyword">return</strong> following;
<a class="jxr_linenumber" name="L151" href="#L151">151</a> 
<a class="jxr_linenumber" name="L152" href="#L152">152</a>     }
<a class="jxr_linenumber" name="L153" href="#L153">153</a> 
<a class="jxr_linenumber" name="L154" href="#L154">154</a>     <em class="jxr_javadoccomment">/** Get the boundary edges.</em>
<a class="jxr_linenumber" name="L155" href="#L155">155</a> <em class="jxr_javadoccomment">     * @return boundary edges</em>
<a class="jxr_linenumber" name="L156" href="#L156">156</a> <em class="jxr_javadoccomment">     * @exception MathIllegalStateException if there is not a single other edge</em>
<a class="jxr_linenumber" name="L157" href="#L157">157</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L158" href="#L158">158</a>     <strong class="jxr_keyword">public</strong> List&lt;Edge&gt; getEdges() <strong class="jxr_keyword">throws</strong> MathIllegalStateException {
<a class="jxr_linenumber" name="L159" href="#L159">159</a> 
<a class="jxr_linenumber" name="L160" href="#L160">160</a>         <em class="jxr_comment">// connect the edges</em>
<a class="jxr_linenumber" name="L161" href="#L161">161</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">final</strong> Edge previous : edgeToNode.keySet()) {
<a class="jxr_linenumber" name="L162" href="#L162">162</a>             previous.setNextEdge(getFollowingEdge(previous));
<a class="jxr_linenumber" name="L163" href="#L163">163</a>         }
<a class="jxr_linenumber" name="L164" href="#L164">164</a> 
<a class="jxr_linenumber" name="L165" href="#L165">165</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> ArrayList&lt;Edge&gt;(edgeToNode.keySet());
<a class="jxr_linenumber" name="L166" href="#L166">166</a> 
<a class="jxr_linenumber" name="L167" href="#L167">167</a>     }
<a class="jxr_linenumber" name="L168" href="#L168">168</a> 
<a class="jxr_linenumber" name="L169" href="#L169">169</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2003&#x2013;2016 <a href="http://www.apache.org/">The Apache Software Foundation</a>. All rights reserved.</div>
</body>
</html>
