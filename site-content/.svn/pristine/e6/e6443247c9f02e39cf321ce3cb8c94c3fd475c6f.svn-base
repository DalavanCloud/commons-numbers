<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span><a name="line.17"></a>
<span class="sourceLineNo">018</span>package org.apache.commons.math3.dfp;<a name="line.18"></a>
<span class="sourceLineNo">019</span><a name="line.19"></a>
<span class="sourceLineNo">020</span>import org.apache.commons.math3.analysis.solvers.AllowedSolution;<a name="line.20"></a>
<span class="sourceLineNo">021</span>import org.apache.commons.math3.exception.MathInternalError;<a name="line.21"></a>
<span class="sourceLineNo">022</span>import org.apache.commons.math3.exception.NumberIsTooSmallException;<a name="line.22"></a>
<span class="sourceLineNo">023</span>import org.junit.Assert;<a name="line.23"></a>
<span class="sourceLineNo">024</span>import org.junit.Before;<a name="line.24"></a>
<span class="sourceLineNo">025</span>import org.junit.Test;<a name="line.25"></a>
<span class="sourceLineNo">026</span><a name="line.26"></a>
<span class="sourceLineNo">027</span>/**<a name="line.27"></a>
<span class="sourceLineNo">028</span> * Test case for {@link BracketingNthOrderBrentSolverDFP bracketing n&lt;sup&gt;th&lt;/sup&gt; order Brent} solver.<a name="line.28"></a>
<span class="sourceLineNo">029</span> *<a name="line.29"></a>
<span class="sourceLineNo">030</span> */<a name="line.30"></a>
<span class="sourceLineNo">031</span>public final class BracketingNthOrderBrentSolverDFPTest {<a name="line.31"></a>
<span class="sourceLineNo">032</span><a name="line.32"></a>
<span class="sourceLineNo">033</span>    @Test(expected=NumberIsTooSmallException.class)<a name="line.33"></a>
<span class="sourceLineNo">034</span>    public void testInsufficientOrder3() {<a name="line.34"></a>
<span class="sourceLineNo">035</span>        new BracketingNthOrderBrentSolverDFP(relativeAccuracy, absoluteAccuracy,<a name="line.35"></a>
<span class="sourceLineNo">036</span>                                             functionValueAccuracy, 1);<a name="line.36"></a>
<span class="sourceLineNo">037</span>    }<a name="line.37"></a>
<span class="sourceLineNo">038</span><a name="line.38"></a>
<span class="sourceLineNo">039</span>    @Test<a name="line.39"></a>
<span class="sourceLineNo">040</span>    public void testConstructorOK() {<a name="line.40"></a>
<span class="sourceLineNo">041</span>        BracketingNthOrderBrentSolverDFP solver =<a name="line.41"></a>
<span class="sourceLineNo">042</span>                new BracketingNthOrderBrentSolverDFP(relativeAccuracy, absoluteAccuracy,<a name="line.42"></a>
<span class="sourceLineNo">043</span>                                                     functionValueAccuracy, 2);<a name="line.43"></a>
<span class="sourceLineNo">044</span>        Assert.assertEquals(2, solver.getMaximalOrder());<a name="line.44"></a>
<span class="sourceLineNo">045</span>    }<a name="line.45"></a>
<span class="sourceLineNo">046</span><a name="line.46"></a>
<span class="sourceLineNo">047</span>    @Test<a name="line.47"></a>
<span class="sourceLineNo">048</span>    public void testConvergenceOnFunctionAccuracy() {<a name="line.48"></a>
<span class="sourceLineNo">049</span>        BracketingNthOrderBrentSolverDFP solver =<a name="line.49"></a>
<span class="sourceLineNo">050</span>                new BracketingNthOrderBrentSolverDFP(relativeAccuracy, absoluteAccuracy,<a name="line.50"></a>
<span class="sourceLineNo">051</span>                                                     field.newDfp(1.0e-20), 20);<a name="line.51"></a>
<span class="sourceLineNo">052</span>        UnivariateDfpFunction f = new UnivariateDfpFunction() {<a name="line.52"></a>
<span class="sourceLineNo">053</span>            public Dfp value(Dfp x) {<a name="line.53"></a>
<span class="sourceLineNo">054</span>                Dfp one     = field.getOne();<a name="line.54"></a>
<span class="sourceLineNo">055</span>                Dfp oneHalf = one.divide(2);<a name="line.55"></a>
<span class="sourceLineNo">056</span>                Dfp xMo     = x.subtract(one);<a name="line.56"></a>
<span class="sourceLineNo">057</span>                Dfp xMh     = x.subtract(oneHalf);<a name="line.57"></a>
<span class="sourceLineNo">058</span>                Dfp xPh     = x.add(oneHalf);<a name="line.58"></a>
<span class="sourceLineNo">059</span>                Dfp xPo     = x.add(one);<a name="line.59"></a>
<span class="sourceLineNo">060</span>                return xMo.multiply(xMh).multiply(x).multiply(xPh).multiply(xPo);<a name="line.60"></a>
<span class="sourceLineNo">061</span>            }<a name="line.61"></a>
<span class="sourceLineNo">062</span>        };<a name="line.62"></a>
<span class="sourceLineNo">063</span><a name="line.63"></a>
<span class="sourceLineNo">064</span>        Dfp result = solver.solve(20, f, field.newDfp(0.2), field.newDfp(0.9),<a name="line.64"></a>
<span class="sourceLineNo">065</span>                                  field.newDfp(0.4), AllowedSolution.BELOW_SIDE);<a name="line.65"></a>
<span class="sourceLineNo">066</span>        Assert.assertTrue(f.value(result).abs().lessThan(solver.getFunctionValueAccuracy()));<a name="line.66"></a>
<span class="sourceLineNo">067</span>        Assert.assertTrue(f.value(result).negativeOrNull());<a name="line.67"></a>
<span class="sourceLineNo">068</span>        Assert.assertTrue(result.subtract(field.newDfp(0.5)).subtract(solver.getAbsoluteAccuracy()).positiveOrNull());<a name="line.68"></a>
<span class="sourceLineNo">069</span>        result = solver.solve(20, f, field.newDfp(-0.9), field.newDfp(-0.2),<a name="line.69"></a>
<span class="sourceLineNo">070</span>                              field.newDfp(-0.4), AllowedSolution.ABOVE_SIDE);<a name="line.70"></a>
<span class="sourceLineNo">071</span>        Assert.assertTrue(f.value(result).abs().lessThan(solver.getFunctionValueAccuracy()));<a name="line.71"></a>
<span class="sourceLineNo">072</span>        Assert.assertTrue(f.value(result).positiveOrNull());<a name="line.72"></a>
<span class="sourceLineNo">073</span>        Assert.assertTrue(result.add(field.newDfp(0.5)).subtract(solver.getAbsoluteAccuracy()).negativeOrNull());<a name="line.73"></a>
<span class="sourceLineNo">074</span>    }<a name="line.74"></a>
<span class="sourceLineNo">075</span><a name="line.75"></a>
<span class="sourceLineNo">076</span>    @Test<a name="line.76"></a>
<span class="sourceLineNo">077</span>    public void testNeta() {<a name="line.77"></a>
<span class="sourceLineNo">078</span><a name="line.78"></a>
<span class="sourceLineNo">079</span>        // the following test functions come from Beny Neta's paper:<a name="line.79"></a>
<span class="sourceLineNo">080</span>        // "Several New Methods for solving Equations"<a name="line.80"></a>
<span class="sourceLineNo">081</span>        // intern J. Computer Math Vol 23 pp 265-282<a name="line.81"></a>
<span class="sourceLineNo">082</span>        // available here: http://www.math.nps.navy.mil/~bneta/SeveralNewMethods.PDF<a name="line.82"></a>
<span class="sourceLineNo">083</span>        for (AllowedSolution allowed : AllowedSolution.values()) {<a name="line.83"></a>
<span class="sourceLineNo">084</span>            check(new UnivariateDfpFunction() {<a name="line.84"></a>
<span class="sourceLineNo">085</span>                public Dfp value(Dfp x) {<a name="line.85"></a>
<span class="sourceLineNo">086</span>                    return DfpMath.sin(x).subtract(x.divide(2));<a name="line.86"></a>
<span class="sourceLineNo">087</span>                }<a name="line.87"></a>
<span class="sourceLineNo">088</span>            }, 200, -2.0, 2.0, allowed);<a name="line.88"></a>
<span class="sourceLineNo">089</span><a name="line.89"></a>
<span class="sourceLineNo">090</span>            check(new UnivariateDfpFunction() {<a name="line.90"></a>
<span class="sourceLineNo">091</span>                public Dfp value(Dfp x) {<a name="line.91"></a>
<span class="sourceLineNo">092</span>                    return DfpMath.pow(x, 5).add(x).subtract(field.newDfp(10000));<a name="line.92"></a>
<span class="sourceLineNo">093</span>                }<a name="line.93"></a>
<span class="sourceLineNo">094</span>            }, 200, -5.0, 10.0, allowed);<a name="line.94"></a>
<span class="sourceLineNo">095</span><a name="line.95"></a>
<span class="sourceLineNo">096</span>            check(new UnivariateDfpFunction() {<a name="line.96"></a>
<span class="sourceLineNo">097</span>                public Dfp value(Dfp x) {<a name="line.97"></a>
<span class="sourceLineNo">098</span>                    return x.sqrt().subtract(field.getOne().divide(x)).subtract(field.newDfp(3));<a name="line.98"></a>
<span class="sourceLineNo">099</span>                }<a name="line.99"></a>
<span class="sourceLineNo">100</span>            }, 200, 0.001, 10.0, allowed);<a name="line.100"></a>
<span class="sourceLineNo">101</span><a name="line.101"></a>
<span class="sourceLineNo">102</span>            check(new UnivariateDfpFunction() {<a name="line.102"></a>
<span class="sourceLineNo">103</span>                public Dfp value(Dfp x) {<a name="line.103"></a>
<span class="sourceLineNo">104</span>                    return DfpMath.exp(x).add(x).subtract(field.newDfp(20));<a name="line.104"></a>
<span class="sourceLineNo">105</span>                }<a name="line.105"></a>
<span class="sourceLineNo">106</span>            }, 200, -5.0, 5.0, allowed);<a name="line.106"></a>
<span class="sourceLineNo">107</span><a name="line.107"></a>
<span class="sourceLineNo">108</span>            check(new UnivariateDfpFunction() {<a name="line.108"></a>
<span class="sourceLineNo">109</span>                public Dfp value(Dfp x) {<a name="line.109"></a>
<span class="sourceLineNo">110</span>                    return DfpMath.log(x).add(x.sqrt()).subtract(field.newDfp(5));<a name="line.110"></a>
<span class="sourceLineNo">111</span>                }<a name="line.111"></a>
<span class="sourceLineNo">112</span>            }, 200, 0.001, 10.0, allowed);<a name="line.112"></a>
<span class="sourceLineNo">113</span><a name="line.113"></a>
<span class="sourceLineNo">114</span>            check(new UnivariateDfpFunction() {<a name="line.114"></a>
<span class="sourceLineNo">115</span>                public Dfp value(Dfp x) {<a name="line.115"></a>
<span class="sourceLineNo">116</span>                    return x.subtract(field.getOne()).multiply(x).multiply(x).subtract(field.getOne());<a name="line.116"></a>
<span class="sourceLineNo">117</span>                }<a name="line.117"></a>
<span class="sourceLineNo">118</span>            }, 200, -0.5, 1.5, allowed);<a name="line.118"></a>
<span class="sourceLineNo">119</span>        }<a name="line.119"></a>
<span class="sourceLineNo">120</span><a name="line.120"></a>
<span class="sourceLineNo">121</span>    }<a name="line.121"></a>
<span class="sourceLineNo">122</span><a name="line.122"></a>
<span class="sourceLineNo">123</span>    private void check(UnivariateDfpFunction f, int maxEval, double min, double max,<a name="line.123"></a>
<span class="sourceLineNo">124</span>                       AllowedSolution allowedSolution) {<a name="line.124"></a>
<span class="sourceLineNo">125</span>        BracketingNthOrderBrentSolverDFP solver =<a name="line.125"></a>
<span class="sourceLineNo">126</span>                new BracketingNthOrderBrentSolverDFP(relativeAccuracy, absoluteAccuracy,<a name="line.126"></a>
<span class="sourceLineNo">127</span>                                                     functionValueAccuracy, 20);<a name="line.127"></a>
<span class="sourceLineNo">128</span>        Dfp xResult = solver.solve(maxEval, f, field.newDfp(min), field.newDfp(max),<a name="line.128"></a>
<span class="sourceLineNo">129</span>                                   allowedSolution);<a name="line.129"></a>
<span class="sourceLineNo">130</span>        Dfp yResult = f.value(xResult);<a name="line.130"></a>
<span class="sourceLineNo">131</span>        switch (allowedSolution) {<a name="line.131"></a>
<span class="sourceLineNo">132</span>        case ANY_SIDE :<a name="line.132"></a>
<span class="sourceLineNo">133</span>            Assert.assertTrue(yResult.abs().lessThan(functionValueAccuracy.multiply(2)));<a name="line.133"></a>
<span class="sourceLineNo">134</span>            break;<a name="line.134"></a>
<span class="sourceLineNo">135</span>        case LEFT_SIDE : {<a name="line.135"></a>
<span class="sourceLineNo">136</span>            boolean increasing = f.value(xResult).add(absoluteAccuracy).greaterThan(yResult);<a name="line.136"></a>
<span class="sourceLineNo">137</span>            Assert.assertTrue(increasing ? yResult.negativeOrNull() : yResult.positiveOrNull());<a name="line.137"></a>
<span class="sourceLineNo">138</span>            break;<a name="line.138"></a>
<span class="sourceLineNo">139</span>        }<a name="line.139"></a>
<span class="sourceLineNo">140</span>        case RIGHT_SIDE : {<a name="line.140"></a>
<span class="sourceLineNo">141</span>            boolean increasing = f.value(xResult).add(absoluteAccuracy).greaterThan(yResult);<a name="line.141"></a>
<span class="sourceLineNo">142</span>            Assert.assertTrue(increasing ? yResult.positiveOrNull() : yResult.negativeOrNull());<a name="line.142"></a>
<span class="sourceLineNo">143</span>            break;<a name="line.143"></a>
<span class="sourceLineNo">144</span>        }<a name="line.144"></a>
<span class="sourceLineNo">145</span>        case BELOW_SIDE :<a name="line.145"></a>
<span class="sourceLineNo">146</span>            Assert.assertTrue(yResult.negativeOrNull());<a name="line.146"></a>
<span class="sourceLineNo">147</span>            break;<a name="line.147"></a>
<span class="sourceLineNo">148</span>        case ABOVE_SIDE :<a name="line.148"></a>
<span class="sourceLineNo">149</span>            Assert.assertTrue(yResult.positiveOrNull());<a name="line.149"></a>
<span class="sourceLineNo">150</span>            break;<a name="line.150"></a>
<span class="sourceLineNo">151</span>        default :<a name="line.151"></a>
<span class="sourceLineNo">152</span>            // this should never happen<a name="line.152"></a>
<span class="sourceLineNo">153</span>            throw new MathInternalError(null);<a name="line.153"></a>
<span class="sourceLineNo">154</span>        }<a name="line.154"></a>
<span class="sourceLineNo">155</span>    }<a name="line.155"></a>
<span class="sourceLineNo">156</span><a name="line.156"></a>
<span class="sourceLineNo">157</span>    @Before<a name="line.157"></a>
<span class="sourceLineNo">158</span>    public void setUp() {<a name="line.158"></a>
<span class="sourceLineNo">159</span>        field                 = new DfpField(50);<a name="line.159"></a>
<span class="sourceLineNo">160</span>        absoluteAccuracy      = field.newDfp(1.0e-45);<a name="line.160"></a>
<span class="sourceLineNo">161</span>        relativeAccuracy      = field.newDfp(1.0e-45);<a name="line.161"></a>
<span class="sourceLineNo">162</span>        functionValueAccuracy = field.newDfp(1.0e-45);<a name="line.162"></a>
<span class="sourceLineNo">163</span>    }<a name="line.163"></a>
<span class="sourceLineNo">164</span><a name="line.164"></a>
<span class="sourceLineNo">165</span>    private DfpField field;<a name="line.165"></a>
<span class="sourceLineNo">166</span>    private Dfp      absoluteAccuracy;<a name="line.166"></a>
<span class="sourceLineNo">167</span>    private Dfp      relativeAccuracy;<a name="line.167"></a>
<span class="sourceLineNo">168</span>    private Dfp      functionValueAccuracy;<a name="line.168"></a>
<span class="sourceLineNo">169</span><a name="line.169"></a>
<span class="sourceLineNo">170</span>}<a name="line.170"></a>




























































</pre>
</div>
</body>
</html>
