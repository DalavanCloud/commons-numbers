<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements. See the NOTICE file distributed with this<a name="line.3"></a>
<span class="sourceLineNo">004</span> * work for additional information regarding copyright ownership. The ASF<a name="line.4"></a>
<span class="sourceLineNo">005</span> * licenses this file to You under the Apache License, Version 2.0 (the<a name="line.5"></a>
<span class="sourceLineNo">006</span> * "License"); you may not use this file except in compliance with the License.<a name="line.6"></a>
<span class="sourceLineNo">007</span> * You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law<a name="line.8"></a>
<span class="sourceLineNo">009</span> * or agreed to in writing, software distributed under the License is<a name="line.9"></a>
<span class="sourceLineNo">010</span> * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY<a name="line.10"></a>
<span class="sourceLineNo">011</span> * KIND, either express or implied. See the License for the specific language<a name="line.11"></a>
<span class="sourceLineNo">012</span> * governing permissions and limitations under the License.<a name="line.12"></a>
<span class="sourceLineNo">013</span> */<a name="line.13"></a>
<span class="sourceLineNo">014</span>package org.apache.commons.math3.util;<a name="line.14"></a>
<span class="sourceLineNo">015</span><a name="line.15"></a>
<span class="sourceLineNo">016</span>import java.math.BigDecimal;<a name="line.16"></a>
<span class="sourceLineNo">017</span>import org.apache.commons.math3.exception.MathArithmeticException;<a name="line.17"></a>
<span class="sourceLineNo">018</span>import org.apache.commons.math3.exception.MathIllegalArgumentException;<a name="line.18"></a>
<span class="sourceLineNo">019</span>import org.apache.commons.math3.TestUtils;<a name="line.19"></a>
<span class="sourceLineNo">020</span><a name="line.20"></a>
<span class="sourceLineNo">021</span>import org.junit.Assert;<a name="line.21"></a>
<span class="sourceLineNo">022</span>import org.junit.Test;<a name="line.22"></a>
<span class="sourceLineNo">023</span><a name="line.23"></a>
<span class="sourceLineNo">024</span>/**<a name="line.24"></a>
<span class="sourceLineNo">025</span> * Test cases for the {@link Precision} class.<a name="line.25"></a>
<span class="sourceLineNo">026</span> *<a name="line.26"></a>
<span class="sourceLineNo">027</span> */<a name="line.27"></a>
<span class="sourceLineNo">028</span>public class PrecisionTest {<a name="line.28"></a>
<span class="sourceLineNo">029</span>    @Test<a name="line.29"></a>
<span class="sourceLineNo">030</span>    public void testEqualsWithRelativeTolerance() {<a name="line.30"></a>
<span class="sourceLineNo">031</span>        Assert.assertTrue(Precision.equalsWithRelativeTolerance(0d, 0d, 0d));<a name="line.31"></a>
<span class="sourceLineNo">032</span>        Assert.assertTrue(Precision.equalsWithRelativeTolerance(0d, 1 / Double.NEGATIVE_INFINITY, 0d));<a name="line.32"></a>
<span class="sourceLineNo">033</span><a name="line.33"></a>
<span class="sourceLineNo">034</span>        final double eps = 1e-14;<a name="line.34"></a>
<span class="sourceLineNo">035</span>        Assert.assertFalse(Precision.equalsWithRelativeTolerance(1.987654687654968, 1.987654687654988, eps));<a name="line.35"></a>
<span class="sourceLineNo">036</span>        Assert.assertTrue(Precision.equalsWithRelativeTolerance(1.987654687654968, 1.987654687654987, eps));<a name="line.36"></a>
<span class="sourceLineNo">037</span>        Assert.assertFalse(Precision.equalsWithRelativeTolerance(1.987654687654968, 1.987654687654948, eps));<a name="line.37"></a>
<span class="sourceLineNo">038</span>        Assert.assertTrue(Precision.equalsWithRelativeTolerance(1.987654687654968, 1.987654687654949, eps));<a name="line.38"></a>
<span class="sourceLineNo">039</span><a name="line.39"></a>
<span class="sourceLineNo">040</span>        Assert.assertFalse(Precision.equalsWithRelativeTolerance(Precision.SAFE_MIN, 0.0, eps));<a name="line.40"></a>
<span class="sourceLineNo">041</span><a name="line.41"></a>
<span class="sourceLineNo">042</span>        Assert.assertFalse(Precision.equalsWithRelativeTolerance(1.0000000000001e-300, 1e-300, eps));<a name="line.42"></a>
<span class="sourceLineNo">043</span>        Assert.assertTrue(Precision.equalsWithRelativeTolerance(1.00000000000001e-300, 1e-300, eps));<a name="line.43"></a>
<span class="sourceLineNo">044</span><a name="line.44"></a>
<span class="sourceLineNo">045</span>        Assert.assertFalse(Precision.equalsWithRelativeTolerance(Double.NEGATIVE_INFINITY, 1.23, eps));<a name="line.45"></a>
<span class="sourceLineNo">046</span>        Assert.assertFalse(Precision.equalsWithRelativeTolerance(Double.POSITIVE_INFINITY, 1.23, eps));<a name="line.46"></a>
<span class="sourceLineNo">047</span><a name="line.47"></a>
<span class="sourceLineNo">048</span>        Assert.assertTrue(Precision.equalsWithRelativeTolerance(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, eps));<a name="line.48"></a>
<span class="sourceLineNo">049</span>        Assert.assertTrue(Precision.equalsWithRelativeTolerance(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, eps));<a name="line.49"></a>
<span class="sourceLineNo">050</span>        Assert.assertFalse(Precision.equalsWithRelativeTolerance(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, eps));<a name="line.50"></a>
<span class="sourceLineNo">051</span><a name="line.51"></a>
<span class="sourceLineNo">052</span>        Assert.assertFalse(Precision.equalsWithRelativeTolerance(Double.NaN, 1.23, eps));<a name="line.52"></a>
<span class="sourceLineNo">053</span>        Assert.assertFalse(Precision.equalsWithRelativeTolerance(Double.NaN, Double.NaN, eps));<a name="line.53"></a>
<span class="sourceLineNo">054</span>    }<a name="line.54"></a>
<span class="sourceLineNo">055</span><a name="line.55"></a>
<span class="sourceLineNo">056</span>    @Test<a name="line.56"></a>
<span class="sourceLineNo">057</span>    public void testEqualsIncludingNaN() {<a name="line.57"></a>
<span class="sourceLineNo">058</span>        double[] testArray = {<a name="line.58"></a>
<span class="sourceLineNo">059</span>            Double.NaN,<a name="line.59"></a>
<span class="sourceLineNo">060</span>            Double.POSITIVE_INFINITY,<a name="line.60"></a>
<span class="sourceLineNo">061</span>            Double.NEGATIVE_INFINITY,<a name="line.61"></a>
<span class="sourceLineNo">062</span>            1d,<a name="line.62"></a>
<span class="sourceLineNo">063</span>            0d };<a name="line.63"></a>
<span class="sourceLineNo">064</span>        for (int i = 0; i &lt; testArray.length; i++) {<a name="line.64"></a>
<span class="sourceLineNo">065</span>            for (int j = 0; j &lt; testArray.length; j++) {<a name="line.65"></a>
<span class="sourceLineNo">066</span>                if (i == j) {<a name="line.66"></a>
<span class="sourceLineNo">067</span>                    Assert.assertTrue(Precision.equalsIncludingNaN(testArray[i], testArray[j]));<a name="line.67"></a>
<span class="sourceLineNo">068</span>                    Assert.assertTrue(Precision.equalsIncludingNaN(testArray[j], testArray[i]));<a name="line.68"></a>
<span class="sourceLineNo">069</span>                } else {<a name="line.69"></a>
<span class="sourceLineNo">070</span>                    Assert.assertTrue(!Precision.equalsIncludingNaN(testArray[i], testArray[j]));<a name="line.70"></a>
<span class="sourceLineNo">071</span>                    Assert.assertTrue(!Precision.equalsIncludingNaN(testArray[j], testArray[i]));<a name="line.71"></a>
<span class="sourceLineNo">072</span>                }<a name="line.72"></a>
<span class="sourceLineNo">073</span>            }<a name="line.73"></a>
<span class="sourceLineNo">074</span>        }<a name="line.74"></a>
<span class="sourceLineNo">075</span>    }<a name="line.75"></a>
<span class="sourceLineNo">076</span><a name="line.76"></a>
<span class="sourceLineNo">077</span>    @Test<a name="line.77"></a>
<span class="sourceLineNo">078</span>    public void testEqualsWithAllowedDelta() {<a name="line.78"></a>
<span class="sourceLineNo">079</span>        Assert.assertTrue(Precision.equals(153.0000, 153.0000, .0625));<a name="line.79"></a>
<span class="sourceLineNo">080</span>        Assert.assertTrue(Precision.equals(153.0000, 153.0625, .0625));<a name="line.80"></a>
<span class="sourceLineNo">081</span>        Assert.assertTrue(Precision.equals(152.9375, 153.0000, .0625));<a name="line.81"></a>
<span class="sourceLineNo">082</span>        Assert.assertFalse(Precision.equals(153.0000, 153.0625, .0624));<a name="line.82"></a>
<span class="sourceLineNo">083</span>        Assert.assertFalse(Precision.equals(152.9374, 153.0000, .0625));<a name="line.83"></a>
<span class="sourceLineNo">084</span>        Assert.assertFalse(Precision.equals(Double.NaN, Double.NaN, 1.0));<a name="line.84"></a>
<span class="sourceLineNo">085</span>        Assert.assertTrue(Precision.equals(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 1.0));<a name="line.85"></a>
<span class="sourceLineNo">086</span>        Assert.assertTrue(Precision.equals(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 1.0));<a name="line.86"></a>
<span class="sourceLineNo">087</span>        Assert.assertFalse(Precision.equals(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, 1.0));<a name="line.87"></a>
<span class="sourceLineNo">088</span>    }<a name="line.88"></a>
<span class="sourceLineNo">089</span><a name="line.89"></a>
<span class="sourceLineNo">090</span>    @Test<a name="line.90"></a>
<span class="sourceLineNo">091</span>    public void testMath475() {<a name="line.91"></a>
<span class="sourceLineNo">092</span>        final double a = 1.7976931348623182E16;<a name="line.92"></a>
<span class="sourceLineNo">093</span>        final double b = FastMath.nextUp(a);<a name="line.93"></a>
<span class="sourceLineNo">094</span><a name="line.94"></a>
<span class="sourceLineNo">095</span>        double diff = FastMath.abs(a - b);<a name="line.95"></a>
<span class="sourceLineNo">096</span>        // Because they are adjacent floating point numbers, "a" and "b" are<a name="line.96"></a>
<span class="sourceLineNo">097</span>        // considered equal even though the allowed error is smaller than<a name="line.97"></a>
<span class="sourceLineNo">098</span>        // their difference.<a name="line.98"></a>
<span class="sourceLineNo">099</span>        Assert.assertTrue(Precision.equals(a, b, 0.5 * diff));<a name="line.99"></a>
<span class="sourceLineNo">100</span><a name="line.100"></a>
<span class="sourceLineNo">101</span>        final double c = FastMath.nextUp(b);<a name="line.101"></a>
<span class="sourceLineNo">102</span>        diff = FastMath.abs(a - c);<a name="line.102"></a>
<span class="sourceLineNo">103</span>        // Because "a" and "c" are not adjacent, the tolerance is taken into<a name="line.103"></a>
<span class="sourceLineNo">104</span>        // account for assessing equality.<a name="line.104"></a>
<span class="sourceLineNo">105</span>        Assert.assertTrue(Precision.equals(a, c, diff));<a name="line.105"></a>
<span class="sourceLineNo">106</span>        Assert.assertFalse(Precision.equals(a, c, (1 - 1e-16) * diff));<a name="line.106"></a>
<span class="sourceLineNo">107</span>    }<a name="line.107"></a>
<span class="sourceLineNo">108</span><a name="line.108"></a>
<span class="sourceLineNo">109</span>    @Test<a name="line.109"></a>
<span class="sourceLineNo">110</span>    public void testEqualsIncludingNaNWithAllowedDelta() {<a name="line.110"></a>
<span class="sourceLineNo">111</span>        Assert.assertTrue(Precision.equalsIncludingNaN(153.0000, 153.0000, .0625));<a name="line.111"></a>
<span class="sourceLineNo">112</span>        Assert.assertTrue(Precision.equalsIncludingNaN(153.0000, 153.0625, .0625));<a name="line.112"></a>
<span class="sourceLineNo">113</span>        Assert.assertTrue(Precision.equalsIncludingNaN(152.9375, 153.0000, .0625));<a name="line.113"></a>
<span class="sourceLineNo">114</span>        Assert.assertTrue(Precision.equalsIncludingNaN(Double.NaN, Double.NaN, 1.0));<a name="line.114"></a>
<span class="sourceLineNo">115</span>        Assert.assertTrue(Precision.equalsIncludingNaN(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 1.0));<a name="line.115"></a>
<span class="sourceLineNo">116</span>        Assert.assertTrue(Precision.equalsIncludingNaN(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 1.0));<a name="line.116"></a>
<span class="sourceLineNo">117</span>        Assert.assertFalse(Precision.equalsIncludingNaN(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, 1.0));<a name="line.117"></a>
<span class="sourceLineNo">118</span>        Assert.assertFalse(Precision.equalsIncludingNaN(153.0000, 153.0625, .0624));<a name="line.118"></a>
<span class="sourceLineNo">119</span>        Assert.assertFalse(Precision.equalsIncludingNaN(152.9374, 153.0000, .0625));<a name="line.119"></a>
<span class="sourceLineNo">120</span>    }<a name="line.120"></a>
<span class="sourceLineNo">121</span><a name="line.121"></a>
<span class="sourceLineNo">122</span>    // Tests for floating point equality<a name="line.122"></a>
<span class="sourceLineNo">123</span>    @Test<a name="line.123"></a>
<span class="sourceLineNo">124</span>    public void testFloatEqualsWithAllowedUlps() {<a name="line.124"></a>
<span class="sourceLineNo">125</span>        Assert.assertTrue("+0.0f == -0.0f",Precision.equals(0.0f, -0.0f));<a name="line.125"></a>
<span class="sourceLineNo">126</span>        Assert.assertTrue("+0.0f == -0.0f (1 ulp)",Precision.equals(0.0f, -0.0f, 1));<a name="line.126"></a>
<span class="sourceLineNo">127</span>        float oneFloat = 1.0f;<a name="line.127"></a>
<span class="sourceLineNo">128</span>        Assert.assertTrue("1.0f == 1.0f + 1 ulp",Precision.equals(oneFloat, Float.intBitsToFloat(1 + Float.floatToIntBits(oneFloat))));<a name="line.128"></a>
<span class="sourceLineNo">129</span>        Assert.assertTrue("1.0f == 1.0f + 1 ulp (1 ulp)",Precision.equals(oneFloat, Float.intBitsToFloat(1 + Float.floatToIntBits(oneFloat)), 1));<a name="line.129"></a>
<span class="sourceLineNo">130</span>        Assert.assertFalse("1.0f != 1.0f + 2 ulp (1 ulp)",Precision.equals(oneFloat, Float.intBitsToFloat(2 + Float.floatToIntBits(oneFloat)), 1));<a name="line.130"></a>
<span class="sourceLineNo">131</span><a name="line.131"></a>
<span class="sourceLineNo">132</span>        Assert.assertTrue(Precision.equals(153.0f, 153.0f, 1));<a name="line.132"></a>
<span class="sourceLineNo">133</span><a name="line.133"></a>
<span class="sourceLineNo">134</span>        // These tests need adjusting for floating point precision<a name="line.134"></a>
<span class="sourceLineNo">135</span>//        Assert.assertTrue(Precision.equals(153.0f, 153.00000000000003f, 1));<a name="line.135"></a>
<span class="sourceLineNo">136</span>//        Assert.assertFalse(Precision.equals(153.0f, 153.00000000000006f, 1));<a name="line.136"></a>
<span class="sourceLineNo">137</span>//        Assert.assertTrue(Precision.equals(153.0f, 152.99999999999997f, 1));<a name="line.137"></a>
<span class="sourceLineNo">138</span>//        Assert.assertFalse(Precision.equals(153f, 152.99999999999994f, 1));<a name="line.138"></a>
<span class="sourceLineNo">139</span>//<a name="line.139"></a>
<span class="sourceLineNo">140</span>//        Assert.assertTrue(Precision.equals(-128.0f, -127.99999999999999f, 1));<a name="line.140"></a>
<span class="sourceLineNo">141</span>//        Assert.assertFalse(Precision.equals(-128.0f, -127.99999999999997f, 1));<a name="line.141"></a>
<span class="sourceLineNo">142</span>//        Assert.assertTrue(Precision.equals(-128.0f, -128.00000000000003f, 1));<a name="line.142"></a>
<span class="sourceLineNo">143</span>//        Assert.assertFalse(Precision.equals(-128.0f, -128.00000000000006f, 1));<a name="line.143"></a>
<span class="sourceLineNo">144</span><a name="line.144"></a>
<span class="sourceLineNo">145</span>        Assert.assertTrue(Precision.equals(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY, 1));<a name="line.145"></a>
<span class="sourceLineNo">146</span>        Assert.assertTrue(Precision.equals(Double.MAX_VALUE, Float.POSITIVE_INFINITY, 1));<a name="line.146"></a>
<span class="sourceLineNo">147</span><a name="line.147"></a>
<span class="sourceLineNo">148</span>        Assert.assertTrue(Precision.equals(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, 1));<a name="line.148"></a>
<span class="sourceLineNo">149</span>        Assert.assertTrue(Precision.equals(-Float.MAX_VALUE, Float.NEGATIVE_INFINITY, 1));<a name="line.149"></a>
<span class="sourceLineNo">150</span><a name="line.150"></a>
<span class="sourceLineNo">151</span>        Assert.assertFalse(Precision.equals(Float.NaN, Float.NaN, 1));<a name="line.151"></a>
<span class="sourceLineNo">152</span>        Assert.assertFalse(Precision.equals(Float.NaN, Float.NaN, 0));<a name="line.152"></a>
<span class="sourceLineNo">153</span>        Assert.assertFalse(Precision.equals(Float.NaN, 0, 0));<a name="line.153"></a>
<span class="sourceLineNo">154</span>        Assert.assertFalse(Precision.equals(Float.NaN, Float.POSITIVE_INFINITY, 0));<a name="line.154"></a>
<span class="sourceLineNo">155</span>        Assert.assertFalse(Precision.equals(Float.NaN, Float.NEGATIVE_INFINITY, 0));<a name="line.155"></a>
<span class="sourceLineNo">156</span><a name="line.156"></a>
<span class="sourceLineNo">157</span>        Assert.assertFalse(Precision.equals(Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY, 100000));<a name="line.157"></a>
<span class="sourceLineNo">158</span>    }<a name="line.158"></a>
<span class="sourceLineNo">159</span><a name="line.159"></a>
<span class="sourceLineNo">160</span>    @Test<a name="line.160"></a>
<span class="sourceLineNo">161</span>    public void testEqualsWithAllowedUlps() {<a name="line.161"></a>
<span class="sourceLineNo">162</span>        Assert.assertTrue(Precision.equals(0.0, -0.0, 1));<a name="line.162"></a>
<span class="sourceLineNo">163</span><a name="line.163"></a>
<span class="sourceLineNo">164</span>        Assert.assertTrue(Precision.equals(1.0, 1 + FastMath.ulp(1d), 1));<a name="line.164"></a>
<span class="sourceLineNo">165</span>        Assert.assertFalse(Precision.equals(1.0, 1 + 2 * FastMath.ulp(1d), 1));<a name="line.165"></a>
<span class="sourceLineNo">166</span><a name="line.166"></a>
<span class="sourceLineNo">167</span>        final double nUp1 = FastMath.nextAfter(1d, Double.POSITIVE_INFINITY);<a name="line.167"></a>
<span class="sourceLineNo">168</span>        final double nnUp1 = FastMath.nextAfter(nUp1, Double.POSITIVE_INFINITY);<a name="line.168"></a>
<span class="sourceLineNo">169</span>        Assert.assertTrue(Precision.equals(1.0, nUp1, 1));<a name="line.169"></a>
<span class="sourceLineNo">170</span>        Assert.assertTrue(Precision.equals(nUp1, nnUp1, 1));<a name="line.170"></a>
<span class="sourceLineNo">171</span>        Assert.assertFalse(Precision.equals(1.0, nnUp1, 1));<a name="line.171"></a>
<span class="sourceLineNo">172</span><a name="line.172"></a>
<span class="sourceLineNo">173</span>        Assert.assertTrue(Precision.equals(0.0, FastMath.ulp(0d), 1));<a name="line.173"></a>
<span class="sourceLineNo">174</span>        Assert.assertTrue(Precision.equals(0.0, -FastMath.ulp(0d), 1));<a name="line.174"></a>
<span class="sourceLineNo">175</span><a name="line.175"></a>
<span class="sourceLineNo">176</span>        Assert.assertTrue(Precision.equals(153.0, 153.0, 1));<a name="line.176"></a>
<span class="sourceLineNo">177</span><a name="line.177"></a>
<span class="sourceLineNo">178</span>        Assert.assertTrue(Precision.equals(153.0, 153.00000000000003, 1));<a name="line.178"></a>
<span class="sourceLineNo">179</span>        Assert.assertFalse(Precision.equals(153.0, 153.00000000000006, 1));<a name="line.179"></a>
<span class="sourceLineNo">180</span>        Assert.assertTrue(Precision.equals(153.0, 152.99999999999997, 1));<a name="line.180"></a>
<span class="sourceLineNo">181</span>        Assert.assertFalse(Precision.equals(153, 152.99999999999994, 1));<a name="line.181"></a>
<span class="sourceLineNo">182</span><a name="line.182"></a>
<span class="sourceLineNo">183</span>        Assert.assertTrue(Precision.equals(-128.0, -127.99999999999999, 1));<a name="line.183"></a>
<span class="sourceLineNo">184</span>        Assert.assertFalse(Precision.equals(-128.0, -127.99999999999997, 1));<a name="line.184"></a>
<span class="sourceLineNo">185</span>        Assert.assertTrue(Precision.equals(-128.0, -128.00000000000003, 1));<a name="line.185"></a>
<span class="sourceLineNo">186</span>        Assert.assertFalse(Precision.equals(-128.0, -128.00000000000006, 1));<a name="line.186"></a>
<span class="sourceLineNo">187</span><a name="line.187"></a>
<span class="sourceLineNo">188</span>        Assert.assertTrue(Precision.equals(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 1));<a name="line.188"></a>
<span class="sourceLineNo">189</span>        Assert.assertTrue(Precision.equals(Double.MAX_VALUE, Double.POSITIVE_INFINITY, 1));<a name="line.189"></a>
<span class="sourceLineNo">190</span><a name="line.190"></a>
<span class="sourceLineNo">191</span>        Assert.assertTrue(Precision.equals(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 1));<a name="line.191"></a>
<span class="sourceLineNo">192</span>        Assert.assertTrue(Precision.equals(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY, 1));<a name="line.192"></a>
<span class="sourceLineNo">193</span><a name="line.193"></a>
<span class="sourceLineNo">194</span>        Assert.assertFalse(Precision.equals(Double.NaN, Double.NaN, 1));<a name="line.194"></a>
<span class="sourceLineNo">195</span>        Assert.assertFalse(Precision.equals(Double.NaN, Double.NaN, 0));<a name="line.195"></a>
<span class="sourceLineNo">196</span>        Assert.assertFalse(Precision.equals(Double.NaN, 0, 0));<a name="line.196"></a>
<span class="sourceLineNo">197</span>        Assert.assertFalse(Precision.equals(Double.NaN, Double.POSITIVE_INFINITY, 0));<a name="line.197"></a>
<span class="sourceLineNo">198</span>        Assert.assertFalse(Precision.equals(Double.NaN, Double.NEGATIVE_INFINITY, 0));<a name="line.198"></a>
<span class="sourceLineNo">199</span><a name="line.199"></a>
<span class="sourceLineNo">200</span>        Assert.assertFalse(Precision.equals(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, 100000));<a name="line.200"></a>
<span class="sourceLineNo">201</span>    }<a name="line.201"></a>
<span class="sourceLineNo">202</span><a name="line.202"></a>
<span class="sourceLineNo">203</span>    @Test<a name="line.203"></a>
<span class="sourceLineNo">204</span>    public void testEqualsIncludingNaNWithAllowedUlps() {<a name="line.204"></a>
<span class="sourceLineNo">205</span>        Assert.assertTrue(Precision.equalsIncludingNaN(0.0, -0.0, 1));<a name="line.205"></a>
<span class="sourceLineNo">206</span><a name="line.206"></a>
<span class="sourceLineNo">207</span>        Assert.assertTrue(Precision.equalsIncludingNaN(1.0, 1 + FastMath.ulp(1d), 1));<a name="line.207"></a>
<span class="sourceLineNo">208</span>        Assert.assertFalse(Precision.equalsIncludingNaN(1.0, 1 + 2 * FastMath.ulp(1d), 1));<a name="line.208"></a>
<span class="sourceLineNo">209</span><a name="line.209"></a>
<span class="sourceLineNo">210</span>        final double nUp1 = FastMath.nextAfter(1d, Double.POSITIVE_INFINITY);<a name="line.210"></a>
<span class="sourceLineNo">211</span>        final double nnUp1 = FastMath.nextAfter(nUp1, Double.POSITIVE_INFINITY);<a name="line.211"></a>
<span class="sourceLineNo">212</span>        Assert.assertTrue(Precision.equalsIncludingNaN(1.0, nUp1, 1));<a name="line.212"></a>
<span class="sourceLineNo">213</span>        Assert.assertTrue(Precision.equalsIncludingNaN(nUp1, nnUp1, 1));<a name="line.213"></a>
<span class="sourceLineNo">214</span>        Assert.assertFalse(Precision.equalsIncludingNaN(1.0, nnUp1, 1));<a name="line.214"></a>
<span class="sourceLineNo">215</span><a name="line.215"></a>
<span class="sourceLineNo">216</span>        Assert.assertTrue(Precision.equalsIncludingNaN(0.0, FastMath.ulp(0d), 1));<a name="line.216"></a>
<span class="sourceLineNo">217</span>        Assert.assertTrue(Precision.equalsIncludingNaN(0.0, -FastMath.ulp(0d), 1));<a name="line.217"></a>
<span class="sourceLineNo">218</span><a name="line.218"></a>
<span class="sourceLineNo">219</span>        Assert.assertTrue(Precision.equalsIncludingNaN(153.0, 153.0, 1));<a name="line.219"></a>
<span class="sourceLineNo">220</span><a name="line.220"></a>
<span class="sourceLineNo">221</span>        Assert.assertTrue(Precision.equalsIncludingNaN(153.0, 153.00000000000003, 1));<a name="line.221"></a>
<span class="sourceLineNo">222</span>        Assert.assertFalse(Precision.equalsIncludingNaN(153.0, 153.00000000000006, 1));<a name="line.222"></a>
<span class="sourceLineNo">223</span>        Assert.assertTrue(Precision.equalsIncludingNaN(153.0, 152.99999999999997, 1));<a name="line.223"></a>
<span class="sourceLineNo">224</span>        Assert.assertFalse(Precision.equalsIncludingNaN(153, 152.99999999999994, 1));<a name="line.224"></a>
<span class="sourceLineNo">225</span><a name="line.225"></a>
<span class="sourceLineNo">226</span>        Assert.assertTrue(Precision.equalsIncludingNaN(-128.0, -127.99999999999999, 1));<a name="line.226"></a>
<span class="sourceLineNo">227</span>        Assert.assertFalse(Precision.equalsIncludingNaN(-128.0, -127.99999999999997, 1));<a name="line.227"></a>
<span class="sourceLineNo">228</span>        Assert.assertTrue(Precision.equalsIncludingNaN(-128.0, -128.00000000000003, 1));<a name="line.228"></a>
<span class="sourceLineNo">229</span>        Assert.assertFalse(Precision.equalsIncludingNaN(-128.0, -128.00000000000006, 1));<a name="line.229"></a>
<span class="sourceLineNo">230</span><a name="line.230"></a>
<span class="sourceLineNo">231</span>        Assert.assertTrue(Precision.equalsIncludingNaN(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 1));<a name="line.231"></a>
<span class="sourceLineNo">232</span>        Assert.assertTrue(Precision.equalsIncludingNaN(Double.MAX_VALUE, Double.POSITIVE_INFINITY, 1));<a name="line.232"></a>
<span class="sourceLineNo">233</span><a name="line.233"></a>
<span class="sourceLineNo">234</span>        Assert.assertTrue(Precision.equalsIncludingNaN(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 1));<a name="line.234"></a>
<span class="sourceLineNo">235</span>        Assert.assertTrue(Precision.equalsIncludingNaN(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY, 1));<a name="line.235"></a>
<span class="sourceLineNo">236</span><a name="line.236"></a>
<span class="sourceLineNo">237</span>        Assert.assertTrue(Precision.equalsIncludingNaN(Double.NaN, Double.NaN, 1));<a name="line.237"></a>
<span class="sourceLineNo">238</span><a name="line.238"></a>
<span class="sourceLineNo">239</span>        Assert.assertFalse(Precision.equalsIncludingNaN(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, 100000));<a name="line.239"></a>
<span class="sourceLineNo">240</span>    }<a name="line.240"></a>
<span class="sourceLineNo">241</span><a name="line.241"></a>
<span class="sourceLineNo">242</span>    @Test<a name="line.242"></a>
<span class="sourceLineNo">243</span>    public void testCompareToEpsilon() {<a name="line.243"></a>
<span class="sourceLineNo">244</span>        Assert.assertEquals(0, Precision.compareTo(152.33, 152.32, .011));<a name="line.244"></a>
<span class="sourceLineNo">245</span>        Assert.assertTrue(Precision.compareTo(152.308, 152.32, .011) &lt; 0);<a name="line.245"></a>
<span class="sourceLineNo">246</span>        Assert.assertTrue(Precision.compareTo(152.33, 152.318, .011) &gt; 0);<a name="line.246"></a>
<span class="sourceLineNo">247</span>        Assert.assertEquals(0, Precision.compareTo(Double.MIN_VALUE, +0.0, Double.MIN_VALUE));<a name="line.247"></a>
<span class="sourceLineNo">248</span>        Assert.assertEquals(0, Precision.compareTo(Double.MIN_VALUE, -0.0, Double.MIN_VALUE));<a name="line.248"></a>
<span class="sourceLineNo">249</span>    }<a name="line.249"></a>
<span class="sourceLineNo">250</span><a name="line.250"></a>
<span class="sourceLineNo">251</span>    @Test<a name="line.251"></a>
<span class="sourceLineNo">252</span>    public void testCompareToMaxUlps() {<a name="line.252"></a>
<span class="sourceLineNo">253</span>        double a     = 152.32;<a name="line.253"></a>
<span class="sourceLineNo">254</span>        double delta = FastMath.ulp(a);<a name="line.254"></a>
<span class="sourceLineNo">255</span>        for (int i = 0; i &lt;= 10; ++i) {<a name="line.255"></a>
<span class="sourceLineNo">256</span>            if (i &lt;= 5) {<a name="line.256"></a>
<span class="sourceLineNo">257</span>                Assert.assertEquals( 0, Precision.compareTo(a, a + i * delta, 5));<a name="line.257"></a>
<span class="sourceLineNo">258</span>                Assert.assertEquals( 0, Precision.compareTo(a, a - i * delta, 5));<a name="line.258"></a>
<span class="sourceLineNo">259</span>            } else {<a name="line.259"></a>
<span class="sourceLineNo">260</span>                Assert.assertEquals(-1, Precision.compareTo(a, a + i * delta, 5));<a name="line.260"></a>
<span class="sourceLineNo">261</span>                Assert.assertEquals(+1, Precision.compareTo(a, a - i * delta, 5));<a name="line.261"></a>
<span class="sourceLineNo">262</span>            }<a name="line.262"></a>
<span class="sourceLineNo">263</span>        }<a name="line.263"></a>
<span class="sourceLineNo">264</span><a name="line.264"></a>
<span class="sourceLineNo">265</span>        Assert.assertEquals( 0, Precision.compareTo(-0.0, 0.0, 0));<a name="line.265"></a>
<span class="sourceLineNo">266</span><a name="line.266"></a>
<span class="sourceLineNo">267</span>        Assert.assertEquals(-1, Precision.compareTo(-Double.MIN_VALUE, -0.0, 0));<a name="line.267"></a>
<span class="sourceLineNo">268</span>        Assert.assertEquals( 0, Precision.compareTo(-Double.MIN_VALUE, -0.0, 1));<a name="line.268"></a>
<span class="sourceLineNo">269</span>        Assert.assertEquals(-1, Precision.compareTo(-Double.MIN_VALUE, +0.0, 0));<a name="line.269"></a>
<span class="sourceLineNo">270</span>        Assert.assertEquals( 0, Precision.compareTo(-Double.MIN_VALUE, +0.0, 1));<a name="line.270"></a>
<span class="sourceLineNo">271</span><a name="line.271"></a>
<span class="sourceLineNo">272</span>        Assert.assertEquals(+1, Precision.compareTo( Double.MIN_VALUE, -0.0, 0));<a name="line.272"></a>
<span class="sourceLineNo">273</span>        Assert.assertEquals( 0, Precision.compareTo( Double.MIN_VALUE, -0.0, 1));<a name="line.273"></a>
<span class="sourceLineNo">274</span>        Assert.assertEquals(+1, Precision.compareTo( Double.MIN_VALUE, +0.0, 0));<a name="line.274"></a>
<span class="sourceLineNo">275</span>        Assert.assertEquals( 0, Precision.compareTo( Double.MIN_VALUE, +0.0, 1));<a name="line.275"></a>
<span class="sourceLineNo">276</span><a name="line.276"></a>
<span class="sourceLineNo">277</span>        Assert.assertEquals(-1, Precision.compareTo(-Double.MIN_VALUE, Double.MIN_VALUE, 0));<a name="line.277"></a>
<span class="sourceLineNo">278</span>        Assert.assertEquals(-1, Precision.compareTo(-Double.MIN_VALUE, Double.MIN_VALUE, 1));<a name="line.278"></a>
<span class="sourceLineNo">279</span>        Assert.assertEquals( 0, Precision.compareTo(-Double.MIN_VALUE, Double.MIN_VALUE, 2));<a name="line.279"></a>
<span class="sourceLineNo">280</span><a name="line.280"></a>
<span class="sourceLineNo">281</span>        Assert.assertEquals( 0, Precision.compareTo(Double.MAX_VALUE, Double.POSITIVE_INFINITY, 1));<a name="line.281"></a>
<span class="sourceLineNo">282</span>        Assert.assertEquals(-1, Precision.compareTo(Double.MAX_VALUE, Double.POSITIVE_INFINITY, 0));<a name="line.282"></a>
<span class="sourceLineNo">283</span><a name="line.283"></a>
<span class="sourceLineNo">284</span>        Assert.assertEquals(+1, Precision.compareTo(Double.MAX_VALUE, Double.NaN, Integer.MAX_VALUE));<a name="line.284"></a>
<span class="sourceLineNo">285</span>        Assert.assertEquals(+1, Precision.compareTo(Double.NaN, Double.MAX_VALUE, Integer.MAX_VALUE));<a name="line.285"></a>
<span class="sourceLineNo">286</span>    }<a name="line.286"></a>
<span class="sourceLineNo">287</span><a name="line.287"></a>
<span class="sourceLineNo">288</span>    @Test<a name="line.288"></a>
<span class="sourceLineNo">289</span>    public void testRoundDouble() {<a name="line.289"></a>
<span class="sourceLineNo">290</span>        double x = 1.234567890;<a name="line.290"></a>
<span class="sourceLineNo">291</span>        Assert.assertEquals(1.23, Precision.round(x, 2), 0.0);<a name="line.291"></a>
<span class="sourceLineNo">292</span>        Assert.assertEquals(1.235, Precision.round(x, 3), 0.0);<a name="line.292"></a>
<span class="sourceLineNo">293</span>        Assert.assertEquals(1.2346, Precision.round(x, 4), 0.0);<a name="line.293"></a>
<span class="sourceLineNo">294</span><a name="line.294"></a>
<span class="sourceLineNo">295</span>        // JIRA MATH-151<a name="line.295"></a>
<span class="sourceLineNo">296</span>        Assert.assertEquals(39.25, Precision.round(39.245, 2), 0.0);<a name="line.296"></a>
<span class="sourceLineNo">297</span>        Assert.assertEquals(39.24, Precision.round(39.245, 2, BigDecimal.ROUND_DOWN), 0.0);<a name="line.297"></a>
<span class="sourceLineNo">298</span>        double xx = 39.0;<a name="line.298"></a>
<span class="sourceLineNo">299</span>        xx += 245d / 1000d;<a name="line.299"></a>
<span class="sourceLineNo">300</span>        Assert.assertEquals(39.25, Precision.round(xx, 2), 0.0);<a name="line.300"></a>
<span class="sourceLineNo">301</span><a name="line.301"></a>
<span class="sourceLineNo">302</span>        // BZ 35904<a name="line.302"></a>
<span class="sourceLineNo">303</span>        Assert.assertEquals(30.1d, Precision.round(30.095d, 2), 0.0d);<a name="line.303"></a>
<span class="sourceLineNo">304</span>        Assert.assertEquals(30.1d, Precision.round(30.095d, 1), 0.0d);<a name="line.304"></a>
<span class="sourceLineNo">305</span>        Assert.assertEquals(33.1d, Precision.round(33.095d, 1), 0.0d);<a name="line.305"></a>
<span class="sourceLineNo">306</span>        Assert.assertEquals(33.1d, Precision.round(33.095d, 2), 0.0d);<a name="line.306"></a>
<span class="sourceLineNo">307</span>        Assert.assertEquals(50.09d, Precision.round(50.085d, 2), 0.0d);<a name="line.307"></a>
<span class="sourceLineNo">308</span>        Assert.assertEquals(50.19d, Precision.round(50.185d, 2), 0.0d);<a name="line.308"></a>
<span class="sourceLineNo">309</span>        Assert.assertEquals(50.01d, Precision.round(50.005d, 2), 0.0d);<a name="line.309"></a>
<span class="sourceLineNo">310</span>        Assert.assertEquals(30.01d, Precision.round(30.005d, 2), 0.0d);<a name="line.310"></a>
<span class="sourceLineNo">311</span>        Assert.assertEquals(30.65d, Precision.round(30.645d, 2), 0.0d);<a name="line.311"></a>
<span class="sourceLineNo">312</span><a name="line.312"></a>
<span class="sourceLineNo">313</span>        Assert.assertEquals(1.24, Precision.round(x, 2, BigDecimal.ROUND_CEILING), 0.0);<a name="line.313"></a>
<span class="sourceLineNo">314</span>        Assert.assertEquals(1.235, Precision.round(x, 3, BigDecimal.ROUND_CEILING), 0.0);<a name="line.314"></a>
<span class="sourceLineNo">315</span>        Assert.assertEquals(1.2346, Precision.round(x, 4, BigDecimal.ROUND_CEILING), 0.0);<a name="line.315"></a>
<span class="sourceLineNo">316</span>        Assert.assertEquals(-1.23, Precision.round(-x, 2, BigDecimal.ROUND_CEILING), 0.0);<a name="line.316"></a>
<span class="sourceLineNo">317</span>        Assert.assertEquals(-1.234, Precision.round(-x, 3, BigDecimal.ROUND_CEILING), 0.0);<a name="line.317"></a>
<span class="sourceLineNo">318</span>        Assert.assertEquals(-1.2345, Precision.round(-x, 4, BigDecimal.ROUND_CEILING), 0.0);<a name="line.318"></a>
<span class="sourceLineNo">319</span><a name="line.319"></a>
<span class="sourceLineNo">320</span>        Assert.assertEquals(1.23, Precision.round(x, 2, BigDecimal.ROUND_DOWN), 0.0);<a name="line.320"></a>
<span class="sourceLineNo">321</span>        Assert.assertEquals(1.234, Precision.round(x, 3, BigDecimal.ROUND_DOWN), 0.0);<a name="line.321"></a>
<span class="sourceLineNo">322</span>        Assert.assertEquals(1.2345, Precision.round(x, 4, BigDecimal.ROUND_DOWN), 0.0);<a name="line.322"></a>
<span class="sourceLineNo">323</span>        Assert.assertEquals(-1.23, Precision.round(-x, 2, BigDecimal.ROUND_DOWN), 0.0);<a name="line.323"></a>
<span class="sourceLineNo">324</span>        Assert.assertEquals(-1.234, Precision.round(-x, 3, BigDecimal.ROUND_DOWN), 0.0);<a name="line.324"></a>
<span class="sourceLineNo">325</span>        Assert.assertEquals(-1.2345, Precision.round(-x, 4, BigDecimal.ROUND_DOWN), 0.0);<a name="line.325"></a>
<span class="sourceLineNo">326</span><a name="line.326"></a>
<span class="sourceLineNo">327</span>        Assert.assertEquals(1.23, Precision.round(x, 2, BigDecimal.ROUND_FLOOR), 0.0);<a name="line.327"></a>
<span class="sourceLineNo">328</span>        Assert.assertEquals(1.234, Precision.round(x, 3, BigDecimal.ROUND_FLOOR), 0.0);<a name="line.328"></a>
<span class="sourceLineNo">329</span>        Assert.assertEquals(1.2345, Precision.round(x, 4, BigDecimal.ROUND_FLOOR), 0.0);<a name="line.329"></a>
<span class="sourceLineNo">330</span>        Assert.assertEquals(-1.24, Precision.round(-x, 2, BigDecimal.ROUND_FLOOR), 0.0);<a name="line.330"></a>
<span class="sourceLineNo">331</span>        Assert.assertEquals(-1.235, Precision.round(-x, 3, BigDecimal.ROUND_FLOOR), 0.0);<a name="line.331"></a>
<span class="sourceLineNo">332</span>        Assert.assertEquals(-1.2346, Precision.round(-x, 4, BigDecimal.ROUND_FLOOR), 0.0);<a name="line.332"></a>
<span class="sourceLineNo">333</span><a name="line.333"></a>
<span class="sourceLineNo">334</span>        Assert.assertEquals(1.23, Precision.round(x, 2, BigDecimal.ROUND_HALF_DOWN), 0.0);<a name="line.334"></a>
<span class="sourceLineNo">335</span>        Assert.assertEquals(1.235, Precision.round(x, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);<a name="line.335"></a>
<span class="sourceLineNo">336</span>        Assert.assertEquals(1.2346, Precision.round(x, 4, BigDecimal.ROUND_HALF_DOWN), 0.0);<a name="line.336"></a>
<span class="sourceLineNo">337</span>        Assert.assertEquals(-1.23, Precision.round(-x, 2, BigDecimal.ROUND_HALF_DOWN), 0.0);<a name="line.337"></a>
<span class="sourceLineNo">338</span>        Assert.assertEquals(-1.235, Precision.round(-x, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);<a name="line.338"></a>
<span class="sourceLineNo">339</span>        Assert.assertEquals(-1.2346, Precision.round(-x, 4, BigDecimal.ROUND_HALF_DOWN), 0.0);<a name="line.339"></a>
<span class="sourceLineNo">340</span>        Assert.assertEquals(1.234, Precision.round(1.2345, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);<a name="line.340"></a>
<span class="sourceLineNo">341</span>        Assert.assertEquals(-1.234, Precision.round(-1.2345, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);<a name="line.341"></a>
<span class="sourceLineNo">342</span><a name="line.342"></a>
<span class="sourceLineNo">343</span>        Assert.assertEquals(1.23, Precision.round(x, 2, BigDecimal.ROUND_HALF_EVEN), 0.0);<a name="line.343"></a>
<span class="sourceLineNo">344</span>        Assert.assertEquals(1.235, Precision.round(x, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);<a name="line.344"></a>
<span class="sourceLineNo">345</span>        Assert.assertEquals(1.2346, Precision.round(x, 4, BigDecimal.ROUND_HALF_EVEN), 0.0);<a name="line.345"></a>
<span class="sourceLineNo">346</span>        Assert.assertEquals(-1.23, Precision.round(-x, 2, BigDecimal.ROUND_HALF_EVEN), 0.0);<a name="line.346"></a>
<span class="sourceLineNo">347</span>        Assert.assertEquals(-1.235, Precision.round(-x, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);<a name="line.347"></a>
<span class="sourceLineNo">348</span>        Assert.assertEquals(-1.2346, Precision.round(-x, 4, BigDecimal.ROUND_HALF_EVEN), 0.0);<a name="line.348"></a>
<span class="sourceLineNo">349</span>        Assert.assertEquals(1.234, Precision.round(1.2345, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);<a name="line.349"></a>
<span class="sourceLineNo">350</span>        Assert.assertEquals(-1.234, Precision.round(-1.2345, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);<a name="line.350"></a>
<span class="sourceLineNo">351</span>        Assert.assertEquals(1.236, Precision.round(1.2355, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);<a name="line.351"></a>
<span class="sourceLineNo">352</span>        Assert.assertEquals(-1.236, Precision.round(-1.2355, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);<a name="line.352"></a>
<span class="sourceLineNo">353</span><a name="line.353"></a>
<span class="sourceLineNo">354</span>        Assert.assertEquals(1.23, Precision.round(x, 2, BigDecimal.ROUND_HALF_UP), 0.0);<a name="line.354"></a>
<span class="sourceLineNo">355</span>        Assert.assertEquals(1.235, Precision.round(x, 3, BigDecimal.ROUND_HALF_UP), 0.0);<a name="line.355"></a>
<span class="sourceLineNo">356</span>        Assert.assertEquals(1.2346, Precision.round(x, 4, BigDecimal.ROUND_HALF_UP), 0.0);<a name="line.356"></a>
<span class="sourceLineNo">357</span>        Assert.assertEquals(-1.23, Precision.round(-x, 2, BigDecimal.ROUND_HALF_UP), 0.0);<a name="line.357"></a>
<span class="sourceLineNo">358</span>        Assert.assertEquals(-1.235, Precision.round(-x, 3, BigDecimal.ROUND_HALF_UP), 0.0);<a name="line.358"></a>
<span class="sourceLineNo">359</span>        Assert.assertEquals(-1.2346, Precision.round(-x, 4, BigDecimal.ROUND_HALF_UP), 0.0);<a name="line.359"></a>
<span class="sourceLineNo">360</span>        Assert.assertEquals(1.235, Precision.round(1.2345, 3, BigDecimal.ROUND_HALF_UP), 0.0);<a name="line.360"></a>
<span class="sourceLineNo">361</span>        Assert.assertEquals(-1.235, Precision.round(-1.2345, 3, BigDecimal.ROUND_HALF_UP), 0.0);<a name="line.361"></a>
<span class="sourceLineNo">362</span><a name="line.362"></a>
<span class="sourceLineNo">363</span>        Assert.assertEquals(-1.23, Precision.round(-1.23, 2, BigDecimal.ROUND_UNNECESSARY), 0.0);<a name="line.363"></a>
<span class="sourceLineNo">364</span>        Assert.assertEquals(1.23, Precision.round(1.23, 2, BigDecimal.ROUND_UNNECESSARY), 0.0);<a name="line.364"></a>
<span class="sourceLineNo">365</span><a name="line.365"></a>
<span class="sourceLineNo">366</span>        try {<a name="line.366"></a>
<span class="sourceLineNo">367</span>            Precision.round(1.234, 2, BigDecimal.ROUND_UNNECESSARY);<a name="line.367"></a>
<span class="sourceLineNo">368</span>            Assert.fail();<a name="line.368"></a>
<span class="sourceLineNo">369</span>        } catch (ArithmeticException ex) {<a name="line.369"></a>
<span class="sourceLineNo">370</span>            // expected<a name="line.370"></a>
<span class="sourceLineNo">371</span>        }<a name="line.371"></a>
<span class="sourceLineNo">372</span><a name="line.372"></a>
<span class="sourceLineNo">373</span>        Assert.assertEquals(1.24, Precision.round(x, 2, BigDecimal.ROUND_UP), 0.0);<a name="line.373"></a>
<span class="sourceLineNo">374</span>        Assert.assertEquals(1.235, Precision.round(x, 3, BigDecimal.ROUND_UP), 0.0);<a name="line.374"></a>
<span class="sourceLineNo">375</span>        Assert.assertEquals(1.2346, Precision.round(x, 4, BigDecimal.ROUND_UP), 0.0);<a name="line.375"></a>
<span class="sourceLineNo">376</span>        Assert.assertEquals(-1.24, Precision.round(-x, 2, BigDecimal.ROUND_UP), 0.0);<a name="line.376"></a>
<span class="sourceLineNo">377</span>        Assert.assertEquals(-1.235, Precision.round(-x, 3, BigDecimal.ROUND_UP), 0.0);<a name="line.377"></a>
<span class="sourceLineNo">378</span>        Assert.assertEquals(-1.2346, Precision.round(-x, 4, BigDecimal.ROUND_UP), 0.0);<a name="line.378"></a>
<span class="sourceLineNo">379</span><a name="line.379"></a>
<span class="sourceLineNo">380</span>        try {<a name="line.380"></a>
<span class="sourceLineNo">381</span>            Precision.round(1.234, 2, 1923);<a name="line.381"></a>
<span class="sourceLineNo">382</span>            Assert.fail();<a name="line.382"></a>
<span class="sourceLineNo">383</span>        } catch (IllegalArgumentException ex) {<a name="line.383"></a>
<span class="sourceLineNo">384</span>            // expected<a name="line.384"></a>
<span class="sourceLineNo">385</span>        }<a name="line.385"></a>
<span class="sourceLineNo">386</span><a name="line.386"></a>
<span class="sourceLineNo">387</span>        // MATH-151<a name="line.387"></a>
<span class="sourceLineNo">388</span>        Assert.assertEquals(39.25, Precision.round(39.245, 2, BigDecimal.ROUND_HALF_UP), 0.0);<a name="line.388"></a>
<span class="sourceLineNo">389</span><a name="line.389"></a>
<span class="sourceLineNo">390</span>        // special values<a name="line.390"></a>
<span class="sourceLineNo">391</span>        TestUtils.assertEquals(Double.NaN, Precision.round(Double.NaN, 2), 0.0);<a name="line.391"></a>
<span class="sourceLineNo">392</span>        Assert.assertEquals(0.0, Precision.round(0.0, 2), 0.0);<a name="line.392"></a>
<span class="sourceLineNo">393</span>        Assert.assertEquals(Double.POSITIVE_INFINITY, Precision.round(Double.POSITIVE_INFINITY, 2), 0.0);<a name="line.393"></a>
<span class="sourceLineNo">394</span>        Assert.assertEquals(Double.NEGATIVE_INFINITY, Precision.round(Double.NEGATIVE_INFINITY, 2), 0.0);<a name="line.394"></a>
<span class="sourceLineNo">395</span>        // comparison of positive and negative zero is not possible -&gt; always equal thus do string comparison<a name="line.395"></a>
<span class="sourceLineNo">396</span>        Assert.assertEquals("-0.0", Double.toString(Precision.round(-0.0, 0)));<a name="line.396"></a>
<span class="sourceLineNo">397</span>        Assert.assertEquals("-0.0", Double.toString(Precision.round(-1e-10, 0)));<a name="line.397"></a>
<span class="sourceLineNo">398</span>    }<a name="line.398"></a>
<span class="sourceLineNo">399</span><a name="line.399"></a>
<span class="sourceLineNo">400</span>    @Test<a name="line.400"></a>
<span class="sourceLineNo">401</span>    public void testRoundFloat() {<a name="line.401"></a>
<span class="sourceLineNo">402</span>        float x = 1.234567890f;<a name="line.402"></a>
<span class="sourceLineNo">403</span>        Assert.assertEquals(1.23f, Precision.round(x, 2), 0.0);<a name="line.403"></a>
<span class="sourceLineNo">404</span>        Assert.assertEquals(1.235f, Precision.round(x, 3), 0.0);<a name="line.404"></a>
<span class="sourceLineNo">405</span>        Assert.assertEquals(1.2346f, Precision.round(x, 4), 0.0);<a name="line.405"></a>
<span class="sourceLineNo">406</span><a name="line.406"></a>
<span class="sourceLineNo">407</span>        // BZ 35904<a name="line.407"></a>
<span class="sourceLineNo">408</span>        Assert.assertEquals(30.1f, Precision.round(30.095f, 2), 0.0f);<a name="line.408"></a>
<span class="sourceLineNo">409</span>        Assert.assertEquals(30.1f, Precision.round(30.095f, 1), 0.0f);<a name="line.409"></a>
<span class="sourceLineNo">410</span>        Assert.assertEquals(50.09f, Precision.round(50.085f, 2), 0.0f);<a name="line.410"></a>
<span class="sourceLineNo">411</span>        Assert.assertEquals(50.19f, Precision.round(50.185f, 2), 0.0f);<a name="line.411"></a>
<span class="sourceLineNo">412</span>        Assert.assertEquals(50.01f, Precision.round(50.005f, 2), 0.0f);<a name="line.412"></a>
<span class="sourceLineNo">413</span>        Assert.assertEquals(30.01f, Precision.round(30.005f, 2), 0.0f);<a name="line.413"></a>
<span class="sourceLineNo">414</span>        Assert.assertEquals(30.65f, Precision.round(30.645f, 2), 0.0f);<a name="line.414"></a>
<span class="sourceLineNo">415</span><a name="line.415"></a>
<span class="sourceLineNo">416</span>        Assert.assertEquals(1.24f, Precision.round(x, 2, BigDecimal.ROUND_CEILING), 0.0);<a name="line.416"></a>
<span class="sourceLineNo">417</span>        Assert.assertEquals(1.235f, Precision.round(x, 3, BigDecimal.ROUND_CEILING), 0.0);<a name="line.417"></a>
<span class="sourceLineNo">418</span>        Assert.assertEquals(1.2346f, Precision.round(x, 4, BigDecimal.ROUND_CEILING), 0.0);<a name="line.418"></a>
<span class="sourceLineNo">419</span>        Assert.assertEquals(-1.23f, Precision.round(-x, 2, BigDecimal.ROUND_CEILING), 0.0);<a name="line.419"></a>
<span class="sourceLineNo">420</span>        Assert.assertEquals(-1.234f, Precision.round(-x, 3, BigDecimal.ROUND_CEILING), 0.0);<a name="line.420"></a>
<span class="sourceLineNo">421</span>        Assert.assertEquals(-1.2345f, Precision.round(-x, 4, BigDecimal.ROUND_CEILING), 0.0);<a name="line.421"></a>
<span class="sourceLineNo">422</span><a name="line.422"></a>
<span class="sourceLineNo">423</span>        Assert.assertEquals(1.23f, Precision.round(x, 2, BigDecimal.ROUND_DOWN), 0.0);<a name="line.423"></a>
<span class="sourceLineNo">424</span>        Assert.assertEquals(1.234f, Precision.round(x, 3, BigDecimal.ROUND_DOWN), 0.0);<a name="line.424"></a>
<span class="sourceLineNo">425</span>        Assert.assertEquals(1.2345f, Precision.round(x, 4, BigDecimal.ROUND_DOWN), 0.0);<a name="line.425"></a>
<span class="sourceLineNo">426</span>        Assert.assertEquals(-1.23f, Precision.round(-x, 2, BigDecimal.ROUND_DOWN), 0.0);<a name="line.426"></a>
<span class="sourceLineNo">427</span>        Assert.assertEquals(-1.234f, Precision.round(-x, 3, BigDecimal.ROUND_DOWN), 0.0);<a name="line.427"></a>
<span class="sourceLineNo">428</span>        Assert.assertEquals(-1.2345f, Precision.round(-x, 4, BigDecimal.ROUND_DOWN), 0.0);<a name="line.428"></a>
<span class="sourceLineNo">429</span><a name="line.429"></a>
<span class="sourceLineNo">430</span>        Assert.assertEquals(1.23f, Precision.round(x, 2, BigDecimal.ROUND_FLOOR), 0.0);<a name="line.430"></a>
<span class="sourceLineNo">431</span>        Assert.assertEquals(1.234f, Precision.round(x, 3, BigDecimal.ROUND_FLOOR), 0.0);<a name="line.431"></a>
<span class="sourceLineNo">432</span>        Assert.assertEquals(1.2345f, Precision.round(x, 4, BigDecimal.ROUND_FLOOR), 0.0);<a name="line.432"></a>
<span class="sourceLineNo">433</span>        Assert.assertEquals(-1.24f, Precision.round(-x, 2, BigDecimal.ROUND_FLOOR), 0.0);<a name="line.433"></a>
<span class="sourceLineNo">434</span>        Assert.assertEquals(-1.235f, Precision.round(-x, 3, BigDecimal.ROUND_FLOOR), 0.0);<a name="line.434"></a>
<span class="sourceLineNo">435</span>        Assert.assertEquals(-1.2346f, Precision.round(-x, 4, BigDecimal.ROUND_FLOOR), 0.0);<a name="line.435"></a>
<span class="sourceLineNo">436</span><a name="line.436"></a>
<span class="sourceLineNo">437</span>        Assert.assertEquals(1.23f, Precision.round(x, 2, BigDecimal.ROUND_HALF_DOWN), 0.0);<a name="line.437"></a>
<span class="sourceLineNo">438</span>        Assert.assertEquals(1.235f, Precision.round(x, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);<a name="line.438"></a>
<span class="sourceLineNo">439</span>        Assert.assertEquals(1.2346f, Precision.round(x, 4, BigDecimal.ROUND_HALF_DOWN), 0.0);<a name="line.439"></a>
<span class="sourceLineNo">440</span>        Assert.assertEquals(-1.23f, Precision.round(-x, 2, BigDecimal.ROUND_HALF_DOWN), 0.0);<a name="line.440"></a>
<span class="sourceLineNo">441</span>        Assert.assertEquals(-1.235f, Precision.round(-x, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);<a name="line.441"></a>
<span class="sourceLineNo">442</span>        Assert.assertEquals(-1.2346f, Precision.round(-x, 4, BigDecimal.ROUND_HALF_DOWN), 0.0);<a name="line.442"></a>
<span class="sourceLineNo">443</span>        Assert.assertEquals(1.234f, Precision.round(1.2345f, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);<a name="line.443"></a>
<span class="sourceLineNo">444</span>        Assert.assertEquals(-1.234f, Precision.round(-1.2345f, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);<a name="line.444"></a>
<span class="sourceLineNo">445</span><a name="line.445"></a>
<span class="sourceLineNo">446</span>        Assert.assertEquals(1.23f, Precision.round(x, 2, BigDecimal.ROUND_HALF_EVEN), 0.0);<a name="line.446"></a>
<span class="sourceLineNo">447</span>        Assert.assertEquals(1.235f, Precision.round(x, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);<a name="line.447"></a>
<span class="sourceLineNo">448</span>        Assert.assertEquals(1.2346f, Precision.round(x, 4, BigDecimal.ROUND_HALF_EVEN), 0.0);<a name="line.448"></a>
<span class="sourceLineNo">449</span>        Assert.assertEquals(-1.23f, Precision.round(-x, 2, BigDecimal.ROUND_HALF_EVEN), 0.0);<a name="line.449"></a>
<span class="sourceLineNo">450</span>        Assert.assertEquals(-1.235f, Precision.round(-x, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);<a name="line.450"></a>
<span class="sourceLineNo">451</span>        Assert.assertEquals(-1.2346f, Precision.round(-x, 4, BigDecimal.ROUND_HALF_EVEN), 0.0);<a name="line.451"></a>
<span class="sourceLineNo">452</span>        Assert.assertEquals(1.234f, Precision.round(1.2345f, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);<a name="line.452"></a>
<span class="sourceLineNo">453</span>        Assert.assertEquals(-1.234f, Precision.round(-1.2345f, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);<a name="line.453"></a>
<span class="sourceLineNo">454</span>        Assert.assertEquals(1.236f, Precision.round(1.2355f, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);<a name="line.454"></a>
<span class="sourceLineNo">455</span>        Assert.assertEquals(-1.236f, Precision.round(-1.2355f, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);<a name="line.455"></a>
<span class="sourceLineNo">456</span><a name="line.456"></a>
<span class="sourceLineNo">457</span>        Assert.assertEquals(1.23f, Precision.round(x, 2, BigDecimal.ROUND_HALF_UP), 0.0);<a name="line.457"></a>
<span class="sourceLineNo">458</span>        Assert.assertEquals(1.235f, Precision.round(x, 3, BigDecimal.ROUND_HALF_UP), 0.0);<a name="line.458"></a>
<span class="sourceLineNo">459</span>        Assert.assertEquals(1.2346f, Precision.round(x, 4, BigDecimal.ROUND_HALF_UP), 0.0);<a name="line.459"></a>
<span class="sourceLineNo">460</span>        Assert.assertEquals(-1.23f, Precision.round(-x, 2, BigDecimal.ROUND_HALF_UP), 0.0);<a name="line.460"></a>
<span class="sourceLineNo">461</span>        Assert.assertEquals(-1.235f, Precision.round(-x, 3, BigDecimal.ROUND_HALF_UP), 0.0);<a name="line.461"></a>
<span class="sourceLineNo">462</span>        Assert.assertEquals(-1.2346f, Precision.round(-x, 4, BigDecimal.ROUND_HALF_UP), 0.0);<a name="line.462"></a>
<span class="sourceLineNo">463</span>        Assert.assertEquals(1.235f, Precision.round(1.2345f, 3, BigDecimal.ROUND_HALF_UP), 0.0);<a name="line.463"></a>
<span class="sourceLineNo">464</span>        Assert.assertEquals(-1.235f, Precision.round(-1.2345f, 3, BigDecimal.ROUND_HALF_UP), 0.0);<a name="line.464"></a>
<span class="sourceLineNo">465</span><a name="line.465"></a>
<span class="sourceLineNo">466</span>        Assert.assertEquals(-1.23f, Precision.round(-1.23f, 2, BigDecimal.ROUND_UNNECESSARY), 0.0);<a name="line.466"></a>
<span class="sourceLineNo">467</span>        Assert.assertEquals(1.23f, Precision.round(1.23f, 2, BigDecimal.ROUND_UNNECESSARY), 0.0);<a name="line.467"></a>
<span class="sourceLineNo">468</span><a name="line.468"></a>
<span class="sourceLineNo">469</span>        try {<a name="line.469"></a>
<span class="sourceLineNo">470</span>            Precision.round(1.234f, 2, BigDecimal.ROUND_UNNECESSARY);<a name="line.470"></a>
<span class="sourceLineNo">471</span>            Assert.fail();<a name="line.471"></a>
<span class="sourceLineNo">472</span>        } catch (MathArithmeticException ex) {<a name="line.472"></a>
<span class="sourceLineNo">473</span>            // success<a name="line.473"></a>
<span class="sourceLineNo">474</span>        }<a name="line.474"></a>
<span class="sourceLineNo">475</span><a name="line.475"></a>
<span class="sourceLineNo">476</span>        Assert.assertEquals(1.24f, Precision.round(x, 2, BigDecimal.ROUND_UP), 0.0);<a name="line.476"></a>
<span class="sourceLineNo">477</span>        Assert.assertEquals(1.235f, Precision.round(x, 3, BigDecimal.ROUND_UP), 0.0);<a name="line.477"></a>
<span class="sourceLineNo">478</span>        Assert.assertEquals(1.2346f, Precision.round(x, 4, BigDecimal.ROUND_UP), 0.0);<a name="line.478"></a>
<span class="sourceLineNo">479</span>        Assert.assertEquals(-1.24f, Precision.round(-x, 2, BigDecimal.ROUND_UP), 0.0);<a name="line.479"></a>
<span class="sourceLineNo">480</span>        Assert.assertEquals(-1.235f, Precision.round(-x, 3, BigDecimal.ROUND_UP), 0.0);<a name="line.480"></a>
<span class="sourceLineNo">481</span>        Assert.assertEquals(-1.2346f, Precision.round(-x, 4, BigDecimal.ROUND_UP), 0.0);<a name="line.481"></a>
<span class="sourceLineNo">482</span><a name="line.482"></a>
<span class="sourceLineNo">483</span>        try {<a name="line.483"></a>
<span class="sourceLineNo">484</span>            Precision.round(1.234f, 2, 1923);<a name="line.484"></a>
<span class="sourceLineNo">485</span>            Assert.fail();<a name="line.485"></a>
<span class="sourceLineNo">486</span>        } catch (MathIllegalArgumentException ex) {<a name="line.486"></a>
<span class="sourceLineNo">487</span>            // success<a name="line.487"></a>
<span class="sourceLineNo">488</span>        }<a name="line.488"></a>
<span class="sourceLineNo">489</span><a name="line.489"></a>
<span class="sourceLineNo">490</span>        // special values<a name="line.490"></a>
<span class="sourceLineNo">491</span>        TestUtils.assertEquals(Float.NaN, Precision.round(Float.NaN, 2), 0.0f);<a name="line.491"></a>
<span class="sourceLineNo">492</span>        Assert.assertEquals(0.0f, Precision.round(0.0f, 2), 0.0f);<a name="line.492"></a>
<span class="sourceLineNo">493</span>        Assert.assertEquals(Float.POSITIVE_INFINITY, Precision.round(Float.POSITIVE_INFINITY, 2), 0.0f);<a name="line.493"></a>
<span class="sourceLineNo">494</span>        Assert.assertEquals(Float.NEGATIVE_INFINITY, Precision.round(Float.NEGATIVE_INFINITY, 2), 0.0f);<a name="line.494"></a>
<span class="sourceLineNo">495</span>        // comparison of positive and negative zero is not possible -&gt; always equal thus do string comparison<a name="line.495"></a>
<span class="sourceLineNo">496</span>        Assert.assertEquals("-0.0", Float.toString(Precision.round(-0.0f, 0)));<a name="line.496"></a>
<span class="sourceLineNo">497</span>        Assert.assertEquals("-0.0", Float.toString(Precision.round(-1e-10f, 0)));<a name="line.497"></a>
<span class="sourceLineNo">498</span><a name="line.498"></a>
<span class="sourceLineNo">499</span>        // MATH-1070<a name="line.499"></a>
<span class="sourceLineNo">500</span>        Assert.assertEquals(0.0f, Precision.round(0f, 2, BigDecimal.ROUND_UP), 0.0f);<a name="line.500"></a>
<span class="sourceLineNo">501</span>        Assert.assertEquals(0.05f, Precision.round(0.05f, 2, BigDecimal.ROUND_UP), 0.0f);<a name="line.501"></a>
<span class="sourceLineNo">502</span>        Assert.assertEquals(0.06f, Precision.round(0.051f, 2, BigDecimal.ROUND_UP), 0.0f);<a name="line.502"></a>
<span class="sourceLineNo">503</span>        Assert.assertEquals(0.06f, Precision.round(0.0505f, 2, BigDecimal.ROUND_UP), 0.0f);<a name="line.503"></a>
<span class="sourceLineNo">504</span>        Assert.assertEquals(0.06f, Precision.round(0.059f, 2, BigDecimal.ROUND_UP), 0.0f);<a name="line.504"></a>
<span class="sourceLineNo">505</span>    }<a name="line.505"></a>
<span class="sourceLineNo">506</span><a name="line.506"></a>
<span class="sourceLineNo">507</span><a name="line.507"></a>
<span class="sourceLineNo">508</span>    @Test<a name="line.508"></a>
<span class="sourceLineNo">509</span>    public void testIssue721() {<a name="line.509"></a>
<span class="sourceLineNo">510</span>        Assert.assertEquals(-53,   FastMath.getExponent(Precision.EPSILON));<a name="line.510"></a>
<span class="sourceLineNo">511</span>        Assert.assertEquals(-1022, FastMath.getExponent(Precision.SAFE_MIN));<a name="line.511"></a>
<span class="sourceLineNo">512</span>    }<a name="line.512"></a>
<span class="sourceLineNo">513</span><a name="line.513"></a>
<span class="sourceLineNo">514</span><a name="line.514"></a>
<span class="sourceLineNo">515</span>    @Test<a name="line.515"></a>
<span class="sourceLineNo">516</span>    public void testRepresentableDelta() {<a name="line.516"></a>
<span class="sourceLineNo">517</span>        int nonRepresentableCount = 0;<a name="line.517"></a>
<span class="sourceLineNo">518</span>        final double x = 100;<a name="line.518"></a>
<span class="sourceLineNo">519</span>        final int numTrials = 10000;<a name="line.519"></a>
<span class="sourceLineNo">520</span>        for (int i = 0; i &lt; numTrials; i++) {<a name="line.520"></a>
<span class="sourceLineNo">521</span>            final double originalDelta = FastMath.random();<a name="line.521"></a>
<span class="sourceLineNo">522</span>            final double delta = Precision.representableDelta(x, originalDelta);<a name="line.522"></a>
<span class="sourceLineNo">523</span>            if (delta != originalDelta) {<a name="line.523"></a>
<span class="sourceLineNo">524</span>                ++nonRepresentableCount;<a name="line.524"></a>
<span class="sourceLineNo">525</span>            }<a name="line.525"></a>
<span class="sourceLineNo">526</span>        }<a name="line.526"></a>
<span class="sourceLineNo">527</span><a name="line.527"></a>
<span class="sourceLineNo">528</span>        Assert.assertTrue(nonRepresentableCount / (double) numTrials &gt; 0.9);<a name="line.528"></a>
<span class="sourceLineNo">529</span>    }<a name="line.529"></a>
<span class="sourceLineNo">530</span><a name="line.530"></a>
<span class="sourceLineNo">531</span>    @Test<a name="line.531"></a>
<span class="sourceLineNo">532</span>    public void testMath843() {<a name="line.532"></a>
<span class="sourceLineNo">533</span>        final double afterEpsilon = FastMath.nextAfter(Precision.EPSILON,<a name="line.533"></a>
<span class="sourceLineNo">534</span>                                                       Double.POSITIVE_INFINITY);<a name="line.534"></a>
<span class="sourceLineNo">535</span><a name="line.535"></a>
<span class="sourceLineNo">536</span>        // a) 1 + EPSILON is equal to 1.<a name="line.536"></a>
<span class="sourceLineNo">537</span>        Assert.assertTrue(1 + Precision.EPSILON == 1);<a name="line.537"></a>
<span class="sourceLineNo">538</span><a name="line.538"></a>
<span class="sourceLineNo">539</span>        // b) 1 + "the number after EPSILON" is not equal to 1.<a name="line.539"></a>
<span class="sourceLineNo">540</span>        Assert.assertFalse(1 + afterEpsilon == 1);<a name="line.540"></a>
<span class="sourceLineNo">541</span>    }<a name="line.541"></a>
<span class="sourceLineNo">542</span><a name="line.542"></a>
<span class="sourceLineNo">543</span>    @Test<a name="line.543"></a>
<span class="sourceLineNo">544</span>    public void testMath1127() {<a name="line.544"></a>
<span class="sourceLineNo">545</span>        Assert.assertFalse(Precision.equals(2.0, -2.0, 1));<a name="line.545"></a>
<span class="sourceLineNo">546</span>        Assert.assertTrue(Precision.equals(0.0, -0.0, 0));<a name="line.546"></a>
<span class="sourceLineNo">547</span>        Assert.assertFalse(Precision.equals(2.0f, -2.0f, 1));<a name="line.547"></a>
<span class="sourceLineNo">548</span>        Assert.assertTrue(Precision.equals(0.0f, -0.0f, 0));<a name="line.548"></a>
<span class="sourceLineNo">549</span>    }<a name="line.549"></a>
<span class="sourceLineNo">550</span><a name="line.550"></a>
<span class="sourceLineNo">551</span>}<a name="line.551"></a>




























































</pre>
</div>
</body>
</html>
