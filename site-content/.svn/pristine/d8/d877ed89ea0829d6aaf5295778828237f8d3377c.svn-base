<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>SimplexSolverTest xref</title>
<link type="text/css" rel="stylesheet" href="../../../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../testapidocs/org/apache/commons/math3/optim/linear/SimplexSolverTest.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Licensed to the Apache Software Foundation (ASF) under one or more</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> * contributor license agreements.  See the NOTICE file distributed with</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * this work for additional information regarding copyright ownership.</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * The ASF licenses this file to You under the Apache License, Version 2.0</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * (the "License"); you may not use this file except in compliance with</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> * the License.  You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *      <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">package</strong> org.apache.commons.math3.optim.linear;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <strong class="jxr_keyword">import</strong> java.util.ArrayList;
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> java.util.Collection;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> java.util.List;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.TooManyIterationsException;
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.optim.MaxIter;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.optim.nonlinear.scalar.GoalType;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.optim.PointValuePair;
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.util.Precision;
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <strong class="jxr_keyword">import</strong> org.junit.Test;
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <strong class="jxr_keyword">import</strong> org.junit.Assert;
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../../org/apache/commons/math3/optim/linear/SimplexSolverTest.html">SimplexSolverTest</a> {
<a class="jxr_linenumber" name="L32" href="#L32">32</a>      <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> MaxIter DEFAULT_MAX_ITER = <strong class="jxr_keyword">new</strong> MaxIter(100);
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  
<a class="jxr_linenumber" name="L34" href="#L34">34</a>      @Test
<a class="jxr_linenumber" name="L35" href="#L35">35</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testMath842Cycle() {
<a class="jxr_linenumber" name="L36" href="#L36">36</a>          <em class="jxr_comment">// from http://www.math.toronto.edu/mpugh/Teaching/APM236_04/bland</em>
<a class="jxr_linenumber" name="L37" href="#L37">37</a>          <em class="jxr_comment">//      maximize 10 x1 - 57 x2 - 9 x3 - 24 x4</em>
<a class="jxr_linenumber" name="L38" href="#L38">38</a>          <em class="jxr_comment">//      subject to</em>
<a class="jxr_linenumber" name="L39" href="#L39">39</a>          <em class="jxr_comment">//          1/2 x1 - 11/2 x2 - 5/2 x3 + 9 x4  &lt;= 0</em>
<a class="jxr_linenumber" name="L40" href="#L40">40</a>          <em class="jxr_comment">//          1/2 x1 -  3/2 x2 - 1/2 x3 +   x4  &lt;= 0</em>
<a class="jxr_linenumber" name="L41" href="#L41">41</a>          <em class="jxr_comment">//              x1                  &lt;= 1</em>
<a class="jxr_linenumber" name="L42" href="#L42">42</a>          <em class="jxr_comment">//      x1,x2,x3,x4 &gt;= 0</em>
<a class="jxr_linenumber" name="L43" href="#L43">43</a>  
<a class="jxr_linenumber" name="L44" href="#L44">44</a>          LinearObjectiveFunction f = <strong class="jxr_keyword">new</strong> LinearObjectiveFunction(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 10, -57, -9, -24}, 0);
<a class="jxr_linenumber" name="L45" href="#L45">45</a>  
<a class="jxr_linenumber" name="L46" href="#L46">46</a>          ArrayList&lt;LinearConstraint&gt; constraints = <strong class="jxr_keyword">new</strong> ArrayList&lt;LinearConstraint&gt;();
<a class="jxr_linenumber" name="L47" href="#L47">47</a>  
<a class="jxr_linenumber" name="L48" href="#L48">48</a>          constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0.5, -5.5, -2.5, 9}, Relationship.LEQ, 0));
<a class="jxr_linenumber" name="L49" href="#L49">49</a>          constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0.5, -1.5, -0.5, 1}, Relationship.LEQ, 0));
<a class="jxr_linenumber" name="L50" href="#L50">50</a>          constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {  1,    0,    0, 0}, Relationship.LEQ, 1));
<a class="jxr_linenumber" name="L51" href="#L51">51</a>  
<a class="jxr_linenumber" name="L52" href="#L52">52</a>          <strong class="jxr_keyword">double</strong> epsilon = 1e-6;
<a class="jxr_linenumber" name="L53" href="#L53">53</a>          SimplexSolver solver = <strong class="jxr_keyword">new</strong> SimplexSolver();
<a class="jxr_linenumber" name="L54" href="#L54">54</a>          PointValuePair solution = solver.optimize(f, <strong class="jxr_keyword">new</strong> LinearConstraintSet(constraints),
<a class="jxr_linenumber" name="L55" href="#L55">55</a>                                                    GoalType.MAXIMIZE,
<a class="jxr_linenumber" name="L56" href="#L56">56</a>                                                    <strong class="jxr_keyword">new</strong> NonNegativeConstraint(<strong class="jxr_keyword">true</strong>),
<a class="jxr_linenumber" name="L57" href="#L57">57</a>                                                    PivotSelectionRule.BLAND);
<a class="jxr_linenumber" name="L58" href="#L58">58</a>          Assert.assertEquals(1.0d, solution.getValue(), epsilon);
<a class="jxr_linenumber" name="L59" href="#L59">59</a>          Assert.assertTrue(validSolution(solution, constraints, epsilon));
<a class="jxr_linenumber" name="L60" href="#L60">60</a>      }
<a class="jxr_linenumber" name="L61" href="#L61">61</a>  
<a class="jxr_linenumber" name="L62" href="#L62">62</a>      @Test
<a class="jxr_linenumber" name="L63" href="#L63">63</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testMath828() {
<a class="jxr_linenumber" name="L64" href="#L64">64</a>          LinearObjectiveFunction f = <strong class="jxr_keyword">new</strong> LinearObjectiveFunction(
<a class="jxr_linenumber" name="L65" href="#L65">65</a>                  <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, 0.0);
<a class="jxr_linenumber" name="L66" href="#L66">66</a>  
<a class="jxr_linenumber" name="L67" href="#L67">67</a>          ArrayList &lt;LinearConstraint&gt;constraints = <strong class="jxr_keyword">new</strong> ArrayList&lt;LinearConstraint&gt;();
<a class="jxr_linenumber" name="L68" href="#L68">68</a>  
<a class="jxr_linenumber" name="L69" href="#L69">69</a>          constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0.0, 39.0, 23.0, 96.0, 15.0, 48.0, 9.0, 21.0, 48.0, 36.0, 76.0, 19.0, 88.0, 17.0, 16.0, 36.0,}, Relationship.GEQ, 15.0));
<a class="jxr_linenumber" name="L70" href="#L70">70</a>          constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0.0, 59.0, 93.0, 12.0, 29.0, 78.0, 73.0, 87.0, 32.0, 70.0, 68.0, 24.0, 11.0, 26.0, 65.0, 25.0,}, Relationship.GEQ, 29.0));
<a class="jxr_linenumber" name="L71" href="#L71">71</a>          constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0.0, 74.0, 5.0, 82.0, 6.0, 97.0, 55.0, 44.0, 52.0, 54.0, 5.0, 93.0, 91.0, 8.0, 20.0, 97.0,}, Relationship.GEQ, 6.0));
<a class="jxr_linenumber" name="L72" href="#L72">72</a>          constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {8.0, -3.0, -28.0, -72.0, -8.0, -31.0, -31.0, -74.0, -47.0, -59.0, -24.0, -57.0, -56.0, -16.0, -92.0, -59.0,}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L73" href="#L73">73</a>          constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {25.0, -7.0, -99.0, -78.0, -25.0, -14.0, -16.0, -89.0, -39.0, -56.0, -53.0, -9.0, -18.0, -26.0, -11.0, -61.0,}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L74" href="#L74">74</a>          constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {33.0, -95.0, -15.0, -4.0, -33.0, -3.0, -20.0, -96.0, -27.0, -13.0, -80.0, -24.0, -3.0, -13.0, -57.0, -76.0,}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L75" href="#L75">75</a>          constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {7.0, -95.0, -39.0, -93.0, -7.0, -94.0, -94.0, -62.0, -76.0, -26.0, -53.0, -57.0, -31.0, -76.0, -53.0, -52.0,}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L76" href="#L76">76</a>  
<a class="jxr_linenumber" name="L77" href="#L77">77</a>          <strong class="jxr_keyword">double</strong> epsilon = 1e-6;
<a class="jxr_linenumber" name="L78" href="#L78">78</a>          PointValuePair solution = <strong class="jxr_keyword">new</strong> SimplexSolver().optimize(DEFAULT_MAX_ITER, f, <strong class="jxr_keyword">new</strong> LinearConstraintSet(constraints),
<a class="jxr_linenumber" name="L79" href="#L79">79</a>                                                                 GoalType.MINIMIZE, <strong class="jxr_keyword">new</strong> NonNegativeConstraint(<strong class="jxr_keyword">true</strong>));
<a class="jxr_linenumber" name="L80" href="#L80">80</a>          Assert.assertEquals(1.0d, solution.getValue(), epsilon);
<a class="jxr_linenumber" name="L81" href="#L81">81</a>          Assert.assertTrue(validSolution(solution, constraints, epsilon));
<a class="jxr_linenumber" name="L82" href="#L82">82</a>      }
<a class="jxr_linenumber" name="L83" href="#L83">83</a>  
<a class="jxr_linenumber" name="L84" href="#L84">84</a>      @Test
<a class="jxr_linenumber" name="L85" href="#L85">85</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testMath828Cycle() {
<a class="jxr_linenumber" name="L86" href="#L86">86</a>          LinearObjectiveFunction f = <strong class="jxr_keyword">new</strong> LinearObjectiveFunction(
<a class="jxr_linenumber" name="L87" href="#L87">87</a>                  <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, 0.0);
<a class="jxr_linenumber" name="L88" href="#L88">88</a>  
<a class="jxr_linenumber" name="L89" href="#L89">89</a>          ArrayList &lt;LinearConstraint&gt;constraints = <strong class="jxr_keyword">new</strong> ArrayList&lt;LinearConstraint&gt;();
<a class="jxr_linenumber" name="L90" href="#L90">90</a>  
<a class="jxr_linenumber" name="L91" href="#L91">91</a>          constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0.0, 16.0, 14.0, 69.0, 1.0, 85.0, 52.0, 43.0, 64.0, 97.0, 14.0, 74.0, 89.0, 28.0, 94.0, 58.0, 13.0, 22.0, 21.0, 17.0, 30.0, 25.0, 1.0, 59.0, 91.0, 78.0, 12.0, 74.0, 56.0, 3.0, 88.0,}, Relationship.GEQ, 91.0));
<a class="jxr_linenumber" name="L92" href="#L92">92</a>          constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0.0, 60.0, 40.0, 81.0, 71.0, 72.0, 46.0, 45.0, 38.0, 48.0, 40.0, 17.0, 33.0, 85.0, 64.0, 32.0, 84.0, 3.0, 54.0, 44.0, 71.0, 67.0, 90.0, 95.0, 54.0, 99.0, 99.0, 29.0, 52.0, 98.0, 9.0,}, Relationship.GEQ, 54.0));
<a class="jxr_linenumber" name="L93" href="#L93">93</a>          constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0.0, 41.0, 12.0, 86.0, 90.0, 61.0, 31.0, 41.0, 23.0, 89.0, 17.0, 74.0, 44.0, 27.0, 16.0, 47.0, 80.0, 32.0, 11.0, 56.0, 68.0, 82.0, 11.0, 62.0, 62.0, 53.0, 39.0, 16.0, 48.0, 1.0, 63.0,}, Relationship.GEQ, 62.0));
<a class="jxr_linenumber" name="L94" href="#L94">94</a>          constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {83.0, -76.0, -94.0, -19.0, -15.0, -70.0, -72.0, -57.0, -63.0, -65.0, -22.0, -94.0, -22.0, -88.0, -86.0, -89.0, -72.0, -16.0, -80.0, -49.0, -70.0, -93.0, -95.0, -17.0, -83.0, -97.0, -31.0, -47.0, -31.0, -13.0, -23.0,}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L95" href="#L95">95</a>          constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {41.0, -96.0, -41.0, -48.0, -70.0, -43.0, -43.0, -43.0, -97.0, -37.0, -85.0, -70.0, -45.0, -67.0, -87.0, -69.0, -94.0, -54.0, -54.0, -92.0, -79.0, -10.0, -35.0, -20.0, -41.0, -41.0, -65.0, -25.0, -12.0, -8.0, -46.0,}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L96" href="#L96">96</a>          constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {27.0, -42.0, -65.0, -49.0, -53.0, -42.0, -17.0, -2.0, -61.0, -31.0, -76.0, -47.0, -8.0, -93.0, -86.0, -62.0, -65.0, -63.0, -22.0, -43.0, -27.0, -23.0, -32.0, -74.0, -27.0, -63.0, -47.0, -78.0, -29.0, -95.0, -73.0,}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L97" href="#L97">97</a>          constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {15.0, -46.0, -41.0, -83.0, -98.0, -99.0, -21.0, -35.0, -7.0, -14.0, -80.0, -63.0, -18.0, -42.0, -5.0, -34.0, -56.0, -70.0, -16.0, -18.0, -74.0, -61.0, -47.0, -41.0, -15.0, -79.0, -18.0, -47.0, -88.0, -68.0, -55.0,}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L98" href="#L98">98</a>  
<a class="jxr_linenumber" name="L99" href="#L99">99</a>          <strong class="jxr_keyword">double</strong> epsilon = 1e-6;
<a class="jxr_linenumber" name="L100" href="#L100">100</a>         PointValuePair solution = <strong class="jxr_keyword">new</strong> SimplexSolver().optimize(DEFAULT_MAX_ITER, f,
<a class="jxr_linenumber" name="L101" href="#L101">101</a>                                                                <strong class="jxr_keyword">new</strong> LinearConstraintSet(constraints),
<a class="jxr_linenumber" name="L102" href="#L102">102</a>                                                                GoalType.MINIMIZE, <strong class="jxr_keyword">new</strong> NonNegativeConstraint(<strong class="jxr_keyword">true</strong>),
<a class="jxr_linenumber" name="L103" href="#L103">103</a>                                                                PivotSelectionRule.BLAND);
<a class="jxr_linenumber" name="L104" href="#L104">104</a>         Assert.assertEquals(1.0d, solution.getValue(), epsilon);
<a class="jxr_linenumber" name="L105" href="#L105">105</a>         Assert.assertTrue(validSolution(solution, constraints, epsilon));
<a class="jxr_linenumber" name="L106" href="#L106">106</a>     }
<a class="jxr_linenumber" name="L107" href="#L107">107</a> 
<a class="jxr_linenumber" name="L108" href="#L108">108</a>     @Test
<a class="jxr_linenumber" name="L109" href="#L109">109</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testMath781() {
<a class="jxr_linenumber" name="L110" href="#L110">110</a>         LinearObjectiveFunction f = <strong class="jxr_keyword">new</strong> LinearObjectiveFunction(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 2, 6, 7 }, 0);
<a class="jxr_linenumber" name="L111" href="#L111">111</a> 
<a class="jxr_linenumber" name="L112" href="#L112">112</a>         ArrayList&lt;LinearConstraint&gt; constraints = <strong class="jxr_keyword">new</strong> ArrayList&lt;LinearConstraint&gt;();
<a class="jxr_linenumber" name="L113" href="#L113">113</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 1, 2, 1 }, Relationship.LEQ, 2));
<a class="jxr_linenumber" name="L114" href="#L114">114</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { -1, 1, 1 }, Relationship.LEQ, -1));
<a class="jxr_linenumber" name="L115" href="#L115">115</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 2, -3, 1 }, Relationship.LEQ, -1));
<a class="jxr_linenumber" name="L116" href="#L116">116</a> 
<a class="jxr_linenumber" name="L117" href="#L117">117</a>         <strong class="jxr_keyword">double</strong> epsilon = 1e-6;
<a class="jxr_linenumber" name="L118" href="#L118">118</a>         SimplexSolver solver = <strong class="jxr_keyword">new</strong> SimplexSolver();
<a class="jxr_linenumber" name="L119" href="#L119">119</a>         PointValuePair solution = solver.optimize(DEFAULT_MAX_ITER, f, <strong class="jxr_keyword">new</strong> LinearConstraintSet(constraints),
<a class="jxr_linenumber" name="L120" href="#L120">120</a>                                                   GoalType.MAXIMIZE, <strong class="jxr_keyword">new</strong> NonNegativeConstraint(false));
<a class="jxr_linenumber" name="L121" href="#L121">121</a> 
<a class="jxr_linenumber" name="L122" href="#L122">122</a>         Assert.assertTrue(Precision.compareTo(solution.getPoint()[0], 0.0d, epsilon) &gt; 0);
<a class="jxr_linenumber" name="L123" href="#L123">123</a>         Assert.assertTrue(Precision.compareTo(solution.getPoint()[1], 0.0d, epsilon) &gt; 0);
<a class="jxr_linenumber" name="L124" href="#L124">124</a>         Assert.assertTrue(Precision.compareTo(solution.getPoint()[2], 0.0d, epsilon) &lt; 0);
<a class="jxr_linenumber" name="L125" href="#L125">125</a>         Assert.assertEquals(2.0d, solution.getValue(), epsilon);
<a class="jxr_linenumber" name="L126" href="#L126">126</a>     }
<a class="jxr_linenumber" name="L127" href="#L127">127</a> 
<a class="jxr_linenumber" name="L128" href="#L128">128</a>     @Test
<a class="jxr_linenumber" name="L129" href="#L129">129</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testMath713NegativeVariable() {
<a class="jxr_linenumber" name="L130" href="#L130">130</a>         LinearObjectiveFunction f = <strong class="jxr_keyword">new</strong> LinearObjectiveFunction(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {1.0, 1.0}, 0.0d);
<a class="jxr_linenumber" name="L131" href="#L131">131</a>         ArrayList&lt;LinearConstraint&gt; constraints = <strong class="jxr_keyword">new</strong> ArrayList&lt;LinearConstraint&gt;();
<a class="jxr_linenumber" name="L132" href="#L132">132</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {1, 0}, Relationship.EQ, 1));
<a class="jxr_linenumber" name="L133" href="#L133">133</a> 
<a class="jxr_linenumber" name="L134" href="#L134">134</a>         <strong class="jxr_keyword">double</strong> epsilon = 1e-6;
<a class="jxr_linenumber" name="L135" href="#L135">135</a>         SimplexSolver solver = <strong class="jxr_keyword">new</strong> SimplexSolver();
<a class="jxr_linenumber" name="L136" href="#L136">136</a>         PointValuePair solution = solver.optimize(DEFAULT_MAX_ITER, f, <strong class="jxr_keyword">new</strong> LinearConstraintSet(constraints),
<a class="jxr_linenumber" name="L137" href="#L137">137</a>                                                   GoalType.MINIMIZE, <strong class="jxr_keyword">new</strong> NonNegativeConstraint(<strong class="jxr_keyword">true</strong>));
<a class="jxr_linenumber" name="L138" href="#L138">138</a> 
<a class="jxr_linenumber" name="L139" href="#L139">139</a>         Assert.assertTrue(Precision.compareTo(solution.getPoint()[0], 0.0d, epsilon) &gt;= 0);
<a class="jxr_linenumber" name="L140" href="#L140">140</a>         Assert.assertTrue(Precision.compareTo(solution.getPoint()[1], 0.0d, epsilon) &gt;= 0);
<a class="jxr_linenumber" name="L141" href="#L141">141</a>     }
<a class="jxr_linenumber" name="L142" href="#L142">142</a> 
<a class="jxr_linenumber" name="L143" href="#L143">143</a>     @Test
<a class="jxr_linenumber" name="L144" href="#L144">144</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testMath434NegativeVariable() {
<a class="jxr_linenumber" name="L145" href="#L145">145</a>         LinearObjectiveFunction f = <strong class="jxr_keyword">new</strong> LinearObjectiveFunction(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0.0, 0.0, 1.0}, 0.0d);
<a class="jxr_linenumber" name="L146" href="#L146">146</a>         ArrayList&lt;LinearConstraint&gt; constraints = <strong class="jxr_keyword">new</strong> ArrayList&lt;LinearConstraint&gt;();
<a class="jxr_linenumber" name="L147" href="#L147">147</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {1, 1, 0}, Relationship.EQ, 5));
<a class="jxr_linenumber" name="L148" href="#L148">148</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 1}, Relationship.GEQ, -10));
<a class="jxr_linenumber" name="L149" href="#L149">149</a> 
<a class="jxr_linenumber" name="L150" href="#L150">150</a>         <strong class="jxr_keyword">double</strong> epsilon = 1e-6;
<a class="jxr_linenumber" name="L151" href="#L151">151</a>         SimplexSolver solver = <strong class="jxr_keyword">new</strong> SimplexSolver();
<a class="jxr_linenumber" name="L152" href="#L152">152</a>         PointValuePair solution = solver.optimize(DEFAULT_MAX_ITER, f, <strong class="jxr_keyword">new</strong> LinearConstraintSet(constraints),
<a class="jxr_linenumber" name="L153" href="#L153">153</a>                                                   GoalType.MINIMIZE, <strong class="jxr_keyword">new</strong> NonNegativeConstraint(false));
<a class="jxr_linenumber" name="L154" href="#L154">154</a> 
<a class="jxr_linenumber" name="L155" href="#L155">155</a>         Assert.assertEquals(5.0, solution.getPoint()[0] + solution.getPoint()[1], epsilon);
<a class="jxr_linenumber" name="L156" href="#L156">156</a>         Assert.assertEquals(-10.0, solution.getPoint()[2], epsilon);
<a class="jxr_linenumber" name="L157" href="#L157">157</a>         Assert.assertEquals(-10.0, solution.getValue(), epsilon);
<a class="jxr_linenumber" name="L158" href="#L158">158</a> 
<a class="jxr_linenumber" name="L159" href="#L159">159</a>     }
<a class="jxr_linenumber" name="L160" href="#L160">160</a> 
<a class="jxr_linenumber" name="L161" href="#L161">161</a>     @Test(expected = NoFeasibleSolutionException.<strong class="jxr_keyword">class</strong>)
<a class="jxr_linenumber" name="L162" href="#L162">162</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testMath434UnfeasibleSolution() {
<a class="jxr_linenumber" name="L163" href="#L163">163</a>         <strong class="jxr_keyword">double</strong> epsilon = 1e-6;
<a class="jxr_linenumber" name="L164" href="#L164">164</a> 
<a class="jxr_linenumber" name="L165" href="#L165">165</a>         LinearObjectiveFunction f = <strong class="jxr_keyword">new</strong> LinearObjectiveFunction(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {1.0, 0.0}, 0.0);
<a class="jxr_linenumber" name="L166" href="#L166">166</a>         ArrayList&lt;LinearConstraint&gt; constraints = <strong class="jxr_keyword">new</strong> ArrayList&lt;LinearConstraint&gt;();
<a class="jxr_linenumber" name="L167" href="#L167">167</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {epsilon/2, 0.5}, Relationship.EQ, 0));
<a class="jxr_linenumber" name="L168" href="#L168">168</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {1e-3, 0.1}, Relationship.EQ, 10));
<a class="jxr_linenumber" name="L169" href="#L169">169</a> 
<a class="jxr_linenumber" name="L170" href="#L170">170</a>         SimplexSolver solver = <strong class="jxr_keyword">new</strong> SimplexSolver();
<a class="jxr_linenumber" name="L171" href="#L171">171</a>         <em class="jxr_comment">// allowing only non-negative values, no feasible solution shall be found</em>
<a class="jxr_linenumber" name="L172" href="#L172">172</a>         solver.optimize(DEFAULT_MAX_ITER, f, <strong class="jxr_keyword">new</strong> LinearConstraintSet(constraints),
<a class="jxr_linenumber" name="L173" href="#L173">173</a>                         GoalType.MINIMIZE, <strong class="jxr_keyword">new</strong> NonNegativeConstraint(<strong class="jxr_keyword">true</strong>));
<a class="jxr_linenumber" name="L174" href="#L174">174</a>     }
<a class="jxr_linenumber" name="L175" href="#L175">175</a> 
<a class="jxr_linenumber" name="L176" href="#L176">176</a>     @Test
<a class="jxr_linenumber" name="L177" href="#L177">177</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testMath434PivotRowSelection() {
<a class="jxr_linenumber" name="L178" href="#L178">178</a>         LinearObjectiveFunction f = <strong class="jxr_keyword">new</strong> LinearObjectiveFunction(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {1.0}, 0.0);
<a class="jxr_linenumber" name="L179" href="#L179">179</a> 
<a class="jxr_linenumber" name="L180" href="#L180">180</a>         <strong class="jxr_keyword">double</strong> epsilon = 1e-6;
<a class="jxr_linenumber" name="L181" href="#L181">181</a>         ArrayList&lt;LinearConstraint&gt; constraints = <strong class="jxr_keyword">new</strong> ArrayList&lt;LinearConstraint&gt;();
<a class="jxr_linenumber" name="L182" href="#L182">182</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {200}, Relationship.GEQ, 1));
<a class="jxr_linenumber" name="L183" href="#L183">183</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {100}, Relationship.GEQ, 0.499900001));
<a class="jxr_linenumber" name="L184" href="#L184">184</a> 
<a class="jxr_linenumber" name="L185" href="#L185">185</a>         SimplexSolver solver = <strong class="jxr_keyword">new</strong> SimplexSolver();
<a class="jxr_linenumber" name="L186" href="#L186">186</a>         PointValuePair solution = solver.optimize(DEFAULT_MAX_ITER, f, <strong class="jxr_keyword">new</strong> LinearConstraintSet(constraints),
<a class="jxr_linenumber" name="L187" href="#L187">187</a>                                                   GoalType.MINIMIZE, <strong class="jxr_keyword">new</strong> NonNegativeConstraint(false));
<a class="jxr_linenumber" name="L188" href="#L188">188</a> 
<a class="jxr_linenumber" name="L189" href="#L189">189</a>         Assert.assertTrue(Precision.compareTo(solution.getPoint()[0] * 200.d, 1.d, epsilon) &gt;= 0);
<a class="jxr_linenumber" name="L190" href="#L190">190</a>         Assert.assertEquals(0.0050, solution.getValue(), epsilon);
<a class="jxr_linenumber" name="L191" href="#L191">191</a>     }
<a class="jxr_linenumber" name="L192" href="#L192">192</a> 
<a class="jxr_linenumber" name="L193" href="#L193">193</a>     @Test
<a class="jxr_linenumber" name="L194" href="#L194">194</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testMath434PivotRowSelection2() {
<a class="jxr_linenumber" name="L195" href="#L195">195</a>         LinearObjectiveFunction f = <strong class="jxr_keyword">new</strong> LinearObjectiveFunction(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0.0d, 1.0d, 1.0d, 0.0d, 0.0d, 0.0d, 0.0d}, 0.0d);
<a class="jxr_linenumber" name="L196" href="#L196">196</a> 
<a class="jxr_linenumber" name="L197" href="#L197">197</a>         ArrayList&lt;LinearConstraint&gt; constraints = <strong class="jxr_keyword">new</strong> ArrayList&lt;LinearConstraint&gt;();
<a class="jxr_linenumber" name="L198" href="#L198">198</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {1.0d, -0.1d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d}, Relationship.EQ, -0.1d));
<a class="jxr_linenumber" name="L199" href="#L199">199</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {1.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d}, Relationship.GEQ, -1e-18d));
<a class="jxr_linenumber" name="L200" href="#L200">200</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0.0d, 1.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d}, Relationship.GEQ, 0.0d));
<a class="jxr_linenumber" name="L201" href="#L201">201</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0.0d, 0.0d, 0.0d, 1.0d, 0.0d, -0.0128588d, 1e-5d}, Relationship.EQ, 0.0d));
<a class="jxr_linenumber" name="L202" href="#L202">202</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0.0d, 0.0d, 0.0d, 0.0d, 1.0d, 1e-5d, -0.0128586d}, Relationship.EQ, 1e-10d));
<a class="jxr_linenumber" name="L203" href="#L203">203</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0.0d, 0.0d, 1.0d, -1.0d, 0.0d, 0.0d, 0.0d}, Relationship.GEQ, 0.0d));
<a class="jxr_linenumber" name="L204" href="#L204">204</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0.0d, 0.0d, 1.0d, 1.0d, 0.0d, 0.0d, 0.0d}, Relationship.GEQ, 0.0d));
<a class="jxr_linenumber" name="L205" href="#L205">205</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0.0d, 0.0d, 1.0d, 0.0d, -1.0d, 0.0d, 0.0d}, Relationship.GEQ, 0.0d));
<a class="jxr_linenumber" name="L206" href="#L206">206</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0.0d, 0.0d, 1.0d, 0.0d, 1.0d, 0.0d, 0.0d}, Relationship.GEQ, 0.0d));
<a class="jxr_linenumber" name="L207" href="#L207">207</a> 
<a class="jxr_linenumber" name="L208" href="#L208">208</a>         <strong class="jxr_keyword">double</strong> epsilon = 1e-7;
<a class="jxr_linenumber" name="L209" href="#L209">209</a>         SimplexSolver simplex = <strong class="jxr_keyword">new</strong> SimplexSolver();
<a class="jxr_linenumber" name="L210" href="#L210">210</a>         PointValuePair solution = simplex.optimize(DEFAULT_MAX_ITER, f, <strong class="jxr_keyword">new</strong> LinearConstraintSet(constraints),
<a class="jxr_linenumber" name="L211" href="#L211">211</a>                                                    GoalType.MINIMIZE, <strong class="jxr_keyword">new</strong> NonNegativeConstraint(false));
<a class="jxr_linenumber" name="L212" href="#L212">212</a> 
<a class="jxr_linenumber" name="L213" href="#L213">213</a>         Assert.assertTrue(Precision.compareTo(solution.getPoint()[0], -1e-18d, epsilon) &gt;= 0);
<a class="jxr_linenumber" name="L214" href="#L214">214</a>         Assert.assertEquals(1.0d, solution.getPoint()[1], epsilon);
<a class="jxr_linenumber" name="L215" href="#L215">215</a>         Assert.assertEquals(0.0d, solution.getPoint()[2], epsilon);
<a class="jxr_linenumber" name="L216" href="#L216">216</a>         Assert.assertEquals(1.0d, solution.getValue(), epsilon);
<a class="jxr_linenumber" name="L217" href="#L217">217</a>     }
<a class="jxr_linenumber" name="L218" href="#L218">218</a> 
<a class="jxr_linenumber" name="L219" href="#L219">219</a>     @Test
<a class="jxr_linenumber" name="L220" href="#L220">220</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testMath272() {
<a class="jxr_linenumber" name="L221" href="#L221">221</a>         LinearObjectiveFunction f = <strong class="jxr_keyword">new</strong> LinearObjectiveFunction(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 2, 2, 1 }, 0);
<a class="jxr_linenumber" name="L222" href="#L222">222</a>         Collection&lt;LinearConstraint&gt; constraints = <strong class="jxr_keyword">new</strong> ArrayList&lt;LinearConstraint&gt;();
<a class="jxr_linenumber" name="L223" href="#L223">223</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 1, 1, 0 }, Relationship.GEQ,  1));
<a class="jxr_linenumber" name="L224" href="#L224">224</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 1, 0, 1 }, Relationship.GEQ,  1));
<a class="jxr_linenumber" name="L225" href="#L225">225</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0, 1, 0 }, Relationship.GEQ,  1));
<a class="jxr_linenumber" name="L226" href="#L226">226</a> 
<a class="jxr_linenumber" name="L227" href="#L227">227</a>         SimplexSolver solver = <strong class="jxr_keyword">new</strong> SimplexSolver();
<a class="jxr_linenumber" name="L228" href="#L228">228</a>         PointValuePair solution = solver.optimize(DEFAULT_MAX_ITER, f, <strong class="jxr_keyword">new</strong> LinearConstraintSet(constraints),
<a class="jxr_linenumber" name="L229" href="#L229">229</a>                                                   GoalType.MINIMIZE, <strong class="jxr_keyword">new</strong> NonNegativeConstraint(<strong class="jxr_keyword">true</strong>));
<a class="jxr_linenumber" name="L230" href="#L230">230</a> 
<a class="jxr_linenumber" name="L231" href="#L231">231</a>         Assert.assertEquals(0.0, solution.getPoint()[0], .0000001);
<a class="jxr_linenumber" name="L232" href="#L232">232</a>         Assert.assertEquals(1.0, solution.getPoint()[1], .0000001);
<a class="jxr_linenumber" name="L233" href="#L233">233</a>         Assert.assertEquals(1.0, solution.getPoint()[2], .0000001);
<a class="jxr_linenumber" name="L234" href="#L234">234</a>         Assert.assertEquals(3.0, solution.getValue(), .0000001);
<a class="jxr_linenumber" name="L235" href="#L235">235</a>     }
<a class="jxr_linenumber" name="L236" href="#L236">236</a> 
<a class="jxr_linenumber" name="L237" href="#L237">237</a>     @Test
<a class="jxr_linenumber" name="L238" href="#L238">238</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testMath286() {
<a class="jxr_linenumber" name="L239" href="#L239">239</a>         LinearObjectiveFunction f = <strong class="jxr_keyword">new</strong> LinearObjectiveFunction(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0.8, 0.2, 0.7, 0.3, 0.6, 0.4 }, 0 );
<a class="jxr_linenumber" name="L240" href="#L240">240</a>         Collection&lt;LinearConstraint&gt; constraints = <strong class="jxr_keyword">new</strong> ArrayList&lt;LinearConstraint&gt;();
<a class="jxr_linenumber" name="L241" href="#L241">241</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 1, 0, 1, 0, 1, 0 }, Relationship.EQ, 23.0));
<a class="jxr_linenumber" name="L242" href="#L242">242</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0, 1, 0, 1, 0, 1 }, Relationship.EQ, 23.0));
<a class="jxr_linenumber" name="L243" href="#L243">243</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 1, 0, 0, 0, 0, 0 }, Relationship.GEQ, 10.0));
<a class="jxr_linenumber" name="L244" href="#L244">244</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0, 0, 1, 0, 0, 0 }, Relationship.GEQ, 8.0));
<a class="jxr_linenumber" name="L245" href="#L245">245</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0, 0, 0, 0, 1, 0 }, Relationship.GEQ, 5.0));
<a class="jxr_linenumber" name="L246" href="#L246">246</a> 
<a class="jxr_linenumber" name="L247" href="#L247">247</a>         SimplexSolver solver = <strong class="jxr_keyword">new</strong> SimplexSolver();
<a class="jxr_linenumber" name="L248" href="#L248">248</a>         PointValuePair solution = solver.optimize(DEFAULT_MAX_ITER, f, <strong class="jxr_keyword">new</strong> LinearConstraintSet(constraints),
<a class="jxr_linenumber" name="L249" href="#L249">249</a>                                                   GoalType.MAXIMIZE, <strong class="jxr_keyword">new</strong> NonNegativeConstraint(<strong class="jxr_keyword">true</strong>));
<a class="jxr_linenumber" name="L250" href="#L250">250</a> 
<a class="jxr_linenumber" name="L251" href="#L251">251</a>         Assert.assertEquals(25.8, solution.getValue(), .0000001);
<a class="jxr_linenumber" name="L252" href="#L252">252</a>         Assert.assertEquals(23.0, solution.getPoint()[0] + solution.getPoint()[2] + solution.getPoint()[4], 0.0000001);
<a class="jxr_linenumber" name="L253" href="#L253">253</a>         Assert.assertEquals(23.0, solution.getPoint()[1] + solution.getPoint()[3] + solution.getPoint()[5], 0.0000001);
<a class="jxr_linenumber" name="L254" href="#L254">254</a>         Assert.assertTrue(solution.getPoint()[0] &gt;= 10.0 - 0.0000001);
<a class="jxr_linenumber" name="L255" href="#L255">255</a>         Assert.assertTrue(solution.getPoint()[2] &gt;= 8.0 - 0.0000001);
<a class="jxr_linenumber" name="L256" href="#L256">256</a>         Assert.assertTrue(solution.getPoint()[4] &gt;= 5.0 - 0.0000001);
<a class="jxr_linenumber" name="L257" href="#L257">257</a>     }
<a class="jxr_linenumber" name="L258" href="#L258">258</a> 
<a class="jxr_linenumber" name="L259" href="#L259">259</a>     @Test
<a class="jxr_linenumber" name="L260" href="#L260">260</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testDegeneracy() {
<a class="jxr_linenumber" name="L261" href="#L261">261</a>         LinearObjectiveFunction f = <strong class="jxr_keyword">new</strong> LinearObjectiveFunction(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0.8, 0.7 }, 0 );
<a class="jxr_linenumber" name="L262" href="#L262">262</a>         Collection&lt;LinearConstraint&gt; constraints = <strong class="jxr_keyword">new</strong> ArrayList&lt;LinearConstraint&gt;();
<a class="jxr_linenumber" name="L263" href="#L263">263</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 1, 1 }, Relationship.LEQ, 18.0));
<a class="jxr_linenumber" name="L264" href="#L264">264</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 1, 0 }, Relationship.GEQ, 10.0));
<a class="jxr_linenumber" name="L265" href="#L265">265</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0, 1 }, Relationship.GEQ, 8.0));
<a class="jxr_linenumber" name="L266" href="#L266">266</a> 
<a class="jxr_linenumber" name="L267" href="#L267">267</a>         SimplexSolver solver = <strong class="jxr_keyword">new</strong> SimplexSolver();
<a class="jxr_linenumber" name="L268" href="#L268">268</a>         PointValuePair solution = solver.optimize(DEFAULT_MAX_ITER, f, <strong class="jxr_keyword">new</strong> LinearConstraintSet(constraints),
<a class="jxr_linenumber" name="L269" href="#L269">269</a>                                                   GoalType.MINIMIZE, <strong class="jxr_keyword">new</strong> NonNegativeConstraint(<strong class="jxr_keyword">true</strong>));
<a class="jxr_linenumber" name="L270" href="#L270">270</a>         Assert.assertEquals(13.6, solution.getValue(), .0000001);
<a class="jxr_linenumber" name="L271" href="#L271">271</a>     }
<a class="jxr_linenumber" name="L272" href="#L272">272</a> 
<a class="jxr_linenumber" name="L273" href="#L273">273</a>     @Test
<a class="jxr_linenumber" name="L274" href="#L274">274</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testMath288() {
<a class="jxr_linenumber" name="L275" href="#L275">275</a>         LinearObjectiveFunction f = <strong class="jxr_keyword">new</strong> LinearObjectiveFunction(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 7, 3, 0, 0 }, 0 );
<a class="jxr_linenumber" name="L276" href="#L276">276</a>         Collection&lt;LinearConstraint&gt; constraints = <strong class="jxr_keyword">new</strong> ArrayList&lt;LinearConstraint&gt;();
<a class="jxr_linenumber" name="L277" href="#L277">277</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 3, 0, -5, 0 }, Relationship.LEQ, 0.0));
<a class="jxr_linenumber" name="L278" href="#L278">278</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 2, 0, 0, -5 }, Relationship.LEQ, 0.0));
<a class="jxr_linenumber" name="L279" href="#L279">279</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0, 3, 0, -5 }, Relationship.LEQ, 0.0));
<a class="jxr_linenumber" name="L280" href="#L280">280</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 1, 0, 0, 0 }, Relationship.LEQ, 1.0));
<a class="jxr_linenumber" name="L281" href="#L281">281</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0, 1, 0, 0 }, Relationship.LEQ, 1.0));
<a class="jxr_linenumber" name="L282" href="#L282">282</a> 
<a class="jxr_linenumber" name="L283" href="#L283">283</a>         SimplexSolver solver = <strong class="jxr_keyword">new</strong> SimplexSolver();
<a class="jxr_linenumber" name="L284" href="#L284">284</a>         PointValuePair solution = solver.optimize(DEFAULT_MAX_ITER, f, <strong class="jxr_keyword">new</strong> LinearConstraintSet(constraints),
<a class="jxr_linenumber" name="L285" href="#L285">285</a>                                                   GoalType.MAXIMIZE, <strong class="jxr_keyword">new</strong> NonNegativeConstraint(<strong class="jxr_keyword">true</strong>));
<a class="jxr_linenumber" name="L286" href="#L286">286</a>         Assert.assertEquals(10.0, solution.getValue(), .0000001);
<a class="jxr_linenumber" name="L287" href="#L287">287</a>     }
<a class="jxr_linenumber" name="L288" href="#L288">288</a> 
<a class="jxr_linenumber" name="L289" href="#L289">289</a>     @Test
<a class="jxr_linenumber" name="L290" href="#L290">290</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testMath290GEQ() {
<a class="jxr_linenumber" name="L291" href="#L291">291</a>         LinearObjectiveFunction f = <strong class="jxr_keyword">new</strong> LinearObjectiveFunction(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 1, 5 }, 0 );
<a class="jxr_linenumber" name="L292" href="#L292">292</a>         Collection&lt;LinearConstraint&gt; constraints = <strong class="jxr_keyword">new</strong> ArrayList&lt;LinearConstraint&gt;();
<a class="jxr_linenumber" name="L293" href="#L293">293</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 2, 0 }, Relationship.GEQ, -1.0));
<a class="jxr_linenumber" name="L294" href="#L294">294</a>         SimplexSolver solver = <strong class="jxr_keyword">new</strong> SimplexSolver();
<a class="jxr_linenumber" name="L295" href="#L295">295</a>         PointValuePair solution = solver.optimize(DEFAULT_MAX_ITER, f, <strong class="jxr_keyword">new</strong> LinearConstraintSet(constraints),
<a class="jxr_linenumber" name="L296" href="#L296">296</a>                                                   GoalType.MINIMIZE, <strong class="jxr_keyword">new</strong> NonNegativeConstraint(<strong class="jxr_keyword">true</strong>));
<a class="jxr_linenumber" name="L297" href="#L297">297</a>         Assert.assertEquals(0, solution.getValue(), .0000001);
<a class="jxr_linenumber" name="L298" href="#L298">298</a>         Assert.assertEquals(0, solution.getPoint()[0], .0000001);
<a class="jxr_linenumber" name="L299" href="#L299">299</a>         Assert.assertEquals(0, solution.getPoint()[1], .0000001);
<a class="jxr_linenumber" name="L300" href="#L300">300</a>     }
<a class="jxr_linenumber" name="L301" href="#L301">301</a> 
<a class="jxr_linenumber" name="L302" href="#L302">302</a>     @Test(expected=NoFeasibleSolutionException.<strong class="jxr_keyword">class</strong>)
<a class="jxr_linenumber" name="L303" href="#L303">303</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testMath290LEQ() {
<a class="jxr_linenumber" name="L304" href="#L304">304</a>         LinearObjectiveFunction f = <strong class="jxr_keyword">new</strong> LinearObjectiveFunction(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 1, 5 }, 0 );
<a class="jxr_linenumber" name="L305" href="#L305">305</a>         Collection&lt;LinearConstraint&gt; constraints = <strong class="jxr_keyword">new</strong> ArrayList&lt;LinearConstraint&gt;();
<a class="jxr_linenumber" name="L306" href="#L306">306</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 2, 0 }, Relationship.LEQ, -1.0));
<a class="jxr_linenumber" name="L307" href="#L307">307</a>         SimplexSolver solver = <strong class="jxr_keyword">new</strong> SimplexSolver();
<a class="jxr_linenumber" name="L308" href="#L308">308</a>         solver.optimize(DEFAULT_MAX_ITER, f, <strong class="jxr_keyword">new</strong> LinearConstraintSet(constraints),
<a class="jxr_linenumber" name="L309" href="#L309">309</a>                         GoalType.MINIMIZE, <strong class="jxr_keyword">new</strong> NonNegativeConstraint(<strong class="jxr_keyword">true</strong>));
<a class="jxr_linenumber" name="L310" href="#L310">310</a>     }
<a class="jxr_linenumber" name="L311" href="#L311">311</a> 
<a class="jxr_linenumber" name="L312" href="#L312">312</a>     @Test
<a class="jxr_linenumber" name="L313" href="#L313">313</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testMath293() {
<a class="jxr_linenumber" name="L314" href="#L314">314</a>       LinearObjectiveFunction f = <strong class="jxr_keyword">new</strong> LinearObjectiveFunction(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0.8, 0.2, 0.7, 0.3, 0.4, 0.6}, 0 );
<a class="jxr_linenumber" name="L315" href="#L315">315</a>       Collection&lt;LinearConstraint&gt; constraints = <strong class="jxr_keyword">new</strong> ArrayList&lt;LinearConstraint&gt;();
<a class="jxr_linenumber" name="L316" href="#L316">316</a>       constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 1, 0, 1, 0, 1, 0 }, Relationship.EQ, 30.0));
<a class="jxr_linenumber" name="L317" href="#L317">317</a>       constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0, 1, 0, 1, 0, 1 }, Relationship.EQ, 30.0));
<a class="jxr_linenumber" name="L318" href="#L318">318</a>       constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0.8, 0.2, 0.0, 0.0, 0.0, 0.0 }, Relationship.GEQ, 10.0));
<a class="jxr_linenumber" name="L319" href="#L319">319</a>       constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0.0, 0.0, 0.7, 0.3, 0.0, 0.0 }, Relationship.GEQ, 10.0));
<a class="jxr_linenumber" name="L320" href="#L320">320</a>       constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0.0, 0.0, 0.0, 0.0, 0.4, 0.6 }, Relationship.GEQ, 10.0));
<a class="jxr_linenumber" name="L321" href="#L321">321</a> 
<a class="jxr_linenumber" name="L322" href="#L322">322</a>       SimplexSolver solver = <strong class="jxr_keyword">new</strong> SimplexSolver();
<a class="jxr_linenumber" name="L323" href="#L323">323</a>       PointValuePair solution1 = solver.optimize(DEFAULT_MAX_ITER, f, <strong class="jxr_keyword">new</strong> LinearConstraintSet(constraints),
<a class="jxr_linenumber" name="L324" href="#L324">324</a>                                                  GoalType.MAXIMIZE, <strong class="jxr_keyword">new</strong> NonNegativeConstraint(<strong class="jxr_keyword">true</strong>));
<a class="jxr_linenumber" name="L325" href="#L325">325</a> 
<a class="jxr_linenumber" name="L326" href="#L326">326</a>       Assert.assertEquals(15.7143, solution1.getPoint()[0], .0001);
<a class="jxr_linenumber" name="L327" href="#L327">327</a>       Assert.assertEquals(0.0, solution1.getPoint()[1], .0001);
<a class="jxr_linenumber" name="L328" href="#L328">328</a>       Assert.assertEquals(14.2857, solution1.getPoint()[2], .0001);
<a class="jxr_linenumber" name="L329" href="#L329">329</a>       Assert.assertEquals(0.0, solution1.getPoint()[3], .0001);
<a class="jxr_linenumber" name="L330" href="#L330">330</a>       Assert.assertEquals(0.0, solution1.getPoint()[4], .0001);
<a class="jxr_linenumber" name="L331" href="#L331">331</a>       Assert.assertEquals(30.0, solution1.getPoint()[5], .0001);
<a class="jxr_linenumber" name="L332" href="#L332">332</a>       Assert.assertEquals(40.57143, solution1.getValue(), .0001);
<a class="jxr_linenumber" name="L333" href="#L333">333</a> 
<a class="jxr_linenumber" name="L334" href="#L334">334</a>       <strong class="jxr_keyword">double</strong> valA = 0.8 * solution1.getPoint()[0] + 0.2 * solution1.getPoint()[1];
<a class="jxr_linenumber" name="L335" href="#L335">335</a>       <strong class="jxr_keyword">double</strong> valB = 0.7 * solution1.getPoint()[2] + 0.3 * solution1.getPoint()[3];
<a class="jxr_linenumber" name="L336" href="#L336">336</a>       <strong class="jxr_keyword">double</strong> valC = 0.4 * solution1.getPoint()[4] + 0.6 * solution1.getPoint()[5];
<a class="jxr_linenumber" name="L337" href="#L337">337</a> 
<a class="jxr_linenumber" name="L338" href="#L338">338</a>       f = <strong class="jxr_keyword">new</strong> LinearObjectiveFunction(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0.8, 0.2, 0.7, 0.3, 0.4, 0.6}, 0 );
<a class="jxr_linenumber" name="L339" href="#L339">339</a>       constraints = <strong class="jxr_keyword">new</strong> ArrayList&lt;LinearConstraint&gt;();
<a class="jxr_linenumber" name="L340" href="#L340">340</a>       constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 1, 0, 1, 0, 1, 0 }, Relationship.EQ, 30.0));
<a class="jxr_linenumber" name="L341" href="#L341">341</a>       constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0, 1, 0, 1, 0, 1 }, Relationship.EQ, 30.0));
<a class="jxr_linenumber" name="L342" href="#L342">342</a>       constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0.8, 0.2, 0.0, 0.0, 0.0, 0.0 }, Relationship.GEQ, valA));
<a class="jxr_linenumber" name="L343" href="#L343">343</a>       constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0.0, 0.0, 0.7, 0.3, 0.0, 0.0 }, Relationship.GEQ, valB));
<a class="jxr_linenumber" name="L344" href="#L344">344</a>       constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0.0, 0.0, 0.0, 0.0, 0.4, 0.6 }, Relationship.GEQ, valC));
<a class="jxr_linenumber" name="L345" href="#L345">345</a> 
<a class="jxr_linenumber" name="L346" href="#L346">346</a>       PointValuePair solution2 = solver.optimize(DEFAULT_MAX_ITER, f, <strong class="jxr_keyword">new</strong> LinearConstraintSet(constraints),
<a class="jxr_linenumber" name="L347" href="#L347">347</a>                                                  GoalType.MAXIMIZE, <strong class="jxr_keyword">new</strong> NonNegativeConstraint(<strong class="jxr_keyword">true</strong>));
<a class="jxr_linenumber" name="L348" href="#L348">348</a>       Assert.assertEquals(40.57143, solution2.getValue(), .0001);
<a class="jxr_linenumber" name="L349" href="#L349">349</a>     }
<a class="jxr_linenumber" name="L350" href="#L350">350</a> 
<a class="jxr_linenumber" name="L351" href="#L351">351</a>     @Test
<a class="jxr_linenumber" name="L352" href="#L352">352</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testMath930() {
<a class="jxr_linenumber" name="L353" href="#L353">353</a>         Collection&lt;LinearConstraint&gt; constraints = createMath930Constraints();
<a class="jxr_linenumber" name="L354" href="#L354">354</a> 
<a class="jxr_linenumber" name="L355" href="#L355">355</a>         <strong class="jxr_keyword">double</strong>[] objFunctionCoeff = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[33];
<a class="jxr_linenumber" name="L356" href="#L356">356</a>         objFunctionCoeff[3] = 1;
<a class="jxr_linenumber" name="L357" href="#L357">357</a>         LinearObjectiveFunction f = <strong class="jxr_keyword">new</strong> LinearObjectiveFunction(objFunctionCoeff, 0);
<a class="jxr_linenumber" name="L358" href="#L358">358</a>         SimplexSolver solver = <strong class="jxr_keyword">new</strong> SimplexSolver(1e-4, 10, 1e-6);
<a class="jxr_linenumber" name="L359" href="#L359">359</a> 
<a class="jxr_linenumber" name="L360" href="#L360">360</a>         PointValuePair solution = solver.optimize(<strong class="jxr_keyword">new</strong> MaxIter(1000), f, <strong class="jxr_keyword">new</strong> LinearConstraintSet(constraints),
<a class="jxr_linenumber" name="L361" href="#L361">361</a>                                                   GoalType.MINIMIZE, <strong class="jxr_keyword">new</strong> NonNegativeConstraint(<strong class="jxr_keyword">true</strong>));
<a class="jxr_linenumber" name="L362" href="#L362">362</a>         Assert.assertEquals(0.3752298, solution.getValue(), 1e-4);
<a class="jxr_linenumber" name="L363" href="#L363">363</a>     }
<a class="jxr_linenumber" name="L364" href="#L364">364</a> 
<a class="jxr_linenumber" name="L365" href="#L365">365</a>     <strong class="jxr_keyword">private</strong> List&lt;LinearConstraint&gt; createMath930Constraints() {
<a class="jxr_linenumber" name="L366" href="#L366">366</a>         List&lt;LinearConstraint&gt; constraints = <strong class="jxr_keyword">new</strong> ArrayList&lt;LinearConstraint&gt;();
<a class="jxr_linenumber" name="L367" href="#L367">367</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, 0}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L368" href="#L368">368</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L369" href="#L369">369</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1}, Relationship.LEQ, 0.0));
<a class="jxr_linenumber" name="L370" href="#L370">370</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 1, 0, -1, 0, -1, 0, 1, 0, -1, 0, 1, 0, 1, 0, -1, 0, -1, 0, 1, 0, 1, 0, -1, 0, 1, 0, -1, 0, -1, 0, 1, 0}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L371" href="#L371">371</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.628803}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L372" href="#L372">372</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.676993}, Relationship.LEQ, 0.0));
<a class="jxr_linenumber" name="L373" href="#L373">373</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 1, -1, 0, 0, -1, 1, 0, 0, -1, 1, 0, 0, 1, -1, 0, 0, -1, 1, 0, 0, 1, -1, 0, 0, 1, -1, 0, 0, -1, 1, 0}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L374" href="#L374">374</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.136677}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L375" href="#L375">375</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.444434}, Relationship.LEQ, 0.0));
<a class="jxr_linenumber" name="L376" href="#L376">376</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, -1, 0}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L377" href="#L377">377</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.254028}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L378" href="#L378">378</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.302218}, Relationship.LEQ, 0.0));
<a class="jxr_linenumber" name="L379" href="#L379">379</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 1, -1, -1, 1, 0, 0, 0, 0, -1, 1, 1, -1, 0, 0, 0, 0, -1, 1, 1, -1, 0, 0, 0, 0, 1, -1, -1, 1, 0}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L380" href="#L380">380</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.653981}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L381" href="#L381">381</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.690437}, Relationship.LEQ, 0.0));
<a class="jxr_linenumber" name="L382" href="#L382">382</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 1, 0, -1, 0, 0, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 0, 1, 0, -1, 0}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L383" href="#L383">383</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.423786}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L384" href="#L384">384</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.486717}, Relationship.LEQ, 0.0));
<a class="jxr_linenumber" name="L385" href="#L385">385</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 1, -1, 0}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L386" href="#L386">386</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.049232}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L387" href="#L387">387</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.304747}, Relationship.LEQ, 0.0));
<a class="jxr_linenumber" name="L388" href="#L388">388</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 1, 0}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L389" href="#L389">389</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.129826}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L390" href="#L390">390</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.205625}, Relationship.LEQ, 0.0));
<a class="jxr_linenumber" name="L391" href="#L391">391</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 1, -1, -1, 1, -1, 1, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 1, -1, 1, -1, -1, 1, 0}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L392" href="#L392">392</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.621944}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L393" href="#L393">393</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.764385}, Relationship.LEQ, 0.0));
<a class="jxr_linenumber" name="L394" href="#L394">394</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1, 0, -1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 1, 0, 1, 0, -1, 0}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L395" href="#L395">395</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.432572}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L396" href="#L396">396</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.480762}, Relationship.LEQ, 0.0));
<a class="jxr_linenumber" name="L397" href="#L397">397</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 1, -1, 0}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L398" href="#L398">398</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.055983}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L399" href="#L399">399</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.11378}, Relationship.LEQ, 0.0));
<a class="jxr_linenumber" name="L400" href="#L400">400</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 1, 0}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L401" href="#L401">401</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.009607}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L402" href="#L402">402</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.057797}, Relationship.LEQ, 0.0));
<a class="jxr_linenumber" name="L403" href="#L403">403</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 1, -1, 0}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L404" href="#L404">404</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.407308}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L405" href="#L405">405</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.452749}, Relationship.LEQ, 0.0));
<a class="jxr_linenumber" name="L406" href="#L406">406</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 1, 0}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L407" href="#L407">407</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.269677}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L408" href="#L408">408</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.321806}, Relationship.LEQ, 0.0));
<a class="jxr_linenumber" name="L409" href="#L409">409</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 0}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L410" href="#L410">410</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.049232}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L411" href="#L411">411</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.06902}, Relationship.LEQ, 0.0));
<a class="jxr_linenumber" name="L412" href="#L412">412</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L413" href="#L413">413</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L414" href="#L414">414</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.028754}, Relationship.LEQ, 0.0));
<a class="jxr_linenumber" name="L415" href="#L415">415</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, 0}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L416" href="#L416">416</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.484254}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L417" href="#L417">417</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.524607}, Relationship.LEQ, 0.0));
<a class="jxr_linenumber" name="L418" href="#L418">418</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1, 0, -1, 0, 1, 0, -1, 0, 1, 0, 1, 0, -1, 0}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L419" href="#L419">419</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.385492}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L420" href="#L420">420</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.430134}, Relationship.LEQ, 0.0));
<a class="jxr_linenumber" name="L421" href="#L421">421</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, -1, 1, 0, 0, -1, 1, 0, 0, 1, -1, 0}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L422" href="#L422">422</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.34983}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L423" href="#L423">423</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.375781}, Relationship.LEQ, 0.0));
<a class="jxr_linenumber" name="L424" href="#L424">424</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, 1, 0}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L425" href="#L425">425</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.254028}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L426" href="#L426">426</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.281308}, Relationship.LEQ, 0.0));
<a class="jxr_linenumber" name="L427" href="#L427">427</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, -1, 1, 0, 0, 0, 0, -1, 1, 1, -1, 0}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L428" href="#L428">428</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.304995}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L429" href="#L429">429</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.345347}, Relationship.LEQ, 0.0));
<a class="jxr_linenumber" name="L430" href="#L430">430</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1, 0, 0, 0, 0, 0, -1, 0, 1, 0}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L431" href="#L431">431</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.288899}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L432" href="#L432">432</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.332212}, Relationship.LEQ, 0.0));
<a class="jxr_linenumber" name="L433" href="#L433">433</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, -1, 1, 0}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L434" href="#L434">434</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.14351}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L435" href="#L435">435</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.17057}, Relationship.LEQ, 0.0));
<a class="jxr_linenumber" name="L436" href="#L436">436</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, -1, 0}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L437" href="#L437">437</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, -0.129826}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L438" href="#L438">438</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, -0.157435}, Relationship.LEQ, 0.0));
<a class="jxr_linenumber" name="L439" href="#L439">439</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, -1, 1, -1, 1, 1, -1, 0}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L440" href="#L440">440</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, -0}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L441" href="#L441">441</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, -1}, Relationship.LEQ, 0.0));
<a class="jxr_linenumber" name="L442" href="#L442">442</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1, 0, -1, 0, 1, 0}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L443" href="#L443">443</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -0.141071}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L444" href="#L444">444</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -0.232574}, Relationship.LEQ, 0.0));
<a class="jxr_linenumber" name="L445" href="#L445">445</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, -1, 1, 0}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L446" href="#L446">446</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, -0}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L447" href="#L447">447</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, -1}, Relationship.LEQ, 0.0));
<a class="jxr_linenumber" name="L448" href="#L448">448</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, -1, 0}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L449" href="#L449">449</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, -0.009607}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L450" href="#L450">450</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, -0.057797}, Relationship.LEQ, 0.0));
<a class="jxr_linenumber" name="L451" href="#L451">451</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, -1, 1, 0}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L452" href="#L452">452</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, -0}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L453" href="#L453">453</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, -1}, Relationship.LEQ, 0.0));
<a class="jxr_linenumber" name="L454" href="#L454">454</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1, 0}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L455" href="#L455">455</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, -0.091644}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L456" href="#L456">456</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, -0.203531}, Relationship.LEQ, 0.0));
<a class="jxr_linenumber" name="L457" href="#L457">457</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L458" href="#L458">458</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -0}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L459" href="#L459">459</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1}, Relationship.LEQ, 0.0));
<a class="jxr_linenumber" name="L460" href="#L460">460</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L461" href="#L461">461</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0}, Relationship.GEQ, 0.0));
<a class="jxr_linenumber" name="L462" href="#L462">462</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -0.028754}, Relationship.LEQ, 0.0));
<a class="jxr_linenumber" name="L463" href="#L463">463</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, Relationship.EQ, 1.0));
<a class="jxr_linenumber" name="L464" href="#L464">464</a>         <strong class="jxr_keyword">return</strong> constraints;
<a class="jxr_linenumber" name="L465" href="#L465">465</a>     }
<a class="jxr_linenumber" name="L466" href="#L466">466</a> 
<a class="jxr_linenumber" name="L467" href="#L467">467</a>     @Test
<a class="jxr_linenumber" name="L468" href="#L468">468</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testSimplexSolver() {
<a class="jxr_linenumber" name="L469" href="#L469">469</a>         LinearObjectiveFunction f =
<a class="jxr_linenumber" name="L470" href="#L470">470</a>             <strong class="jxr_keyword">new</strong> LinearObjectiveFunction(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 15, 10 }, 7);
<a class="jxr_linenumber" name="L471" href="#L471">471</a>         Collection&lt;LinearConstraint&gt; constraints = <strong class="jxr_keyword">new</strong> ArrayList&lt;LinearConstraint&gt;();
<a class="jxr_linenumber" name="L472" href="#L472">472</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 1, 0 }, Relationship.LEQ, 2));
<a class="jxr_linenumber" name="L473" href="#L473">473</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0, 1 }, Relationship.LEQ, 3));
<a class="jxr_linenumber" name="L474" href="#L474">474</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 1, 1 }, Relationship.EQ, 4));
<a class="jxr_linenumber" name="L475" href="#L475">475</a> 
<a class="jxr_linenumber" name="L476" href="#L476">476</a>         SimplexSolver solver = <strong class="jxr_keyword">new</strong> SimplexSolver();
<a class="jxr_linenumber" name="L477" href="#L477">477</a>         PointValuePair solution = solver.optimize(DEFAULT_MAX_ITER, f, <strong class="jxr_keyword">new</strong> LinearConstraintSet(constraints),
<a class="jxr_linenumber" name="L478" href="#L478">478</a>                                                   GoalType.MAXIMIZE, <strong class="jxr_keyword">new</strong> NonNegativeConstraint(<strong class="jxr_keyword">true</strong>));
<a class="jxr_linenumber" name="L479" href="#L479">479</a>         Assert.assertEquals(2.0, solution.getPoint()[0], 0.0);
<a class="jxr_linenumber" name="L480" href="#L480">480</a>         Assert.assertEquals(2.0, solution.getPoint()[1], 0.0);
<a class="jxr_linenumber" name="L481" href="#L481">481</a>         Assert.assertEquals(57.0, solution.getValue(), 0.0);
<a class="jxr_linenumber" name="L482" href="#L482">482</a>     }
<a class="jxr_linenumber" name="L483" href="#L483">483</a> 
<a class="jxr_linenumber" name="L484" href="#L484">484</a>     @Test
<a class="jxr_linenumber" name="L485" href="#L485">485</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testSingleVariableAndConstraint() {
<a class="jxr_linenumber" name="L486" href="#L486">486</a>         LinearObjectiveFunction f = <strong class="jxr_keyword">new</strong> LinearObjectiveFunction(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 3 }, 0);
<a class="jxr_linenumber" name="L487" href="#L487">487</a>         Collection&lt;LinearConstraint&gt; constraints = <strong class="jxr_keyword">new</strong> ArrayList&lt;LinearConstraint&gt;();
<a class="jxr_linenumber" name="L488" href="#L488">488</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 1 }, Relationship.LEQ, 10));
<a class="jxr_linenumber" name="L489" href="#L489">489</a> 
<a class="jxr_linenumber" name="L490" href="#L490">490</a>         SimplexSolver solver = <strong class="jxr_keyword">new</strong> SimplexSolver();
<a class="jxr_linenumber" name="L491" href="#L491">491</a>         PointValuePair solution = solver.optimize(DEFAULT_MAX_ITER, f, <strong class="jxr_keyword">new</strong> LinearConstraintSet(constraints),
<a class="jxr_linenumber" name="L492" href="#L492">492</a>                                                   GoalType.MAXIMIZE, <strong class="jxr_keyword">new</strong> NonNegativeConstraint(false));
<a class="jxr_linenumber" name="L493" href="#L493">493</a>         Assert.assertEquals(10.0, solution.getPoint()[0], 0.0);
<a class="jxr_linenumber" name="L494" href="#L494">494</a>         Assert.assertEquals(30.0, solution.getValue(), 0.0);
<a class="jxr_linenumber" name="L495" href="#L495">495</a>     }
<a class="jxr_linenumber" name="L496" href="#L496">496</a> 
<a class="jxr_linenumber" name="L497" href="#L497">497</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L498" href="#L498">498</a> <em class="jxr_javadoccomment">     * With no artificial variables needed (no equals and no greater than</em>
<a class="jxr_linenumber" name="L499" href="#L499">499</a> <em class="jxr_javadoccomment">     * constraints) we can go straight to Phase 2.</em>
<a class="jxr_linenumber" name="L500" href="#L500">500</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L501" href="#L501">501</a>     @Test
<a class="jxr_linenumber" name="L502" href="#L502">502</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testModelWithNoArtificialVars() {
<a class="jxr_linenumber" name="L503" href="#L503">503</a>         LinearObjectiveFunction f = <strong class="jxr_keyword">new</strong> LinearObjectiveFunction(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 15, 10 }, 0);
<a class="jxr_linenumber" name="L504" href="#L504">504</a>         Collection&lt;LinearConstraint&gt; constraints = <strong class="jxr_keyword">new</strong> ArrayList&lt;LinearConstraint&gt;();
<a class="jxr_linenumber" name="L505" href="#L505">505</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 1, 0 }, Relationship.LEQ, 2));
<a class="jxr_linenumber" name="L506" href="#L506">506</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0, 1 }, Relationship.LEQ, 3));
<a class="jxr_linenumber" name="L507" href="#L507">507</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 1, 1 }, Relationship.LEQ, 4));
<a class="jxr_linenumber" name="L508" href="#L508">508</a> 
<a class="jxr_linenumber" name="L509" href="#L509">509</a>         SimplexSolver solver = <strong class="jxr_keyword">new</strong> SimplexSolver();
<a class="jxr_linenumber" name="L510" href="#L510">510</a>         PointValuePair solution = solver.optimize(DEFAULT_MAX_ITER, f, <strong class="jxr_keyword">new</strong> LinearConstraintSet(constraints),
<a class="jxr_linenumber" name="L511" href="#L511">511</a>                                                   GoalType.MAXIMIZE, <strong class="jxr_keyword">new</strong> NonNegativeConstraint(false));
<a class="jxr_linenumber" name="L512" href="#L512">512</a>         Assert.assertEquals(2.0, solution.getPoint()[0], 0.0);
<a class="jxr_linenumber" name="L513" href="#L513">513</a>         Assert.assertEquals(2.0, solution.getPoint()[1], 0.0);
<a class="jxr_linenumber" name="L514" href="#L514">514</a>         Assert.assertEquals(50.0, solution.getValue(), 0.0);
<a class="jxr_linenumber" name="L515" href="#L515">515</a>     }
<a class="jxr_linenumber" name="L516" href="#L516">516</a> 
<a class="jxr_linenumber" name="L517" href="#L517">517</a>     @Test
<a class="jxr_linenumber" name="L518" href="#L518">518</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testMinimization() {
<a class="jxr_linenumber" name="L519" href="#L519">519</a>         LinearObjectiveFunction f = <strong class="jxr_keyword">new</strong> LinearObjectiveFunction(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { -2, 1 }, -5);
<a class="jxr_linenumber" name="L520" href="#L520">520</a>         Collection&lt;LinearConstraint&gt; constraints = <strong class="jxr_keyword">new</strong> ArrayList&lt;LinearConstraint&gt;();
<a class="jxr_linenumber" name="L521" href="#L521">521</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 1, 2 }, Relationship.LEQ, 6));
<a class="jxr_linenumber" name="L522" href="#L522">522</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 3, 2 }, Relationship.LEQ, 12));
<a class="jxr_linenumber" name="L523" href="#L523">523</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0, 1 }, Relationship.GEQ, 0));
<a class="jxr_linenumber" name="L524" href="#L524">524</a> 
<a class="jxr_linenumber" name="L525" href="#L525">525</a>         SimplexSolver solver = <strong class="jxr_keyword">new</strong> SimplexSolver();
<a class="jxr_linenumber" name="L526" href="#L526">526</a>         PointValuePair solution = solver.optimize(DEFAULT_MAX_ITER, f, <strong class="jxr_keyword">new</strong> LinearConstraintSet(constraints),
<a class="jxr_linenumber" name="L527" href="#L527">527</a>                                                   GoalType.MINIMIZE, <strong class="jxr_keyword">new</strong> NonNegativeConstraint(false));
<a class="jxr_linenumber" name="L528" href="#L528">528</a>         Assert.assertEquals(4.0, solution.getPoint()[0], 0.0);
<a class="jxr_linenumber" name="L529" href="#L529">529</a>         Assert.assertEquals(0.0, solution.getPoint()[1], 0.0);
<a class="jxr_linenumber" name="L530" href="#L530">530</a>         Assert.assertEquals(-13.0, solution.getValue(), 0.0);
<a class="jxr_linenumber" name="L531" href="#L531">531</a>     }
<a class="jxr_linenumber" name="L532" href="#L532">532</a> 
<a class="jxr_linenumber" name="L533" href="#L533">533</a>     @Test
<a class="jxr_linenumber" name="L534" href="#L534">534</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testSolutionWithNegativeDecisionVariable() {
<a class="jxr_linenumber" name="L535" href="#L535">535</a>         LinearObjectiveFunction f = <strong class="jxr_keyword">new</strong> LinearObjectiveFunction(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { -2, 1 }, 0);
<a class="jxr_linenumber" name="L536" href="#L536">536</a>         Collection&lt;LinearConstraint&gt; constraints = <strong class="jxr_keyword">new</strong> ArrayList&lt;LinearConstraint&gt;();
<a class="jxr_linenumber" name="L537" href="#L537">537</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 1, 1 }, Relationship.GEQ, 6));
<a class="jxr_linenumber" name="L538" href="#L538">538</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 1, 2 }, Relationship.LEQ, 14));
<a class="jxr_linenumber" name="L539" href="#L539">539</a> 
<a class="jxr_linenumber" name="L540" href="#L540">540</a>         SimplexSolver solver = <strong class="jxr_keyword">new</strong> SimplexSolver();
<a class="jxr_linenumber" name="L541" href="#L541">541</a>         PointValuePair solution = solver.optimize(DEFAULT_MAX_ITER, f, <strong class="jxr_keyword">new</strong> LinearConstraintSet(constraints),
<a class="jxr_linenumber" name="L542" href="#L542">542</a>                                                   GoalType.MAXIMIZE, <strong class="jxr_keyword">new</strong> NonNegativeConstraint(false));
<a class="jxr_linenumber" name="L543" href="#L543">543</a>         Assert.assertEquals(-2.0, solution.getPoint()[0], 0.0);
<a class="jxr_linenumber" name="L544" href="#L544">544</a>         Assert.assertEquals(8.0, solution.getPoint()[1], 0.0);
<a class="jxr_linenumber" name="L545" href="#L545">545</a>         Assert.assertEquals(12.0, solution.getValue(), 0.0);
<a class="jxr_linenumber" name="L546" href="#L546">546</a>     }
<a class="jxr_linenumber" name="L547" href="#L547">547</a> 
<a class="jxr_linenumber" name="L548" href="#L548">548</a>     @Test(expected = NoFeasibleSolutionException.<strong class="jxr_keyword">class</strong>)
<a class="jxr_linenumber" name="L549" href="#L549">549</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testInfeasibleSolution() {
<a class="jxr_linenumber" name="L550" href="#L550">550</a>         LinearObjectiveFunction f = <strong class="jxr_keyword">new</strong> LinearObjectiveFunction(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 15 }, 0);
<a class="jxr_linenumber" name="L551" href="#L551">551</a>         Collection&lt;LinearConstraint&gt; constraints = <strong class="jxr_keyword">new</strong> ArrayList&lt;LinearConstraint&gt;();
<a class="jxr_linenumber" name="L552" href="#L552">552</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 1 }, Relationship.LEQ, 1));
<a class="jxr_linenumber" name="L553" href="#L553">553</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 1 }, Relationship.GEQ, 3));
<a class="jxr_linenumber" name="L554" href="#L554">554</a> 
<a class="jxr_linenumber" name="L555" href="#L555">555</a>         SimplexSolver solver = <strong class="jxr_keyword">new</strong> SimplexSolver();
<a class="jxr_linenumber" name="L556" href="#L556">556</a>         solver.optimize(DEFAULT_MAX_ITER, f, <strong class="jxr_keyword">new</strong> LinearConstraintSet(constraints),
<a class="jxr_linenumber" name="L557" href="#L557">557</a>                         GoalType.MAXIMIZE, <strong class="jxr_keyword">new</strong> NonNegativeConstraint(false));
<a class="jxr_linenumber" name="L558" href="#L558">558</a>     }
<a class="jxr_linenumber" name="L559" href="#L559">559</a> 
<a class="jxr_linenumber" name="L560" href="#L560">560</a>     @Test(expected = UnboundedSolutionException.<strong class="jxr_keyword">class</strong>)
<a class="jxr_linenumber" name="L561" href="#L561">561</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testUnboundedSolution() {
<a class="jxr_linenumber" name="L562" href="#L562">562</a>         LinearObjectiveFunction f = <strong class="jxr_keyword">new</strong> LinearObjectiveFunction(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 15, 10 }, 0);
<a class="jxr_linenumber" name="L563" href="#L563">563</a>         Collection&lt;LinearConstraint&gt; constraints = <strong class="jxr_keyword">new</strong> ArrayList&lt;LinearConstraint&gt;();
<a class="jxr_linenumber" name="L564" href="#L564">564</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 1, 0 }, Relationship.EQ, 2));
<a class="jxr_linenumber" name="L565" href="#L565">565</a> 
<a class="jxr_linenumber" name="L566" href="#L566">566</a>         SimplexSolver solver = <strong class="jxr_keyword">new</strong> SimplexSolver();
<a class="jxr_linenumber" name="L567" href="#L567">567</a>         solver.optimize(DEFAULT_MAX_ITER, f, <strong class="jxr_keyword">new</strong> LinearConstraintSet(constraints),
<a class="jxr_linenumber" name="L568" href="#L568">568</a>                         GoalType.MAXIMIZE, <strong class="jxr_keyword">new</strong> NonNegativeConstraint(false));
<a class="jxr_linenumber" name="L569" href="#L569">569</a>     }
<a class="jxr_linenumber" name="L570" href="#L570">570</a> 
<a class="jxr_linenumber" name="L571" href="#L571">571</a>     @Test
<a class="jxr_linenumber" name="L572" href="#L572">572</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testRestrictVariablesToNonNegative() {
<a class="jxr_linenumber" name="L573" href="#L573">573</a>         LinearObjectiveFunction f = <strong class="jxr_keyword">new</strong> LinearObjectiveFunction(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 409, 523, 70, 204, 339 }, 0);
<a class="jxr_linenumber" name="L574" href="#L574">574</a>         Collection&lt;LinearConstraint&gt; constraints = <strong class="jxr_keyword">new</strong> ArrayList&lt;LinearConstraint&gt;();
<a class="jxr_linenumber" name="L575" href="#L575">575</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {    43,   56, 345,  56,    5 }, Relationship.LEQ,  4567456));
<a class="jxr_linenumber" name="L576" href="#L576">576</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {    12,   45,   7,  56,   23 }, Relationship.LEQ,    56454));
<a class="jxr_linenumber" name="L577" href="#L577">577</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {     8,  768,   0,  34, 7456 }, Relationship.LEQ,  1923421));
<a class="jxr_linenumber" name="L578" href="#L578">578</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 12342, 2342,  34, 678, 2342 }, Relationship.GEQ,     4356));
<a class="jxr_linenumber" name="L579" href="#L579">579</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {    45,  678,  76,  52,   23 }, Relationship.EQ,    456356));
<a class="jxr_linenumber" name="L580" href="#L580">580</a> 
<a class="jxr_linenumber" name="L581" href="#L581">581</a>         SimplexSolver solver = <strong class="jxr_keyword">new</strong> SimplexSolver();
<a class="jxr_linenumber" name="L582" href="#L582">582</a>         PointValuePair solution = solver.optimize(DEFAULT_MAX_ITER, f, <strong class="jxr_keyword">new</strong> LinearConstraintSet(constraints),
<a class="jxr_linenumber" name="L583" href="#L583">583</a>                                                   GoalType.MAXIMIZE, <strong class="jxr_keyword">new</strong> NonNegativeConstraint(<strong class="jxr_keyword">true</strong>));
<a class="jxr_linenumber" name="L584" href="#L584">584</a>         Assert.assertEquals(2902.92783505155, solution.getPoint()[0], .0000001);
<a class="jxr_linenumber" name="L585" href="#L585">585</a>         Assert.assertEquals(480.419243986254, solution.getPoint()[1], .0000001);
<a class="jxr_linenumber" name="L586" href="#L586">586</a>         Assert.assertEquals(0.0, solution.getPoint()[2], .0000001);
<a class="jxr_linenumber" name="L587" href="#L587">587</a>         Assert.assertEquals(0.0, solution.getPoint()[3], .0000001);
<a class="jxr_linenumber" name="L588" href="#L588">588</a>         Assert.assertEquals(0.0, solution.getPoint()[4], .0000001);
<a class="jxr_linenumber" name="L589" href="#L589">589</a>         Assert.assertEquals(1438556.7491409, solution.getValue(), .0000001);
<a class="jxr_linenumber" name="L590" href="#L590">590</a>     }
<a class="jxr_linenumber" name="L591" href="#L591">591</a> 
<a class="jxr_linenumber" name="L592" href="#L592">592</a>     @Test
<a class="jxr_linenumber" name="L593" href="#L593">593</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testEpsilon() {
<a class="jxr_linenumber" name="L594" href="#L594">594</a>       LinearObjectiveFunction f =
<a class="jxr_linenumber" name="L595" href="#L595">595</a>           <strong class="jxr_keyword">new</strong> LinearObjectiveFunction(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 10, 5, 1 }, 0);
<a class="jxr_linenumber" name="L596" href="#L596">596</a>       Collection&lt;LinearConstraint&gt; constraints = <strong class="jxr_keyword">new</strong> ArrayList&lt;LinearConstraint&gt;();
<a class="jxr_linenumber" name="L597" href="#L597">597</a>       constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {  9, 8, 0 }, Relationship.EQ,  17));
<a class="jxr_linenumber" name="L598" href="#L598">598</a>       constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {  0, 7, 8 }, Relationship.LEQ,  7));
<a class="jxr_linenumber" name="L599" href="#L599">599</a>       constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 10, 0, 2 }, Relationship.LEQ, 10));
<a class="jxr_linenumber" name="L600" href="#L600">600</a> 
<a class="jxr_linenumber" name="L601" href="#L601">601</a>       SimplexSolver solver = <strong class="jxr_keyword">new</strong> SimplexSolver();
<a class="jxr_linenumber" name="L602" href="#L602">602</a>       PointValuePair solution = solver.optimize(DEFAULT_MAX_ITER, f, <strong class="jxr_keyword">new</strong> LinearConstraintSet(constraints),
<a class="jxr_linenumber" name="L603" href="#L603">603</a>                                                 GoalType.MAXIMIZE, <strong class="jxr_keyword">new</strong> NonNegativeConstraint(false));
<a class="jxr_linenumber" name="L604" href="#L604">604</a>       Assert.assertEquals(1.0, solution.getPoint()[0], 0.0);
<a class="jxr_linenumber" name="L605" href="#L605">605</a>       Assert.assertEquals(1.0, solution.getPoint()[1], 0.0);
<a class="jxr_linenumber" name="L606" href="#L606">606</a>       Assert.assertEquals(0.0, solution.getPoint()[2], 0.0);
<a class="jxr_linenumber" name="L607" href="#L607">607</a>       Assert.assertEquals(15.0, solution.getValue(), 0.0);
<a class="jxr_linenumber" name="L608" href="#L608">608</a>   }
<a class="jxr_linenumber" name="L609" href="#L609">609</a> 
<a class="jxr_linenumber" name="L610" href="#L610">610</a>     @Test
<a class="jxr_linenumber" name="L611" href="#L611">611</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testTrivialModel() {
<a class="jxr_linenumber" name="L612" href="#L612">612</a>         LinearObjectiveFunction f = <strong class="jxr_keyword">new</strong> LinearObjectiveFunction(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 1, 1 }, 0);
<a class="jxr_linenumber" name="L613" href="#L613">613</a>         Collection&lt;LinearConstraint&gt; constraints = <strong class="jxr_keyword">new</strong> ArrayList&lt;LinearConstraint&gt;();
<a class="jxr_linenumber" name="L614" href="#L614">614</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 1, 1 }, Relationship.EQ,  0));
<a class="jxr_linenumber" name="L615" href="#L615">615</a> 
<a class="jxr_linenumber" name="L616" href="#L616">616</a>         SimplexSolver solver = <strong class="jxr_keyword">new</strong> SimplexSolver();
<a class="jxr_linenumber" name="L617" href="#L617">617</a>         PointValuePair solution = solver.optimize(DEFAULT_MAX_ITER, f, <strong class="jxr_keyword">new</strong> LinearConstraintSet(constraints),
<a class="jxr_linenumber" name="L618" href="#L618">618</a>                                                   GoalType.MAXIMIZE, <strong class="jxr_keyword">new</strong> NonNegativeConstraint(<strong class="jxr_keyword">true</strong>));
<a class="jxr_linenumber" name="L619" href="#L619">619</a>         Assert.assertEquals(0, solution.getValue(), .0000001);
<a class="jxr_linenumber" name="L620" href="#L620">620</a>     }
<a class="jxr_linenumber" name="L621" href="#L621">621</a> 
<a class="jxr_linenumber" name="L622" href="#L622">622</a>     @Test
<a class="jxr_linenumber" name="L623" href="#L623">623</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testLargeModel() {
<a class="jxr_linenumber" name="L624" href="#L624">624</a>         <strong class="jxr_keyword">double</strong>[] objective = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {
<a class="jxr_linenumber" name="L625" href="#L625">625</a>                                            1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
<a class="jxr_linenumber" name="L626" href="#L626">626</a>                                            1, 1, 12, 1, 1, 1, 1, 1, 1, 1,
<a class="jxr_linenumber" name="L627" href="#L627">627</a>                                            1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
<a class="jxr_linenumber" name="L628" href="#L628">628</a>                                            1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
<a class="jxr_linenumber" name="L629" href="#L629">629</a>                                            12, 1, 1, 1, 1, 1, 1, 1, 1, 1,
<a class="jxr_linenumber" name="L630" href="#L630">630</a>                                            1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
<a class="jxr_linenumber" name="L631" href="#L631">631</a>                                            1, 1, 1, 1, 1, 1, 1, 1, 12, 1,
<a class="jxr_linenumber" name="L632" href="#L632">632</a>                                            1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
<a class="jxr_linenumber" name="L633" href="#L633">633</a>                                            1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
<a class="jxr_linenumber" name="L634" href="#L634">634</a>                                            1, 1, 1, 1, 1, 1, 12, 1, 1, 1,
<a class="jxr_linenumber" name="L635" href="#L635">635</a>                                            1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
<a class="jxr_linenumber" name="L636" href="#L636">636</a>                                            1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
<a class="jxr_linenumber" name="L637" href="#L637">637</a>                                            1, 1, 1, 1, 12, 1, 1, 1, 1, 1,
<a class="jxr_linenumber" name="L638" href="#L638">638</a>                                            1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
<a class="jxr_linenumber" name="L639" href="#L639">639</a>                                            1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
<a class="jxr_linenumber" name="L640" href="#L640">640</a>                                            1, 1, 12, 1, 1, 1, 1, 1, 1, 1,
<a class="jxr_linenumber" name="L641" href="#L641">641</a>                                            1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
<a class="jxr_linenumber" name="L642" href="#L642">642</a>                                            1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
<a class="jxr_linenumber" name="L643" href="#L643">643</a>                                            1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
<a class="jxr_linenumber" name="L644" href="#L644">644</a>                                            1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
<a class="jxr_linenumber" name="L645" href="#L645">645</a>                                            1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
<a class="jxr_linenumber" name="L646" href="#L646">646</a>                                            1, 1, 1, 1, 1, 1};
<a class="jxr_linenumber" name="L647" href="#L647">647</a> 
<a class="jxr_linenumber" name="L648" href="#L648">648</a>         LinearObjectiveFunction f = <strong class="jxr_keyword">new</strong> LinearObjectiveFunction(objective, 0);
<a class="jxr_linenumber" name="L649" href="#L649">649</a>         Collection&lt;LinearConstraint&gt; constraints = <strong class="jxr_keyword">new</strong> ArrayList&lt;LinearConstraint&gt;();
<a class="jxr_linenumber" name="L650" href="#L650">650</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x0 + x1 + x2 + x3 - x12 = 0"</span>));
<a class="jxr_linenumber" name="L651" href="#L651">651</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x4 + x5 + x6 + x7 + x8 + x9 + x10 + x11 - x13 = 0"</span>));
<a class="jxr_linenumber" name="L652" href="#L652">652</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x4 + x5 + x6 + x7 + x8 + x9 + x10 + x11 &gt;= 49"</span>));
<a class="jxr_linenumber" name="L653" href="#L653">653</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x0 + x1 + x2 + x3 &gt;= 42"</span>));
<a class="jxr_linenumber" name="L654" href="#L654">654</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x14 + x15 + x16 + x17 - x26 = 0"</span>));
<a class="jxr_linenumber" name="L655" href="#L655">655</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x18 + x19 + x20 + x21 + x22 + x23 + x24 + x25 - x27 = 0"</span>));
<a class="jxr_linenumber" name="L656" href="#L656">656</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x14 + x15 + x16 + x17 - x12 = 0"</span>));
<a class="jxr_linenumber" name="L657" href="#L657">657</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x18 + x19 + x20 + x21 + x22 + x23 + x24 + x25 - x13 = 0"</span>));
<a class="jxr_linenumber" name="L658" href="#L658">658</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x28 + x29 + x30 + x31 - x40 = 0"</span>));
<a class="jxr_linenumber" name="L659" href="#L659">659</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x32 + x33 + x34 + x35 + x36 + x37 + x38 + x39 - x41 = 0"</span>));
<a class="jxr_linenumber" name="L660" href="#L660">660</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x32 + x33 + x34 + x35 + x36 + x37 + x38 + x39 &gt;= 49"</span>));
<a class="jxr_linenumber" name="L661" href="#L661">661</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x28 + x29 + x30 + x31 &gt;= 42"</span>));
<a class="jxr_linenumber" name="L662" href="#L662">662</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x42 + x43 + x44 + x45 - x54 = 0"</span>));
<a class="jxr_linenumber" name="L663" href="#L663">663</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x46 + x47 + x48 + x49 + x50 + x51 + x52 + x53 - x55 = 0"</span>));
<a class="jxr_linenumber" name="L664" href="#L664">664</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x42 + x43 + x44 + x45 - x40 = 0"</span>));
<a class="jxr_linenumber" name="L665" href="#L665">665</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x46 + x47 + x48 + x49 + x50 + x51 + x52 + x53 - x41 = 0"</span>));
<a class="jxr_linenumber" name="L666" href="#L666">666</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x56 + x57 + x58 + x59 - x68 = 0"</span>));
<a class="jxr_linenumber" name="L667" href="#L667">667</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x60 + x61 + x62 + x63 + x64 + x65 + x66 + x67 - x69 = 0"</span>));
<a class="jxr_linenumber" name="L668" href="#L668">668</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x60 + x61 + x62 + x63 + x64 + x65 + x66 + x67 &gt;= 51"</span>));
<a class="jxr_linenumber" name="L669" href="#L669">669</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x56 + x57 + x58 + x59 &gt;= 44"</span>));
<a class="jxr_linenumber" name="L670" href="#L670">670</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x70 + x71 + x72 + x73 - x82 = 0"</span>));
<a class="jxr_linenumber" name="L671" href="#L671">671</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x74 + x75 + x76 + x77 + x78 + x79 + x80 + x81 - x83 = 0"</span>));
<a class="jxr_linenumber" name="L672" href="#L672">672</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x70 + x71 + x72 + x73 - x68 = 0"</span>));
<a class="jxr_linenumber" name="L673" href="#L673">673</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x74 + x75 + x76 + x77 + x78 + x79 + x80 + x81 - x69 = 0"</span>));
<a class="jxr_linenumber" name="L674" href="#L674">674</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x84 + x85 + x86 + x87 - x96 = 0"</span>));
<a class="jxr_linenumber" name="L675" href="#L675">675</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x88 + x89 + x90 + x91 + x92 + x93 + x94 + x95 - x97 = 0"</span>));
<a class="jxr_linenumber" name="L676" href="#L676">676</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x88 + x89 + x90 + x91 + x92 + x93 + x94 + x95 &gt;= 51"</span>));
<a class="jxr_linenumber" name="L677" href="#L677">677</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x84 + x85 + x86 + x87 &gt;= 44"</span>));
<a class="jxr_linenumber" name="L678" href="#L678">678</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x98 + x99 + x100 + x101 - x110 = 0"</span>));
<a class="jxr_linenumber" name="L679" href="#L679">679</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x102 + x103 + x104 + x105 + x106 + x107 + x108 + x109 - x111 = 0"</span>));
<a class="jxr_linenumber" name="L680" href="#L680">680</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x98 + x99 + x100 + x101 - x96 = 0"</span>));
<a class="jxr_linenumber" name="L681" href="#L681">681</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x102 + x103 + x104 + x105 + x106 + x107 + x108 + x109 - x97 = 0"</span>));
<a class="jxr_linenumber" name="L682" href="#L682">682</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x112 + x113 + x114 + x115 - x124 = 0"</span>));
<a class="jxr_linenumber" name="L683" href="#L683">683</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x116 + x117 + x118 + x119 + x120 + x121 + x122 + x123 - x125 = 0"</span>));
<a class="jxr_linenumber" name="L684" href="#L684">684</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x116 + x117 + x118 + x119 + x120 + x121 + x122 + x123 &gt;= 49"</span>));
<a class="jxr_linenumber" name="L685" href="#L685">685</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x112 + x113 + x114 + x115 &gt;= 42"</span>));
<a class="jxr_linenumber" name="L686" href="#L686">686</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x126 + x127 + x128 + x129 - x138 = 0"</span>));
<a class="jxr_linenumber" name="L687" href="#L687">687</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x130 + x131 + x132 + x133 + x134 + x135 + x136 + x137 - x139 = 0"</span>));
<a class="jxr_linenumber" name="L688" href="#L688">688</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x126 + x127 + x128 + x129 - x124 = 0"</span>));
<a class="jxr_linenumber" name="L689" href="#L689">689</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x130 + x131 + x132 + x133 + x134 + x135 + x136 + x137 - x125 = 0"</span>));
<a class="jxr_linenumber" name="L690" href="#L690">690</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x140 + x141 + x142 + x143 - x152 = 0"</span>));
<a class="jxr_linenumber" name="L691" href="#L691">691</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x144 + x145 + x146 + x147 + x148 + x149 + x150 + x151 - x153 = 0"</span>));
<a class="jxr_linenumber" name="L692" href="#L692">692</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x144 + x145 + x146 + x147 + x148 + x149 + x150 + x151 &gt;= 59"</span>));
<a class="jxr_linenumber" name="L693" href="#L693">693</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x140 + x141 + x142 + x143 &gt;= 42"</span>));
<a class="jxr_linenumber" name="L694" href="#L694">694</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x154 + x155 + x156 + x157 - x166 = 0"</span>));
<a class="jxr_linenumber" name="L695" href="#L695">695</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x158 + x159 + x160 + x161 + x162 + x163 + x164 + x165 - x167 = 0"</span>));
<a class="jxr_linenumber" name="L696" href="#L696">696</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x154 + x155 + x156 + x157 - x152 = 0"</span>));
<a class="jxr_linenumber" name="L697" href="#L697">697</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x158 + x159 + x160 + x161 + x162 + x163 + x164 + x165 - x153 = 0"</span>));
<a class="jxr_linenumber" name="L698" href="#L698">698</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x83 + x82 - x168 = 0"</span>));
<a class="jxr_linenumber" name="L699" href="#L699">699</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x111 + x110 - x169 = 0"</span>));
<a class="jxr_linenumber" name="L700" href="#L700">700</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x170 - x182 = 0"</span>));
<a class="jxr_linenumber" name="L701" href="#L701">701</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x171 - x183 = 0"</span>));
<a class="jxr_linenumber" name="L702" href="#L702">702</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x172 - x184 = 0"</span>));
<a class="jxr_linenumber" name="L703" href="#L703">703</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x173 - x185 = 0"</span>));
<a class="jxr_linenumber" name="L704" href="#L704">704</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x174 - x186 = 0"</span>));
<a class="jxr_linenumber" name="L705" href="#L705">705</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x175 + x176 - x187 = 0"</span>));
<a class="jxr_linenumber" name="L706" href="#L706">706</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x177 - x188 = 0"</span>));
<a class="jxr_linenumber" name="L707" href="#L707">707</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x178 - x189 = 0"</span>));
<a class="jxr_linenumber" name="L708" href="#L708">708</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x179 - x190 = 0"</span>));
<a class="jxr_linenumber" name="L709" href="#L709">709</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x180 - x191 = 0"</span>));
<a class="jxr_linenumber" name="L710" href="#L710">710</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x181 - x192 = 0"</span>));
<a class="jxr_linenumber" name="L711" href="#L711">711</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x170 - x26 = 0"</span>));
<a class="jxr_linenumber" name="L712" href="#L712">712</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x171 - x27 = 0"</span>));
<a class="jxr_linenumber" name="L713" href="#L713">713</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x172 - x54 = 0"</span>));
<a class="jxr_linenumber" name="L714" href="#L714">714</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x173 - x55 = 0"</span>));
<a class="jxr_linenumber" name="L715" href="#L715">715</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x174 - x168 = 0"</span>));
<a class="jxr_linenumber" name="L716" href="#L716">716</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x177 - x169 = 0"</span>));
<a class="jxr_linenumber" name="L717" href="#L717">717</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x178 - x138 = 0"</span>));
<a class="jxr_linenumber" name="L718" href="#L718">718</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x179 - x139 = 0"</span>));
<a class="jxr_linenumber" name="L719" href="#L719">719</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x180 - x166 = 0"</span>));
<a class="jxr_linenumber" name="L720" href="#L720">720</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x181 - x167 = 0"</span>));
<a class="jxr_linenumber" name="L721" href="#L721">721</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x193 - x205 = 0"</span>));
<a class="jxr_linenumber" name="L722" href="#L722">722</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x194 - x206 = 0"</span>));
<a class="jxr_linenumber" name="L723" href="#L723">723</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x195 - x207 = 0"</span>));
<a class="jxr_linenumber" name="L724" href="#L724">724</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x196 - x208 = 0"</span>));
<a class="jxr_linenumber" name="L725" href="#L725">725</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x197 - x209 = 0"</span>));
<a class="jxr_linenumber" name="L726" href="#L726">726</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x198 + x199 - x210 = 0"</span>));
<a class="jxr_linenumber" name="L727" href="#L727">727</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x200 - x211 = 0"</span>));
<a class="jxr_linenumber" name="L728" href="#L728">728</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x201 - x212 = 0"</span>));
<a class="jxr_linenumber" name="L729" href="#L729">729</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x202 - x213 = 0"</span>));
<a class="jxr_linenumber" name="L730" href="#L730">730</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x203 - x214 = 0"</span>));
<a class="jxr_linenumber" name="L731" href="#L731">731</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x204 - x215 = 0"</span>));
<a class="jxr_linenumber" name="L732" href="#L732">732</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x193 - x182 = 0"</span>));
<a class="jxr_linenumber" name="L733" href="#L733">733</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x194 - x183 = 0"</span>));
<a class="jxr_linenumber" name="L734" href="#L734">734</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x195 - x184 = 0"</span>));
<a class="jxr_linenumber" name="L735" href="#L735">735</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x196 - x185 = 0"</span>));
<a class="jxr_linenumber" name="L736" href="#L736">736</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x197 - x186 = 0"</span>));
<a class="jxr_linenumber" name="L737" href="#L737">737</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x198 + x199 - x187 = 0"</span>));
<a class="jxr_linenumber" name="L738" href="#L738">738</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x200 - x188 = 0"</span>));
<a class="jxr_linenumber" name="L739" href="#L739">739</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x201 - x189 = 0"</span>));
<a class="jxr_linenumber" name="L740" href="#L740">740</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x202 - x190 = 0"</span>));
<a class="jxr_linenumber" name="L741" href="#L741">741</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x203 - x191 = 0"</span>));
<a class="jxr_linenumber" name="L742" href="#L742">742</a>         constraints.add(equationFromString(objective.length, <span class="jxr_string">"x204 - x192 = 0"</span>));
<a class="jxr_linenumber" name="L743" href="#L743">743</a> 
<a class="jxr_linenumber" name="L744" href="#L744">744</a>         SimplexSolver solver = <strong class="jxr_keyword">new</strong> SimplexSolver();
<a class="jxr_linenumber" name="L745" href="#L745">745</a>         PointValuePair solution = solver.optimize(DEFAULT_MAX_ITER, f, <strong class="jxr_keyword">new</strong> LinearConstraintSet(constraints),
<a class="jxr_linenumber" name="L746" href="#L746">746</a>                                                   GoalType.MINIMIZE, <strong class="jxr_keyword">new</strong> NonNegativeConstraint(<strong class="jxr_keyword">true</strong>));
<a class="jxr_linenumber" name="L747" href="#L747">747</a>         Assert.assertEquals(7518.0, solution.getValue(), .0000001);
<a class="jxr_linenumber" name="L748" href="#L748">748</a>     }
<a class="jxr_linenumber" name="L749" href="#L749">749</a> 
<a class="jxr_linenumber" name="L750" href="#L750">750</a>     @Test
<a class="jxr_linenumber" name="L751" href="#L751">751</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testSolutionCallback() {
<a class="jxr_linenumber" name="L752" href="#L752">752</a>         <em class="jxr_comment">// re-use the problem from testcase for MATH-288</em>
<a class="jxr_linenumber" name="L753" href="#L753">753</a>         <em class="jxr_comment">// it normally requires 5 iterations</em>
<a class="jxr_linenumber" name="L754" href="#L754">754</a> 
<a class="jxr_linenumber" name="L755" href="#L755">755</a>         LinearObjectiveFunction f = <strong class="jxr_keyword">new</strong> LinearObjectiveFunction(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 7, 3, 0, 0 }, 0 );
<a class="jxr_linenumber" name="L756" href="#L756">756</a> 
<a class="jxr_linenumber" name="L757" href="#L757">757</a>         List&lt;LinearConstraint&gt; constraints = <strong class="jxr_keyword">new</strong> ArrayList&lt;LinearConstraint&gt;();
<a class="jxr_linenumber" name="L758" href="#L758">758</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 3, 0, -5, 0 }, Relationship.LEQ, 0.0));
<a class="jxr_linenumber" name="L759" href="#L759">759</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 2, 0, 0, -5 }, Relationship.LEQ, 0.0));
<a class="jxr_linenumber" name="L760" href="#L760">760</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0, 3, 0, -5 }, Relationship.LEQ, 0.0));
<a class="jxr_linenumber" name="L761" href="#L761">761</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 1, 0, 0, 0 }, Relationship.LEQ, 1.0));
<a class="jxr_linenumber" name="L762" href="#L762">762</a>         constraints.add(<strong class="jxr_keyword">new</strong> LinearConstraint(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] { 0, 1, 0, 0 }, Relationship.LEQ, 1.0));
<a class="jxr_linenumber" name="L763" href="#L763">763</a> 
<a class="jxr_linenumber" name="L764" href="#L764">764</a>         <strong class="jxr_keyword">final</strong> SimplexSolver solver = <strong class="jxr_keyword">new</strong> SimplexSolver();
<a class="jxr_linenumber" name="L765" href="#L765">765</a>         <strong class="jxr_keyword">final</strong> SolutionCallback callback = <strong class="jxr_keyword">new</strong> SolutionCallback();
<a class="jxr_linenumber" name="L766" href="#L766">766</a> 
<a class="jxr_linenumber" name="L767" href="#L767">767</a>         Assert.assertNull(callback.getSolution());
<a class="jxr_linenumber" name="L768" href="#L768">768</a>         Assert.assertFalse(callback.isSolutionOptimal());
<a class="jxr_linenumber" name="L769" href="#L769">769</a> 
<a class="jxr_linenumber" name="L770" href="#L770">770</a>         <strong class="jxr_keyword">try</strong> {
<a class="jxr_linenumber" name="L771" href="#L771">771</a>             solver.optimize(<strong class="jxr_keyword">new</strong> MaxIter(3), f, <strong class="jxr_keyword">new</strong> LinearConstraintSet(constraints),
<a class="jxr_linenumber" name="L772" href="#L772">772</a>                             GoalType.MAXIMIZE, <strong class="jxr_keyword">new</strong> NonNegativeConstraint(<strong class="jxr_keyword">true</strong>), callback);
<a class="jxr_linenumber" name="L773" href="#L773">773</a>             Assert.fail(<span class="jxr_string">"expected TooManyIterationsException"</span>);
<a class="jxr_linenumber" name="L774" href="#L774">774</a>         } <strong class="jxr_keyword">catch</strong> (TooManyIterationsException ex) {
<a class="jxr_linenumber" name="L775" href="#L775">775</a>             <em class="jxr_comment">// expected</em>
<a class="jxr_linenumber" name="L776" href="#L776">776</a>         }
<a class="jxr_linenumber" name="L777" href="#L777">777</a> 
<a class="jxr_linenumber" name="L778" href="#L778">778</a>         <strong class="jxr_keyword">final</strong> PointValuePair solution = callback.getSolution();
<a class="jxr_linenumber" name="L779" href="#L779">779</a>         Assert.assertNotNull(solution);
<a class="jxr_linenumber" name="L780" href="#L780">780</a>         Assert.assertTrue(validSolution(solution, constraints, 1e-4));
<a class="jxr_linenumber" name="L781" href="#L781">781</a>         Assert.assertFalse(callback.isSolutionOptimal());
<a class="jxr_linenumber" name="L782" href="#L782">782</a>         <em class="jxr_comment">// the solution is clearly not optimal: optimal = 10.0</em>
<a class="jxr_linenumber" name="L783" href="#L783">783</a>         Assert.assertEquals(7.0, solution.getValue(), 1e-4);
<a class="jxr_linenumber" name="L784" href="#L784">784</a>     }
<a class="jxr_linenumber" name="L785" href="#L785">785</a> 
<a class="jxr_linenumber" name="L786" href="#L786">786</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L787" href="#L787">787</a> <em class="jxr_javadoccomment">     * Converts a test string to a {@link LinearConstraint}.</em>
<a class="jxr_linenumber" name="L788" href="#L788">788</a> <em class="jxr_javadoccomment">     * Ex: x0 + x1 + x2 + x3 - x12 = 0</em>
<a class="jxr_linenumber" name="L789" href="#L789">789</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L790" href="#L790">790</a>     <strong class="jxr_keyword">private</strong> LinearConstraint equationFromString(<strong class="jxr_keyword">int</strong> numCoefficients, String s) {
<a class="jxr_linenumber" name="L791" href="#L791">791</a>         Relationship relationship;
<a class="jxr_linenumber" name="L792" href="#L792">792</a>         <strong class="jxr_keyword">if</strong> (s.contains(<span class="jxr_string">"&gt;="</span>)) {
<a class="jxr_linenumber" name="L793" href="#L793">793</a>             relationship = Relationship.GEQ;
<a class="jxr_linenumber" name="L794" href="#L794">794</a>         } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (s.contains(<span class="jxr_string">"&lt;="</span>)) {
<a class="jxr_linenumber" name="L795" href="#L795">795</a>             relationship = Relationship.LEQ;
<a class="jxr_linenumber" name="L796" href="#L796">796</a>         } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (s.contains(<span class="jxr_string">"="</span>)) {
<a class="jxr_linenumber" name="L797" href="#L797">797</a>             relationship = Relationship.EQ;
<a class="jxr_linenumber" name="L798" href="#L798">798</a>         } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L799" href="#L799">799</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> IllegalArgumentException();
<a class="jxr_linenumber" name="L800" href="#L800">800</a>         }
<a class="jxr_linenumber" name="L801" href="#L801">801</a> 
<a class="jxr_linenumber" name="L802" href="#L802">802</a>         String[] equationParts = s.split(<span class="jxr_string">"[&gt;|&lt;]?="</span>);
<a class="jxr_linenumber" name="L803" href="#L803">803</a>         <strong class="jxr_keyword">double</strong> rhs = Double.parseDouble(equationParts[1].trim());
<a class="jxr_linenumber" name="L804" href="#L804">804</a> 
<a class="jxr_linenumber" name="L805" href="#L805">805</a>         <strong class="jxr_keyword">double</strong>[] lhs = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[numCoefficients];
<a class="jxr_linenumber" name="L806" href="#L806">806</a>         String left = equationParts[0].replaceAll(<span class="jxr_string">" ?x"</span>, <span class="jxr_string">""</span>);
<a class="jxr_linenumber" name="L807" href="#L807">807</a>         String[] coefficients = left.split(<span class="jxr_string">" "</span>);
<a class="jxr_linenumber" name="L808" href="#L808">808</a>         <strong class="jxr_keyword">for</strong> (String coefficient : coefficients) {
<a class="jxr_linenumber" name="L809" href="#L809">809</a>             <strong class="jxr_keyword">double</strong> value = coefficient.charAt(0) == '-' ? -1 : 1;
<a class="jxr_linenumber" name="L810" href="#L810">810</a>             <strong class="jxr_keyword">int</strong> index = Integer.parseInt(coefficient.replaceFirst(<span class="jxr_string">"[+|-]"</span>, <span class="jxr_string">""</span>).trim());
<a class="jxr_linenumber" name="L811" href="#L811">811</a>             lhs[index] = value;
<a class="jxr_linenumber" name="L812" href="#L812">812</a>         }
<a class="jxr_linenumber" name="L813" href="#L813">813</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> LinearConstraint(lhs, relationship, rhs);
<a class="jxr_linenumber" name="L814" href="#L814">814</a>     }
<a class="jxr_linenumber" name="L815" href="#L815">815</a> 
<a class="jxr_linenumber" name="L816" href="#L816">816</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">boolean</strong> validSolution(PointValuePair solution, List&lt;LinearConstraint&gt; constraints, <strong class="jxr_keyword">double</strong> epsilon) {
<a class="jxr_linenumber" name="L817" href="#L817">817</a>         <strong class="jxr_keyword">double</strong>[] vals = solution.getPoint();
<a class="jxr_linenumber" name="L818" href="#L818">818</a>         <strong class="jxr_keyword">for</strong> (LinearConstraint c : constraints) {
<a class="jxr_linenumber" name="L819" href="#L819">819</a>             <strong class="jxr_keyword">double</strong>[] coeffs = c.getCoefficients().toArray();
<a class="jxr_linenumber" name="L820" href="#L820">820</a>             <strong class="jxr_keyword">double</strong> result = 0.0d;
<a class="jxr_linenumber" name="L821" href="#L821">821</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; vals.length; i++) {
<a class="jxr_linenumber" name="L822" href="#L822">822</a>                 result += vals[i] * coeffs[i];
<a class="jxr_linenumber" name="L823" href="#L823">823</a>             }
<a class="jxr_linenumber" name="L824" href="#L824">824</a> 
<a class="jxr_linenumber" name="L825" href="#L825">825</a>             <strong class="jxr_keyword">switch</strong> (c.getRelationship()) {
<a class="jxr_linenumber" name="L826" href="#L826">826</a>             <strong class="jxr_keyword">case</strong> EQ:
<a class="jxr_linenumber" name="L827" href="#L827">827</a>                 <strong class="jxr_keyword">if</strong> (!Precision.equals(result, c.getValue(), epsilon)) {
<a class="jxr_linenumber" name="L828" href="#L828">828</a>                     <strong class="jxr_keyword">return</strong> false;
<a class="jxr_linenumber" name="L829" href="#L829">829</a>                 }
<a class="jxr_linenumber" name="L830" href="#L830">830</a>                 <strong class="jxr_keyword">break</strong>;
<a class="jxr_linenumber" name="L831" href="#L831">831</a> 
<a class="jxr_linenumber" name="L832" href="#L832">832</a>             <strong class="jxr_keyword">case</strong> GEQ:
<a class="jxr_linenumber" name="L833" href="#L833">833</a>                 <strong class="jxr_keyword">if</strong> (Precision.compareTo(result, c.getValue(), epsilon) &lt; 0) {
<a class="jxr_linenumber" name="L834" href="#L834">834</a>                     <strong class="jxr_keyword">return</strong> false;
<a class="jxr_linenumber" name="L835" href="#L835">835</a>                 }
<a class="jxr_linenumber" name="L836" href="#L836">836</a>                 <strong class="jxr_keyword">break</strong>;
<a class="jxr_linenumber" name="L837" href="#L837">837</a> 
<a class="jxr_linenumber" name="L838" href="#L838">838</a>             <strong class="jxr_keyword">case</strong> LEQ:
<a class="jxr_linenumber" name="L839" href="#L839">839</a>                 <strong class="jxr_keyword">if</strong> (Precision.compareTo(result, c.getValue(), epsilon) &gt; 0) {
<a class="jxr_linenumber" name="L840" href="#L840">840</a>                     <strong class="jxr_keyword">return</strong> false;
<a class="jxr_linenumber" name="L841" href="#L841">841</a>                 }
<a class="jxr_linenumber" name="L842" href="#L842">842</a>                 <strong class="jxr_keyword">break</strong>;
<a class="jxr_linenumber" name="L843" href="#L843">843</a>             }
<a class="jxr_linenumber" name="L844" href="#L844">844</a>         }
<a class="jxr_linenumber" name="L845" href="#L845">845</a> 
<a class="jxr_linenumber" name="L846" href="#L846">846</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">true</strong>;
<a class="jxr_linenumber" name="L847" href="#L847">847</a>     }
<a class="jxr_linenumber" name="L848" href="#L848">848</a> 
<a class="jxr_linenumber" name="L849" href="#L849">849</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2003&#x2013;2016 <a href="http://www.apache.org/">The Apache Software Foundation</a>. All rights reserved.</div>
</body>
</html>
