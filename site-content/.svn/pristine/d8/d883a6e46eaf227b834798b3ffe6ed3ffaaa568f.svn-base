<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>ArcsSet xref</title>
<link type="text/css" rel="stylesheet" href="../../../../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../../apidocs/org/apache/commons/math3/geometry/spherical/oned/ArcsSet.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Licensed to the Apache Software Foundation (ASF) under one or more</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> * contributor license agreements.  See the NOTICE file distributed with</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * this work for additional information regarding copyright ownership.</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * The ASF licenses this file to You under the Apache License, Version 2.0</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * (the "License"); you may not use this file except in compliance with</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> * the License.  You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *      <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">package</strong> org.apache.commons.math3.geometry.spherical.oned;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <strong class="jxr_keyword">import</strong> java.util.ArrayList;
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> java.util.Collection;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> java.util.Iterator;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> java.util.List;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <strong class="jxr_keyword">import</strong> java.util.NoSuchElementException;
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.MathIllegalArgumentException;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.MathInternalError;
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.NumberIsTooLargeException;
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.exception.util.LocalizedFormats;
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.geometry.Point;
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.geometry.partitioning.AbstractRegion;
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.geometry.partitioning.BSPTree;
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.geometry.partitioning.BoundaryProjection;
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.geometry.partitioning.Side;
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.geometry.partitioning.SubHyperplane;
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.util.FastMath;
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.util.MathUtils;
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.util.Precision;
<a class="jxr_linenumber" name="L38" href="#L38">38</a>  
<a class="jxr_linenumber" name="L39" href="#L39">39</a>  <em class="jxr_javadoccomment">/** This class represents a region of a circle: a set of arcs.</em>
<a class="jxr_linenumber" name="L40" href="#L40">40</a>  <em class="jxr_javadoccomment"> * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L41" href="#L41">41</a>  <em class="jxr_javadoccomment"> * Note that due to the wrapping around \(2 \pi\), barycenter is</em>
<a class="jxr_linenumber" name="L42" href="#L42">42</a>  <em class="jxr_javadoccomment"> * ill-defined here. It was defined only in order to fulfill</em>
<a class="jxr_linenumber" name="L43" href="#L43">43</a>  <em class="jxr_javadoccomment"> * the requirements of the {@link</em>
<a class="jxr_linenumber" name="L44" href="#L44">44</a>  <em class="jxr_javadoccomment"> * org.apache.commons.math3.geometry.partitioning.Region Region}</em>
<a class="jxr_linenumber" name="L45" href="#L45">45</a>  <em class="jxr_javadoccomment"> * interface, but its use is discouraged.</em>
<a class="jxr_linenumber" name="L46" href="#L46">46</a>  <em class="jxr_javadoccomment"> * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L47" href="#L47">47</a>  <em class="jxr_javadoccomment"> * @since 3.3</em>
<a class="jxr_linenumber" name="L48" href="#L48">48</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L49" href="#L49">49</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/oned/ArcsSet.html">ArcsSet</a> <strong class="jxr_keyword">extends</strong> AbstractRegion&lt;Sphere1D, Sphere1D&gt; <strong class="jxr_keyword">implements</strong> Iterable&lt;<strong class="jxr_keyword">double</strong>[]&gt; {
<a class="jxr_linenumber" name="L50" href="#L50">50</a>  
<a class="jxr_linenumber" name="L51" href="#L51">51</a>      <em class="jxr_javadoccomment">/** Build an arcs set representing the whole circle.</em>
<a class="jxr_linenumber" name="L52" href="#L52">52</a>  <em class="jxr_javadoccomment">     * @param tolerance tolerance below which close sub-arcs are merged together</em>
<a class="jxr_linenumber" name="L53" href="#L53">53</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L54" href="#L54">54</a>      <strong class="jxr_keyword">public</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/oned/ArcsSet.html">ArcsSet</a>(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> tolerance) {
<a class="jxr_linenumber" name="L55" href="#L55">55</a>          <strong class="jxr_keyword">super</strong>(tolerance);
<a class="jxr_linenumber" name="L56" href="#L56">56</a>      }
<a class="jxr_linenumber" name="L57" href="#L57">57</a>  
<a class="jxr_linenumber" name="L58" href="#L58">58</a>      <em class="jxr_javadoccomment">/** Build an arcs set corresponding to a single arc.</em>
<a class="jxr_linenumber" name="L59" href="#L59">59</a>  <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L60" href="#L60">60</a>  <em class="jxr_javadoccomment">     * If either {@code lower} is equals to {@code upper} or</em>
<a class="jxr_linenumber" name="L61" href="#L61">61</a>  <em class="jxr_javadoccomment">     * the interval exceeds \( 2 \pi \), the arc is considered</em>
<a class="jxr_linenumber" name="L62" href="#L62">62</a>  <em class="jxr_javadoccomment">     * to be the full circle and its initial defining boundaries</em>
<a class="jxr_linenumber" name="L63" href="#L63">63</a>  <em class="jxr_javadoccomment">     * will be forgotten. {@code lower} is not allowed to be greater</em>
<a class="jxr_linenumber" name="L64" href="#L64">64</a>  <em class="jxr_javadoccomment">     * than {@code upper} (an exception is thrown in this case).</em>
<a class="jxr_linenumber" name="L65" href="#L65">65</a>  <em class="jxr_javadoccomment">     * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L66" href="#L66">66</a>  <em class="jxr_javadoccomment">     * @param lower lower bound of the arc</em>
<a class="jxr_linenumber" name="L67" href="#L67">67</a>  <em class="jxr_javadoccomment">     * @param upper upper bound of the arc</em>
<a class="jxr_linenumber" name="L68" href="#L68">68</a>  <em class="jxr_javadoccomment">     * @param tolerance tolerance below which close sub-arcs are merged together</em>
<a class="jxr_linenumber" name="L69" href="#L69">69</a>  <em class="jxr_javadoccomment">     * @exception NumberIsTooLargeException if lower is greater than upper</em>
<a class="jxr_linenumber" name="L70" href="#L70">70</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L71" href="#L71">71</a>      <strong class="jxr_keyword">public</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/oned/ArcsSet.html">ArcsSet</a>(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> lower, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> upper, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> tolerance)
<a class="jxr_linenumber" name="L72" href="#L72">72</a>          <strong class="jxr_keyword">throws</strong> <a href="../../../../../../../org/apache/commons/math3/exception/NumberIsTooLargeException.html">NumberIsTooLargeException</a> {
<a class="jxr_linenumber" name="L73" href="#L73">73</a>          <strong class="jxr_keyword">super</strong>(buildTree(lower, upper, tolerance), tolerance);
<a class="jxr_linenumber" name="L74" href="#L74">74</a>      }
<a class="jxr_linenumber" name="L75" href="#L75">75</a>  
<a class="jxr_linenumber" name="L76" href="#L76">76</a>      <em class="jxr_javadoccomment">/** Build an arcs set from an inside/outside BSP tree.</em>
<a class="jxr_linenumber" name="L77" href="#L77">77</a>  <em class="jxr_javadoccomment">     * &lt;p&gt;The leaf nodes of the BSP tree &lt;em&gt;must&lt;/em&gt; have a</em>
<a class="jxr_linenumber" name="L78" href="#L78">78</a>  <em class="jxr_javadoccomment">     * {@code Boolean} attribute representing the inside status of</em>
<a class="jxr_linenumber" name="L79" href="#L79">79</a>  <em class="jxr_javadoccomment">     * the corresponding cell (true for inside cells, false for outside</em>
<a class="jxr_linenumber" name="L80" href="#L80">80</a>  <em class="jxr_javadoccomment">     * cells). In order to avoid building too many small objects, it is</em>
<a class="jxr_linenumber" name="L81" href="#L81">81</a>  <em class="jxr_javadoccomment">     * recommended to use the predefined constants</em>
<a class="jxr_linenumber" name="L82" href="#L82">82</a>  <em class="jxr_javadoccomment">     * {@code Boolean.TRUE} and {@code Boolean.FALSE}&lt;/p&gt;</em>
<a class="jxr_linenumber" name="L83" href="#L83">83</a>  <em class="jxr_javadoccomment">     * @param tree inside/outside BSP tree representing the arcs set</em>
<a class="jxr_linenumber" name="L84" href="#L84">84</a>  <em class="jxr_javadoccomment">     * @param tolerance tolerance below which close sub-arcs are merged together</em>
<a class="jxr_linenumber" name="L85" href="#L85">85</a>  <em class="jxr_javadoccomment">     * @exception InconsistentStateAt2PiWrapping if the tree leaf nodes are not</em>
<a class="jxr_linenumber" name="L86" href="#L86">86</a>  <em class="jxr_javadoccomment">     * consistent across the \( 0, 2 \pi \) crossing</em>
<a class="jxr_linenumber" name="L87" href="#L87">87</a>  <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L88" href="#L88">88</a>      <strong class="jxr_keyword">public</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/oned/ArcsSet.html">ArcsSet</a>(<strong class="jxr_keyword">final</strong> BSPTree&lt;Sphere1D&gt; tree, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> tolerance)
<a class="jxr_linenumber" name="L89" href="#L89">89</a>          <strong class="jxr_keyword">throws</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/oned/ArcsSet.html">InconsistentStateAt2PiWrapping</a> {
<a class="jxr_linenumber" name="L90" href="#L90">90</a>          <strong class="jxr_keyword">super</strong>(tree, tolerance);
<a class="jxr_linenumber" name="L91" href="#L91">91</a>          check2PiConsistency();
<a class="jxr_linenumber" name="L92" href="#L92">92</a>      }
<a class="jxr_linenumber" name="L93" href="#L93">93</a>  
<a class="jxr_linenumber" name="L94" href="#L94">94</a>      <em class="jxr_javadoccomment">/** Build an arcs set from a Boundary REPresentation (B-rep).</em>
<a class="jxr_linenumber" name="L95" href="#L95">95</a>  <em class="jxr_javadoccomment">     * &lt;p&gt;The boundary is provided as a collection of {@link</em>
<a class="jxr_linenumber" name="L96" href="#L96">96</a>  <em class="jxr_javadoccomment">     * SubHyperplane sub-hyperplanes}. Each sub-hyperplane has the</em>
<a class="jxr_linenumber" name="L97" href="#L97">97</a>  <em class="jxr_javadoccomment">     * interior part of the region on its minus side and the exterior on</em>
<a class="jxr_linenumber" name="L98" href="#L98">98</a>  <em class="jxr_javadoccomment">     * its plus side.&lt;/p&gt;</em>
<a class="jxr_linenumber" name="L99" href="#L99">99</a>  <em class="jxr_javadoccomment">     * &lt;p&gt;The boundary elements can be in any order, and can form</em>
<a class="jxr_linenumber" name="L100" href="#L100">100</a> <em class="jxr_javadoccomment">     * several non-connected sets (like for example polygons with holes</em>
<a class="jxr_linenumber" name="L101" href="#L101">101</a> <em class="jxr_javadoccomment">     * or a set of disjoints polyhedrons considered as a whole). In</em>
<a class="jxr_linenumber" name="L102" href="#L102">102</a> <em class="jxr_javadoccomment">     * fact, the elements do not even need to be connected together</em>
<a class="jxr_linenumber" name="L103" href="#L103">103</a> <em class="jxr_javadoccomment">     * (their topological connections are not used here). However, if the</em>
<a class="jxr_linenumber" name="L104" href="#L104">104</a> <em class="jxr_javadoccomment">     * boundary does not really separate an inside open from an outside</em>
<a class="jxr_linenumber" name="L105" href="#L105">105</a> <em class="jxr_javadoccomment">     * open (open having here its topological meaning), then subsequent</em>
<a class="jxr_linenumber" name="L106" href="#L106">106</a> <em class="jxr_javadoccomment">     * calls to the {@link</em>
<a class="jxr_linenumber" name="L107" href="#L107">107</a> <em class="jxr_javadoccomment">     * org.apache.commons.math3.geometry.partitioning.Region#checkPoint(org.apache.commons.math3.geometry.Point)</em>
<a class="jxr_linenumber" name="L108" href="#L108">108</a> <em class="jxr_javadoccomment">     * checkPoint} method will not be meaningful anymore.&lt;/p&gt;</em>
<a class="jxr_linenumber" name="L109" href="#L109">109</a> <em class="jxr_javadoccomment">     * &lt;p&gt;If the boundary is empty, the region will represent the whole</em>
<a class="jxr_linenumber" name="L110" href="#L110">110</a> <em class="jxr_javadoccomment">     * space.&lt;/p&gt;</em>
<a class="jxr_linenumber" name="L111" href="#L111">111</a> <em class="jxr_javadoccomment">     * @param boundary collection of boundary elements</em>
<a class="jxr_linenumber" name="L112" href="#L112">112</a> <em class="jxr_javadoccomment">     * @param tolerance tolerance below which close sub-arcs are merged together</em>
<a class="jxr_linenumber" name="L113" href="#L113">113</a> <em class="jxr_javadoccomment">     * @exception InconsistentStateAt2PiWrapping if the tree leaf nodes are not</em>
<a class="jxr_linenumber" name="L114" href="#L114">114</a> <em class="jxr_javadoccomment">     * consistent across the \( 0, 2 \pi \) crossing</em>
<a class="jxr_linenumber" name="L115" href="#L115">115</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L116" href="#L116">116</a>     <strong class="jxr_keyword">public</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/oned/ArcsSet.html">ArcsSet</a>(<strong class="jxr_keyword">final</strong> Collection&lt;SubHyperplane&lt;Sphere1D&gt;&gt; boundary, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> tolerance)
<a class="jxr_linenumber" name="L117" href="#L117">117</a>         <strong class="jxr_keyword">throws</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/oned/ArcsSet.html">InconsistentStateAt2PiWrapping</a> {
<a class="jxr_linenumber" name="L118" href="#L118">118</a>         <strong class="jxr_keyword">super</strong>(boundary, tolerance);
<a class="jxr_linenumber" name="L119" href="#L119">119</a>         check2PiConsistency();
<a class="jxr_linenumber" name="L120" href="#L120">120</a>     }
<a class="jxr_linenumber" name="L121" href="#L121">121</a> 
<a class="jxr_linenumber" name="L122" href="#L122">122</a>     <em class="jxr_javadoccomment">/** Build an inside/outside tree representing a single arc.</em>
<a class="jxr_linenumber" name="L123" href="#L123">123</a> <em class="jxr_javadoccomment">     * @param lower lower angular bound of the arc</em>
<a class="jxr_linenumber" name="L124" href="#L124">124</a> <em class="jxr_javadoccomment">     * @param upper upper angular bound of the arc</em>
<a class="jxr_linenumber" name="L125" href="#L125">125</a> <em class="jxr_javadoccomment">     * @param tolerance tolerance below which close sub-arcs are merged together</em>
<a class="jxr_linenumber" name="L126" href="#L126">126</a> <em class="jxr_javadoccomment">     * @return the built tree</em>
<a class="jxr_linenumber" name="L127" href="#L127">127</a> <em class="jxr_javadoccomment">     * @exception NumberIsTooLargeException if lower is greater than upper</em>
<a class="jxr_linenumber" name="L128" href="#L128">128</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L129" href="#L129">129</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> BSPTree&lt;Sphere1D&gt; buildTree(<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> lower, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> upper,
<a class="jxr_linenumber" name="L130" href="#L130">130</a>                                                <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> tolerance)
<a class="jxr_linenumber" name="L131" href="#L131">131</a>         <strong class="jxr_keyword">throws</strong> <a href="../../../../../../../org/apache/commons/math3/exception/NumberIsTooLargeException.html">NumberIsTooLargeException</a> {
<a class="jxr_linenumber" name="L132" href="#L132">132</a> 
<a class="jxr_linenumber" name="L133" href="#L133">133</a>         <strong class="jxr_keyword">if</strong> (Precision.equals(lower, upper, 0) || (upper - lower) &gt;= MathUtils.TWO_PI) {
<a class="jxr_linenumber" name="L134" href="#L134">134</a>             <em class="jxr_comment">// the tree must cover the whole circle</em>
<a class="jxr_linenumber" name="L135" href="#L135">135</a>             <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> BSPTree&lt;Sphere1D&gt;(Boolean.TRUE);
<a class="jxr_linenumber" name="L136" href="#L136">136</a>         } <strong class="jxr_keyword">else</strong>  <strong class="jxr_keyword">if</strong> (lower &gt; upper) {
<a class="jxr_linenumber" name="L137" href="#L137">137</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/exception/NumberIsTooLargeException.html">NumberIsTooLargeException</a>(LocalizedFormats.ENDPOINTS_NOT_AN_INTERVAL,
<a class="jxr_linenumber" name="L138" href="#L138">138</a>                                                 lower, upper, <strong class="jxr_keyword">true</strong>);
<a class="jxr_linenumber" name="L139" href="#L139">139</a>         }
<a class="jxr_linenumber" name="L140" href="#L140">140</a> 
<a class="jxr_linenumber" name="L141" href="#L141">141</a>         <em class="jxr_comment">// this is a regular arc, covering only part of the circle</em>
<a class="jxr_linenumber" name="L142" href="#L142">142</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> normalizedLower = MathUtils.normalizeAngle(lower, FastMath.PI);
<a class="jxr_linenumber" name="L143" href="#L143">143</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> normalizedUpper = normalizedLower + (upper - lower);
<a class="jxr_linenumber" name="L144" href="#L144">144</a>         <strong class="jxr_keyword">final</strong> SubHyperplane&lt;Sphere1D&gt; lowerCut =
<a class="jxr_linenumber" name="L145" href="#L145">145</a>                 <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/oned/LimitAngle.html">LimitAngle</a>(<strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/oned/S1Point.html">S1Point</a>(normalizedLower), false, tolerance).wholeHyperplane();
<a class="jxr_linenumber" name="L146" href="#L146">146</a> 
<a class="jxr_linenumber" name="L147" href="#L147">147</a>         <strong class="jxr_keyword">if</strong> (normalizedUpper &lt;= MathUtils.TWO_PI) {
<a class="jxr_linenumber" name="L148" href="#L148">148</a>             <em class="jxr_comment">// simple arc starting after 0 and ending before 2 \pi</em>
<a class="jxr_linenumber" name="L149" href="#L149">149</a>             <strong class="jxr_keyword">final</strong> SubHyperplane&lt;Sphere1D&gt; upperCut =
<a class="jxr_linenumber" name="L150" href="#L150">150</a>                     <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/oned/LimitAngle.html">LimitAngle</a>(<strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/oned/S1Point.html">S1Point</a>(normalizedUpper), <strong class="jxr_keyword">true</strong>, tolerance).wholeHyperplane();
<a class="jxr_linenumber" name="L151" href="#L151">151</a>             <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> BSPTree&lt;Sphere1D&gt;(lowerCut,
<a class="jxr_linenumber" name="L152" href="#L152">152</a>                                          <strong class="jxr_keyword">new</strong> BSPTree&lt;Sphere1D&gt;(Boolean.FALSE),
<a class="jxr_linenumber" name="L153" href="#L153">153</a>                                          <strong class="jxr_keyword">new</strong> BSPTree&lt;Sphere1D&gt;(upperCut,
<a class="jxr_linenumber" name="L154" href="#L154">154</a>                                                                <strong class="jxr_keyword">new</strong> BSPTree&lt;Sphere1D&gt;(Boolean.FALSE),
<a class="jxr_linenumber" name="L155" href="#L155">155</a>                                                                <strong class="jxr_keyword">new</strong> BSPTree&lt;Sphere1D&gt;(Boolean.TRUE),
<a class="jxr_linenumber" name="L156" href="#L156">156</a>                                                                <strong class="jxr_keyword">null</strong>),
<a class="jxr_linenumber" name="L157" href="#L157">157</a>                                          <strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L158" href="#L158">158</a>         } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L159" href="#L159">159</a>             <em class="jxr_comment">// arc wrapping around 2 \pi</em>
<a class="jxr_linenumber" name="L160" href="#L160">160</a>             <strong class="jxr_keyword">final</strong> SubHyperplane&lt;Sphere1D&gt; upperCut =
<a class="jxr_linenumber" name="L161" href="#L161">161</a>                     <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/oned/LimitAngle.html">LimitAngle</a>(<strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/oned/S1Point.html">S1Point</a>(normalizedUpper - MathUtils.TWO_PI), <strong class="jxr_keyword">true</strong>, tolerance).wholeHyperplane();
<a class="jxr_linenumber" name="L162" href="#L162">162</a>             <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> BSPTree&lt;Sphere1D&gt;(lowerCut,
<a class="jxr_linenumber" name="L163" href="#L163">163</a>                                          <strong class="jxr_keyword">new</strong> BSPTree&lt;Sphere1D&gt;(upperCut,
<a class="jxr_linenumber" name="L164" href="#L164">164</a>                                                                <strong class="jxr_keyword">new</strong> BSPTree&lt;Sphere1D&gt;(Boolean.FALSE),
<a class="jxr_linenumber" name="L165" href="#L165">165</a>                                                                <strong class="jxr_keyword">new</strong> BSPTree&lt;Sphere1D&gt;(Boolean.TRUE),
<a class="jxr_linenumber" name="L166" href="#L166">166</a>                                                                <strong class="jxr_keyword">null</strong>),
<a class="jxr_linenumber" name="L167" href="#L167">167</a>                                          <strong class="jxr_keyword">new</strong> BSPTree&lt;Sphere1D&gt;(Boolean.TRUE),
<a class="jxr_linenumber" name="L168" href="#L168">168</a>                                          <strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L169" href="#L169">169</a>         }
<a class="jxr_linenumber" name="L170" href="#L170">170</a> 
<a class="jxr_linenumber" name="L171" href="#L171">171</a>     }
<a class="jxr_linenumber" name="L172" href="#L172">172</a> 
<a class="jxr_linenumber" name="L173" href="#L173">173</a>     <em class="jxr_javadoccomment">/** Check consistency.</em>
<a class="jxr_linenumber" name="L174" href="#L174">174</a> <em class="jxr_javadoccomment">    * @exception InconsistentStateAt2PiWrapping if the tree leaf nodes are not</em>
<a class="jxr_linenumber" name="L175" href="#L175">175</a> <em class="jxr_javadoccomment">    * consistent across the \( 0, 2 \pi \) crossing</em>
<a class="jxr_linenumber" name="L176" href="#L176">176</a> <em class="jxr_javadoccomment">    */</em>
<a class="jxr_linenumber" name="L177" href="#L177">177</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">void</strong> check2PiConsistency() <strong class="jxr_keyword">throws</strong> InconsistentStateAt2PiWrapping {
<a class="jxr_linenumber" name="L178" href="#L178">178</a> 
<a class="jxr_linenumber" name="L179" href="#L179">179</a>         <em class="jxr_comment">// start search at the tree root</em>
<a class="jxr_linenumber" name="L180" href="#L180">180</a>         BSPTree&lt;Sphere1D&gt; root = getTree(false);
<a class="jxr_linenumber" name="L181" href="#L181">181</a>         <strong class="jxr_keyword">if</strong> (root.getCut() == <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L182" href="#L182">182</a>             <strong class="jxr_keyword">return</strong>;
<a class="jxr_linenumber" name="L183" href="#L183">183</a>         }
<a class="jxr_linenumber" name="L184" href="#L184">184</a> 
<a class="jxr_linenumber" name="L185" href="#L185">185</a>         <em class="jxr_comment">// find the inside/outside state before the smallest internal node</em>
<a class="jxr_linenumber" name="L186" href="#L186">186</a>         <strong class="jxr_keyword">final</strong> Boolean stateBefore = (Boolean) getFirstLeaf(root).getAttribute();
<a class="jxr_linenumber" name="L187" href="#L187">187</a> 
<a class="jxr_linenumber" name="L188" href="#L188">188</a>         <em class="jxr_comment">// find the inside/outside state after the largest internal node</em>
<a class="jxr_linenumber" name="L189" href="#L189">189</a>         <strong class="jxr_keyword">final</strong> Boolean stateAfter = (Boolean) getLastLeaf(root).getAttribute();
<a class="jxr_linenumber" name="L190" href="#L190">190</a> 
<a class="jxr_linenumber" name="L191" href="#L191">191</a>         <strong class="jxr_keyword">if</strong> (stateBefore ^ stateAfter) {
<a class="jxr_linenumber" name="L192" href="#L192">192</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/oned/ArcsSet.html">InconsistentStateAt2PiWrapping</a>();
<a class="jxr_linenumber" name="L193" href="#L193">193</a>         }
<a class="jxr_linenumber" name="L194" href="#L194">194</a> 
<a class="jxr_linenumber" name="L195" href="#L195">195</a>     }
<a class="jxr_linenumber" name="L196" href="#L196">196</a> 
<a class="jxr_linenumber" name="L197" href="#L197">197</a>     <em class="jxr_javadoccomment">/** Get the first leaf node of a tree.</em>
<a class="jxr_linenumber" name="L198" href="#L198">198</a> <em class="jxr_javadoccomment">     * @param root tree root</em>
<a class="jxr_linenumber" name="L199" href="#L199">199</a> <em class="jxr_javadoccomment">     * @return first leaf node (i.e. node corresponding to the region just after 0.0 radians)</em>
<a class="jxr_linenumber" name="L200" href="#L200">200</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L201" href="#L201">201</a>     <strong class="jxr_keyword">private</strong> BSPTree&lt;Sphere1D&gt; getFirstLeaf(<strong class="jxr_keyword">final</strong> BSPTree&lt;Sphere1D&gt; root) {
<a class="jxr_linenumber" name="L202" href="#L202">202</a> 
<a class="jxr_linenumber" name="L203" href="#L203">203</a>         <strong class="jxr_keyword">if</strong> (root.getCut() == <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L204" href="#L204">204</a>             <strong class="jxr_keyword">return</strong> root;
<a class="jxr_linenumber" name="L205" href="#L205">205</a>         }
<a class="jxr_linenumber" name="L206" href="#L206">206</a> 
<a class="jxr_linenumber" name="L207" href="#L207">207</a>         <em class="jxr_comment">// find the smallest internal node</em>
<a class="jxr_linenumber" name="L208" href="#L208">208</a>         BSPTree&lt;Sphere1D&gt; smallest = <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L209" href="#L209">209</a>         <strong class="jxr_keyword">for</strong> (BSPTree&lt;Sphere1D&gt; n = root; n != <strong class="jxr_keyword">null</strong>; n = previousInternalNode(n)) {
<a class="jxr_linenumber" name="L210" href="#L210">210</a>             smallest = n;
<a class="jxr_linenumber" name="L211" href="#L211">211</a>         }
<a class="jxr_linenumber" name="L212" href="#L212">212</a> 
<a class="jxr_linenumber" name="L213" href="#L213">213</a>         <strong class="jxr_keyword">return</strong> leafBefore(smallest);
<a class="jxr_linenumber" name="L214" href="#L214">214</a> 
<a class="jxr_linenumber" name="L215" href="#L215">215</a>     }
<a class="jxr_linenumber" name="L216" href="#L216">216</a> 
<a class="jxr_linenumber" name="L217" href="#L217">217</a>     <em class="jxr_javadoccomment">/** Get the last leaf node of a tree.</em>
<a class="jxr_linenumber" name="L218" href="#L218">218</a> <em class="jxr_javadoccomment">     * @param root tree root</em>
<a class="jxr_linenumber" name="L219" href="#L219">219</a> <em class="jxr_javadoccomment">     * @return last leaf node (i.e. node corresponding to the region just before \( 2 \pi \) radians)</em>
<a class="jxr_linenumber" name="L220" href="#L220">220</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L221" href="#L221">221</a>     <strong class="jxr_keyword">private</strong> BSPTree&lt;Sphere1D&gt; getLastLeaf(<strong class="jxr_keyword">final</strong> BSPTree&lt;Sphere1D&gt; root) {
<a class="jxr_linenumber" name="L222" href="#L222">222</a> 
<a class="jxr_linenumber" name="L223" href="#L223">223</a>         <strong class="jxr_keyword">if</strong> (root.getCut() == <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L224" href="#L224">224</a>             <strong class="jxr_keyword">return</strong> root;
<a class="jxr_linenumber" name="L225" href="#L225">225</a>         }
<a class="jxr_linenumber" name="L226" href="#L226">226</a> 
<a class="jxr_linenumber" name="L227" href="#L227">227</a>         <em class="jxr_comment">// find the largest internal node</em>
<a class="jxr_linenumber" name="L228" href="#L228">228</a>         BSPTree&lt;Sphere1D&gt; largest = <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L229" href="#L229">229</a>         <strong class="jxr_keyword">for</strong> (BSPTree&lt;Sphere1D&gt; n = root; n != <strong class="jxr_keyword">null</strong>; n = nextInternalNode(n)) {
<a class="jxr_linenumber" name="L230" href="#L230">230</a>             largest = n;
<a class="jxr_linenumber" name="L231" href="#L231">231</a>         }
<a class="jxr_linenumber" name="L232" href="#L232">232</a> 
<a class="jxr_linenumber" name="L233" href="#L233">233</a>         <strong class="jxr_keyword">return</strong> leafAfter(largest);
<a class="jxr_linenumber" name="L234" href="#L234">234</a> 
<a class="jxr_linenumber" name="L235" href="#L235">235</a>     }
<a class="jxr_linenumber" name="L236" href="#L236">236</a> 
<a class="jxr_linenumber" name="L237" href="#L237">237</a>     <em class="jxr_javadoccomment">/** Get the node corresponding to the first arc start.</em>
<a class="jxr_linenumber" name="L238" href="#L238">238</a> <em class="jxr_javadoccomment">     * @return smallest internal node (i.e. first after 0.0 radians, in trigonometric direction),</em>
<a class="jxr_linenumber" name="L239" href="#L239">239</a> <em class="jxr_javadoccomment">     * or null if there are no internal nodes (i.e. the set is either empty or covers the full circle)</em>
<a class="jxr_linenumber" name="L240" href="#L240">240</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L241" href="#L241">241</a>     <strong class="jxr_keyword">private</strong> BSPTree&lt;Sphere1D&gt; getFirstArcStart() {
<a class="jxr_linenumber" name="L242" href="#L242">242</a> 
<a class="jxr_linenumber" name="L243" href="#L243">243</a>         <em class="jxr_comment">// start search at the tree root</em>
<a class="jxr_linenumber" name="L244" href="#L244">244</a>         BSPTree&lt;Sphere1D&gt; node = getTree(false);
<a class="jxr_linenumber" name="L245" href="#L245">245</a>         <strong class="jxr_keyword">if</strong> (node.getCut() == <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L246" href="#L246">246</a>             <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L247" href="#L247">247</a>         }
<a class="jxr_linenumber" name="L248" href="#L248">248</a> 
<a class="jxr_linenumber" name="L249" href="#L249">249</a>         <em class="jxr_comment">// walk tree until we find the smallest internal node</em>
<a class="jxr_linenumber" name="L250" href="#L250">250</a>         node = getFirstLeaf(node).getParent();
<a class="jxr_linenumber" name="L251" href="#L251">251</a> 
<a class="jxr_linenumber" name="L252" href="#L252">252</a>         <em class="jxr_comment">// walk tree until we find an arc start</em>
<a class="jxr_linenumber" name="L253" href="#L253">253</a>         <strong class="jxr_keyword">while</strong> (node != <strong class="jxr_keyword">null</strong> &amp;&amp; !isArcStart(node)) {
<a class="jxr_linenumber" name="L254" href="#L254">254</a>             node = nextInternalNode(node);
<a class="jxr_linenumber" name="L255" href="#L255">255</a>         }
<a class="jxr_linenumber" name="L256" href="#L256">256</a> 
<a class="jxr_linenumber" name="L257" href="#L257">257</a>         <strong class="jxr_keyword">return</strong> node;
<a class="jxr_linenumber" name="L258" href="#L258">258</a> 
<a class="jxr_linenumber" name="L259" href="#L259">259</a>     }
<a class="jxr_linenumber" name="L260" href="#L260">260</a> 
<a class="jxr_linenumber" name="L261" href="#L261">261</a>     <em class="jxr_javadoccomment">/** Check if an internal node corresponds to the start angle of an arc.</em>
<a class="jxr_linenumber" name="L262" href="#L262">262</a> <em class="jxr_javadoccomment">     * @param node internal node to check</em>
<a class="jxr_linenumber" name="L263" href="#L263">263</a> <em class="jxr_javadoccomment">     * @return true if the node corresponds to the start angle of an arc</em>
<a class="jxr_linenumber" name="L264" href="#L264">264</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L265" href="#L265">265</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">boolean</strong> isArcStart(<strong class="jxr_keyword">final</strong> BSPTree&lt;Sphere1D&gt; node) {
<a class="jxr_linenumber" name="L266" href="#L266">266</a> 
<a class="jxr_linenumber" name="L267" href="#L267">267</a>         <strong class="jxr_keyword">if</strong> ((Boolean) leafBefore(node).getAttribute()) {
<a class="jxr_linenumber" name="L268" href="#L268">268</a>             <em class="jxr_comment">// it has an inside cell before it, it may end an arc but not start it</em>
<a class="jxr_linenumber" name="L269" href="#L269">269</a>             <strong class="jxr_keyword">return</strong> false;
<a class="jxr_linenumber" name="L270" href="#L270">270</a>         }
<a class="jxr_linenumber" name="L271" href="#L271">271</a> 
<a class="jxr_linenumber" name="L272" href="#L272">272</a>         <strong class="jxr_keyword">if</strong> (!(Boolean) leafAfter(node).getAttribute()) {
<a class="jxr_linenumber" name="L273" href="#L273">273</a>             <em class="jxr_comment">// it has an outside cell after it, it is a dummy cut away from real arcs</em>
<a class="jxr_linenumber" name="L274" href="#L274">274</a>             <strong class="jxr_keyword">return</strong> false;
<a class="jxr_linenumber" name="L275" href="#L275">275</a>         }
<a class="jxr_linenumber" name="L276" href="#L276">276</a> 
<a class="jxr_linenumber" name="L277" href="#L277">277</a>         <em class="jxr_comment">// the cell has an outside before and an inside after it</em>
<a class="jxr_linenumber" name="L278" href="#L278">278</a>         <em class="jxr_comment">// it is the start of an arc</em>
<a class="jxr_linenumber" name="L279" href="#L279">279</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">true</strong>;
<a class="jxr_linenumber" name="L280" href="#L280">280</a> 
<a class="jxr_linenumber" name="L281" href="#L281">281</a>     }
<a class="jxr_linenumber" name="L282" href="#L282">282</a> 
<a class="jxr_linenumber" name="L283" href="#L283">283</a>     <em class="jxr_javadoccomment">/** Check if an internal node corresponds to the end angle of an arc.</em>
<a class="jxr_linenumber" name="L284" href="#L284">284</a> <em class="jxr_javadoccomment">     * @param node internal node to check</em>
<a class="jxr_linenumber" name="L285" href="#L285">285</a> <em class="jxr_javadoccomment">     * @return true if the node corresponds to the end angle of an arc</em>
<a class="jxr_linenumber" name="L286" href="#L286">286</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L287" href="#L287">287</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">boolean</strong> isArcEnd(<strong class="jxr_keyword">final</strong> BSPTree&lt;Sphere1D&gt; node) {
<a class="jxr_linenumber" name="L288" href="#L288">288</a> 
<a class="jxr_linenumber" name="L289" href="#L289">289</a>         <strong class="jxr_keyword">if</strong> (!(Boolean) leafBefore(node).getAttribute()) {
<a class="jxr_linenumber" name="L290" href="#L290">290</a>             <em class="jxr_comment">// it has an outside cell before it, it may start an arc but not end it</em>
<a class="jxr_linenumber" name="L291" href="#L291">291</a>             <strong class="jxr_keyword">return</strong> false;
<a class="jxr_linenumber" name="L292" href="#L292">292</a>         }
<a class="jxr_linenumber" name="L293" href="#L293">293</a> 
<a class="jxr_linenumber" name="L294" href="#L294">294</a>         <strong class="jxr_keyword">if</strong> ((Boolean) leafAfter(node).getAttribute()) {
<a class="jxr_linenumber" name="L295" href="#L295">295</a>             <em class="jxr_comment">// it has an inside cell after it, it is a dummy cut in the middle of an arc</em>
<a class="jxr_linenumber" name="L296" href="#L296">296</a>             <strong class="jxr_keyword">return</strong> false;
<a class="jxr_linenumber" name="L297" href="#L297">297</a>         }
<a class="jxr_linenumber" name="L298" href="#L298">298</a> 
<a class="jxr_linenumber" name="L299" href="#L299">299</a>         <em class="jxr_comment">// the cell has an inside before and an outside after it</em>
<a class="jxr_linenumber" name="L300" href="#L300">300</a>         <em class="jxr_comment">// it is the end of an arc</em>
<a class="jxr_linenumber" name="L301" href="#L301">301</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">true</strong>;
<a class="jxr_linenumber" name="L302" href="#L302">302</a> 
<a class="jxr_linenumber" name="L303" href="#L303">303</a>     }
<a class="jxr_linenumber" name="L304" href="#L304">304</a> 
<a class="jxr_linenumber" name="L305" href="#L305">305</a>     <em class="jxr_javadoccomment">/** Get the next internal node.</em>
<a class="jxr_linenumber" name="L306" href="#L306">306</a> <em class="jxr_javadoccomment">     * @param node current internal node</em>
<a class="jxr_linenumber" name="L307" href="#L307">307</a> <em class="jxr_javadoccomment">     * @return next internal node in trigonometric order, or null</em>
<a class="jxr_linenumber" name="L308" href="#L308">308</a> <em class="jxr_javadoccomment">     * if this is the last internal node</em>
<a class="jxr_linenumber" name="L309" href="#L309">309</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L310" href="#L310">310</a>     <strong class="jxr_keyword">private</strong> BSPTree&lt;Sphere1D&gt; nextInternalNode(BSPTree&lt;Sphere1D&gt; node) {
<a class="jxr_linenumber" name="L311" href="#L311">311</a> 
<a class="jxr_linenumber" name="L312" href="#L312">312</a>         <strong class="jxr_keyword">if</strong> (childAfter(node).getCut() != <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L313" href="#L313">313</a>             <em class="jxr_comment">// the next node is in the sub-tree</em>
<a class="jxr_linenumber" name="L314" href="#L314">314</a>             <strong class="jxr_keyword">return</strong> leafAfter(node).getParent();
<a class="jxr_linenumber" name="L315" href="#L315">315</a>         }
<a class="jxr_linenumber" name="L316" href="#L316">316</a> 
<a class="jxr_linenumber" name="L317" href="#L317">317</a>         <em class="jxr_comment">// there is nothing left deeper in the tree, we backtrack</em>
<a class="jxr_linenumber" name="L318" href="#L318">318</a>         <strong class="jxr_keyword">while</strong> (isAfterParent(node)) {
<a class="jxr_linenumber" name="L319" href="#L319">319</a>             node = node.getParent();
<a class="jxr_linenumber" name="L320" href="#L320">320</a>         }
<a class="jxr_linenumber" name="L321" href="#L321">321</a>         <strong class="jxr_keyword">return</strong> node.getParent();
<a class="jxr_linenumber" name="L322" href="#L322">322</a> 
<a class="jxr_linenumber" name="L323" href="#L323">323</a>     }
<a class="jxr_linenumber" name="L324" href="#L324">324</a> 
<a class="jxr_linenumber" name="L325" href="#L325">325</a>     <em class="jxr_javadoccomment">/** Get the previous internal node.</em>
<a class="jxr_linenumber" name="L326" href="#L326">326</a> <em class="jxr_javadoccomment">     * @param node current internal node</em>
<a class="jxr_linenumber" name="L327" href="#L327">327</a> <em class="jxr_javadoccomment">     * @return previous internal node in trigonometric order, or null</em>
<a class="jxr_linenumber" name="L328" href="#L328">328</a> <em class="jxr_javadoccomment">     * if this is the first internal node</em>
<a class="jxr_linenumber" name="L329" href="#L329">329</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L330" href="#L330">330</a>     <strong class="jxr_keyword">private</strong> BSPTree&lt;Sphere1D&gt; previousInternalNode(BSPTree&lt;Sphere1D&gt; node) {
<a class="jxr_linenumber" name="L331" href="#L331">331</a> 
<a class="jxr_linenumber" name="L332" href="#L332">332</a>         <strong class="jxr_keyword">if</strong> (childBefore(node).getCut() != <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L333" href="#L333">333</a>             <em class="jxr_comment">// the next node is in the sub-tree</em>
<a class="jxr_linenumber" name="L334" href="#L334">334</a>             <strong class="jxr_keyword">return</strong> leafBefore(node).getParent();
<a class="jxr_linenumber" name="L335" href="#L335">335</a>         }
<a class="jxr_linenumber" name="L336" href="#L336">336</a> 
<a class="jxr_linenumber" name="L337" href="#L337">337</a>         <em class="jxr_comment">// there is nothing left deeper in the tree, we backtrack</em>
<a class="jxr_linenumber" name="L338" href="#L338">338</a>         <strong class="jxr_keyword">while</strong> (isBeforeParent(node)) {
<a class="jxr_linenumber" name="L339" href="#L339">339</a>             node = node.getParent();
<a class="jxr_linenumber" name="L340" href="#L340">340</a>         }
<a class="jxr_linenumber" name="L341" href="#L341">341</a>         <strong class="jxr_keyword">return</strong> node.getParent();
<a class="jxr_linenumber" name="L342" href="#L342">342</a> 
<a class="jxr_linenumber" name="L343" href="#L343">343</a>     }
<a class="jxr_linenumber" name="L344" href="#L344">344</a> 
<a class="jxr_linenumber" name="L345" href="#L345">345</a>     <em class="jxr_javadoccomment">/** Find the leaf node just before an internal node.</em>
<a class="jxr_linenumber" name="L346" href="#L346">346</a> <em class="jxr_javadoccomment">     * @param node internal node at which the sub-tree starts</em>
<a class="jxr_linenumber" name="L347" href="#L347">347</a> <em class="jxr_javadoccomment">     * @return leaf node just before the internal node</em>
<a class="jxr_linenumber" name="L348" href="#L348">348</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L349" href="#L349">349</a>     <strong class="jxr_keyword">private</strong> BSPTree&lt;Sphere1D&gt; leafBefore(BSPTree&lt;Sphere1D&gt; node) {
<a class="jxr_linenumber" name="L350" href="#L350">350</a> 
<a class="jxr_linenumber" name="L351" href="#L351">351</a>         node = childBefore(node);
<a class="jxr_linenumber" name="L352" href="#L352">352</a>         <strong class="jxr_keyword">while</strong> (node.getCut() != <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L353" href="#L353">353</a>             node = childAfter(node);
<a class="jxr_linenumber" name="L354" href="#L354">354</a>         }
<a class="jxr_linenumber" name="L355" href="#L355">355</a> 
<a class="jxr_linenumber" name="L356" href="#L356">356</a>         <strong class="jxr_keyword">return</strong> node;
<a class="jxr_linenumber" name="L357" href="#L357">357</a> 
<a class="jxr_linenumber" name="L358" href="#L358">358</a>     }
<a class="jxr_linenumber" name="L359" href="#L359">359</a> 
<a class="jxr_linenumber" name="L360" href="#L360">360</a>     <em class="jxr_javadoccomment">/** Find the leaf node just after an internal node.</em>
<a class="jxr_linenumber" name="L361" href="#L361">361</a> <em class="jxr_javadoccomment">     * @param node internal node at which the sub-tree starts</em>
<a class="jxr_linenumber" name="L362" href="#L362">362</a> <em class="jxr_javadoccomment">     * @return leaf node just after the internal node</em>
<a class="jxr_linenumber" name="L363" href="#L363">363</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L364" href="#L364">364</a>     <strong class="jxr_keyword">private</strong> BSPTree&lt;Sphere1D&gt; leafAfter(BSPTree&lt;Sphere1D&gt; node) {
<a class="jxr_linenumber" name="L365" href="#L365">365</a> 
<a class="jxr_linenumber" name="L366" href="#L366">366</a>         node = childAfter(node);
<a class="jxr_linenumber" name="L367" href="#L367">367</a>         <strong class="jxr_keyword">while</strong> (node.getCut() != <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L368" href="#L368">368</a>             node = childBefore(node);
<a class="jxr_linenumber" name="L369" href="#L369">369</a>         }
<a class="jxr_linenumber" name="L370" href="#L370">370</a> 
<a class="jxr_linenumber" name="L371" href="#L371">371</a>         <strong class="jxr_keyword">return</strong> node;
<a class="jxr_linenumber" name="L372" href="#L372">372</a> 
<a class="jxr_linenumber" name="L373" href="#L373">373</a>     }
<a class="jxr_linenumber" name="L374" href="#L374">374</a> 
<a class="jxr_linenumber" name="L375" href="#L375">375</a>     <em class="jxr_javadoccomment">/** Check if a node is the child before its parent in trigonometric order.</em>
<a class="jxr_linenumber" name="L376" href="#L376">376</a> <em class="jxr_javadoccomment">     * @param node child node considered</em>
<a class="jxr_linenumber" name="L377" href="#L377">377</a> <em class="jxr_javadoccomment">     * @return true is the node has a parent end is before it in trigonometric order</em>
<a class="jxr_linenumber" name="L378" href="#L378">378</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L379" href="#L379">379</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">boolean</strong> isBeforeParent(<strong class="jxr_keyword">final</strong> BSPTree&lt;Sphere1D&gt; node) {
<a class="jxr_linenumber" name="L380" href="#L380">380</a>         <strong class="jxr_keyword">final</strong> BSPTree&lt;Sphere1D&gt; parent = node.getParent();
<a class="jxr_linenumber" name="L381" href="#L381">381</a>         <strong class="jxr_keyword">if</strong> (parent == <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L382" href="#L382">382</a>             <strong class="jxr_keyword">return</strong> false;
<a class="jxr_linenumber" name="L383" href="#L383">383</a>         } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L384" href="#L384">384</a>             <strong class="jxr_keyword">return</strong> node == childBefore(parent);
<a class="jxr_linenumber" name="L385" href="#L385">385</a>         }
<a class="jxr_linenumber" name="L386" href="#L386">386</a>     }
<a class="jxr_linenumber" name="L387" href="#L387">387</a> 
<a class="jxr_linenumber" name="L388" href="#L388">388</a>     <em class="jxr_javadoccomment">/** Check if a node is the child after its parent in trigonometric order.</em>
<a class="jxr_linenumber" name="L389" href="#L389">389</a> <em class="jxr_javadoccomment">     * @param node child node considered</em>
<a class="jxr_linenumber" name="L390" href="#L390">390</a> <em class="jxr_javadoccomment">     * @return true is the node has a parent end is after it in trigonometric order</em>
<a class="jxr_linenumber" name="L391" href="#L391">391</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L392" href="#L392">392</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">boolean</strong> isAfterParent(<strong class="jxr_keyword">final</strong> BSPTree&lt;Sphere1D&gt; node) {
<a class="jxr_linenumber" name="L393" href="#L393">393</a>         <strong class="jxr_keyword">final</strong> BSPTree&lt;Sphere1D&gt; parent = node.getParent();
<a class="jxr_linenumber" name="L394" href="#L394">394</a>         <strong class="jxr_keyword">if</strong> (parent == <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L395" href="#L395">395</a>             <strong class="jxr_keyword">return</strong> false;
<a class="jxr_linenumber" name="L396" href="#L396">396</a>         } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L397" href="#L397">397</a>             <strong class="jxr_keyword">return</strong> node == childAfter(parent);
<a class="jxr_linenumber" name="L398" href="#L398">398</a>         }
<a class="jxr_linenumber" name="L399" href="#L399">399</a>     }
<a class="jxr_linenumber" name="L400" href="#L400">400</a> 
<a class="jxr_linenumber" name="L401" href="#L401">401</a>     <em class="jxr_javadoccomment">/** Find the child node just before an internal node.</em>
<a class="jxr_linenumber" name="L402" href="#L402">402</a> <em class="jxr_javadoccomment">     * @param node internal node at which the sub-tree starts</em>
<a class="jxr_linenumber" name="L403" href="#L403">403</a> <em class="jxr_javadoccomment">     * @return child node just before the internal node</em>
<a class="jxr_linenumber" name="L404" href="#L404">404</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L405" href="#L405">405</a>     <strong class="jxr_keyword">private</strong> BSPTree&lt;Sphere1D&gt; childBefore(BSPTree&lt;Sphere1D&gt; node) {
<a class="jxr_linenumber" name="L406" href="#L406">406</a>         <strong class="jxr_keyword">if</strong> (isDirect(node)) {
<a class="jxr_linenumber" name="L407" href="#L407">407</a>             <em class="jxr_comment">// smaller angles are on minus side, larger angles are on plus side</em>
<a class="jxr_linenumber" name="L408" href="#L408">408</a>             <strong class="jxr_keyword">return</strong> node.getMinus();
<a class="jxr_linenumber" name="L409" href="#L409">409</a>         } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L410" href="#L410">410</a>             <em class="jxr_comment">// smaller angles are on plus side, larger angles are on minus side</em>
<a class="jxr_linenumber" name="L411" href="#L411">411</a>             <strong class="jxr_keyword">return</strong> node.getPlus();
<a class="jxr_linenumber" name="L412" href="#L412">412</a>         }
<a class="jxr_linenumber" name="L413" href="#L413">413</a>     }
<a class="jxr_linenumber" name="L414" href="#L414">414</a> 
<a class="jxr_linenumber" name="L415" href="#L415">415</a>     <em class="jxr_javadoccomment">/** Find the child node just after an internal node.</em>
<a class="jxr_linenumber" name="L416" href="#L416">416</a> <em class="jxr_javadoccomment">     * @param node internal node at which the sub-tree starts</em>
<a class="jxr_linenumber" name="L417" href="#L417">417</a> <em class="jxr_javadoccomment">     * @return child node just after the internal node</em>
<a class="jxr_linenumber" name="L418" href="#L418">418</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L419" href="#L419">419</a>     <strong class="jxr_keyword">private</strong> BSPTree&lt;Sphere1D&gt; childAfter(BSPTree&lt;Sphere1D&gt; node) {
<a class="jxr_linenumber" name="L420" href="#L420">420</a>         <strong class="jxr_keyword">if</strong> (isDirect(node)) {
<a class="jxr_linenumber" name="L421" href="#L421">421</a>             <em class="jxr_comment">// smaller angles are on minus side, larger angles are on plus side</em>
<a class="jxr_linenumber" name="L422" href="#L422">422</a>             <strong class="jxr_keyword">return</strong> node.getPlus();
<a class="jxr_linenumber" name="L423" href="#L423">423</a>         } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L424" href="#L424">424</a>             <em class="jxr_comment">// smaller angles are on plus side, larger angles are on minus side</em>
<a class="jxr_linenumber" name="L425" href="#L425">425</a>             <strong class="jxr_keyword">return</strong> node.getMinus();
<a class="jxr_linenumber" name="L426" href="#L426">426</a>         }
<a class="jxr_linenumber" name="L427" href="#L427">427</a>     }
<a class="jxr_linenumber" name="L428" href="#L428">428</a> 
<a class="jxr_linenumber" name="L429" href="#L429">429</a>     <em class="jxr_javadoccomment">/** Check if an internal node has a direct limit angle.</em>
<a class="jxr_linenumber" name="L430" href="#L430">430</a> <em class="jxr_javadoccomment">     * @param node internal node to check</em>
<a class="jxr_linenumber" name="L431" href="#L431">431</a> <em class="jxr_javadoccomment">     * @return true if the limit angle is direct</em>
<a class="jxr_linenumber" name="L432" href="#L432">432</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L433" href="#L433">433</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">boolean</strong> isDirect(<strong class="jxr_keyword">final</strong> BSPTree&lt;Sphere1D&gt; node) {
<a class="jxr_linenumber" name="L434" href="#L434">434</a>         <strong class="jxr_keyword">return</strong> ((LimitAngle) node.getCut().getHyperplane()).isDirect();
<a class="jxr_linenumber" name="L435" href="#L435">435</a>     }
<a class="jxr_linenumber" name="L436" href="#L436">436</a> 
<a class="jxr_linenumber" name="L437" href="#L437">437</a>     <em class="jxr_javadoccomment">/** Get the limit angle of an internal node.</em>
<a class="jxr_linenumber" name="L438" href="#L438">438</a> <em class="jxr_javadoccomment">     * @param node internal node to check</em>
<a class="jxr_linenumber" name="L439" href="#L439">439</a> <em class="jxr_javadoccomment">     * @return limit angle</em>
<a class="jxr_linenumber" name="L440" href="#L440">440</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L441" href="#L441">441</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">double</strong> getAngle(<strong class="jxr_keyword">final</strong> BSPTree&lt;Sphere1D&gt; node) {
<a class="jxr_linenumber" name="L442" href="#L442">442</a>         <strong class="jxr_keyword">return</strong> ((LimitAngle) node.getCut().getHyperplane()).getLocation().getAlpha();
<a class="jxr_linenumber" name="L443" href="#L443">443</a>     }
<a class="jxr_linenumber" name="L444" href="#L444">444</a> 
<a class="jxr_linenumber" name="L445" href="#L445">445</a>     <em class="jxr_javadoccomment">/** {@inheritDoc} */</em>
<a class="jxr_linenumber" name="L446" href="#L446">446</a>     @Override
<a class="jxr_linenumber" name="L447" href="#L447">447</a>     <strong class="jxr_keyword">public</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/oned/ArcsSet.html">ArcsSet</a> buildNew(<strong class="jxr_keyword">final</strong> BSPTree&lt;Sphere1D&gt; tree) {
<a class="jxr_linenumber" name="L448" href="#L448">448</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/oned/ArcsSet.html">ArcsSet</a>(tree, getTolerance());
<a class="jxr_linenumber" name="L449" href="#L449">449</a>     }
<a class="jxr_linenumber" name="L450" href="#L450">450</a> 
<a class="jxr_linenumber" name="L451" href="#L451">451</a>     <em class="jxr_javadoccomment">/** {@inheritDoc} */</em>
<a class="jxr_linenumber" name="L452" href="#L452">452</a>     @Override
<a class="jxr_linenumber" name="L453" href="#L453">453</a>     <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">void</strong> computeGeometricalProperties() {
<a class="jxr_linenumber" name="L454" href="#L454">454</a>         <strong class="jxr_keyword">if</strong> (getTree(false).getCut() == <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L455" href="#L455">455</a>             setBarycenter(S1Point.NaN);
<a class="jxr_linenumber" name="L456" href="#L456">456</a>             setSize(((Boolean) getTree(false).getAttribute()) ? MathUtils.TWO_PI : 0);
<a class="jxr_linenumber" name="L457" href="#L457">457</a>         } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L458" href="#L458">458</a>             <strong class="jxr_keyword">double</strong> size = 0.0;
<a class="jxr_linenumber" name="L459" href="#L459">459</a>             <strong class="jxr_keyword">double</strong> sum  = 0.0;
<a class="jxr_linenumber" name="L460" href="#L460">460</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] a : <strong class="jxr_keyword">this</strong>) {
<a class="jxr_linenumber" name="L461" href="#L461">461</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> length = a[1] - a[0];
<a class="jxr_linenumber" name="L462" href="#L462">462</a>                 size += length;
<a class="jxr_linenumber" name="L463" href="#L463">463</a>                 sum  += length * (a[0] + a[1]);
<a class="jxr_linenumber" name="L464" href="#L464">464</a>             }
<a class="jxr_linenumber" name="L465" href="#L465">465</a>             setSize(size);
<a class="jxr_linenumber" name="L466" href="#L466">466</a>             <strong class="jxr_keyword">if</strong> (Precision.equals(size, MathUtils.TWO_PI, 0)) {
<a class="jxr_linenumber" name="L467" href="#L467">467</a>                 setBarycenter(S1Point.NaN);
<a class="jxr_linenumber" name="L468" href="#L468">468</a>             } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (size &gt;= Precision.SAFE_MIN) {
<a class="jxr_linenumber" name="L469" href="#L469">469</a>                 setBarycenter(<strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/oned/S1Point.html">S1Point</a>(sum / (2 * size)));
<a class="jxr_linenumber" name="L470" href="#L470">470</a>             } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L471" href="#L471">471</a>                 <strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/oned/LimitAngle.html">LimitAngle</a> limit = (LimitAngle) getTree(false).getCut().getHyperplane();
<a class="jxr_linenumber" name="L472" href="#L472">472</a>                 setBarycenter(limit.getLocation());
<a class="jxr_linenumber" name="L473" href="#L473">473</a>             }
<a class="jxr_linenumber" name="L474" href="#L474">474</a>         }
<a class="jxr_linenumber" name="L475" href="#L475">475</a>     }
<a class="jxr_linenumber" name="L476" href="#L476">476</a> 
<a class="jxr_linenumber" name="L477" href="#L477">477</a>     <em class="jxr_javadoccomment">/** {@inheritDoc}</em>
<a class="jxr_linenumber" name="L478" href="#L478">478</a> <em class="jxr_javadoccomment">     * @since 3.3</em>
<a class="jxr_linenumber" name="L479" href="#L479">479</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L480" href="#L480">480</a>     @Override
<a class="jxr_linenumber" name="L481" href="#L481">481</a>     <strong class="jxr_keyword">public</strong> BoundaryProjection&lt;Sphere1D&gt; projectToBoundary(<strong class="jxr_keyword">final</strong> Point&lt;Sphere1D&gt; point) {
<a class="jxr_linenumber" name="L482" href="#L482">482</a> 
<a class="jxr_linenumber" name="L483" href="#L483">483</a>         <em class="jxr_comment">// get position of test point</em>
<a class="jxr_linenumber" name="L484" href="#L484">484</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> alpha = ((S1Point) point).getAlpha();
<a class="jxr_linenumber" name="L485" href="#L485">485</a> 
<a class="jxr_linenumber" name="L486" href="#L486">486</a>         <strong class="jxr_keyword">boolean</strong> wrapFirst = false;
<a class="jxr_linenumber" name="L487" href="#L487">487</a>         <strong class="jxr_keyword">double</strong> first      = Double.NaN;
<a class="jxr_linenumber" name="L488" href="#L488">488</a>         <strong class="jxr_keyword">double</strong> previous   = Double.NaN;
<a class="jxr_linenumber" name="L489" href="#L489">489</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] a : <strong class="jxr_keyword">this</strong>) {
<a class="jxr_linenumber" name="L490" href="#L490">490</a> 
<a class="jxr_linenumber" name="L491" href="#L491">491</a>             <strong class="jxr_keyword">if</strong> (Double.isNaN(first)) {
<a class="jxr_linenumber" name="L492" href="#L492">492</a>                 <em class="jxr_comment">// remember the first angle in case we need it later</em>
<a class="jxr_linenumber" name="L493" href="#L493">493</a>                 first = a[0];
<a class="jxr_linenumber" name="L494" href="#L494">494</a>             }
<a class="jxr_linenumber" name="L495" href="#L495">495</a> 
<a class="jxr_linenumber" name="L496" href="#L496">496</a>             <strong class="jxr_keyword">if</strong> (!wrapFirst) {
<a class="jxr_linenumber" name="L497" href="#L497">497</a>                 <strong class="jxr_keyword">if</strong> (alpha &lt; a[0]) {
<a class="jxr_linenumber" name="L498" href="#L498">498</a>                     <em class="jxr_comment">// the test point lies between the previous and the current arcs</em>
<a class="jxr_linenumber" name="L499" href="#L499">499</a>                     <em class="jxr_comment">// offset will be positive</em>
<a class="jxr_linenumber" name="L500" href="#L500">500</a>                     <strong class="jxr_keyword">if</strong> (Double.isNaN(previous)) {
<a class="jxr_linenumber" name="L501" href="#L501">501</a>                         <em class="jxr_comment">// we need to wrap around the circle</em>
<a class="jxr_linenumber" name="L502" href="#L502">502</a>                         wrapFirst = <strong class="jxr_keyword">true</strong>;
<a class="jxr_linenumber" name="L503" href="#L503">503</a>                     } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L504" href="#L504">504</a>                         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> previousOffset = alpha - previous;
<a class="jxr_linenumber" name="L505" href="#L505">505</a>                         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> currentOffset  = a[0] - alpha;
<a class="jxr_linenumber" name="L506" href="#L506">506</a>                         <strong class="jxr_keyword">if</strong> (previousOffset &lt; currentOffset) {
<a class="jxr_linenumber" name="L507" href="#L507">507</a>                             <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> BoundaryProjection&lt;Sphere1D&gt;(point, <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/oned/S1Point.html">S1Point</a>(previous), previousOffset);
<a class="jxr_linenumber" name="L508" href="#L508">508</a>                         } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L509" href="#L509">509</a>                             <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> BoundaryProjection&lt;Sphere1D&gt;(point, <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/oned/S1Point.html">S1Point</a>(a[0]), currentOffset);
<a class="jxr_linenumber" name="L510" href="#L510">510</a>                         }
<a class="jxr_linenumber" name="L511" href="#L511">511</a>                     }
<a class="jxr_linenumber" name="L512" href="#L512">512</a>                 } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (alpha &lt;= a[1]) {
<a class="jxr_linenumber" name="L513" href="#L513">513</a>                     <em class="jxr_comment">// the test point lies within the current arc</em>
<a class="jxr_linenumber" name="L514" href="#L514">514</a>                     <em class="jxr_comment">// offset will be negative</em>
<a class="jxr_linenumber" name="L515" href="#L515">515</a>                     <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> offset0 = a[0] - alpha;
<a class="jxr_linenumber" name="L516" href="#L516">516</a>                     <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> offset1 = alpha - a[1];
<a class="jxr_linenumber" name="L517" href="#L517">517</a>                     <strong class="jxr_keyword">if</strong> (offset0 &lt; offset1) {
<a class="jxr_linenumber" name="L518" href="#L518">518</a>                         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> BoundaryProjection&lt;Sphere1D&gt;(point, <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/oned/S1Point.html">S1Point</a>(a[1]), offset1);
<a class="jxr_linenumber" name="L519" href="#L519">519</a>                     } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L520" href="#L520">520</a>                         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> BoundaryProjection&lt;Sphere1D&gt;(point, <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/oned/S1Point.html">S1Point</a>(a[0]), offset0);
<a class="jxr_linenumber" name="L521" href="#L521">521</a>                     }
<a class="jxr_linenumber" name="L522" href="#L522">522</a>                 }
<a class="jxr_linenumber" name="L523" href="#L523">523</a>             }
<a class="jxr_linenumber" name="L524" href="#L524">524</a>             previous = a[1];
<a class="jxr_linenumber" name="L525" href="#L525">525</a>         }
<a class="jxr_linenumber" name="L526" href="#L526">526</a> 
<a class="jxr_linenumber" name="L527" href="#L527">527</a>         <strong class="jxr_keyword">if</strong> (Double.isNaN(previous)) {
<a class="jxr_linenumber" name="L528" href="#L528">528</a> 
<a class="jxr_linenumber" name="L529" href="#L529">529</a>             <em class="jxr_comment">// there are no points at all in the arcs set</em>
<a class="jxr_linenumber" name="L530" href="#L530">530</a>             <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> BoundaryProjection&lt;Sphere1D&gt;(point, <strong class="jxr_keyword">null</strong>, MathUtils.TWO_PI);
<a class="jxr_linenumber" name="L531" href="#L531">531</a> 
<a class="jxr_linenumber" name="L532" href="#L532">532</a>         } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L533" href="#L533">533</a> 
<a class="jxr_linenumber" name="L534" href="#L534">534</a>             <em class="jxr_comment">// the test point if before first arc and after last arc,</em>
<a class="jxr_linenumber" name="L535" href="#L535">535</a>             <em class="jxr_comment">// somewhere around the 0/2 \pi crossing</em>
<a class="jxr_linenumber" name="L536" href="#L536">536</a>             <strong class="jxr_keyword">if</strong> (wrapFirst) {
<a class="jxr_linenumber" name="L537" href="#L537">537</a>                 <em class="jxr_comment">// the test point is between 0 and first</em>
<a class="jxr_linenumber" name="L538" href="#L538">538</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> previousOffset = alpha - (previous - MathUtils.TWO_PI);
<a class="jxr_linenumber" name="L539" href="#L539">539</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> currentOffset  = first - alpha;
<a class="jxr_linenumber" name="L540" href="#L540">540</a>                 <strong class="jxr_keyword">if</strong> (previousOffset &lt; currentOffset) {
<a class="jxr_linenumber" name="L541" href="#L541">541</a>                     <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> BoundaryProjection&lt;Sphere1D&gt;(point, <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/oned/S1Point.html">S1Point</a>(previous), previousOffset);
<a class="jxr_linenumber" name="L542" href="#L542">542</a>                 } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L543" href="#L543">543</a>                     <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> BoundaryProjection&lt;Sphere1D&gt;(point, <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/oned/S1Point.html">S1Point</a>(first), currentOffset);
<a class="jxr_linenumber" name="L544" href="#L544">544</a>                 }
<a class="jxr_linenumber" name="L545" href="#L545">545</a>             } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L546" href="#L546">546</a>                 <em class="jxr_comment">// the test point is between last and 2\pi</em>
<a class="jxr_linenumber" name="L547" href="#L547">547</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> previousOffset = alpha - previous;
<a class="jxr_linenumber" name="L548" href="#L548">548</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> currentOffset  = first + MathUtils.TWO_PI - alpha;
<a class="jxr_linenumber" name="L549" href="#L549">549</a>                 <strong class="jxr_keyword">if</strong> (previousOffset &lt; currentOffset) {
<a class="jxr_linenumber" name="L550" href="#L550">550</a>                     <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> BoundaryProjection&lt;Sphere1D&gt;(point, <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/oned/S1Point.html">S1Point</a>(previous), previousOffset);
<a class="jxr_linenumber" name="L551" href="#L551">551</a>                 } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L552" href="#L552">552</a>                     <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> BoundaryProjection&lt;Sphere1D&gt;(point, <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/oned/S1Point.html">S1Point</a>(first), currentOffset);
<a class="jxr_linenumber" name="L553" href="#L553">553</a>                 }
<a class="jxr_linenumber" name="L554" href="#L554">554</a>             }
<a class="jxr_linenumber" name="L555" href="#L555">555</a> 
<a class="jxr_linenumber" name="L556" href="#L556">556</a>         }
<a class="jxr_linenumber" name="L557" href="#L557">557</a> 
<a class="jxr_linenumber" name="L558" href="#L558">558</a>     }
<a class="jxr_linenumber" name="L559" href="#L559">559</a> 
<a class="jxr_linenumber" name="L560" href="#L560">560</a>     <em class="jxr_javadoccomment">/** Build an ordered list of arcs representing the instance.</em>
<a class="jxr_linenumber" name="L561" href="#L561">561</a> <em class="jxr_javadoccomment">     * &lt;p&gt;This method builds this arcs set as an ordered list of</em>
<a class="jxr_linenumber" name="L562" href="#L562">562</a> <em class="jxr_javadoccomment">     * {@link Arc Arc} elements. An empty tree will build an empty list</em>
<a class="jxr_linenumber" name="L563" href="#L563">563</a> <em class="jxr_javadoccomment">     * while a tree representing the whole circle will build a one</em>
<a class="jxr_linenumber" name="L564" href="#L564">564</a> <em class="jxr_javadoccomment">     * element list with bounds set to \( 0 and 2 \pi \).&lt;/p&gt;</em>
<a class="jxr_linenumber" name="L565" href="#L565">565</a> <em class="jxr_javadoccomment">     * @return a new ordered list containing {@link Arc Arc} elements</em>
<a class="jxr_linenumber" name="L566" href="#L566">566</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L567" href="#L567">567</a>     <strong class="jxr_keyword">public</strong> List&lt;Arc&gt; asList() {
<a class="jxr_linenumber" name="L568" href="#L568">568</a>         <strong class="jxr_keyword">final</strong> List&lt;Arc&gt; list = <strong class="jxr_keyword">new</strong> ArrayList&lt;Arc&gt;();
<a class="jxr_linenumber" name="L569" href="#L569">569</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] a : <strong class="jxr_keyword">this</strong>) {
<a class="jxr_linenumber" name="L570" href="#L570">570</a>             list.add(<strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/oned/Arc.html">Arc</a>(a[0], a[1], getTolerance()));
<a class="jxr_linenumber" name="L571" href="#L571">571</a>         }
<a class="jxr_linenumber" name="L572" href="#L572">572</a>         <strong class="jxr_keyword">return</strong> list;
<a class="jxr_linenumber" name="L573" href="#L573">573</a>     }
<a class="jxr_linenumber" name="L574" href="#L574">574</a> 
<a class="jxr_linenumber" name="L575" href="#L575">575</a>     <em class="jxr_javadoccomment">/** {@inheritDoc}</em>
<a class="jxr_linenumber" name="L576" href="#L576">576</a> <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L577" href="#L577">577</a> <em class="jxr_javadoccomment">     * The iterator returns the limit angles pairs of sub-arcs in trigonometric order.</em>
<a class="jxr_linenumber" name="L578" href="#L578">578</a> <em class="jxr_javadoccomment">     * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L579" href="#L579">579</a> <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L580" href="#L580">580</a> <em class="jxr_javadoccomment">     * The iterator does &lt;em&gt;not&lt;/em&gt; support the optional {@code remove} operation.</em>
<a class="jxr_linenumber" name="L581" href="#L581">581</a> <em class="jxr_javadoccomment">     * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L582" href="#L582">582</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L583" href="#L583">583</a>     <strong class="jxr_keyword">public</strong> Iterator&lt;<strong class="jxr_keyword">double</strong>[]&gt; iterator() {
<a class="jxr_linenumber" name="L584" href="#L584">584</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/oned/ArcsSet.html">SubArcsIterator</a>();
<a class="jxr_linenumber" name="L585" href="#L585">585</a>     }
<a class="jxr_linenumber" name="L586" href="#L586">586</a> 
<a class="jxr_linenumber" name="L587" href="#L587">587</a>     <em class="jxr_javadoccomment">/** Local iterator for sub-arcs. */</em>
<a class="jxr_linenumber" name="L588" href="#L588">588</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/oned/ArcsSet.html">SubArcsIterator</a> <strong class="jxr_keyword">implements</strong> Iterator&lt;<strong class="jxr_keyword">double</strong>[]&gt; {
<a class="jxr_linenumber" name="L589" href="#L589">589</a> 
<a class="jxr_linenumber" name="L590" href="#L590">590</a>         <em class="jxr_javadoccomment">/** Start of the first arc. */</em>
<a class="jxr_linenumber" name="L591" href="#L591">591</a>         <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> BSPTree&lt;Sphere1D&gt; firstStart;
<a class="jxr_linenumber" name="L592" href="#L592">592</a> 
<a class="jxr_linenumber" name="L593" href="#L593">593</a>         <em class="jxr_javadoccomment">/** Current node. */</em>
<a class="jxr_linenumber" name="L594" href="#L594">594</a>         <strong class="jxr_keyword">private</strong> BSPTree&lt;Sphere1D&gt; current;
<a class="jxr_linenumber" name="L595" href="#L595">595</a> 
<a class="jxr_linenumber" name="L596" href="#L596">596</a>         <em class="jxr_javadoccomment">/** Sub-arc no yet returned. */</em>
<a class="jxr_linenumber" name="L597" href="#L597">597</a>         <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">double</strong>[] pending;
<a class="jxr_linenumber" name="L598" href="#L598">598</a> 
<a class="jxr_linenumber" name="L599" href="#L599">599</a>         <em class="jxr_javadoccomment">/** Simple constructor.</em>
<a class="jxr_linenumber" name="L600" href="#L600">600</a> <em class="jxr_javadoccomment">         */</em>
<a class="jxr_linenumber" name="L601" href="#L601">601</a>         <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/oned/ArcsSet.html">SubArcsIterator</a>() {
<a class="jxr_linenumber" name="L602" href="#L602">602</a> 
<a class="jxr_linenumber" name="L603" href="#L603">603</a>             firstStart = getFirstArcStart();
<a class="jxr_linenumber" name="L604" href="#L604">604</a>             current    = firstStart;
<a class="jxr_linenumber" name="L605" href="#L605">605</a> 
<a class="jxr_linenumber" name="L606" href="#L606">606</a>             <strong class="jxr_keyword">if</strong> (firstStart == <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L607" href="#L607">607</a>                 <em class="jxr_comment">// all the leaf tree nodes share the same inside/outside status</em>
<a class="jxr_linenumber" name="L608" href="#L608">608</a>                 <strong class="jxr_keyword">if</strong> ((Boolean) getFirstLeaf(getTree(false)).getAttribute()) {
<a class="jxr_linenumber" name="L609" href="#L609">609</a>                     <em class="jxr_comment">// it is an inside node, it represents the full circle</em>
<a class="jxr_linenumber" name="L610" href="#L610">610</a>                     pending = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {
<a class="jxr_linenumber" name="L611" href="#L611">611</a>                         0, MathUtils.TWO_PI
<a class="jxr_linenumber" name="L612" href="#L612">612</a>                     };
<a class="jxr_linenumber" name="L613" href="#L613">613</a>                 } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L614" href="#L614">614</a>                     pending = <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L615" href="#L615">615</a>                 }
<a class="jxr_linenumber" name="L616" href="#L616">616</a>             } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L617" href="#L617">617</a>                 selectPending();
<a class="jxr_linenumber" name="L618" href="#L618">618</a>             }
<a class="jxr_linenumber" name="L619" href="#L619">619</a>         }
<a class="jxr_linenumber" name="L620" href="#L620">620</a> 
<a class="jxr_linenumber" name="L621" href="#L621">621</a>         <em class="jxr_javadoccomment">/** Walk the tree to select the pending sub-arc.</em>
<a class="jxr_linenumber" name="L622" href="#L622">622</a> <em class="jxr_javadoccomment">         */</em>
<a class="jxr_linenumber" name="L623" href="#L623">623</a>         <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">void</strong> selectPending() {
<a class="jxr_linenumber" name="L624" href="#L624">624</a> 
<a class="jxr_linenumber" name="L625" href="#L625">625</a>             <em class="jxr_comment">// look for the start of the arc</em>
<a class="jxr_linenumber" name="L626" href="#L626">626</a>             BSPTree&lt;Sphere1D&gt; start = current;
<a class="jxr_linenumber" name="L627" href="#L627">627</a>             <strong class="jxr_keyword">while</strong> (start != <strong class="jxr_keyword">null</strong> &amp;&amp; !isArcStart(start)) {
<a class="jxr_linenumber" name="L628" href="#L628">628</a>                 start = nextInternalNode(start);
<a class="jxr_linenumber" name="L629" href="#L629">629</a>             }
<a class="jxr_linenumber" name="L630" href="#L630">630</a> 
<a class="jxr_linenumber" name="L631" href="#L631">631</a>             <strong class="jxr_keyword">if</strong> (start == <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L632" href="#L632">632</a>                 <em class="jxr_comment">// we have exhausted the iterator</em>
<a class="jxr_linenumber" name="L633" href="#L633">633</a>                 current = <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L634" href="#L634">634</a>                 pending = <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L635" href="#L635">635</a>                 <strong class="jxr_keyword">return</strong>;
<a class="jxr_linenumber" name="L636" href="#L636">636</a>             }
<a class="jxr_linenumber" name="L637" href="#L637">637</a> 
<a class="jxr_linenumber" name="L638" href="#L638">638</a>             <em class="jxr_comment">// look for the end of the arc</em>
<a class="jxr_linenumber" name="L639" href="#L639">639</a>             BSPTree&lt;Sphere1D&gt; end = start;
<a class="jxr_linenumber" name="L640" href="#L640">640</a>             <strong class="jxr_keyword">while</strong> (end != <strong class="jxr_keyword">null</strong> &amp;&amp; !isArcEnd(end)) {
<a class="jxr_linenumber" name="L641" href="#L641">641</a>                 end = nextInternalNode(end);
<a class="jxr_linenumber" name="L642" href="#L642">642</a>             }
<a class="jxr_linenumber" name="L643" href="#L643">643</a> 
<a class="jxr_linenumber" name="L644" href="#L644">644</a>             <strong class="jxr_keyword">if</strong> (end != <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L645" href="#L645">645</a> 
<a class="jxr_linenumber" name="L646" href="#L646">646</a>                 <em class="jxr_comment">// we have identified the arc</em>
<a class="jxr_linenumber" name="L647" href="#L647">647</a>                 pending = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {
<a class="jxr_linenumber" name="L648" href="#L648">648</a>                     getAngle(start), getAngle(end)
<a class="jxr_linenumber" name="L649" href="#L649">649</a>                 };
<a class="jxr_linenumber" name="L650" href="#L650">650</a> 
<a class="jxr_linenumber" name="L651" href="#L651">651</a>                 <em class="jxr_comment">// prepare search for next arc</em>
<a class="jxr_linenumber" name="L652" href="#L652">652</a>                 current = end;
<a class="jxr_linenumber" name="L653" href="#L653">653</a> 
<a class="jxr_linenumber" name="L654" href="#L654">654</a>             } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L655" href="#L655">655</a> 
<a class="jxr_linenumber" name="L656" href="#L656">656</a>                 <em class="jxr_comment">// the final arc wraps around 2\pi, its end is before the first start</em>
<a class="jxr_linenumber" name="L657" href="#L657">657</a>                 end = firstStart;
<a class="jxr_linenumber" name="L658" href="#L658">658</a>                 <strong class="jxr_keyword">while</strong> (end != <strong class="jxr_keyword">null</strong> &amp;&amp; !isArcEnd(end)) {
<a class="jxr_linenumber" name="L659" href="#L659">659</a>                     end = previousInternalNode(end);
<a class="jxr_linenumber" name="L660" href="#L660">660</a>                 }
<a class="jxr_linenumber" name="L661" href="#L661">661</a>                 <strong class="jxr_keyword">if</strong> (end == <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L662" href="#L662">662</a>                     <em class="jxr_comment">// this should never happen</em>
<a class="jxr_linenumber" name="L663" href="#L663">663</a>                     <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/exception/MathInternalError.html">MathInternalError</a>();
<a class="jxr_linenumber" name="L664" href="#L664">664</a>                 }
<a class="jxr_linenumber" name="L665" href="#L665">665</a> 
<a class="jxr_linenumber" name="L666" href="#L666">666</a>                 <em class="jxr_comment">// we have identified the last arc</em>
<a class="jxr_linenumber" name="L667" href="#L667">667</a>                 pending = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {
<a class="jxr_linenumber" name="L668" href="#L668">668</a>                     getAngle(start), getAngle(end) + MathUtils.TWO_PI
<a class="jxr_linenumber" name="L669" href="#L669">669</a>                 };
<a class="jxr_linenumber" name="L670" href="#L670">670</a> 
<a class="jxr_linenumber" name="L671" href="#L671">671</a>                 <em class="jxr_comment">// there won't be any other arcs</em>
<a class="jxr_linenumber" name="L672" href="#L672">672</a>                 current = <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L673" href="#L673">673</a> 
<a class="jxr_linenumber" name="L674" href="#L674">674</a>             }
<a class="jxr_linenumber" name="L675" href="#L675">675</a> 
<a class="jxr_linenumber" name="L676" href="#L676">676</a>         }
<a class="jxr_linenumber" name="L677" href="#L677">677</a> 
<a class="jxr_linenumber" name="L678" href="#L678">678</a>         <em class="jxr_javadoccomment">/** {@inheritDoc} */</em>
<a class="jxr_linenumber" name="L679" href="#L679">679</a>         <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">boolean</strong> hasNext() {
<a class="jxr_linenumber" name="L680" href="#L680">680</a>             <strong class="jxr_keyword">return</strong> pending != <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L681" href="#L681">681</a>         }
<a class="jxr_linenumber" name="L682" href="#L682">682</a> 
<a class="jxr_linenumber" name="L683" href="#L683">683</a>         <em class="jxr_javadoccomment">/** {@inheritDoc} */</em>
<a class="jxr_linenumber" name="L684" href="#L684">684</a>         <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">double</strong>[] next() {
<a class="jxr_linenumber" name="L685" href="#L685">685</a>             <strong class="jxr_keyword">if</strong> (pending == <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L686" href="#L686">686</a>                 <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> NoSuchElementException();
<a class="jxr_linenumber" name="L687" href="#L687">687</a>             }
<a class="jxr_linenumber" name="L688" href="#L688">688</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] next = pending;
<a class="jxr_linenumber" name="L689" href="#L689">689</a>             selectPending();
<a class="jxr_linenumber" name="L690" href="#L690">690</a>             <strong class="jxr_keyword">return</strong> next;
<a class="jxr_linenumber" name="L691" href="#L691">691</a>         }
<a class="jxr_linenumber" name="L692" href="#L692">692</a> 
<a class="jxr_linenumber" name="L693" href="#L693">693</a>         <em class="jxr_javadoccomment">/** {@inheritDoc} */</em>
<a class="jxr_linenumber" name="L694" href="#L694">694</a>         <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> remove() {
<a class="jxr_linenumber" name="L695" href="#L695">695</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> UnsupportedOperationException();
<a class="jxr_linenumber" name="L696" href="#L696">696</a>         }
<a class="jxr_linenumber" name="L697" href="#L697">697</a> 
<a class="jxr_linenumber" name="L698" href="#L698">698</a>     }
<a class="jxr_linenumber" name="L699" href="#L699">699</a> 
<a class="jxr_linenumber" name="L700" href="#L700">700</a>     <em class="jxr_javadoccomment">/** Compute the relative position of the instance with respect</em>
<a class="jxr_linenumber" name="L701" href="#L701">701</a> <em class="jxr_javadoccomment">     * to an arc.</em>
<a class="jxr_linenumber" name="L702" href="#L702">702</a> <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L703" href="#L703">703</a> <em class="jxr_javadoccomment">     * The {@link Side#MINUS} side of the arc is the one covered by the arc.</em>
<a class="jxr_linenumber" name="L704" href="#L704">704</a> <em class="jxr_javadoccomment">     * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L705" href="#L705">705</a> <em class="jxr_javadoccomment">     * @param arc arc to check instance against</em>
<a class="jxr_linenumber" name="L706" href="#L706">706</a> <em class="jxr_javadoccomment">     * @return one of {@link Side#PLUS}, {@link Side#MINUS}, {@link Side#BOTH}</em>
<a class="jxr_linenumber" name="L707" href="#L707">707</a> <em class="jxr_javadoccomment">     * or {@link Side#HYPER}</em>
<a class="jxr_linenumber" name="L708" href="#L708">708</a> <em class="jxr_javadoccomment">     * @deprecated as of 3.6, replaced with {@link #split(Arc)}.{@link Split#getSide()}</em>
<a class="jxr_linenumber" name="L709" href="#L709">709</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L710" href="#L710">710</a>     @Deprecated
<a class="jxr_linenumber" name="L711" href="#L711">711</a>     <strong class="jxr_keyword">public</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/partitioning/Side.html">Side</a> side(<strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/oned/Arc.html">Arc</a> arc) {
<a class="jxr_linenumber" name="L712" href="#L712">712</a>         <strong class="jxr_keyword">return</strong> split(arc).getSide();
<a class="jxr_linenumber" name="L713" href="#L713">713</a>     }
<a class="jxr_linenumber" name="L714" href="#L714">714</a> 
<a class="jxr_linenumber" name="L715" href="#L715">715</a>     <em class="jxr_javadoccomment">/** Split the instance in two parts by an arc.</em>
<a class="jxr_linenumber" name="L716" href="#L716">716</a> <em class="jxr_javadoccomment">     * @param arc splitting arc</em>
<a class="jxr_linenumber" name="L717" href="#L717">717</a> <em class="jxr_javadoccomment">     * @return an object containing both the part of the instance</em>
<a class="jxr_linenumber" name="L718" href="#L718">718</a> <em class="jxr_javadoccomment">     * on the plus side of the arc and the part of the</em>
<a class="jxr_linenumber" name="L719" href="#L719">719</a> <em class="jxr_javadoccomment">     * instance on the minus side of the arc</em>
<a class="jxr_linenumber" name="L720" href="#L720">720</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L721" href="#L721">721</a>     <strong class="jxr_keyword">public</strong> <a href="../../../../../../../org/apache/commons/math3/util/FastMath.html">Split</a> split(<strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/oned/Arc.html">Arc</a> arc) {
<a class="jxr_linenumber" name="L722" href="#L722">722</a> 
<a class="jxr_linenumber" name="L723" href="#L723">723</a>         <strong class="jxr_keyword">final</strong> List&lt;Double&gt; minus = <strong class="jxr_keyword">new</strong> ArrayList&lt;Double&gt;();
<a class="jxr_linenumber" name="L724" href="#L724">724</a>         <strong class="jxr_keyword">final</strong> List&lt;Double&gt;  plus = <strong class="jxr_keyword">new</strong> ArrayList&lt;Double&gt;();
<a class="jxr_linenumber" name="L725" href="#L725">725</a> 
<a class="jxr_linenumber" name="L726" href="#L726">726</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> reference = FastMath.PI + arc.getInf();
<a class="jxr_linenumber" name="L727" href="#L727">727</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> arcLength = arc.getSup() - arc.getInf();
<a class="jxr_linenumber" name="L728" href="#L728">728</a> 
<a class="jxr_linenumber" name="L729" href="#L729">729</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] a : <strong class="jxr_keyword">this</strong>) {
<a class="jxr_linenumber" name="L730" href="#L730">730</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> syncedStart = MathUtils.normalizeAngle(a[0], reference) - arc.getInf();
<a class="jxr_linenumber" name="L731" href="#L731">731</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> arcOffset   = a[0] - syncedStart;
<a class="jxr_linenumber" name="L732" href="#L732">732</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> syncedEnd   = a[1] - arcOffset;
<a class="jxr_linenumber" name="L733" href="#L733">733</a>             <strong class="jxr_keyword">if</strong> (syncedStart &lt; arcLength) {
<a class="jxr_linenumber" name="L734" href="#L734">734</a>                 <em class="jxr_comment">// the start point a[0] is in the minus part of the arc</em>
<a class="jxr_linenumber" name="L735" href="#L735">735</a>                 minus.add(a[0]);
<a class="jxr_linenumber" name="L736" href="#L736">736</a>                 <strong class="jxr_keyword">if</strong> (syncedEnd &gt; arcLength) {
<a class="jxr_linenumber" name="L737" href="#L737">737</a>                     <em class="jxr_comment">// the end point a[1] is past the end of the arc</em>
<a class="jxr_linenumber" name="L738" href="#L738">738</a>                     <em class="jxr_comment">// so we leave the minus part and enter the plus part</em>
<a class="jxr_linenumber" name="L739" href="#L739">739</a>                     <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> minusToPlus = arcLength + arcOffset;
<a class="jxr_linenumber" name="L740" href="#L740">740</a>                     minus.add(minusToPlus);
<a class="jxr_linenumber" name="L741" href="#L741">741</a>                     plus.add(minusToPlus);
<a class="jxr_linenumber" name="L742" href="#L742">742</a>                     <strong class="jxr_keyword">if</strong> (syncedEnd &gt; MathUtils.TWO_PI) {
<a class="jxr_linenumber" name="L743" href="#L743">743</a>                         <em class="jxr_comment">// in fact the end point a[1] goes far enough that we</em>
<a class="jxr_linenumber" name="L744" href="#L744">744</a>                         <em class="jxr_comment">// leave the plus part of the arc and enter the minus part again</em>
<a class="jxr_linenumber" name="L745" href="#L745">745</a>                         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> plusToMinus = MathUtils.TWO_PI + arcOffset;
<a class="jxr_linenumber" name="L746" href="#L746">746</a>                         plus.add(plusToMinus);
<a class="jxr_linenumber" name="L747" href="#L747">747</a>                         minus.add(plusToMinus);
<a class="jxr_linenumber" name="L748" href="#L748">748</a>                         minus.add(a[1]);
<a class="jxr_linenumber" name="L749" href="#L749">749</a>                     } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L750" href="#L750">750</a>                         <em class="jxr_comment">// the end point a[1] is in the plus part of the arc</em>
<a class="jxr_linenumber" name="L751" href="#L751">751</a>                         plus.add(a[1]);
<a class="jxr_linenumber" name="L752" href="#L752">752</a>                     }
<a class="jxr_linenumber" name="L753" href="#L753">753</a>                 } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L754" href="#L754">754</a>                     <em class="jxr_comment">// the end point a[1] is in the minus part of the arc</em>
<a class="jxr_linenumber" name="L755" href="#L755">755</a>                     minus.add(a[1]);
<a class="jxr_linenumber" name="L756" href="#L756">756</a>                 }
<a class="jxr_linenumber" name="L757" href="#L757">757</a>             } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L758" href="#L758">758</a>                 <em class="jxr_comment">// the start point a[0] is in the plus part of the arc</em>
<a class="jxr_linenumber" name="L759" href="#L759">759</a>                 plus.add(a[0]);
<a class="jxr_linenumber" name="L760" href="#L760">760</a>                 <strong class="jxr_keyword">if</strong> (syncedEnd &gt; MathUtils.TWO_PI) {
<a class="jxr_linenumber" name="L761" href="#L761">761</a>                     <em class="jxr_comment">// the end point a[1] wraps around to the start of the arc</em>
<a class="jxr_linenumber" name="L762" href="#L762">762</a>                     <em class="jxr_comment">// so we leave the plus part and enter the minus part</em>
<a class="jxr_linenumber" name="L763" href="#L763">763</a>                     <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> plusToMinus = MathUtils.TWO_PI + arcOffset;
<a class="jxr_linenumber" name="L764" href="#L764">764</a>                     plus.add(plusToMinus);
<a class="jxr_linenumber" name="L765" href="#L765">765</a>                     minus.add(plusToMinus);
<a class="jxr_linenumber" name="L766" href="#L766">766</a>                     <strong class="jxr_keyword">if</strong> (syncedEnd &gt; MathUtils.TWO_PI + arcLength) {
<a class="jxr_linenumber" name="L767" href="#L767">767</a>                         <em class="jxr_comment">// in fact the end point a[1] goes far enough that we</em>
<a class="jxr_linenumber" name="L768" href="#L768">768</a>                         <em class="jxr_comment">// leave the minus part of the arc and enter the plus part again</em>
<a class="jxr_linenumber" name="L769" href="#L769">769</a>                         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> minusToPlus = MathUtils.TWO_PI + arcLength + arcOffset;
<a class="jxr_linenumber" name="L770" href="#L770">770</a>                         minus.add(minusToPlus);
<a class="jxr_linenumber" name="L771" href="#L771">771</a>                         plus.add(minusToPlus);
<a class="jxr_linenumber" name="L772" href="#L772">772</a>                         plus.add(a[1]);
<a class="jxr_linenumber" name="L773" href="#L773">773</a>                     } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L774" href="#L774">774</a>                         <em class="jxr_comment">// the end point a[1] is in the minus part of the arc</em>
<a class="jxr_linenumber" name="L775" href="#L775">775</a>                         minus.add(a[1]);
<a class="jxr_linenumber" name="L776" href="#L776">776</a>                     }
<a class="jxr_linenumber" name="L777" href="#L777">777</a>                 } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L778" href="#L778">778</a>                     <em class="jxr_comment">// the end point a[1] is in the plus part of the arc</em>
<a class="jxr_linenumber" name="L779" href="#L779">779</a>                     plus.add(a[1]);
<a class="jxr_linenumber" name="L780" href="#L780">780</a>                 }
<a class="jxr_linenumber" name="L781" href="#L781">781</a>             }
<a class="jxr_linenumber" name="L782" href="#L782">782</a>         }
<a class="jxr_linenumber" name="L783" href="#L783">783</a> 
<a class="jxr_linenumber" name="L784" href="#L784">784</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/util/FastMath.html">Split</a>(createSplitPart(plus), createSplitPart(minus));
<a class="jxr_linenumber" name="L785" href="#L785">785</a> 
<a class="jxr_linenumber" name="L786" href="#L786">786</a>     }
<a class="jxr_linenumber" name="L787" href="#L787">787</a> 
<a class="jxr_linenumber" name="L788" href="#L788">788</a>     <em class="jxr_javadoccomment">/** Add an arc limit to a BSP tree under construction.</em>
<a class="jxr_linenumber" name="L789" href="#L789">789</a> <em class="jxr_javadoccomment">     * @param tree BSP tree under construction</em>
<a class="jxr_linenumber" name="L790" href="#L790">790</a> <em class="jxr_javadoccomment">     * @param alpha arc limit</em>
<a class="jxr_linenumber" name="L791" href="#L791">791</a> <em class="jxr_javadoccomment">     * @param isStart if true, the limit is the start of an arc</em>
<a class="jxr_linenumber" name="L792" href="#L792">792</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L793" href="#L793">793</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">void</strong> addArcLimit(<strong class="jxr_keyword">final</strong> BSPTree&lt;Sphere1D&gt; tree, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> alpha, <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">boolean</strong> isStart) {
<a class="jxr_linenumber" name="L794" href="#L794">794</a> 
<a class="jxr_linenumber" name="L795" href="#L795">795</a>         <strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/oned/LimitAngle.html">LimitAngle</a> limit = <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/oned/LimitAngle.html">LimitAngle</a>(<strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/oned/S1Point.html">S1Point</a>(alpha), !isStart, getTolerance());
<a class="jxr_linenumber" name="L796" href="#L796">796</a>         <strong class="jxr_keyword">final</strong> BSPTree&lt;Sphere1D&gt; node = tree.getCell(limit.getLocation(), getTolerance());
<a class="jxr_linenumber" name="L797" href="#L797">797</a>         <strong class="jxr_keyword">if</strong> (node.getCut() != <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L798" href="#L798">798</a>             <em class="jxr_comment">// this should never happen</em>
<a class="jxr_linenumber" name="L799" href="#L799">799</a>             <strong class="jxr_keyword">throw</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/exception/MathInternalError.html">MathInternalError</a>();
<a class="jxr_linenumber" name="L800" href="#L800">800</a>         }
<a class="jxr_linenumber" name="L801" href="#L801">801</a> 
<a class="jxr_linenumber" name="L802" href="#L802">802</a>         node.insertCut(limit);
<a class="jxr_linenumber" name="L803" href="#L803">803</a>         node.setAttribute(<strong class="jxr_keyword">null</strong>);
<a class="jxr_linenumber" name="L804" href="#L804">804</a>         node.getPlus().setAttribute(Boolean.FALSE);
<a class="jxr_linenumber" name="L805" href="#L805">805</a>         node.getMinus().setAttribute(Boolean.TRUE);
<a class="jxr_linenumber" name="L806" href="#L806">806</a> 
<a class="jxr_linenumber" name="L807" href="#L807">807</a>     }
<a class="jxr_linenumber" name="L808" href="#L808">808</a> 
<a class="jxr_linenumber" name="L809" href="#L809">809</a>     <em class="jxr_javadoccomment">/** Create a split part.</em>
<a class="jxr_linenumber" name="L810" href="#L810">810</a> <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L811" href="#L811">811</a> <em class="jxr_javadoccomment">     * As per construction, the list of limit angles is known to have</em>
<a class="jxr_linenumber" name="L812" href="#L812">812</a> <em class="jxr_javadoccomment">     * an even number of entries, with start angles at even indices and</em>
<a class="jxr_linenumber" name="L813" href="#L813">813</a> <em class="jxr_javadoccomment">     * end angles at odd indices.</em>
<a class="jxr_linenumber" name="L814" href="#L814">814</a> <em class="jxr_javadoccomment">     * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L815" href="#L815">815</a> <em class="jxr_javadoccomment">     * @param limits limit angles of the split part</em>
<a class="jxr_linenumber" name="L816" href="#L816">816</a> <em class="jxr_javadoccomment">     * @return split part (may be null)</em>
<a class="jxr_linenumber" name="L817" href="#L817">817</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L818" href="#L818">818</a>     <strong class="jxr_keyword">private</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/oned/ArcsSet.html">ArcsSet</a> createSplitPart(<strong class="jxr_keyword">final</strong> List&lt;Double&gt; limits) {
<a class="jxr_linenumber" name="L819" href="#L819">819</a>         <strong class="jxr_keyword">if</strong> (limits.isEmpty()) {
<a class="jxr_linenumber" name="L820" href="#L820">820</a>             <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L821" href="#L821">821</a>         } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L822" href="#L822">822</a> 
<a class="jxr_linenumber" name="L823" href="#L823">823</a>             <em class="jxr_comment">// collapse close limit angles</em>
<a class="jxr_linenumber" name="L824" href="#L824">824</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; limits.size(); ++i) {
<a class="jxr_linenumber" name="L825" href="#L825">825</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong>    j  = (i + 1) % limits.size();
<a class="jxr_linenumber" name="L826" href="#L826">826</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> lA = limits.get(i);
<a class="jxr_linenumber" name="L827" href="#L827">827</a>                 <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> lB = MathUtils.normalizeAngle(limits.get(j), lA);
<a class="jxr_linenumber" name="L828" href="#L828">828</a>                 <strong class="jxr_keyword">if</strong> (FastMath.abs(lB - lA) &lt;= getTolerance()) {
<a class="jxr_linenumber" name="L829" href="#L829">829</a>                     <em class="jxr_comment">// the two limits are too close to each other, we remove both of them</em>
<a class="jxr_linenumber" name="L830" href="#L830">830</a>                     <strong class="jxr_keyword">if</strong> (j &gt; 0) {
<a class="jxr_linenumber" name="L831" href="#L831">831</a>                         <em class="jxr_comment">// regular case, the two entries are consecutive ones</em>
<a class="jxr_linenumber" name="L832" href="#L832">832</a>                         limits.remove(j);
<a class="jxr_linenumber" name="L833" href="#L833">833</a>                         limits.remove(i);
<a class="jxr_linenumber" name="L834" href="#L834">834</a>                         i = i - 1;
<a class="jxr_linenumber" name="L835" href="#L835">835</a>                     } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L836" href="#L836">836</a>                         <em class="jxr_comment">// special case, i the the last entry and j is the first entry</em>
<a class="jxr_linenumber" name="L837" href="#L837">837</a>                         <em class="jxr_comment">// we have wrapped around list end</em>
<a class="jxr_linenumber" name="L838" href="#L838">838</a>                         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> lEnd   = limits.remove(limits.size() - 1);
<a class="jxr_linenumber" name="L839" href="#L839">839</a>                         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> lStart = limits.remove(0);
<a class="jxr_linenumber" name="L840" href="#L840">840</a>                         <strong class="jxr_keyword">if</strong> (limits.isEmpty()) {
<a class="jxr_linenumber" name="L841" href="#L841">841</a>                             <em class="jxr_comment">// the ends were the only limits, is it a full circle or an empty circle?</em>
<a class="jxr_linenumber" name="L842" href="#L842">842</a>                             <strong class="jxr_keyword">if</strong> (lEnd - lStart &gt; FastMath.PI) {
<a class="jxr_linenumber" name="L843" href="#L843">843</a>                                 <em class="jxr_comment">// it was full circle</em>
<a class="jxr_linenumber" name="L844" href="#L844">844</a>                                 <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/oned/ArcsSet.html">ArcsSet</a>(<strong class="jxr_keyword">new</strong> BSPTree&lt;Sphere1D&gt;(Boolean.TRUE), getTolerance());
<a class="jxr_linenumber" name="L845" href="#L845">845</a>                             } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L846" href="#L846">846</a>                                 <em class="jxr_comment">// it was an empty circle</em>
<a class="jxr_linenumber" name="L847" href="#L847">847</a>                                 <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L848" href="#L848">848</a>                             }
<a class="jxr_linenumber" name="L849" href="#L849">849</a>                         } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L850" href="#L850">850</a>                             <em class="jxr_comment">// we have removed the first interval start, so our list</em>
<a class="jxr_linenumber" name="L851" href="#L851">851</a>                             <em class="jxr_comment">// currently starts with an interval end, which is wrong</em>
<a class="jxr_linenumber" name="L852" href="#L852">852</a>                             <em class="jxr_comment">// we need to move this interval end to the end of the list</em>
<a class="jxr_linenumber" name="L853" href="#L853">853</a>                             limits.add(limits.remove(0) + MathUtils.TWO_PI);
<a class="jxr_linenumber" name="L854" href="#L854">854</a>                         }
<a class="jxr_linenumber" name="L855" href="#L855">855</a>                     }
<a class="jxr_linenumber" name="L856" href="#L856">856</a>                 }
<a class="jxr_linenumber" name="L857" href="#L857">857</a>             }
<a class="jxr_linenumber" name="L858" href="#L858">858</a> 
<a class="jxr_linenumber" name="L859" href="#L859">859</a>             <em class="jxr_comment">// build the tree by adding all angular sectors</em>
<a class="jxr_linenumber" name="L860" href="#L860">860</a>             BSPTree&lt;Sphere1D&gt; tree = <strong class="jxr_keyword">new</strong> BSPTree&lt;Sphere1D&gt;(Boolean.FALSE);
<a class="jxr_linenumber" name="L861" href="#L861">861</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; limits.size() - 1; i += 2) {
<a class="jxr_linenumber" name="L862" href="#L862">862</a>                 addArcLimit(tree, limits.get(i),     <strong class="jxr_keyword">true</strong>);
<a class="jxr_linenumber" name="L863" href="#L863">863</a>                 addArcLimit(tree, limits.get(i + 1), false);
<a class="jxr_linenumber" name="L864" href="#L864">864</a>             }
<a class="jxr_linenumber" name="L865" href="#L865">865</a> 
<a class="jxr_linenumber" name="L866" href="#L866">866</a>             <strong class="jxr_keyword">if</strong> (tree.getCut() == <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L867" href="#L867">867</a>                 <em class="jxr_comment">// we did not insert anything</em>
<a class="jxr_linenumber" name="L868" href="#L868">868</a>                 <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">null</strong>;
<a class="jxr_linenumber" name="L869" href="#L869">869</a>             }
<a class="jxr_linenumber" name="L870" href="#L870">870</a> 
<a class="jxr_linenumber" name="L871" href="#L871">871</a>             <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/oned/ArcsSet.html">ArcsSet</a>(tree, getTolerance());
<a class="jxr_linenumber" name="L872" href="#L872">872</a> 
<a class="jxr_linenumber" name="L873" href="#L873">873</a>         }
<a class="jxr_linenumber" name="L874" href="#L874">874</a>     }
<a class="jxr_linenumber" name="L875" href="#L875">875</a> 
<a class="jxr_linenumber" name="L876" href="#L876">876</a>     <em class="jxr_javadoccomment">/** Class holding the results of the {@link #split split} method.</em>
<a class="jxr_linenumber" name="L877" href="#L877">877</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L878" href="#L878">878</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../../../org/apache/commons/math3/util/FastMath.html">Split</a> {
<a class="jxr_linenumber" name="L879" href="#L879">879</a> 
<a class="jxr_linenumber" name="L880" href="#L880">880</a>         <em class="jxr_javadoccomment">/** Part of the arcs set on the plus side of the splitting arc. */</em>
<a class="jxr_linenumber" name="L881" href="#L881">881</a>         <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/oned/ArcsSet.html">ArcsSet</a> plus;
<a class="jxr_linenumber" name="L882" href="#L882">882</a> 
<a class="jxr_linenumber" name="L883" href="#L883">883</a>         <em class="jxr_javadoccomment">/** Part of the arcs set on the minus side of the splitting arc. */</em>
<a class="jxr_linenumber" name="L884" href="#L884">884</a>         <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/oned/ArcsSet.html">ArcsSet</a> minus;
<a class="jxr_linenumber" name="L885" href="#L885">885</a> 
<a class="jxr_linenumber" name="L886" href="#L886">886</a>         <em class="jxr_javadoccomment">/** Build a Split from its parts.</em>
<a class="jxr_linenumber" name="L887" href="#L887">887</a> <em class="jxr_javadoccomment">         * @param plus part of the arcs set on the plus side of the</em>
<a class="jxr_linenumber" name="L888" href="#L888">888</a> <em class="jxr_javadoccomment">         * splitting arc</em>
<a class="jxr_linenumber" name="L889" href="#L889">889</a> <em class="jxr_javadoccomment">         * @param minus part of the arcs set on the minus side of the</em>
<a class="jxr_linenumber" name="L890" href="#L890">890</a> <em class="jxr_javadoccomment">         * splitting arc</em>
<a class="jxr_linenumber" name="L891" href="#L891">891</a> <em class="jxr_javadoccomment">         */</em>
<a class="jxr_linenumber" name="L892" href="#L892">892</a>         <strong class="jxr_keyword">private</strong> <a href="../../../../../../../org/apache/commons/math3/util/FastMath.html">Split</a>(<strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/oned/ArcsSet.html">ArcsSet</a> plus, <strong class="jxr_keyword">final</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/oned/ArcsSet.html">ArcsSet</a> minus) {
<a class="jxr_linenumber" name="L893" href="#L893">893</a>             <strong class="jxr_keyword">this</strong>.plus  = plus;
<a class="jxr_linenumber" name="L894" href="#L894">894</a>             <strong class="jxr_keyword">this</strong>.minus = minus;
<a class="jxr_linenumber" name="L895" href="#L895">895</a>         }
<a class="jxr_linenumber" name="L896" href="#L896">896</a> 
<a class="jxr_linenumber" name="L897" href="#L897">897</a>         <em class="jxr_javadoccomment">/** Get the part of the arcs set on the plus side of the splitting arc.</em>
<a class="jxr_linenumber" name="L898" href="#L898">898</a> <em class="jxr_javadoccomment">         * @return part of the arcs set on the plus side of the splitting arc</em>
<a class="jxr_linenumber" name="L899" href="#L899">899</a> <em class="jxr_javadoccomment">         */</em>
<a class="jxr_linenumber" name="L900" href="#L900">900</a>         <strong class="jxr_keyword">public</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/oned/ArcsSet.html">ArcsSet</a> getPlus() {
<a class="jxr_linenumber" name="L901" href="#L901">901</a>             <strong class="jxr_keyword">return</strong> plus;
<a class="jxr_linenumber" name="L902" href="#L902">902</a>         }
<a class="jxr_linenumber" name="L903" href="#L903">903</a> 
<a class="jxr_linenumber" name="L904" href="#L904">904</a>         <em class="jxr_javadoccomment">/** Get the part of the arcs set on the minus side of the splitting arc.</em>
<a class="jxr_linenumber" name="L905" href="#L905">905</a> <em class="jxr_javadoccomment">         * @return part of the arcs set on the minus side of the splitting arc</em>
<a class="jxr_linenumber" name="L906" href="#L906">906</a> <em class="jxr_javadoccomment">         */</em>
<a class="jxr_linenumber" name="L907" href="#L907">907</a>         <strong class="jxr_keyword">public</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/oned/ArcsSet.html">ArcsSet</a> getMinus() {
<a class="jxr_linenumber" name="L908" href="#L908">908</a>             <strong class="jxr_keyword">return</strong> minus;
<a class="jxr_linenumber" name="L909" href="#L909">909</a>         }
<a class="jxr_linenumber" name="L910" href="#L910">910</a> 
<a class="jxr_linenumber" name="L911" href="#L911">911</a>         <em class="jxr_javadoccomment">/** Get the side of the split arc with respect to its splitter.</em>
<a class="jxr_linenumber" name="L912" href="#L912">912</a> <em class="jxr_javadoccomment">         * @return {@link Side#PLUS} if only {@link #getPlus()} returns non-null,</em>
<a class="jxr_linenumber" name="L913" href="#L913">913</a> <em class="jxr_javadoccomment">         * {@link Side#MINUS} if only {@link #getMinus()} returns non-null,</em>
<a class="jxr_linenumber" name="L914" href="#L914">914</a> <em class="jxr_javadoccomment">         * {@link Side#BOTH} if both {@link #getPlus()} and {@link #getMinus()}</em>
<a class="jxr_linenumber" name="L915" href="#L915">915</a> <em class="jxr_javadoccomment">         * return non-null or {@link Side#HYPER} if both {@link #getPlus()} and</em>
<a class="jxr_linenumber" name="L916" href="#L916">916</a> <em class="jxr_javadoccomment">         * {@link #getMinus()} return null</em>
<a class="jxr_linenumber" name="L917" href="#L917">917</a> <em class="jxr_javadoccomment">         * @since 3.6</em>
<a class="jxr_linenumber" name="L918" href="#L918">918</a> <em class="jxr_javadoccomment">         */</em>
<a class="jxr_linenumber" name="L919" href="#L919">919</a>         <strong class="jxr_keyword">public</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/partitioning/Side.html">Side</a> getSide() {
<a class="jxr_linenumber" name="L920" href="#L920">920</a>             <strong class="jxr_keyword">if</strong> (plus != <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L921" href="#L921">921</a>                 <strong class="jxr_keyword">if</strong> (minus != <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L922" href="#L922">922</a>                     <strong class="jxr_keyword">return</strong> Side.BOTH;
<a class="jxr_linenumber" name="L923" href="#L923">923</a>                 } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L924" href="#L924">924</a>                     <strong class="jxr_keyword">return</strong> Side.PLUS;
<a class="jxr_linenumber" name="L925" href="#L925">925</a>                 }
<a class="jxr_linenumber" name="L926" href="#L926">926</a>             } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (minus != <strong class="jxr_keyword">null</strong>) {
<a class="jxr_linenumber" name="L927" href="#L927">927</a>                 <strong class="jxr_keyword">return</strong> Side.MINUS;
<a class="jxr_linenumber" name="L928" href="#L928">928</a>             } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L929" href="#L929">929</a>                 <strong class="jxr_keyword">return</strong> Side.HYPER;
<a class="jxr_linenumber" name="L930" href="#L930">930</a>             }
<a class="jxr_linenumber" name="L931" href="#L931">931</a>         }
<a class="jxr_linenumber" name="L932" href="#L932">932</a> 
<a class="jxr_linenumber" name="L933" href="#L933">933</a>     }
<a class="jxr_linenumber" name="L934" href="#L934">934</a> 
<a class="jxr_linenumber" name="L935" href="#L935">935</a>     <em class="jxr_javadoccomment">/** Specialized exception for inconsistent BSP tree state inconsistency.</em>
<a class="jxr_linenumber" name="L936" href="#L936">936</a> <em class="jxr_javadoccomment">     * &lt;p&gt;</em>
<a class="jxr_linenumber" name="L937" href="#L937">937</a> <em class="jxr_javadoccomment">     * This exception is thrown at {@link ArcsSet} construction time when the</em>
<a class="jxr_linenumber" name="L938" href="#L938">938</a> <em class="jxr_javadoccomment">     * {@link org.apache.commons.math3.geometry.partitioning.Region.Location inside/outside}</em>
<a class="jxr_linenumber" name="L939" href="#L939">939</a> <em class="jxr_javadoccomment">     * state is not consistent at the 0, \(2 \pi \) crossing.</em>
<a class="jxr_linenumber" name="L940" href="#L940">940</a> <em class="jxr_javadoccomment">     * &lt;/p&gt;</em>
<a class="jxr_linenumber" name="L941" href="#L941">941</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L942" href="#L942">942</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/oned/ArcsSet.html">InconsistentStateAt2PiWrapping</a> <strong class="jxr_keyword">extends</strong> <a href="../../../../../../../org/apache/commons/math3/exception/MathIllegalArgumentException.html">MathIllegalArgumentException</a> {
<a class="jxr_linenumber" name="L943" href="#L943">943</a> 
<a class="jxr_linenumber" name="L944" href="#L944">944</a>         <em class="jxr_javadoccomment">/** Serializable UID. */</em>
<a class="jxr_linenumber" name="L945" href="#L945">945</a>         <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">long</strong> serialVersionUID = 20140107L;
<a class="jxr_linenumber" name="L946" href="#L946">946</a> 
<a class="jxr_linenumber" name="L947" href="#L947">947</a>         <em class="jxr_javadoccomment">/** Simple constructor.</em>
<a class="jxr_linenumber" name="L948" href="#L948">948</a> <em class="jxr_javadoccomment">         */</em>
<a class="jxr_linenumber" name="L949" href="#L949">949</a>         <strong class="jxr_keyword">public</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/oned/ArcsSet.html">InconsistentStateAt2PiWrapping</a>() {
<a class="jxr_linenumber" name="L950" href="#L950">950</a>             <strong class="jxr_keyword">super</strong>(LocalizedFormats.INCONSISTENT_STATE_AT_2_PI_WRAPPING);
<a class="jxr_linenumber" name="L951" href="#L951">951</a>         }
<a class="jxr_linenumber" name="L952" href="#L952">952</a> 
<a class="jxr_linenumber" name="L953" href="#L953">953</a>     }
<a class="jxr_linenumber" name="L954" href="#L954">954</a> 
<a class="jxr_linenumber" name="L955" href="#L955">955</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2003&#x2013;2016 <a href="http://www.apache.org/">The Apache Software Foundation</a>. All rights reserved.</div>
</body>
</html>
