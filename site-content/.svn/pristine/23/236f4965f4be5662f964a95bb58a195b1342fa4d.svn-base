<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>KolmogorovSmirnovTestTest xref</title>
<link type="text/css" rel="stylesheet" href="../../../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../testapidocs/org/apache/commons/math3/stat/inference/KolmogorovSmirnovTestTest.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Licensed to the Apache Software Foundation (ASF) under one or more</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> * contributor license agreements.  See the NOTICE file distributed with</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * this work for additional information regarding copyright ownership.</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * The ASF licenses this file to You under the Apache License, Version 2.0</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * (the "License"); you may not use this file except in compliance with</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> * the License.  You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *      <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  <strong class="jxr_keyword">package</strong> org.apache.commons.math3.stat.inference;
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> java.lang.reflect.Method;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  <strong class="jxr_keyword">import</strong> java.util.Arrays;
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.TestUtils;
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.distribution.NormalDistribution;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.distribution.UniformRealDistribution;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.random.RandomGenerator;
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.random.Well19937c;
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.util.CombinatoricsUtils;
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.util.FastMath;
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.util.MathArrays;
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <strong class="jxr_keyword">import</strong> org.junit.Assert;
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <strong class="jxr_keyword">import</strong> org.junit.Test;
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  <em class="jxr_javadoccomment"> * Test cases for {@link KolmogorovSmirnovTest}.</em>
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  <em class="jxr_javadoccomment"> *</em>
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  <em class="jxr_javadoccomment"> * @since 3.3</em>
<a class="jxr_linenumber" name="L38" href="#L38">38</a>  <em class="jxr_javadoccomment"> */</em>
<a class="jxr_linenumber" name="L39" href="#L39">39</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../../org/apache/commons/math3/stat/inference/KolmogorovSmirnovTestTest.html">KolmogorovSmirnovTestTest</a> {
<a class="jxr_linenumber" name="L40" href="#L40">40</a>  
<a class="jxr_linenumber" name="L41" href="#L41">41</a>      <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> TOLERANCE = 10e-10;
<a class="jxr_linenumber" name="L42" href="#L42">42</a>  
<a class="jxr_linenumber" name="L43" href="#L43">43</a>      <em class="jxr_comment">// Random N(0,1) values generated using R rnorm</em>
<a class="jxr_linenumber" name="L44" href="#L44">44</a>      <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] gaussian = {
<a class="jxr_linenumber" name="L45" href="#L45">45</a>          0.26055895, -0.63665233, 1.51221323, 0.61246988, -0.03013003, -1.73025682, -0.51435805, 0.70494168, 0.18242945,
<a class="jxr_linenumber" name="L46" href="#L46">46</a>          0.94734336, -0.04286604, -0.37931719, -1.07026403, -2.05861425, 0.11201862, 0.71400136, -0.52122185,
<a class="jxr_linenumber" name="L47" href="#L47">47</a>          -0.02478725, -1.86811649, -1.79907688, 0.15046279, 1.32390193, 1.55889719, 1.83149171, -0.03948003,
<a class="jxr_linenumber" name="L48" href="#L48">48</a>          -0.98579207, -0.76790540, 0.89080682, 0.19532153, 0.40692841, 0.15047336, -0.58546562, -0.39865469, 0.77604271,
<a class="jxr_linenumber" name="L49" href="#L49">49</a>          -0.65188221, -1.80368554, 0.65273365, -0.75283102, -1.91022150, -0.07640869, -1.08681188, -0.89270600,
<a class="jxr_linenumber" name="L50" href="#L50">50</a>          2.09017508, 0.43907981, 0.10744033, -0.70961218, 1.15707300, 0.44560525, -2.04593349, 0.53816843, -0.08366640,
<a class="jxr_linenumber" name="L51" href="#L51">51</a>          0.24652218, 1.80549401, -0.99220707, -1.14589408, -0.27170290, -0.49696855, 0.00968353, -1.87113545,
<a class="jxr_linenumber" name="L52" href="#L52">52</a>          -1.91116529, 0.97151891, -0.73576115, -0.59437029, 0.72148436, 0.01747695, -0.62601157, -1.00971538,
<a class="jxr_linenumber" name="L53" href="#L53">53</a>          -1.42691397, 1.03250131, -0.30672627, -0.15353992, -1.19976069, -0.68364218, 0.37525652, -0.46592881,
<a class="jxr_linenumber" name="L54" href="#L54">54</a>          -0.52116168, -0.17162202, 1.04679215, 0.25165971, -0.04125231, -0.23756244, -0.93389975, 0.75551407,
<a class="jxr_linenumber" name="L55" href="#L55">55</a>          0.08347445, -0.27482228, -0.4717632, -0.1867746, -0.1166976, 0.5763333, 0.1307952, 0.7630584, -0.3616248,
<a class="jxr_linenumber" name="L56" href="#L56">56</a>          2.1383790, -0.7946630, 0.0231885, 0.7919195, 1.6057144, -0.3802508, 0.1229078, 1.5252901, -0.8543149, 0.3025040
<a class="jxr_linenumber" name="L57" href="#L57">57</a>      };
<a class="jxr_linenumber" name="L58" href="#L58">58</a>  
<a class="jxr_linenumber" name="L59" href="#L59">59</a>      <em class="jxr_comment">// Random N(0, 1.6) values generated using R rnorm</em>
<a class="jxr_linenumber" name="L60" href="#L60">60</a>      <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] gaussian2 = {
<a class="jxr_linenumber" name="L61" href="#L61">61</a>          2.88041498038308, -0.632349445671017, 0.402121295225571, 0.692626364613243, 1.30693446815426,
<a class="jxr_linenumber" name="L62" href="#L62">62</a>          -0.714176317131286, -0.233169206599583, 1.09113298322107, -1.53149079994305, 1.23259966205809,
<a class="jxr_linenumber" name="L63" href="#L63">63</a>          1.01389927412503, 0.0143898711497477, -0.512813545447559, 2.79364360835469, 0.662008875538092,
<a class="jxr_linenumber" name="L64" href="#L64">64</a>          1.04861546834788, -0.321280099931466, 0.250296656278743, 1.75820367603736, -2.31433523590905,
<a class="jxr_linenumber" name="L65" href="#L65">65</a>          -0.462694696086403, 0.187725700950191, -2.24410950019152, 2.83473751105445, 0.252460174391016,
<a class="jxr_linenumber" name="L66" href="#L66">66</a>          1.39051945380281, -1.56270144203134, 0.998522814471644, -1.50147469080896, 0.145307533554146,
<a class="jxr_linenumber" name="L67" href="#L67">67</a>          0.469089457043406, -0.0914780723809334, -0.123446939266548, -0.610513388160565, -3.71548343891957,
<a class="jxr_linenumber" name="L68" href="#L68">68</a>          -0.329577317349478, -0.312973794075871, 2.02051909758923, 2.85214308266271, 0.0193222002327237,
<a class="jxr_linenumber" name="L69" href="#L69">69</a>          -0.0322422268266562, 0.514736012106768, 0.231484953375887, -2.22468798953629, 1.42197716075595,
<a class="jxr_linenumber" name="L70" href="#L70">70</a>          2.69988043856357, 0.0443757119128293, 0.721536984407798, -0.0445688839903234, -0.294372724550705,
<a class="jxr_linenumber" name="L71" href="#L71">71</a>          0.234041580912698, -0.868973119365727, 1.3524893453845, -0.931054600134503, -0.263514296006792,
<a class="jxr_linenumber" name="L72" href="#L72">72</a>          0.540949457402918, -0.882544288773685, -0.34148675747989, 1.56664494810034, 2.19850536566584,
<a class="jxr_linenumber" name="L73" href="#L73">73</a>          -0.667972122928022, -0.70889669526203, -0.00251758193079668, 2.39527162977682, -2.7559594317269,
<a class="jxr_linenumber" name="L74" href="#L74">74</a>          -0.547393502656671, -2.62144031572617, 2.81504147017922, -1.02036850201042, -1.00713927602786,
<a class="jxr_linenumber" name="L75" href="#L75">75</a>          -0.520197775122254, 1.00625480138649, 2.46756916531313, 1.64364743727799, 0.704545210648595,
<a class="jxr_linenumber" name="L76" href="#L76">76</a>          -0.425885789416992, -1.78387854908546, -0.286783886710481, 0.404183648369076, -0.369324280845769,
<a class="jxr_linenumber" name="L77" href="#L77">77</a>          -0.0391185138840443, 2.41257787857293, 2.49744281317859, -0.826964496939021, -0.792555379958975,
<a class="jxr_linenumber" name="L78" href="#L78">78</a>          1.81097685787403, -0.475014580016638, 1.23387615291805, 0.646615294802053, 1.88496377454523, 1.20390698380814,
<a class="jxr_linenumber" name="L79" href="#L79">79</a>          -0.27812153371728, 2.50149494533101, 0.406964323253817, -1.72253451309982, 1.98432494184332, 2.2223658560333,
<a class="jxr_linenumber" name="L80" href="#L80">80</a>          0.393086362404685, -0.504073151377089, -0.0484610869883821
<a class="jxr_linenumber" name="L81" href="#L81">81</a>      };
<a class="jxr_linenumber" name="L82" href="#L82">82</a>  
<a class="jxr_linenumber" name="L83" href="#L83">83</a>      <em class="jxr_comment">// Random uniform (0, 1) generated using R runif</em>
<a class="jxr_linenumber" name="L84" href="#L84">84</a>      <strong class="jxr_keyword">protected</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] uniform = {
<a class="jxr_linenumber" name="L85" href="#L85">85</a>          0.7930305, 0.6424382, 0.8747699, 0.7156518, 0.1845909, 0.2022326, 0.4877206, 0.8928752, 0.2293062, 0.4222006,
<a class="jxr_linenumber" name="L86" href="#L86">86</a>          0.1610459, 0.2830535, 0.9946345, 0.7329499, 0.26411126, 0.87958133, 0.29827437, 0.39185988, 0.38351185,
<a class="jxr_linenumber" name="L87" href="#L87">87</a>          0.36359611, 0.48646472, 0.05577866, 0.56152250, 0.52672013, 0.13171783, 0.95864085, 0.03060207, 0.33514887,
<a class="jxr_linenumber" name="L88" href="#L88">88</a>          0.72508148, 0.38901437, 0.9978665, 0.5981300, 0.1065388, 0.7036991, 0.1071584, 0.4423963, 0.1107071, 0.6437221,
<a class="jxr_linenumber" name="L89" href="#L89">89</a>          0.58523872, 0.05044634, 0.65999539, 0.37367260, 0.73270024, 0.47473755, 0.74661163, 0.50765549, 0.05377347,
<a class="jxr_linenumber" name="L90" href="#L90">90</a>          0.40998009, 0.55235182, 0.21361998, 0.63117971, 0.18109222, 0.89153510, 0.23203248, 0.6177106, 0.6856418,
<a class="jxr_linenumber" name="L91" href="#L91">91</a>          0.2158557, 0.9870501, 0.2036914, 0.2100311, 0.9065020, 0.7459159, 0.56631790, 0.06753629, 0.39684629,
<a class="jxr_linenumber" name="L92" href="#L92">92</a>          0.52504615, 0.14199103, 0.78551120, 0.90503321, 0.80452362, 0.9960115, 0.8172592, 0.5831134, 0.8794187,
<a class="jxr_linenumber" name="L93" href="#L93">93</a>          0.2021501, 0.2923505, 0.9561824, 0.8792248, 0.85201008, 0.02945562, 0.26200374, 0.11382818, 0.17238856,
<a class="jxr_linenumber" name="L94" href="#L94">94</a>          0.36449473, 0.69688273, 0.96216330, 0.4859432, 0.4503438, 0.1917656, 0.8357845, 0.9957812, 0.4633570,
<a class="jxr_linenumber" name="L95" href="#L95">95</a>          0.8654599, 0.4597996, 0.68190289, 0.58887855, 0.09359396, 0.98081979, 0.73659533, 0.89344777, 0.18903099,
<a class="jxr_linenumber" name="L96" href="#L96">96</a>          0.97660425
<a class="jxr_linenumber" name="L97" href="#L97">97</a>      };
<a class="jxr_linenumber" name="L98" href="#L98">98</a>  
<a class="jxr_linenumber" name="L99" href="#L99">99</a>      <em class="jxr_javadoccomment">/** Unit normal distribution, unit normal data */</em>
<a class="jxr_linenumber" name="L100" href="#L100">100</a>     @Test
<a class="jxr_linenumber" name="L101" href="#L101">101</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testOneSampleGaussianGaussian() {
<a class="jxr_linenumber" name="L102" href="#L102">102</a>         <strong class="jxr_keyword">final</strong> KolmogorovSmirnovTest test = <strong class="jxr_keyword">new</strong> KolmogorovSmirnovTest();
<a class="jxr_linenumber" name="L103" href="#L103">103</a>         <strong class="jxr_keyword">final</strong> NormalDistribution unitNormal = <strong class="jxr_keyword">new</strong> NormalDistribution(0d, 1d);
<a class="jxr_linenumber" name="L104" href="#L104">104</a>         <em class="jxr_comment">// Uncomment to run exact test - takes about a minute. Same value is used in R tests and for</em>
<a class="jxr_linenumber" name="L105" href="#L105">105</a>         <em class="jxr_comment">// approx.</em>
<a class="jxr_linenumber" name="L106" href="#L106">106</a>         <em class="jxr_comment">// Assert.assertEquals(0.3172069207622391, test.kolmogorovSmirnovTest(unitNormal, gaussian,</em>
<a class="jxr_linenumber" name="L107" href="#L107">107</a>         <em class="jxr_comment">// true), TOLERANCE);</em>
<a class="jxr_linenumber" name="L108" href="#L108">108</a>         Assert.assertEquals(0.3172069207622391, test.kolmogorovSmirnovTest(unitNormal, gaussian, false), TOLERANCE);
<a class="jxr_linenumber" name="L109" href="#L109">109</a>         Assert.assertFalse(test.kolmogorovSmirnovTest(unitNormal, gaussian, 0.05));
<a class="jxr_linenumber" name="L110" href="#L110">110</a>         Assert.assertEquals(0.0932947561266756, test.kolmogorovSmirnovStatistic(unitNormal, gaussian), TOLERANCE);
<a class="jxr_linenumber" name="L111" href="#L111">111</a>     }
<a class="jxr_linenumber" name="L112" href="#L112">112</a> 
<a class="jxr_linenumber" name="L113" href="#L113">113</a>     <em class="jxr_javadoccomment">/** Unit normal distribution, unit normal data, small dataset */</em>
<a class="jxr_linenumber" name="L114" href="#L114">114</a>     @Test
<a class="jxr_linenumber" name="L115" href="#L115">115</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testOneSampleGaussianGaussianSmallSample() {
<a class="jxr_linenumber" name="L116" href="#L116">116</a>         <strong class="jxr_keyword">final</strong> KolmogorovSmirnovTest test = <strong class="jxr_keyword">new</strong> KolmogorovSmirnovTest();
<a class="jxr_linenumber" name="L117" href="#L117">117</a>         <strong class="jxr_keyword">final</strong> NormalDistribution unitNormal = <strong class="jxr_keyword">new</strong> NormalDistribution(0d, 1d);
<a class="jxr_linenumber" name="L118" href="#L118">118</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] shortGaussian = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[50];
<a class="jxr_linenumber" name="L119" href="#L119">119</a>         System.arraycopy(gaussian, 0, shortGaussian, 0, 50);
<a class="jxr_linenumber" name="L120" href="#L120">120</a>         Assert.assertEquals(0.683736463728347, test.kolmogorovSmirnovTest(unitNormal, shortGaussian, false), TOLERANCE);
<a class="jxr_linenumber" name="L121" href="#L121">121</a>         Assert.assertFalse(test.kolmogorovSmirnovTest(unitNormal, gaussian, 0.05));
<a class="jxr_linenumber" name="L122" href="#L122">122</a>         Assert.assertEquals(0.09820779969463278, test.kolmogorovSmirnovStatistic(unitNormal, shortGaussian), TOLERANCE);
<a class="jxr_linenumber" name="L123" href="#L123">123</a>     }
<a class="jxr_linenumber" name="L124" href="#L124">124</a> 
<a class="jxr_linenumber" name="L125" href="#L125">125</a>     <em class="jxr_javadoccomment">/** Unit normal distribution, uniform data */</em>
<a class="jxr_linenumber" name="L126" href="#L126">126</a>     @Test
<a class="jxr_linenumber" name="L127" href="#L127">127</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testOneSampleGaussianUniform() {
<a class="jxr_linenumber" name="L128" href="#L128">128</a>         <strong class="jxr_keyword">final</strong> KolmogorovSmirnovTest test = <strong class="jxr_keyword">new</strong> KolmogorovSmirnovTest();
<a class="jxr_linenumber" name="L129" href="#L129">129</a>         <strong class="jxr_keyword">final</strong> NormalDistribution unitNormal = <strong class="jxr_keyword">new</strong> NormalDistribution(0d, 1d);
<a class="jxr_linenumber" name="L130" href="#L130">130</a>         <em class="jxr_comment">// Uncomment to run exact test - takes a long time. Same value is used in R tests and for</em>
<a class="jxr_linenumber" name="L131" href="#L131">131</a>         <em class="jxr_comment">// approx.</em>
<a class="jxr_linenumber" name="L132" href="#L132">132</a>         <em class="jxr_comment">// Assert.assertEquals(0.3172069207622391, test.kolmogorovSmirnovTest(unitNormal, uniform,</em>
<a class="jxr_linenumber" name="L133" href="#L133">133</a>         <em class="jxr_comment">// true), TOLERANCE);</em>
<a class="jxr_linenumber" name="L134" href="#L134">134</a>         Assert.assertEquals(8.881784197001252E-16, test.kolmogorovSmirnovTest(unitNormal, uniform, false), TOLERANCE);
<a class="jxr_linenumber" name="L135" href="#L135">135</a>         Assert.assertFalse(test.kolmogorovSmirnovTest(unitNormal, gaussian, 0.05));
<a class="jxr_linenumber" name="L136" href="#L136">136</a>         Assert.assertEquals(0.5117493931609258, test.kolmogorovSmirnovStatistic(unitNormal, uniform), TOLERANCE);
<a class="jxr_linenumber" name="L137" href="#L137">137</a>     }
<a class="jxr_linenumber" name="L138" href="#L138">138</a> 
<a class="jxr_linenumber" name="L139" href="#L139">139</a>     <em class="jxr_javadoccomment">/** Uniform distribution, uniform data */</em>
<a class="jxr_linenumber" name="L140" href="#L140">140</a>     <em class="jxr_comment">// @Test - takes about 6 seconds, uncomment for</em>
<a class="jxr_linenumber" name="L141" href="#L141">141</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testOneSampleUniformUniform() {
<a class="jxr_linenumber" name="L142" href="#L142">142</a>         <strong class="jxr_keyword">final</strong> KolmogorovSmirnovTest test = <strong class="jxr_keyword">new</strong> KolmogorovSmirnovTest();
<a class="jxr_linenumber" name="L143" href="#L143">143</a>         <strong class="jxr_keyword">final</strong> UniformRealDistribution unif = <strong class="jxr_keyword">new</strong> UniformRealDistribution(-0.5, 0.5);
<a class="jxr_linenumber" name="L144" href="#L144">144</a>         Assert.assertEquals(8.881784197001252E-16, test.kolmogorovSmirnovTest(unif, uniform, false), TOLERANCE);
<a class="jxr_linenumber" name="L145" href="#L145">145</a>         Assert.assertTrue(test.kolmogorovSmirnovTest(unif, uniform, 0.05));
<a class="jxr_linenumber" name="L146" href="#L146">146</a>         Assert.assertEquals(0.5400666982352942, test.kolmogorovSmirnovStatistic(unif, uniform), TOLERANCE);
<a class="jxr_linenumber" name="L147" href="#L147">147</a>     }
<a class="jxr_linenumber" name="L148" href="#L148">148</a> 
<a class="jxr_linenumber" name="L149" href="#L149">149</a>     <em class="jxr_javadoccomment">/** Uniform distribution, uniform data, small dataset */</em>
<a class="jxr_linenumber" name="L150" href="#L150">150</a>     @Test
<a class="jxr_linenumber" name="L151" href="#L151">151</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testOneSampleUniformUniformSmallSample() {
<a class="jxr_linenumber" name="L152" href="#L152">152</a>         <strong class="jxr_keyword">final</strong> KolmogorovSmirnovTest test = <strong class="jxr_keyword">new</strong> KolmogorovSmirnovTest();
<a class="jxr_linenumber" name="L153" href="#L153">153</a>         <strong class="jxr_keyword">final</strong> UniformRealDistribution unif = <strong class="jxr_keyword">new</strong> UniformRealDistribution(-0.5, 0.5);
<a class="jxr_linenumber" name="L154" href="#L154">154</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] shortUniform = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[20];
<a class="jxr_linenumber" name="L155" href="#L155">155</a>         System.arraycopy(uniform, 0, shortUniform, 0, 20);
<a class="jxr_linenumber" name="L156" href="#L156">156</a>         Assert.assertEquals(4.117594598618268E-9, test.kolmogorovSmirnovTest(unif, shortUniform, false), TOLERANCE);
<a class="jxr_linenumber" name="L157" href="#L157">157</a>         Assert.assertTrue(test.kolmogorovSmirnovTest(unif, shortUniform, 0.05));
<a class="jxr_linenumber" name="L158" href="#L158">158</a>         Assert.assertEquals(0.6610459, test.kolmogorovSmirnovStatistic(unif, shortUniform), TOLERANCE);
<a class="jxr_linenumber" name="L159" href="#L159">159</a>     }
<a class="jxr_linenumber" name="L160" href="#L160">160</a> 
<a class="jxr_linenumber" name="L161" href="#L161">161</a>     <em class="jxr_javadoccomment">/** Uniform distribution, unit normal dataset */</em>
<a class="jxr_linenumber" name="L162" href="#L162">162</a>     @Test
<a class="jxr_linenumber" name="L163" href="#L163">163</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testOneSampleUniformGaussian() {
<a class="jxr_linenumber" name="L164" href="#L164">164</a>         <strong class="jxr_keyword">final</strong> KolmogorovSmirnovTest test = <strong class="jxr_keyword">new</strong> KolmogorovSmirnovTest();
<a class="jxr_linenumber" name="L165" href="#L165">165</a>         <strong class="jxr_keyword">final</strong> UniformRealDistribution unif = <strong class="jxr_keyword">new</strong> UniformRealDistribution(-0.5, 0.5);
<a class="jxr_linenumber" name="L166" href="#L166">166</a>         <em class="jxr_comment">// Value was obtained via exact test, validated against R. Running exact test takes a long</em>
<a class="jxr_linenumber" name="L167" href="#L167">167</a>         <em class="jxr_comment">// time.</em>
<a class="jxr_linenumber" name="L168" href="#L168">168</a>         Assert.assertEquals(4.9405812774239166E-11, test.kolmogorovSmirnovTest(unif, gaussian, false), TOLERANCE);
<a class="jxr_linenumber" name="L169" href="#L169">169</a>         Assert.assertTrue(test.kolmogorovSmirnovTest(unif, gaussian, 0.05));
<a class="jxr_linenumber" name="L170" href="#L170">170</a>         Assert.assertEquals(0.3401058049019608, test.kolmogorovSmirnovStatistic(unif, gaussian), TOLERANCE);
<a class="jxr_linenumber" name="L171" href="#L171">171</a>     }
<a class="jxr_linenumber" name="L172" href="#L172">172</a> 
<a class="jxr_linenumber" name="L173" href="#L173">173</a>     <em class="jxr_javadoccomment">/** Small samples - exact p-value, checked against R */</em>
<a class="jxr_linenumber" name="L174" href="#L174">174</a>     @Test
<a class="jxr_linenumber" name="L175" href="#L175">175</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testTwoSampleSmallSampleExact() {
<a class="jxr_linenumber" name="L176" href="#L176">176</a>         <strong class="jxr_keyword">final</strong> KolmogorovSmirnovTest test = <strong class="jxr_keyword">new</strong> KolmogorovSmirnovTest();
<a class="jxr_linenumber" name="L177" href="#L177">177</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] smallSample1 = {
<a class="jxr_linenumber" name="L178" href="#L178">178</a>             6, 7, 9, 13, 19, 21, 22, 23, 24
<a class="jxr_linenumber" name="L179" href="#L179">179</a>         };
<a class="jxr_linenumber" name="L180" href="#L180">180</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] smallSample2 = {
<a class="jxr_linenumber" name="L181" href="#L181">181</a>             10, 11, 12, 16, 20, 27, 28, 32, 44, 54
<a class="jxr_linenumber" name="L182" href="#L182">182</a>         };
<a class="jxr_linenumber" name="L183" href="#L183">183</a>         <em class="jxr_comment">// Reference values from R, version 3.2.0 - R uses non-strict inequality in null hypothesis</em>
<a class="jxr_linenumber" name="L184" href="#L184">184</a>         Assert
<a class="jxr_linenumber" name="L185" href="#L185">185</a>             .assertEquals(0.105577085453247, test.kolmogorovSmirnovTest(smallSample1, smallSample2, false), TOLERANCE);
<a class="jxr_linenumber" name="L186" href="#L186">186</a>         Assert.assertEquals(0.5, test.kolmogorovSmirnovStatistic(smallSample1, smallSample2), TOLERANCE);
<a class="jxr_linenumber" name="L187" href="#L187">187</a>     }
<a class="jxr_linenumber" name="L188" href="#L188">188</a> 
<a class="jxr_linenumber" name="L189" href="#L189">189</a>     <em class="jxr_javadoccomment">/** Small samples - exact p-value, checked against R */</em>
<a class="jxr_linenumber" name="L190" href="#L190">190</a>     @Test
<a class="jxr_linenumber" name="L191" href="#L191">191</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testTwoSampleSmallSampleExact2() {
<a class="jxr_linenumber" name="L192" href="#L192">192</a>         <strong class="jxr_keyword">final</strong> KolmogorovSmirnovTest test = <strong class="jxr_keyword">new</strong> KolmogorovSmirnovTest();
<a class="jxr_linenumber" name="L193" href="#L193">193</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] smallSample1 = {
<a class="jxr_linenumber" name="L194" href="#L194">194</a>             6, 7, 9, 13, 19, 21, 22, 23, 24, 29, 30, 34, 36, 41, 45, 47, 51, 63, 33, 91
<a class="jxr_linenumber" name="L195" href="#L195">195</a>         };
<a class="jxr_linenumber" name="L196" href="#L196">196</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] smallSample2 = {
<a class="jxr_linenumber" name="L197" href="#L197">197</a>             10, 11, 12, 16, 20, 27, 28, 32, 44, 54, 56, 57, 64, 69, 71, 80, 81, 88, 90
<a class="jxr_linenumber" name="L198" href="#L198">198</a>         };
<a class="jxr_linenumber" name="L199" href="#L199">199</a>         <em class="jxr_comment">// Reference values from R, version 3.2.0 - R uses non-strict inequality in null hypothesis</em>
<a class="jxr_linenumber" name="L200" href="#L200">200</a>         Assert
<a class="jxr_linenumber" name="L201" href="#L201">201</a>             .assertEquals(0.0462986609, test.kolmogorovSmirnovTest(smallSample1, smallSample2, false), TOLERANCE);
<a class="jxr_linenumber" name="L202" href="#L202">202</a>         Assert.assertEquals(0.4263157895, test.kolmogorovSmirnovStatistic(smallSample1, smallSample2), TOLERANCE);
<a class="jxr_linenumber" name="L203" href="#L203">203</a>     }
<a class="jxr_linenumber" name="L204" href="#L204">204</a> 
<a class="jxr_linenumber" name="L205" href="#L205">205</a>     <em class="jxr_javadoccomment">/** Small samples - exact p-value, checked against R */</em>
<a class="jxr_linenumber" name="L206" href="#L206">206</a>     @Test
<a class="jxr_linenumber" name="L207" href="#L207">207</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testTwoSampleSmallSampleExact3() {
<a class="jxr_linenumber" name="L208" href="#L208">208</a>         <strong class="jxr_keyword">final</strong> KolmogorovSmirnovTest test = <strong class="jxr_keyword">new</strong> KolmogorovSmirnovTest();
<a class="jxr_linenumber" name="L209" href="#L209">209</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] smallSample1 = {
<a class="jxr_linenumber" name="L210" href="#L210">210</a>             -10, -5, 17, 21, 22, 23, 24, 30, 44, 50, 56, 57, 59, 67, 73, 75, 77, 78, 79, 80, 81, 83, 84, 85, 88, 90,
<a class="jxr_linenumber" name="L211" href="#L211">211</a>             92, 93, 94, 95, 98, 100, 101, 103, 105, 110
<a class="jxr_linenumber" name="L212" href="#L212">212</a>         };
<a class="jxr_linenumber" name="L213" href="#L213">213</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] smallSample2 = {
<a class="jxr_linenumber" name="L214" href="#L214">214</a>             -2, -1, 0, 10, 14, 15, 16, 20, 25, 26, 27, 31, 32, 33, 34, 45, 47, 48, 51, 52, 53, 54, 60, 61, 62, 63,
<a class="jxr_linenumber" name="L215" href="#L215">215</a>             74, 82, 106, 107, 109, 11, 112, 113, 114
<a class="jxr_linenumber" name="L216" href="#L216">216</a>         };
<a class="jxr_linenumber" name="L217" href="#L217">217</a>         <em class="jxr_comment">// Reference values from R, version 3.2.0 - R uses non-strict inequality in null hypothesis</em>
<a class="jxr_linenumber" name="L218" href="#L218">218</a>         Assert
<a class="jxr_linenumber" name="L219" href="#L219">219</a>             .assertEquals(0.00300743602, test.kolmogorovSmirnovTest(smallSample1, smallSample2, false), TOLERANCE);
<a class="jxr_linenumber" name="L220" href="#L220">220</a>         Assert.assertEquals(0.4103174603, test.kolmogorovSmirnovStatistic(smallSample1, smallSample2), TOLERANCE);
<a class="jxr_linenumber" name="L221" href="#L221">221</a>         Assert
<a class="jxr_linenumber" name="L222" href="#L222">222</a>         .assertEquals(0.00300743602, test.kolmogorovSmirnovTest(smallSample2, smallSample1, false), TOLERANCE);
<a class="jxr_linenumber" name="L223" href="#L223">223</a>     }
<a class="jxr_linenumber" name="L224" href="#L224">224</a> 
<a class="jxr_linenumber" name="L225" href="#L225">225</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L226" href="#L226">226</a> <em class="jxr_javadoccomment">     * Checks exact p-value computations using critical values from Table 9 in V.K Rohatgi, An</em>
<a class="jxr_linenumber" name="L227" href="#L227">227</a> <em class="jxr_javadoccomment">     * Introduction to Probability and Mathematical Statistics, Wiley, 1976, ISBN 0-471-73135-8.</em>
<a class="jxr_linenumber" name="L228" href="#L228">228</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L229" href="#L229">229</a>     @Test
<a class="jxr_linenumber" name="L230" href="#L230">230</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testTwoSampleExactP() {
<a class="jxr_linenumber" name="L231" href="#L231">231</a>         checkExactTable(4, 6, 5d / 6d, 0.01d);
<a class="jxr_linenumber" name="L232" href="#L232">232</a>         checkExactTable(4, 7, 17d / 28d, 0.2d);
<a class="jxr_linenumber" name="L233" href="#L233">233</a>         checkExactTable(6, 7, 29d / 42d, 0.05d);
<a class="jxr_linenumber" name="L234" href="#L234">234</a>         checkExactTable(4, 10, 7d / 10d, 0.05d);
<a class="jxr_linenumber" name="L235" href="#L235">235</a>         checkExactTable(5, 15, 11d / 15d, 0.02d);
<a class="jxr_linenumber" name="L236" href="#L236">236</a>         checkExactTable(9, 10, 31d / 45d, 0.01d);
<a class="jxr_linenumber" name="L237" href="#L237">237</a>         checkExactTable(7, 10, 43d / 70d, 0.05d);
<a class="jxr_linenumber" name="L238" href="#L238">238</a>     }
<a class="jxr_linenumber" name="L239" href="#L239">239</a> 
<a class="jxr_linenumber" name="L240" href="#L240">240</a>     @Test
<a class="jxr_linenumber" name="L241" href="#L241">241</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testTwoSampleApproximateCritialValues() {
<a class="jxr_linenumber" name="L242" href="#L242">242</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> tol = .01;
<a class="jxr_linenumber" name="L243" href="#L243">243</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] alpha = {
<a class="jxr_linenumber" name="L244" href="#L244">244</a>             0.10, 0.05, 0.025, 0.01, 0.005, 0.001
<a class="jxr_linenumber" name="L245" href="#L245">245</a>         };
<a class="jxr_linenumber" name="L246" href="#L246">246</a>         <em class="jxr_comment">// From Wikipedia KS article - TODO: get (and test) more precise values</em>
<a class="jxr_linenumber" name="L247" href="#L247">247</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] c = {
<a class="jxr_linenumber" name="L248" href="#L248">248</a>             1.22, 1.36, 1.48, 1.63, 1.73, 1.95
<a class="jxr_linenumber" name="L249" href="#L249">249</a>         };
<a class="jxr_linenumber" name="L250" href="#L250">250</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> k[] = {
<a class="jxr_linenumber" name="L251" href="#L251">251</a>             60, 100, 500
<a class="jxr_linenumber" name="L252" href="#L252">252</a>         };
<a class="jxr_linenumber" name="L253" href="#L253">253</a>         <strong class="jxr_keyword">double</strong> n;
<a class="jxr_linenumber" name="L254" href="#L254">254</a>         <strong class="jxr_keyword">double</strong> m;
<a class="jxr_linenumber" name="L255" href="#L255">255</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; k.length; i++) {
<a class="jxr_linenumber" name="L256" href="#L256">256</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = 0; j &lt; i; j++) {
<a class="jxr_linenumber" name="L257" href="#L257">257</a>                 n = k[i];
<a class="jxr_linenumber" name="L258" href="#L258">258</a>                 m = k[j];
<a class="jxr_linenumber" name="L259" href="#L259">259</a>                 <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> l = 0; l &lt; alpha.length; l++) {
<a class="jxr_linenumber" name="L260" href="#L260">260</a>                     <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> dCrit = c[l] * FastMath.sqrt((n + m) / (n * m));
<a class="jxr_linenumber" name="L261" href="#L261">261</a>                     checkApproximateTable(k[i], k[j], dCrit, alpha[l], tol);
<a class="jxr_linenumber" name="L262" href="#L262">262</a>                 }
<a class="jxr_linenumber" name="L263" href="#L263">263</a>             }
<a class="jxr_linenumber" name="L264" href="#L264">264</a>         }
<a class="jxr_linenumber" name="L265" href="#L265">265</a>     }
<a class="jxr_linenumber" name="L266" href="#L266">266</a> 
<a class="jxr_linenumber" name="L267" href="#L267">267</a>     @Test
<a class="jxr_linenumber" name="L268" href="#L268">268</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testPelzGoodApproximation() {
<a class="jxr_linenumber" name="L269" href="#L269">269</a>         KolmogorovSmirnovTest ksTest = <strong class="jxr_keyword">new</strong> KolmogorovSmirnovTest();
<a class="jxr_linenumber" name="L270" href="#L270">270</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> d[] = {0.15, 0.20, 0.25, 0.3, 0.35, 0.4};
<a class="jxr_linenumber" name="L271" href="#L271">271</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> n[] = {141, 150, 180, 220, 1000};
<a class="jxr_linenumber" name="L272" href="#L272">272</a>         <em class="jxr_comment">// Reference values computed using the Pelz method from</em>
<a class="jxr_linenumber" name="L273" href="#L273">273</a>         <em class="jxr_comment">// http://simul.iro.umontreal.ca/ksdir/KolmogorovSmirnovDist.java</em>
<a class="jxr_linenumber" name="L274" href="#L274">274</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> ref[] = {
<a class="jxr_linenumber" name="L275" href="#L275">275</a>             0.9968940168727819, 0.9979326624184857, 0.9994677598604506, 0.9999128354780209, 0.9999999999998661,
<a class="jxr_linenumber" name="L276" href="#L276">276</a>             0.9999797514476236, 0.9999902122242081, 0.9999991327060908, 0.9999999657681911, 0.9999999999977929,
<a class="jxr_linenumber" name="L277" href="#L277">277</a>             0.9999999706444976, 0.9999999906571532, 0.9999999997949596, 0.999999999998745, 0.9999999999993876,
<a class="jxr_linenumber" name="L278" href="#L278">278</a>             0.9999999999916627, 0.9999999999984447, 0.9999999999999936, 0.999999999999341, 0.9999999999971508,
<a class="jxr_linenumber" name="L279" href="#L279">279</a>             0.9999999999999877, 0.9999999999999191, 0.9999999999999254, 0.9999999999998178, 0.9999999999917788,
<a class="jxr_linenumber" name="L280" href="#L280">280</a>             0.9999999999998556, 0.9999999999992014, 0.9999999999988859, 0.9999999999999325, 0.9999999999821726
<a class="jxr_linenumber" name="L281" href="#L281">281</a>         };
<a class="jxr_linenumber" name="L282" href="#L282">282</a> 
<a class="jxr_linenumber" name="L283" href="#L283">283</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> tol = 10e-15;
<a class="jxr_linenumber" name="L284" href="#L284">284</a>         <strong class="jxr_keyword">int</strong> k = 0;
<a class="jxr_linenumber" name="L285" href="#L285">285</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; 6; i++) {
<a class="jxr_linenumber" name="L286" href="#L286">286</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = 0; j &lt; 5; j++, k++) {
<a class="jxr_linenumber" name="L287" href="#L287">287</a>                 Assert.assertEquals(ref[k], ksTest.pelzGood(d[i], n[j]), tol);
<a class="jxr_linenumber" name="L288" href="#L288">288</a>             }
<a class="jxr_linenumber" name="L289" href="#L289">289</a>         }
<a class="jxr_linenumber" name="L290" href="#L290">290</a>     }
<a class="jxr_linenumber" name="L291" href="#L291">291</a> 
<a class="jxr_linenumber" name="L292" href="#L292">292</a>     <em class="jxr_javadoccomment">/** Verifies large sample approximate p values against R */</em>
<a class="jxr_linenumber" name="L293" href="#L293">293</a>     @Test
<a class="jxr_linenumber" name="L294" href="#L294">294</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testTwoSampleApproximateP() {
<a class="jxr_linenumber" name="L295" href="#L295">295</a>         <strong class="jxr_keyword">final</strong> KolmogorovSmirnovTest test = <strong class="jxr_keyword">new</strong> KolmogorovSmirnovTest();
<a class="jxr_linenumber" name="L296" href="#L296">296</a>         <em class="jxr_comment">// Reference values from R, version 2.15.3</em>
<a class="jxr_linenumber" name="L297" href="#L297">297</a>         Assert.assertEquals(0.0319983962391632, test.kolmogorovSmirnovTest(gaussian, gaussian2), TOLERANCE);
<a class="jxr_linenumber" name="L298" href="#L298">298</a>         Assert.assertEquals(0.202352941176471, test.kolmogorovSmirnovStatistic(gaussian, gaussian2), TOLERANCE);
<a class="jxr_linenumber" name="L299" href="#L299">299</a>     }
<a class="jxr_linenumber" name="L300" href="#L300">300</a> 
<a class="jxr_linenumber" name="L301" href="#L301">301</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L302" href="#L302">302</a> <em class="jxr_javadoccomment">     * MATH-1181</em>
<a class="jxr_linenumber" name="L303" href="#L303">303</a> <em class="jxr_javadoccomment">     * Verify that large sample method is selected for sample product &gt; Integer.MAX_VALUE</em>
<a class="jxr_linenumber" name="L304" href="#L304">304</a> <em class="jxr_javadoccomment">     * (integer overflow in sample product)</em>
<a class="jxr_linenumber" name="L305" href="#L305">305</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L306" href="#L306">306</a>     @Test(timeout=5000)
<a class="jxr_linenumber" name="L307" href="#L307">307</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testTwoSampleProductSizeOverflow() {
<a class="jxr_linenumber" name="L308" href="#L308">308</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> n = 50000;
<a class="jxr_linenumber" name="L309" href="#L309">309</a>         Assert.assertTrue(n * n &lt; 0);
<a class="jxr_linenumber" name="L310" href="#L310">310</a>         <strong class="jxr_keyword">double</strong>[] x = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[n];
<a class="jxr_linenumber" name="L311" href="#L311">311</a>         <strong class="jxr_keyword">double</strong>[] y = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[n];
<a class="jxr_linenumber" name="L312" href="#L312">312</a>         <strong class="jxr_keyword">final</strong> KolmogorovSmirnovTest test = <strong class="jxr_keyword">new</strong> KolmogorovSmirnovTest();
<a class="jxr_linenumber" name="L313" href="#L313">313</a>         Assert.assertFalse(Double.isNaN(test.kolmogorovSmirnovTest(x, y)));
<a class="jxr_linenumber" name="L314" href="#L314">314</a>     }
<a class="jxr_linenumber" name="L315" href="#L315">315</a> 
<a class="jxr_linenumber" name="L316" href="#L316">316</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L317" href="#L317">317</a> <em class="jxr_javadoccomment">     * Verifies that Monte Carlo simulation gives results close to exact p values.</em>
<a class="jxr_linenumber" name="L318" href="#L318">318</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L319" href="#L319">319</a>     @Test
<a class="jxr_linenumber" name="L320" href="#L320">320</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testTwoSampleMonteCarlo() {
<a class="jxr_linenumber" name="L321" href="#L321">321</a>         <strong class="jxr_keyword">final</strong> KolmogorovSmirnovTest test = <strong class="jxr_keyword">new</strong> KolmogorovSmirnovTest(<strong class="jxr_keyword">new</strong> Well19937c(1000));
<a class="jxr_linenumber" name="L322" href="#L322">322</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> sampleSize = 14;
<a class="jxr_linenumber" name="L323" href="#L323">323</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> tol = .001;
<a class="jxr_linenumber" name="L324" href="#L324">324</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] shortUniform = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[sampleSize];
<a class="jxr_linenumber" name="L325" href="#L325">325</a>         System.arraycopy(uniform, 0, shortUniform, 0, sampleSize);
<a class="jxr_linenumber" name="L326" href="#L326">326</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] shortGaussian = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[sampleSize];
<a class="jxr_linenumber" name="L327" href="#L327">327</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] shortGaussian2 = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[sampleSize];
<a class="jxr_linenumber" name="L328" href="#L328">328</a>         System.arraycopy(gaussian, 0, shortGaussian, 0, sampleSize);
<a class="jxr_linenumber" name="L329" href="#L329">329</a>         System.arraycopy(gaussian, 10, shortGaussian2, 0, sampleSize);
<a class="jxr_linenumber" name="L330" href="#L330">330</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] d = {
<a class="jxr_linenumber" name="L331" href="#L331">331</a>             test.kolmogorovSmirnovStatistic(shortGaussian, shortUniform),
<a class="jxr_linenumber" name="L332" href="#L332">332</a>             test.kolmogorovSmirnovStatistic(shortGaussian2, shortGaussian)
<a class="jxr_linenumber" name="L333" href="#L333">333</a>         };
<a class="jxr_linenumber" name="L334" href="#L334">334</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">double</strong> dv : d) {
<a class="jxr_linenumber" name="L335" href="#L335">335</a>             <strong class="jxr_keyword">double</strong> exactPStrict = test.exactP(dv, sampleSize, sampleSize, <strong class="jxr_keyword">true</strong>);
<a class="jxr_linenumber" name="L336" href="#L336">336</a>             <strong class="jxr_keyword">double</strong> exactPNonStrict = test.exactP(dv, sampleSize, sampleSize, false);
<a class="jxr_linenumber" name="L337" href="#L337">337</a>             <strong class="jxr_keyword">double</strong> montePStrict = test.monteCarloP(dv, sampleSize, sampleSize, <strong class="jxr_keyword">true</strong>,
<a class="jxr_linenumber" name="L338" href="#L338">338</a>                                                    KolmogorovSmirnovTest.MONTE_CARLO_ITERATIONS);
<a class="jxr_linenumber" name="L339" href="#L339">339</a>             <strong class="jxr_keyword">double</strong> montePNonStrict = test.monteCarloP(dv, sampleSize, sampleSize, false,
<a class="jxr_linenumber" name="L340" href="#L340">340</a>                                                       KolmogorovSmirnovTest.MONTE_CARLO_ITERATIONS);
<a class="jxr_linenumber" name="L341" href="#L341">341</a>             Assert.assertEquals(exactPStrict, montePStrict, tol);
<a class="jxr_linenumber" name="L342" href="#L342">342</a>             Assert.assertEquals(exactPNonStrict, montePNonStrict, tol);
<a class="jxr_linenumber" name="L343" href="#L343">343</a>         }
<a class="jxr_linenumber" name="L344" href="#L344">344</a>     }
<a class="jxr_linenumber" name="L345" href="#L345">345</a> 
<a class="jxr_linenumber" name="L346" href="#L346">346</a>     @Test
<a class="jxr_linenumber" name="L347" href="#L347">347</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testTwoSampleMonteCarloDifferentSampleSizes() {
<a class="jxr_linenumber" name="L348" href="#L348">348</a>         <strong class="jxr_keyword">final</strong> KolmogorovSmirnovTest test = <strong class="jxr_keyword">new</strong> KolmogorovSmirnovTest(<strong class="jxr_keyword">new</strong> Well19937c(1000));
<a class="jxr_linenumber" name="L349" href="#L349">349</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> sampleSize1 = 14;
<a class="jxr_linenumber" name="L350" href="#L350">350</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> sampleSize2 = 7;
<a class="jxr_linenumber" name="L351" href="#L351">351</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> d = 0.3;
<a class="jxr_linenumber" name="L352" href="#L352">352</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">boolean</strong> strict = false;
<a class="jxr_linenumber" name="L353" href="#L353">353</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> tol = 1e-2;
<a class="jxr_linenumber" name="L354" href="#L354">354</a>         Assert.assertEquals(test.exactP(d, sampleSize1, sampleSize2, strict),
<a class="jxr_linenumber" name="L355" href="#L355">355</a>                             test.monteCarloP(d, sampleSize1, sampleSize2, strict,
<a class="jxr_linenumber" name="L356" href="#L356">356</a>                                              KolmogorovSmirnovTest.MONTE_CARLO_ITERATIONS),
<a class="jxr_linenumber" name="L357" href="#L357">357</a>                             tol);
<a class="jxr_linenumber" name="L358" href="#L358">358</a>     }
<a class="jxr_linenumber" name="L359" href="#L359">359</a> 
<a class="jxr_linenumber" name="L360" href="#L360">360</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L361" href="#L361">361</a> <em class="jxr_javadoccomment">     * Performance test for monteCarlo method. Disabled by default.</em>
<a class="jxr_linenumber" name="L362" href="#L362">362</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L363" href="#L363">363</a>     <em class="jxr_comment">// @Test</em>
<a class="jxr_linenumber" name="L364" href="#L364">364</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testTwoSampleMonteCarloPerformance() {
<a class="jxr_linenumber" name="L365" href="#L365">365</a>         <strong class="jxr_keyword">int</strong> numIterations = 100000;
<a class="jxr_linenumber" name="L366" href="#L366">366</a>         <strong class="jxr_keyword">int</strong> N = (<strong class="jxr_keyword">int</strong>)Math.sqrt(KolmogorovSmirnovTest.LARGE_SAMPLE_PRODUCT);
<a class="jxr_linenumber" name="L367" href="#L367">367</a>         <strong class="jxr_keyword">final</strong> KolmogorovSmirnovTest test = <strong class="jxr_keyword">new</strong> KolmogorovSmirnovTest(<strong class="jxr_keyword">new</strong> Well19937c(1000));
<a class="jxr_linenumber" name="L368" href="#L368">368</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> n = 2; n &lt;= N; ++n) {
<a class="jxr_linenumber" name="L369" href="#L369">369</a>             <strong class="jxr_keyword">long</strong> startMillis = System.currentTimeMillis();
<a class="jxr_linenumber" name="L370" href="#L370">370</a>             <strong class="jxr_keyword">int</strong> m = KolmogorovSmirnovTest.LARGE_SAMPLE_PRODUCT/n;
<a class="jxr_linenumber" name="L371" href="#L371">371</a>             Assert.assertEquals(0d, test.monteCarloP(Double.POSITIVE_INFINITY, n, m, <strong class="jxr_keyword">true</strong>, numIterations), 0d);
<a class="jxr_linenumber" name="L372" href="#L372">372</a>             <strong class="jxr_keyword">long</strong> endMillis = System.currentTimeMillis();
<a class="jxr_linenumber" name="L373" href="#L373">373</a>             System.out.println(<span class="jxr_string">"n="</span> + n + <span class="jxr_string">", m="</span> + m + <span class="jxr_string">", time="</span> + (endMillis-startMillis)/1000d + <span class="jxr_string">"s"</span>);
<a class="jxr_linenumber" name="L374" href="#L374">374</a>         }
<a class="jxr_linenumber" name="L375" href="#L375">375</a>     }
<a class="jxr_linenumber" name="L376" href="#L376">376</a> 
<a class="jxr_linenumber" name="L377" href="#L377">377</a>     @Test
<a class="jxr_linenumber" name="L378" href="#L378">378</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testTwoSampleWithManyTies() {
<a class="jxr_linenumber" name="L379" href="#L379">379</a>         <em class="jxr_comment">// MATH-1197</em>
<a class="jxr_linenumber" name="L380" href="#L380">380</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] x = {
<a class="jxr_linenumber" name="L381" href="#L381">381</a>             0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
<a class="jxr_linenumber" name="L382" href="#L382">382</a>             0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
<a class="jxr_linenumber" name="L383" href="#L383">383</a>             0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
<a class="jxr_linenumber" name="L384" href="#L384">384</a>             0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
<a class="jxr_linenumber" name="L385" href="#L385">385</a>             0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
<a class="jxr_linenumber" name="L386" href="#L386">386</a>             0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
<a class="jxr_linenumber" name="L387" href="#L387">387</a>             0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
<a class="jxr_linenumber" name="L388" href="#L388">388</a>             0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
<a class="jxr_linenumber" name="L389" href="#L389">389</a>             0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
<a class="jxr_linenumber" name="L390" href="#L390">390</a>             0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
<a class="jxr_linenumber" name="L391" href="#L391">391</a>             0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
<a class="jxr_linenumber" name="L392" href="#L392">392</a>             0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
<a class="jxr_linenumber" name="L393" href="#L393">393</a>             0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
<a class="jxr_linenumber" name="L394" href="#L394">394</a>             0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
<a class="jxr_linenumber" name="L395" href="#L395">395</a>             0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
<a class="jxr_linenumber" name="L396" href="#L396">396</a>             0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
<a class="jxr_linenumber" name="L397" href="#L397">397</a>             0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
<a class="jxr_linenumber" name="L398" href="#L398">398</a>             0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
<a class="jxr_linenumber" name="L399" href="#L399">399</a>             0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
<a class="jxr_linenumber" name="L400" href="#L400">400</a>             0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
<a class="jxr_linenumber" name="L401" href="#L401">401</a>             0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
<a class="jxr_linenumber" name="L402" href="#L402">402</a>             0.000000, 2.202653, 2.202653, 2.202653, 2.202653, 2.202653,
<a class="jxr_linenumber" name="L403" href="#L403">403</a>             2.202653, 2.202653, 2.202653, 2.202653, 2.202653, 2.202653,
<a class="jxr_linenumber" name="L404" href="#L404">404</a>             2.202653, 2.202653, 2.202653, 2.202653, 2.202653, 2.202653,
<a class="jxr_linenumber" name="L405" href="#L405">405</a>             2.202653, 2.202653, 2.202653, 2.202653, 2.202653, 2.202653,
<a class="jxr_linenumber" name="L406" href="#L406">406</a>             2.202653, 2.202653, 2.202653, 2.202653, 2.202653, 2.202653,
<a class="jxr_linenumber" name="L407" href="#L407">407</a>             2.202653, 2.202653, 2.202653, 2.202653, 2.202653, 2.202653,
<a class="jxr_linenumber" name="L408" href="#L408">408</a>             3.181199, 3.181199, 3.181199, 3.181199, 3.181199, 3.181199,
<a class="jxr_linenumber" name="L409" href="#L409">409</a>             3.723539, 3.723539, 3.723539, 3.723539, 4.383482, 4.383482,
<a class="jxr_linenumber" name="L410" href="#L410">410</a>             4.383482, 4.383482, 5.320671, 5.320671, 5.320671, 5.717284,
<a class="jxr_linenumber" name="L411" href="#L411">411</a>             6.964001, 7.352165, 8.710510, 8.710510, 8.710510, 8.710510,
<a class="jxr_linenumber" name="L412" href="#L412">412</a>             8.710510, 8.710510, 9.539004, 9.539004, 10.720619, 17.726077,
<a class="jxr_linenumber" name="L413" href="#L413">413</a>             17.726077, 17.726077, 17.726077, 22.053875, 23.799144, 27.355308,
<a class="jxr_linenumber" name="L414" href="#L414">414</a>             30.584960, 30.584960, 30.584960, 30.584960, 30.751808
<a class="jxr_linenumber" name="L415" href="#L415">415</a>         };
<a class="jxr_linenumber" name="L416" href="#L416">416</a> 
<a class="jxr_linenumber" name="L417" href="#L417">417</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] y = {
<a class="jxr_linenumber" name="L418" href="#L418">418</a>             0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
<a class="jxr_linenumber" name="L419" href="#L419">419</a>             0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
<a class="jxr_linenumber" name="L420" href="#L420">420</a>             0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
<a class="jxr_linenumber" name="L421" href="#L421">421</a>             0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
<a class="jxr_linenumber" name="L422" href="#L422">422</a>             0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
<a class="jxr_linenumber" name="L423" href="#L423">423</a>             0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
<a class="jxr_linenumber" name="L424" href="#L424">424</a>             0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
<a class="jxr_linenumber" name="L425" href="#L425">425</a>             0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
<a class="jxr_linenumber" name="L426" href="#L426">426</a>             0.000000, 0.000000, 0.000000, 2.202653, 2.202653, 2.202653,
<a class="jxr_linenumber" name="L427" href="#L427">427</a>             2.202653, 2.202653, 2.202653, 2.202653, 2.202653, 3.061758,
<a class="jxr_linenumber" name="L428" href="#L428">428</a>             3.723539, 5.628420, 5.628420, 5.628420, 5.628420, 5.628420,
<a class="jxr_linenumber" name="L429" href="#L429">429</a>             6.916982, 6.916982, 6.916982, 10.178538, 10.178538, 10.178538,
<a class="jxr_linenumber" name="L430" href="#L430">430</a>             10.178538, 10.178538
<a class="jxr_linenumber" name="L431" href="#L431">431</a>         };
<a class="jxr_linenumber" name="L432" href="#L432">432</a> 
<a class="jxr_linenumber" name="L433" href="#L433">433</a>         <strong class="jxr_keyword">final</strong> KolmogorovSmirnovTest test = <strong class="jxr_keyword">new</strong> KolmogorovSmirnovTest();
<a class="jxr_linenumber" name="L434" href="#L434">434</a> 
<a class="jxr_linenumber" name="L435" href="#L435">435</a>         Assert.assertEquals(0.0640394088, test.kolmogorovSmirnovStatistic(x, y), 1e-6);
<a class="jxr_linenumber" name="L436" href="#L436">436</a>         Assert.assertEquals(0.9792777290, test.kolmogorovSmirnovTest(x, y), 1e-6);
<a class="jxr_linenumber" name="L437" href="#L437">437</a> 
<a class="jxr_linenumber" name="L438" href="#L438">438</a>     }
<a class="jxr_linenumber" name="L439" href="#L439">439</a> 
<a class="jxr_linenumber" name="L440" href="#L440">440</a>     @Test
<a class="jxr_linenumber" name="L441" href="#L441">441</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testTwoSamplesAllEqual() {
<a class="jxr_linenumber" name="L442" href="#L442">442</a>         <strong class="jxr_keyword">int</strong> iterations = 10000;
<a class="jxr_linenumber" name="L443" href="#L443">443</a>         <strong class="jxr_keyword">final</strong> KolmogorovSmirnovTest test = <strong class="jxr_keyword">new</strong> KolmogorovSmirnovTest();
<a class="jxr_linenumber" name="L444" href="#L444">444</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 2; i &lt; 30; ++i) {
<a class="jxr_linenumber" name="L445" href="#L445">445</a>             <em class="jxr_comment">// testing values with ties</em>
<a class="jxr_linenumber" name="L446" href="#L446">446</a>             <strong class="jxr_keyword">double</strong>[] values = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[i];
<a class="jxr_linenumber" name="L447" href="#L447">447</a>             Arrays.fill(values, i);
<a class="jxr_linenumber" name="L448" href="#L448">448</a>             <em class="jxr_comment">// testing values without ties</em>
<a class="jxr_linenumber" name="L449" href="#L449">449</a>             <strong class="jxr_keyword">double</strong>[] ascendingValues = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[i];
<a class="jxr_linenumber" name="L450" href="#L450">450</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = 0; j &lt; ascendingValues.length; j++) {
<a class="jxr_linenumber" name="L451" href="#L451">451</a>                 ascendingValues[j] = j;
<a class="jxr_linenumber" name="L452" href="#L452">452</a>             }
<a class="jxr_linenumber" name="L453" href="#L453">453</a> 
<a class="jxr_linenumber" name="L454" href="#L454">454</a>             Assert.assertEquals(0., test.kolmogorovSmirnovStatistic(values, values), 0.);
<a class="jxr_linenumber" name="L455" href="#L455">455</a>             Assert.assertEquals(0., test.kolmogorovSmirnovStatistic(ascendingValues, ascendingValues), 0.);
<a class="jxr_linenumber" name="L456" href="#L456">456</a> 
<a class="jxr_linenumber" name="L457" href="#L457">457</a>             <strong class="jxr_keyword">if</strong> (i &lt; 10) {
<a class="jxr_linenumber" name="L458" href="#L458">458</a>                 Assert.assertEquals(1.0, test.exactP(0, values.length, values.length, <strong class="jxr_keyword">true</strong>), 0.);
<a class="jxr_linenumber" name="L459" href="#L459">459</a>                 Assert.assertEquals(1.0, test.exactP(0, values.length, values.length, false), 0.);
<a class="jxr_linenumber" name="L460" href="#L460">460</a>             }
<a class="jxr_linenumber" name="L461" href="#L461">461</a> 
<a class="jxr_linenumber" name="L462" href="#L462">462</a>             Assert.assertEquals(1.0, test.monteCarloP(0, values.length, values.length, <strong class="jxr_keyword">true</strong>, iterations), 0.);
<a class="jxr_linenumber" name="L463" href="#L463">463</a>             Assert.assertEquals(1.0, test.monteCarloP(0, values.length, values.length, false, iterations), 0.);
<a class="jxr_linenumber" name="L464" href="#L464">464</a> 
<a class="jxr_linenumber" name="L465" href="#L465">465</a>             Assert.assertEquals(1.0, test.approximateP(0, values.length, values.length), 0.);
<a class="jxr_linenumber" name="L466" href="#L466">466</a>             Assert.assertEquals(1.0, test.approximateP(0, values.length, values.length), 0.);
<a class="jxr_linenumber" name="L467" href="#L467">467</a>         }
<a class="jxr_linenumber" name="L468" href="#L468">468</a>     }
<a class="jxr_linenumber" name="L469" href="#L469">469</a> 
<a class="jxr_linenumber" name="L470" href="#L470">470</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L471" href="#L471">471</a> <em class="jxr_javadoccomment">     * JIRA: MATH-1245</em>
<a class="jxr_linenumber" name="L472" href="#L472">472</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L473" href="#L473">473</a> <em class="jxr_javadoccomment">     * Verify that D-values are not viewed as distinct when they are mathematically equal</em>
<a class="jxr_linenumber" name="L474" href="#L474">474</a> <em class="jxr_javadoccomment">     * when computing p-statistics for small sample tests. Reference values are from R 3.2.0.</em>
<a class="jxr_linenumber" name="L475" href="#L475">475</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L476" href="#L476">476</a>     @Test
<a class="jxr_linenumber" name="L477" href="#L477">477</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testDRounding() {
<a class="jxr_linenumber" name="L478" href="#L478">478</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> tol = 1e-12;
<a class="jxr_linenumber" name="L479" href="#L479">479</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] x = {0, 2, 3, 4, 5, 6, 7, 8, 9, 12};
<a class="jxr_linenumber" name="L480" href="#L480">480</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] y = {1, 10, 11, 13, 14, 15, 16, 17, 18};
<a class="jxr_linenumber" name="L481" href="#L481">481</a>         <strong class="jxr_keyword">final</strong> KolmogorovSmirnovTest test = <strong class="jxr_keyword">new</strong> KolmogorovSmirnovTest();
<a class="jxr_linenumber" name="L482" href="#L482">482</a>         Assert.assertEquals(0.0027495724090154106, test.kolmogorovSmirnovTest(x, y,false), tol);
<a class="jxr_linenumber" name="L483" href="#L483">483</a> 
<a class="jxr_linenumber" name="L484" href="#L484">484</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] x1 = {2, 4, 6, 8, 9, 10, 11, 12, 13};
<a class="jxr_linenumber" name="L485" href="#L485">485</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] y1 = {0, 1, 3, 5, 7};
<a class="jxr_linenumber" name="L486" href="#L486">486</a>         Assert.assertEquals(0.085914085914085896, test.kolmogorovSmirnovTest(x1, y1, false), tol);
<a class="jxr_linenumber" name="L487" href="#L487">487</a> 
<a class="jxr_linenumber" name="L488" href="#L488">488</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] x2 = {4, 6, 7, 8, 9, 10, 11};
<a class="jxr_linenumber" name="L489" href="#L489">489</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] y2 = {0, 1, 2, 3, 5};
<a class="jxr_linenumber" name="L490" href="#L490">490</a>         Assert.assertEquals(0.015151515151515027, test.kolmogorovSmirnovTest(x2, y2, false), tol);
<a class="jxr_linenumber" name="L491" href="#L491">491</a>     }
<a class="jxr_linenumber" name="L492" href="#L492">492</a> 
<a class="jxr_linenumber" name="L493" href="#L493">493</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L494" href="#L494">494</a> <em class="jxr_javadoccomment">     * JIRA: MATH-1245</em>
<a class="jxr_linenumber" name="L495" href="#L495">495</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L496" href="#L496">496</a> <em class="jxr_javadoccomment">     * Verify that D-values are not viewed as distinct when they are mathematically equal</em>
<a class="jxr_linenumber" name="L497" href="#L497">497</a> <em class="jxr_javadoccomment">     * when computing p-statistics for small sample tests. Reference values are from R 3.2.0.</em>
<a class="jxr_linenumber" name="L498" href="#L498">498</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L499" href="#L499">499</a>     @Test
<a class="jxr_linenumber" name="L500" href="#L500">500</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testDRoundingMonteCarlo() {
<a class="jxr_linenumber" name="L501" href="#L501">501</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> tol = 1e-2;
<a class="jxr_linenumber" name="L502" href="#L502">502</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> iterations = 1000000;
<a class="jxr_linenumber" name="L503" href="#L503">503</a>         <strong class="jxr_keyword">final</strong> KolmogorovSmirnovTest test = <strong class="jxr_keyword">new</strong> KolmogorovSmirnovTest(<strong class="jxr_keyword">new</strong> Well19937c(1000));
<a class="jxr_linenumber" name="L504" href="#L504">504</a> 
<a class="jxr_linenumber" name="L505" href="#L505">505</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] x = {0, 2, 3, 4, 5, 6, 7, 8, 9, 12};
<a class="jxr_linenumber" name="L506" href="#L506">506</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] y = {1, 10, 11, 13, 14, 15, 16, 17, 18};
<a class="jxr_linenumber" name="L507" href="#L507">507</a>         <strong class="jxr_keyword">double</strong> d = test.kolmogorovSmirnovStatistic(x, y);
<a class="jxr_linenumber" name="L508" href="#L508">508</a>         Assert.assertEquals(0.0027495724090154106, test.monteCarloP(d, x.length, y.length, false, iterations), tol);
<a class="jxr_linenumber" name="L509" href="#L509">509</a> 
<a class="jxr_linenumber" name="L510" href="#L510">510</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] x1 = {2, 4, 6, 8, 9, 10, 11, 12, 13};
<a class="jxr_linenumber" name="L511" href="#L511">511</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] y1 = {0, 1, 3, 5, 7};
<a class="jxr_linenumber" name="L512" href="#L512">512</a>         d = test.kolmogorovSmirnovStatistic(x1, y1);
<a class="jxr_linenumber" name="L513" href="#L513">513</a>         Assert.assertEquals(0.085914085914085896, test.monteCarloP(d, x1.length, y1.length, false, iterations), tol);
<a class="jxr_linenumber" name="L514" href="#L514">514</a> 
<a class="jxr_linenumber" name="L515" href="#L515">515</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] x2 = {4, 6, 7, 8, 9, 10, 11};
<a class="jxr_linenumber" name="L516" href="#L516">516</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] y2 = {0, 1, 2, 3, 5};
<a class="jxr_linenumber" name="L517" href="#L517">517</a>         d = test.kolmogorovSmirnovStatistic(x2, y2);
<a class="jxr_linenumber" name="L518" href="#L518">518</a>         Assert.assertEquals(0.015151515151515027, test.monteCarloP(d, x2.length, y2.length, false, iterations), tol);
<a class="jxr_linenumber" name="L519" href="#L519">519</a>     }
<a class="jxr_linenumber" name="L520" href="#L520">520</a> 
<a class="jxr_linenumber" name="L521" href="#L521">521</a>     @Test
<a class="jxr_linenumber" name="L522" href="#L522">522</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testFillBooleanArrayRandomlyWithFixedNumberTrueValues() {
<a class="jxr_linenumber" name="L523" href="#L523">523</a> 
<a class="jxr_linenumber" name="L524" href="#L524">524</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong>[][] parameters = {{5, 1}, {5, 2}, {5, 3}, {5, 4}, {8, 1}, {8, 2}, {8, 3}, {8, 4}, {8, 5}, {8, 6}, {8, 7}};
<a class="jxr_linenumber" name="L525" href="#L525">525</a> 
<a class="jxr_linenumber" name="L526" href="#L526">526</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong> alpha = 0.001;
<a class="jxr_linenumber" name="L527" href="#L527">527</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> numIterations = 1000000;
<a class="jxr_linenumber" name="L528" href="#L528">528</a> 
<a class="jxr_linenumber" name="L529" href="#L529">529</a>         <strong class="jxr_keyword">final</strong> RandomGenerator rng = <strong class="jxr_keyword">new</strong> Well19937c(0);
<a class="jxr_linenumber" name="L530" href="#L530">530</a> 
<a class="jxr_linenumber" name="L531" href="#L531">531</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong>[] parameter : parameters) {
<a class="jxr_linenumber" name="L532" href="#L532">532</a> 
<a class="jxr_linenumber" name="L533" href="#L533">533</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> arraySize = parameter[0];
<a class="jxr_linenumber" name="L534" href="#L534">534</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> numberOfTrueValues = parameter[1];
<a class="jxr_linenumber" name="L535" href="#L535">535</a> 
<a class="jxr_linenumber" name="L536" href="#L536">536</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">boolean</strong>[] b = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">boolean</strong>[arraySize];
<a class="jxr_linenumber" name="L537" href="#L537">537</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">long</strong>[] counts = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">long</strong>[1 &lt;&lt; arraySize];
<a class="jxr_linenumber" name="L538" href="#L538">538</a> 
<a class="jxr_linenumber" name="L539" href="#L539">539</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; numIterations; ++i) {
<a class="jxr_linenumber" name="L540" href="#L540">540</a>                 KolmogorovSmirnovTest.fillBooleanArrayRandomlyWithFixedNumberTrueValues(b, numberOfTrueValues, rng);
<a class="jxr_linenumber" name="L541" href="#L541">541</a>                 <strong class="jxr_keyword">int</strong> x = 0;
<a class="jxr_linenumber" name="L542" href="#L542">542</a>                 <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = 0; j &lt; arraySize; ++j) {
<a class="jxr_linenumber" name="L543" href="#L543">543</a>                     x = ((x &lt;&lt; 1) | ((b[j])?1:0));
<a class="jxr_linenumber" name="L544" href="#L544">544</a>                 }
<a class="jxr_linenumber" name="L545" href="#L545">545</a>                 counts[x] += 1;
<a class="jxr_linenumber" name="L546" href="#L546">546</a>             }
<a class="jxr_linenumber" name="L547" href="#L547">547</a> 
<a class="jxr_linenumber" name="L548" href="#L548">548</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">int</strong> numCombinations = (<strong class="jxr_keyword">int</strong>) CombinatoricsUtils.binomialCoefficient(arraySize, numberOfTrueValues);
<a class="jxr_linenumber" name="L549" href="#L549">549</a> 
<a class="jxr_linenumber" name="L550" href="#L550">550</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">long</strong>[] observed = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">long</strong>[numCombinations];
<a class="jxr_linenumber" name="L551" href="#L551">551</a>             <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] expected = <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[numCombinations];
<a class="jxr_linenumber" name="L552" href="#L552">552</a>             Arrays.fill(expected, numIterations / (<strong class="jxr_keyword">double</strong>) numCombinations);
<a class="jxr_linenumber" name="L553" href="#L553">553</a> 
<a class="jxr_linenumber" name="L554" href="#L554">554</a>             <strong class="jxr_keyword">int</strong> observedIdx = 0;
<a class="jxr_linenumber" name="L555" href="#L555">555</a> 
<a class="jxr_linenumber" name="L556" href="#L556">556</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; (1 &lt;&lt; arraySize); ++i) {
<a class="jxr_linenumber" name="L557" href="#L557">557</a>                 <strong class="jxr_keyword">if</strong> (Integer.bitCount(i) == numberOfTrueValues) {
<a class="jxr_linenumber" name="L558" href="#L558">558</a>                     observed[observedIdx] = counts[i];
<a class="jxr_linenumber" name="L559" href="#L559">559</a>                     observedIdx += 1;
<a class="jxr_linenumber" name="L560" href="#L560">560</a>                 }
<a class="jxr_linenumber" name="L561" href="#L561">561</a>                 <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L562" href="#L562">562</a>                     Assert.assertEquals(0, counts[i]);
<a class="jxr_linenumber" name="L563" href="#L563">563</a>                 }
<a class="jxr_linenumber" name="L564" href="#L564">564</a>             }
<a class="jxr_linenumber" name="L565" href="#L565">565</a> 
<a class="jxr_linenumber" name="L566" href="#L566">566</a>             Assert.assertEquals(numCombinations, observedIdx);
<a class="jxr_linenumber" name="L567" href="#L567">567</a>             TestUtils.assertChiSquareAccept(expected, observed, alpha);
<a class="jxr_linenumber" name="L568" href="#L568">568</a>         }
<a class="jxr_linenumber" name="L569" href="#L569">569</a>     }
<a class="jxr_linenumber" name="L570" href="#L570">570</a> 
<a class="jxr_linenumber" name="L571" href="#L571">571</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L572" href="#L572">572</a> <em class="jxr_javadoccomment">     * Test an example with ties in the data.  Reference data is R 3.2.0,</em>
<a class="jxr_linenumber" name="L573" href="#L573">573</a> <em class="jxr_javadoccomment">     * ks.boot implemented in Matching (Version 4.8-3.4, Build Date: 2013/10/28)</em>
<a class="jxr_linenumber" name="L574" href="#L574">574</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L575" href="#L575">575</a>     @Test
<a class="jxr_linenumber" name="L576" href="#L576">576</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testBootstrapSmallSamplesWithTies() {
<a class="jxr_linenumber" name="L577" href="#L577">577</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] x = {0, 2, 4, 6, 8, 8, 10, 15, 22, 30, 33, 36, 38};
<a class="jxr_linenumber" name="L578" href="#L578">578</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] y = {9, 17, 20, 33, 40, 51, 60, 60, 72, 90, 101};
<a class="jxr_linenumber" name="L579" href="#L579">579</a>         <strong class="jxr_keyword">final</strong> KolmogorovSmirnovTest test = <strong class="jxr_keyword">new</strong> KolmogorovSmirnovTest(<strong class="jxr_keyword">new</strong> Well19937c(2000));
<a class="jxr_linenumber" name="L580" href="#L580">580</a>         Assert.assertEquals(0.0059, test.bootstrap(x, y, 10000, false), 1E-3);
<a class="jxr_linenumber" name="L581" href="#L581">581</a>     }
<a class="jxr_linenumber" name="L582" href="#L582">582</a> 
<a class="jxr_linenumber" name="L583" href="#L583">583</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L584" href="#L584">584</a> <em class="jxr_javadoccomment">     * Reference data is R 3.2.0, ks.boot implemented in</em>
<a class="jxr_linenumber" name="L585" href="#L585">585</a> <em class="jxr_javadoccomment">     * Matching (Version 4.8-3.4, Build Date: 2013/10/28)</em>
<a class="jxr_linenumber" name="L586" href="#L586">586</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L587" href="#L587">587</a>     @Test
<a class="jxr_linenumber" name="L588" href="#L588">588</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testBootstrapLargeSamples() {
<a class="jxr_linenumber" name="L589" href="#L589">589</a>         <strong class="jxr_keyword">final</strong> KolmogorovSmirnovTest test = <strong class="jxr_keyword">new</strong> KolmogorovSmirnovTest(<strong class="jxr_keyword">new</strong> Well19937c(1000));
<a class="jxr_linenumber" name="L590" href="#L590">590</a>         Assert.assertEquals(0.0237, test.bootstrap(gaussian, gaussian2, 10000), 1E-2);
<a class="jxr_linenumber" name="L591" href="#L591">591</a>     }
<a class="jxr_linenumber" name="L592" href="#L592">592</a> 
<a class="jxr_linenumber" name="L593" href="#L593">593</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L594" href="#L594">594</a> <em class="jxr_javadoccomment">     * Test an example where D-values are close (subject to rounding).</em>
<a class="jxr_linenumber" name="L595" href="#L595">595</a> <em class="jxr_javadoccomment">     * Reference data is R 3.2.0, ks.boot implemented in</em>
<a class="jxr_linenumber" name="L596" href="#L596">596</a> <em class="jxr_javadoccomment">     * Matching (Version 4.8-3.4, Build Date: 2013/10/28)</em>
<a class="jxr_linenumber" name="L597" href="#L597">597</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L598" href="#L598">598</a>     @Test
<a class="jxr_linenumber" name="L599" href="#L599">599</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testBootstrapRounding() {
<a class="jxr_linenumber" name="L600" href="#L600">600</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] x = {2,4,6,8,9,10,11,12,13};
<a class="jxr_linenumber" name="L601" href="#L601">601</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] y = {0,1,3,5,7};
<a class="jxr_linenumber" name="L602" href="#L602">602</a>         <strong class="jxr_keyword">final</strong> KolmogorovSmirnovTest test = <strong class="jxr_keyword">new</strong> KolmogorovSmirnovTest(<strong class="jxr_keyword">new</strong> Well19937c(1000));
<a class="jxr_linenumber" name="L603" href="#L603">603</a>         Assert.assertEquals(0.06303, test.bootstrap(x, y, 10000, false), 1E-2);
<a class="jxr_linenumber" name="L604" href="#L604">604</a>     }
<a class="jxr_linenumber" name="L605" href="#L605">605</a> 
<a class="jxr_linenumber" name="L606" href="#L606">606</a>     @Test
<a class="jxr_linenumber" name="L607" href="#L607">607</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testFixTiesNoOp() <strong class="jxr_keyword">throws</strong> Exception {
<a class="jxr_linenumber" name="L608" href="#L608">608</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] x = {0, 1, 2, 3, 4};
<a class="jxr_linenumber" name="L609" href="#L609">609</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] y = {5, 6, 7, 8};
<a class="jxr_linenumber" name="L610" href="#L610">610</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] origX = MathArrays.copyOf(x);
<a class="jxr_linenumber" name="L611" href="#L611">611</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] origY = MathArrays.copyOf(y);
<a class="jxr_linenumber" name="L612" href="#L612">612</a>         fixTies(x,y);
<a class="jxr_linenumber" name="L613" href="#L613">613</a>         Assert.assertArrayEquals(origX, x, 0);
<a class="jxr_linenumber" name="L614" href="#L614">614</a>         Assert.assertArrayEquals(origY, y, 0);
<a class="jxr_linenumber" name="L615" href="#L615">615</a>     }
<a class="jxr_linenumber" name="L616" href="#L616">616</a> 
<a class="jxr_linenumber" name="L617" href="#L617">617</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L618" href="#L618">618</a> <em class="jxr_javadoccomment">     * Verify that fixTies is deterministic, i.e,</em>
<a class="jxr_linenumber" name="L619" href="#L619">619</a> <em class="jxr_javadoccomment">     * x = x', y = y' =&gt; fixTies(x,y) = fixTies(x', y')</em>
<a class="jxr_linenumber" name="L620" href="#L620">620</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L621" href="#L621">621</a>     @Test
<a class="jxr_linenumber" name="L622" href="#L622">622</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testFixTiesConsistency() <strong class="jxr_keyword">throws</strong> Exception {
<a class="jxr_linenumber" name="L623" href="#L623">623</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] x = {0, 1, 2, 3, 4, 2};
<a class="jxr_linenumber" name="L624" href="#L624">624</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] y = {5, 6, 7, 8, 1, 2};
<a class="jxr_linenumber" name="L625" href="#L625">625</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] xP = MathArrays.copyOf(x);
<a class="jxr_linenumber" name="L626" href="#L626">626</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] yP = MathArrays.copyOf(y);
<a class="jxr_linenumber" name="L627" href="#L627">627</a>         checkFixTies(x, y);
<a class="jxr_linenumber" name="L628" href="#L628">628</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] fixedX = MathArrays.copyOf(x);
<a class="jxr_linenumber" name="L629" href="#L629">629</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] fixedY = MathArrays.copyOf(y);
<a class="jxr_linenumber" name="L630" href="#L630">630</a>         checkFixTies(xP, yP);
<a class="jxr_linenumber" name="L631" href="#L631">631</a>         Assert.assertArrayEquals(fixedX, xP, 0);
<a class="jxr_linenumber" name="L632" href="#L632">632</a>         Assert.assertArrayEquals(fixedY,  yP, 0);
<a class="jxr_linenumber" name="L633" href="#L633">633</a>     }
<a class="jxr_linenumber" name="L634" href="#L634">634</a> 
<a class="jxr_linenumber" name="L635" href="#L635">635</a>     @Test
<a class="jxr_linenumber" name="L636" href="#L636">636</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testFixTies() <strong class="jxr_keyword">throws</strong> Exception {
<a class="jxr_linenumber" name="L637" href="#L637">637</a>         checkFixTies(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 1, 1, 4, 0}, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {0, 5, 0.5, 0.55, 7});
<a class="jxr_linenumber" name="L638" href="#L638">638</a>         checkFixTies(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {1, 1, 1, 1, 1}, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {1, 1});
<a class="jxr_linenumber" name="L639" href="#L639">639</a>         checkFixTies(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {1, 2, 3}, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {1});
<a class="jxr_linenumber" name="L640" href="#L640">640</a>         checkFixTies(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {1, 1, 0, 1, 0}, <strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[] {});
<a class="jxr_linenumber" name="L641" href="#L641">641</a>     }
<a class="jxr_linenumber" name="L642" href="#L642">642</a> 
<a class="jxr_linenumber" name="L643" href="#L643">643</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L644" href="#L644">644</a> <em class="jxr_javadoccomment">     * Checks that fixTies eliminates ties in the data but does not otherwise</em>
<a class="jxr_linenumber" name="L645" href="#L645">645</a> <em class="jxr_javadoccomment">     * perturb the ordering.</em>
<a class="jxr_linenumber" name="L646" href="#L646">646</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L647" href="#L647">647</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">void</strong> checkFixTies(<strong class="jxr_keyword">double</strong>[] x, <strong class="jxr_keyword">double</strong>[] y) <strong class="jxr_keyword">throws</strong> Exception {
<a class="jxr_linenumber" name="L648" href="#L648">648</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] origCombined = MathArrays.concatenate(x, y);
<a class="jxr_linenumber" name="L649" href="#L649">649</a>         fixTies(x, y);
<a class="jxr_linenumber" name="L650" href="#L650">650</a>         Assert.assertFalse(hasTies(x, y));
<a class="jxr_linenumber" name="L651" href="#L651">651</a>         <strong class="jxr_keyword">final</strong> <strong class="jxr_keyword">double</strong>[] combined = MathArrays.concatenate(x, y);
<a class="jxr_linenumber" name="L652" href="#L652">652</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; combined.length; i++) {
<a class="jxr_linenumber" name="L653" href="#L653">653</a>             <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> j = 0; j &lt; i; j++) {
<a class="jxr_linenumber" name="L654" href="#L654">654</a>                 Assert.assertTrue(combined[i] != combined[j]);
<a class="jxr_linenumber" name="L655" href="#L655">655</a>                 <strong class="jxr_keyword">if</strong> (combined[i] &lt; combined[j])
<a class="jxr_linenumber" name="L656" href="#L656">656</a>                     Assert.assertTrue(origCombined[i] &lt; origCombined[j]
<a class="jxr_linenumber" name="L657" href="#L657">657</a>                                           || origCombined[i] == origCombined[j]);
<a class="jxr_linenumber" name="L658" href="#L658">658</a>             }
<a class="jxr_linenumber" name="L659" href="#L659">659</a> 
<a class="jxr_linenumber" name="L660" href="#L660">660</a>         }
<a class="jxr_linenumber" name="L661" href="#L661">661</a>     }
<a class="jxr_linenumber" name="L662" href="#L662">662</a> 
<a class="jxr_linenumber" name="L663" href="#L663">663</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L664" href="#L664">664</a> <em class="jxr_javadoccomment">     * Verifies the inequality exactP(criticalValue, n, m, true) &lt; alpha &lt; exactP(criticalValue, n,</em>
<a class="jxr_linenumber" name="L665" href="#L665">665</a> <em class="jxr_javadoccomment">     * m, false).</em>
<a class="jxr_linenumber" name="L666" href="#L666">666</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L667" href="#L667">667</a> <em class="jxr_javadoccomment">     * Note that the validity of this check depends on the fact that alpha lies strictly between two</em>
<a class="jxr_linenumber" name="L668" href="#L668">668</a> <em class="jxr_javadoccomment">     * attained values of the distribution and that criticalValue is one of the attained values. The</em>
<a class="jxr_linenumber" name="L669" href="#L669">669</a> <em class="jxr_javadoccomment">     * critical value table (reference below) uses attained values. This test therefore also</em>
<a class="jxr_linenumber" name="L670" href="#L670">670</a> <em class="jxr_javadoccomment">     * verifies that criticalValue is attained.</em>
<a class="jxr_linenumber" name="L671" href="#L671">671</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L672" href="#L672">672</a> <em class="jxr_javadoccomment">     * @param n first sample size</em>
<a class="jxr_linenumber" name="L673" href="#L673">673</a> <em class="jxr_javadoccomment">     * @param m second sample size</em>
<a class="jxr_linenumber" name="L674" href="#L674">674</a> <em class="jxr_javadoccomment">     * @param criticalValue critical value</em>
<a class="jxr_linenumber" name="L675" href="#L675">675</a> <em class="jxr_javadoccomment">     * @param alpha significance level</em>
<a class="jxr_linenumber" name="L676" href="#L676">676</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L677" href="#L677">677</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">void</strong> checkExactTable(<strong class="jxr_keyword">int</strong> n, <strong class="jxr_keyword">int</strong> m, <strong class="jxr_keyword">double</strong> criticalValue, <strong class="jxr_keyword">double</strong> alpha) {
<a class="jxr_linenumber" name="L678" href="#L678">678</a>         <strong class="jxr_keyword">final</strong> KolmogorovSmirnovTest test = <strong class="jxr_keyword">new</strong> KolmogorovSmirnovTest();
<a class="jxr_linenumber" name="L679" href="#L679">679</a>         Assert.assertTrue(test.exactP(criticalValue, n, m, <strong class="jxr_keyword">true</strong>) &lt; alpha);
<a class="jxr_linenumber" name="L680" href="#L680">680</a>         Assert.assertTrue(test.exactP(criticalValue, n, m, false) &gt; alpha);
<a class="jxr_linenumber" name="L681" href="#L681">681</a>     }
<a class="jxr_linenumber" name="L682" href="#L682">682</a> 
<a class="jxr_linenumber" name="L683" href="#L683">683</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L684" href="#L684">684</a> <em class="jxr_javadoccomment">     * Verifies that approximateP(criticalValue, n, m) is within epsilon of alpha.</em>
<a class="jxr_linenumber" name="L685" href="#L685">685</a> <em class="jxr_javadoccomment">     *</em>
<a class="jxr_linenumber" name="L686" href="#L686">686</a> <em class="jxr_javadoccomment">     * @param n first sample size</em>
<a class="jxr_linenumber" name="L687" href="#L687">687</a> <em class="jxr_javadoccomment">     * @param m second sample size</em>
<a class="jxr_linenumber" name="L688" href="#L688">688</a> <em class="jxr_javadoccomment">     * @param criticalValue critical value (from table)</em>
<a class="jxr_linenumber" name="L689" href="#L689">689</a> <em class="jxr_javadoccomment">     * @param alpha significance level</em>
<a class="jxr_linenumber" name="L690" href="#L690">690</a> <em class="jxr_javadoccomment">     * @param epsilon tolerance</em>
<a class="jxr_linenumber" name="L691" href="#L691">691</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L692" href="#L692">692</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">void</strong> checkApproximateTable(<strong class="jxr_keyword">int</strong> n, <strong class="jxr_keyword">int</strong> m, <strong class="jxr_keyword">double</strong> criticalValue, <strong class="jxr_keyword">double</strong> alpha, <strong class="jxr_keyword">double</strong> epsilon) {
<a class="jxr_linenumber" name="L693" href="#L693">693</a>         <strong class="jxr_keyword">final</strong> KolmogorovSmirnovTest test = <strong class="jxr_keyword">new</strong> KolmogorovSmirnovTest();
<a class="jxr_linenumber" name="L694" href="#L694">694</a>         Assert.assertEquals(alpha, test.approximateP(criticalValue, n, m), epsilon);
<a class="jxr_linenumber" name="L695" href="#L695">695</a>     }
<a class="jxr_linenumber" name="L696" href="#L696">696</a> 
<a class="jxr_linenumber" name="L697" href="#L697">697</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L698" href="#L698">698</a> <em class="jxr_javadoccomment">     * Reflection hack to expose private fixTies method for testing.</em>
<a class="jxr_linenumber" name="L699" href="#L699">699</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L700" href="#L700">700</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">void</strong> fixTies(<strong class="jxr_keyword">double</strong>[] x, <strong class="jxr_keyword">double</strong>[] y) <strong class="jxr_keyword">throws</strong> Exception {
<a class="jxr_linenumber" name="L701" href="#L701">701</a>         Method method = KolmogorovSmirnovTest.<strong class="jxr_keyword">class</strong>.getDeclaredMethod(<span class="jxr_string">"fixTies"</span>,
<a class="jxr_linenumber" name="L702" href="#L702">702</a>                                              <strong class="jxr_keyword">double</strong>[].<strong class="jxr_keyword">class</strong>, <strong class="jxr_keyword">double</strong>[].<strong class="jxr_keyword">class</strong>);
<a class="jxr_linenumber" name="L703" href="#L703">703</a>         method.setAccessible(<strong class="jxr_keyword">true</strong>);
<a class="jxr_linenumber" name="L704" href="#L704">704</a>         method.invoke(KolmogorovSmirnovTest.<strong class="jxr_keyword">class</strong>, x, y);
<a class="jxr_linenumber" name="L705" href="#L705">705</a>     }
<a class="jxr_linenumber" name="L706" href="#L706">706</a> 
<a class="jxr_linenumber" name="L707" href="#L707">707</a>     <em class="jxr_javadoccomment">/**</em>
<a class="jxr_linenumber" name="L708" href="#L708">708</a> <em class="jxr_javadoccomment">     * Reflection hack to expose private hasTies method.</em>
<a class="jxr_linenumber" name="L709" href="#L709">709</a> <em class="jxr_javadoccomment">     */</em>
<a class="jxr_linenumber" name="L710" href="#L710">710</a>     <strong class="jxr_keyword">private</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">boolean</strong> hasTies(<strong class="jxr_keyword">double</strong>[] x, <strong class="jxr_keyword">double</strong>[] y) <strong class="jxr_keyword">throws</strong> Exception {
<a class="jxr_linenumber" name="L711" href="#L711">711</a>         Method method = KolmogorovSmirnovTest.<strong class="jxr_keyword">class</strong>.getDeclaredMethod(<span class="jxr_string">"hasTies"</span>,
<a class="jxr_linenumber" name="L712" href="#L712">712</a>                                                <strong class="jxr_keyword">double</strong>[].<strong class="jxr_keyword">class</strong>, <strong class="jxr_keyword">double</strong>[].<strong class="jxr_keyword">class</strong>);
<a class="jxr_linenumber" name="L713" href="#L713">713</a>         method.setAccessible(<strong class="jxr_keyword">true</strong>);
<a class="jxr_linenumber" name="L714" href="#L714">714</a>         <strong class="jxr_keyword">return</strong> (Boolean) method.invoke(KolmogorovSmirnovTest.<strong class="jxr_keyword">class</strong>, x, y);
<a class="jxr_linenumber" name="L715" href="#L715">715</a>     }
<a class="jxr_linenumber" name="L716" href="#L716">716</a> 
<a class="jxr_linenumber" name="L717" href="#L717">717</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2003&#x2013;2016 <a href="http://www.apache.org/">The Apache Software Foundation</a>. All rights reserved.</div>
</body>
</html>
