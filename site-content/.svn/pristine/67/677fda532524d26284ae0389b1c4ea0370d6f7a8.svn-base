<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>SphericalPolygonsSetTest xref</title>
<link type="text/css" rel="stylesheet" href="../../../../../../../stylesheet.css" />
</head>
<body>
<div id="overview"><a href="../../../../../../../../testapidocs/org/apache/commons/math3/geometry/spherical/twod/SphericalPolygonsSetTest.html">View Javadoc</a></div><pre>
<a class="jxr_linenumber" name="L1" href="#L1">1</a>   <em class="jxr_comment">/*</em>
<a class="jxr_linenumber" name="L2" href="#L2">2</a>   <em class="jxr_comment"> * Licensed to the Apache Software Foundation (ASF) under one or more</em>
<a class="jxr_linenumber" name="L3" href="#L3">3</a>   <em class="jxr_comment"> * contributor license agreements.  See the NOTICE file distributed with</em>
<a class="jxr_linenumber" name="L4" href="#L4">4</a>   <em class="jxr_comment"> * this work for additional information regarding copyright ownership.</em>
<a class="jxr_linenumber" name="L5" href="#L5">5</a>   <em class="jxr_comment"> * The ASF licenses this file to You under the Apache License, Version 2.0</em>
<a class="jxr_linenumber" name="L6" href="#L6">6</a>   <em class="jxr_comment"> * (the "License"); you may not use this file except in compliance with</em>
<a class="jxr_linenumber" name="L7" href="#L7">7</a>   <em class="jxr_comment"> * the License.  You may obtain a copy of the License at</em>
<a class="jxr_linenumber" name="L8" href="#L8">8</a>   <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L9" href="#L9">9</a>   <em class="jxr_comment"> *      <a href="http://www.apache.org/licenses/LICENSE-2." target="alexandria_uri">http://www.apache.org/licenses/LICENSE-2.</a>0</em>
<a class="jxr_linenumber" name="L10" href="#L10">10</a>  <em class="jxr_comment"> *</em>
<a class="jxr_linenumber" name="L11" href="#L11">11</a>  <em class="jxr_comment"> * Unless required by applicable law or agreed to in writing, software</em>
<a class="jxr_linenumber" name="L12" href="#L12">12</a>  <em class="jxr_comment"> * distributed under the License is distributed on an "AS IS" BASIS,</em>
<a class="jxr_linenumber" name="L13" href="#L13">13</a>  <em class="jxr_comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</em>
<a class="jxr_linenumber" name="L14" href="#L14">14</a>  <em class="jxr_comment"> * See the License for the specific language governing permissions and</em>
<a class="jxr_linenumber" name="L15" href="#L15">15</a>  <em class="jxr_comment"> * limitations under the License.</em>
<a class="jxr_linenumber" name="L16" href="#L16">16</a>  <em class="jxr_comment"> */</em>
<a class="jxr_linenumber" name="L17" href="#L17">17</a>  <strong class="jxr_keyword">package</strong> org.apache.commons.math3.geometry.spherical.twod;
<a class="jxr_linenumber" name="L18" href="#L18">18</a>  
<a class="jxr_linenumber" name="L19" href="#L19">19</a>  <strong class="jxr_keyword">import</strong> java.util.ArrayList;
<a class="jxr_linenumber" name="L20" href="#L20">20</a>  <strong class="jxr_keyword">import</strong> java.util.List;
<a class="jxr_linenumber" name="L21" href="#L21">21</a>  
<a class="jxr_linenumber" name="L22" href="#L22">22</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.geometry.enclosing.EnclosingBall;
<a class="jxr_linenumber" name="L23" href="#L23">23</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.geometry.euclidean.threed.Rotation;
<a class="jxr_linenumber" name="L24" href="#L24">24</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
<a class="jxr_linenumber" name="L25" href="#L25">25</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.geometry.partitioning.Region.Location;
<a class="jxr_linenumber" name="L26" href="#L26">26</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.geometry.partitioning.RegionFactory;
<a class="jxr_linenumber" name="L27" href="#L27">27</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.geometry.partitioning.SubHyperplane;
<a class="jxr_linenumber" name="L28" href="#L28">28</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.geometry.spherical.oned.ArcsSet;
<a class="jxr_linenumber" name="L29" href="#L29">29</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.geometry.spherical.oned.Sphere1D;
<a class="jxr_linenumber" name="L30" href="#L30">30</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.random.UnitSphereRandomVectorGenerator;
<a class="jxr_linenumber" name="L31" href="#L31">31</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.random.Well1024a;
<a class="jxr_linenumber" name="L32" href="#L32">32</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.util.FastMath;
<a class="jxr_linenumber" name="L33" href="#L33">33</a>  <strong class="jxr_keyword">import</strong> org.apache.commons.math3.util.MathUtils;
<a class="jxr_linenumber" name="L34" href="#L34">34</a>  <strong class="jxr_keyword">import</strong> org.junit.Assert;
<a class="jxr_linenumber" name="L35" href="#L35">35</a>  <strong class="jxr_keyword">import</strong> org.junit.Test;
<a class="jxr_linenumber" name="L36" href="#L36">36</a>  
<a class="jxr_linenumber" name="L37" href="#L37">37</a>  <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../../../org/apache/commons/math3/geometry/spherical/twod/SphericalPolygonsSetTest.html">SphericalPolygonsSetTest</a> {
<a class="jxr_linenumber" name="L38" href="#L38">38</a>  
<a class="jxr_linenumber" name="L39" href="#L39">39</a>      @Test
<a class="jxr_linenumber" name="L40" href="#L40">40</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testFullSphere() {
<a class="jxr_linenumber" name="L41" href="#L41">41</a>          SphericalPolygonsSet full = <strong class="jxr_keyword">new</strong> SphericalPolygonsSet(1.0e-10);
<a class="jxr_linenumber" name="L42" href="#L42">42</a>          UnitSphereRandomVectorGenerator random =
<a class="jxr_linenumber" name="L43" href="#L43">43</a>                  <strong class="jxr_keyword">new</strong> UnitSphereRandomVectorGenerator(3, <strong class="jxr_keyword">new</strong> Well1024a(0x852fd2a0ed8d2f6dl));
<a class="jxr_linenumber" name="L44" href="#L44">44</a>          <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; 1000; ++i) {
<a class="jxr_linenumber" name="L45" href="#L45">45</a>              Vector3D v = <strong class="jxr_keyword">new</strong> Vector3D(random.nextVector());
<a class="jxr_linenumber" name="L46" href="#L46">46</a>              Assert.assertEquals(Location.INSIDE, full.checkPoint(<strong class="jxr_keyword">new</strong> S2Point(v)));
<a class="jxr_linenumber" name="L47" href="#L47">47</a>          }
<a class="jxr_linenumber" name="L48" href="#L48">48</a>          Assert.assertEquals(4 * FastMath.PI, <strong class="jxr_keyword">new</strong> SphericalPolygonsSet(0.01, <strong class="jxr_keyword">new</strong> S2Point[0]).getSize(), 1.0e-10);
<a class="jxr_linenumber" name="L49" href="#L49">49</a>          Assert.assertEquals(0, <strong class="jxr_keyword">new</strong> SphericalPolygonsSet(0.01, <strong class="jxr_keyword">new</strong> S2Point[0]).getBoundarySize(), 1.0e-10);
<a class="jxr_linenumber" name="L50" href="#L50">50</a>          Assert.assertEquals(0, full.getBoundaryLoops().size());
<a class="jxr_linenumber" name="L51" href="#L51">51</a>          Assert.assertTrue(full.getEnclosingCap().getRadius() &gt; 0);
<a class="jxr_linenumber" name="L52" href="#L52">52</a>          Assert.assertTrue(Double.isInfinite(full.getEnclosingCap().getRadius()));
<a class="jxr_linenumber" name="L53" href="#L53">53</a>      }
<a class="jxr_linenumber" name="L54" href="#L54">54</a>  
<a class="jxr_linenumber" name="L55" href="#L55">55</a>      @Test
<a class="jxr_linenumber" name="L56" href="#L56">56</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testEmpty() {
<a class="jxr_linenumber" name="L57" href="#L57">57</a>          SphericalPolygonsSet empty =
<a class="jxr_linenumber" name="L58" href="#L58">58</a>              (SphericalPolygonsSet) <strong class="jxr_keyword">new</strong> RegionFactory&lt;Sphere2D&gt;().getComplement(<strong class="jxr_keyword">new</strong> SphericalPolygonsSet(1.0e-10));
<a class="jxr_linenumber" name="L59" href="#L59">59</a>          UnitSphereRandomVectorGenerator random =
<a class="jxr_linenumber" name="L60" href="#L60">60</a>                  <strong class="jxr_keyword">new</strong> UnitSphereRandomVectorGenerator(3, <strong class="jxr_keyword">new</strong> Well1024a(0x76d9205d6167b6ddl));
<a class="jxr_linenumber" name="L61" href="#L61">61</a>          <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; 1000; ++i) {
<a class="jxr_linenumber" name="L62" href="#L62">62</a>              Vector3D v = <strong class="jxr_keyword">new</strong> Vector3D(random.nextVector());
<a class="jxr_linenumber" name="L63" href="#L63">63</a>              Assert.assertEquals(Location.OUTSIDE, empty.checkPoint(<strong class="jxr_keyword">new</strong> S2Point(v)));
<a class="jxr_linenumber" name="L64" href="#L64">64</a>          }
<a class="jxr_linenumber" name="L65" href="#L65">65</a>          Assert.assertEquals(0, empty.getSize(), 1.0e-10);
<a class="jxr_linenumber" name="L66" href="#L66">66</a>          Assert.assertEquals(0, empty.getBoundarySize(), 1.0e-10);
<a class="jxr_linenumber" name="L67" href="#L67">67</a>          Assert.assertEquals(0, empty.getBoundaryLoops().size());
<a class="jxr_linenumber" name="L68" href="#L68">68</a>          Assert.assertTrue(empty.getEnclosingCap().getRadius() &lt; 0);
<a class="jxr_linenumber" name="L69" href="#L69">69</a>          Assert.assertTrue(Double.isInfinite(empty.getEnclosingCap().getRadius()));
<a class="jxr_linenumber" name="L70" href="#L70">70</a>      }
<a class="jxr_linenumber" name="L71" href="#L71">71</a>  
<a class="jxr_linenumber" name="L72" href="#L72">72</a>      @Test
<a class="jxr_linenumber" name="L73" href="#L73">73</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testSouthHemisphere() {
<a class="jxr_linenumber" name="L74" href="#L74">74</a>          <strong class="jxr_keyword">double</strong> tol = 0.01;
<a class="jxr_linenumber" name="L75" href="#L75">75</a>          <strong class="jxr_keyword">double</strong> sinTol = FastMath.sin(tol);
<a class="jxr_linenumber" name="L76" href="#L76">76</a>          SphericalPolygonsSet south = <strong class="jxr_keyword">new</strong> SphericalPolygonsSet(Vector3D.MINUS_K, tol);
<a class="jxr_linenumber" name="L77" href="#L77">77</a>          UnitSphereRandomVectorGenerator random =
<a class="jxr_linenumber" name="L78" href="#L78">78</a>                  <strong class="jxr_keyword">new</strong> UnitSphereRandomVectorGenerator(3, <strong class="jxr_keyword">new</strong> Well1024a(0x6b9d4a6ad90d7b0bl));
<a class="jxr_linenumber" name="L79" href="#L79">79</a>          <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; 1000; ++i) {
<a class="jxr_linenumber" name="L80" href="#L80">80</a>              Vector3D v = <strong class="jxr_keyword">new</strong> Vector3D(random.nextVector());
<a class="jxr_linenumber" name="L81" href="#L81">81</a>              <strong class="jxr_keyword">if</strong> (v.getZ() &lt; -sinTol) {
<a class="jxr_linenumber" name="L82" href="#L82">82</a>                  Assert.assertEquals(Location.INSIDE, south.checkPoint(<strong class="jxr_keyword">new</strong> S2Point(v)));
<a class="jxr_linenumber" name="L83" href="#L83">83</a>              } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (v.getZ() &gt; sinTol) {
<a class="jxr_linenumber" name="L84" href="#L84">84</a>                  Assert.assertEquals(Location.OUTSIDE, south.checkPoint(<strong class="jxr_keyword">new</strong> S2Point(v)));
<a class="jxr_linenumber" name="L85" href="#L85">85</a>              } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L86" href="#L86">86</a>                  Assert.assertEquals(Location.BOUNDARY, south.checkPoint(<strong class="jxr_keyword">new</strong> S2Point(v)));
<a class="jxr_linenumber" name="L87" href="#L87">87</a>              }
<a class="jxr_linenumber" name="L88" href="#L88">88</a>          }
<a class="jxr_linenumber" name="L89" href="#L89">89</a>          Assert.assertEquals(1, south.getBoundaryLoops().size());
<a class="jxr_linenumber" name="L90" href="#L90">90</a>  
<a class="jxr_linenumber" name="L91" href="#L91">91</a>          EnclosingBall&lt;Sphere2D, S2Point&gt; southCap = south.getEnclosingCap();
<a class="jxr_linenumber" name="L92" href="#L92">92</a>          Assert.assertEquals(0.0, S2Point.MINUS_K.distance(southCap.getCenter()), 1.0e-10);
<a class="jxr_linenumber" name="L93" href="#L93">93</a>          Assert.assertEquals(0.5 * FastMath.PI, southCap.getRadius(), 1.0e-10);
<a class="jxr_linenumber" name="L94" href="#L94">94</a>  
<a class="jxr_linenumber" name="L95" href="#L95">95</a>          EnclosingBall&lt;Sphere2D, S2Point&gt; northCap =
<a class="jxr_linenumber" name="L96" href="#L96">96</a>                  ((SphericalPolygonsSet) <strong class="jxr_keyword">new</strong> RegionFactory&lt;Sphere2D&gt;().getComplement(south)).getEnclosingCap();
<a class="jxr_linenumber" name="L97" href="#L97">97</a>          Assert.assertEquals(0.0, S2Point.PLUS_K.distance(northCap.getCenter()), 1.0e-10);
<a class="jxr_linenumber" name="L98" href="#L98">98</a>          Assert.assertEquals(0.5 * FastMath.PI, northCap.getRadius(), 1.0e-10);
<a class="jxr_linenumber" name="L99" href="#L99">99</a>  
<a class="jxr_linenumber" name="L100" href="#L100">100</a>     }
<a class="jxr_linenumber" name="L101" href="#L101">101</a> 
<a class="jxr_linenumber" name="L102" href="#L102">102</a>     @Test
<a class="jxr_linenumber" name="L103" href="#L103">103</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testPositiveOctantByIntersection() {
<a class="jxr_linenumber" name="L104" href="#L104">104</a>         <strong class="jxr_keyword">double</strong> tol = 0.01;
<a class="jxr_linenumber" name="L105" href="#L105">105</a>         <strong class="jxr_keyword">double</strong> sinTol = FastMath.sin(tol);
<a class="jxr_linenumber" name="L106" href="#L106">106</a>         RegionFactory&lt;Sphere2D&gt; factory = <strong class="jxr_keyword">new</strong> RegionFactory&lt;Sphere2D&gt;();
<a class="jxr_linenumber" name="L107" href="#L107">107</a>         SphericalPolygonsSet plusX = <strong class="jxr_keyword">new</strong> SphericalPolygonsSet(Vector3D.PLUS_I, tol);
<a class="jxr_linenumber" name="L108" href="#L108">108</a>         SphericalPolygonsSet plusY = <strong class="jxr_keyword">new</strong> SphericalPolygonsSet(Vector3D.PLUS_J, tol);
<a class="jxr_linenumber" name="L109" href="#L109">109</a>         SphericalPolygonsSet plusZ = <strong class="jxr_keyword">new</strong> SphericalPolygonsSet(Vector3D.PLUS_K, tol);
<a class="jxr_linenumber" name="L110" href="#L110">110</a>         SphericalPolygonsSet octant =
<a class="jxr_linenumber" name="L111" href="#L111">111</a>                 (SphericalPolygonsSet) factory.intersection(factory.intersection(plusX, plusY), plusZ);
<a class="jxr_linenumber" name="L112" href="#L112">112</a>         UnitSphereRandomVectorGenerator random =
<a class="jxr_linenumber" name="L113" href="#L113">113</a>                 <strong class="jxr_keyword">new</strong> UnitSphereRandomVectorGenerator(3, <strong class="jxr_keyword">new</strong> Well1024a(0x9c9802fde3cbcf25l));
<a class="jxr_linenumber" name="L114" href="#L114">114</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; 1000; ++i) {
<a class="jxr_linenumber" name="L115" href="#L115">115</a>             Vector3D v = <strong class="jxr_keyword">new</strong> Vector3D(random.nextVector());
<a class="jxr_linenumber" name="L116" href="#L116">116</a>             <strong class="jxr_keyword">if</strong> ((v.getX() &gt; sinTol) &amp;&amp; (v.getY() &gt; sinTol) &amp;&amp; (v.getZ() &gt; sinTol)) {
<a class="jxr_linenumber" name="L117" href="#L117">117</a>                 Assert.assertEquals(Location.INSIDE, octant.checkPoint(<strong class="jxr_keyword">new</strong> S2Point(v)));
<a class="jxr_linenumber" name="L118" href="#L118">118</a>             } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> ((v.getX() &lt; -sinTol) || (v.getY() &lt; -sinTol) || (v.getZ() &lt; -sinTol)) {
<a class="jxr_linenumber" name="L119" href="#L119">119</a>                 Assert.assertEquals(Location.OUTSIDE, octant.checkPoint(<strong class="jxr_keyword">new</strong> S2Point(v)));
<a class="jxr_linenumber" name="L120" href="#L120">120</a>             } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L121" href="#L121">121</a>                 Assert.assertEquals(Location.BOUNDARY, octant.checkPoint(<strong class="jxr_keyword">new</strong> S2Point(v)));
<a class="jxr_linenumber" name="L122" href="#L122">122</a>             }
<a class="jxr_linenumber" name="L123" href="#L123">123</a>         }
<a class="jxr_linenumber" name="L124" href="#L124">124</a> 
<a class="jxr_linenumber" name="L125" href="#L125">125</a>         List&lt;Vertex&gt; loops = octant.getBoundaryLoops();
<a class="jxr_linenumber" name="L126" href="#L126">126</a>         Assert.assertEquals(1, loops.size());
<a class="jxr_linenumber" name="L127" href="#L127">127</a>         <strong class="jxr_keyword">boolean</strong> xPFound = false;
<a class="jxr_linenumber" name="L128" href="#L128">128</a>         <strong class="jxr_keyword">boolean</strong> yPFound = false;
<a class="jxr_linenumber" name="L129" href="#L129">129</a>         <strong class="jxr_keyword">boolean</strong> zPFound = false;
<a class="jxr_linenumber" name="L130" href="#L130">130</a>         <strong class="jxr_keyword">boolean</strong> xVFound = false;
<a class="jxr_linenumber" name="L131" href="#L131">131</a>         <strong class="jxr_keyword">boolean</strong> yVFound = false;
<a class="jxr_linenumber" name="L132" href="#L132">132</a>         <strong class="jxr_keyword">boolean</strong> zVFound = false;
<a class="jxr_linenumber" name="L133" href="#L133">133</a>         Vertex first = loops.get(0);
<a class="jxr_linenumber" name="L134" href="#L134">134</a>         <strong class="jxr_keyword">int</strong> count = 0;
<a class="jxr_linenumber" name="L135" href="#L135">135</a>         <strong class="jxr_keyword">for</strong> (Vertex v = first; count == 0 || v != first; v = v.getOutgoing().getEnd()) {
<a class="jxr_linenumber" name="L136" href="#L136">136</a>             ++count;
<a class="jxr_linenumber" name="L137" href="#L137">137</a>             Edge e = v.getIncoming();
<a class="jxr_linenumber" name="L138" href="#L138">138</a>             Assert.assertTrue(v == e.getStart().getOutgoing().getEnd());
<a class="jxr_linenumber" name="L139" href="#L139">139</a>             xPFound = xPFound || e.getCircle().getPole().distance(Vector3D.PLUS_I) &lt; 1.0e-10;
<a class="jxr_linenumber" name="L140" href="#L140">140</a>             yPFound = yPFound || e.getCircle().getPole().distance(Vector3D.PLUS_J) &lt; 1.0e-10;
<a class="jxr_linenumber" name="L141" href="#L141">141</a>             zPFound = zPFound || e.getCircle().getPole().distance(Vector3D.PLUS_K) &lt; 1.0e-10;
<a class="jxr_linenumber" name="L142" href="#L142">142</a>             Assert.assertEquals(0.5 * FastMath.PI, e.getLength(), 1.0e-10);
<a class="jxr_linenumber" name="L143" href="#L143">143</a>             xVFound = xVFound || v.getLocation().getVector().distance(Vector3D.PLUS_I) &lt; 1.0e-10;
<a class="jxr_linenumber" name="L144" href="#L144">144</a>             yVFound = yVFound || v.getLocation().getVector().distance(Vector3D.PLUS_J) &lt; 1.0e-10;
<a class="jxr_linenumber" name="L145" href="#L145">145</a>             zVFound = zVFound || v.getLocation().getVector().distance(Vector3D.PLUS_K) &lt; 1.0e-10;
<a class="jxr_linenumber" name="L146" href="#L146">146</a>         }
<a class="jxr_linenumber" name="L147" href="#L147">147</a>         Assert.assertTrue(xPFound);
<a class="jxr_linenumber" name="L148" href="#L148">148</a>         Assert.assertTrue(yPFound);
<a class="jxr_linenumber" name="L149" href="#L149">149</a>         Assert.assertTrue(zPFound);
<a class="jxr_linenumber" name="L150" href="#L150">150</a>         Assert.assertTrue(xVFound);
<a class="jxr_linenumber" name="L151" href="#L151">151</a>         Assert.assertTrue(yVFound);
<a class="jxr_linenumber" name="L152" href="#L152">152</a>         Assert.assertTrue(zVFound);
<a class="jxr_linenumber" name="L153" href="#L153">153</a>         Assert.assertEquals(3, count);
<a class="jxr_linenumber" name="L154" href="#L154">154</a> 
<a class="jxr_linenumber" name="L155" href="#L155">155</a>         Assert.assertEquals(0.0,
<a class="jxr_linenumber" name="L156" href="#L156">156</a>                             ((S2Point) octant.getBarycenter()).distance(<strong class="jxr_keyword">new</strong> S2Point(<strong class="jxr_keyword">new</strong> Vector3D(1, 1, 1))),
<a class="jxr_linenumber" name="L157" href="#L157">157</a>                             1.0e-10);
<a class="jxr_linenumber" name="L158" href="#L158">158</a>         Assert.assertEquals(0.5 * FastMath.PI, octant.getSize(), 1.0e-10);
<a class="jxr_linenumber" name="L159" href="#L159">159</a> 
<a class="jxr_linenumber" name="L160" href="#L160">160</a>         EnclosingBall&lt;Sphere2D, S2Point&gt; cap = octant.getEnclosingCap();
<a class="jxr_linenumber" name="L161" href="#L161">161</a>         Assert.assertEquals(0.0, octant.getBarycenter().distance(cap.getCenter()), 1.0e-10);
<a class="jxr_linenumber" name="L162" href="#L162">162</a>         Assert.assertEquals(FastMath.acos(1.0 / FastMath.sqrt(3)), cap.getRadius(), 1.0e-10);
<a class="jxr_linenumber" name="L163" href="#L163">163</a> 
<a class="jxr_linenumber" name="L164" href="#L164">164</a>         EnclosingBall&lt;Sphere2D, S2Point&gt; reversedCap =
<a class="jxr_linenumber" name="L165" href="#L165">165</a>                 ((SphericalPolygonsSet) factory.getComplement(octant)).getEnclosingCap();
<a class="jxr_linenumber" name="L166" href="#L166">166</a>         Assert.assertEquals(0, reversedCap.getCenter().distance(<strong class="jxr_keyword">new</strong> S2Point(<strong class="jxr_keyword">new</strong> Vector3D(-1, -1, -1))), 1.0e-10);
<a class="jxr_linenumber" name="L167" href="#L167">167</a>         Assert.assertEquals(FastMath.PI - FastMath.asin(1.0 / FastMath.sqrt(3)), reversedCap.getRadius(), 1.0e-10);
<a class="jxr_linenumber" name="L168" href="#L168">168</a> 
<a class="jxr_linenumber" name="L169" href="#L169">169</a>     }
<a class="jxr_linenumber" name="L170" href="#L170">170</a> 
<a class="jxr_linenumber" name="L171" href="#L171">171</a>     @Test
<a class="jxr_linenumber" name="L172" href="#L172">172</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testPositiveOctantByVertices() {
<a class="jxr_linenumber" name="L173" href="#L173">173</a>         <strong class="jxr_keyword">double</strong> tol = 0.01;
<a class="jxr_linenumber" name="L174" href="#L174">174</a>         <strong class="jxr_keyword">double</strong> sinTol = FastMath.sin(tol);
<a class="jxr_linenumber" name="L175" href="#L175">175</a>         SphericalPolygonsSet octant = <strong class="jxr_keyword">new</strong> SphericalPolygonsSet(tol, S2Point.PLUS_I, S2Point.PLUS_J, S2Point.PLUS_K);
<a class="jxr_linenumber" name="L176" href="#L176">176</a>         UnitSphereRandomVectorGenerator random =
<a class="jxr_linenumber" name="L177" href="#L177">177</a>                 <strong class="jxr_keyword">new</strong> UnitSphereRandomVectorGenerator(3, <strong class="jxr_keyword">new</strong> Well1024a(0xb8fc5acc91044308l));
<a class="jxr_linenumber" name="L178" href="#L178">178</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; 1000; ++i) {
<a class="jxr_linenumber" name="L179" href="#L179">179</a>             Vector3D v = <strong class="jxr_keyword">new</strong> Vector3D(random.nextVector());
<a class="jxr_linenumber" name="L180" href="#L180">180</a>             <strong class="jxr_keyword">if</strong> ((v.getX() &gt; sinTol) &amp;&amp; (v.getY() &gt; sinTol) &amp;&amp; (v.getZ() &gt; sinTol)) {
<a class="jxr_linenumber" name="L181" href="#L181">181</a>                 Assert.assertEquals(Location.INSIDE, octant.checkPoint(<strong class="jxr_keyword">new</strong> S2Point(v)));
<a class="jxr_linenumber" name="L182" href="#L182">182</a>             } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> ((v.getX() &lt; -sinTol) || (v.getY() &lt; -sinTol) || (v.getZ() &lt; -sinTol)) {
<a class="jxr_linenumber" name="L183" href="#L183">183</a>                 Assert.assertEquals(Location.OUTSIDE, octant.checkPoint(<strong class="jxr_keyword">new</strong> S2Point(v)));
<a class="jxr_linenumber" name="L184" href="#L184">184</a>             } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L185" href="#L185">185</a>                 Assert.assertEquals(Location.BOUNDARY, octant.checkPoint(<strong class="jxr_keyword">new</strong> S2Point(v)));
<a class="jxr_linenumber" name="L186" href="#L186">186</a>             }
<a class="jxr_linenumber" name="L187" href="#L187">187</a>         }
<a class="jxr_linenumber" name="L188" href="#L188">188</a>     }
<a class="jxr_linenumber" name="L189" href="#L189">189</a> 
<a class="jxr_linenumber" name="L190" href="#L190">190</a>     @Test
<a class="jxr_linenumber" name="L191" href="#L191">191</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testNonConvex() {
<a class="jxr_linenumber" name="L192" href="#L192">192</a>         <strong class="jxr_keyword">double</strong> tol = 0.01;
<a class="jxr_linenumber" name="L193" href="#L193">193</a>         <strong class="jxr_keyword">double</strong> sinTol = FastMath.sin(tol);
<a class="jxr_linenumber" name="L194" href="#L194">194</a>         RegionFactory&lt;Sphere2D&gt; factory = <strong class="jxr_keyword">new</strong> RegionFactory&lt;Sphere2D&gt;();
<a class="jxr_linenumber" name="L195" href="#L195">195</a>         SphericalPolygonsSet plusX = <strong class="jxr_keyword">new</strong> SphericalPolygonsSet(Vector3D.PLUS_I, tol);
<a class="jxr_linenumber" name="L196" href="#L196">196</a>         SphericalPolygonsSet plusY = <strong class="jxr_keyword">new</strong> SphericalPolygonsSet(Vector3D.PLUS_J, tol);
<a class="jxr_linenumber" name="L197" href="#L197">197</a>         SphericalPolygonsSet plusZ = <strong class="jxr_keyword">new</strong> SphericalPolygonsSet(Vector3D.PLUS_K, tol);
<a class="jxr_linenumber" name="L198" href="#L198">198</a>         SphericalPolygonsSet threeOctants =
<a class="jxr_linenumber" name="L199" href="#L199">199</a>                 (SphericalPolygonsSet) factory.difference(plusZ, factory.intersection(plusX, plusY));
<a class="jxr_linenumber" name="L200" href="#L200">200</a> 
<a class="jxr_linenumber" name="L201" href="#L201">201</a>         UnitSphereRandomVectorGenerator random =
<a class="jxr_linenumber" name="L202" href="#L202">202</a>                 <strong class="jxr_keyword">new</strong> UnitSphereRandomVectorGenerator(3, <strong class="jxr_keyword">new</strong> Well1024a(0x9c9802fde3cbcf25l));
<a class="jxr_linenumber" name="L203" href="#L203">203</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; 1000; ++i) {
<a class="jxr_linenumber" name="L204" href="#L204">204</a>             Vector3D v = <strong class="jxr_keyword">new</strong> Vector3D(random.nextVector());
<a class="jxr_linenumber" name="L205" href="#L205">205</a>             <strong class="jxr_keyword">if</strong> (((v.getX() &lt; -sinTol) || (v.getY() &lt; -sinTol)) &amp;&amp; (v.getZ() &gt; sinTol)) {
<a class="jxr_linenumber" name="L206" href="#L206">206</a>                 Assert.assertEquals(Location.INSIDE, threeOctants.checkPoint(<strong class="jxr_keyword">new</strong> S2Point(v)));
<a class="jxr_linenumber" name="L207" href="#L207">207</a>             } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (((v.getX() &gt; sinTol) &amp;&amp; (v.getY() &gt; sinTol)) || (v.getZ() &lt; -sinTol)) {
<a class="jxr_linenumber" name="L208" href="#L208">208</a>                 Assert.assertEquals(Location.OUTSIDE, threeOctants.checkPoint(<strong class="jxr_keyword">new</strong> S2Point(v)));
<a class="jxr_linenumber" name="L209" href="#L209">209</a>             } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L210" href="#L210">210</a>                 Assert.assertEquals(Location.BOUNDARY, threeOctants.checkPoint(<strong class="jxr_keyword">new</strong> S2Point(v)));
<a class="jxr_linenumber" name="L211" href="#L211">211</a>             }
<a class="jxr_linenumber" name="L212" href="#L212">212</a>         }
<a class="jxr_linenumber" name="L213" href="#L213">213</a> 
<a class="jxr_linenumber" name="L214" href="#L214">214</a>         List&lt;Vertex&gt; loops = threeOctants.getBoundaryLoops();
<a class="jxr_linenumber" name="L215" href="#L215">215</a>         Assert.assertEquals(1, loops.size());
<a class="jxr_linenumber" name="L216" href="#L216">216</a>         <strong class="jxr_keyword">boolean</strong> xPFound = false;
<a class="jxr_linenumber" name="L217" href="#L217">217</a>         <strong class="jxr_keyword">boolean</strong> yPFound = false;
<a class="jxr_linenumber" name="L218" href="#L218">218</a>         <strong class="jxr_keyword">boolean</strong> zPFound = false;
<a class="jxr_linenumber" name="L219" href="#L219">219</a>         <strong class="jxr_keyword">boolean</strong> xVFound = false;
<a class="jxr_linenumber" name="L220" href="#L220">220</a>         <strong class="jxr_keyword">boolean</strong> yVFound = false;
<a class="jxr_linenumber" name="L221" href="#L221">221</a>         <strong class="jxr_keyword">boolean</strong> zVFound = false;
<a class="jxr_linenumber" name="L222" href="#L222">222</a>         Vertex first = loops.get(0);
<a class="jxr_linenumber" name="L223" href="#L223">223</a>         <strong class="jxr_keyword">int</strong> count = 0;
<a class="jxr_linenumber" name="L224" href="#L224">224</a>         <strong class="jxr_keyword">double</strong> sumPoleX = 0;
<a class="jxr_linenumber" name="L225" href="#L225">225</a>         <strong class="jxr_keyword">double</strong> sumPoleY = 0;
<a class="jxr_linenumber" name="L226" href="#L226">226</a>         <strong class="jxr_keyword">double</strong> sumPoleZ = 0;
<a class="jxr_linenumber" name="L227" href="#L227">227</a>         <strong class="jxr_keyword">for</strong> (Vertex v = first; count == 0 || v != first; v = v.getOutgoing().getEnd()) {
<a class="jxr_linenumber" name="L228" href="#L228">228</a>             ++count;
<a class="jxr_linenumber" name="L229" href="#L229">229</a>             Edge e = v.getIncoming();
<a class="jxr_linenumber" name="L230" href="#L230">230</a>             Assert.assertTrue(v == e.getStart().getOutgoing().getEnd());
<a class="jxr_linenumber" name="L231" href="#L231">231</a>             <strong class="jxr_keyword">if</strong> (e.getCircle().getPole().distance(Vector3D.MINUS_I) &lt; 1.0e-10) {
<a class="jxr_linenumber" name="L232" href="#L232">232</a>                 xPFound = <strong class="jxr_keyword">true</strong>;
<a class="jxr_linenumber" name="L233" href="#L233">233</a>                 sumPoleX += e.getLength();
<a class="jxr_linenumber" name="L234" href="#L234">234</a>             } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> (e.getCircle().getPole().distance(Vector3D.MINUS_J) &lt; 1.0e-10) {
<a class="jxr_linenumber" name="L235" href="#L235">235</a>                 yPFound = <strong class="jxr_keyword">true</strong>;
<a class="jxr_linenumber" name="L236" href="#L236">236</a>                 sumPoleY += e.getLength();
<a class="jxr_linenumber" name="L237" href="#L237">237</a>             } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L238" href="#L238">238</a>                 Assert.assertEquals(0.0, e.getCircle().getPole().distance(Vector3D.PLUS_K), 1.0e-10);
<a class="jxr_linenumber" name="L239" href="#L239">239</a>                 zPFound = <strong class="jxr_keyword">true</strong>;
<a class="jxr_linenumber" name="L240" href="#L240">240</a>                 sumPoleZ += e.getLength();
<a class="jxr_linenumber" name="L241" href="#L241">241</a>             }
<a class="jxr_linenumber" name="L242" href="#L242">242</a>             xVFound = xVFound || v.getLocation().getVector().distance(Vector3D.PLUS_I) &lt; 1.0e-10;
<a class="jxr_linenumber" name="L243" href="#L243">243</a>             yVFound = yVFound || v.getLocation().getVector().distance(Vector3D.PLUS_J) &lt; 1.0e-10;
<a class="jxr_linenumber" name="L244" href="#L244">244</a>             zVFound = zVFound || v.getLocation().getVector().distance(Vector3D.PLUS_K) &lt; 1.0e-10;
<a class="jxr_linenumber" name="L245" href="#L245">245</a>         }
<a class="jxr_linenumber" name="L246" href="#L246">246</a>         Assert.assertTrue(xPFound);
<a class="jxr_linenumber" name="L247" href="#L247">247</a>         Assert.assertTrue(yPFound);
<a class="jxr_linenumber" name="L248" href="#L248">248</a>         Assert.assertTrue(zPFound);
<a class="jxr_linenumber" name="L249" href="#L249">249</a>         Assert.assertTrue(xVFound);
<a class="jxr_linenumber" name="L250" href="#L250">250</a>         Assert.assertTrue(yVFound);
<a class="jxr_linenumber" name="L251" href="#L251">251</a>         Assert.assertTrue(zVFound);
<a class="jxr_linenumber" name="L252" href="#L252">252</a>         Assert.assertEquals(0.5 * FastMath.PI, sumPoleX, 1.0e-10);
<a class="jxr_linenumber" name="L253" href="#L253">253</a>         Assert.assertEquals(0.5 * FastMath.PI, sumPoleY, 1.0e-10);
<a class="jxr_linenumber" name="L254" href="#L254">254</a>         Assert.assertEquals(1.5 * FastMath.PI, sumPoleZ, 1.0e-10);
<a class="jxr_linenumber" name="L255" href="#L255">255</a> 
<a class="jxr_linenumber" name="L256" href="#L256">256</a>         Assert.assertEquals(1.5 * FastMath.PI, threeOctants.getSize(), 1.0e-10);
<a class="jxr_linenumber" name="L257" href="#L257">257</a> 
<a class="jxr_linenumber" name="L258" href="#L258">258</a>     }
<a class="jxr_linenumber" name="L259" href="#L259">259</a> 
<a class="jxr_linenumber" name="L260" href="#L260">260</a>     @Test
<a class="jxr_linenumber" name="L261" href="#L261">261</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testModeratlyComplexShape() {
<a class="jxr_linenumber" name="L262" href="#L262">262</a>         <strong class="jxr_keyword">double</strong> tol = 0.01;
<a class="jxr_linenumber" name="L263" href="#L263">263</a>         List&lt;SubHyperplane&lt;Sphere2D&gt;&gt; boundary = <strong class="jxr_keyword">new</strong> ArrayList&lt;SubHyperplane&lt;Sphere2D&gt;&gt;();
<a class="jxr_linenumber" name="L264" href="#L264">264</a>         boundary.add(create(Vector3D.MINUS_J, Vector3D.PLUS_I,  Vector3D.PLUS_K,  tol, 0.0, 0.5 * FastMath.PI));
<a class="jxr_linenumber" name="L265" href="#L265">265</a>         boundary.add(create(Vector3D.MINUS_I, Vector3D.PLUS_K,  Vector3D.PLUS_J,  tol, 0.0, 0.5 * FastMath.PI));
<a class="jxr_linenumber" name="L266" href="#L266">266</a>         boundary.add(create(Vector3D.PLUS_K,  Vector3D.PLUS_J,  Vector3D.MINUS_I, tol, 0.0, 0.5 * FastMath.PI));
<a class="jxr_linenumber" name="L267" href="#L267">267</a>         boundary.add(create(Vector3D.MINUS_J, Vector3D.MINUS_I, Vector3D.MINUS_K, tol, 0.0, 0.5 * FastMath.PI));
<a class="jxr_linenumber" name="L268" href="#L268">268</a>         boundary.add(create(Vector3D.MINUS_I, Vector3D.MINUS_K, Vector3D.MINUS_J, tol, 0.0, 0.5 * FastMath.PI));
<a class="jxr_linenumber" name="L269" href="#L269">269</a>         boundary.add(create(Vector3D.PLUS_K,  Vector3D.MINUS_J, Vector3D.PLUS_I,  tol, 0.0, 0.5 * FastMath.PI));
<a class="jxr_linenumber" name="L270" href="#L270">270</a>         SphericalPolygonsSet polygon = <strong class="jxr_keyword">new</strong> SphericalPolygonsSet(boundary, tol);
<a class="jxr_linenumber" name="L271" href="#L271">271</a> 
<a class="jxr_linenumber" name="L272" href="#L272">272</a>         Assert.assertEquals(Location.OUTSIDE, polygon.checkPoint(<strong class="jxr_keyword">new</strong> S2Point(<strong class="jxr_keyword">new</strong> Vector3D( 1,  1,  1).normalize())));
<a class="jxr_linenumber" name="L273" href="#L273">273</a>         Assert.assertEquals(Location.INSIDE,  polygon.checkPoint(<strong class="jxr_keyword">new</strong> S2Point(<strong class="jxr_keyword">new</strong> Vector3D(-1,  1,  1).normalize())));
<a class="jxr_linenumber" name="L274" href="#L274">274</a>         Assert.assertEquals(Location.INSIDE,  polygon.checkPoint(<strong class="jxr_keyword">new</strong> S2Point(<strong class="jxr_keyword">new</strong> Vector3D(-1, -1,  1).normalize())));
<a class="jxr_linenumber" name="L275" href="#L275">275</a>         Assert.assertEquals(Location.INSIDE,  polygon.checkPoint(<strong class="jxr_keyword">new</strong> S2Point(<strong class="jxr_keyword">new</strong> Vector3D( 1, -1,  1).normalize())));
<a class="jxr_linenumber" name="L276" href="#L276">276</a>         Assert.assertEquals(Location.OUTSIDE, polygon.checkPoint(<strong class="jxr_keyword">new</strong> S2Point(<strong class="jxr_keyword">new</strong> Vector3D( 1,  1, -1).normalize())));
<a class="jxr_linenumber" name="L277" href="#L277">277</a>         Assert.assertEquals(Location.OUTSIDE, polygon.checkPoint(<strong class="jxr_keyword">new</strong> S2Point(<strong class="jxr_keyword">new</strong> Vector3D(-1,  1, -1).normalize())));
<a class="jxr_linenumber" name="L278" href="#L278">278</a>         Assert.assertEquals(Location.INSIDE,  polygon.checkPoint(<strong class="jxr_keyword">new</strong> S2Point(<strong class="jxr_keyword">new</strong> Vector3D(-1, -1, -1).normalize())));
<a class="jxr_linenumber" name="L279" href="#L279">279</a>         Assert.assertEquals(Location.OUTSIDE, polygon.checkPoint(<strong class="jxr_keyword">new</strong> S2Point(<strong class="jxr_keyword">new</strong> Vector3D( 1, -1, -1).normalize())));
<a class="jxr_linenumber" name="L280" href="#L280">280</a> 
<a class="jxr_linenumber" name="L281" href="#L281">281</a>         Assert.assertEquals(MathUtils.TWO_PI, polygon.getSize(), 1.0e-10);
<a class="jxr_linenumber" name="L282" href="#L282">282</a>         Assert.assertEquals(3 * FastMath.PI, polygon.getBoundarySize(), 1.0e-10);
<a class="jxr_linenumber" name="L283" href="#L283">283</a> 
<a class="jxr_linenumber" name="L284" href="#L284">284</a>         List&lt;Vertex&gt; loops = polygon.getBoundaryLoops();
<a class="jxr_linenumber" name="L285" href="#L285">285</a>         Assert.assertEquals(1, loops.size());
<a class="jxr_linenumber" name="L286" href="#L286">286</a>         <strong class="jxr_keyword">boolean</strong> pXFound = false;
<a class="jxr_linenumber" name="L287" href="#L287">287</a>         <strong class="jxr_keyword">boolean</strong> mXFound = false;
<a class="jxr_linenumber" name="L288" href="#L288">288</a>         <strong class="jxr_keyword">boolean</strong> pYFound = false;
<a class="jxr_linenumber" name="L289" href="#L289">289</a>         <strong class="jxr_keyword">boolean</strong> mYFound = false;
<a class="jxr_linenumber" name="L290" href="#L290">290</a>         <strong class="jxr_keyword">boolean</strong> pZFound = false;
<a class="jxr_linenumber" name="L291" href="#L291">291</a>         <strong class="jxr_keyword">boolean</strong> mZFound = false;
<a class="jxr_linenumber" name="L292" href="#L292">292</a>         Vertex first = loops.get(0);
<a class="jxr_linenumber" name="L293" href="#L293">293</a>         <strong class="jxr_keyword">int</strong> count = 0;
<a class="jxr_linenumber" name="L294" href="#L294">294</a>         <strong class="jxr_keyword">for</strong> (Vertex v = first; count == 0 || v != first; v = v.getOutgoing().getEnd()) {
<a class="jxr_linenumber" name="L295" href="#L295">295</a>             ++count;
<a class="jxr_linenumber" name="L296" href="#L296">296</a>             Edge e = v.getIncoming();
<a class="jxr_linenumber" name="L297" href="#L297">297</a>             Assert.assertTrue(v == e.getStart().getOutgoing().getEnd());
<a class="jxr_linenumber" name="L298" href="#L298">298</a>             pXFound = pXFound || v.getLocation().getVector().distance(Vector3D.PLUS_I)  &lt; 1.0e-10;
<a class="jxr_linenumber" name="L299" href="#L299">299</a>             mXFound = mXFound || v.getLocation().getVector().distance(Vector3D.MINUS_I) &lt; 1.0e-10;
<a class="jxr_linenumber" name="L300" href="#L300">300</a>             pYFound = pYFound || v.getLocation().getVector().distance(Vector3D.PLUS_J)  &lt; 1.0e-10;
<a class="jxr_linenumber" name="L301" href="#L301">301</a>             mYFound = mYFound || v.getLocation().getVector().distance(Vector3D.MINUS_J) &lt; 1.0e-10;
<a class="jxr_linenumber" name="L302" href="#L302">302</a>             pZFound = pZFound || v.getLocation().getVector().distance(Vector3D.PLUS_K)  &lt; 1.0e-10;
<a class="jxr_linenumber" name="L303" href="#L303">303</a>             mZFound = mZFound || v.getLocation().getVector().distance(Vector3D.MINUS_K) &lt; 1.0e-10;
<a class="jxr_linenumber" name="L304" href="#L304">304</a>             Assert.assertEquals(0.5 * FastMath.PI, e.getLength(), 1.0e-10);
<a class="jxr_linenumber" name="L305" href="#L305">305</a>         }
<a class="jxr_linenumber" name="L306" href="#L306">306</a>         Assert.assertTrue(pXFound);
<a class="jxr_linenumber" name="L307" href="#L307">307</a>         Assert.assertTrue(mXFound);
<a class="jxr_linenumber" name="L308" href="#L308">308</a>         Assert.assertTrue(pYFound);
<a class="jxr_linenumber" name="L309" href="#L309">309</a>         Assert.assertTrue(mYFound);
<a class="jxr_linenumber" name="L310" href="#L310">310</a>         Assert.assertTrue(pZFound);
<a class="jxr_linenumber" name="L311" href="#L311">311</a>         Assert.assertTrue(mZFound);
<a class="jxr_linenumber" name="L312" href="#L312">312</a>         Assert.assertEquals(6, count);
<a class="jxr_linenumber" name="L313" href="#L313">313</a> 
<a class="jxr_linenumber" name="L314" href="#L314">314</a>     }
<a class="jxr_linenumber" name="L315" href="#L315">315</a> 
<a class="jxr_linenumber" name="L316" href="#L316">316</a>     @Test
<a class="jxr_linenumber" name="L317" href="#L317">317</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testSeveralParts() {
<a class="jxr_linenumber" name="L318" href="#L318">318</a>         <strong class="jxr_keyword">double</strong> tol = 0.01;
<a class="jxr_linenumber" name="L319" href="#L319">319</a>         <strong class="jxr_keyword">double</strong> sinTol = FastMath.sin(tol);
<a class="jxr_linenumber" name="L320" href="#L320">320</a>         List&lt;SubHyperplane&lt;Sphere2D&gt;&gt; boundary = <strong class="jxr_keyword">new</strong> ArrayList&lt;SubHyperplane&lt;Sphere2D&gt;&gt;();
<a class="jxr_linenumber" name="L321" href="#L321">321</a> 
<a class="jxr_linenumber" name="L322" href="#L322">322</a>         <em class="jxr_comment">// first part: +X, +Y, +Z octant</em>
<a class="jxr_linenumber" name="L323" href="#L323">323</a>         boundary.add(create(Vector3D.PLUS_J,  Vector3D.PLUS_K,  Vector3D.PLUS_I,  tol, 0.0, 0.5 * FastMath.PI));
<a class="jxr_linenumber" name="L324" href="#L324">324</a>         boundary.add(create(Vector3D.PLUS_K,  Vector3D.PLUS_I,  Vector3D.PLUS_J,  tol, 0.0, 0.5 * FastMath.PI));
<a class="jxr_linenumber" name="L325" href="#L325">325</a>         boundary.add(create(Vector3D.PLUS_I,  Vector3D.PLUS_J,  Vector3D.PLUS_K,  tol, 0.0, 0.5 * FastMath.PI));
<a class="jxr_linenumber" name="L326" href="#L326">326</a> 
<a class="jxr_linenumber" name="L327" href="#L327">327</a>         <em class="jxr_comment">// first part: -X, -Y, -Z octant</em>
<a class="jxr_linenumber" name="L328" href="#L328">328</a>         boundary.add(create(Vector3D.MINUS_J, Vector3D.MINUS_I, Vector3D.MINUS_K, tol, 0.0, 0.5 * FastMath.PI));
<a class="jxr_linenumber" name="L329" href="#L329">329</a>         boundary.add(create(Vector3D.MINUS_I, Vector3D.MINUS_K, Vector3D.MINUS_J, tol, 0.0, 0.5 * FastMath.PI));
<a class="jxr_linenumber" name="L330" href="#L330">330</a>         boundary.add(create(Vector3D.MINUS_K, Vector3D.MINUS_J, Vector3D.MINUS_I,  tol, 0.0, 0.5 * FastMath.PI));
<a class="jxr_linenumber" name="L331" href="#L331">331</a> 
<a class="jxr_linenumber" name="L332" href="#L332">332</a>         SphericalPolygonsSet polygon = <strong class="jxr_keyword">new</strong> SphericalPolygonsSet(boundary, tol);
<a class="jxr_linenumber" name="L333" href="#L333">333</a> 
<a class="jxr_linenumber" name="L334" href="#L334">334</a>         UnitSphereRandomVectorGenerator random =
<a class="jxr_linenumber" name="L335" href="#L335">335</a>                 <strong class="jxr_keyword">new</strong> UnitSphereRandomVectorGenerator(3, <strong class="jxr_keyword">new</strong> Well1024a(0xcc5ce49949e0d3ecl));
<a class="jxr_linenumber" name="L336" href="#L336">336</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; 1000; ++i) {
<a class="jxr_linenumber" name="L337" href="#L337">337</a>             Vector3D v = <strong class="jxr_keyword">new</strong> Vector3D(random.nextVector());
<a class="jxr_linenumber" name="L338" href="#L338">338</a>             <strong class="jxr_keyword">if</strong> ((v.getX() &lt; -sinTol) &amp;&amp; (v.getY() &lt; -sinTol) &amp;&amp; (v.getZ() &lt; -sinTol)) {
<a class="jxr_linenumber" name="L339" href="#L339">339</a>                 Assert.assertEquals(Location.INSIDE, polygon.checkPoint(<strong class="jxr_keyword">new</strong> S2Point(v)));
<a class="jxr_linenumber" name="L340" href="#L340">340</a>             } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> ((v.getX() &lt; sinTol) &amp;&amp; (v.getY() &lt; sinTol) &amp;&amp; (v.getZ() &lt; sinTol)) {
<a class="jxr_linenumber" name="L341" href="#L341">341</a>                 Assert.assertEquals(Location.BOUNDARY, polygon.checkPoint(<strong class="jxr_keyword">new</strong> S2Point(v)));
<a class="jxr_linenumber" name="L342" href="#L342">342</a>             } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> ((v.getX() &gt; sinTol) &amp;&amp; (v.getY() &gt; sinTol) &amp;&amp; (v.getZ() &gt; sinTol)) {
<a class="jxr_linenumber" name="L343" href="#L343">343</a>                 Assert.assertEquals(Location.INSIDE, polygon.checkPoint(<strong class="jxr_keyword">new</strong> S2Point(v)));
<a class="jxr_linenumber" name="L344" href="#L344">344</a>             } <strong class="jxr_keyword">else</strong> <strong class="jxr_keyword">if</strong> ((v.getX() &gt; -sinTol) &amp;&amp; (v.getY() &gt; -sinTol) &amp;&amp; (v.getZ() &gt; -sinTol)) {
<a class="jxr_linenumber" name="L345" href="#L345">345</a>                 Assert.assertEquals(Location.BOUNDARY, polygon.checkPoint(<strong class="jxr_keyword">new</strong> S2Point(v)));
<a class="jxr_linenumber" name="L346" href="#L346">346</a>             } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L347" href="#L347">347</a>                 Assert.assertEquals(Location.OUTSIDE, polygon.checkPoint(<strong class="jxr_keyword">new</strong> S2Point(v)));
<a class="jxr_linenumber" name="L348" href="#L348">348</a>             }
<a class="jxr_linenumber" name="L349" href="#L349">349</a>         }
<a class="jxr_linenumber" name="L350" href="#L350">350</a> 
<a class="jxr_linenumber" name="L351" href="#L351">351</a>         Assert.assertEquals(FastMath.PI, polygon.getSize(), 1.0e-10);
<a class="jxr_linenumber" name="L352" href="#L352">352</a>         Assert.assertEquals(3 * FastMath.PI, polygon.getBoundarySize(), 1.0e-10);
<a class="jxr_linenumber" name="L353" href="#L353">353</a> 
<a class="jxr_linenumber" name="L354" href="#L354">354</a>         <em class="jxr_comment">// there should be two separate boundary loops</em>
<a class="jxr_linenumber" name="L355" href="#L355">355</a>         Assert.assertEquals(2, polygon.getBoundaryLoops().size());
<a class="jxr_linenumber" name="L356" href="#L356">356</a> 
<a class="jxr_linenumber" name="L357" href="#L357">357</a>     }
<a class="jxr_linenumber" name="L358" href="#L358">358</a> 
<a class="jxr_linenumber" name="L359" href="#L359">359</a>     @Test
<a class="jxr_linenumber" name="L360" href="#L360">360</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testPartWithHole() {
<a class="jxr_linenumber" name="L361" href="#L361">361</a>         <strong class="jxr_keyword">double</strong> tol = 0.01;
<a class="jxr_linenumber" name="L362" href="#L362">362</a>         <strong class="jxr_keyword">double</strong> alpha = 0.7;
<a class="jxr_linenumber" name="L363" href="#L363">363</a>         S2Point center = <strong class="jxr_keyword">new</strong> S2Point(<strong class="jxr_keyword">new</strong> Vector3D(1, 1, 1));
<a class="jxr_linenumber" name="L364" href="#L364">364</a>         SphericalPolygonsSet hexa = <strong class="jxr_keyword">new</strong> SphericalPolygonsSet(center.getVector(), Vector3D.PLUS_K, alpha, 6, tol);
<a class="jxr_linenumber" name="L365" href="#L365">365</a>         SphericalPolygonsSet hole  = <strong class="jxr_keyword">new</strong> SphericalPolygonsSet(tol,
<a class="jxr_linenumber" name="L366" href="#L366">366</a>                                                               <strong class="jxr_keyword">new</strong> S2Point(FastMath.PI / 6, FastMath.PI / 3),
<a class="jxr_linenumber" name="L367" href="#L367">367</a>                                                               <strong class="jxr_keyword">new</strong> S2Point(FastMath.PI / 3, FastMath.PI / 3),
<a class="jxr_linenumber" name="L368" href="#L368">368</a>                                                               <strong class="jxr_keyword">new</strong> S2Point(FastMath.PI / 4, FastMath.PI / 6));
<a class="jxr_linenumber" name="L369" href="#L369">369</a>         SphericalPolygonsSet hexaWithHole =
<a class="jxr_linenumber" name="L370" href="#L370">370</a>                 (SphericalPolygonsSet) <strong class="jxr_keyword">new</strong> RegionFactory&lt;Sphere2D&gt;().difference(hexa, hole);
<a class="jxr_linenumber" name="L371" href="#L371">371</a> 
<a class="jxr_linenumber" name="L372" href="#L372">372</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">double</strong> phi = center.getPhi() - alpha + 0.1; phi &lt; center.getPhi() + alpha - 0.1; phi += 0.07) {
<a class="jxr_linenumber" name="L373" href="#L373">373</a>             Location l = hexaWithHole.checkPoint(<strong class="jxr_keyword">new</strong> S2Point(FastMath.PI / 4, phi));
<a class="jxr_linenumber" name="L374" href="#L374">374</a>             <strong class="jxr_keyword">if</strong> (phi &lt; FastMath.PI / 6 || phi &gt; FastMath.PI / 3) {
<a class="jxr_linenumber" name="L375" href="#L375">375</a>                 Assert.assertEquals(Location.INSIDE,  l);
<a class="jxr_linenumber" name="L376" href="#L376">376</a>             } <strong class="jxr_keyword">else</strong> {
<a class="jxr_linenumber" name="L377" href="#L377">377</a>                 Assert.assertEquals(Location.OUTSIDE, l);
<a class="jxr_linenumber" name="L378" href="#L378">378</a>             }
<a class="jxr_linenumber" name="L379" href="#L379">379</a>         }
<a class="jxr_linenumber" name="L380" href="#L380">380</a> 
<a class="jxr_linenumber" name="L381" href="#L381">381</a>         <em class="jxr_comment">// there should be two separate boundary loops</em>
<a class="jxr_linenumber" name="L382" href="#L382">382</a>         Assert.assertEquals(2, hexaWithHole.getBoundaryLoops().size());
<a class="jxr_linenumber" name="L383" href="#L383">383</a> 
<a class="jxr_linenumber" name="L384" href="#L384">384</a>         Assert.assertEquals(hexa.getBoundarySize() + hole.getBoundarySize(), hexaWithHole.getBoundarySize(), 1.0e-10);
<a class="jxr_linenumber" name="L385" href="#L385">385</a>         Assert.assertEquals(hexa.getSize() - hole.getSize(), hexaWithHole.getSize(), 1.0e-10);
<a class="jxr_linenumber" name="L386" href="#L386">386</a> 
<a class="jxr_linenumber" name="L387" href="#L387">387</a>     }
<a class="jxr_linenumber" name="L388" href="#L388">388</a> 
<a class="jxr_linenumber" name="L389" href="#L389">389</a>     @Test
<a class="jxr_linenumber" name="L390" href="#L390">390</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testConcentricSubParts() {
<a class="jxr_linenumber" name="L391" href="#L391">391</a>         <strong class="jxr_keyword">double</strong> tol = 0.001;
<a class="jxr_linenumber" name="L392" href="#L392">392</a>         Vector3D center = <strong class="jxr_keyword">new</strong> Vector3D(1, 1, 1);
<a class="jxr_linenumber" name="L393" href="#L393">393</a>         SphericalPolygonsSet hexaOut   = <strong class="jxr_keyword">new</strong> SphericalPolygonsSet(center, Vector3D.PLUS_K, 0.9,  6, tol);
<a class="jxr_linenumber" name="L394" href="#L394">394</a>         SphericalPolygonsSet hexaIn    = <strong class="jxr_keyword">new</strong> SphericalPolygonsSet(center, Vector3D.PLUS_K, 0.8,  6, tol);
<a class="jxr_linenumber" name="L395" href="#L395">395</a>         SphericalPolygonsSet pentaOut  = <strong class="jxr_keyword">new</strong> SphericalPolygonsSet(center, Vector3D.PLUS_K, 0.7,  5, tol);
<a class="jxr_linenumber" name="L396" href="#L396">396</a>         SphericalPolygonsSet pentaIn   = <strong class="jxr_keyword">new</strong> SphericalPolygonsSet(center, Vector3D.PLUS_K, 0.6,  5, tol);
<a class="jxr_linenumber" name="L397" href="#L397">397</a>         SphericalPolygonsSet quadriOut = <strong class="jxr_keyword">new</strong> SphericalPolygonsSet(center, Vector3D.PLUS_K, 0.5,  4, tol);
<a class="jxr_linenumber" name="L398" href="#L398">398</a>         SphericalPolygonsSet quadriIn  = <strong class="jxr_keyword">new</strong> SphericalPolygonsSet(center, Vector3D.PLUS_K, 0.4,  4, tol);
<a class="jxr_linenumber" name="L399" href="#L399">399</a>         SphericalPolygonsSet triOut    = <strong class="jxr_keyword">new</strong> SphericalPolygonsSet(center, Vector3D.PLUS_K, 0.25, 3, tol);
<a class="jxr_linenumber" name="L400" href="#L400">400</a>         SphericalPolygonsSet triIn     = <strong class="jxr_keyword">new</strong> SphericalPolygonsSet(center, Vector3D.PLUS_K, 0.15, 3, tol);
<a class="jxr_linenumber" name="L401" href="#L401">401</a> 
<a class="jxr_linenumber" name="L402" href="#L402">402</a>         RegionFactory&lt;Sphere2D&gt; factory = <strong class="jxr_keyword">new</strong> RegionFactory&lt;Sphere2D&gt;();
<a class="jxr_linenumber" name="L403" href="#L403">403</a>         SphericalPolygonsSet hexa   = (SphericalPolygonsSet) factory.difference(hexaOut,   hexaIn);
<a class="jxr_linenumber" name="L404" href="#L404">404</a>         SphericalPolygonsSet penta  = (SphericalPolygonsSet) factory.difference(pentaOut,  pentaIn);
<a class="jxr_linenumber" name="L405" href="#L405">405</a>         SphericalPolygonsSet quadri = (SphericalPolygonsSet) factory.difference(quadriOut, quadriIn);
<a class="jxr_linenumber" name="L406" href="#L406">406</a>         SphericalPolygonsSet tri    = (SphericalPolygonsSet) factory.difference(triOut,    triIn);
<a class="jxr_linenumber" name="L407" href="#L407">407</a>         SphericalPolygonsSet concentric =
<a class="jxr_linenumber" name="L408" href="#L408">408</a>                 (SphericalPolygonsSet) factory.union(factory.union(hexa, penta), factory.union(quadri, tri));
<a class="jxr_linenumber" name="L409" href="#L409">409</a> 
<a class="jxr_linenumber" name="L410" href="#L410">410</a>         <em class="jxr_comment">// there should be two separate boundary loops</em>
<a class="jxr_linenumber" name="L411" href="#L411">411</a>         Assert.assertEquals(8, concentric.getBoundaryLoops().size());
<a class="jxr_linenumber" name="L412" href="#L412">412</a> 
<a class="jxr_linenumber" name="L413" href="#L413">413</a>         Assert.assertEquals(hexaOut.getBoundarySize()   + hexaIn.getBoundarySize()   +
<a class="jxr_linenumber" name="L414" href="#L414">414</a>                             pentaOut.getBoundarySize()  + pentaIn.getBoundarySize()  +
<a class="jxr_linenumber" name="L415" href="#L415">415</a>                             quadriOut.getBoundarySize() + quadriIn.getBoundarySize() +
<a class="jxr_linenumber" name="L416" href="#L416">416</a>                             triOut.getBoundarySize()    + triIn.getBoundarySize(),
<a class="jxr_linenumber" name="L417" href="#L417">417</a>                             concentric.getBoundarySize(), 1.0e-10);
<a class="jxr_linenumber" name="L418" href="#L418">418</a>         Assert.assertEquals(hexaOut.getSize()   - hexaIn.getSize()   +
<a class="jxr_linenumber" name="L419" href="#L419">419</a>                             pentaOut.getSize()  - pentaIn.getSize()  +
<a class="jxr_linenumber" name="L420" href="#L420">420</a>                             quadriOut.getSize() - quadriIn.getSize() +
<a class="jxr_linenumber" name="L421" href="#L421">421</a>                             triOut.getSize()    - triIn.getSize(),
<a class="jxr_linenumber" name="L422" href="#L422">422</a>                             concentric.getSize(), 1.0e-10);
<a class="jxr_linenumber" name="L423" href="#L423">423</a> 
<a class="jxr_linenumber" name="L424" href="#L424">424</a>         <em class="jxr_comment">// we expect lots of sign changes as we traverse all concentric rings</em>
<a class="jxr_linenumber" name="L425" href="#L425">425</a>         <strong class="jxr_keyword">double</strong> phi = <strong class="jxr_keyword">new</strong> S2Point(center).getPhi();
<a class="jxr_linenumber" name="L426" href="#L426">426</a>         Assert.assertEquals(+0.207, concentric.projectToBoundary(<strong class="jxr_keyword">new</strong> S2Point(-0.60,  phi)).getOffset(), 0.01);
<a class="jxr_linenumber" name="L427" href="#L427">427</a>         Assert.assertEquals(-0.048, concentric.projectToBoundary(<strong class="jxr_keyword">new</strong> S2Point(-0.21,  phi)).getOffset(), 0.01);
<a class="jxr_linenumber" name="L428" href="#L428">428</a>         Assert.assertEquals(+0.027, concentric.projectToBoundary(<strong class="jxr_keyword">new</strong> S2Point(-0.10,  phi)).getOffset(), 0.01);
<a class="jxr_linenumber" name="L429" href="#L429">429</a>         Assert.assertEquals(-0.041, concentric.projectToBoundary(<strong class="jxr_keyword">new</strong> S2Point( 0.01,  phi)).getOffset(), 0.01);
<a class="jxr_linenumber" name="L430" href="#L430">430</a>         Assert.assertEquals(+0.049, concentric.projectToBoundary(<strong class="jxr_keyword">new</strong> S2Point( 0.16,  phi)).getOffset(), 0.01);
<a class="jxr_linenumber" name="L431" href="#L431">431</a>         Assert.assertEquals(-0.038, concentric.projectToBoundary(<strong class="jxr_keyword">new</strong> S2Point( 0.29,  phi)).getOffset(), 0.01);
<a class="jxr_linenumber" name="L432" href="#L432">432</a>         Assert.assertEquals(+0.097, concentric.projectToBoundary(<strong class="jxr_keyword">new</strong> S2Point( 0.48,  phi)).getOffset(), 0.01);
<a class="jxr_linenumber" name="L433" href="#L433">433</a>         Assert.assertEquals(-0.022, concentric.projectToBoundary(<strong class="jxr_keyword">new</strong> S2Point( 0.64,  phi)).getOffset(), 0.01);
<a class="jxr_linenumber" name="L434" href="#L434">434</a>         Assert.assertEquals(+0.072, concentric.projectToBoundary(<strong class="jxr_keyword">new</strong> S2Point( 0.79,  phi)).getOffset(), 0.01);
<a class="jxr_linenumber" name="L435" href="#L435">435</a>         Assert.assertEquals(-0.022, concentric.projectToBoundary(<strong class="jxr_keyword">new</strong> S2Point( 0.93,  phi)).getOffset(), 0.01);
<a class="jxr_linenumber" name="L436" href="#L436">436</a>         Assert.assertEquals(+0.091, concentric.projectToBoundary(<strong class="jxr_keyword">new</strong> S2Point( 1.08,  phi)).getOffset(), 0.01);
<a class="jxr_linenumber" name="L437" href="#L437">437</a>         Assert.assertEquals(-0.037, concentric.projectToBoundary(<strong class="jxr_keyword">new</strong> S2Point( 1.28,  phi)).getOffset(), 0.01);
<a class="jxr_linenumber" name="L438" href="#L438">438</a>         Assert.assertEquals(+0.051, concentric.projectToBoundary(<strong class="jxr_keyword">new</strong> S2Point( 1.40,  phi)).getOffset(), 0.01);
<a class="jxr_linenumber" name="L439" href="#L439">439</a>         Assert.assertEquals(-0.041, concentric.projectToBoundary(<strong class="jxr_keyword">new</strong> S2Point( 1.55,  phi)).getOffset(), 0.01);
<a class="jxr_linenumber" name="L440" href="#L440">440</a>         Assert.assertEquals(+0.027, concentric.projectToBoundary(<strong class="jxr_keyword">new</strong> S2Point( 1.67,  phi)).getOffset(), 0.01);
<a class="jxr_linenumber" name="L441" href="#L441">441</a>         Assert.assertEquals(-0.044, concentric.projectToBoundary(<strong class="jxr_keyword">new</strong> S2Point( 1.79,  phi)).getOffset(), 0.01);
<a class="jxr_linenumber" name="L442" href="#L442">442</a>         Assert.assertEquals(+0.201, concentric.projectToBoundary(<strong class="jxr_keyword">new</strong> S2Point( 2.16,  phi)).getOffset(), 0.01);
<a class="jxr_linenumber" name="L443" href="#L443">443</a> 
<a class="jxr_linenumber" name="L444" href="#L444">444</a>     }
<a class="jxr_linenumber" name="L445" href="#L445">445</a> 
<a class="jxr_linenumber" name="L446" href="#L446">446</a>     @Test
<a class="jxr_linenumber" name="L447" href="#L447">447</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testGeographicalMap() {
<a class="jxr_linenumber" name="L448" href="#L448">448</a> 
<a class="jxr_linenumber" name="L449" href="#L449">449</a>         SphericalPolygonsSet continental = buildSimpleZone(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[][] {
<a class="jxr_linenumber" name="L450" href="#L450">450</a>           { 51.14850,  2.51357 }, { 50.94660,  1.63900 }, { 50.12717,  1.33876 }, { 49.34737, -0.98946 },
<a class="jxr_linenumber" name="L451" href="#L451">451</a>           { 49.77634, -1.93349 }, { 48.64442, -1.61651 }, { 48.90169, -3.29581 }, { 48.68416, -4.59234 },
<a class="jxr_linenumber" name="L452" href="#L452">452</a>           { 47.95495, -4.49155 }, { 47.57032, -2.96327 }, { 46.01491, -1.19379 }, { 44.02261, -1.38422 },
<a class="jxr_linenumber" name="L453" href="#L453">453</a>           { 43.42280, -1.90135 }, { 43.03401, -1.50277 }, { 42.34338,  1.82679 }, { 42.47301,  2.98599 },
<a class="jxr_linenumber" name="L454" href="#L454">454</a>           { 43.07520,  3.10041 }, { 43.39965,  4.55696 }, { 43.12889,  6.52924 }, { 43.69384,  7.43518 },
<a class="jxr_linenumber" name="L455" href="#L455">455</a>           { 44.12790,  7.54959 }, { 45.02851,  6.74995 }, { 45.33309,  7.09665 }, { 46.42967,  6.50009 },
<a class="jxr_linenumber" name="L456" href="#L456">456</a>           { 46.27298,  6.02260 }, { 46.72577,  6.03738 }, { 47.62058,  7.46675 }, { 49.01778,  8.09927 },
<a class="jxr_linenumber" name="L457" href="#L457">457</a>           { 49.20195,  6.65822 }, { 49.44266,  5.89775 }, { 49.98537,  4.79922 }
<a class="jxr_linenumber" name="L458" href="#L458">458</a>         });
<a class="jxr_linenumber" name="L459" href="#L459">459</a>         SphericalPolygonsSet corsica = buildSimpleZone(<strong class="jxr_keyword">new</strong> <strong class="jxr_keyword">double</strong>[][] {
<a class="jxr_linenumber" name="L460" href="#L460">460</a>           { 42.15249,  9.56001 }, { 43.00998,  9.39000 }, { 42.62812,  8.74600 }, { 42.25651,  8.54421 },
<a class="jxr_linenumber" name="L461" href="#L461">461</a>           { 41.58361,  8.77572 }, { 41.38000,  9.22975 }
<a class="jxr_linenumber" name="L462" href="#L462">462</a>         });
<a class="jxr_linenumber" name="L463" href="#L463">463</a>         RegionFactory&lt;Sphere2D&gt; factory = <strong class="jxr_keyword">new</strong> RegionFactory&lt;Sphere2D&gt;();
<a class="jxr_linenumber" name="L464" href="#L464">464</a>         SphericalPolygonsSet zone = (SphericalPolygonsSet) factory.union(continental, corsica);
<a class="jxr_linenumber" name="L465" href="#L465">465</a>         EnclosingBall&lt;Sphere2D, S2Point&gt; enclosing = zone.getEnclosingCap();
<a class="jxr_linenumber" name="L466" href="#L466">466</a>         Vector3D enclosingCenter = ((S2Point) enclosing.getCenter()).getVector();
<a class="jxr_linenumber" name="L467" href="#L467">467</a> 
<a class="jxr_linenumber" name="L468" href="#L468">468</a>         <strong class="jxr_keyword">double</strong> step = FastMath.toRadians(0.1);
<a class="jxr_linenumber" name="L469" href="#L469">469</a>         <strong class="jxr_keyword">for</strong> (Vertex loopStart : zone.getBoundaryLoops()) {
<a class="jxr_linenumber" name="L470" href="#L470">470</a>             <strong class="jxr_keyword">int</strong> count = 0;
<a class="jxr_linenumber" name="L471" href="#L471">471</a>             <strong class="jxr_keyword">for</strong> (Vertex v = loopStart; count == 0 || v != loopStart; v = v.getOutgoing().getEnd()) {
<a class="jxr_linenumber" name="L472" href="#L472">472</a>                 ++count;
<a class="jxr_linenumber" name="L473" href="#L473">473</a>                 <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; FastMath.ceil(v.getOutgoing().getLength() / step); ++i) {
<a class="jxr_linenumber" name="L474" href="#L474">474</a>                     Vector3D p = v.getOutgoing().getPointAt(i * step);
<a class="jxr_linenumber" name="L475" href="#L475">475</a>                     Assert.assertTrue(Vector3D.angle(p, enclosingCenter) &lt;= enclosing.getRadius());
<a class="jxr_linenumber" name="L476" href="#L476">476</a>                 }
<a class="jxr_linenumber" name="L477" href="#L477">477</a>             }
<a class="jxr_linenumber" name="L478" href="#L478">478</a>         }
<a class="jxr_linenumber" name="L479" href="#L479">479</a> 
<a class="jxr_linenumber" name="L480" href="#L480">480</a>         S2Point supportPointA = s2Point(48.68416, -4.59234);
<a class="jxr_linenumber" name="L481" href="#L481">481</a>         S2Point supportPointB = s2Point(41.38000,  9.22975);
<a class="jxr_linenumber" name="L482" href="#L482">482</a>         Assert.assertEquals(enclosing.getRadius(), supportPointA.distance(enclosing.getCenter()), 1.0e-10);
<a class="jxr_linenumber" name="L483" href="#L483">483</a>         Assert.assertEquals(enclosing.getRadius(), supportPointB.distance(enclosing.getCenter()), 1.0e-10);
<a class="jxr_linenumber" name="L484" href="#L484">484</a>         Assert.assertEquals(0.5 * supportPointA.distance(supportPointB), enclosing.getRadius(), 1.0e-10);
<a class="jxr_linenumber" name="L485" href="#L485">485</a>         Assert.assertEquals(2, enclosing.getSupportSize());
<a class="jxr_linenumber" name="L486" href="#L486">486</a> 
<a class="jxr_linenumber" name="L487" href="#L487">487</a>         EnclosingBall&lt;Sphere2D, S2Point&gt; continentalInscribed =
<a class="jxr_linenumber" name="L488" href="#L488">488</a>                 ((SphericalPolygonsSet) factory.getComplement(continental)).getEnclosingCap();
<a class="jxr_linenumber" name="L489" href="#L489">489</a>         Vector3D continentalCenter = ((S2Point) continentalInscribed.getCenter()).getVector();
<a class="jxr_linenumber" name="L490" href="#L490">490</a>         Assert.assertEquals(2.2, FastMath.toDegrees(FastMath.PI - continentalInscribed.getRadius()), 0.1);
<a class="jxr_linenumber" name="L491" href="#L491">491</a>         <strong class="jxr_keyword">for</strong> (Vertex loopStart : continental.getBoundaryLoops()) {
<a class="jxr_linenumber" name="L492" href="#L492">492</a>             <strong class="jxr_keyword">int</strong> count = 0;
<a class="jxr_linenumber" name="L493" href="#L493">493</a>             <strong class="jxr_keyword">for</strong> (Vertex v = loopStart; count == 0 || v != loopStart; v = v.getOutgoing().getEnd()) {
<a class="jxr_linenumber" name="L494" href="#L494">494</a>                 ++count;
<a class="jxr_linenumber" name="L495" href="#L495">495</a>                 <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; FastMath.ceil(v.getOutgoing().getLength() / step); ++i) {
<a class="jxr_linenumber" name="L496" href="#L496">496</a>                     Vector3D p = v.getOutgoing().getPointAt(i * step);
<a class="jxr_linenumber" name="L497" href="#L497">497</a>                     Assert.assertTrue(Vector3D.angle(p, continentalCenter) &lt;= continentalInscribed.getRadius());
<a class="jxr_linenumber" name="L498" href="#L498">498</a>                 }
<a class="jxr_linenumber" name="L499" href="#L499">499</a>             }
<a class="jxr_linenumber" name="L500" href="#L500">500</a>         }
<a class="jxr_linenumber" name="L501" href="#L501">501</a> 
<a class="jxr_linenumber" name="L502" href="#L502">502</a>         EnclosingBall&lt;Sphere2D, S2Point&gt; corsicaInscribed =
<a class="jxr_linenumber" name="L503" href="#L503">503</a>                 ((SphericalPolygonsSet) factory.getComplement(corsica)).getEnclosingCap();
<a class="jxr_linenumber" name="L504" href="#L504">504</a>         Vector3D corsicaCenter = ((S2Point) corsicaInscribed.getCenter()).getVector();
<a class="jxr_linenumber" name="L505" href="#L505">505</a>         Assert.assertEquals(0.34, FastMath.toDegrees(FastMath.PI - corsicaInscribed.getRadius()), 0.01);
<a class="jxr_linenumber" name="L506" href="#L506">506</a>         <strong class="jxr_keyword">for</strong> (Vertex loopStart : corsica.getBoundaryLoops()) {
<a class="jxr_linenumber" name="L507" href="#L507">507</a>             <strong class="jxr_keyword">int</strong> count = 0;
<a class="jxr_linenumber" name="L508" href="#L508">508</a>             <strong class="jxr_keyword">for</strong> (Vertex v = loopStart; count == 0 || v != loopStart; v = v.getOutgoing().getEnd()) {
<a class="jxr_linenumber" name="L509" href="#L509">509</a>                 ++count;
<a class="jxr_linenumber" name="L510" href="#L510">510</a>                 <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; FastMath.ceil(v.getOutgoing().getLength() / step); ++i) {
<a class="jxr_linenumber" name="L511" href="#L511">511</a>                     Vector3D p = v.getOutgoing().getPointAt(i * step);
<a class="jxr_linenumber" name="L512" href="#L512">512</a>                     Assert.assertTrue(Vector3D.angle(p, corsicaCenter) &lt;= corsicaInscribed.getRadius());
<a class="jxr_linenumber" name="L513" href="#L513">513</a>                 }
<a class="jxr_linenumber" name="L514" href="#L514">514</a>             }
<a class="jxr_linenumber" name="L515" href="#L515">515</a>         }
<a class="jxr_linenumber" name="L516" href="#L516">516</a> 
<a class="jxr_linenumber" name="L517" href="#L517">517</a>     }
<a class="jxr_linenumber" name="L518" href="#L518">518</a> 
<a class="jxr_linenumber" name="L519" href="#L519">519</a>     <strong class="jxr_keyword">private</strong> SubCircle create(Vector3D pole, Vector3D x, Vector3D y,
<a class="jxr_linenumber" name="L520" href="#L520">520</a>                              <strong class="jxr_keyword">double</strong> tolerance, <strong class="jxr_keyword">double</strong> ... limits) {
<a class="jxr_linenumber" name="L521" href="#L521">521</a>         RegionFactory&lt;Sphere1D&gt; factory = <strong class="jxr_keyword">new</strong> RegionFactory&lt;Sphere1D&gt;();
<a class="jxr_linenumber" name="L522" href="#L522">522</a>         Circle circle = <strong class="jxr_keyword">new</strong> Circle(pole, tolerance);
<a class="jxr_linenumber" name="L523" href="#L523">523</a>         Circle phased =
<a class="jxr_linenumber" name="L524" href="#L524">524</a>                 (Circle) Circle.getTransform(<strong class="jxr_keyword">new</strong> Rotation(circle.getXAxis(), circle.getYAxis(), x, y)).apply(circle);
<a class="jxr_linenumber" name="L525" href="#L525">525</a>         ArcsSet set = (ArcsSet) factory.getComplement(<strong class="jxr_keyword">new</strong> ArcsSet(tolerance));
<a class="jxr_linenumber" name="L526" href="#L526">526</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; limits.length; i += 2) {
<a class="jxr_linenumber" name="L527" href="#L527">527</a>             set = (ArcsSet) factory.union(set, <strong class="jxr_keyword">new</strong> ArcsSet(limits[i], limits[i + 1], tolerance));
<a class="jxr_linenumber" name="L528" href="#L528">528</a>         }
<a class="jxr_linenumber" name="L529" href="#L529">529</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> SubCircle(phased, set);
<a class="jxr_linenumber" name="L530" href="#L530">530</a>     }
<a class="jxr_linenumber" name="L531" href="#L531">531</a> 
<a class="jxr_linenumber" name="L532" href="#L532">532</a>     <strong class="jxr_keyword">private</strong> SphericalPolygonsSet buildSimpleZone(<strong class="jxr_keyword">double</strong>[][] points) {
<a class="jxr_linenumber" name="L533" href="#L533">533</a>         <strong class="jxr_keyword">final</strong> S2Point[] vertices = <strong class="jxr_keyword">new</strong> S2Point[points.length];
<a class="jxr_linenumber" name="L534" href="#L534">534</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; points.length; ++i) {
<a class="jxr_linenumber" name="L535" href="#L535">535</a>             vertices[i] = s2Point(points[i][0], points[i][1]);
<a class="jxr_linenumber" name="L536" href="#L536">536</a>         }
<a class="jxr_linenumber" name="L537" href="#L537">537</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> SphericalPolygonsSet(1.0e-10, vertices);
<a class="jxr_linenumber" name="L538" href="#L538">538</a>     }
<a class="jxr_linenumber" name="L539" href="#L539">539</a> 
<a class="jxr_linenumber" name="L540" href="#L540">540</a>     <strong class="jxr_keyword">private</strong> S2Point s2Point(<strong class="jxr_keyword">double</strong> latitude, <strong class="jxr_keyword">double</strong> longitude) {
<a class="jxr_linenumber" name="L541" href="#L541">541</a>         <strong class="jxr_keyword">return</strong> <strong class="jxr_keyword">new</strong> S2Point(FastMath.toRadians(longitude), FastMath.toRadians(90.0 - latitude));
<a class="jxr_linenumber" name="L542" href="#L542">542</a>     }
<a class="jxr_linenumber" name="L543" href="#L543">543</a> 
<a class="jxr_linenumber" name="L544" href="#L544">544</a> }
</pre>
<hr/>
<div id="footer">Copyright &#169; 2003&#x2013;2016 <a href="http://www.apache.org/">The Apache Software Foundation</a>. All rights reserved.</div>
</body>
</html>
