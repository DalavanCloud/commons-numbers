<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> * Licensed to the Apache Software Foundation (ASF) under one or more<a name="line.2"></a>
<span class="sourceLineNo">003</span> * contributor license agreements.  See the NOTICE file distributed with<a name="line.3"></a>
<span class="sourceLineNo">004</span> * this work for additional information regarding copyright ownership.<a name="line.4"></a>
<span class="sourceLineNo">005</span> * The ASF licenses this file to You under the Apache License, Version 2.0<a name="line.5"></a>
<span class="sourceLineNo">006</span> * (the "License"); you may not use this file except in compliance with<a name="line.6"></a>
<span class="sourceLineNo">007</span> * the License.  You may obtain a copy of the License at<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.apache.org/licenses/LICENSE-2.0<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Unless required by applicable law or agreed to in writing, software<a name="line.11"></a>
<span class="sourceLineNo">012</span> * distributed under the License is distributed on an "AS IS" BASIS,<a name="line.12"></a>
<span class="sourceLineNo">013</span> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<a name="line.13"></a>
<span class="sourceLineNo">014</span> * See the License for the specific language governing permissions and<a name="line.14"></a>
<span class="sourceLineNo">015</span> * limitations under the License.<a name="line.15"></a>
<span class="sourceLineNo">016</span> */<a name="line.16"></a>
<span class="sourceLineNo">017</span>package org.apache.commons.math3.ode.sampling;<a name="line.17"></a>
<span class="sourceLineNo">018</span><a name="line.18"></a>
<span class="sourceLineNo">019</span><a name="line.19"></a>
<span class="sourceLineNo">020</span>import org.apache.commons.math3.exception.DimensionMismatchException;<a name="line.20"></a>
<span class="sourceLineNo">021</span>import org.apache.commons.math3.exception.MaxCountExceededException;<a name="line.21"></a>
<span class="sourceLineNo">022</span>import org.apache.commons.math3.exception.NoBracketingException;<a name="line.22"></a>
<span class="sourceLineNo">023</span>import org.apache.commons.math3.exception.NumberIsTooSmallException;<a name="line.23"></a>
<span class="sourceLineNo">024</span>import org.apache.commons.math3.ode.FirstOrderIntegrator;<a name="line.24"></a>
<span class="sourceLineNo">025</span>import org.apache.commons.math3.ode.TestProblemAbstract;<a name="line.25"></a>
<span class="sourceLineNo">026</span>import org.apache.commons.math3.util.FastMath;<a name="line.26"></a>
<span class="sourceLineNo">027</span>import org.junit.Assert;<a name="line.27"></a>
<span class="sourceLineNo">028</span><a name="line.28"></a>
<span class="sourceLineNo">029</span>public class StepInterpolatorTestUtils {<a name="line.29"></a>
<span class="sourceLineNo">030</span><a name="line.30"></a>
<span class="sourceLineNo">031</span>    public static void checkDerivativesConsistency(final FirstOrderIntegrator integrator,<a name="line.31"></a>
<span class="sourceLineNo">032</span>                                                   final TestProblemAbstract problem,<a name="line.32"></a>
<span class="sourceLineNo">033</span>                                                   final double threshold)<a name="line.33"></a>
<span class="sourceLineNo">034</span>        throws DimensionMismatchException, NumberIsTooSmallException,<a name="line.34"></a>
<span class="sourceLineNo">035</span>               MaxCountExceededException, NoBracketingException {<a name="line.35"></a>
<span class="sourceLineNo">036</span>        integrator.addStepHandler(new StepHandler() {<a name="line.36"></a>
<span class="sourceLineNo">037</span><a name="line.37"></a>
<span class="sourceLineNo">038</span>            public void handleStep(StepInterpolator interpolator, boolean isLast)<a name="line.38"></a>
<span class="sourceLineNo">039</span>                throws MaxCountExceededException {<a name="line.39"></a>
<span class="sourceLineNo">040</span><a name="line.40"></a>
<span class="sourceLineNo">041</span>                final double h = 0.001 * (interpolator.getCurrentTime() - interpolator.getPreviousTime());<a name="line.41"></a>
<span class="sourceLineNo">042</span>                final double t = interpolator.getCurrentTime() - 300 * h;<a name="line.42"></a>
<span class="sourceLineNo">043</span><a name="line.43"></a>
<span class="sourceLineNo">044</span>                if (FastMath.abs(h) &lt; 10 * FastMath.ulp(t)) {<a name="line.44"></a>
<span class="sourceLineNo">045</span>                    return;<a name="line.45"></a>
<span class="sourceLineNo">046</span>                }<a name="line.46"></a>
<span class="sourceLineNo">047</span><a name="line.47"></a>
<span class="sourceLineNo">048</span>                interpolator.setInterpolatedTime(t - 4 * h);<a name="line.48"></a>
<span class="sourceLineNo">049</span>                final double[] yM4h = interpolator.getInterpolatedState().clone();<a name="line.49"></a>
<span class="sourceLineNo">050</span>                interpolator.setInterpolatedTime(t - 3 * h);<a name="line.50"></a>
<span class="sourceLineNo">051</span>                final double[] yM3h = interpolator.getInterpolatedState().clone();<a name="line.51"></a>
<span class="sourceLineNo">052</span>                interpolator.setInterpolatedTime(t - 2 * h);<a name="line.52"></a>
<span class="sourceLineNo">053</span>                final double[] yM2h = interpolator.getInterpolatedState().clone();<a name="line.53"></a>
<span class="sourceLineNo">054</span>                interpolator.setInterpolatedTime(t - h);<a name="line.54"></a>
<span class="sourceLineNo">055</span>                final double[] yM1h = interpolator.getInterpolatedState().clone();<a name="line.55"></a>
<span class="sourceLineNo">056</span>                interpolator.setInterpolatedTime(t + h);<a name="line.56"></a>
<span class="sourceLineNo">057</span>                final double[] yP1h = interpolator.getInterpolatedState().clone();<a name="line.57"></a>
<span class="sourceLineNo">058</span>                interpolator.setInterpolatedTime(t + 2 * h);<a name="line.58"></a>
<span class="sourceLineNo">059</span>                final double[] yP2h = interpolator.getInterpolatedState().clone();<a name="line.59"></a>
<span class="sourceLineNo">060</span>                interpolator.setInterpolatedTime(t + 3 * h);<a name="line.60"></a>
<span class="sourceLineNo">061</span>                final double[] yP3h = interpolator.getInterpolatedState().clone();<a name="line.61"></a>
<span class="sourceLineNo">062</span>                interpolator.setInterpolatedTime(t + 4 * h);<a name="line.62"></a>
<span class="sourceLineNo">063</span>                final double[] yP4h = interpolator.getInterpolatedState().clone();<a name="line.63"></a>
<span class="sourceLineNo">064</span><a name="line.64"></a>
<span class="sourceLineNo">065</span>                interpolator.setInterpolatedTime(t);<a name="line.65"></a>
<span class="sourceLineNo">066</span>                final double[] yDot = interpolator.getInterpolatedDerivatives();<a name="line.66"></a>
<span class="sourceLineNo">067</span><a name="line.67"></a>
<span class="sourceLineNo">068</span>                for (int i = 0; i &lt; yDot.length; ++i) {<a name="line.68"></a>
<span class="sourceLineNo">069</span>                    final double approYDot = ( -3 * (yP4h[i] - yM4h[i]) +<a name="line.69"></a>
<span class="sourceLineNo">070</span>                                               32 * (yP3h[i] - yM3h[i]) +<a name="line.70"></a>
<span class="sourceLineNo">071</span>                                             -168 * (yP2h[i] - yM2h[i]) +<a name="line.71"></a>
<span class="sourceLineNo">072</span>                                              672 * (yP1h[i] - yM1h[i])) / (840 * h);<a name="line.72"></a>
<span class="sourceLineNo">073</span>                    Assert.assertEquals(approYDot, yDot[i], threshold);<a name="line.73"></a>
<span class="sourceLineNo">074</span>                }<a name="line.74"></a>
<span class="sourceLineNo">075</span><a name="line.75"></a>
<span class="sourceLineNo">076</span>            }<a name="line.76"></a>
<span class="sourceLineNo">077</span><a name="line.77"></a>
<span class="sourceLineNo">078</span>            public void init(double t0, double[] y0, double t) {<a name="line.78"></a>
<span class="sourceLineNo">079</span>            }<a name="line.79"></a>
<span class="sourceLineNo">080</span><a name="line.80"></a>
<span class="sourceLineNo">081</span>        });<a name="line.81"></a>
<span class="sourceLineNo">082</span><a name="line.82"></a>
<span class="sourceLineNo">083</span>        integrator.integrate(problem,<a name="line.83"></a>
<span class="sourceLineNo">084</span>                             problem.getInitialTime(), problem.getInitialState(),<a name="line.84"></a>
<span class="sourceLineNo">085</span>                             problem.getFinalTime(), new double[problem.getDimension()]);<a name="line.85"></a>
<span class="sourceLineNo">086</span><a name="line.86"></a>
<span class="sourceLineNo">087</span>    }<a name="line.87"></a>
<span class="sourceLineNo">088</span>}<a name="line.88"></a>
<span class="sourceLineNo">089</span><a name="line.89"></a>




























































</pre>
</div>
</body>
</html>
